[{"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/index.js":"1","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/App.js":"2","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Store.js":"3","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/TypeStatusReducer.js":"4","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DirectionURL.js":"5","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/LoginStatusReducer.js":"6","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/DistrictReducer.js":"7","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ProvinceReducer.js":"8","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/InfoUserReducer.js":"9","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ListShiftReducer.js":"10","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ObjectEditShiftReducer.js":"11","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RoleReducer.js":"12","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ListProductReducer.js":"13","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/chooseTypeProduct.js":"14","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/typeProductReducer.js":"15","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/TypeProductValueReducer.js":"16","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/AlertReducer.js":"17","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ConfirmModalReducer.js":"18","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/InfoUpdateProduct.js":"19","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddShiftReducer.js":"20","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusConfirmReducer.js":"21","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusEditShiftReducer.js":"22","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusModalConfirmPassword.js":"23","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusDarkModeReducer.js":"24","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusDeleteConfirmReducer.js":"25","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusEditTypeReducer.js":"26","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusUpdateGoodReducer.js":"27","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddTypeReducer.js":"28","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusUpdateEmployeeReducer.js":"29","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusYesConfirmReducer.js":"30","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddEmployeeReducer.js":"31","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/GoodManager/UpdateTypeStatus.js":"32","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateNextWeekTimeKeepingValue.js":"33","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/GoodManager/AddGoodStatus.js":"34","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusPayMoneyStatus.js":"35","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/employeeListReducer.js":"36","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/addNextWeekTimeKeepingStatus.js":"37","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/nextWeekTimeKeepingReducer.js":"38","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/employeeSackedListReducer.js":"39","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/listShiftAssignReducer.js":"40","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/currentEditEmployeeReducer.js":"41","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateNextWeekTimeKeepingStatus.js":"42","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/addTimeKeepingStatus.js":"43","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateTimeKeeperValue.js":"44","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/StatusShowHistoryRecieptReducer.js":"45","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/currentEmployeeViewValue.js":"46","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/ListRecieptReducer.js":"47","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/InfomationBillEdit.js":"48","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/StatusEditInfomationBill.js":"49","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/TypeReciept.js":"50","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/ShoppingBagsReducer.js":"51","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/TypeByDate.js":"52","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/SearchReducer.js":"53","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/ListRecieptDelete.js":"54","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/StatusSelectAll.js":"55","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Dashboard/MonthSelectReducer.js":"56","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/ObjectEditCoupon.js":"57","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Dashboard/TypeHeaderDashboard.js":"58","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Dashboard/TypeTimeDashboard.js":"59","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Dashboard/YearSelectReducer.js":"60","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/StatusEditCoupon.js":"61","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/StatusModalAddCoupon.js":"62","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateTimeKeepingStatus.js":"63","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SidebarOpenStatus.js":"64","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/listTimeKeepingReducer.js":"65","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/ListCoupon.js":"66","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/RegulationReducer.js":"67","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Register.js":"68","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/ForgotPassword.js":"69","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Login.js":"70","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Body.js":"71","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/LoginWithEmployee.js":"72","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DashboardURL.js":"73","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Partials/SideNavBar.js":"74","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodManager.js":"75","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeeManager.js":"76","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/Profile.js":"77","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/SellProduct.js":"78","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/ReiceiptManager.js":"79","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/DashBoard.js":"80","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/ControlReciept.js":"81","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateTimeKeepingModal.js":"82","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/SearchReceipt.js":"83","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/ProductStatis.js":"84","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/ErrorReceipt.js":"85","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/SalaryStats.js":"86","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/CouponManager.js":"87","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/GroupButtonDashboard.js":"88","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/HistoryReciept.js":"89","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/ShoppingBags.js":"90","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/TotalMoney.js":"91","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/DaiLyMoneyTracking.js":"92","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/DateReciept.js":"93","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/Statistic.js":"94","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/StatusReceiptType.js":"95","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/TableReciept.js":"96","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/Print.js":"97","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/Tabs.js":"98","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ModalAddCoupon.js":"99","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/Regulation.js":"100","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ModalAdd.js":"101","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileSetting.js":"102","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ChangePassword.js":"103","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileDetail.js":"104","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileCoupon.js":"105","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileHeader.js":"106","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddTimeKeeperModal.js":"107","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ListShift.js":"108","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/TimekeepingTable.js":"109","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/NoJobEmployee.js":"110","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UnShiftEmployee.js":"111","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateNextWeekTimeKeeping.js":"112","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddNextWeekTimeKeeping.js":"113","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/FixedCalendar.js":"114","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/PayMoneyModal.js":"115","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateEmployeeModal.js":"116","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddEmployeeModal.js":"117","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/OptionMonth.js":"118","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/TableReciept.js":"119","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/ComponentToPrint.js":"120","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/OptionYear.js":"121","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/GroupButton.js":"122","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/BaseOptionChart.js":"123","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/DarkMode.js":"124","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/fakeData.js":"125","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeTableHeader.js":"126","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/FixedCalendarCell.js":"127","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeInformation.js":"128","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/SackedEmployeeMenu.js":"129","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeToolbar.js":"130","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/SearchNotFound.js":"131","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Label.js":"132","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Page.js":"133","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Scrollbar.js":"134","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/ConfirmModal.js":"135","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/EditTypeModal.js":"136","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/AddTypeModal.js":"137","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/SearchBar.js":"138","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeMoreMenu.js":"139","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/UpdateTypeModal.js":"140","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/AddGoodModal.js":"141","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/UpdateGoodModal.js":"142","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/GoodTable.js":"143","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/TableRow.js":"144","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/GoodManager/ExcelInstructionStatus.js":"145","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/ExportRevenue.js":"146","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/GoodTableDisplay.js":"147","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/SortByTable.js":"148","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/ExcelInstruction.js":"149","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/TypeManager.js":"150","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/TypeInfo.js":"151","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/addEmployeeToShiftStatus.js":"152","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/currentShiftInfoReducer.js":"153","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddEmployeeToShift.js":"154"},{"size":294,"mtime":1639227945232,"results":"155","hashOfConfig":"156"},{"size":6058,"mtime":1639228287075,"results":"157","hashOfConfig":"156"},{"size":7801,"mtime":1639457897945,"results":"158","hashOfConfig":"156"},{"size":331,"mtime":1633861365892,"results":"159","hashOfConfig":"156"},{"size":2136,"mtime":1633861365892,"results":"160","hashOfConfig":"156"},{"size":284,"mtime":1633526918189,"results":"161","hashOfConfig":"156"},{"size":364,"mtime":1634708338277,"results":"162","hashOfConfig":"156"},{"size":372,"mtime":1634554437218,"results":"163","hashOfConfig":"156"},{"size":3099,"mtime":1637646892564,"results":"164","hashOfConfig":"156"},{"size":1136,"mtime":1638277719531,"results":"165","hashOfConfig":"156"},{"size":330,"mtime":1634050541311,"results":"166","hashOfConfig":"156"},{"size":304,"mtime":1634554437218,"results":"167","hashOfConfig":"156"},{"size":3104,"mtime":1639228287139,"results":"168","hashOfConfig":"156"},{"size":349,"mtime":1635745215659,"results":"169","hashOfConfig":"156"},{"size":1640,"mtime":1639228287141,"results":"170","hashOfConfig":"156"},{"size":643,"mtime":1634797384962,"results":"171","hashOfConfig":"156"},{"size":643,"mtime":1635403823793,"results":"172","hashOfConfig":"156"},{"size":468,"mtime":1634555131980,"results":"173","hashOfConfig":"156"},{"size":533,"mtime":1637134171174,"results":"174","hashOfConfig":"156"},{"size":293,"mtime":1633939930791,"results":"175","hashOfConfig":"156"},{"size":293,"mtime":1634554437219,"results":"176","hashOfConfig":"156"},{"size":302,"mtime":1634050541312,"results":"177","hashOfConfig":"156"},{"size":360,"mtime":1634554437221,"results":"178","hashOfConfig":"156"},{"size":292,"mtime":1634050541312,"results":"179","hashOfConfig":"156"},{"size":378,"mtime":1634554437220,"results":"180","hashOfConfig":"156"},{"size":299,"mtime":1634554437220,"results":"181","hashOfConfig":"156"},{"size":313,"mtime":1635414209104,"results":"182","hashOfConfig":"156"},{"size":294,"mtime":1634554437218,"results":"183","hashOfConfig":"156"},{"size":329,"mtime":1634651182404,"results":"184","hashOfConfig":"156"},{"size":338,"mtime":1634555131981,"results":"185","hashOfConfig":"156"},{"size":314,"mtime":1634651182398,"results":"186","hashOfConfig":"156"},{"size":313,"mtime":1638277106499,"results":"187","hashOfConfig":"156"},{"size":960,"mtime":1637134171171,"results":"188","hashOfConfig":"156"},{"size":298,"mtime":1638277106498,"results":"189","hashOfConfig":"156"},{"size":314,"mtime":1634651182400,"results":"190","hashOfConfig":"156"},{"size":2511,"mtime":1637134171169,"results":"191","hashOfConfig":"156"},{"size":370,"mtime":1637134171162,"results":"192","hashOfConfig":"156"},{"size":2247,"mtime":1637134171171,"results":"193","hashOfConfig":"156"},{"size":2335,"mtime":1638277106495,"results":"194","hashOfConfig":"156"},{"size":2157,"mtime":1639457897944,"results":"195","hashOfConfig":"156"},{"size":869,"mtime":1636527068501,"results":"196","hashOfConfig":"156"},{"size":385,"mtime":1637134171171,"results":"197","hashOfConfig":"156"},{"size":329,"mtime":1637134171164,"results":"198","hashOfConfig":"156"},{"size":887,"mtime":1637134171172,"results":"199","hashOfConfig":"156"},{"size":331,"mtime":1636527068504,"results":"200","hashOfConfig":"156"},{"size":380,"mtime":1638277106494,"results":"201","hashOfConfig":"156"},{"size":3252,"mtime":1638277719533,"results":"202","hashOfConfig":"156"},{"size":347,"mtime":1636527068502,"results":"203","hashOfConfig":"156"},{"size":331,"mtime":1636527068504,"results":"204","hashOfConfig":"156"},{"size":527,"mtime":1636697502427,"results":"205","hashOfConfig":"156"},{"size":1299,"mtime":1636911108353,"results":"206","hashOfConfig":"156"},{"size":328,"mtime":1636697502426,"results":"207","hashOfConfig":"156"},{"size":360,"mtime":1636911108351,"results":"208","hashOfConfig":"156"},{"size":613,"mtime":1636911108350,"results":"209","hashOfConfig":"156"},{"size":370,"mtime":1637134171180,"results":"210","hashOfConfig":"156"},{"size":418,"mtime":1638277719529,"results":"211","hashOfConfig":"156"},{"size":316,"mtime":1638277719531,"results":"212","hashOfConfig":"156"},{"size":421,"mtime":1638277719529,"results":"213","hashOfConfig":"156"},{"size":413,"mtime":1638277719530,"results":"214","hashOfConfig":"156"},{"size":486,"mtime":1638277719530,"results":"215","hashOfConfig":"156"},{"size":375,"mtime":1638277719532,"results":"216","hashOfConfig":"156"},{"size":324,"mtime":1638277719532,"results":"217","hashOfConfig":"156"},{"size":344,"mtime":1637134171172,"results":"218","hashOfConfig":"156"},{"size":334,"mtime":1639227945230,"results":"219","hashOfConfig":"156"},{"size":3406,"mtime":1639227945225,"results":"220","hashOfConfig":"156"},{"size":1386,"mtime":1639228287140,"results":"221","hashOfConfig":"156"},{"size":340,"mtime":1639227945229,"results":"222","hashOfConfig":"156"},{"size":14923,"mtime":1639325472005,"results":"223","hashOfConfig":"156"},{"size":12286,"mtime":1639325472003,"results":"224","hashOfConfig":"156"},{"size":15094,"mtime":1639325472004,"results":"225","hashOfConfig":"156"},{"size":1374,"mtime":1639228287085,"results":"226","hashOfConfig":"156"},{"size":8991,"mtime":1639325472047,"results":"227","hashOfConfig":"156"},{"size":1538,"mtime":1638277106501,"results":"228","hashOfConfig":"156"},{"size":15203,"mtime":1639228287127,"results":"229","hashOfConfig":"156"},{"size":38027,"mtime":1639228287109,"results":"230","hashOfConfig":"156"},{"size":29286,"mtime":1639457897937,"results":"231","hashOfConfig":"156"},{"size":5019,"mtime":1638277719519,"results":"232","hashOfConfig":"156"},{"size":16147,"mtime":1639228287136,"results":"233","hashOfConfig":"156"},{"size":2022,"mtime":1638277106486,"results":"234","hashOfConfig":"156"},{"size":4179,"mtime":1639228287086,"results":"235","hashOfConfig":"156"},{"size":12339,"mtime":1637134171154,"results":"236","hashOfConfig":"156"},{"size":16533,"mtime":1639228287107,"results":"237","hashOfConfig":"156"},{"size":886,"mtime":1639227945209,"results":"238","hashOfConfig":"156"},{"size":8088,"mtime":1639228287090,"results":"239","hashOfConfig":"156"},{"size":3280,"mtime":1639228287089,"results":"240","hashOfConfig":"156"},{"size":5875,"mtime":1639228287091,"results":"241","hashOfConfig":"156"},{"size":11522,"mtime":1639228287086,"results":"242","hashOfConfig":"156"},{"size":3808,"mtime":1638277719583,"results":"243","hashOfConfig":"156"},{"size":1136,"mtime":1636697502419,"results":"244","hashOfConfig":"156"},{"size":3799,"mtime":1639228287137,"results":"245","hashOfConfig":"156"},{"size":3998,"mtime":1639457897936,"results":"246","hashOfConfig":"156"},{"size":6556,"mtime":1639228287086,"results":"247","hashOfConfig":"156"},{"size":8865,"mtime":1639227945208,"results":"248","hashOfConfig":"156"},{"size":19532,"mtime":1639228287093,"results":"249","hashOfConfig":"156"},{"size":4023,"mtime":1639228287132,"results":"250","hashOfConfig":"156"},{"size":29193,"mtime":1639228287133,"results":"251","hashOfConfig":"156"},{"size":15420,"mtime":1639325577927,"results":"252","hashOfConfig":"156"},{"size":1290,"mtime":1639228287137,"results":"253","hashOfConfig":"156"},{"size":13637,"mtime":1639325472011,"results":"254","hashOfConfig":"156"},{"size":9057,"mtime":1639324211564,"results":"255","hashOfConfig":"156"},{"size":14855,"mtime":1639325472010,"results":"256","hashOfConfig":"156"},{"size":1116,"mtime":1636697502415,"results":"257","hashOfConfig":"156"},{"size":10229,"mtime":1639325472009,"results":"258","hashOfConfig":"156"},{"size":20902,"mtime":1639325472016,"results":"259","hashOfConfig":"156"},{"size":8610,"mtime":1639228287130,"results":"260","hashOfConfig":"156"},{"size":4333,"mtime":1638277719522,"results":"261","hashOfConfig":"156"},{"size":14272,"mtime":1639228287100,"results":"262","hashOfConfig":"156"},{"size":10145,"mtime":1639228287128,"results":"263","hashOfConfig":"156"},{"size":7335,"mtime":1639228287105,"results":"264","hashOfConfig":"156"},{"size":3949,"mtime":1639228287103,"results":"265","hashOfConfig":"156"},{"size":12190,"mtime":1639228287105,"results":"266","hashOfConfig":"156"},{"size":22774,"mtime":1639457897941,"results":"267","hashOfConfig":"156"},{"size":22039,"mtime":1639457897939,"results":"268","hashOfConfig":"156"},{"size":5750,"mtime":1639228287101,"results":"269","hashOfConfig":"156"},{"size":26523,"mtime":1639228287103,"results":"270","hashOfConfig":"156"},{"size":23922,"mtime":1639457897940,"results":"271","hashOfConfig":"156"},{"size":24331,"mtime":1639457897938,"results":"272","hashOfConfig":"156"},{"size":4319,"mtime":1638277719510,"results":"273","hashOfConfig":"156"},{"size":19603,"mtime":1639228287137,"results":"274","hashOfConfig":"156"},{"size":8023,"mtime":1639228287134,"results":"275","hashOfConfig":"156"},{"size":3141,"mtime":1638277719511,"results":"276","hashOfConfig":"156"},{"size":2996,"mtime":1639228287090,"results":"277","hashOfConfig":"156"},{"size":5404,"mtime":1638277106464,"results":"278","hashOfConfig":"156"},{"size":3038,"mtime":1634554437211,"results":"279","hashOfConfig":"156"},{"size":678,"mtime":1636297938177,"results":"280","hashOfConfig":"156"},{"size":1143,"mtime":1639228287101,"results":"281","hashOfConfig":"156"},{"size":12616,"mtime":1639457897940,"results":"282","hashOfConfig":"156"},{"size":7315,"mtime":1639227945176,"results":"283","hashOfConfig":"156"},{"size":7562,"mtime":1639324211544,"results":"284","hashOfConfig":"156"},{"size":2399,"mtime":1634651182377,"results":"285","hashOfConfig":"156"},{"size":0,"mtime":1634651182383,"results":"286","hashOfConfig":"156"},{"size":2373,"mtime":1634651182378,"results":"287","hashOfConfig":"156"},{"size":462,"mtime":1634651182380,"results":"288","hashOfConfig":"156"},{"size":1478,"mtime":1634651182382,"results":"289","hashOfConfig":"156"},{"size":3407,"mtime":1634555131980,"results":"290","hashOfConfig":"156"},{"size":4344,"mtime":1639228287112,"results":"291","hashOfConfig":"156"},{"size":6579,"mtime":1639228287112,"results":"292","hashOfConfig":"156"},{"size":5332,"mtime":1634554437193,"results":"293","hashOfConfig":"156"},{"size":8218,"mtime":1639324211541,"results":"294","hashOfConfig":"156"},{"size":12458,"mtime":1639228287122,"results":"295","hashOfConfig":"156"},{"size":35634,"mtime":1639457897942,"results":"296","hashOfConfig":"156"},{"size":42102,"mtime":1639457897943,"results":"297","hashOfConfig":"156"},{"size":3773,"mtime":1639227945186,"results":"298","hashOfConfig":"156"},{"size":14831,"mtime":1639228287116,"results":"299","hashOfConfig":"156"},{"size":343,"mtime":1639228287138,"results":"300","hashOfConfig":"156"},{"size":5562,"mtime":1639228287089,"results":"301","hashOfConfig":"156"},{"size":25815,"mtime":1639228287115,"results":"302","hashOfConfig":"156"},{"size":8967,"mtime":1639228287115,"results":"303","hashOfConfig":"156"},{"size":3984,"mtime":1639228287113,"results":"304","hashOfConfig":"156"},{"size":2661,"mtime":1639228287118,"results":"305","hashOfConfig":"156"},{"size":8940,"mtime":1639228287116,"results":"306","hashOfConfig":"156"},{"size":351,"mtime":1639457897943,"results":"307","hashOfConfig":"156"},{"size":503,"mtime":1639457897944,"results":"308","hashOfConfig":"156"},{"size":7887,"mtime":1639457897938,"results":"309","hashOfConfig":"156"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1evuik7",{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"342"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"390"},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"393"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"410"},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"417","messages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"419"},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448"},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456"},{"filePath":"457","messages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459"},{"filePath":"460","messages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462"},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"465","messages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467"},{"filePath":"468","messages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"470","messages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"472"},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475"},{"filePath":"476","messages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478"},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"488","messages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492"},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"495"},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":"498"},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"501"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":36,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504"},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510"},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518"},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521"},{"filePath":"522","messages":"523","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524"},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":88,"fixableErrorCount":0,"fixableWarningCount":0,"source":"527"},{"filePath":"528","messages":"529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"530","messages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532"},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535"},{"filePath":"536","messages":"537","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540"},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543"},{"filePath":"544","messages":"545","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551"},{"filePath":"552","messages":"553","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"554","messages":"555","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"556","messages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"558","messages":"559","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560"},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563"},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566"},{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569"},{"filePath":"570","messages":"571","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"572"},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"575"},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"578"},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581"},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584"},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"587"},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590"},{"filePath":"591","messages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593"},{"filePath":"594","messages":"595","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"599"},{"filePath":"600","messages":"601","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"602"},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"605"},{"filePath":"606","messages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"608","messages":"609","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"610","messages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"614"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617"},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"620"},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"623"},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"632","messages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"634","messages":"635","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"636"},{"filePath":"637","messages":"638","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639"},{"filePath":"640","messages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"642"},{"filePath":"643","messages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"645"},{"filePath":"646","messages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"648"},{"filePath":"649","messages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"651"},{"filePath":"652","messages":"653","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"654"},{"filePath":"655","messages":"656","errorCount":0,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"657"},{"filePath":"658","messages":"659","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"660"},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"663"},{"filePath":"664","messages":"665","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"666","messages":"667","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"668"},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"671"},{"filePath":"672","messages":"673","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"674"},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677"},{"filePath":"678","messages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"680"},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"683"},{"filePath":"684","messages":"685","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"686","messages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"690"},"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/index.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/App.js",["691","692","693"],"import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nimport DirectionURL from './Router/DirectionURL';\nimport './css/App.css'\nimport { connect } from 'react-redux'\nimport axios from 'axios';\nimport Alert from '@mui/material/Alert';\nimport { FiChevronRight, FiXSquare } from \"react-icons/fi\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  loadAllGood(dataProduct, dataJoin) {\n    var resultProduct = dataProduct;\n    var joinTypeInfor = dataJoin;\n\n    var listProductInfor = [];\n    for (let i = 0; i < resultProduct.length; i++) {\n      var typeIDList = [];\n      var joinType = '';\n      for (var j = 0; j < joinTypeInfor.length; j++) {\n        if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\n          resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) {\n          typeIDList.push(joinTypeInfor[j]._id.typeID);\n        }\n      }\n\n      listProductInfor.push(\n        {\n          ...resultProduct[i],\n          typeIDList: typeIDList,\n        });\n    }\n    this.props.getProductToReducer(listProductInfor);\n  }\n\n  async componentWillMount() {\n    if (localStorage.getItem('token') && localStorage.getItem('token') !== \"\") {\n      axios.post(`http://localhost:5000/refresh`, {\n        token: localStorage.getItem('token'),\n      })\n        .then(res => {\n          if (res.status === 200) {\n            if (res.data.data.isEmployee === false) {\n              this.props.setRole()\n              localStorage.setItem('token', res.data.token);\n              this.props.updateProfile(res.data.data);\n              this.props.updateRecieptUser(res.data.data.receipts)\n              this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n              this.props.updateCouponUser(res.data.data.coupons)\n              this.props.updateShiftTypes(res.data.data.shiftTypes)\n              this.props.changeLoginStatus();\n              this.props.getEmployee(res.data.data.employees);\n              // Phi\n              this.props.getTimeKeeping(res.data.data.timeKeeping);\n              this.loadAllGood(res.data.data.products, res.data.data.productJoinTypes);\n              if (res.data.data.regulation.length > 0)\n                this.props.setRegulation(res.data.data.regulation[0]);\n              else this.props.setRegulation({});\n              console.log(\"res.data\", res.data)\n            } else {\n              this.props.setRoleEmployee()\n              localStorage.setItem('token', res.data.token);\n              this.props.updateProfileEployee(res.data.data.employee[0], res.data.data.manager[0], res.data.data.store[0].storeName);\n              this.props.updateAvatar(res.data.data.employee[0].imgUrl ? res.data.data.employee[0].imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n              this.props.updateRecieptUser(res.data.data.receipts);\n              this.props.updateCouponUser(res.data.data.coupons)\n              this.props.changeLoginStatus();\n              this.props.showAlert(res.data.message, \"success\");\n            }\n          }\n        })\n        .catch(err => {\n        })\n    }\n  }\n\n  autoHideAlert = () => {\n    setTimeout(() => this.props.hideAlert(), 4000);\n  }\n\n  render() {\n    return (\n      <Router>\n        <DirectionURL></DirectionURL>\n        {this.props.alertReducer.status ? this.autoHideAlert() : null}\n        {this.props.alertReducer.status ? <Alert style={{ cursor: 'pointer' }} onClick={() => this.props.hideAlert()} className=\"message-error\" severity={this.props.alertReducer.typeMessage}>{this.props.alertReducer.message} — check it out! <FiXSquare></FiXSquare></Alert> : null}\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    isLogin: state.loginStatus,\n    alertReducer: state.alert,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    changeLoginStatus: () => {\n      dispatch({\n        type: \"CHANGE_LOGIN_STATUS\",\n      });\n    },\n    updateProvince: (data) => {\n      dispatch({\n        type: \"UPDATE_DATA\",\n        data: data,\n      })\n    },\n    updateRecieptUser: (data) => {\n      dispatch({\n        type: \"UPDATE_RECIEPT_USER\",\n        listReciept: data,\n      })\n    },\n    updateProfile: (data) => {\n      dispatch({\n        type: \"UPDATA_DATA_USER\",\n        data: data,\n      })\n    },\n    updateAvatar: (avatar) => {\n      dispatch({\n        type: \"UPDATE_AVATAR\",\n        avatar: avatar,\n      })\n    },\n    updateShiftTypes: (shiftTypes) => {\n      dispatch({\n        type: \"UPDATE_DATA_SHIFT_USER\",\n        shiftTypes: shiftTypes,\n      })\n    },\n    hideAlert: () => {\n      dispatch({\n        type: \"HIDE_ALERT\",\n      })\n    },\n    showAlert: (message, typeMessage) => {\n      dispatch({\n        type: \"SHOW_ALERT\",\n        message: message,\n        typeMessage: typeMessage,\n      })\n    },\n    getEmployee: (data) => {\n      dispatch({\n        type: \"GET_EMPLOYEE\",\n        employees: data,\n      });\n    },\n    setRole: () => {\n      dispatch({\n        type: \"ADMIN_ROLE\"\n      });\n    },\n    updateProfileEployee: (data, data1, storeName) => {\n      dispatch({\n        type: \"UPDATA_DATA_EMPLOYEE\",\n        data: data,\n        data1: data1,\n        storeName: storeName,\n      })\n    },\n    setRoleEmployee: () => {\n      dispatch({\n        type: \"EMPLOYEE_ROLE\",\n      });\n    },\n    getTimeKeeping: (data) => {\n      dispatch({\n        type: \"GET_TIMEKEEPER\",\n        data: data\n      });\n    },\n    getProductToReducer: (data) => {\n      dispatch({\n        type: \"GET_PRODUCT_AND_TYPE\",\n        data: data\n      });\n    },\n    setRegulation: (data) => {\n      dispatch({\n        type: \"SET_REGULATION\",\n        data: data,\n      });\n    },\n    updateCouponUser: (coupons) => {\n      dispatch({\n        type: \"UPDATE_COUPON_USER\",\n        coupons: coupons\n      })\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Store.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/TypeStatusReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DirectionURL.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/LoginStatusReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/DistrictReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ProvinceReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/InfoUserReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ListShiftReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ObjectEditShiftReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RoleReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ListProductReducer.js",["694","695","696","697","698","699","700","701","702"],"\nconst listProductInitialState = [\n    {\n        _id: {\n            productID: \"\", \n            importDate: \"\", \n            storeID: \"\",\n        },\n        name: \"\", \n        imgUrl: \"\", \n        quantity: \"\", \n        remain: \"\", \n        unit: \"\",\n        importPrice: \"\", \n        sellPrice: \"\", \n        expires: \"\",\n        typeIDList: [],\n    },\n],\n\n    listProductReducer = (state = listProductInitialState, action) => {\n        switch (action.type) {\n            case \"GET_PRODUCT_AND_TYPE\":\n                return {\n                    state: action.data\n                }\n            case \"ADD_PRODUCT\":\n                return {\n                    state: [...state.state, action.data]\n                }\n            case \"UPDATE_PRODUCT\":\n                var newState = [];\n                for(var i = 0 ; i < state.state.length; i++)\n                {\n                    if(state.state[i]._id.productID != action.data._id.productID)\n                    {\n                        newState.push(state.state[i]);\n                    }\n                    else \n                    {\n                        newState.push(action.data);\n                    }\n                }\n                return {\n                    state: newState\n                }\n            case \"DELETE_PRODUCT\":\n                var newState = [];\n                for(var i = 0 ; i < state.state.length; i++)\n                {\n                    if(state.state[i]._id.productID != action.data._id.productID)\n                    {\n                        newState.push(state.state[i]);\n                    }\n                    else \n                    {\n                        \n                    }\n                }\n                return {\n                    state: newState\n                }\n            case \"DECREASE_REMAIN_PRODUCT\": \n            {\n                var newState = [];\n                for(var i = 0 ; i < state.state.length; i++)\n                {\n                    if(state.state[i]._id.productID != action.data._id.productID)\n                    {\n                        newState.push(state.state[i]);\n                    }\n                    else \n                    {\n                        var decreaseVal = state.state[i];\n                        decreaseVal.remain = action.data.remain;\n                        newState.push(decreaseVal);\n                    }\n                }\n                return {\n                    state: newState\n                }\n            }\n            case \"DELETE_TYPE_PRODUCT\": \n            {\n                var newState = [];\n                for(var i = 0 ; i < state.state.length; i++)\n                {\n                    state.state[i].typeIDList = state.state[i].typeIDList.filter(function(item) {\n                        return item !== action.typeID;\n                    })\n                    newState.push(state.state[i]);\n                }\n                return {\n                    state: newState\n                }\n            }\n            default:\n                return state\n        }\n    }\n\nexport default listProductReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/chooseTypeProduct.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/typeProductReducer.js",["703","704","705","706"],"\nconst typeProductInitialState = [\n    {\n        _id: {\n            typeID: \"\",\n            storeID: \"\",\n        },\n        name: \"\",\n    },\n],\n\n    typeProductReducer = (state = typeProductInitialState, action) => {\n        switch (action.type) {\n            case \"GET_PRODUCT_TYPE\":\n                return action.data;\n            case \"ADD_TYPE\":\n                return [...state, action.data];\n            case \"UPDATE_TYPE\":\n            {\n                var newState = [];\n                for(var i = 0 ; i < state.length ; i ++)\n                {\n                    if(state[i]._id.typeID != action.data._id.typeID)\n                    {\n                        newState.push(state[i]);\n                    }\n                    else \n                    {\n                        newState.push(action.data);\n                    }\n                }\n                return newState;\n            }\n            case \"DELETE_TYPE\":\n            {\n                console.log(\"action.data\", action.data);\n                var newState = [];\n                for(var i = 0 ; i < state.length ; i ++)\n                {\n                    if(state[i]._id.typeID != action.data.typeID)\n                    {\n                        newState.push(state[i]);\n                    }\n                    else \n                    {\n                        console.log(\"Xoá được ở vị trí thứ\" ,i);\n                    }\n                }\n                console.log(\"newState\", newState)\n                return newState;\n            }\n\n            default:\n                return state\n        }\n    }\n\nexport default typeProductReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/TypeProductValueReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/AlertReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ConfirmModalReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/InfoUpdateProduct.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddShiftReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusConfirmReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusEditShiftReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusModalConfirmPassword.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusDarkModeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusDeleteConfirmReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusEditTypeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusUpdateGoodReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddTypeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusUpdateEmployeeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusYesConfirmReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddEmployeeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/GoodManager/UpdateTypeStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateNextWeekTimeKeepingValue.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/GoodManager/AddGoodStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusPayMoneyStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/employeeListReducer.js",["707","708","709"],"const listEmployeeInitialState = {\n    employees: [\n        // {\n        //     _id: { \n        //         employeeID: '3', \n        //         storeID: '19522006@gm.uit.edu.vn' \n        //     },\n        //     managerID: '19522006@gm.uit.edu.vn',\n        //     password: '1212',\n        //     firstName: '1212',\n        //     lastName: '1212',\n        //     phoneNumber: '1212',\n        //     dateOfBirth: \"2021-11-20T00:00:00.000Z\",\n        //     email: '12121',\n        //     address: '1212',\n        //     cardID: '1212',\n        //     startDate: \"2021-11-26T00:00:00.000Z\",\n        //     deleted: false,\n        //     __v: 0\n        // },\n    ]\n}\n\nconst  listEmployeeReducer = (state = listEmployeeInitialState, action) => {\n        switch (action.type) {\n            case \"GET_EMPLOYEE\":\n                state.employees = action.employees;\n                return state;\n            case \"ADD_EMPLOYEE\":\n                return {\n                    employees : [...state.employees, action.employees ]\n                }\n            case \"UPDATE_EMPLOYEE\":\n                {\n                    var newState = [];\n                    for(var i = 0 ; i < state.employees.length ; i ++)\n                    {\n                        if(i != action.index)\n                        {\n                            newState.push(state.employees[i]);\n                        }\n                        else \n                        {\n                            newState.push(action.data);\n                        }\n                    }\n                    console.log(\"newState\", newState);\n                    return {\n                        employees : newState\n                    }\n\n                }\n                case \"DELETE_EMPLOYEE\":\n                {\n                    console.log(\"action\", action);\n                    var newState = [];\n                    for(var i = 0 ; i < state.employees.length ; i ++)\n                    {\n                        if(state.employees[i]._id.employeeID !== action.id)\n                        {\n                            newState.push(state.employees[i]);\n                        }\n                        else {\n                            console.log(\"Kiếm đc cái xoá rồi\")\n                        }\n                    }\n                    return {\n                        employees : newState\n                    }\n\n                }\n            default:\n                return state\n        }\n    }\n\nexport default listEmployeeReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/addNextWeekTimeKeepingStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/nextWeekTimeKeepingReducer.js",["710"],"const nextWeekTimeKeepingInitialState =\n    \n[\n    {\n        _id: {\n            dateInWeek: \"T6\",\n            storeID: \"19522006@gm.uit.edu.vn\",\n            shiftType: {\n                _id: {\n                    shiftID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n            },\n            employee: {\n                _id: {\n                    employeeID: \"2\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n            },\n        },\n        alternativeEmployee: {\n            _id: {\n                employeeID: \"3\",\n                storeID: \"19522006@gm.uit.edu.vn\",\n            },\n        },\n        realDate: \"2021-12-04\",\n    }\n];\n\nconst nextWeekTimeKeepingReducer = (state = nextWeekTimeKeepingInitialState, action) => {\n        switch (action.type) {\n            case \"SET_NEXT_WEEK_TIMEKEEPER\":\n                return action.data;\n            case \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\":\n                return [...state, action.data]\n            case \"UPDATE_NEXT_WEEK_TIMEKEEPER\":\n                {\n                    var newState = [];\n                    for(var i = 0 ; i < state.length ; i ++)\n                    {\n                        if(i != action.index)\n                        {\n                            newState.push(state[i]);\n                        }\n                        else \n                        {\n                            newState.push(action.data);\n                        }\n                    }\n                    return newState;\n                }\n            case \"DELETE_NEXT_WEEK_TIMEKEEPER\":\n            {\n                console.log(action.data._id.dateInWeek);\n                return state.filter((value, key) => \n                (\n                    value._id.dateInWeek !== action.data._id.dateInWeek \n                    || value._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \n                    || value._id.employee._id.employeeID !== action.data._id.employee._id.employeeID\n                    || value._id.realDate !== action.data._id.realDate\n                ));\n            }\n                \n            default:\n                return state\n        }\n    }\n\nexport default nextWeekTimeKeepingReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/employeeSackedListReducer.js",["711","712"],"const listSackedEmployeeInitialState = {\n    employees: [\n        {\n            _id: { \n                employeeID: '3', \n                storeID: '19522006@gm.uit.edu.vn' \n            },\n            managerID: '19522006@gm.uit.edu.vn',\n            password: '1212',\n            firstName: '1212',\n            lastName: '1212',\n            phoneNumber: '1212',\n            dateOfBirth: \"2021-11-20T00:00:00.000Z\",\n            email: '12121',\n            address: '1212',\n            cardID: '1212',\n            startDate: \"2021-11-26T00:00:00.000Z\",\n            deleted: false,\n            __v: 0\n        },\n    ]\n}\n\nconst  listSackedEmployeeReducer = (state = listSackedEmployeeInitialState, action) => {\n        switch (action.type) {\n            case \"GET_EMPLOYEE_SACKED\":\n                state.employees = action.employees;\n                return state;\n            case \"DELETE_EMPLOYEE_SACKED\":\n                console.log(\"action\", action);\n                return {\n                    employees: [...state.employees, action.data]\n                };\n            case \"RETURN_TO_WORK\":\n            {\n                var newState = [];\n                for(var i = 0 ; i < state.employees.length ; i ++)\n                {\n                    if(state.employees[i]._id.employeeID !== action.id)\n                    {\n                        newState.push(state.employees[i]);\n                    }\n                    else {\n                        console.log(\"Kiếm đc cái xoá rồi\")\n                    }\n                }\n                return {\n                    employees : newState\n                }\n            }\n            case \"DELETE_PERMANTLY_EMPLOYEE\":\n            {\n                var newState = [];\n                for(var i = 0 ; i < state.employees.length ; i ++)\n                {\n                    if(state.employees[i]._id.employeeID !== action.employeeID)\n                    {\n                        newState.push(state.employees[i]);\n                    }\n                    else {\n                        console.log(\"Kiếm đc cái xoá rồi\")\n                    }\n                }\n                return {\n                    employees : newState\n                }\n            }\n            default:\n                return state\n        }\n    }\n\nexport default listSackedEmployeeReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/listShiftAssignReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/currentEditEmployeeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateNextWeekTimeKeepingStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/addTimeKeepingStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateTimeKeeperValue.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/StatusShowHistoryRecieptReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/currentEmployeeViewValue.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/ListRecieptReducer.js",["713","714","715"],"const listRecieptInitialState = [],\n    listRecieptReducer = (state = listRecieptInitialState, action) => {\n        switch (action.type) {\n            case \"UPDATE_RECIEPT_USER\":\n                action.listReciept.map(value => {\n                    let data = {\n                        MAHD: value._id.receiptID,\n                        name: value.employeeID.name,\n                        idUser: value.employeeID._id.employeeID ? value.employeeID._id.employeeID : '',\n                        date: value.createAt,\n                        discount: value.discount,\n                        totalMoney: value.totalMoney,\n                        totalFinalMoney: value.totalFinalMoney,\n                        listProduct: value.listItem,\n                        time: value.timeCreate,\n                        isEdit: value.isEdit,\n                        oldBill: value.oldBill,\n                        deleted: value.deleted ? value.deleted : false,\n                        coupon: value.coupon ? value.coupon : null\n                    }\n                    state.push(data)\n                })\n                return state;\n            case \"ADD_RECIEPT\":\n                return [...state, action.newReciept]\n            case \"EDIT_SHOPPING_BAGS\":\n                return state.filter((value) => {\n                    if (value.MAHD === action.MAHD) {\n                        value.isEdit = true\n                    }\n                    return value;\n                })\n            case \"DELETE_RECIEPT\":\n                return state.filter((value) => {\n                    if (value.MAHD === action.MAHD) {\n                        value.deleted = true\n                    }\n                    return value;\n                })\n            case \"DELETE_ONE_RECIEPT\":\n                return state.filter((value) => {\n                    if (value.MAHD !== action.MAHD) {\n                        return value\n                    }\n                })\n            case \"DELETE_MAHD_SELECTED_RECIEPT\":\n                return state.filter(value => {\n                    action.listMAHD.map(value1 => {\n                        if (value.MAHD === value1) {\n                            value.deleted = true\n                        }\n                    })\n                    return value\n                })\n            case \"DELETE_MAHD_INVOICE_RECIEPT\":\n                return state.filter(value => {\n                    return !value.deleted\n                })\n            case \"RESTONE_ONE_RECIEPT\":\n                return state.filter(value => {\n                    if (value.MAHD === action.MAHD) {\n                        value.deleted = false;\n                    }\n                    return value\n                })\n            case \"RESTONE_ALL_RECIEPT\":\n                return state.filter(value => {\n                    value.deleted = false;\n                    return value\n                })\n            case \"DELETE_ALL_RECIEPT\":\n                return state.filter(value => {\n                    value.deleted = true\n                    return value;\n                })\n            case \"RESET_ALL_RECIEPT_USER\":\n                return [];\n            default:\n                return state\n        }\n    }\n\nexport default listRecieptReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/InfomationBillEdit.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/StatusEditInfomationBill.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/TypeReciept.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/ShoppingBagsReducer.js",["716"],"const shoppingBagsInitialState = [],\n    shoppingBagsReducer = (state = shoppingBagsInitialState, action) => {\n        switch (action.type) {\n            case \"ADD_NEW_PRODUCT_SHOPPING_BAGS\": \n                return [...state, action.newProduct];\n            case \"RAISE_QUANTITY_SHOPPING_BAGS\":\n                return state.map(value => {\n                    if (value.product.name === action.name) {\n                        value.quantity += 1;\n                    }\n                    return value\n                })\n            case \"REDUCE_QUANTITY_SHOPPING_BAGS\":\n                return state.map(value => {\n                    if (value.product.name === action.name) {\n                        value.quantity -= 1;\n                    }\n                    return value\n                })\n            case \"DELETE_PRODUCT_SHOPPING_BAGS\":\n                return state.filter((value) => {\n                    if (value.product.name !== action.name) {\n                        return value;\n                    } \n                })\n            case \"RESET_SHOPPING_BAGS\":\n                return state = [];\n            case \"INFO_SHOPPING_BAGS_EDIT\":\n                return action.listProduct\n            default:\n                return state\n        }\n    }\n\nexport default shoppingBagsReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/TypeByDate.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/SearchReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/ListRecieptDelete.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/StatusSelectAll.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Dashboard/MonthSelectReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/ObjectEditCoupon.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Dashboard/TypeHeaderDashboard.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Dashboard/TypeTimeDashboard.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Dashboard/YearSelectReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/StatusEditCoupon.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/StatusModalAddCoupon.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateTimeKeepingStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SidebarOpenStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/listTimeKeepingReducer.js",["717","718","719","720","721","722"],"const listTimeKeepingInitialState =   \n[\n    // {\n    //     _id: {\n    //         dateInWeek: 'T7',\n    //         storeID: '19522006@gm.uit.edu.vn',\n    //         shiftType: {\n    //             _id: {\n    //                 shiftID: 'v908tB',\n    //                 storeID: '19522006@gm.uit.edu.vn',\n    //             },\n    //         },\n    //         employee: {\n    //             _id: {\n    //                 employeeID: '1',\n    //                 storeID: '19522006@gm.uit.edu.vn',\n    //             },\n    //         },\n    //     },\n    //     realDate: '2021-11-11',\n    //     isPaidSalary: false,\n    //     createdAt: '2021-01-02',\n    // }\n    \n];\n\nconst listTimeKeepingReducer = (state = listTimeKeepingInitialState, action) => {\n        switch (action.type) {\n            case \"GET_TIMEKEEPER\":\n                return action.data;\n            case \"ADD_NEW_TIME_KEEPER\":\n                return [...state, action.data];\n            case \"UPDATE_TIMEKEEPER\":\n                {\n                    var newState = [];\n                    for(var i = 0 ; i < state.length ; i ++)\n                    {\n                        if(i != action.index)\n                        {\n                            newState.push(state[i]);\n                        }\n                        else \n                        {\n                            newState.push(action.data);\n                        }\n                    }\n                    return newState;\n                }\n            case \"DELETE_TIMEKEEPER\":\n                {\n                    console.log(\"action\", action);\n                    var newState = [];\n                    for(var i = 0 ; i < state.length ; i ++)\n                    {\n                        if(state[i]._id.dateInWeek !== action.data._id.dateInWeek \n                            || state[i]._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \n                            || state[i]._id.employee._id.employeeID !== action.data._id.employee._id.employeeID)\n                        {\n                            newState.push(state[i]);\n                        }\n                        else {\n                            console.log(\"Kiếm đc cái xoá rồi\")\n                        }\n                    }\n                    return newState;\n\n                    // return state.filter((value, key) => \n                    //     (\n                    //         value._id.dateInWeek !== action.data._id.dateInWeek \n                    //         || value._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \n                    //         || value._id.employee._id.employeeID !== action.data._id.employee._id.employeeID \n                    //     )\n                    // );\n                }\n            case \"PAY_SALARY\":\n            {\n                // Ở đây thì có trả lương hết\n                var newState = [];\n                for(var i = 0 ; i < state.length ; i ++)\n                {\n                    if(state[i]._id.employee._id.employeeID == action.employeeID)\n                    {\n                        state[i].isPaidSalary = true;\n                    }\n                    newState.push(state[i]);\n                }\n                return newState;\n            }\n                \n            default:\n                return state\n        }\n    }\n\nexport default listTimeKeepingReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/ListCoupon.js",["723"],"\nconst listCouponInitialState = [],\n    listCouponReducer = (state = listCouponInitialState, action) => {\n        switch (action.type) {\n            case \"DELETE_COUPON\":\n                return state.filter((value, key) => (value._id.couponID !== action.idCoupon));\n            case \"ADD_COUPON\":\n                return [...state, action.data]\n            case \"EDIT_COUPON\":\n                return state.map(value => {\n                    if (value._id.couponID == action.data._id.couponID) {\n                        value.name = action.data.name\n                        value.percent = action.data.percent\n                        value.minTotal = action.data.minTotal\n                        value.timeFrom = action.data.timeFrom\n                        value.timeEnd = action.data.timeEnd\n                        value.quantity = action.data.quantity\n                    }\n                    return value\n                })\n            case \"UPDATE_QUANTITY_COUPON\":\n                return state.map(value => {\n                    if (value._id.couponID === action.idCoupon) {\n                        value.quantity--\n                    }\n                    return value\n                })\n            case \"UPDATE_COUPON_USER\": \n                return state = action.coupons\n            default:\n                return state\n        }\n    }\n    \nexport default listCouponReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/RegulationReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Register.js",["724","725"],"import React, { Component } from 'react';\nimport '../../css/Login.css'\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport Avatar from '@mui/material/Avatar'\nimport { IconContext } from \"react-icons\";\nimport { FiChevronLeft, FiUserPlus } from \"react-icons/fi\";\nimport { BsFillEnvelopeFill, BsLockFill, BsCodeSlash } from \"react-icons/bs\";\nimport { FaPhoneSquare } from \"react-icons/fa\";\nimport axios from 'axios';\nimport emailjs from 'emailjs-com';\nvar bcrypt = require('bcryptjs');\n\n\nclass Register extends Component {\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            code: \"\",\n            statusSendCode: true,\n        }\n    }\n\n\n    // Send code tới người dùng\n    sendCode = (a = this.makeCode(6)) => {\n        this.setState({\n            code: a,\n        })\n        emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\n        emailjs.send(\"gmail_main\", \"template_plasdgf\", {\n            To_mail: `${document.getElementById('email').value}`,\n            code: `${a}`,\n        })\n            .then((response) => {\n                console.log('SUCCESS!', response.status, response.text);\n            }, (err) => {\n                console.log('FAILED...', err);\n            });\n    }\n\n    // status SignUp \n    SignUp = (e) => {\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword() && this.blurTel()) {\n            axios.post(`http://localhost:5000/register-with-email`, {\n                email: document.getElementById('email').value,\n                password: this.hash(document.getElementById('password').value),\n                tel: document.getElementById('tel').value,\n            })\n                .then(res => {\n                    switch (res.data.status) {\n                        case 1:\n                            localStorage.setItem('token', res.data.token);\n                            this.props.updateProfile(res.data.data);\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n                            this.props.changeLoginStatus();\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"success\");\n                            break;\n                        case -1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"error\");\n                            break;\n                        default:\n                            break;\n                    }\n                })\n                .catch(err => {\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Error system\", \"error\");\n                })\n\n        }\n    }\n\n\n    // Tạo mã code cho người dùng xác nhận\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    // Hashpassword\n    hash = (pass) => {\n        var hash = bcrypt.hashSync(pass, 12)\n        return hash;\n    }\n\n\n    // Handle user : blur, change in input\n    blurEmail = () => {\n        const regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        const e = document.getElementById('email');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            this.setState({\n                statusSendCode: false,\n            })\n            return true;\n        }\n    }\n\n    blurCode = () => {\n        const e = document.getElementById('code');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (this.state.code === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\n            return false\n        } else if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\n            return false\n        } else if (elementValue !== this.state.code) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\n            return false\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurRePassword = () => {\n        const e = document.getElementById('re-password')\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (document.getElementById('password').value !== elementValue) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true\n        }\n    }\n\n    blurTel = () => {\n        const e = document.getElementById('tel');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        const regex = /^\\d+$/;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Phone is not in the correct format\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    componentWillMount() {\n        document.title = 'Register'\n    }\n\n    render() {\n        return (\n            <div className=\"Login\">\n                <div className=\"form-register\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <FiUserPlus></FiUserPlus>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Register</div>\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Login</NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/register-submit\" method=\"post\" id=\"register-form\">\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND CODE</button>\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\n                                        <input maxLength={6} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Enter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"re-password\" id=\"re-password\" placeholder=\"Enter re-password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <FaPhoneSquare className=\"input-custom-icon\" ></FaPhoneSquare>\n                                        </span>\n                                        <input maxLength={30} className=\"form-control\" onBlur={(e) => this.blurTel(e)} onChange={(e) => this.changeInput(e)} name=\"tel\" rules=\"required\" id=\"tel\" placeholder=\"Ex: 0303030303\" type=\"tel\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"register-description\">Bằng cách ấn vào nút\n                                    <span className=\"register-description__keyword\">“ĐĂNG KÝ”</span>\n                                    , tôi đồng ý với\n                                    <span className=\"register-description__keyword\">Điều Khoản Sử Dụng</span> và\n                                    <div className=\"register-description__keyword\"> Chính Sách Bảo Mật</div>\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div onClick={(e) => this.SignUp(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign Up</div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div >\n            </div >\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        updateProfile: (data) => {\n            dispatch({\n                type: \"UPDATA_DATA_USER\",\n                data: data,\n            })\n        },\n        updateAvatar: (avatar) => {\n            dispatch({\n                type: \"UPDATE_AVATAR\",\n                avatar: avatar,\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/ForgotPassword.js",["726","727"],"import React, { Component } from 'react';\nimport Avatar from '@mui/material/Avatar'\nimport { IconContext } from \"react-icons\";\nimport { FiSend } from \"react-icons/fi\";\nimport { BsFillEnvelopeFill, BsLockFill, BsBoxArrowInLeft, BsCodeSlash } from \"react-icons/bs\";\nimport emailjs from 'emailjs-com';\nimport axios from 'axios';\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport { connect } from 'react-redux';\nvar bcrypt = require('bcryptjs');\n\n\nclass ForgotPassword extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            code: \"\",\n            statusSendCode: true,\n        }\n    }\n\n\n    // Send code tới người dùng\n    sendCode = (a = this.makeCode(6)) => {\n        this.setState({\n            code: a,\n        })\n        emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\n        emailjs.send(\"gmail_main\", \"template_plasdgf\", {\n            To_mail: `${document.querySelector('#email').value}`,\n            code: `${a}`,\n        })\n            .then((response) => {\n                console.log('SUCCESS!', response.status, response.text);\n            }, (err) => {\n                console.log('FAILED...', err);\n            });\n    }\n\n    // Tạo code để xác nhận\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    // Hashpassword\n    hash = (pass) => {\n        var hash = bcrypt.hashSync(pass, 12)\n        return hash;\n    }\n\n    //Check tìm lại mật khẩu\n    findPassword = (e) => {\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword()) {\n            const form = document.getElementById('findpass-form');\n            axios.post(`http://localhost:5000/find-password`, {\n                email: document.querySelector('#email').value,\n                password: this.hash(document.getElementById('password').value),\n            })\n                .then(res => {\n                    form.reset();\n                    switch (res.data.status) {\n                        case 1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"success\");\n                            break;\n                        case -1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"error\");\n                            break;\n                        default:\n                            break;\n                    }\n                })\n                .catch(err => {\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Error system\", \"error\");\n                })\n        }\n    }\n\n\n    // Handle user blue change in input\n    blurEmail = () => {\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        const event = document.querySelector('#email');\n        const elementValue = event.value;\n        const formGroup = event.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            this.setState({\n                statusSendCode: false,\n            })\n            return true;\n        }\n    }\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurCode = () => {\n        const e = document.getElementById('code');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (this.state.code === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\n            return false\n        } else if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\n            return false\n        } else if (elementValue !== this.state.code) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\n            return false\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurRePassword = () => {\n        const e = document.getElementById('re-password')\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (document.getElementById('password').value !== elementValue) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    componentWillMount() {\n        document.title = 'Find password'\n    }\n\n    render() {\n        \n        return (\n            <div className=\"Login\">\n                <div className=\"form-findpass\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <FiSend></FiSend>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Find password</div>\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"><BsBoxArrowInLeft className=\"arrow-return\"></BsBoxArrowInLeft></NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/findpass-submit?_method=PUT\" method=\"POST\" id=\"findpass-form\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"Ex: abc@gmail.com\" type=\"text\" />\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND</button>\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"code\" className=\"form-label\">Code</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\n                                        <input maxLength={6} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\n\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">New password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Enter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">Re-password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"password\" rules=\"required|min:6\" id=\"re-password\" placeholder=\"Enter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div onClick={(e) => this.findPassword(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Find Password</div>\n                                </div>\n\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        }\n    }\n}\n\n\n\nexport default connect(mapDispatchToProps)(ForgotPassword);\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Login.js",["728","729","730","731"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../css/Login.css'\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\nimport { FiChevronRight } from \"react-icons/fi\";\nimport { BiUser } from \"react-icons/bi\";\nimport { Avatar } from '@mui/material'\nimport { IconContext } from \"react-icons\";\nimport { GoogleLogin } from 'react-google-login';\nimport axios from 'axios';\n\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            appId: \"543752153590340\",\n            clientId: \"826925109796-mi95l41fi57bdlolpvnfdg5bpt9oc81h.apps.googleusercontent.com\",\n        }\n    }\n\n    loadAllGood(dataProduct, dataJoin) {\n        var resultProduct = dataProduct;\n        var joinTypeInfor = dataJoin;\n        var listProductInfor = [];\n        for (let i = 0; i < resultProduct.length; i++) {\n            var typeIDList = [];\n            var joinType = '';\n            for (var j = 0; j < joinTypeInfor.length; j++) {\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) \n                {\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\n                }\n            }\n    \n            listProductInfor.push(\n                {\n                    ...resultProduct[i],\n                    typeIDList: typeIDList,\n                });\n        }\n        this.props.getProductToReducer(listProductInfor);\n      }\n\n    // Login with google\n    onLoginSuccess = async (res) => {\n        this.props.setRole();\n        await axios.post(`http://localhost:5000/sign-in-with-google`, res.profileObj)\n            .then(res => {\n                switch (res.data.status) {\n                    case 1:\n                        localStorage.setItem('token', res.data.token);\n                        this.props.updateProfile(res.data.data);\n                        this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n                        this.props.updateShiftTypes(res.data.data.shiftTypes);\n                        this.props.updateRecieptUser(res.data.data.receipts);\n                        this.props.updateCouponUser(res.data.data.coupons)\n                        this.props.changeLoginStatus();\n                        this.props.getTimeKeeping(res.data.data.timeKeeping);\n                        this.loadAllGood(res.data.data.products, res.data.data.productJoinTypes);\n                        this.props.hideAlert();\n                        this.props.showAlert(res.data.message, \"success\");\n                        if(res.data.data.regulation.length > 0)\n                            this.props.setRegulation(res.data.data.regulation[0]);\n                        else this.props.setRegulation({});\n                        console.log(\"res.data\", res.data)\n                        break;\n                    case -1:\n                        this.props.hideAlert();\n                        this.props.showAlert(res.data.message, \"error\");\n                        break;\n                    default:\n                        break;\n                }\n            })\n            .catch(err => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Error, server don't active\", \"error\");\n            })\n    }\n\n    // Check để thay đổi trạng thái đã login hay chưa\n    isLoginCheck = async (e) => {\n        this.props.setRole();\n        if (this.blurEmail() && this.blurPassword()) {\n            await axios.post(`http://localhost:5000/sign-in-with-gmail-password`, {\n                email: document.querySelector('#email').value,\n                password: document.getElementById('password').value,\n            })\n                .then(res => {\n                    switch (res.data.status) {\n                        case 1:\n                            localStorage.setItem('token', res.data.token);\n                            this.props.updateProfile(res.data.data);\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n                            this.props.updateShiftTypes(res.data.data.shiftTypes);\n                            this.props.updateCouponUser(res.data.data.coupons)\n                            this.props.updateRecieptUser(res.data.data.receipts);\n                            this.props.changeLoginStatus();\n                            this.props.getEmployee(res.data.data.employees);\n                            this.props.getTimeKeeping(res.data.data.timeKeeping);\n                            this.loadAllGood(res.data.data.products, res.data.data.productJoinTypes);\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"success\");\n                            if(res.data.data.regulation.length > 0)\n                                this.props.setRegulation(res.data.data.regulation[0]);\n                            else this.props.setRegulation({});\n                            console.log(\"res.data\", res.data)\n                            break;\n                        case -1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"error\");\n                            break;\n                        default:\n                            break;\n                    }\n                })\n                .catch(err => {\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Error system\", \"error\");\n                })\n        }\n    }\n\n    // Handle user : blur , change in input\n    blurEmail = () => {\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        const event = document.querySelector('#email');\n        let elementValue = event.value;\n        const formGroup = event.parentElement.parentElement;\n        // check validate\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        let elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    componentWillMount() {\n        document.title = 'Login'\n    }\n    \n\n    render() {\n        return (\n            <div className=\"Login\">\n                <div className=\"form-login\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <BiUser></BiUser>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Login</div>\n                                <NavLink to=\"/register\" className=\"auth-form__switch-btn\">Register <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight></NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Enter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"auth-form__support\">\n                                    <span className=\"auth-form__support-forget\">\n                                        <NavLink to=\"/forgot\" className=\"auth-form__switch-btn\">Forgot password</NavLink>\n                                    </span>\n                                    <span className=\"auth-form__help-separate\" />\n                                    <span className=\"auth-form__support-need-support\">Need help?</span>\n                                </div>\n                                <div className=\"auth-form__support\">\n                                    <GoogleLogin\n                                        className=\"auth-form__support-google\"\n                                        clientId={this.state.clientId}\n                                        buttonText=\"Login with Google\"\n                                        onSuccess={this.onLoginSuccess}\n                                        onFailure={this.onFailureSuccess}\n                                        cookiePolicy={'single_host_origin'}\n                                    />\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div to=\"/home\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <NavLink to=\"/employee\" id=\"navlink\" className=\"auth-form__btn-log-in auth-form__switch-btn auth-form-employee\">\n                                        Employee\n                                        <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight>\n                                    </NavLink>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        updateProfile: (data) => {\n            dispatch({\n                type: \"UPDATA_DATA_USER\",\n                data: data,\n            })\n        },\n        setRole: () => {\n            dispatch({\n                type: \"ADMIN_ROLE\"\n            });\n        },\n        updateAvatar: (avatar) => {\n            dispatch({\n                type: \"UPDATE_AVATAR\",\n                avatar: avatar,\n            })\n        },\n        updateShiftTypes: (shiftTypes) => {\n            dispatch({\n                type: \"UPDATE_DATA_SHIFT_USER\",\n                shiftTypes: shiftTypes,\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n          },\n        updateShiftTypes: (shiftTypes) => {\n            dispatch({\n                type: \"UPDATE_DATA_SHIFT_USER\",\n                shiftTypes: shiftTypes,\n            })\n        },\n        updateRecieptUser: (data) => {\n            dispatch({\n                type: \"UPDATE_RECIEPT_USER\",\n                listReciept: data,\n            })\n        },\n        getTimeKeeping: (data) => {\n            dispatch({\n              type: \"GET_TIMEKEEPER\",\n              data: data\n            });  \n          },\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n        setRegulation: (data) => {\n            dispatch({\n                type: \"SET_REGULATION\",\n                data: data,\n            });\n        },\n        updateCouponUser: (coupons) => {\n            dispatch({\n                type: \"UPDATE_COUPON_USER\",\n                coupons: coupons\n            })\n        }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Body.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/LoginWithEmployee.js",["732","733"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../css/Login.css'\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\nimport { FiXSquare, FiChevronLeft } from \"react-icons/fi\";\nimport { FaUserTie } from 'react-icons/fa'\nimport { Avatar } from '@mui/material'\nimport { IconContext } from \"react-icons\";\nimport axios from 'axios';\nimport Alert from '@mui/material/Alert';\n\nclass LoginWithEmployee extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n\n\n\n\n    // Check để thay đổi trạng thái đã login hay chưa\n    isLoginCheck = async (e) => {\n        this.props.setRole();\n        if (this.blurEmail() && this.blurPassword()) {\n            await axios.post(`http://localhost:5000/sign-in-employee`, {\n                email: document.querySelector('#username').value,\n                password: document.getElementById('password').value,\n            })\n                .then(res => {\n                    if (res.status === 200) {\n                        console.log(\"res.data.data.regulation\", res.data.data.regulation);\n                        localStorage.setItem('token', res.data.token);\n                        this.props.updateProfile(res.data.data.employee[0], res.data.data.manager[0], res.data.data.store[0].storeName);\n                        this.props.updateAvatar(res.data.data.employee[0].imgUrl ? res.data.data.employee[0].imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n                        this.props.updateRecieptUser(res.data.data.receipts);\n                        if(res.data.data.regulation.length > 0)\n                            this.props.setRegulation(res.data.data.regulation[0]);\n                        else this.props.setRegulation({});\n                        this.props.changeLoginStatus();\n                        this.props.hideAlert();\n                        this.props.showAlert(\"Login successfully\", \"success\");\n                        console.log(\"res.data\", res.data)\n                    }\n                })\n                .catch(err => {\n                    this.props.hideAlert();\n                    this.props.showAlert(\"The email IS NOT registered or you entered the WRONG password.\", \"error\");\n                    return;\n                })\n            // Get các thông tin để thêm vào redux\n            \n        }\n    }\n\n\n    // Handle user : blur , change in input\n    blurEmail = () => {\n        const event = document.querySelector('#username');\n        let elementValue = event.value;\n        const formGroup = event.parentElement.parentElement;\n        // check validate\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        let elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    componentWillMount() {\n        document.title = 'Employee'\n    }\n\n    render() {\n        \n\n        return (\n            <div className=\"Login\">\n                <div className=\"form-login\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <FaUserTie></FaUserTie>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Employee</div>\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Login</NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\" className=\"form-label\">Username</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"username\" id=\"username\" placeholder=\"VD: phuoc123\" type=\"text\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\" id=\"password\" placeholder=\"Enter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div to=\"/sellproduct\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        setRole: () => {\n            dispatch({\n                type: \"EMPLOYEE_ROLE\",\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        updateProfile: (data, data1, storeName) => {\n            dispatch({\n                type: \"UPDATA_DATA_EMPLOYEE\",\n                data: data,\n                data1: data1,\n                storeName: storeName,\n            })\n        },\n        setProfile: (data) => {\n            dispatch({\n                type: \"SET_DATA_USER\",\n                data: data,\n            })\n        },\n        updateAvatar: (avatar) => {\n            dispatch({\n                type: \"UPDATE_AVATAR\",\n                avatar: avatar,\n            })\n        },\n        updateRecieptUser: (data) => {\n            dispatch({\n                type: \"UPDATE_RECIEPT_USER\",\n                listReciept: data,\n            })\n        },\n        setRegulation: (data) => {\n            dispatch({\n                type: \"SET_REGULATION\",\n                data: data,\n            });\n        },\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginWithEmployee);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DashboardURL.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Partials/SideNavBar.js",["734","735","736","737"],"import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport {\n    AiOutlineDashboard,\n    AiFillDashboard,\n    AiOutlineContainer,\n    AiFillContainer\n} from \"react-icons/ai\";\nimport { Button } from '@mui/material';\nimport { BsInfoCircleFill } from \"react-icons/bs\";\nimport {\n    IoPeopleOutline,\n    IoPeopleSharp,\n    IoReceiptOutline,\n    IoReceiptSharp,\n} from \"react-icons/io5\";\nimport { ImCheckboxUnchecked, ImCheckboxChecked } from \"react-icons/im\"\nimport { IoIosArrowBack , IoIosArrowForward} from \"react-icons/io\";\nimport { RiProfileFill, RiProfileLine } from \"react-icons/ri\";\nimport { FaSignOutAlt } from \"react-icons/fa\";\nimport { GiSellCard } from 'react-icons/gi'\nimport Avatar from '../../img/avatar_default.jpg';\nimport { NavLink } from 'react-router-dom';\nimport '../../css/SideNavBar.css';\nimport axios from 'axios';\n\nclass SideNavBar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            change: true,\n            attendance: false,\n        }\n        this.getInitialScreen();\n        console.log(\"openSidebar\", this.props.sidebarOpen);\n        this.loadIntialOpen();\n    }\n    active = ['active', '', '', '', '', ''];\n\n    changeIndex(index) {\n        for (var i = 0; i < this.active.length; i++) {\n            this.active[i] = '';\n        }\n        this.active[index] = 'active';\n        this.setState({ change: !this.state.change });\n    }\n\n    getInitialScreen() {\n        var link = window.location.href;\n        link = link.substring(link.lastIndexOf('/') + 1);\n\n        for (var i = 0; i < this.active.length; i++) {\n            this.active[i] = '';\n        }\n\n        switch (link) {\n            case \"profile\":\n                this.active[1] = 'active';\n                break;\n            case \"employeemanager\":\n                this.active[2] = 'active';\n                break;\n            case \"goodmanager\":\n                this.active[3] = 'active';\n                break;\n            case \"import\":\n                this.active[3] = 'active';\n                break;\n            case \"receiptmanager\":\n                this.active[4] = 'active';\n                break;\n            case \"sellproduct\":\n                this.active[5] = 'active';\n                break;\n            case \"profile#\":\n                this.active[1] = 'active';\n                break;\n            case \"employeemanager#\":\n                this.active[2] = 'active';\n                break;\n            case \"goodmanager#\":\n                this.active[3] = 'active';\n                break;\n            case \"import#\":\n                this.active[3] = 'active';\n                break;\n            case \"receiptmanager#\":\n                this.active[4] = 'active';\n                break;\n            case \"sellproduct#\":\n                this.active[5] = 'active';\n                break;\n            default:\n                this.active[0] = 'active';\n                break;\n        }\n        this.setState({ change: !this.state.change });\n    }\n\n    attendance = () => {\n        this.setState({\n            attendance: true,\n        })\n        this.props.hideAlert()\n        this.props.showAlert('Attendanced success', 'success')\n    }\n\n    logOut = () => {\n        localStorage.setItem('token', null)\n        this.props.resetInfoUser()\n        this.props.resetRecieptUser()\n        this.props.resetShiftUser()\n        this.props.changeLoginStatus()\n    }\n\n    attendance = () => {\n        var time = new Date();\n        let a = ((time.getHours() > 12) ? time.getHours() - 12 : time.getHours()) + \":\" + time.getMinutes() +\" \"+ ((time.getHours() > 12) ? \"PM\" : \"AM\");\n        axios.post('http://localhost:5000/api/employee/time-keeping',{\n            token: localStorage.getItem('token'),\n            data: {\n                email: this.props.infoUser.employeeID,\n                time: a,\n            }\n        }).then(res => {\n            console.log(res)\n            localStorage.setItem('token', res.data.token)\n            this.props.showAlert(res.data.message, 'success')\n            this.setState({\n                attendance: true\n            })\n        }).catch(err => {\n            this.props.showAlert(err.response.data.message, 'error')\n        })\n    }\n\n    hideNavbar() {\n        // console.log(\"Chạy được hàm ẩn rồi\");\n        // // // console \n        // const navbarContainer = document.querySelector('.navbar-container');\n        const navbarContainer = document.querySelector('.navbar-container');\n        navbarContainer.classList.add('short');\n        this.props.closeSidebar();\n    }\n\n    showNavbar() {\n        // console.log(\"Chạy được hàm ẩn rồi\");\n        // // // console \n        const navbarContainer = document.querySelector('.navbar-container');\n        navbarContainer.classList.remove('short');\n        this.props.openSidebar();\n    }\n\n    loadIntialOpen() {\n        this.props.openSidebar();\n        // if(this.props.sidebarOpen)\n        // {\n        //     var navbarContainer2 = document.querySelector('.navbar-container');\n        //     console.log('Toang mở')\n        //     console.log(\"navbarContainer\", navbarContainer2)\n        //     // navbarContainer2.classList.remove('short');\n        // }\n        // else \n        // {\n        //     var navbarContainer2 = document.querySelector('.navbar-container');\n        //     console.log('Toang đóng')\n        //     console.log(\"navbarContainer\", navbarContainer2)\n        //     // navbarContainer2.classList.add('short');\n        // }\n    }\n\n    render() {\n        return (\n            <div\n                class=\"navbar-container\"\n            >\n                <div style={{ backgroundColor: !this.props.statusDarkmode ? '#fafafa' : '#37474f' }} class=\"navibar sidebar\">\n                    <div className=\"nav-icon\" >\n                        {\n                            this.props.sidebarOpen ?\n                            <IoIosArrowBack\n                                className='icon-open'\n                                size={20}\n                                onClick={(e) => this.hideNavbar()}\n                            />\n                            :\n                            <IoIosArrowForward\n                                className='icon-close'\n                                style={{\n                                    position: 'fixed',\n                                    left: '42px',\n                                    top: '56px',\n                                }}\n                                size={20}\n                                onClick={(e) => this.showNavbar()}\n                            />\n                        }\n                    </div>\n                    <div class=\"nav-heading\">\n                        <div \n                            style={{ \n                                backgroundColor: !this.props.sidebarOpen? !this.props.statusDarkmode ? '#fafafa' : '#37474f': (!this.props.statusDarkmode ? '#cfd8dc' : '#455a64'),\n                                paddingTop: !this.props.sidebarOpen? 10: 8,\n                                display: 'flex'\n                            }} \n                            class=\"navbar-heading-container\"\n                        >\n                            <img class='user-avatar'src={this.props.infoUser.avatar ? this.props.infoUser.avatar : Avatar} style={{ width: 40, height: 40, borderRadius: '100%', flex: 1 }}></img>\n                            <span class=\"user-name\" style={{ color: !this.props.statusDarkmode ? 'black' : 'white', fontWeight: '700', maxWidth: '100px' }} >\n                                {this.props.infoUser.lastName + \" \" + this.props.infoUser.firstName}\n                            </span>\n                        </div>\n                    </div>\n                    <div class=\"nav-container\">\n                        {\n                            this.props.role == true ? (null)\n                                : (<div style={{ justifyContent: 'center', display: 'flex', marginBottom: '10px' }}>\n                                    <Button onClick={() => this.attendance()} style={{ backgroundColor: this.state.attendance ? '#b9f6ca' : '#e0e0e0', color: '#424242' }}>\n                                        {!this.state.attendance ? (<ImCheckboxUnchecked style={{ marginRight: '10px' }}></ImCheckboxUnchecked>)\n                                            : (<ImCheckboxChecked style={{ marginRight: '10px', color: '#1b5e20' }}></ImCheckboxChecked>)\n                                        }\n\n                                        {this.state.attendance ? 'attendanced' : 'attendance'}\n                                    </Button>\n                                </div>\n                                )\n                        }\n                        {\n                            this.props.role == true ?\n                                (<NavLink className={\"nav-item \" + this.active[0]} to=\"/dashboard\"\n                                    onClick={() => this.changeIndex(0)}\n                                >\n                                    <AiOutlineDashboard class=\"nav-item-icon\" />\n                                    <AiFillDashboard class=\"nav-item-icon icon-activate\" />\n                                    <span className=\"nav-item-lable\">Dashboard</span>\n                                </NavLink>) : (null)\n                        }\n                        <NavLink to=\"/profile\" className={\"nav-item \" + this.active[1]} href=\"#\"\n                            onClick={() => this.changeIndex(1)}\n                        >\n                            <RiProfileLine class=\"nav-item-icon\" />\n                            <RiProfileFill class=\"nav-item-icon icon-activate\" />\n                            <span className=\"nav-item-lable\">Profile</span>\n                        </NavLink>\n\n                        {\n                            this.props.role === true ?\n                                (\n                                    <div>\n                                        <NavLink\n                                            to=\"/employeemanager\"\n                                            className={\"nav-item \" + this.active[2]}\n                                            href=\"#\"\n                                            onClick={() => this.changeIndex(2)}\n                                        >\n                                            <IoPeopleOutline class=\"nav-item-icon\" />\n                                            <IoPeopleSharp class=\"nav-item-icon icon-activate\" />\n                                            <span className=\"nav-item-lable\">Employee Manager</span>\n                                        </NavLink>\n                                        <NavLink\n                                            to=\"/goodmanager\"\n                                            className={\"nav-item \" + this.active[3]}\n                                            href=\"#\"\n                                            onClick={() => this.changeIndex(3)}\n                                        >\n                                            <AiOutlineContainer className=\"nav-item-icon\" />\n                                            <AiFillContainer className=\"nav-item-icon icon-activate\" />\n                                            <span className=\"nav-item-lable\">Products Manager</span>\n                                        </NavLink>\n                                        <NavLink\n                                            to=\"/receiptmanager\"\n                                            className={\"nav-item \" + this.active[4]}\n                                            href=\"#\"\n                                            onClick={() => this.changeIndex(4)}\n                                        >\n                                            <IoReceiptOutline class=\"nav-item-icon\" />\n                                            <IoReceiptSharp class=\"nav-item-icon icon-activate\" />\n                                            <span className=\"nav-item-lable\">Receipt Manager</span>\n                                        </NavLink>\n                                    </div>\n                                ) : (null)\n                        }\n\n                        <NavLink to=\"/sellproduct\" className={\"nav-item \" + this.active[5]} href='#'\n                            onClick={() => this.changeIndex(5)}\n                        >\n                            <GiSellCard class=\"nav-item-icon\" />\n                            <GiSellCard class=\"nav-item-icon icon-activate\" />\n                            <span className=\"nav-item-lable\">Sell Product</span>\n                        </NavLink>\n                    </div>\n\n                    <div class=\"nav-footer\">\n                        <a\n                            to=\"/login\"\n                            onClick={() => this.logOut()}\n                            className={\"nav-item \"}\n                            style={{ flex: 5 }}\n                        >\n                            <FaSignOutAlt class=\"nav-item-icon\" />\n                            <span className=\"nav-item-lable\">Sign out</span>\n                        </a>\n                        <a target=\"blank\" href=\"https://github.com/Minhthang1506/SE100Project\" className={\"nav-item \"}  style={{ flex: 4 }}>\n                            <BsInfoCircleFill class=\"nav-item-icon\" />\n                            <span className=\"nav-item-lable\">About</span>\n                        </a>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n        infoUser: state.infoUser,\n        role: state.role,\n        statusDarkmode: state.statusDarkmode,\n        sidebarOpen: state.sidebarOpen,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            })\n        },\n        resetShiftUser: () => {\n            dispatch({\n                type:\"RESET_SHIFT_USER\"\n            })\n        },\n        resetRecieptUser: () => {\n            dispatch({\n                type: \"RESET_ALL_RECIEPT_USER\",\n            })\n        },\n        changeConfirmPasswordTest: () => {\n            dispatch({\n                type: \"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        resetInfoUser: () => {\n            dispatch({\n                type: \"RESET_INFO_USER\"\n            })\n        },\n        closeSidebar: () => {\n            dispatch({\n                type: \"CLOSE_SIDEBAR\"\n            })\n        },\n        openSidebar: () => {\n            dispatch({\n                type: \"OPEN_SIDEBAR\"\n            })\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SideNavBar);\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodManager.js",["738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777"],"import { Component } from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport GoodTable from './GoodPartials/GoodTable';\nimport { NavLink } from 'react-router-dom';\nimport Button from '@mui/material/Button';\nimport SearchBar from './GoodPartials/SearchBar';\nimport {connect} from 'react-redux'\nimport AddTypeModal from './GoodPartials/AddTypeModal';\nimport '../css/GoodManager.css';\nimport ConfirmModal from './GoodPartials/ConfirmModal';\nimport UpdateGoodModal from './GoodPartials/UpdateGoodModal';\nimport EditTypeModal from './GoodPartials/EditTypeModal';\nimport AddGoodModal from './GoodPartials/AddGoodModal';\nimport axios from 'axios';\nimport UpdateTypeModal from './GoodPartials/UpdateTypeModal';\nimport XLSX from 'xlsx';\nimport excelLogo from './GoodPartials/excelLogo.png';\nimport { inputAdornmentClasses } from '@material-ui/core';\nimport GoodTableDisplay from './GoodPartials/GoodTableDisplay';\nimport ExcelInstruction from './GoodPartials/ExcelInstruction';\nimport { Container, Grid, Card, CardHeader, Divider, CardContent} from '@mui/material';\nimport SortByTable from './GoodPartials/SortByTable';\nimport TypeManager from './GoodPartials/TypeManager';\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport { MdOutlineIntegrationInstructions } from \"react-icons/md\";\nimport { BsCardList } from \"react-icons/bs\";\nclass GoodManager extends Component {\n    constructor(props) {\n        super(props);\n        this.loadAllType(); \n        this.loadAllGood();\n    }\n\n    async loadAllGood() {\n        var resultProduct = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }\n        }\n        await axios.get(`http://localhost:5000/api/product/`, {\n            params: { ...data }\n        })\n            .then(res => {\n                resultProduct = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                this.props.hideAlert();\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        // Get hết từ cái productjoinType\n        var result = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, {\n            params: { ...data1 }\n        })\n            .then(res => {\n                result = res.data.data;\n                localStorage.getItem('token', res.data.token);\n            })\n            .catch(err => {\n                console.log(err);\n                this.props.hideAlert();\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        // Lấy các cái jointype\n        var joinTypeInfor = [];\n        for (let i = 0; i < result.length; i++) {\n            joinTypeInfor.push(result[i]);\n        }\n        // console.log(\"joinTypeInfor\", joinTypeInfor);\n\n        var listProductInfor = [];\n        for (let i = 0; i < resultProduct.length; i++) {\n            var typeIDList = [];\n            var joinType = '';\n            for (var j = 0; j < joinTypeInfor.length; j++) {\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) \n                {\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\n                    joinType = joinType + ' ' + this.getTypeNamebyTypeID(joinTypeInfor[j]._id.typeID);\n                }\n            }\n\n            listProductInfor.push(\n                {\n                    ...resultProduct[i],\n                    typeIDList: typeIDList,\n                    joinType: joinType\n                });\n        }\n        this.props.getProductToReducer(listProductInfor);\n    }\n\n    getTypeNamebyTypeID (typeID) {\n        var typeName=\"Null\";\n        for(var i = 0; i < this.props.typeProduct.length;i++)\n        {   \n            if(this.props.typeProduct[i]._id.typeID == typeID)\n            {\n                typeName = this.props.typeProduct[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    async loadAllType() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log('bug when get types', err);\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        this.props.getProductType(result);\n    }\n    handleAdd() {\n        this.props.changeAddTypeStatus();\n        this.props.setAddTypeStatus();\n    }\n    handleConfirm(){\n        this.props.changeConfirmStatus();\n        this.props.unsetDelete();\n    }\n    handleConfirmDelete(){\n        this.props.changeConfirmStatus();\n        this.props.setDeleteConfirm();\n    }\n    handleUpdateGood() {\n        this.props.changeUpdateGoodStatus();\n    }\n    handleEditType() {\n        this.props.changeEditTypeStatus();\n    }\n\n    componentWillMount() {\n        document.title = 'Product Manager'\n    }   \n\n    uploadExcel(e){\n        e.preventDefault();\n        var f;\n        try {\n            // console.log(\"e\", e.target.files[0]);\n            f = e.target.files[0];\n        }\n        catch(e) {\n            console.log(e);\n            return;\n        } \n\n        var name = f.name;\n        const reader = new FileReader();\n        var dataExcel;\n        // Chỗ này đọc file excel gì đó, giờ xử lý cái data lấy ra thôi\n        reader.onload = (evt) => {\n            const bstr = evt.target.result;\n            const wb = XLSX.read(bstr, {type:'binary'});\n            const wsname = wb.SheetNames[0];\n            const ws = wb.Sheets[wsname];\n            const data = XLSX.utils.sheet_to_csv(ws, {header:1});\n            // console.log(\"data\", data);\n            dataExcel = data;\n            this.handleExcelData(dataExcel);\n        };\n        reader.readAsBinaryString(f);\n        // Reset tên file mỗi khi đọc\n        document.querySelector('#upload-excel').value = '';\n\n        \n    }\n\n    handleExcelData(excelData) {\n        // chia các cột theo row\n        var rows = excelData.split('\\n');\n        console.log(\"Nội dung file\", rows);\n        if(rows.length  <= 2)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"The file is invalid because it doesn't has header and data!\",\"warning\");\n            return false;\n        }\n        // Xử lý các thông tin ở trưởng header\n        var rowSample=\n            [\"Product ID\",\"Name\",\"Quantity\",\"Unit\",\"Expired Date\",\n            \"Currency\",\"Original Price\",\"SellPrice\",\"ProductType\"];\n        var rowSplit = rows[0].split(',');\n        if(rowSample.length != rowSplit.length)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"The header is invalid. It is different from the template or has data out of the table!\",\"warning\");   \n            return false;\n        }\n        for(var i = 0 ; i < rowSample.length ; i++)\n        {\n            if(rowSample[i] != rowSplit[i]) {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"the header is different from the template\",\"warning\");\n                return false;\n            }\n        }\n        var columnName = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\n        var allRows = [];\n        // Xử lý lần lượt các dữ liệu ở từng ô.\n        for(var i2 = 1; i2 < rows.length - 1; i2++)\n        {\n            var dataRows = rows[i2].split(',');\n            if(dataRows.length < 9)\n            {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"The line \" + (i2+1) + ' in the excel file is lack of data' ,\"warning\");\n                return false;\n            }\n\n            if(dataRows.length > 9)\n            {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"The line \" + (i2+1) + ' in the excel file is has more data than the template or has the cell contains \",\"' ,\"warning\");\n                return false;\n            }\n            for(var j = 0; j < dataRows.length; j++)\n            {\n                if(dataRows[j]=='')\n                {\n                    this.props.hideAlert();\n\t\t\t\t    this.props.showAlert(\"The line \" + (i2+1) + ' with column ' + columnName[j] +' in the excel file is '+\n                    +'lack of data' ,\"warning\");\n                    return false;\n                }\n            }\n            // Lấy dữ liệu đã có tạo thành object và bắt đầu check xong constraint\n            var newRow = {\n                name: dataRows[1],\n                quantity: dataRows[2],\n                unit: dataRows[3],\n                expiredDate: dataRows[4],\n                currency: dataRows[5],\n                originalPrice: dataRows[6],\n                sellPrice: dataRows[7],\n                productTypeName: dataRows[8]\n            }\n            // Check các constraint và quy định ở đây trước khi add vào listObject\n            if(this.checkConstraintOfExcelObject(newRow, i2) == false) return false;\n            if(this.checkRegulationOfExcelObject(newRow, i2) == false) return false;\n            allRows.push(newRow);\n            \n        } \n        \n        console.log(\"Tất cả dữ liệu\", allRows);\n        // Xử lý sau khi đã lấy được các excel Object\n        this.addProductsFromExcel(allRows);\n    }\n\n    checkAllNumber(stringToCheck)\n    {\n        var number=[1,2,3,4,5,6,7,8,9,0];\n        for(var i = 0; i < stringToCheck.length ; i++)\n        {\n            var isFound = false;\n            for(var j = 0; j < number.length ;j++)\n            {\n                if(number[j]==stringToCheck[i])\n                {\n                    isFound = true;\n                    break;\n                }\n            }\n            if(!isFound) return false; \n        }\n        return true;\n    }\n\n    checkAllDoubleNumber(stringToCheck) {\n        var number=['1','2','3','4','5','6','7','8','9','0','.'];\n        for(var i = 0; i < stringToCheck.length ; i++)\n        {\n            var isFound = false;\n            for(var j = 0; j < number.length ;j++)\n            {\n                if(number[j]==stringToCheck[i])\n                {\n                    isFound = true;\n                    break;\n                }\n            }\n            if(!isFound) return false; \n        }\n        return true;\n    }\n\n    isLeafYear(year) {\n        if(year % 400 == 0) return true;\n        if(year % 100 == 0) return false;\n        if(year % 4 == 0) return true;\n        else return false;\n    }\n\n    toDateString(dateStringToConvert)\n    {\n        var days = dateStringToConvert.split('/');\n        if(days.length !=3) return \"\";\n        // Check một số cái điều kiện về tháng\n        if(!this.checkAllNumber(days[0]) || parseInt(days[0]) > 12 || parseInt(days[0]) < 1 )\n        {\n            return \"\";\n        } \n        // Check một số điều kiện về năm\n        if(!this.checkAllNumber(days[2]) || parseInt(days[2]) <= 0 )\n        {\n            return \"\";\n        }\n        // Check các điều kiện về ngày \n        var dayInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n        if(parseInt(days[0]) < 1 || parseInt(days[0]) > 31)\n        {\n            return \"\";\n        }\n        var dayOfCurrrentMonth = dayInMonth[parseInt(days[0])];\n        if(parseInt(days[0]) == 2)\n        {\n            if(this.isLeafYear(parseInt(days[2])))\n            {\n                dayOfCurrrentMonth = 29;\n            }\n        }\n        if(parseInt(days[0]) > dayOfCurrrentMonth)\n        {\n            return \"\";\n        }\n        // Này là trường hợp lý tưởng nhất luôn rồi\n        return '20' + days[2] + '-' + days[0] + '-' + days[1]; \n    }\n\n    checkConstraintOfExcelObject(newRow, index) {\n        // check quantity\n        try {\n            if(parseInt(newRow.quantity) <= 0 || this.checkAllNumber(newRow.quantity)==false)\n            {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"The number of product in line \"+ (index + 1) +\" is invalid\",\"warning\");\n                return false;\n            }\n        }\n        catch(e)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"The number of product in line \"+ (index + 1) +\" is invalid\",\"warning\");\n            return false;\n        }\n\n        try {\n            if(parseFloat(newRow.originalPrice) <= 0 || this.checkAllDoubleNumber(newRow.originalPrice)==false)\n            {\n                this.props.hideAlert();\n\t\t\t    this.props.showAlert(\"Import price of product in line \"+ (index + 1) +\" is invalid\",\"warning\");\n            }\n\n        }\n        catch (e){\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Import price of product in line \"+ (index + 1) +\" is invalid\",\"warning\");\n            return false;\n        }\n\n        try {\n            if(parseFloat(newRow.sellPrice) <= 0 || this.checkAllDoubleNumber(newRow.sellPrice)==false)\n            {\n                this.props.hideAlert();\n\t\t\t    this.props.showAlert(\"Sell price of product in line \"+ (index + 1) +\" is invalid\",\"warning\");\n                return false;\n            }\n\n        }\n        catch (e){\n            this.props.hideAlert();\n            this.props.showAlert(\"Sell price of product in line \"+ (index + 1) +\" is invalid\",\"warning\");\n            return false;\n        }\n\n        try {\n            if(this.toDateString(newRow.expiredDate)==\"\")\n            {\n                this.props.hideAlert();\n                this.props.showAlert(\"Expired day of product in line \"+ (index + 1) +\" is invalid\",\"warning\");\n                return false;\n            }\n        }\n        catch(e)\n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Expired day of product in line \"+ (index + 1) +\" is invalid\",\"warning\");\n            return false;\n        }\n        // Check ngày hết hạn lớn hơn ngày nhập là ngày hiện tại\n        try{\n            // console.log(\"In thử ngày hiện tại\", new Date().getTime())\n            if(new Date().getTime() - new Date(this.toDateString(newRow.expiredDate)).getTime() >=0)\n            {\n                this.props.hideAlert();\n                this.props.showAlert(\"Expired day of product in line \"+ (index + 1) +\" must be greater than the import day\",\"warning\");\n                return false;\n            }\n        }\n        catch(e) {\n            this.props.hideAlert();\n            this.props.showAlert(\"Expired day of product in line \"+ (index + 1) +\" must be greater than the import day\",\"warning\");\n            return false;\n        }\n        // Check giá gốc phải nhỏ hơn giá bán\n        if ( parseFloat(newRow.sellPrice) - parseFloat(newRow.originalPrice) <=0.0) \n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Sell price of product in line \"+ (index + 1) +\" must be greater than the import price\",\"warning\");\n            return false;\n        }\n        // Check cái đơn vị tiền\n        if ( newRow.currency != '$' && newRow.currency !='VNĐ') \n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Currency of product in line \"+ (index + 1) +\" must be either '$' or 'VNĐ'\",\"warning\");\n            return false;\n        }\n        // Check xong hết các constraint;\n        return true;\n    }\n\n    calculateDay(dateString1, dateString2)\n    {\n        return (\n            (new Date(dateString1)).setHours(0, 0, 0) \n                - \n            (new Date(dateString2)).setHours(0,0,0)\n            )\n            /(1000 * 60 * 60 * 24);\n    }\n\n    getCurrentDateTimeString()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    checkRegulationOfExcelObject(newRow, index) {\n        if(Object.keys(this.props.regulation).length == 0) return true;\n        try {\n            if(\n                this.props.regulation.minExpiredProduct > \n                this.calculateDay(this.toDateString(newRow.expiredDate), this.getCurrentDateTimeString())\n            )\n            {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert('The expiration date in line '  + (index+1) \n                + ' must be at least ' +this.props.regulation.minExpiredProduct + ' day(s) older than the import date',\"warning\");\n                return false;\n            }\n        }\n        catch(e){\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Some error happened in checking regulation of import day and expire day\",\"warning\");\n            return false;\n        }\n        return true;\n    }\n\n    // Thêm các sản phẩm vào cơ sở dữ liệu:\n    addProductsFromExcel(excelObject){ \n        var allTypes = [];\n        var allProducts = [];\n        var allJoins = [];\n\n        var allProductsforRedux = [];\n        // ID bắt đầu đánh ở đây:\n        var genIDProductStart = 0;\n        var listProductInfor = this.props.listProduct.state;\n        if(listProductInfor.length > 0)\n        {\n            genIDProductStart = parseInt(listProductInfor[listProductInfor.length-1]._id.productID) + 1;\n        } \n        \n        var currentgenIDTypeStart = 0;\n        var listTypeInfor = this.props.typeProduct;\n        console.log(\"listTypeInfor\", listTypeInfor);\n        if(listTypeInfor.length>0)\n        {\n            currentgenIDTypeStart = parseInt(listTypeInfor[listTypeInfor.length-1]._id.typeID) + 1;\n        } \n\n        var excecuteListType = [];\n        // Chạy từng cái object để tạo cái product, cái type và cái join\n        for(var i = 0; i < excelObject.length; i++)\n        {\n            // Tách riêng từng cái product\n            var currentProduct = {\n                _id: {\n                    productID: genIDProductStart + i,\n                    importDate: this.getCurrentDateTimeString(),\n                    storeID: this.props.infoUser.email,\n                },\n                name: excelObject[i].name,\n                quantity: excelObject[i].quantity,\n                remain: excelObject[i].quantity,\n                importPrice: (excelObject[i].currency == 'VNĐ') ?\n                    excelObject[i].originalPrice :\n                    excelObject[i].originalPrice * this.props.regulation.exchangeRate,\n                sellPrice: (excelObject[i].currency == 'VNĐ') ?\n                    excelObject[i].sellPrice :\n                    excelObject[i].sellPrice * this.props.regulation.exchangeRate,\n                expires: this.toDateString(excelObject[i].expiredDate),\n                imgUrl: 'none',\n                unit: excelObject[i].unit,\n            }\n            allProducts.push(currentProduct);\n            // Tách riêng từng cái type của cái currentProduct\n            var currentTypes = excelObject[i].productTypeName.split(' || ');\n            // console.log(\"currentTypes\", currentTypes)\n\n            // Tìm kiếm các cái trong listTypeInfor và trong cái executeListType\n            var currentProductRedux = currentProduct;\n            var typeIDList = [];\n\n            for(var k = 0; k < currentTypes.length ; k ++)\n            {\n                var indexFound = -1;\n                // Tìm kiếm trong các loại có sẵn\n                for(var j = 0 ; j < listTypeInfor.length; j++)\n                {\n                    if(currentTypes[k] == listTypeInfor[j].name)\n                    {\n                        indexFound = listTypeInfor[j]._id.typeID;\n                        break;\n                    }\n                }\n                if(indexFound != -1)\n                {\n                    // Tạo một cái object join để thêm vào cái có sẵn\n                    var currentproductJoinType = {\n                        _id : {\n                            productID: genIDProductStart + i,\n                            typeID: indexFound, \n                            importDate: this.getCurrentDateTimeString(),\n                            storeID: this.props.infoUser.email,\n                        }\n                    }\n                    allJoins.push(currentproductJoinType);\n\n                    typeIDList.push(indexFound);\n                }\n                else \n                {\n                    var indexExecFound = -1;\n                    for(var l =0 ; l < excecuteListType.length ; l++)\n                    {\n                        if(currentTypes[k] == excecuteListType[l].name)\n                        {\n                            indexExecFound = excecuteListType[l]._id.typeID;\n                        }\n                    }\n                    if(indexExecFound != -1)\n                    {\n                        var currentproductJoinType = {\n                            _id : {\n                                productID: genIDProductStart + i,\n                                typeID: indexExecFound, \n                                importDate: this.getCurrentDateTimeString(),\n                                storeID: this.props.infoUser.email,\n                            }\n                        }\n                        allJoins.push(currentproductJoinType);\n\n                        typeIDList.push(indexExecFound);\n                    }\n                    // Nếu như không tìm thấy trong cả hai cái thì phải thêm thôi\n                    else \n                    {\n                        // Thêm các cái mình sẽ add vào csdl ở đây\n                        var newTypeToAdd = {\n                            _id:{\n                                typeID: currentgenIDTypeStart,\n                                storeID: this.props.infoUser.email,\n                            },\n                            name: currentTypes[k],\n                        }\n                        allTypes.push(newTypeToAdd);\n                        \n                        // Sau đó sẽ thêm vào cái cái join ở đây\n                        var currentproductJoinType = {\n                            _id : {\n                                productID: genIDProductStart + i,\n                                typeID: currentgenIDTypeStart, \n                                importDate: this.getCurrentDateTimeString(),\n                                storeID: this.props.infoUser.email,\n                            }\n                        }\n                        allJoins.push(currentproductJoinType);\n\n                        typeIDList.push(currentgenIDTypeStart);\n                        // Cộng thêm để lấy ID cho các cái sau này\n                        currentgenIDTypeStart ++;\n                    }\n                }\n            }\n            \n            // Thêm vào redux\n            var currentProductRedux2 = {\n                ...currentProductRedux,\n                typeIDList: typeIDList,\n            }\n            allProductsforRedux.push(currentProductRedux2);\n        }\n        console.log(\"allProducts\", allProducts);\n        console.log(\"allTypes\", allTypes);\n        console.log(\"allJoins\", allJoins);\n        // var allTypes = [];\n        // var allProducts = [];\n        // var allJoins = [];\n\n        // Lấy được ok rồi, giờ thì thêm từng cái vào cơ sở dữ liệu thôi\n        // Thêm thử tất cả sản phẩm vào csdl xem sao \n\n        var dataProduct = {\n            token: localStorage.getItem('token'),\n            products: [...allProducts ]\n        }\n        axios.post(`http://localhost:5000/api/product/import`, dataProduct)\n            .then(res => {\n                console.log(\"Save success\");\n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n                console.log(\"Bug when add dataProduct\", err);\n            })\n\n        \n        for(var m = 0 ; m < allTypes.length ; m++)\n        {\n            const dataType = {\n                token: localStorage.getItem('token'),\n                productType: {\n                    ...allTypes[m]\n                }    \n            }\n            axios.post(`http://localhost:5000/api/product/type`, dataType)\n            .then(res => {\n                \n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n                console.log('bug when add types',err)\n            })\n            // Cập nhật type vào redux\n            this.props.addTypeToReducer(dataType.productType);\n        }      \n\n        for(var m = 0 ; m < allJoins.length ; m++)\n        {\n            const dataJoin = {\n                token: localStorage.getItem('token'),\n                productJoinType: {\n                    ...allJoins[m]\n                }  \n            }\n            axios.post(`http://localhost:5000/api/product/join`, dataJoin)\n                .then(res => {\n                    \n                })\n                .catch(err => {\n                    console.log(err);\n                })\n        }\n        console.log(\"lưu vô bảng join thành công\");\n        // Cập nhật các sản phẩm và joinType vào redux:\n        for(var m = 0; m < allProductsforRedux.length ;m++)\n        {\n            this.props.addProductToRedux(allProductsforRedux[m]);\n        }\n        this.props.hideAlert();\n\t\tthis.props.showAlert(\"Add products from excel file success\",\"success\");\n    }\n\n    render() {\n        return (\n            <div id=\"scroll-bar\" style={{overflow: 'auto', height:'100vh'}}>\n                <div style={{ width: '100%', marginTop: '40px', marginBottom: '40px', paddingBottom: '40px' }}>\n                    <Container style={{ marginBottom: '20px', marginTop: '20px' }} maxWidth=\"xl\">\n                        <Grid className=\"profile-body\" container spacing={2}>\n                            <Grid item  lg={3} md={12} sm={12}>\n                                <Grid container spacing={2}>\n                                    {/* <Grid item md={12} sm={12}>\n                                        <SortByTable></SortByTable>\n                                    </Grid> */}\n                                    <Grid item md={12} sm={12}>\n                                        <Grid container spacing={2}>\n                                            <Grid item md={12} sm={12}  >\n                                                <Card>\n                                                    <CardHeader style={{ height: 56, color: !this.props.darkmode ? '#0091ea' :'white', backgroundColor: !this.props.darkmode ? '#efeeef' :'#455a64'}} title=\"Import Manager\" />\n                                                    <Divider></Divider>\n                                                    <CardContent>\n                                                        <Grid container spacing={2}>\n                                                            <Grid item md={6} sm={12}>\n                                                                <Button variant=\"contained\" style={{height: 40, width: '100%'}}>\n                                                                    <Button style={{color: '#fff', textDecoration: 'none', height: 43}} onClick={() => this.props.changeStatusAddGood()}>\n                                                                        <BiPlusMedical color={'white'} size={16} style={{marginRight: 4}}/>\n                                                                        Import\n                                                                    </Button>\n                                                                </Button>\n                                                            </Grid>\n                                                            \n                                                            <Grid item md={6} sm={12} style={{justifyContent:'space-between'}}>\n                                                                <label \n                                                                    className='excel-instruction'\n                                                                    style={{ width:'100%' ,backgroundColor: '#31be7d', padding: '4px 8px',borderRadius: 4, lineHeight: 2.0, color:'#fff', display: 'flex', alignItems:'center', justifyContent:'center'}} \n                                                                    for=\"upload-excel\"\n                                                                >\n                                                                    <img src={excelLogo} width={18} height={18} style={{marginRight: 2}}></img>\n                                                                    <label for=\"upload-excel\" className='excel-instruction' style={{fontSize: 15, display: 'block'}}>Load Excel</label>\n                                                                </label>\n                                                                <input \n                                                                    id=\"upload-excel\" type=\"file\" style={{display: 'none'}} \n                                                                    accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" \n                                                                    onChange={(e) => this.uploadExcel(e)}\n                                                                ></input>\n                                                            </Grid>\n                                                            \n                                                            <Grid item md={12} sm={12}>\n                                                                <Button style={{ backgroundColor: 'yellowgreen', width:'100%' }}  onClick={() => this.props.changeExcelInstruction()} variant=\"contained\">\n                                                                    <BsCardList color={'white'} size={16} style={{marginRight: 4}}></BsCardList>\n                                                                    Excel Instruction\n                                                                </Button>\n                                                            </Grid>\n                                                        </Grid>\n                                                    </CardContent>\n                                                </Card>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                    <Grid item md={12} sm={12}>\n                                        <TypeManager></TypeManager>\n                                    </Grid>\n                                    \n                                </Grid>\n                            </Grid>\n                            <Grid item  lg={9} md={12} sm={12}>\n                                <GoodTableDisplay/>\n                            </Grid>\n                        </Grid>\n                    </Container>\n                    {/* Đây là phần modal */}\n\n                    {this.props.addTypeStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\n                            <AddTypeModal></AddTypeModal>\n                        </div>\n                    ): null}\n                    {this.props.confirmStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\n                            <ConfirmModal></ConfirmModal>\n                        </div>\n                    ): null}\n                    {this.props.updateGoodStatus ? (\n                        <div \n                            className=\"modal-add\"\n                        >\n                            <div onClick={() => {this.props.changeUpdateGoodStatus();}} className=\"modal-overlay\"></div>\n                            <UpdateGoodModal\n                                style={{\n                                    marginTop: 0\n                                }}\n                            >\n                            </UpdateGoodModal>\n                        </div>\n                    ): null}\n                     {this.props.editTypeStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeEditTypeStatus();}} className=\"modal-overlay\"></div>\n                            <EditTypeModal></EditTypeModal>\n                        </div>\n                    ): null}\n                    {/* {this.props.editTypeStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeEditTypeStatus();}} className=\"modal-overlay\"></div>\n                            <EditTypeModal></EditTypeModal>\n                        </div>\n                    ): null} */}\n                    {this.props.statusAddGood ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeStatusAddGood();}} className=\"modal-overlay\"></div>\n                            <AddGoodModal></AddGoodModal>\n                        </div>\n                    ): null}\n                    {this.props.statusUpdateType ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeStatusUpdateType();}} className=\"modal-overlay\"></div>\n                            <UpdateTypeModal></UpdateTypeModal>\n                        </div>\n                    ): null}\n                    {this.props.excelInstructionStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeExcelInstruction();}} className=\"modal-overlay\"></div>\n                            <ExcelInstruction></ExcelInstruction>\n                        </div>\n                    ): null}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        confirmStatus: state.confirmStatus,\n        deleteStatus: state.deleteStatus,\n        updateGoodStatus: state.updateGoodStatus,\n        editTypeStatus: state.editTypeStatus,\n        isAddTypeStatus: state.isAddTypeStatus,\n        statusAddGood: state.statusAddGood,\n        infoUser: state.infoUser,\n        statusUpdateType: state.statusUpdateType,\n        typeProduct: state.typeProduct,\n        regulation: state.regulationReducer,\n        listProduct: state.listProduct,\n        excelInstructionStatus: state.excelInstructionStatus,\n        darkmode: state.statusDarkmode,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        unsetDelete: () => {\n            dispatch({\n                type: \"UNSET_DELETE_STATUS\",\n            })\n        },\n        changeUpdateGoodStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\n            })\n        },\n        changeEditTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\n            })\n        },\n        setAddTypeStatus: () => {\n            dispatch({\n                type: \"SET_ADD_TYPE_STATUS\",\n            });\n        },\n        setDeleteConfirm: () => {\n            dispatch({\n                type: \"SET_CONFIRM_DELETE_GOOD\",\n            }); \n        },\n        changeStatusAddGood: () => {\n            dispatch({\n                type: \"CHANGE_ADD_GOOD_STATUS\",\n            }); \n        },\n        getProductType: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_TYPE\",\n                data: data\n            });\n        },\n        changeStatusUpdateType: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_TYPE_STATUS\",\n            }); \n        },\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n        addTypeToReducer: (data) => {\n            dispatch({\n                type: \"ADD_TYPE\",\n                data: data,\n            });\n        },\n        addProductToRedux: (data) => {\n            dispatch({\n                type: \"ADD_PRODUCT\",\n                data: data,\n            }); \n        },\n        changeExcelInstruction: () => {\n            dispatch({\n                type: \"CHANGE_EXCEL_INSTRUCTION_STATUS\",\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\nexport default connect(mapStateToProps , mapDispatchToProps)(GoodManager);\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeeManager.js",["778","779","780","781","782","783","784","785","786","787","788","789","790","791","792","793","794","795","796","797"],"import React, { Component } from 'react';\nimport Page from './EmployeePartials/Page';\nimport Label from './EmployeePartials/Label';\nimport Scrollbar from './EmployeePartials/Scrollbar';\nimport SearchNotFound from './EmployeePartials/SearchNotFound';\nimport { Icon } from '@iconify/react';\nimport { sentenceCase } from 'change-case';\nimport {connect} from 'react-redux'\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport {\n    Card,\n    Table,\n    Stack,\n    Avatar,\n    Button,\n    Checkbox,\n    TableRow,\n    TableBody,\n    TableCell,\n    Container,\n    Typography,\n    TableContainer,\n    TablePagination,\n    TableHead, TableSortLabel,\n    CardContent, \n    CardHeader,\n    Divider\n} from '@mui/material';\nimport EmployeeToolbar from './EmployeePartials/EmployeeToolbar';\nimport EmployeeMoreMenu from './EmployeePartials/EmployeeMoreMenu';\nimport SackedEmployeeMenu from './EmployeePartials/SackedEmployeeMenu';\nimport EmployeeTableHeader from './EmployeePartials/EmployeeTableHeader';\nimport USERLIST from './EmployeePartials/fakeData'\nimport AddEmployeeModal from './EmployeePartials/AddEmployeeModal';\nimport UpdateEmployeeModal from './EmployeePartials/UpdateEmployeeModal';\nimport PayMoneyModal from './EmployeePartials/PayMoneyModal';\nimport FixedCalendar from './EmployeePartials/FixedCalendar';\nimport UnShiftEmployee from './EmployeePartials/UnShiftEmployee';\nimport AddNextWeekTimeKeepingModal from './EmployeePartials/AddNextWeekTimeKeeping';\nimport UpdateNextWeekTimeKeepingModal from './EmployeePartials/UpdateNextWeekTimeKeeping';\nimport NoJobEmployee from './EmployeePartials/NoJobEmployee';\nimport { withStyles } from '@material-ui/styles';\nimport TimekeepingTable from './EmployeePartials/TimekeepingTable';\nimport AddTimeKeepingModal from './EmployeePartials/AddTimeKeeperModal';\nimport UpdateTimeKeepingModal from './EmployeePartials/UpdateTimeKeepingModal';\nimport AddEmployeeToShift from './EmployeePartials/AddEmployeeToShift';\nimport axios from 'axios';\n\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '20px',\n    } \n})\n\nvar selected = [];\nvar filterName = \"\";\nvar filteredUsers = [];\nvar listUsers = [];\nclass EmployeeManager extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            change: false,\n        }; \n        //this.getAllEmployee();\n        // this.getAllEmployee();\n        this.getSackedEmployee();\n    }\n\n    handleFilterByName(event){\n        filterName = event.target.value;\n    }\n\n    addEmployee () {\n        this.props.changeAddEmployeeStatus();\n    }\n    // Lấy danh sách các nhân viên\n    async getAllEmployee () {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/employee/`, {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        listUsers = [];\n        for(var i = 0; i < result.length; i++)\n        {\n            listUsers.push(result[i]);\n        }\n        // Thêm vào cái redux\n        this.props.getEmployee(listUsers);\n        this.setState({change: !this.state.change});\n    }\n    // Thêm nhân viên\n    addEmployeeToDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n                managerID: \"19522006@gm.uit.edu.vn\",\n                password: \"abc123\",\n                firstName: \"Antonio\",\n                lastName: \"Rudiger\",\n                phoneNumber: \"03232323232\",\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\n                email: \"1911@gmail.com\",\n                address: \"Wherever\",\n                cardID: \"25110985819\",\n                startDate: \"2021-11-02T00:00:00.000Z\",\n                endDate: \"2021-11-31T00:00:00.000Z\",\n            }   \n        }\n        axios.post(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Save employee success!\",\"success\");\n            })\n            .catch(err => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n                // console.log(err);\n            })\n    }\n    // Xoá nhân viên\n    deleteEmployeeFromDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee:\n            [\n                {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\", \n                },\n            ]\n            \n        }\n        axios.delete(`http://localhost:5000/api/employee`,{data: data})\n            .then(res => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Sacked employee success\",\"success\");\n            })\n            .catch(err => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n    }\n    // Sửa nhân viên\n    updateEmployee()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n                managerID: \"19522006@gm.uit.edu.vn\",\n                password: \"abc123\",\n                firstName: \"Antonio\",\n                lastName: \"Rudiger Christensen\",\n                phoneNumber: \"03232323232\",\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\n                email: \"1911@gmail.com\",\n                address: \"Wherever\",\n                cardID: \"25110985819\",\n                startDate: \"2021-11-02T00:00:00.000Z\",\n                endDate: \"2021-11-31T00:00:00.000Z\",\n            }\n        }\n        axios.put(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Update success\");\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }\n\n    async getSackedEmployee () {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/employee/delete`, {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log('Bug when get delete employees',err);\n                this.props.hideAlert();\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        this.props.getSackedEmployee(result);\n        this.setState({change: !this.state.change});\n    }\n\n    backToWork() {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee:\n            [\n                {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\", \n                },\n            ]\n            \n        }\n        axios.patch(`http://localhost:5000/api/employee/delete`, data)\n            .then(res => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Employee return to work success\",\"success\");\n            })\n            .catch(err => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n    }\n\n    // Xoá nhân viên hoàn toàn\n    deleteEmployeePermantlyFromDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee:\n            [\n                {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\", \n                },\n            ]\n            \n        }\n        axios.delete(`http://localhost:5000/api/employee/delete`,{data: data})\n            .then(res => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Delete permantly employee(s) success\",\"success\");\n            })\n            .catch(err => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n    }\n\n    componentWillMount() {\n        document.title = 'Employee Manager'\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div\n                style={{display: 'block', overflowY: 'auto', height: '100vh', width:'100%'}}\n                id=\"scroll-bar\"\n            >\n                <Card style={{margin: 16}}>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Current employee(s)\" />\n                        <Divider />\n                        \n                        <CardContent style={{margin: 0}}>\n                            <Button\n                                variant='contained'\n                                startIcon={<Icon icon={plusFill} />}\n                                onClick={() => this.addEmployee()}\n                                >\n                                    New User\n                                </Button>\n                            <Card style={{width: '100%', margin: 0}}>\n                                <TableContainer id=\"scroll-bar\" style ={{maxHeight:'500px' , width: '100%',overflow: 'auto'}}>\n                                    <Table>\n                                        <TableRow>\n                                            <TableCell align=\"center\" className = {classes.goodTable_Cell}style={{color: '#fff', backgroundColor: '#000'}}>\n                                                ID\n                                            </TableCell>\n                                            <TableCell component=\"th\" className = {classes.goodTable_Cell}scope=\"row\" padding=\"none\" align=\"center\" style={{color: '#fff', backgroundColor: '#000'}}> \n                                                First Name\n                                            </TableCell>\n                                            <TableCell align=\"center\"  className = {classes.goodTable_Cell}style={{color: '#fff', backgroundColor: '#000'}} >Last Name</TableCell>  \n                                            <TableCell align=\"center\"  className = {classes.goodTable_Cell}style={{color: '#fff', backgroundColor: '#000'}}>\n                                                Date Of Birth\n                                            </TableCell>\n                                            <TableCell align=\"center\"  className = {classes.goodTable_Cell}style={{color: '#fff', backgroundColor: '#000'}}>Phone Number</TableCell>\n                                            <TableCell align=\"center\"  className = {classes.goodTable_Cell}style={{color: '#fff', backgroundColor: '#000'}}>Email</TableCell>\n                                            <TableCell align=\"center\"  className = {classes.goodTable_Cell}style={{color: '#fff', backgroundColor: '#000'}}>Address</TableCell>\n                                            <TableCell align=\"center\"  className = {classes.goodTable_Cell}style={{color: '#fff', backgroundColor: '#000'}}></TableCell>\n                                        </TableRow>\n                                        <TableBody\n                                            style={{height: '100%', width: '100%'}}\n                                        >\n                                        {\n                                            this.props.listEmployee.employees.map((row) => {\n                                            return (\n                                                <TableRow\n                                                    hover\n                                                    tabIndex={-1}\n                                                    role=\"checkbox\"\n                                                >\n                                                    <TableCell align=\"center\">\n                                                        {row._id.employeeID}\n                                                    </TableCell>\n                                                    <TableCell component=\"th\" scope=\"row\" padding=\"none\" align=\"center\">\n                                                            {row.firstName}\n                                                    </TableCell>\n                                                    <TableCell align=\"center\">{row.lastName}</TableCell>  \n                                                    <TableCell align=\"center\">\n                                                        {row.dateOfBirth.indexOf('T') != -1 ? row.dateOfBirth.substring(0,row.dateOfBirth.indexOf('T')): row.dateOfBirth}\n                                                    </TableCell>\n                                                    <TableCell align=\"center\">{row.phoneNumber}</TableCell>\n                                                    <TableCell align=\"center\">{row.email}</TableCell>\n                                                    <TableCell align=\"center\">{row.address}</TableCell>\n                                                    <TableCell align=\"right\">\n                                                        <EmployeeMoreMenu\n                                                            data={row._id.employeeID}    \n                                                        >\n                                                        </EmployeeMoreMenu>\n                                                    </TableCell>\n                                                </TableRow>\n                                            );\n                                            })}\n                                        </TableBody>\n                                    </Table>\n                                </TableContainer>\n                                \n                            </Card>\n                            \n                        </CardContent>\n                </Card>\n                <Card  style={{margin: 16}}>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Calendar shift\" />\n                        <Divider />\n                        <CardContent>\n                            <FixedCalendar/>\n                        </CardContent>\n                </Card>\n                <Card  style={{margin: 16}}>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"No schedule employee(s)\" />\n                        <Divider />\n                        <CardContent>\n                            <NoJobEmployee></NoJobEmployee>\n                        </CardContent>\n                </Card>\n                <Card  style={{margin: 16}}>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Off day\" />\n                        <Divider />\n                        <CardContent>\n                            <UnShiftEmployee/>\n                        </CardContent>\n                </Card>    \n                <Card  style={{margin: 16}}>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"All timekeeping(s)\" />\n                        <Divider />\n                        <CardContent>\n                            <TimekeepingTable></TimekeepingTable>\n                        </CardContent>\n                </Card>    \n                <Card  style={{margin: 16}}>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Sacked employee(s)\" />\n                        <Divider />\n                        <CardContent>\n                            <TableContainer id=\"scroll-bar\" style ={{maxHeight:'500px',overflowY: 'auto', overflowX:'hidden', boxShadow: '1px 1px #888888'}}>\n                                <Table>\n                                    <TableRow>\n                                        <TableCell align=\"center\" className = {classes.goodTable_Cell} style={{color: '#fff', backgroundColor: '#000'}}>\n                                            ID\n                                        </TableCell>\n                                        <TableCell component=\"th\" className = {classes.goodTable_Cell} scope=\"row\" padding=\"none\" align=\"center\" style={{color: '#fff', backgroundColor: '#000'}}> \n                                            First Name\n                                        </TableCell>\n                                        <TableCell align=\"center\" className = {classes.goodTable_Cell} style={{color: '#fff', backgroundColor: '#000'}} >Last Name</TableCell>  \n                                        <TableCell align=\"center\" className = {classes.goodTable_Cell} style={{color: '#fff', backgroundColor: '#000'}}>\n                                            Date Of Birth\n                                        </TableCell>\n                                        <TableCell align=\"center\" className = {classes.goodTable_Cell} style={{color: '#fff', backgroundColor: '#000'}}>Phone Number</TableCell>\n                                        <TableCell align=\"center\" className = {classes.goodTable_Cell} style={{color: '#fff', backgroundColor: '#000'}}>Email</TableCell>\n                                        <TableCell align=\"center\" className = {classes.goodTable_Cell} style={{color: '#fff', backgroundColor: '#000'}}>Address</TableCell>\n                                        <TableCell align=\"center\" className = {classes.goodTable_Cell} style={{color: '#fff', backgroundColor: '#000'}}></TableCell>\n                                    </TableRow>\n                                    <TableBody\n                                        style={{height: '100%', width: '100%'}}\n                                    >\n                                    {\n                                        this.props.listSackedEmployee.employees.map((row) => {\n                                        return (\n                                            <TableRow\n                                                hover\n                                                tabIndex={-1}\n                                            >\n                                                <TableCell   align=\"center\">\n                                                    {row._id.employeeID}\n                                                </TableCell>\n                                                <TableCell component=\"th\" scope=\"row\" padding=\"none\" align=\"center\">\n                                                    {row.firstName}\n                                                </TableCell>\n                                                <TableCell align=\"center\">{row.lastName}</TableCell>  \n                                                <TableCell align=\"center\">{row.dateOfBirth.substring(0,row.dateOfBirth.indexOf('T'))}</TableCell>\n                                                <TableCell align=\"center\">{row.phoneNumber}</TableCell>\n                                                <TableCell align=\"center\">{row.email}</TableCell>\n                                                <TableCell align=\"center\">{row.address}</TableCell>\n                                                <TableCell align=\"center\">\n                                                    <SackedEmployeeMenu\n                                                        data={row._id.employeeID}    \n                                                    >\n                                                    </SackedEmployeeMenu>\n                                                </TableCell>\n                                            </TableRow>\n                                        );\n                                        })}\n                                    </TableBody>\n                                </Table>\n                            </TableContainer>\n                        </CardContent>\n                </Card>    \n                     \n                    \n\n                    \n\n\n                {/* Đây là phần modal */}\n                {this.props.addEmployeeStatus ? (\n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeAddEmployeeStatus();}} className=\"modal-overlay\"></div>\n                        <AddEmployeeModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </AddEmployeeModal>\n                    </div>\n                ): null}\n                {this.props.updateEmployeeStatus ? (\n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeUpdateEmployeeStatus();}} \n                            className=\"modal-overlay\"\n                        />\n                        <UpdateEmployeeModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </UpdateEmployeeModal>\n                    </div>\n                ): null}\n                {this.props.payEmployeeStatus ? (\n                    <div \n                        className=\"modal-add\"\n                        style={{width: '100%'}}\n                    >\n                        <div onClick={() => {this.props.changePayEmployeeStatus();}} className=\"modal-overlay\"></div>\n                        <PayMoneyModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </PayMoneyModal>\n                    </div>\n                ): null}\n                {this.props.statusAddNextWeekTimeKeeping \n                ? \n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeAddNextWeekTimeKeepingStatus();}} className=\"modal-overlay\"></div>\n                        <AddNextWeekTimeKeepingModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </AddNextWeekTimeKeepingModal>\n                    </div>\n                : null\n                }\n                {this.props.statusUpdateNextWeekTimeKeeping \n                ? \n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeUpdateNextWeekTimeKeepingStatus();}} className=\"modal-overlay\"></div>\n                        <UpdateNextWeekTimeKeepingModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </UpdateNextWeekTimeKeepingModal>\n                    </div>\n                : null\n                }\n                {this.props.statusAddTimeKeeping \n                ? \n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeAddTimeKeepingStatus()}} className=\"modal-overlay\"></div>\n                        <AddTimeKeepingModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </AddTimeKeepingModal>\n                    </div>\n                : null\n                }\n                {this.props.statusUpdateTimeKeeping \n                ? \n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeUpdateTimeKeepingStatus();}} className=\"modal-overlay\"></div>\n                        <UpdateTimeKeepingModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </UpdateTimeKeepingModal>\n                    </div>\n                : null\n                }\n                {this.props.statusAddEmployeeToShift\n                    ? \n                        <div \n                            className=\"modal-add\"\n                        >\n                            <div onClick={() => {\n                                this.props.changeAddEmployeeToShiftStatus();\n                            }} className=\"modal-overlay\"></div>\n                            <AddEmployeeToShift\n                                style={{\n                                    marginTop: 0\n                                }}\n                            >\n                            </AddEmployeeToShift>\n                        </div>\n                    : null\n                    }\n            </div>\n            \n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\n        payEmployeeStatus: state.payEmployeeStatus,\n        infoUser: state.infoUser,\n        listEmployee: state.listEmployee,\n        listSackedEmployee: state.listSackedEmployee,\n        statusAddNextWeekTimeKeeping: state.statusAddNextWeekTimeKeeping,\n        statusUpdateNextWeekTimeKeeping: state.statusUpdateNextWeekTimeKeeping,\n        statusAddTimeKeeping: state.statusAddTimeKeeping,\n        statusUpdateTimeKeeping: state.statusUpdateTimeKeeping,\n        statusDarkmode: state.statusDarkmode,\n        statusAddEmployeeToShift: state.statusAddEmployeeToShift,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\n            });\n        },\n        changeUpdateEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\n            });\n        },\n        changePayEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        getSackedEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE_SACKED\",\n                employees: data,\n            });\n        },\n        changeAddNextWeekTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\n            });\n        },\n        changeUpdateNextWeekTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\n            });\n        },\n        changeAddTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\n            });\n        },\n        changeUpdateTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        changeAddEmployeeToShiftStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_TO_SHIFT_STATUS\",\n            });\n        },\n    }\n}\nexport default connect(mapStateToProps , mapDispatchToProps)((withStyles(styles, {withTheme: true}))(EmployeeManager));\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/Profile.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/SellProduct.js",["798"],"import React, { Component } from 'react';\nimport { Container, Grid, Button, CardActionArea, CardActions, CardMedia } from '@mui/material';\nimport '../../css/SellProduct.css'\nimport Tabs from './Tabs'\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport exampleImg from '../../img/good-example.jpg'\nimport { BiPlusMedical } from 'react-icons/bi';\nimport { connect } from 'react-redux'\nimport axios from 'axios';\nimport ShoppingBags from './ShoppingBags';\nimport Printf from './Print'\nimport HistoryReciept from './HistoryReciept';\n\nclass SellProduct extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            change: false,\n            test1: true,\n        }\n        this.storeID = this.props.infoUser.managerID ? this.props.infoUser.managerID : this.props.infoUser.email;\n        this.loadAllType();\n        this.loadAllGood();\n\n    }\n    storeID = \"\";\n    bull = (\n        <Box\n            component=\"span\"\n            sx={{ display: 'inline-block', mx: '2px', transform: 'scale(0.8)' }}\n        >\n            •\n        </Box>\n    );\n\n    AddProduct = (value) => {\n        if (value.remain === 0) {\n            this.props.showAlert('Shout out !', 'warning')\n        } else {\n            var isCheck = false;\n            var currentQuantity;\n            var maxQuantity;\n            this.props.shoppingBags.map(value1 => {\n                if (value1.product.name === value.name) {\n                    isCheck = true;\n                    currentQuantity = value1.quantity\n                    maxQuantity = value.remain\n                }\n                return value;\n            })\n            if (isCheck) {\n                if (currentQuantity < maxQuantity) {\n                    this.props.raiseQuantity(value.name);\n                }\n            } else {\n                const newProduct = {\n                    product: value,\n                    quantity: 1,\n                }\n                this.props.addNewProductToShoppingBags(newProduct);\n            }\n        }\n    }\n\n    async loadAllType() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.storeID,\n            }\n        }\n\n        await axios.get(`http://localhost:5000/api/product/type`,\n            {\n                params: { ...data }\n            })\n            .then(res => {\n                result = res.data.data;\n                localStorage.getItem('token', res.data.token);\n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        //Get data và lưu các tên Type vào bảng\n        var listTypeInfor = [];\n        for (var i = 0; i < result.length; i++) {\n            listTypeInfor.push(result[i]);\n        }\n        this.props.getTypeToReducer(listTypeInfor);\n        this.setState({ change: !this.state.change });\n    }\n\n    async loadAllGood() {\n        var resultProduct = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.storeID,\n            }\n        }\n        await axios.get(`http://localhost:5000/api/product/`, {\n            params: { ...data }\n        })\n            .then(res => {\n                resultProduct = res.data.data;\n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        // Get hết từ cái productjoinType\n        var result = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.storeID,\n            }\n        }\n        await axios.get(`http://localhost:5000/api/product/join`, {\n            params: { ...data1 }\n        })\n            .then(res => {\n                result = res.data.data;\n                localStorage.getItem('token', res.data.token);\n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        // Lấy các cái jointype\n        var joinTypeInfor = [];\n        for (let i = 0; i < result.length; i++) {\n            joinTypeInfor.push(result[i]);\n        }\n\n        var listProductInfor = [];\n        for (let i = 0; i < resultProduct.length; i++) {\n            var typeIDList = [];\n            for (var j = 0; j < joinTypeInfor.length; j++) {\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) {\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\n                }\n            }\n            listProductInfor.push(\n                {\n                    ...resultProduct[i],\n                    typeIDList: typeIDList\n                });\n        }\n        this.props.getProductToReducer(listProductInfor);\n        this.setState({ change: !this.state.change });\n    }\n\n    componentWillMount() {\n        document.title = 'SellProduct'\n    }\n\n    render() {\n        \n        return (\n            <div id=\"scroll-bar\" className=\"sell-product\" >\n                <Container style={{ marginBottom: '20px' }} maxWidth=\"xl\">\n                    <Grid container spacing={2}>\n                        <Grid item lg={8} md={12} sm={12}>\n                            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', borderRadius: '8px', marginTop: '20px', backgroundColor: '#ffffff', height: 'calc(100vh - 40px)', overflow: 'hidden' }}>\n                                <div style={{ overflow: 'hidden', marginBottom: '5px' }}>\n                                    <Tabs></Tabs>\n                                </div>\n                                <Container id=\"choses-product\" style={{ height: '94%', overflowY: 'scroll' }} maxWidth=\"xl\">\n                                    <Grid container spacing={2}>\n                                        {(this.props.listProduct.state !== undefined && this.props.listProduct.state.length !== 0)\n                                            ? this.props.listProduct.state.filter(value => {\n                                                if (this.props.chooseTypeProductID === 'all') {\n                                                    return value;\n                                                }\n                                                if (value.typeIDList.includes(this.props.chooseTypeProductID)) {\n                                                    return value;\n                                                }\n                                            }).map(value => (\n                                                <Grid item lg={3} md={4} sm={4} xs={4}>\n                                                    <Card onClick={() => this.AddProduct(value)}>\n                                                        <CardActionArea>\n                                                            <CardMedia\n                                                                style={{ display: (value.remain === 0) ? 'block' : 'none' }}\n                                                                component=\"img\"\n                                                                height=\"140\"\n                                                                image='https://res.cloudinary.com/databaseimg/image/upload/v1637083732/aqd37xtgxukcq3x9eb4q.png'\n                                                                alt=\"green iguana\"\n                                                            />\n                                                            <div style={{ display: (value.remain !== 0) ? 'block' : 'none' }}>\n                                                                {\n                                                                    value.imgUrl === \"none\"\n                                                                        ? <CardMedia\n                                                                            component=\"img\"\n                                                                            height=\"140\"\n                                                                            image={exampleImg}\n                                                                            alt=\"green iguana\"\n                                                                        />\n                                                                        : <CardMedia\n                                                                            component=\"img\"\n                                                                            height=\"140\"\n                                                                            image={value.imgUrl}\n                                                                            alt=\"green iguana\"\n                                                                        />\n                                                                }\n                                                            </div>\n\n                                                            <CardContent style={{ padding: '5px' }}>\n                                                                <Typography style={{ textAlign: 'center' }} gutterBottom variant=\"h6\" component=\"div\">\n\n                                                                    {value.name}\n                                                                </Typography>\n                                                            </CardContent>\n                                                            <CardContent style={{ textAlign: 'center', margin: '0', padding: '0' }}>\n                                                                <Typography style={{ textAlign: 'center', margin: '0', padding: '0', fontSize: '0.7rem', fontWeight: '700', color: '#00000080' }} gutterBottom variant=\"h6\" component=\"div\">\n                                                                    Quantity: {value.remain}\n                                                                </Typography>\n                                                            </CardContent>\n                                                        </CardActionArea>\n                                                        <CardActions style={{ justifyContent: 'center' }}>\n                                                            <Button style={{ color: 'green', fontWeight: '700' }} endIcon={<BiPlusMedical></BiPlusMedical>} size=\"medium\" color=\"primary\">\n                                                                {this.props.regulation.currency === 'vnd' ? (value.sellPrice).toLocaleString() : ((value.sellPrice) / this.props.regulation.exchangeRate).toFixed(2).toLocaleString()}\n                                                            </Button>\n                                                        </CardActions>\n                                                    </Card>\n                                                </Grid>\n                                            )) : (<div style={{ width: '100%', height: '100%', textAlign: 'center', marginTop: '100px' }}>\n                                                <h3>Không có gì</h3>\n                                            </div>)}\n                                    </Grid>\n                                </Container>\n                            </div>\n                        </Grid>\n                        <Grid item lg={4} md={12}>\n                            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', borderRadius: '8px', marginTop: '20px', backgroundColor: '#ffffff', height: 'calc(100vh - 40px)', overflow: 'hidden', overflowX: 'hidden' }}>\n                                <div id=\"choses-product\" style={{ backgroundColor: '#e0e0e0', height: '60%', margin: '10px', overflowY: 'scroll', overflowX: 'hidden' }} >\n                                    <Grid sty container spacing={0}>\n                                        {/* Table */}\n                                        <Grid item className=\"customizeTable\" style={{ backgroundColor: '#bdbdbd', alignContent: 'center', justifyContent: 'center', borderBottom: '2px solic black' }} md={12} sm={12}>\n                                            <Grid style={{ textAlign: 'center', alignItems: 'center', justifyItems: 'center', fontWeight: 'bold' }} container spacing={0}>\n                                                <Grid item md={1} sm={1}>\n                                                    #\n                                                </Grid>\n                                                <Grid item md={1} sm={1}>\n                                                </Grid>\n                                                <Grid item md={4} sm={4}>\n                                                    Name\n                                                </Grid>\n                                                <Grid item md={3} sm={3}>\n                                                    Quantity\n                                                </Grid>\n                                                <Grid style={{ fontWeight: '700' }} item md={3} sm={3}>\n                                                    Giá\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        {/* Bắt đầu hóa đơn */}\n                                        <ShoppingBags></ShoppingBags>\n                                    </Grid>\n                                </div>\n                                <div style={{ height: '40%' }}>\n                                    <Printf ></Printf>\n                                </div>\n                            </div>\n                        </Grid>\n                    </Grid>\n                </Container>\n                {this.props.statusShowHistoryReciept ? (\n                    <HistoryReciept></HistoryReciept>\n                ) : null}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        listProduct: state.listProduct,\n        chooseTypeProductID: state.chooseTypeProduct,\n        infoUser: state.infoUser,\n        shoppingBags: state.shoppingBags,\n        statusShowHistoryReciept: state.statusShowHistoryReciept,\n        regulation: state.regulationReducer\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_STATUS\",\n            });\n        },\n        getTypeToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_TYPE\",\n                data: data\n            });\n        },\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n        addNewProductToShoppingBags: (newProduct) => {\n            dispatch({\n                type: \"ADD_NEW_PRODUCT_SHOPPING_BAGS\",\n                newProduct: newProduct,\n            })\n        },\n        raiseQuantity: (name) => {\n            dispatch({\n                type: \"RAISE_QUANTITY_SHOPPING_BAGS\",\n                name: name,\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        hideHistoryReceipt: () => {\n            dispatch({\n                type: \"CHANGE_HISTORY_RECIEPT_STATUS\"\n            })\n        }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SellProduct);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/ReiceiptManager.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/DashBoard.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/ControlReciept.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateTimeKeepingModal.js",["799","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, \n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nvar listDayInWeek = [\n    {ID:'T2',name:'Thứ hai'}, \n    {ID:'T3',name:'Thứ ba'}, \n    {ID:'T4',name:'Thứ tư'}, \n    {ID:'T5',name:'Thứ năm'}, \n    {ID:'T6',name:'Thứ sáu'}, \n    {ID:'T7',name:'Thứ bảy'}, \n    {ID:'CN',name:'Chủ nhật'}\n];\n\nclass UpdateTimeKeepingModal extends Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n            timeKeepingID: '',\n            dayChosed: '',\n            shiftID: '',\n        };\n        this.loadInitialData()\n    }\n\n    realDate = '';\n    shiftID = '';\n    dayChosed = '';\n    timeKeepingID = '';\n    loadInitialData()\n    {\n        console.log(this.props.updateTimeKeepingValue.state);\n        this.realDate = this.props.updateTimeKeepingValue.state.realDate;\n        this.shiftID = this.props.updateTimeKeepingValue.state._id.shiftType._id.shiftID;\n        this.timeKeepingID = this.props.updateTimeKeepingValue.state._id.employee._id.employeeID;\n        this.dayChosed= this.props.updateTimeKeepingValue.state._id.dateInWeek;\n        this.setState({\n            shiftID : this.props.updateTimeKeepingValue.state._id.shiftType._id.shiftID,\n            dayChosed: this.props.updateTimeKeepingValue.state._id.dateInWeek,\n            timeKeepingID: this.props.updateTimeKeepingValue.state._id.employee._id.employeeID,\n        });\n    }\n\n    findIndexCurrentKeepingInRedux(id)\n    {\n        //Đụng đến nếu sửa bảng\n        var listToSearch = this.props.listTimeKeeper;\n        for(var i = 0 ; i < listToSearch.length ; i ++)\n        {\n            if(listToSearch[i]._id.dateInWeek == id.dateInWeek && \n                listToSearch[i]._id.shiftType._id.shiftID == id.shiftType._id.shiftID&& \n                listToSearch[i]._id.employee._id.employeeID == id.employee._id.employeeID)\n            {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    checkContraint() {\n        if(this.state.dayChosed.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"You haven't select the day of week\",\"warning\");\n            return false;\n        }\n        if(this.state.shiftID.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"You haven't select the shift\",\"warning\");\n            return false;\n        }\n        console.log(this.state.timeKeepingID );\n        if( this.state.timeKeepingID == undefined || this.state.timeKeepingID.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"You haven't select the employee\",\"warning\"); \n            return false;\n        }\n        // Có CSDL thì báo xem có trùng với cái cũ ko nữa\n        return true;\n    }\n\n\n    UpdateChange() {\n        if(this.checkContraint()==false) return;\n        const data = {\n            _id: {\n                dateInWeek: this.dayChosed,\n                storeID: this.props.infoUser.email,\n                shiftType: {\n                    _id: {\n                        shiftID: this.shiftID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n                employee: {\n                    _id: {\n                        employeeID: this.timeKeepingID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n            },\n            realDate: document.querySelector('input[name=\"realDate\"]').value,\n        };\n        this.props.updateTimeKeeper(data, this.findIndexCurrentKeepingInRedux(data._id));\n        console.log(data);\n        this.props.changeUpdateTimeKeepingStatus();\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \n                    title=\"Update TimeKeeper\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            Real Date\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"date\" \n                                            name='realDate'\n                                            readOnly={true}\n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.realDate}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Choose Day in week\n                                        </div>\n                                        <FormControl sx={{ minWidth: 120 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                readOnly={true}\n                                                value = {this.dayChosed}\n                                                onChange={(event) => {\n                                                    this.dayChosed = event.target.value;\n                                                    this.setState({dayChosed: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    listDayInWeek.map((item) =>\n                                                        <MenuItem value={item.ID}>\n                                                            {item.name}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n\n                                    <Grid item md={8} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>\n                                            Choose Shift\n                                        </div>\n                                        <FormControl sx={{ minWidth: 220 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                readOnly={true}\n                                                value={this.shiftID}\n                                                onChange={(event) => {\n                                                    this.shiftID = event.target.value;\n                                                    this.setState({shiftID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\n                                                    : this.props.listShift.map((shift) =>\n                                                        <MenuItem value={shift._id.shiftID}>\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            TimeKeeping Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                readOnly={true}\n                                                value={this.timeKeepingID}\n                                                onChange={(event) => {\n                                                    this.timeKeepingID = event.target.value;\n                                                    this.setState({timeKeepingID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        !(this.state.alterID == item._id.employeeID) ?\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                        : null\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.UpdateChange()}>\n                                            Update Change\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        listTimeKeeper: state.listTimeKeeping,\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listShift: state.listShift,\n        listEmployee: state.listEmployee,\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\n        updateTimeKeepingValue: state.updateTimeKeepingValue,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeUpdateTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        addNewTimeKeeper: (data) => {\n            dispatch({\n                type: \"ADD_NEW_TIME_KEEPER\",\n                data: data,\n            });\n        }, \n        updateTimeKeeper: (data, indexOfVal) => {\n            dispatch({\n                type: \"UPDATE_TIMEKEEPER\",\n                data: data,\n                index: indexOfVal\n            });\n        }, \n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateTimeKeepingModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/SearchReceipt.js",["817","818","819"],"import React, { useState } from 'react';\nimport { BiSearchAlt } from 'react-icons/bi'\nimport { useDispatch , useSelector } from 'react-redux'\n\nfunction SearchReceipt(props) {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        dispatch({\n            type: \"RESET_SEARCH\",\n        })\n    }, [])\n\n    return (\n        <div className=\"search-customize\" style={{ borderRadius: '6px', backgroundColor: 'white', justifyContent: 'center', display: 'flex', marginBottom: '10px', padding: '10px' }}>\n            <BiSearchAlt style={{ fontSize: '1.6rem', marginRight: '10px', marginLeft: '10px' }}></BiSearchAlt>\n            <input onChange={(e) => {dispatch({type:\"CHANGE_SEARCH\", object: e.target.value })}} type=\"text\" style={{ width: '100%', outline: 'none', border: 'none' }} placeholder=\"Enter id receipt\"></input>\n        </div>\n    );\n}\n\nexport default SearchReceipt;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/ProductStatis.js",["820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841","842","843","844","845","846","847","848","849","850","851","852","853","854","855","856","857","858","859","860","861","862","863","864","865","866","867","868","869","870"],"import React from 'react';\nimport { Typography } from '@mui/material';\nimport { RiMoneyDollarCircleFill } from 'react-icons/ri'\nimport { useSelector } from 'react-redux'\nimport { MdImportExport } from \"react-icons/md\";\n\nfunction ProductStatis(props) {\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\n    const listReciept = useSelector(state => state.listReciept)\n    const [totalExport, setTotalExport] = React.useState('')\n    const listProduct = useSelector(state => state.listProduct.state)\n    const [totalImport, setTotalImport] = React.useState('');\n    // console.log(\"listProduct\", listProduct);\n    let nowTime = new Date()\n\n    React.useEffect(() => {\n        let money = 0;\n        let currentMonth = nowTime.getMonth() + 1;\n\n        if (typeHeaderDashboard == 'Today') {\n            var importProduct = 0;\n            for(var i = 0; i < listProduct.length; i++)\n            {\n                var realDate = listProduct[i]._id.importDate.substring(0,listProduct[i]._id.importDate.indexOf('T'));\n                var date = realDate.split('-');\n                // console.log(date);\n                // console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\n                if (date[2] == nowTime.getDate() && date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\n                    importProduct += parseInt(listProduct[i].quantity);\n                }\n            }\n            setTotalImport(importProduct);\n            var exportProduct = 0;\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                console.log(\"val\", value);\n                if (date[0] == nowTime.getDate() && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\n                    // Tính tổng số lượng sản phẩm\n                    var allExport = 0;\n                    for(var j = 0; j < value.listProduct.length; j++)\n                    {\n                        allExport += parseInt(value.listProduct[j].quantity);\n                    }\n                    if(!value.deleted) {\n                        exportProduct += allExport;\n                    }\n                }\n            })\n            setTotalExport(exportProduct)\n        } else if (typeHeaderDashboard == 'Yesterday') {\n            var importProduct = 0;\n            for(var i = 0; i < listProduct.length; i++)\n            {\n                var realDate = listProduct[i]._id.importDate.substring(0,listProduct[i]._id.importDate.indexOf('T'));\n                var date = realDate.split('-');\n                // console.log(date);\n                // console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\n                if (date[2] == nowTime.getDate() - 1 && date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\n                    importProduct += parseInt(listProduct[i].quantity);\n                }\n            }\n            setTotalImport(importProduct);\n\n            var exportProduct =0;\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                console.log(\"val\", value);\n                if (date[0] == nowTime.getDate() - 1 && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\n                    // Tính tổng số lượng sản phẩm\n                    var allExport = 0;\n                    for(var j = 0; j < value.listProduct.length; j++)\n                    {\n                        allExport += parseInt(value.listProduct[j].quantity);\n                    }\n                    if(!value.deleted) {\n                        exportProduct += allExport;\n                    }\n                }\n            })\n            setTotalExport(exportProduct)\n        } else if (typeHeaderDashboard == 'Month') {\n            var importProduct = 0;\n            for(var i = 0; i < listProduct.length; i++)\n            {\n                var realDate = listProduct[i]._id.importDate.substring(0,listProduct[i]._id.importDate.indexOf('T'));\n                var date = realDate.split('-');\n                console.log(date);\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\n                if (date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\n                    importProduct += parseInt(listProduct[i].quantity);\n                }\n            }\n            setTotalImport(importProduct);\n\n            var exportProduct =0;\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\n                    var allExport = 0;\n                    for(var j = 0; j < value.listProduct.length; j++)\n                    {\n                        allExport += parseInt(value.listProduct[j].quantity);\n                    }\n                    if(!value.deleted) {\n                        exportProduct += allExport;\n                    }\n                }\n            })\n            setTotalExport(exportProduct)\n        } else if (typeHeaderDashboard == 'Year') {\n            var importProduct = 0;\n            for(var i = 0; i < listProduct.length; i++)\n            {\n                var realDate = listProduct[i]._id.importDate.substring(0,listProduct[i]._id.importDate.indexOf('T'));\n                var date = realDate.split('-');\n                console.log(date);\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\n                if (date[0] == nowTime.getFullYear()) {\n                    importProduct += parseInt(listProduct[i].quantity);\n                }\n            }\n            setTotalImport(importProduct);\n\n            var exportProduct =0;\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[2] == nowTime.getFullYear()) {\n                    var allExport = 0;\n                    for(var j = 0; j < value.listProduct.length; j++)\n                    {\n                        allExport += parseInt(value.listProduct[j].quantity);\n                    }\n                    if(!value.deleted) {\n                        exportProduct += allExport;\n                    }\n                }\n            })\n            setTotalExport(exportProduct)\n        } else if (typeHeaderDashboard == 'All') {\n            var importProduct = 0;\n            if(listProduct!=undefined && listProduct.length != undefined)\n                for(var i = 0; i < listProduct.length; i++)\n                {\n                    importProduct += parseInt(listProduct[i].quantity);\n                }\n            setTotalImport(importProduct);\n            \n            var exportProduct =0;\n            listReciept.map(value => {\n                if(!value.deleted) {\n                    var allExport = 0;\n                    for(var j = 0; j < value.listProduct.length; j++)\n                    {\n                        allExport += parseInt(value.listProduct[j].quantity);\n                    }\n                    if(!value.deleted) {\n                        exportProduct += allExport;\n                    }\n                }\n            })\n            setTotalExport(exportProduct)\n        }\n    }, [typeHeaderDashboard])\n\n    return (\n        <div className=\"dashboard-css imported-good\">\n            <div className=\"dashboard-item-img imported-good\" style={{ marginBottom: '30px' }}>\n                <MdImportExport className=\"dashboard-item-icon imported-good\"></MdImportExport>\n            </div>\n            <Typography style={{ marginBottom: '10px' }} variant=\"h6\">\n                {totalImport.toLocaleString() + ' / ' + totalExport.toLocaleString()}\n            </Typography>\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\n                Import Product / Sell Product\n            </Typography>\n        </div>\n    );\n}\n\nexport default ProductStatis;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/ErrorReceipt.js",["871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889","890"],"import React from 'react';\nimport { Typography } from '@mui/material';\nimport { FaReceipt } from 'react-icons/fa'\nimport { useSelector } from 'react-redux'\nimport moment from 'moment'\n\n\nfunction ErrorReceipt(props) {\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\n    const listReciept = useSelector(state => state.listReciept)\n    const [index, setIndex] = React.useState(0)\n    let nowTime = new Date()\n\n    React.useEffect(() => {\n        let errorReciept = 0;\n        let currentMonth = nowTime.getMonth() + 1;\n        let lastMonth = new Date(moment().subtract(1, 'months'))\n        let yesterdayTime = new Date(moment().subtract(1, 'days'))\n\n        if (typeHeaderDashboard == 'Today') {\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[0] == nowTime.getDate() && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\n                    if (!value.deleted && value.isEdit) {\n                        errorReciept++\n                    }\n                }\n            })\n            setIndex(errorReciept)\n        } else if (typeHeaderDashboard == 'Yesterday') {\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[0] == yesterdayTime.getDate() - 1 && date[1] == yesterdayTime.getMonth() + 1 && date[2] == yesterdayTime.getFullYear()) {\n                    if (!value.deleted && value.isEdit) errorReciept++\n                }\n            })\n            setIndex(errorReciept)\n        } else if (typeHeaderDashboard == 'Month') {\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[1] == lastMonth.getMonth() && date[2] == lastMonth.getFullYear()) {\n                    if (!value.deleted && value.isEdit) errorReciept++\n                }\n            })\n            setIndex(errorReciept)\n        } else if (typeHeaderDashboard == 'Year') {\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[2] == nowTime.getFullYear()) {\n                    if (!value.deleted && value.isEdit) errorReciept++\n                }\n            })\n            setIndex(errorReciept)\n        } else if (typeHeaderDashboard == 'All') {\n            listReciept.map(value => {\n                if (!value.deleted && value.isEdit) {\n                    errorReciept++\n                }\n            })\n            setIndex(errorReciept)\n        }\n    }, [typeHeaderDashboard])\n\n    return (\n        <div className=\"dashboard-css error-receipt\">\n            <div className=\"dashboard-item-img error-receipt\" style={{ marginBottom: '30px' }}>\n                <FaReceipt className=\"dashboard-item-icon error-receipt\"></FaReceipt>\n            </div>\n            <Typography style={{ marginBottom: '10px' }} variant=\"h5\">{index}</Typography>\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\n                Exchange recepit\n            </Typography>\n        </div>\n    );\n}\n\nexport default ErrorReceipt;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/SalaryStats.js",["891","892","893","894","895","896","897","898","899","900","901","902","903","904","905","906","907","908","909","910","911","912","913","914","915","916","917","918","919","920","921","922","923","924","925","926"],"import React from 'react';\nimport { Typography } from '@mui/material';\nimport { RiMoneyDollarCircleFill } from 'react-icons/ri'\nimport { useSelector } from 'react-redux'\nimport { BsCashCoin } from \"react-icons/bs\";\nimport { IoCashSharp } from \"react-icons/io5\";\n\nfunction calculateTime(timeFrom, timeEnd)\n{\n    var realTimeFrom, realTimeEnd;\n\n    realTimeFrom = parseInt(timeFrom.substring(0, timeFrom.indexOf(':')));\n    if(timeFrom.indexOf('PM')!=-1) realTimeFrom += 12;\n    var minuteFrom= parseInt(timeFrom.substring(timeFrom.indexOf(':')+1, timeFrom.indexOf(':') + 3));\n\n    realTimeEnd = parseInt(timeEnd.substring(0, timeEnd.indexOf(':')));\n    if(timeEnd.indexOf('PM')!=-1) realTimeEnd += 12;\n    var minuteEnd= parseInt(timeEnd.substring(timeEnd.indexOf(':')+1, timeEnd.indexOf(':') + 3));\n\n    var timeDiff = realTimeEnd - realTimeFrom;\n    \n    if(minuteEnd - minuteFrom < 0)\n    {\n        timeDiff --;\n        minuteEnd += 60;\n    }\n\n    return Math.round(timeDiff + (minuteEnd - minuteFrom) / 60.0);\n}\n\nfunction calculateSalary(shift){\n    var salary = 0;\n    // Tính thời gian của ca làm\n    return shift._id.shiftType.salary * (calculateTime(shift._id.shiftType.timeFrom,shift._id.shiftType.timeEnd));\n}\n\n\nfunction SalaryStats(props) {\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\n    const listReciept = useSelector(state => state.listReciept)\n    const listTimeKeeping = useSelector(state => state.listTimeKeeping)\n    const [totalSalary, setTotalSalary] = React.useState('')\n    const [totalMoney, setTotalMoney] = React.useState('')\n    const regulation = useSelector(state => state.regulationReducer)\n    let nowTime = new Date();\n\n    React.useEffect(() => {\n        \n        let money = 0;\n        let currentMonth = nowTime.getMonth() + 1;\n\n        console.log(\"listTimeKeeping\",listTimeKeeping )\n        // if(listTimeKeeping.length>0)\n        //     console.log(calculateSalary(listTimeKeeping[0]));\n\n        if (typeHeaderDashboard == 'Today') {\n            let salary = 0;\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\n            {\n                var realDate = listTimeKeeping[i]._id.realDate.substring(0,listTimeKeeping[i]._id.realDate.indexOf('T'));\n                var date = realDate.split('-');\n                console.log(date);\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\n                if (date[2] == nowTime.getDate() - 1 && date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\n                    salary += calculateSalary(listTimeKeeping[i])\n                }\n            }\n            setTotalSalary(salary);\n        } else if (typeHeaderDashboard == 'Yesterday') {\n            let salary = 0;\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\n            {\n                var realDate = listTimeKeeping[i]._id.realDate.substring(0,listTimeKeeping[i]._id.realDate.indexOf('T'));\n                var date = realDate.split('-');\n                console.log(date);\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\n                if (date[2] == nowTime.getDate() - 2 && date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\n                    salary += calculateSalary(listTimeKeeping[i])\n                }\n            }\n            setTotalSalary(salary);\n\n        } else if (typeHeaderDashboard == 'Month') {\n            let salary = 0;\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\n            {\n                var realDate = listTimeKeeping[i]._id.realDate.substring(0,listTimeKeeping[i]._id.realDate.indexOf('T'));\n                var date = realDate.split('-');\n                console.log(date);\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\n                if (date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\n                    salary += calculateSalary(listTimeKeeping[i])\n                }\n            }\n            setTotalSalary(salary);\n        } else if (typeHeaderDashboard == 'Year') {\n            let salary = 0;\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\n            {\n                var realDate = listTimeKeeping[i]._id.realDate.substring(0,listTimeKeeping[i]._id.realDate.indexOf('T'));\n                var date = realDate.split('-');\n                console.log(date);\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\n                if (date[0] == nowTime.getFullYear()) {\n                    salary += calculateSalary(listTimeKeeping[i])\n                }\n            }\n            setTotalSalary(salary);\n        } else if (typeHeaderDashboard == 'All') {\n            let salary = 0;\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\n            {\n                salary += calculateSalary(listTimeKeeping[i])\n            }\n            setTotalSalary(salary);\n        }\n    }, [typeHeaderDashboard])\n\n    return (\n        <div className=\"dashboard-css sold-good\">\n            <div className=\"dashboard-item-img sold-good\" style={{ marginBottom: '30px'}}>\n                <IoCashSharp className=\"dashboard-item-icon sold-good\"></IoCashSharp>\n            </div>\n            {\n                (Object.keys(regulation).length == 0 || regulation.currency == 'vnd' )?\n                <Typography style={{ marginBottom: '10px' }} variant=\"h6\">{totalSalary.toLocaleString()} VNĐ  \n                </Typography>\n                : \n                <Typography style={{ marginBottom: '10px' }} variant=\"h6\">\n                    {(totalSalary/regulation.exchangeRate).toFixed(2)} $ \n                </Typography>\n            }\n           \n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\n                Total salary\n            </Typography>\n        </div>\n    );\n}\n\nexport default SalaryStats;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/CouponManager.js",["927","928","929","930","931","932","933","934","935","936","937","938","939","940","941","942","943","944"],"import React from 'react';\nimport { Card, CardHeader, Divider, TableBody, TableHead, TableRow, Paper, Grid, Button, CardContent, Table, TableCell, TableContainer } from '@mui/material';\nimport { BiPlusMedical } from 'react-icons/bi';\nimport { IconButton } from '@mui/material'\nimport { styled } from '@mui/material/styles';\nimport { FiEdit, FiTrash2 } from 'react-icons/fi'\nimport { tableCellClasses } from '@mui/material/TableCell';\nimport axios from 'axios';\nimport { useSelector, useDispatch } from 'react-redux'\nimport TextField from '@mui/material/TextField';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\n\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    [`&.${tableCellClasses.body}`]: {\n        fontSize: 14,\n    },\n}));\n\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 0,\n    },\n}));\n\n\n\nfunction CouponManager(props) {\n    const statusDarkmode = useSelector(state => state.statusDarkmode)\n    const [value, setValue] = React.useState(new Date())\n    const [value1, setValue1] = React.useState('all')\n    const [typeCheck, setTypeCheck] = React.useState('groupBy')\n    const listCoupon = useSelector(state => state.listCoupon)\n    const listReceipt = useSelector(state => state.listReciept)\n    const [listReceiptHaveCoupon, setListReceiptHaveCoupon] = React.useState([]);\n    const [totalDiscount, setTotalDiscount] = React.useState(0);\n    const regulation = useSelector(state => state.regulationReducer)\n\n    const selectType = (e) => {\n        setTypeCheck(e.target.value);\n    }\n\n    const changeType = (e) => {\n        setValue1(e.target.value)\n    }\n\n    const changeTime = (newValue) => {\n        setValue(newValue);\n    }\n\n    React.useEffect(() => {\n        let list = listReceipt.filter(item => {\n            if (item.coupon) {\n                return item\n            }\n        })\n        if (typeCheck === 'groupBy') {\n            if (value1 == 'all') {\n                setListReceiptHaveCoupon(list)\n            } else {\n                list = list.filter(item=> {\n                    if(value1 == item.coupon.idCoupon){\n                        return item\n                    }\n                })\n                setListReceiptHaveCoupon(list)\n            }\n        } else {\n            list = list.filter(item => {\n                let timeMau = item.date;\n                timeMau = timeMau.replace(/\\s/g, \"\");\n                timeMau = timeMau.split(\"/\");\n                if(value.getDate() == timeMau[0] && value.getMonth() + 1 == timeMau[1] && value.getFullYear() == timeMau[2]) {\n                    return item\n                }\n            })\n            setListReceiptHaveCoupon(list)\n        }\n        let money = 0\n        list.map(item => {\n            money += item.totalFinalMoney - item.totalMoney;\n        })\n        setTotalDiscount(money)\n    }, [typeCheck, value1, value])\n\n\n\n    return (\n        <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', marginBottom: '30px' }}>\n            <Card style={{ position: \"relative\" }}>\n                <CardHeader style={{ color: !statusDarkmode ? '#0091ea' : 'white', backgroundColor: !statusDarkmode ? '#efeeef' : '#455a64' }} title=\"Coupon Manager\" />\n                <Divider />\n                <CardContent>\n                    <Grid container spacing={3}>\n                        <Grid item md={3} sm={3}>\n                            <Grid container spacing={2}>\n                                <Grid item md={12} sm={12}  >\n                                    <Card>\n                                        <CardHeader style={{ color: !statusDarkmode ? '#0091ea' : 'white', backgroundColor: !statusDarkmode ? '#efeeef' : '#455a64' }} title=\"Date\" />\n                                        <Divider></Divider>\n                                        <CardContent>\n                                            <Grid container spacing={2}>\n                                                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                                    <Grid item md={12} sm={12}>\n                                                        <div className=\"form-check\">\n                                                            <input onClick={(e) => selectType(e)} style={{ transform: 'translateY(70%)' }} value=\"groupBy\" className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault2\" defaultChecked />\n                                                            <FormControl fullWidth>\n                                                                <InputLabel id=\"demo-simple-select-label\">Group by</InputLabel>\n                                                                <Select\n                                                                    labelId=\"demo-simple-select-label\"\n                                                                    id=\"demo-simple-select\"\n                                                                    value={value1}\n                                                                    label=\"Option\"\n                                                                    onChange={(e) => changeType(e)}\n                                                                >\n                                                                    <MenuItem value='all'>All</MenuItem>\n                                                                    {listCoupon.map(value => (\n                                                                        <MenuItem value={value.idCoupon}>{value.name}</MenuItem>\n                                                                    ))}\n                                                                </Select>\n                                                            </FormControl>\n                                                        </div>\n                                                    </Grid>\n                                                    <Grid item md={12} sm={12}>\n                                                        <div className=\"form-check\">\n                                                            <input onClick={(e) => selectType(e)} style={{ transform: 'translateY(70%)' }} value=\"date\" className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\" />\n                                                            <DesktopDatePicker\n                                                                label=\"Ngày\"\n                                                                value={value}\n                                                                minDate={new Date('2017-01-01')}\n                                                                onChange={(newValue) => changeTime(newValue)}\n                                                                renderInput={(params) => <TextField {...params} />}\n                                                            />\n                                                        </div>\n                                                    </Grid>\n                                                </LocalizationProvider>\n                                            </Grid>\n                                        </CardContent>\n                                    </Card>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid style={{ height: '500px' }} item md={9} sm={9}>\n                            <Grid container spacing={3}>\n                                <Grid id=\"choses-product\" style={{ overflowX: 'hidden', overflowY: 'auto', height: '430px', marginTop: '20px' }} item md={12} sm={12}  >\n                                    <TableContainer id=\"choses-product\" component={Paper}>\n                                        <Table  sx={{ minWidth: 700 }} aria-label=\"customized table\">\n                                            <TableHead>\n                                                <TableRow>\n                                                    <StyledTableCell>Name coupon</StyledTableCell>\n                                                    <StyledTableCell align=\"center\">Id Reciept</StyledTableCell>\n                                                    <StyledTableCell align=\"center\">Date</StyledTableCell>\n                                                    <StyledTableCell align=\"center\">Dicount(%)</StyledTableCell>\n                                                    <StyledTableCell align=\"center\">Reduce Money</StyledTableCell>\n                                                </TableRow>\n                                            </TableHead >\n                                            {listReceiptHaveCoupon.map(item => {\n                                                return (\n                                                    <TableBody>\n                                                        <StyledTableRow key=\"abc\">\n                                                            <StyledTableCell component=\"th\" scope=\"row\">{item.coupon.name}</StyledTableCell>\n                                                            <StyledTableCell align=\"center\">{item.MAHD}</StyledTableCell>\n                                                            <StyledTableCell align=\"center\">{item.date}</StyledTableCell>\n                                                            <StyledTableCell align=\"center\">{item.coupon.percent}</StyledTableCell>\n                                                            <StyledTableCell align=\"center\">{regulation.currency === 'vnd' ? (item.totalFinalMoney - item.totalMoney).toLocaleString(): ((item.totalFinalMoney - item.totalMoney)/regulation.exchangeRate).toFixed(2).toLocaleString()}</StyledTableCell>\n                                                        </StyledTableRow>\n                                                    </TableBody>\n                                                )\n                                            })}\n                                        </Table>\n                                    </TableContainer>\n                                </Grid>\n                                <Grid item md={12} sm={12}  >\n                                    <h5 style={{ textAlign: 'end', paddingRight: '20px', borderTop: '2px solid black' }}>Discount:\n                                        <span style={{ color: 'red' }}>   {regulation.currency === 'vnd' ? totalDiscount.toLocaleString() : ((totalDiscount/regulation.exchangeRate).toFixed(2)).toLocaleString()}  {(regulation.currency == 'vnd') ? 'VNĐ' : '$'}</span>\n                                    </h5>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n\n                </CardContent>\n                <Divider />\n\n            </Card>\n        </div>\n    );\n}\n\nexport default CouponManager;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/GroupButtonDashboard.js",["945"],"import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Grow from '@mui/material/Grow';\nimport Paper from '@mui/material/Paper';\nimport Popper from '@mui/material/Popper';\nimport MenuItem from '@mui/material/MenuItem';\nimport MenuList from '@mui/material/MenuList';\nimport { BiCaretDown } from 'react-icons/bi'\nimport { useDispatch } from 'react-redux';\n\nconst options = ['All', 'Today', 'Yesterday', 'Month', 'Year'];\n\nexport default function SplitButton() {\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n    const dispatch = useDispatch()\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\n\n    const handleClick = () => {\n        console.info(`You clicked ${options[selectedIndex]}`);\n    };\n\n    const handleMenuItemClick = (event, index, option) => {\n        dispatch({\n            type: \"TYPE_HEADER_DASHBOARD\",\n            typeDashboard: option\n        })\n        setSelectedIndex(index);\n        setOpen(false);\n    };\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    React.useEffect(() => {\n        dispatch({\n            type: \"RESET_TYPE_HEADER_DASHBOARD\"\n        })\n    }, [])\n\n    return (\n        <React.Fragment>\n            <ButtonGroup variant=\"contained\" className=\"button-group-customize\" ref={anchorRef} aria-label=\"split button\">\n                <Button onClick={handleClick}>{options[selectedIndex]}</Button>\n                <Button\n                    size=\"small\"\n                    aria-controls={open ? 'split-button-menu' : undefined}\n                    aria-expanded={open ? 'true' : undefined}\n                    aria-label=\"select merge strategy\"\n                    aria-haspopup=\"menu\"\n                    onClick={handleToggle}\n                >\n                    <BiCaretDown />\n                </Button>\n            </ButtonGroup>\n            <Popper\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                transition\n                disablePortal\n                style={{zIndex: 20}}\n            >\n                {({ TransitionProps, placement }) => (\n                    <Grow\n                        {...TransitionProps}\n                        style={{\n                            transformOrigin:\n                                placement === 'bottom' ? 'center top' : 'center bottom',\n                        }}\n                    >\n                        <Paper>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <MenuList id=\"split-button-menu\" style={{zIndex: 500}}>\n                                    {options.map((option, index) => (\n                                        <MenuItem\n                                            key={option}\n                                            selected={index === selectedIndex}\n                                            onClick={(event) => handleMenuItemClick(event, index, option)}\n                                            style={{zIndex: 500}}\n                                        >\n                                            {option}\n                                        </MenuItem>\n                                    ))}\n                                </MenuList>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Grow>\n                )}\n            </Popper>\n        </React.Fragment>\n    );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/HistoryReciept.js",["946","947"],"import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport CollapsibleTable from './TableReciept'\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\n\nfunction HistoryReciept(props) {\n\n    const darkmode = useSelector(state => state.statusDarkmode)\n    const dispatch = useDispatch();\n\n    return (\n        <div style={{ overflow: 'hidden' }} className=\"modal-history-reciept\">\n            <div onClick={() => { dispatch({ type: \"CHANGE_HISTORY_RECIEPT_STATUS\" }) }} className=\"modal-overlay\"></div>\n            <div className=\"history-list-receipt\">\n                <Card>\n                    <CardHeader style={{ color: !darkmode ? '#0091ea' : 'white', backgroundColor: !darkmode ? '#efeeef' : '#455a64' }} title=\"History Reciept\" />\n                    <Divider></Divider>\n                </Card>\n                <div id=\"choses-product\" style={{ margin: '30px', height: '82%', overflow: 'hidden', overflowY: 'scroll' }}>\n                    <CollapsibleTable></CollapsibleTable>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default HistoryReciept;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/ShoppingBags.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/TotalMoney.js",["948","949","950","951","952","953","954","955","956","957","958","959","960","961","962","963","964","965","966","967","968","969"],"import React from 'react';\nimport { Typography } from '@mui/material';\nimport { RiMoneyDollarCircleFill } from 'react-icons/ri'\nimport { useSelector } from 'react-redux'\nimport moment from 'moment';\n\n\nfunction TotalMoney(props) {\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\n    const listReciept = useSelector(state => state.listReciept)\n    const regulation = useSelector(state => state.regulationReducer)\n    const [totalMoney, setTotalMoney] = React.useState('')\n\n    // console.log(\"ListReceipt\", listReciept);\n    let nowTime = new Date();\n\n    // console.log(\"nowTime.getMonth\",moment().subtract(24, 'days').format('l'));\n\n    React.useEffect(() => {\n        let money = 0;\n        let currentMonth = nowTime.getMonth() + 1;\n        let lastMonth = new Date(moment().subtract(1, 'months'))\n        \n        if (typeHeaderDashboard == 'Today') {\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[0] == nowTime.getDate() && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\n                    if(!value.deleted) {\n                        money += value.totalFinalMoney\n                    }\n                }\n            })\n            setTotalMoney(money)\n        } else if (typeHeaderDashboard == 'Yesterday') {\n            let yesterdayTime = new Date(moment().subtract(1, 'days'))\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[0] == yesterdayTime.getDate() && date[1] == yesterdayTime.getMonth()+1 && date[2] == yesterdayTime.getFullYear()) {\n                    if(!value.deleted){\n                        money += value.totalFinalMoney\n                    }\n                }\n            })\n            setTotalMoney(money)\n        } else if (typeHeaderDashboard == 'Month') {\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[1] == lastMonth.getMonth() + 1 && date[2] == lastMonth.getFullYear()) {\n                    if(!value.deleted) {\n                        money += value.totalFinalMoney\n                    }\n                }\n            })\n            setTotalMoney(money)\n        } else if (typeHeaderDashboard == 'Year') {\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[2] == nowTime.getFullYear()) {\n                    if(!value.deleted) {\n                        money += value.totalFinalMoney\n                    }\n                }\n            })\n            setTotalMoney(money)\n        } else if (typeHeaderDashboard == 'All') {\n            listReciept.map(value => {\n                if(!value.deleted) {\n                    money += value.totalFinalMoney\n                }\n            })\n            setTotalMoney(money)\n        }\n    }, [typeHeaderDashboard])\n\n    return (\n        <div className=\"dashboard-css\">\n            <div className=\"dashboard-item-img\" style={{ marginBottom: '30px' }}>\n                <RiMoneyDollarCircleFill className=\"dashboard-item-icon\"></RiMoneyDollarCircleFill>\n            </div>\n            {\n                ( Object.keys(regulation).length == 0 || regulation.currency == 'vnd' )?\n                <Typography style={{ marginBottom: '10px' }} variant=\"h6\">\n                    {totalMoney.toLocaleString()} VNĐ \n                </Typography>\n                :\n                <Typography style={{ marginBottom: '10px' }} variant=\"h6\">\n                    {(totalMoney/regulation.exchangeRate).toFixed(2)} $\n                </Typography>\n            }\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\n                Total money\n            </Typography>\n        </div>\n    );\n}\n\nexport default TotalMoney;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/DaiLyMoneyTracking.js",["970","971","972","973","974","975","976","977"],"import React from 'react';\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\nimport { Grid, TextField } from '@mui/material';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport { useSelector } from 'react-redux'\n\n\nfunction DaiLyMoneyTracking(props) {\n    const [value, setValue] = React.useState(new Date());\n    const listReciept = useSelector(state => state.listReciept)\n    const [dailyListReciept, setDailiListReciept] = React.useState([]);\n    const regulation = useSelector(state => state.regulationReducer)\n\n    const changeTime = (newValue) => {\n        if (newValue) {\n            setValue(newValue);\n        }\n    }\n\n    const totalMoneyDaily = () => {\n        let money = 0\n        dailyListReciept.map(value => {\n            if(!value.isEdit) {\n                if (!value.deleted) {\n                    money += value.totalFinalMoney\n                } else {\n                    money -= value.totalFinalMoney\n                }\n            }\n        })\n\n        if(regulation.currency !== 'vnd') {\n            money = (money/regulation.exchangeRate).toFixed(2);\n        } \n\n        return money\n    }\n\n    const renderMoney = (item) => {\n        let money = item.totalFinalMoney\n        if(regulation.currency !== 'vnd') {\n            money = (money/regulation.exchangeRate).toFixed(2);\n        } \n\n        if (item.deleted && item.isEdit) {\n            return 0\n        } else if (item.deleted) {\n            return \"-\" + money\n        } else if (item.isEdit) {\n            return 0\n        } else {\n            return \"+\" + money\n        }\n    }\n\n    const renderStatus = (item) => {\n        if (item.deleted && item.isEdit) {\n            return \"Exchange\"\n        } else if (item.deleted) {\n            return \"Deleted\"\n        } else if (item.isEdit) {\n            return \"Exchange\"\n        } else {\n            return \"Success\"\n        }\n    }\n\n    const renderColor = (item) => {\n        if (item.deleted && item.isEdit) {\n            return \"#c1c103\"\n        } else if (item.deleted) {\n            return \"red\"\n        } else if (item.isEdit) {\n            return \"#c1c103\"\n        } else {\n            return \"green\"\n        }\n    }\n\n    React.useEffect(() => {\n        let day = value.getDate()\n        let month = value.getMonth() + 1;\n        let year = value.getFullYear()\n        let arrListReciept\n        arrListReciept = listReciept.filter(value => {\n            let data = value.date;\n            data = data.replace(/\\s/g, \"\");\n            data = data.split(\"/\");\n            if (data[0] == day && data[1] == month && data[2] == year) {\n                return value\n            }\n        })\n        setDailiListReciept(arrListReciept)\n    }, [value])\n\n    return (\n        <div style={{ backgroundColor: 'white', borderRadius: '4px', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', overflow: 'hidden' }}>\n            <div style={{ height: 'auto', width: '90%', margin: 'auto', paddingTop: '20px' }}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <DesktopDatePicker\n                        label=\"Date\"\n                        value={value}\n                        minDate={new Date('2017-01-01')}\n                        onChange={(newValue) => changeTime(newValue)}\n                        renderInput={(params) => <TextField style={{ width: '100%' }} {...params} />}\n                    />\n                </LocalizationProvider>\n            </div>\n            <div id=\"choses-product\" style={{ backgroundColor: 'white', height: '500px', width: '80%', overflow: 'hidden', margin: 'auto', overflowY: 'auto', marginTop: '20px', marginBottom: '20px' }}>\n                <ul style={{ textDecoration: 'none', listStyle: 'none', paddingLeft: '0' }}>\n                    {\n                        dailyListReciept.length !== 0 ? dailyListReciept.map(value => (\n                            <li style={{ borderBottom: '1px #0000004d solid', marginBottom: '5px', paddingBottom: '5px' }}>\n                                <Grid container spacing={2}>\n                                    <Grid item sm={6} md={6}>\n                                        <div>{renderStatus(value)}</div>\n                                        <div style={{ fontWeight: '700', color: renderColor(value) }}>{renderMoney(value).toLocaleString()}</div>\n                                    </Grid>\n                                    <Grid style={{ display: 'flex', justifyContent: 'center' }} item sm={6} md={3}>\n                                        <div style={{ color: '#00000075', paddingLeft: '10px', fontSize: '1rem' }}>{value.name}</div>\n                                    </Grid>\n                                    <Grid style={{ display: 'flex', justifyContent: 'center' }} item sm={6} md={3}>\n                                        <div style={{ color: '#00000075', paddingLeft: '10px', fontSize: '1rem' }}>{value.time}</div>\n                                    </Grid>\n                                </Grid>\n                            </li>\n                        )) : (\n                            <div style={{ justifyContent: 'center', display: 'flex', marginTop: '100px', color: 'rgba(0,0,0,0.5)' }}>\n                                <h2>\n                                    You have not sold any invoices today\n                                </h2>\n                            </div>\n                        )\n                    }\n                </ul>\n            </div>\n            <div style={{ height: 'auto', width: '100%', paddingTop: '20px', paddingBottom: '20px', borderTop: '3px solid black' }}>\n                <Grid container spacing={2}>\n                    <Grid style={{ display: 'flex', justifyContent: 'end' }} item md={2}>\n                        <h5 style={{ fontWeight: '800' }}>TOTAL : </h5>\n                    </Grid>\n                    <Grid style={{ display: 'flex', justifyContent: 'start' }} item md={5}>\n                        {totalMoneyDaily() >= 0 ? (\n                            <h5 style={{ color: 'green', fontWeight: 'bold' }}>{totalMoneyDaily().toLocaleString()} {(regulation.currency == 'vnd') ? 'VNĐ' : '$'}</h5>\n                        ) : (\n                            <h5 style={{ color: 'red', fontWeight: 'bold' }}>{totalMoneyDaily().toLocaleString()} {(regulation.currency == 'vnd') ? 'VNĐ' : '$'}</h5>\n                        )}\n                    </Grid>\n                </Grid>\n            </div>\n        </div>\n    );\n}\n\nexport default DaiLyMoneyTracking;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/DateReciept.js",["978"],"import React from 'react';\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\nimport { useSelector, useDispatch } from 'react-redux'\nimport TextField from '@mui/material/TextField';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\n\n\nfunction DataReciept(props) {\n    const dispatch = useDispatch()\n    const typeByDate = useSelector(state => state.typeByDate)\n    const [value, setValue] = React.useState(new Date());\n    const [value1, setValue1] = React.useState('all');\n    const darkmode = useSelector(state => state.statusDarkmode)\n\n    const selectDate = () => {\n        const data = {\n            type: \"typeByDate\",\n            day: value.getDate(),\n            month: value.getMonth() + 1,\n            year: value.getFullYear(),\n        }\n        dispatch({\n            type: \"TYPE_BY_DATE\",\n            typeByDate: data,\n        })\n    }\n\n    const changeTime = (newValue) => {\n        if (newValue) {\n            setValue(newValue);\n        }\n        if (typeByDate.type === 'typeByDate') {\n            const data = {\n                type: \"typeByDate\",\n                day: newValue.getDate(),\n                month: newValue.getMonth() + 1,\n                year: newValue.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        }\n    }\n\n    const selectType = () => {\n        if (value1 === 'all') {\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: { type: 'all' },\n            })\n        } else if (value1 === 'yesterday') {\n            let yesterday = new Date()\n            const data = {\n                type: \"yesterday\",\n                day: yesterday.getDate() - 1,\n                month: yesterday.getMonth() + 1,\n                year: yesterday.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        } else if (value1 === 'today') {\n            let today = new Date()\n            const data = {\n                type: \"today\",\n                day: today.getDate(),\n                month: today.getMonth() + 1,\n                year: today.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        } else if (value1 === 'lastmonth') {\n            let today = new Date()\n            const data = {\n                type: \"lastmonth\",\n                month: today.getMonth(),\n                year: today.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        } else if (value1 === 'lastyear') {\n            let today = new Date()\n            const data = {\n                type: \"lastyear\",\n                year: today.getFullYear() - 1,\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        }\n    }\n\n    const changeType = (e) => {\n        setValue1(e.target.value)\n        if (typeByDate.type === 'all' || typeByDate.type === 'yesterday' || typeByDate.type === 'today' || typeByDate.type === 'lastmonth' || typeByDate.type === 'lastyear') {\n            if (e.target.value === 'all') {\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: { type: 'all' },\n                })\n            }\n            if (e.target.value === 'yesterday') {\n                let yesterday = new Date()\n                let data = {\n                    type: \"yesterday\",\n                    day: yesterday.getDate() - 1,\n                    month: yesterday.getMonth() + 1,\n                    year: yesterday.getFullYear(),\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n            if (e.target.value === 'today') {\n                let today = new Date()\n                const data = {\n                    type: \"today\",\n                    day: today.getDate(),\n                    month: today.getMonth() + 1,\n                    year: today.getFullYear(),\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n            if (e.target.value === 'lastmonth') {\n                let today = new Date()\n                const data = {\n                    type: \"lastmonth\",\n                    month: today.getMonth(),\n                    year: today.getFullYear(),\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n            if (e.target.value === 'lastyear') {\n                let today = new Date()\n                const data = {\n                    type: \"lastyear\",\n                    year: today.getFullYear() - 1,\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n        }\n    }\n\n    React.useEffect(() => {\n        dispatch({\n            type: \"TYPE_BY_DATE\",\n            typeByDate: { type: 'all' },\n        })\n    }, [])\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item md={12} sm={12}  >\n                <Card>\n                    <CardHeader style={{ color: !darkmode ? '#0091ea' :'white', backgroundColor: !darkmode ? '#efeeef' :'#455a64'}} title=\"Date\" />\n                    <Divider></Divider>\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                <Grid item md={12} sm={12}>\n                                    <div className=\"form-check\">\n                                        <input onClick={() => selectType()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault2\" defaultChecked />\n                                        <FormControl fullWidth>\n                                            <InputLabel id=\"demo-simple-select-label\">Group by</InputLabel>\n                                            <Select\n                                                labelId=\"demo-simple-select-label\"\n                                                id=\"demo-simple-select\"\n                                                value={value1}\n                                                label=\"Option\"\n                                                onChange={(e) => changeType(e)}\n                                            >\n                                                <MenuItem value='all'>All</MenuItem>\n                                                <MenuItem value='today'>Today</MenuItem>\n                                                <MenuItem value='yesterday'>Yesterday</MenuItem>\n                                                <MenuItem value='lastmonth'>Last month</MenuItem>\n                                                <MenuItem value='lastyear'>Last year</MenuItem>\n                                            </Select>\n                                        </FormControl>\n                                    </div>\n                                </Grid>\n                                <Grid item md={12} sm={12}>\n                                    <div className=\"form-check\">\n                                        <input onClick={() => selectDate()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\" />\n                                        <DesktopDatePicker\n                                            label=\"Date\"\n                                            value={value}\n                                            minDate={new Date('2017-01-01')}\n                                            onChange={(newValue) => changeTime(newValue)}\n                                            renderInput={(params) => <TextField {...params} />}\n                                        />\n                                    </div>\n                                </Grid>\n                            </LocalizationProvider>\n                        </Grid>\n                    </CardContent>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default DataReciept;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/Statistic.js",["979","980","981","982","983","984","985","986","987","988","989","990","991","992","993","994","995","996","997","998","999","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","1016","1017","1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031","1032","1033","1034","1035","1036","1037","1038","1039","1040","1041","1042","1043","1044","1045","1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066"],"import { merge, now } from 'lodash';\nimport ReactApexChart from 'react-apexcharts';\n// material\nimport { Card, CardHeader, Box } from '@mui/material';\n//\nimport BaseOptionChart from './BaseOptionChart';\nimport SplitButton from './GroupButton';\nimport OptionYear from './OptionYear';\nimport OptionMonth from './OptionMonth';\n// ----------------------------------------------------------------------\nimport { useSelector, useDispatch } from 'react-redux';\nimport React from 'react';\nimport moment from 'moment'\n\nexport default function AppWebsiteVisits() {\n  const [typeDate, setTypeData] = React.useState(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Sartuday', 'Sunday']);\n  const [title, setTitle] = React.useState('last Week')\n  const [tienGoc, setTienGoc] = React.useState([])\n  const [tienDoanhThu, setTienDoanhThu] = React.useState([])\n  const [tienLai, setTienLai] = React.useState([])\n  const [growth, setGrowth] = React.useState('(+100%) than Last Week')\n  const [showOption, setShowOption] = React.useState(false);\n  var CHART_DATA = [\n    {\n      name: 'Funds',\n      type: 'column',\n      data: tienGoc\n    },\n    {\n      name: 'Revenue',\n      type: 'area',\n      data: tienDoanhThu\n    },\n    {\n      name: 'Profit',\n      type: 'line',\n      data: tienLai\n    }\n  ];\n  const typeTimeDashboard = useSelector(state => state.typeTimeDashboard)\n  const listReciept = useSelector(state => state.listReciept)\n  const typeMonth = useSelector(state => state.monthSelectDashboard)\n  const typeYear = useSelector(state => state.yearSelectDashboard)\n  const regulation = useSelector(state => state.regulationReducer)\n\n  let nowTime = new Date()\n  const chartOptions = merge(BaseOptionChart(), {\n    stroke: { width: [1, 2, 3] },\n    plotOptions: { bar: { columnWidth: '11%', borderRadius: 4 } },\n    fill: { type: ['solid', 'gradient', 'solid'] },\n    xaxis: {\n      categories: typeDate,\n    },\n    tooltip: {\n      shared: true,\n      intersect: false,\n      y: {\n        formatter: (y) => {\n          if (typeof y !== 'undefined') {\n            if (regulation.currency == 'vnd')\n              return `${y.toFixed(0)} VNĐ`;\n            else\n              return `${(y).toFixed(2)} $`\n          }\n          return y;\n        }\n      }\n    }\n  });\n\n  const DateInWeek = (type) => {\n    let Week = [];\n    if (type === 'Week') {\n      // Week\n      if (nowTime.getDay() === 0) {\n        for (let i = 0; i < 7; i++) {\n          let nowDate = new Date(moment().subtract(i, 'days'))\n          let date = nowDate.getDate() + \" \" + (nowDate.getMonth() + 1) + \" \" + nowDate.getFullYear();\n          Week.push(date)\n        }\n        return Week\n      } else {\n        for (let i = 0; i < nowTime.getDay(); i++) {\n          let nowDate = new Date(moment().subtract(i, 'days'))\n          let date = nowDate.getDate() + \" \" + (nowDate.getMonth() + 1) + \" \" + nowDate.getFullYear();\n          Week.push(date)\n        }\n        return Week\n      }\n\n    } else {\n      if (nowTime.getDay() === 0) {\n        for (let i = 0; i < 7; i++) {\n          let nowDate = new Date(moment().subtract(i + 7, 'days'))\n          let date = nowDate.getDate() + \" \" + (nowDate.getMonth() + 1) + \" \" + nowDate.getFullYear();\n          Week.push(date)\n        }\n        return Week\n      } else {\n        for (let i = 0; i < 7; i++) {\n          let nowDate = new Date(moment().subtract(i + nowTime.getDay(), 'days'))\n          let date = nowDate.getDate() + \" \" + (nowDate.getMonth() + 1) + \" \" + nowDate.getFullYear();\n          Week.push(date)\n        }\n        return Week\n      }\n    }\n  }\n\n  ///////Week\n  const totalMoneyInWeek = (arrDate, type) => {\n    let arrDoanhThu = []\n    let arrTienGoc = []\n    let arrLai = []\n    arrDate.map(value => {\n      let date = value.split(\" \")\n      let moneyDoanhThu = 0\n      let moneyTienGoc = 0\n      listReciept.map(reciept => {\n        let dateReciept = reciept.date.replace(/\\s/g, \"\");\n        dateReciept = dateReciept.split(\"/\")\n        if (date[0] === dateReciept[0] && date[1] === dateReciept[1] && date[2] === dateReciept[2]) {\n          if (!reciept.deleted) {\n            moneyDoanhThu += reciept.totalFinalMoney;\n            reciept.listProduct.map(value => {\n              moneyTienGoc += value.quantity * value.product.importPrice;\n            })\n          }\n        }\n      })\n      if (regulation.currency !== 'vnd') {\n        moneyDoanhThu = (moneyDoanhThu / regulation.exchangeRate).toFixed(2);\n        moneyTienGoc = (moneyTienGoc / regulation.exchangeRate).toFixed(2)\n      }\n      arrTienGoc.unshift(moneyTienGoc)\n      arrDoanhThu.unshift(moneyDoanhThu)\n      arrLai.unshift(moneyDoanhThu - moneyTienGoc)\n    })\n    setTienGoc(arrTienGoc)\n    setTienDoanhThu(arrDoanhThu)\n    setTienLai(arrLai)\n  }\n\n\n  ///////Month\n\n  const DateInMonth = (month123, year123, currentMonth) => {\n    let arrCurrentMonth = [];\n    let arrLastMonth = []\n    let month = new Date(moment().subtract(1, 'months'))\n    let lastMonth = month.getMonth() + 1;\n    let year = nowTime.getFullYear();\n    let monthCurrent = nowTime.getMonth() + 1;\n\n    for (let i = 0; i < 8; i++) {\n      let data\n      if (i === 0) {\n        data = '1/' + monthCurrent\n        arrCurrentMonth.push(data)\n        data = '1/' + month123\n        arrLastMonth.push(data)\n      } else {\n        data = i * 4 + '/' + monthCurrent\n        arrCurrentMonth.push(data)\n        data = i * 4 + '/' + month123\n        arrLastMonth.push(data)\n      }\n    }\n\n    if (currentMonth === true) {\n      //Month\n      let data = new Date(year, nowTime.getMonth() + 1, 0).getDate() + '/' + monthCurrent\n      arrCurrentMonth.push(data)\n      return arrCurrentMonth\n    } else {\n      //Last month\n      let data = new Date(year123, month123, 0).getDate() + '/' + lastMonth\n      arrLastMonth.push(data)\n      return arrLastMonth\n    }\n  }\n\n\n\n\n  const totalMoneyInMonth = (arrDate, currentMonth, month123, year123) => {\n    var newArr\n    let arrDoanhThu = [0]\n    let arrTienGoc = [0]\n    let arrLai = [0]\n    if (currentMonth) {\n      newArr = arrDate.filter(value => {\n        let data = value.replace(/\\s/g, \"\")\n        data = value.split(\"/\");\n        if (nowTime.getDate() >= data[0]) {\n          return value\n        }\n      })\n      if (nowTime.getDate() % 4 !== 0) {\n        let month = nowTime.getMonth() + 1;\n        let a = nowTime.getDate() + \"/\" + month\n        newArr.push(a)\n      }\n      setTypeData(newArr)\n    } else {\n      setTypeData(arrDate)\n    }\n\n    if (currentMonth) {\n      if (nowTime.getDate() / 4 === 0) {\n\n      } else {\n        for (let i = 1; i <= nowTime.getDate() / 4; i++) {\n          let year = nowTime.getFullYear();\n          let date = newArr[i].replace(/\\s/g, \"\");\n          date = date.split(\"/\")\n          let moneyDoanhThu = 0;\n          let moneyTienGoc = 0;\n          listReciept.map(reciept => {\n            let dateReciept = reciept.date.replace(/\\s/g, \"\");\n            dateReciept = dateReciept.split(\"/\")\n            if (date[0] == dateReciept[0] || date[0] - 1 == dateReciept[0] || date[0] - 2 == dateReciept[0] || date[0] - 3 == dateReciept[0]) {\n              if (!reciept.deleted) {\n                if (date[1] == dateReciept[1] && year == dateReciept[2])\n                  moneyDoanhThu += reciept.totalFinalMoney;\n                reciept.listProduct.map(value => {\n                  moneyTienGoc += value.quantity * value.product.importPrice;\n                })\n              }\n            }\n          })\n          if (regulation.currency !== 'vnd') {\n            moneyDoanhThu = (moneyDoanhThu / regulation.exchangeRate).toFixed(2);\n            moneyTienGoc = (moneyTienGoc / regulation.exchangeRate).toFixed(2)\n          }\n          arrDoanhThu.push(moneyDoanhThu);\n          arrTienGoc.push(moneyTienGoc)\n          arrLai.push(moneyDoanhThu - moneyTienGoc)\n        }\n      }\n\n      if (nowTime.getDate() % 4 !== 0) {\n        let moneyDoanhThu = 0;\n        let moneyTienGoc = 0;\n        for (let i = 4 * Math.floor(nowTime.getDate() / 4); i <= nowTime.getDate(); i++) {\n          let year = nowTime.getFullYear();\n          let month = nowTime.getMonth() + 1;\n          listReciept.map(reciept => {\n            let dateReciept = reciept.date.replace(/\\s/g, \"\");\n            dateReciept = dateReciept.split(\"/\")\n            if (i == dateReciept[0] && month == dateReciept[1] && year == dateReciept[2]) {\n              if (!reciept.deleted) {\n                moneyDoanhThu += reciept.totalFinalMoney;\n                reciept.listProduct.map(value => {\n                  moneyTienGoc += value.quantity * value.product.importPrice;\n                })\n              }\n            }\n          })\n        }\n        if (regulation.currency !== 'vnd') {\n          moneyDoanhThu = (moneyDoanhThu / regulation.exchangeRate).toFixed(2);\n          moneyTienGoc = (moneyTienGoc / regulation.exchangeRate).toFixed(2)\n        }\n        arrDoanhThu.push(moneyDoanhThu);\n        arrTienGoc.push(moneyTienGoc)\n        arrLai.push(moneyDoanhThu - moneyTienGoc)\n      }\n\n      setTienGoc(arrTienGoc)\n      setTienDoanhThu(arrDoanhThu)\n      setTienLai(arrLai)\n    } else {\n\n      for (let i = 1; i <= 7; i++) {\n        let date = arrDate[i].replace(/\\s/g, \"\");\n        date = date.split(\"/\")\n        let moneyDoanhThu = 0;\n        let moneyTienGoc = 0;\n        listReciept.map(reciept => {\n          let dateReciept = reciept.date.replace(/\\s/g, \"\");\n          dateReciept = dateReciept.split(\"/\")\n          if (date[0] == dateReciept[0] || date[0] - 1 == dateReciept[0] || date[0] - 2 == dateReciept[0] || date[0] - 3 == dateReciept[0]) {\n            if (month123 == dateReciept[1] && year123 == dateReciept[2]) {\n              if (!reciept.deleted) {\n                moneyDoanhThu += reciept.totalFinalMoney;\n                reciept.listProduct.map(value => {\n                  moneyTienGoc += value.quantity * value.product.importPrice;\n                })\n              }\n            }\n          }\n        })\n        if (regulation.currency !== 'vnd') {\n          moneyDoanhThu = (moneyDoanhThu / regulation.exchangeRate).toFixed(2);\n          moneyTienGoc = (moneyTienGoc / regulation.exchangeRate).toFixed(2)\n        }\n        arrDoanhThu.push(moneyDoanhThu);\n        arrTienGoc.push(moneyTienGoc)\n        arrLai.push(moneyDoanhThu - moneyTienGoc)\n      }\n\n      if (new Date(year123, month123, 0).getDate() > 28) {\n        let moneyDoanhThu = 0;\n        let moneyTienGoc = 0;\n        for (let i = 29; i <= new Date(year123, month123, 0).getDate(); i++) {\n          listReciept.map(reciept => {\n            let dateReciept = reciept.date.replace(/\\s/g, \"\");\n            dateReciept = dateReciept.split(\"/\")\n            if (i == dateReciept[0] && month123 == dateReciept[1] && year123 == dateReciept[2]) {\n              if (!reciept.deleted) {\n                moneyDoanhThu += reciept.totalFinalMoney;\n                reciept.listProduct.map(value => {\n                  moneyTienGoc += value.quantity * value.product.importPrice;\n                })\n              }\n            }\n          })\n        }\n        if (regulation.currency !== 'vnd') {\n          moneyDoanhThu = (moneyDoanhThu / regulation.exchangeRate).toFixed(2);\n          moneyTienGoc = (moneyTienGoc / regulation.exchangeRate).toFixed(2)\n        }\n        arrDoanhThu.push(moneyDoanhThu);\n        arrTienGoc.push(moneyTienGoc)\n        arrLai.push(moneyDoanhThu - moneyTienGoc)\n      }\n      setTienGoc(arrTienGoc)\n      setTienDoanhThu(arrDoanhThu)\n      setTienLai(arrLai)\n    }\n\n  }\n\n\n  ////// YEAR\n  const DateInYear = (year) => {\n    let arrDoanhThu = []\n    let arrTienGoc = []\n    let arrLai = []\n    for (let i = 1; i <= 12; i++) {\n      let moneyDoanhThu = 0;\n      let moneyTienGoc = 0;\n      listReciept.map(reciept => {\n        let dateReciept = reciept.date.replace(/\\s/g, \"\");\n        dateReciept = dateReciept.split(\"/\")\n        if (i == dateReciept[1] && year == dateReciept[2]) {\n          if (!reciept.deleted) {\n            moneyDoanhThu += reciept.totalFinalMoney;\n            reciept.listProduct.map(value => {\n              moneyTienGoc += value.quantity * value.product.importPrice;\n            })\n          }\n        }\n      })\n\n      if (regulation.currency !== 'vnd') {\n        moneyDoanhThu = (moneyDoanhThu / regulation.exchangeRate).toFixed(2);\n        moneyTienGoc = (moneyTienGoc / regulation.exchangeRate).toFixed(2)\n      }\n\n      arrDoanhThu.push(moneyDoanhThu);\n      arrTienGoc.push(moneyTienGoc)\n      arrLai.push(moneyDoanhThu - moneyTienGoc)\n      setTienGoc(arrTienGoc)\n      setTienDoanhThu(arrDoanhThu)\n      setTienLai(arrLai)\n    }\n  }\n\n  // // Tắng trưởng của công ty\n  const GrowthPercent = (month, year, type, arrCurrent, arrLast) => {\n    let moneyLast = 0;\n    let moneyCurrent = 0;\n\n    if (month === 0) {\n      listReciept.map(value => {\n        let date = value.date.replace(/\\s/g, \"\")\n        date = date.split(\"/\")\n        if (date[2] == year) {\n          if (!value.deleted) {\n            moneyCurrent += value.totalFinalMoney\n          }\n        }\n        if (date[2] == year - 1) {\n          if (!value.deleted) {\n            moneyLast += value.totalFinalMoney\n          }\n        }\n      })\n      if (moneyLast == 0 && moneyCurrent == 0) {\n        setGrowth('(+0%) than Last Year')\n      } else if (moneyLast == 0) {\n        setGrowth('(+100%) than Last Year')\n      } else if (moneyCurrent == 0) {\n        setGrowth('(+0%) than Last Year')\n      } else {\n        let percent = (moneyCurrent / moneyLast) * 100\n        if (percent >= 100) {\n          setGrowth(`(+${(percent - 100).toFixed(2)}%) than Last Year`)\n        } else {\n          setGrowth(`(-${(100 - percent).toFixed(2)}%) than Last Year`)\n        }\n      }\n    } else if (month !== 0 && month == nowTime.getMonth() + 1 && year == nowTime.getFullYear()) {\n      if (type === 'Week' || type === 'Last Week') {\n        arrCurrent.map(date => {\n          let item = date.split(\" \");\n          listReciept.map(value => {\n            let valueDate = value.date.replace(/\\s/g, \"\")\n            valueDate = valueDate.split(\"/\")\n            if (!value.deleted) {\n              if (item[0] == valueDate[0] && item[1] == valueDate[1] && item[2] == valueDate[2]) {\n                moneyCurrent += value.totalFinalMoney\n              }\n            }\n          })\n        })\n\n        arrLast.map(date => {\n          let item = date.split(\" \");\n          listReciept.map(value => {\n            let valueDate = value.date.replace(/\\s/g, \"\")\n            valueDate = valueDate.split(\"/\")\n            if (!value.deleted) {\n              if (item[0] == valueDate[0] && item[1] == valueDate[1] && item[2] == valueDate[2]) {\n                moneyLast += value.totalFinalMoney\n              }\n            }\n          })\n        })\n\n        if (moneyLast == 0 && moneyCurrent == 0) {\n          setGrowth('(+0%) than Last Week')\n        } else if (moneyLast == 0) {\n          setGrowth('(+100%) than Last Week')\n        } else if (moneyCurrent == 0) {\n          setGrowth('(+0%) than Last Week')\n        } else {\n          let percent = (moneyCurrent / moneyLast) * 100\n          if (percent >= 100) {\n            setGrowth(`(+${(percent - 100).toFixed(2)}%) than Last Week`)\n          } else {\n            setGrowth(`(-${(100 - percent).toFixed(2)}%) than Last Week`)\n          }\n        }\n      } else {\n        let lastMonth = month == 1 ? 12 : month - 1\n        let yearOfLastMonth = month == 1 ? year - 1 : year\n        listReciept.map(value => {\n          let date = value.date.replace(/\\s/g, \"\")\n          date = date.split(\"/\")\n          if (date[1] == month && date[2] == year) {\n            if (!value.deleted) {\n              moneyCurrent += value.totalFinalMoney\n            }\n          }\n          if (date[1] == lastMonth && date[2] == yearOfLastMonth) {\n            if (!value.deleted) {\n              moneyLast += value.totalFinalMoney\n            }\n          }\n        })\n\n\n        if (moneyLast == 0 && moneyCurrent == 0) {\n          setGrowth('(+0%) than Last Month')\n        } else if (moneyLast == 0) {\n          setGrowth('(+100%) than Last Month')\n        } else if (moneyCurrent == 0) {\n          setGrowth('(+0%) than Last Month')\n        } else {\n          let percent = (moneyCurrent / moneyLast) * 100\n          if (percent >= 100) {\n            setGrowth(`(+${(percent - 100).toFixed(2)}%) than Last Month`)\n          } else {\n            setGrowth(`(-${(100 - percent).toFixed(2)}%) than Last Month`)\n          }\n        }\n      }\n    } else {\n      let lastMonth = month == 1 ? 12 : month - 1\n      let yearOfLastMonth = month == 1 ? year - 1 : year\n      listReciept.map(value => {\n        let date = value.date.replace(/\\s/g, \"\")\n        date = date.split(\"/\")\n        if (date[1] == month && date[2] == year) {\n          if (!value.deleted) {\n            moneyCurrent += value.totalFinalMoney\n          }\n        }\n        if (date[1] == lastMonth && date[2] == yearOfLastMonth) {\n          if (!value.deleted) {\n            moneyLast += value.totalFinalMoney\n          }\n        }\n      })\n      if (moneyLast == 0 && moneyCurrent == 0) {\n        setGrowth('(+0%) than Last Month')\n      } else if (moneyLast == 0) {\n        setGrowth('(+100%) than Last Month')\n      } else if (moneyCurrent == 0) {\n        setGrowth('(+0%) than Last Month')\n      } else {\n        let percent = (moneyCurrent / moneyLast) * 100\n        if (percent >= 100) {\n          setGrowth(`(+${(percent - 100).toFixed(2)}%) than Last Month`)\n        } else {\n          setGrowth(`(-${(100 - percent).toFixed(2)}%) than Last Month`)\n        }\n      }\n    }\n  }\n\n\n  React.useEffect(() => {\n\n    if (typeMonth === 0) {\n      DateInYear(typeYear)\n      GrowthPercent(typeMonth, typeYear, typeTimeDashboard);\n      setTypeData(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']);\n      setShowOption(false);\n      setTitle('last year')\n    } else if (typeMonth !== 0 && typeMonth == nowTime.getMonth() + 1 && typeYear == nowTime.getFullYear()) {\n      setShowOption(true);\n      if (typeTimeDashboard === 'Week' || typeTimeDashboard === 'Last Week') {\n        let arrCurrent = DateInWeek('Week')\n        let arrLast = DateInWeek('Last Week')\n        setTypeData(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Sartuday', 'Sunday'])\n        totalMoneyInWeek(DateInWeek(typeTimeDashboard), typeTimeDashboard);\n        GrowthPercent(typeMonth, typeYear, typeTimeDashboard, arrCurrent, arrLast);\n        setTitle('last Week')\n      } else {\n        setShowOption(true);\n        totalMoneyInMonth(DateInMonth(typeMonth, typeYear, true), true, typeMonth, typeYear)\n        GrowthPercent(typeMonth, typeYear, typeTimeDashboard, '', '');\n      }\n    } else {\n      setShowOption(false);\n      totalMoneyInMonth(DateInMonth(typeMonth, typeYear, false), false, typeMonth, typeYear)\n      GrowthPercent(typeMonth, typeYear, typeTimeDashboard, '', '');\n    }\n\n  }, [typeTimeDashboard, growth, typeMonth, typeYear,regulation])\n\n\n\n  return (\n    <Card>\n      <div className=\"titleStatistic\">\n        <CardHeader style={{ fontWeight: '800' }} title=\"Revenue\" subheader={growth} />\n        <div style={{ display: 'flex', justifyContent: 'end' }}>\n          <OptionYear></OptionYear>\n          <OptionMonth></OptionMonth>\n          {showOption ? (\n            <SplitButton></SplitButton>\n          ) : null}\n        </div>\n      </div>\n      <Box sx={{ p: 3, pb: 1 }} dir=\"ltr\">\n        <ReactApexChart type=\"line\" series={CHART_DATA} options={chartOptions} height={364} />\n      </Box>\n    </Card>\n  );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/StatusReceiptType.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/TableReciept.js",["1067","1068","1069","1070","1071","1072","1073","1074","1075","1076","1077","1078","1079","1080"],"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Collapse from '@mui/material/Collapse';\nimport IconButton from '@mui/material/IconButton';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport { Grid, Box, Button, Checkbox, Modal } from '@mui/material';\nimport { red, lightBlue } from '@mui/material/colors';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport { useSelector, useDispatch } from 'react-redux'\nimport axios from 'axios';\nimport { FiXSquare } from 'react-icons/fi'\nimport { TiArrowBack } from 'react-icons/ti'\n\nfunction Row(props) {\n    const { row } = props;\n    const [open, setOpen] = React.useState(false);\n    const [openModal, setOpenModal] = React.useState(false);\n    const statusSelectAll = useSelector(state => state.statusSelectAll)\n    const infoUser = useSelector(state => state.infoUser)\n    const dispatch = useDispatch();\n    const [statusSelectReplace, setStatusSelectReplace] = React.useState(false);\n    const regulation = useSelector(state => state.regulationReducer)\n\n\n    const style = {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: 400,\n        bgcolor: 'background.paper',\n        border: '1px solid #000',\n        borderRadius: '5px',\n        boxShadow: 24,\n        pt: 2,\n        px: 4,\n        pb: 3,\n    };\n\n    React.useEffect(() => {\n        setStatusSelectReplace(statusSelectAll)\n    }, [statusSelectAll])\n\n    const countQuantity = () => {\n        let count = 0;\n        row.listProduct.map(value => {\n            count += value.quantity;\n        })\n        return count;\n    }\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    //Xoa mềm\n    const DeleteReciept = (MAHD, isDelete) => {\n        if (isDelete) {\n            setOpenModal(true)\n        } else {\n            axios.post('http://localhost:5000/api/sell-product/soft-delete', {\n                token: localStorage.getItem('token'),\n                email: infoUser.email,\n                MAHD: MAHD\n            })\n                .then(res => {\n                    if (res.data.status === 1) {\n                        localStorage.setItem('token', res.data.token)\n                        dispatch({\n                            type: \"DELETE_RECIEPT\",\n                            MAHD: MAHD,\n                        })\n                        dispatch({\n                            type: \"HIDE_ALERT\",\n                        })\n                        dispatch({\n                            type: \"SHOW_ALERT\",\n                            message: 'Delete success',\n                            typeMessage: 'success',\n                        })\n                    }\n                })\n                .catch(err => {\n                    dispatch({\n                        type: \"CHANGE_LOGIN_STATUS\",\n                    });\n                    dispatch({\n                        type: \"HIDE_ALERT\",\n                    })\n                    dispatch({\n                        type: \"SHOW_ALERT\",\n                        message: 'Login timeout, signin again',\n                        typeMessage: 'warning',\n                    })\n                })\n            setOpen(!open)\n        }\n    }\n\n    // Xóa vĩnh viễn\n    const PermanentlyDelete = async (MAHD) => {\n        axios.post('http://localhost:5000/api/sell-product/permanently-delete', {\n            token: localStorage.getItem('token'),\n            email: infoUser.email,\n            MAHD: MAHD\n        })\n            .then(res => {\n                if (res.data.status === 1) {\n                    localStorage.setItem('token', res.data.token)\n                    dispatch({\n                        type: \"DELETE_ONE_RECIEPT\",\n                        MAHD: MAHD,\n                    })\n                    dispatch({\n                        type: \"HIDE_ALERT\",\n                    })\n                    dispatch({\n                        type: \"SHOW_ALERT\",\n                        message: 'Delete success',\n                        typeMessage: 'success',\n                    })\n                }\n            })\n            .catch(err => {\n                dispatch({\n                    type: \"CHANGE_LOGIN_STATUS\",\n                });\n                dispatch({\n                    type: \"HIDE_ALERT\",\n                })\n                dispatch({\n                    type: \"SHOW_ALERT\",\n                    message: 'Login timeout, signin again',\n                    typeMessage: 'warning',\n                })\n            })\n        setOpenModal(false)\n    }\n\n    const TypeReciept = (isEdit, isDelete, oldBill) => {\n        if (isDelete) {\n            return red[400]\n        } else if (isEdit) {\n            return '#f4f492'\n        } else if (oldBill) {\n            return '#00897b'\n        } else {\n            return '#a6ffa6'\n        }\n    }\n\n    const StatusTypeReciept = (isEdit, isDelete) => {\n        if (isDelete) {\n            return 'Deleted'\n        } else if (isEdit) {\n            return 'Exchange'\n        } else {\n            return 'Success'\n        }\n    }\n\n    const RestoneReciept = async (MAHD) => {\n        await axios.post('http://localhost:5000/api/sell-product/restone-receipt', {\n            token: localStorage.getItem('token'),\n            email: infoUser.email,\n            MAHD: MAHD\n        })\n            .then(res => {\n                localStorage.setItem('token', res.data.token)\n                if (res.data.status === 1) {\n                    dispatch({\n                        type: 'RESTONE_ONE_RECIEPT',\n                        MAHD: MAHD\n                    })\n                    dispatch({\n                        type: \"HIDE_ALERT\",\n                    })\n                    dispatch({\n                        type: \"SHOW_ALERT\",\n                        message: 'Restone success',\n                        typeMessage: 'success',\n                    })\n                }\n            })\n            .catch(err => {\n                dispatch({\n                    type: \"CHANGE_LOGIN_STATUS\",\n                });\n                dispatch({\n                    type: \"HIDE_ALERT\",\n                })\n                dispatch({\n                    type: \"SHOW_ALERT\",\n                    message: 'Login timeout, signin again',\n                    typeMessage: 'warning',\n                })\n            })\n        setOpen(false);\n    }\n\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } };\n\n    const ChangeCheckbox = (e, MAHD) => {\n        setStatusSelectReplace(!statusSelectReplace);\n        if (e.target.checked) {\n            dispatch({\n                type: \"ADD_MAHD_RECIEPT\",\n                MAHD: MAHD,\n            })\n        } else {\n            dispatch({\n                type: \"DELETE_MAHD_RECIEPT\",\n                MAHD: MAHD,\n            })\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <TableRow style={{ backgroundColor: TypeReciept(row.isEdit, row.deleted, row.oldBill), borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: '#90a4ae #90a4ae transparent #90a4ae' }} sx={{ '& > *': { borderBottom: 'unset' } }}>\n                <TableCell>\n                    <Checkbox {...label} checked={statusSelectReplace} onChange={(e) => ChangeCheckbox(e, row.MAHD)} color=\"default\" />\n                </TableCell>\n                <TableCell>\n                    <IconButton\n                        aria-label=\"expand row\"\n                        size=\"small\"\n                        onClick={() => setOpen(!open)}\n                    >\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {row.MAHD}\n                </TableCell>\n                <TableCell align=\"right\">{row.date}</TableCell>\n                <TableCell align=\"right\">\n                    {regulation.currency === 'vnd' ? (row.totalMoney).toLocaleString() : ((row.totalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\n                </TableCell>\n                <TableCell align=\"right\">{row.discount}</TableCell>\n                <TableCell align=\"right\">\n                    {regulation.currency === 'vnd' ? (row.totalFinalMoney).toLocaleString() : ((row.totalFinalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\n                    </TableCell>\n            </TableRow>\n            <TableRow style={{ borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: 'transparent #90a4ae #90a4ae #90a4ae' }}>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={12}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box sx={{ margin: 1 }}>\n                            <Typography style={{ fontWeight: '600' }} variant=\"h6\" gutterBottom component=\"div\">\n                                Detail Recipet\n                            </Typography>\n                            <Grid container spacing={3}>\n                                <Grid item lg={6} md={12} sm={12} xs={12}>\n                                    <Table size=\"small\" aria-label=\"purchases\">\n                                        <TableHead>\n                                            <TableRow>\n\n                                                <TableCell>#</TableCell>\n                                                <TableCell>Name</TableCell>\n                                                <TableCell>Quantity</TableCell>\n                                                <TableCell align=\"right\">Price</TableCell>\n                                                <TableCell align=\"right\">Total Price</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {row.listProduct.map((value, key) => (\n                                                <TableRow key={value.name}>\n                                                    <TableCell>\n                                                        {key + 1}\n                                                    </TableCell>\n                                                    <TableCell>{value.product.name}</TableCell>\n                                                    <TableCell>{value.quantity}</TableCell>\n                                                    <TableCell align=\"right\">{regulation.currency === 'vnd' ? value.product.sellPrice.toLocaleString() : (value.product.sellPrice / regulation.exchangeRate).toFixed(2).toLocaleString()}</TableCell>\n                                                    <TableCell align=\"right\">\n                                                        {regulation.currency === 'vnd' ? (value.quantity * value.product.sellPrice).toLocaleString() : ((value.quantity * value.product.sellPrice) / regulation.exchangeRate).toFixed(2).toLocaleString()}\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </Grid>\n                                <Grid style={{ borderLeft: '1px solid black', marginTop: '15px' }} item lg={6} md={12} sm={12} xs={12}>\n                                    <Grid container spacing={3}>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Id Receipt:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.MAHD}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Status:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{StatusTypeReciept(row.isEdit, row.deleted)}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Date:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.date}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Time:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.time}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Old bill:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.oldBill ? row.oldBill.MAHD : \"None\"}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Seller:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.name}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Total quanitty:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{countQuantity()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Total money:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>\n                                                        {regulation.currency === 'vnd' ? row.totalMoney.toLocaleString() : (row.totalMoney / regulation.exchangeRate).toFixed(2).toLocaleString()}\n                                                    </p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Id coupon:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.coupon ? row.coupon.idCoupon : \"Not apply\"}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Reduce money:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>\n                                                        {regulation.currency === 'vnd' ? (row.totalFinalMoney - row.totalMoney).toLocaleString() : ((row.totalFinalMoney - row.totalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\n                                                    </p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Discount (%):</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.discount}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>TOTAL:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>\n                                                        {regulation.currency === 'vnd' ? (row.totalFinalMoney).toLocaleString() : ((row.totalFinalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\n                                                    </p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid style={{ marginBottom: '10px' }} item md={12} xs={12}>\n                                    <Grid style={{ justifyContent: 'end' }} container>\n                                        {row.deleted ? (\n                                            <Grid style={{ justifyContent: 'end' }} item md={2} xs={2}>\n                                                <Button onClick={() => RestoneReciept(row.MAHD)} style={{ fontWeight: '700', fontSize: '0.6rem', backgroundColor: '#00bfa5', color: 'white' }}>\n                                                    <TiArrowBack style={{ marginRight: '5px', fontSize: '1rem', transform: 'translateY(-5%)' }}></TiArrowBack>\n                                                    Restone\n                                                </Button>\n                                            </Grid>\n                                        ) : null}\n                                        <Grid style={{ justifyContent: 'end' }} item md={2} xs={2}>\n                                            <Button onClick={() => DeleteReciept(row.MAHD, row.deleted)} style={{ fontWeight: '700', fontSize: '0.6rem', backgroundColor: red[400], color: 'white' }}>\n                                                <FiXSquare style={{ marginRight: '5px', fontSize: '1rem', transform: 'translateY(-5%)' }}></FiXSquare>\n                                                Delete\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n            <Modal\n                open={openModal}\n                onClose={handleClose}\n                aria-labelledby=\"parent-modal-title\"\n                aria-describedby=\"parent-modal-description\"\n            >\n                <Box sx={{ ...style, width: 400 }}>\n                    <h2 style={{ textAlign: 'center' }} id=\"parent-modal-title\">Are you sure to delete?</h2>\n                    <Grid container spacing={2}>\n                        <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\n                            <Button onClick={() => PermanentlyDelete(row.MAHD)} style={{ color: 'white', backgroundColor: red[500] }}>DELETE</Button>\n                        </Grid>\n                        <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\n                            <Button onClick={() => setOpenModal(false)} style={{ backgroundColor: lightBlue[100] }}>CANCEL</Button>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Modal>\n        </React.Fragment>\n    );\n}\n\nRow.propTypes = {\n    row: PropTypes.shape({\n        calories: PropTypes.number.isRequired,\n        carbs: PropTypes.number.isRequired,\n        fat: PropTypes.number.isRequired,\n        history: PropTypes.arrayOf(\n            PropTypes.shape({\n                amount: PropTypes.number.isRequired,\n                customerId: PropTypes.string.isRequired,\n                date: PropTypes.string.isRequired,\n            }),\n        ).isRequired,\n        name: PropTypes.string.isRequired,\n        price: PropTypes.number.isRequired,\n        protein: PropTypes.number.isRequired,\n    }).isRequired,\n};\n\n\nexport default function CollapsibleTable() {\n    const typeReciept = useSelector(state => state.typeReciept)\n    const listReciept = useSelector(state => state.listReciept)\n    const typeByDate = useSelector(state => state.typeByDate)\n    const [listRecieptReplace, setListRecieptReplace] = React.useState(listReciept);\n    const statusSelectAll = useSelector(state => state.statusSelectAll)\n    const search = useSelector(state => state.search)\n    const dispatch = useDispatch()\n    let listMAHD = []\n    React.useEffect(() => {\n        var list = typeReciept.length === 0 ? listReciept : listReciept.filter(value => {\n            for (var i = 0; i < typeReciept.length; i++) {\n                switch (typeReciept[i]) {\n                    case 'delete':\n                        if (value.deleted) {\n                            return value;\n                        }\n                        break;\n                    case 'return':\n                        if (!value.deleted && value.isEdit) {\n                            return value;\n                        }\n                        break;\n                    default:\n                        if (!value.deleted && !value.isEdit) {\n                            return value;\n                        }\n                        break;\n                }\n            }\n        })\n\n        if (typeByDate.type === 'typeByDate' || typeByDate.type === 'yesterday' || typeByDate.type === 'today') {\n            list = list.filter(value => {\n                let timeMau = value.date;\n                timeMau = timeMau.replace(/\\s/g, \"\");\n                timeMau = timeMau.split(\"/\");\n                if (typeByDate.day == timeMau[0] && typeByDate.month == timeMau[1] && typeByDate.year == timeMau[2]) {\n                    return value;\n                }\n            })\n        }\n\n        if (typeByDate.type === 'lastmonth') {\n            list = list.filter(value => {\n                let timeMau = value.date;\n                timeMau = timeMau.replace(/\\s/g, \"\");\n                timeMau = timeMau.split(\"/\");\n                if (typeByDate.month == timeMau[1] && typeByDate.year == timeMau[2]) {\n                    return value;\n                }\n            })\n        }\n\n        if (typeByDate.type === 'lastyear') {\n            list = list.filter(value => {\n                let timeMau = value.date;\n                timeMau = timeMau.replace(/\\s/g, \"\");\n                timeMau = timeMau.split(\"/\");\n                if (typeByDate.year == timeMau[2]) {\n                    return value;\n                }\n            })\n        }\n\n        if (search.length !== 0) {\n            list = list.filter(value => {\n                let isCheck = true\n                for (let i = 0; i < search.length; i++) {\n                    if (search[0] !== value.MAHD[0]) {\n                        isCheck = false;\n                        break;\n                    }\n                }\n                if (isCheck) {\n                    return value;\n                }\n            })\n        }\n\n        list.map(value => {\n            listMAHD.push(value.MAHD)\n        })\n\n        statusSelectAll ? dispatch({\n            type: \"SELECTED_ALL_RECIEPT\",\n            listMAHD: listMAHD,\n        }) : dispatch({\n            type: \"RESET_MAHD_RECIEPT\"\n        })\n        setListRecieptReplace(list)\n    }, [typeReciept, typeByDate, listReciept, statusSelectAll, search])\n\n\n    return (\n        <TableContainer style={{ overflowX: 'hidden', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px' }} component={Paper}>\n            <Table aria-label=\"collapsible table\">\n                <TableHead>\n                    <TableRow style={{ backgroundColor: 'black', color: 'white' }}>\n                        <TableCell>\n                        </TableCell>\n                        <TableCell />\n                        <TableCell >ID Receipt</TableCell>\n                        <TableCell align=\"right\">Date</TableCell>\n                        <TableCell align=\"right\">Total</TableCell>\n                        <TableCell align=\"right\">Discount</TableCell>\n                        <TableCell align=\"right\">Total final</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {listRecieptReplace ?\n                        listRecieptReplace.map((row) => (\n                            <Row key={row.MAHD} row={row} />\n                        )) : null\n                    }\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/Print.js",["1081","1082","1083","1084","1085","1086","1087","1088","1089"],"import React from 'react';\nimport ReactToPrint from 'react-to-print';\nimport { connect } from 'react-redux';\nimport ComponentToPrint from './ComponentToPrint';\nimport axios from 'axios';\n\n\nclass Printf extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      percentDiscount: 0,\n      infoReciept: [],\n      code: '',\n      date: new Date(),\n      MAHD: \"HD\" + this.makeCode(6),\n      moneyReduce: 0,\n      coupon: null,\n    }\n  }\n\n\n  totalMoney = () => {\n    let total = 0;\n    this.props.shoppingBags.map(value => {\n      total += value.quantity * value.product.sellPrice;\n    })\n    return total;\n  }\n\n  reduceMoney = () => {\n    let total = 0;\n    this.props.shoppingBags.map(value => {\n      total += value.quantity * value.product.sellPrice;\n    })\n    if (total !== 0) {\n      total = total * this.state.percentDiscount / 100\n      return total;\n    }\n    return total;\n  }\n\n  totalFinalMoney = () => {\n    let total = 0;\n    this.props.shoppingBags.map(value => {\n      total += value.quantity * value.product.sellPrice;\n    })\n    if (total !== 0) {\n      total -= total * this.state.percentDiscount / 100\n      return total;\n    }\n    return total;\n  }\n\n  makeCode = (length) => {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() *\n        charactersLength));\n    }\n    return result;\n  }\n\n  getProductByID() {\n\n  }\n\n  addReciept = async () => {\n    if (this.props.shoppingBags.length === 0) {\n      this.props.hideAlert()\n      this.props.showAlert(\"Cart empty \", \"warning\")\n    } else {\n      let code = this.makeCode(8);\n      var isContinue = true;\n      this.setState({\n        code: code\n      })\n      const data = {\n        MAHD: code,\n        idUser: this.props.infoUser.employeeID ? this.props.infoUser.employeeID : this.props.infoUser._id,\n        name: this.props.infoUser.lastName + \" \" + this.props.infoUser.firstName,\n        date: this.dateFunction(),\n        discount: this.state.percentDiscount,\n        totalMoney: this.totalMoney(),\n        totalFinalMoney: this.totalFinalMoney(),\n        listProduct: this.props.shoppingBags,\n        time: this.state.date.getHours() + \":\" + this.state.date.getMinutes(),\n        isEdit: false,\n        oldBill: this.props.statusEditInfoBill ? this.props.InfomationBillEdit : null,\n        coupon: this.state.coupon\n      }\n      await axios.post('http://localhost:5000/api/sell-product/add-reciept', {\n        email: this.props.infoUser.managerID ? this.props.infoUser.managerID : this.props.infoUser.email,\n        token: localStorage.getItem('token'),\n        data: data,\n      })\n        .then(res => {\n          if (res.data.status === 1) {\n            localStorage.setItem('token', res.data.token)\n            if (this.props.statusEditInfoBill) {\n              axios.post('http://localhost:5000/api/sell-product/edit-reciept', {\n                MAHD: this.props.InfomationBillEdit.MAHD,\n                token: localStorage.getItem('token'),\n                email: this.props.infoUser.email,\n              })\n                .then(res => {\n                  this.props.changeStatusEditRecipt()\n                  this.props.editShoppingBar(this.props.InfomationBillEdit.MAHD)\n                })\n                .catch(err => {\n                  this.props.changeLoginStatus();\n                  this.props.hideAlert();\n                  this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n                })\n            }\n\n            console.log(this.state.coupon)\n            if (this.state.coupon) {\n              //Update coupon\n              const data = {\n                ...this.state.coupon,\n                quantity: this.state.coupon.quantity - 1,\n              }\n              axios.post(`http://localhost:5000/api/coupon/update`, {\n                token: localStorage.getItem('token'),\n                email: this.props.infoUser.managerID? this.props.infoUser.managerID : this.props.infoUser.email,\n                coupon: data,\n              }).then(res => {\n\n              }).catch(err => {\n\n              })\n              this.props.updateQuantityCoupon(this.state.coupon._id.couponID)\n            }\n\n            this.setState({\n              infoReciept: this.props.shoppingBags,\n            })\n            this.props.hideAlert()\n            this.props.showAlert(\"Print bill success\", \"success\")\n            this.props.addRecieptToHistory(data);\n            this.setState({\n              coupon: null,\n            })\n          }\n        })\n        .catch(err => {\n          this.props.changeLoginStatus();\n          this.props.hideAlert();\n          this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n          isContinue = false;\n        })\n      if (isContinue) {\n        console.log(\"Chạy thành công rồi\")\n        // Update số lượng sản phẩm ở đây\n\n        // Cộng thêm sản phẩm nếu trả\n        if(this.props.statusEditInfoBill) \n        for(var i = 0; i< this.props.InfomationBillEdit.listProduct.length ; i++)\n        {\n          var productInfo = this.props.InfomationBillEdit.listProduct[i];\n          const data = {\n            token: localStorage.getItem('token'),\n            product: {\n              _id:\n              {\n                productID: productInfo.product._id.productID,\n                importDate: productInfo.product._id.importDate,\n                storeID: productInfo.product._id.storeID,\n              },\n              remain: productInfo.product.remain + productInfo.quantity,\n            }\n          }\n          axios.put(`http://localhost:5000/api/product`, data)\n            .then(res => {\n              console.log(\"Update success\", i);\n              // Xử lý ở redux\n              const dataRedux = data.product;\n              this.props.decreaseRemainProduct(dataRedux);\n            })\n            .catch(err => {\n              console.log(err);\n            })\n        }\n        // Trừ đi số sản phẩm đó\n        console.log(\"this.props.shoppingBags\", this.props.shoppingBags)\n        for (var i = 0; i < this.props.shoppingBags.length; i++) {\n          const data = {\n            token: localStorage.getItem('token'),\n            product: {\n              _id:\n              {\n                productID: this.props.shoppingBags[i].product._id.productID,\n                importDate: this.props.shoppingBags[i].product._id.importDate,\n                storeID: this.props.shoppingBags[i].product._id.storeID,\n              },\n              remain: this.props.shoppingBags[i].product.remain - this.props.shoppingBags[i].quantity,\n            }\n          }\n          axios.put(`http://localhost:5000/api/product`, data)\n            .then(res => {\n              console.log(\"Update success\", i);\n              // Xử lý ở redux\n              const dataRedux = data.product;\n              this.props.decreaseRemainProduct(dataRedux);\n            })\n            .catch(err => {\n              console.log(err);\n            })\n        }\n        this.props.resetShoppingBag();\n      }\n    }\n  }\n\n  CancelEditReiept = () => {\n    this.props.changeStatusEditRecipt()\n    this.props.resetShoppingBag()\n  }\n\n  dateFunction = () => {\n    let month = this.state.date.getMonth() + 1;\n    return \"  \" + this.state.date.getDate() + \" / \" + month + \" / \" + this.state.date.getFullYear()\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let now = new Date()\n    let money = this.totalMoney();\n    let percent = 0;\n    let reduceMoney = 0;\n    this.props.listCoupon.map(value => {\n      let start = new Date(value.timeFrom)\n      let end = new Date(value.timeEnd)\n      if (value.quantity > 0) {\n        if (now - start >= 0 && end - now >= 0) {\n          if (money >= Number(value.minTotal)) {\n            let index = money * Number(value.percent) / 100;\n            if (index >= reduceMoney) {\n              percent = Number(value.percent);\n              reduceMoney = index;\n              this.setState({\n                coupon: value,\n              })\n            }\n          }\n        }\n      }\n    })\n    this.setState({\n      percentDiscount: Number(percent)\n    })\n  }\n\n\n  componentWillMount() {\n    console.log(this.props.listCoupon)\n    let now = new Date()\n    let money = this.totalMoney();\n    let percent = 0;\n    let reduceMoney = 0;\n    this.props.listCoupon.map(value => {\n      let start = new Date(value.timeFrom)\n      let end = new Date(value.timeEnd)\n      if (value.quantity > 0) {\n        if (now - start >= 0 && end - now >= 0) {\n          if (money >= Number(value.minTotal)) {\n            let index = money * Number(value.percent) / 100;\n            if (index >= reduceMoney) {\n              percent = Number(value.percent);\n              reduceMoney = index;\n              this.setState({\n                coupon: value,\n              })\n            }\n          }\n        }\n      }\n    })\n    this.setState({\n      percentDiscount: Number(percent)\n    })\n  }\n\n  render() {\n    \n    return (\n      <div>\n        <div style={{ margin: '0px' }} className=\"row\">\n          <div className=\"col-10 offset-1\">\n            <div className=\"row\">\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\n                <p style={{}}>Total</p>\n              </div>\n              <div className=\"col-5\">\n                <p style={{ textAlign: 'end', marginBottom: '0', fontSize: '1.2rem' }}>\n                  {this.props.regulation.currency === 'vnd' ? (this.totalMoney()).toLocaleString() : ((this.totalMoney()) / this.props.regulation.exchangeRate).toFixed(2).toLocaleString()}\n                </p>\n              </div>\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\n                <p>Discount (%)</p>\n              </div>\n              <div style={{ marginBottom: '10px' }} className=\"col-5\">\n                <input disabled value={this.state.percentDiscount} style={{ fontSize: '1.2rem', border: 'none', outline: 'none', textAlign: 'end', width: '100%', borderBottom: '1px solid black' }} min={0} max={100} type=\"number\"></input>\n              </div>\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\n                <p style={{}}>Reduce</p>\n              </div>\n              <div className=\"col-5\">\n                <p style={{ textAlign: 'end', marginBottom: '0', fontSize: '1.2rem' }}>\n                  -{this.props.regulation.currency === 'vnd' ? (this.reduceMoney()).toLocaleString() : ((this.reduceMoney()) / this.props.regulation.exchangeRate).toFixed(2).toLocaleString()}\n                </p>\n              </div>\n              <div className=\"col-7\">\n                <p style={{ margin: '0', fontSize: '1.2rem', fontWeight: '700' }}>TOTAL FINAL</p>\n              </div>\n              <div className=\"col-5\">\n                <p style={{ margin: '0', fontSize: '1.2rem', textAlign: 'end', color: 'green', fontWeight: '700' }}>\n                  {this.props.regulation.currency === 'vnd' ? (this.totalFinalMoney()).toLocaleString() : ((this.totalFinalMoney()) / this.props.regulation.exchangeRate).toFixed(2).toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </div>\n          {this.props.statusEditInfoBill ? (\n            <div className=\"col-12\">\n              <div className=\"row\">\n                <div onClick={() => this.addReciept()} style={{ cursor: 'pointer' }} className=\"col-8\">\n                  <ReactToPrint\n                    trigger={() => {\n                      return <div className='btn-pay' style={{ marginTop: '10px', borderRadius: '4px', fontWeight: '600', backgroundColor: '#37c737', textAlign: 'center', alignContent: 'center', padding: '15px 0', fontSize: '1.4rem' }}>\n                        SAVE (F9)\n                      </div>;\n                    }}\n                    content={this.props.shoppingBags.length !== 0 ? () => this.componentRef : null}\n                  />\n                </div>\n                <div className=\"col-4\">\n                  <div onClick={() => this.CancelEditReiept()} style={{ width: '100%', marginTop: '10px', borderRadius: '4px', fontWeight: '600', backgroundColor: '#757575', textAlign: 'center', alignContent: 'center', padding: '15px 0', fontSize: '1.4rem', cursor: 'pointer' }} className=\"col-4\">\n                    CANCEL\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div  onClick={() => this.addReciept()} style={{ cursor: 'pointer'  }} className=\"col-12\">\n              <ReactToPrint\n                trigger={() => {\n                  return <div className='btn-pay' style={{ marginTop: '10px', backgroundColor: '#37c737', borderRadius: '4px', fontWeight: '600', textAlign: 'center', alignContent: 'center', padding: '15px 0', fontSize: '1.4rem' }}>\n                    PAY (F9)\n                  </div>;\n                }}\n                content={this.props.shoppingBags.length !== 0 ? () => this.componentRef : null}\n              />\n            </div>\n          )}\n          <div className=\"col-12\">\n            <p className='receipt-history' onClick={() => this.props.changeStatusHistoryReciept()} style={{ cursor: 'pointer' }}>(*) Receipt history</p>\n          </div>\n        </div>\n        {/* Ẩn đi */}\n        <div style={{ display: 'none' }}>\n          <ComponentToPrint regulation={this.props.regulation} MAHD={this.state.code} percentDiscount={this.state.percentDiscount} infoUser={this.props.infoUser} shoppingBags={this.props.shoppingBags} ref={el => (this.componentRef = el)} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    infoUser: state.infoUser,\n    shoppingBags: state.shoppingBags,\n    statusEditInfoBill: state.statusEditInfoBill,\n    InfomationBillEdit: state.InfomationBillEdit,\n    listCoupon: state.listCoupon,\n    InfomationBillEdit: state.InfomationBillEdit,\n    regulation: state.regulationReducer\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    changeStatusHistoryReciept: () => {\n      dispatch({\n        type: \"CHANGE_HISTORY_RECIEPT_STATUS\",\n      });\n    },\n    addRecieptToHistory: (data) => {\n      dispatch({\n        type: \"ADD_RECIEPT\",\n        newReciept: data,\n      });\n    },\n    showAlert: (message, typeMessage) => {\n      dispatch({\n        type: \"SHOW_ALERT\",\n        message: message,\n        typeMessage: typeMessage,\n      })\n    },\n    hideAlert: () => {\n      dispatch({\n        type: \"HIDE_ALERT\",\n      })\n    },\n    resetShoppingBag: () => {\n      dispatch({\n        type: \"RESET_SHOPPING_BAGS\"\n      })\n    },\n    changeStatusEditRecipt: () => {\n      dispatch({\n        type: \"CHANGE_EDIT_INFOMATION_STATUS\"\n      })\n    },\n    changeLoginStatus: () => {\n      dispatch({\n        type: \"CHANGE_LOGIN_STATUS\",\n      });\n    },\n    editShoppingBar: (MAHD) => {\n      dispatch({\n        type: \"EDIT_SHOPPING_BAGS\",\n        MAHD: MAHD,\n      })\n    },\n    updateQuantityCoupon: (idCoupon) => {\n      dispatch({\n        type: \"UPDATE_QUANTITY_COUPON\",\n        idCoupon: idCoupon,\n      })\n    },\n    decreaseRemainProduct: (data) => {\n      dispatch({\n        type: \"DECREASE_REMAIN_PRODUCT\",\n        data: data,\n      });\n    },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Printf)","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/Tabs.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ModalAddCoupon.js",["1090","1091","1092","1093","1094"],"import React from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport TimePicker from '@mui/lab/TimePicker';\nimport { GiCancel } from 'react-icons/gi'\nimport { useSelector, useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\n\nfunction ModalAddCoupon(props) {\n    const statusDarkmode = useSelector(state => state.statusDarkmode)\n    const statusEditCoupon = useSelector(state => state.statusEditCoupon)\n    const objectEditCoupon = useSelector(state => state.objectEditCoupon)\n    const infoUser = useSelector(state => state.infoUser)\n    const [timeFrom, setTimeFrom] = React.useState(statusEditCoupon ? new Date(objectEditCoupon.timeFrom) : new Date());\n    const [timeEnd, settimeEnd] = React.useState(statusEditCoupon ? new Date(objectEditCoupon.timeEnd) : new Date());\n    const [isDescription, setIsDescription] = React.useState(false);\n    const [percent, setPercent] = React.useState(statusEditCoupon ? objectEditCoupon.percent : 100);\n    const [isPercent, setIsPercent] = React.useState(false);\n    const [description, setDiscription] = React.useState(statusEditCoupon ? objectEditCoupon.name : \"Discount 2/9\")\n    const [minTotal, setMinTotal] = React.useState(statusEditCoupon ? objectEditCoupon.minTotal : 100000)\n    const [isMinTotal, setIsMinTotal] = React.useState(false)\n    const [quantity, setQuantity] = React.useState(statusEditCoupon ? objectEditCoupon.quantity : 10)\n    const [isQuantity, setIsQuantity] = React.useState(false)\n    const dispatch = useDispatch()\n\n    const blurDiscription = (e) => {\n        if (e.target.value.length === 0) {\n            setDiscription(e.target.value)\n            setIsDescription(true);\n        } else {\n            setDiscription(e.target.value)\n            setIsDescription(false);\n        }\n    }\n\n    const blurDiscount = (e) => {\n        if (e.target.value > 100 || e.target.value < 0 || e.target.value == \"\") {\n            setIsPercent(true)\n        }\n        else {\n            setIsPercent(false)\n            setPercent(Number(e.target.value).toFixed(0))\n        }\n    }\n\n    const blurQuantity = (e) => {\n        if (e.target.value < 0 || e.target.value == \"\") {\n            setIsQuantity(true)\n        } else {\n            setIsQuantity(false)\n            setQuantity(e.target.value)\n        }\n    }\n\n    const blurMinTotal = (e) => {\n        if (e.target.value < 100000 || e.target.value == \"\") {\n            setIsMinTotal(true)\n        } else {\n            setIsMinTotal(false)\n            setMinTotal(e.target.value)\n        }\n    }\n\n    const changeTimeFrom = (newValue) => {\n        if (newValue) {\n            setTimeFrom(newValue);\n        }\n    }\n\n    const changetimeEnd = (newValue) => {\n        if (newValue) {\n            settimeEnd(newValue);\n        }\n    }\n\n    const addCoupon = async () => {\n        if (timeEnd - timeFrom >= 0) {\n            if (!isPercent && !isDescription && !isMinTotal && !isQuantity) {\n                const data = {\n                    _id: {\n                        storeID: infoUser.email,\n                        couponID: makeCode(6),\n                    },\n                    name: description,\n                    percent: percent,\n                    minTotal: minTotal,\n                    timeFrom: timeFrom,\n                    timeEnd: timeEnd,\n                    quantity: quantity,\n                }\n                await axios.post(`http://localhost:5000/api/coupon/create`, {\n                    token: localStorage.getItem('token'),\n                    email: infoUser.email,\n                    coupon: data,\n                }).then(res => {\n\n                }).catch(err => {\n\n                })\n                dispatch({\n                    type: \"ADD_COUPON\",\n                    data: data\n                })\n                dispatch({\n                    type: \"SHOW_ALERT\",\n                    message: \"Add coupon success\",\n                    typeMessage: \"success\",\n                })\n                dispatch({\n                    type: \"CHANGE_ADD_COUPON_STATUS\"\n                })\n            }\n        } else {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: \"The end date must be greater than the start date\",\n                typeMessage: \"warning\",\n            })\n        }\n    }\n\n    const editCoupon = async () => {\n        if (timeEnd - timeFrom >= 0) {\n            if (!isPercent && !isDescription && !isQuantity) {\n                const data = {\n                    _id: {\n                        couponID: objectEditCoupon._id.couponID,\n                        storeID: infoUser.email\n                    },\n                    name: description,\n                    minTotal: minTotal,\n                    percent: percent,\n                    timeFrom: timeFrom,\n                    timeEnd: timeEnd,\n                    quantity: Number(quantity),\n                }\n                await axios.post(`http://localhost:5000/api/coupon/update`, {\n                    token: localStorage.getItem('token'),\n                    email: infoUser.email,\n                    coupon: { ...data },\n                }).then(res => {\n                    dispatch({\n                        type: \"EDIT_COUPON\",\n                        data: data\n                    })\n                    dispatch({\n                        type: \"SHOW_ALERT\",\n                        message: \"Edit coupon success\",\n                        typeMessage: \"success\",\n                    })\n                    dispatch({\n                        type: \"CHANGE_ADD_COUPON_STATUS\"\n                    })\n                    dispatch({\n                        type: \"RESET_EDIT_COUPON_STATUS\"\n                    })\n                }).catch(err => {\n                    dispatch({\n                        type: \"SHOW_ALERT\",\n                        message: \"Edit coupon faile\",\n                        typeMessage: \"warning\",\n                    })\n                })\n            }\n        } else {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: \"The end date must be greater than the start date\",\n                typeMessage: \"warning\",\n            })\n        }\n    }\n\n    const hanhleCancel = () => {\n        dispatch({\n            type: \"CHANGE_ADD_COUPON_STATUS\"\n        })\n        dispatch({\n            type: \"RESET_EDIT_COUPON_STATUS\"\n        })\n    }\n\n    const makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    const limitText = (limitField, limitNum) => {\n        if (limitField.target.value.length > limitNum) {\n            limitField.target.value = limitField.target.value.substring(0, limitNum);\n        }\n    }\n\n    return (\n        <form className=\"modal-add-shift\" style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n            <Card>\n                <CardHeader style={{ color: !statusDarkmode ? '#0091ea' : 'white', backgroundColor: !statusDarkmode ? '#efeeef' : '#455a64' }} title=\"Create coupon\" />\n                <Divider />\n                <CardContent>\n                    <Grid container spacing={2}>\n                        <Grid item md={12} xs={12}>\n                            <TextField\n                                id=\"outlined-basic\"\n                                variant=\"outlined\"\n                                fullWidth\n                                onKeyDown={(e) => limitText(e, 30)}\n                                onKeyUp={(e) => limitText(e, 30)}\n                                id=\"outlined-error-helper-text\"\n                                onBlur={(e) => blurDiscription(e)}\n                                label=\"Coupon description\"\n                                defaultValue={description}\n                                error={isDescription}\n                                helperText={isDescription ? \"Enter something\" : \"\"}\n                                required\n                                type=\"text\"\n                                name=\"disciption\"\n                            />\n                        </Grid>\n                        <Grid item md={12} xs={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                onBlur={(e) => blurDiscount(e)}\n                                label=\"Discount\"\n                                defaultValue={percent}\n                                onKeyDown={(e) => limitText(e, 10)}\n                                onKeyUp={(e) => limitText(e, 10)}\n                                error={isPercent}\n                                helperText={isPercent ? \"Enter greater than 0 and less than 100\" : \"\"}\n                                type=\"number\"\n                                id=\"outlined-error-helper-text\"\n                                name=\"discount (%)\"\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid item md={12} xs={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                onBlur={(e) => blurQuantity(e)}\n                                label=\"Quantity\"\n                                defaultValue={quantity}\n                                onKeyDown={(e) => limitText(e, 10)}\n                                onKeyUp={(e) => limitText(e, 10)}\n                                error={isQuantity}\n                                helperText={isQuantity ? \"Enter greater than 0\" : \"\"}\n                                type=\"number\"\n                                id=\"outlined-error-helper-text\"\n                                name=\"quantity\"\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid item md={12} xs={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                onBlur={(e) => blurMinTotal(e)}\n                                label=\"Minimum Total Amount\"\n                                defaultValue={minTotal}\n                                onKeyDown={(e) => limitText(e, 30)}\n                                onKeyUp={(e) => limitText(e, 30)}\n                                error={isMinTotal}\n                                helperText={isMinTotal ? \"Enter greater than 100.000\" : \"\"}\n                                type=\"number\"\n                                id=\"outlined-error-helper-text\"\n                                name=\"mintotal\"\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid item md={12} xs={12}>\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                <Stack spacing={3}>\n                                    <DesktopDatePicker\n                                        label=\"From\"\n                                        value={timeFrom}\n                                        minDate={new Date('2017-01-01')}\n                                        onChange={(newValue) => changeTimeFrom(newValue)}\n                                        renderInput={(params) => <TextField {...params} />}\n                                    />\n                                    <DesktopDatePicker\n                                        label=\"To\"\n                                        value={timeEnd}\n                                        minDate={new Date('2017-01-01')}\n                                        onChange={(newValue) => changetimeEnd(newValue)}\n                                        renderInput={(params) => <TextField {...params} />}\n                                    />\n                                </Stack>\n                            </LocalizationProvider>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <Divider />\n                <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                    {statusEditCoupon ? (\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => editCoupon()} variant=\"contained\" startIcon={<BiEdit />}>\n                            Save\n                        </Button>) : (\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => addCoupon()} variant=\"contained\" startIcon={<BiPlusMedical />}>\n                            Add\n                        </Button>\n                    )}\n                    <Button style={{ backgroundColor: 'red' }} onClick={(e) => hanhleCancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\n                        Cancel\n                    </Button>\n                </Box>\n            </Card>\n        </form >\n    );\n}\n\nexport default ModalAddCoupon;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/Regulation.js",["1095","1096","1097","1098","1099","1100"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, Button, CardContent } from '@mui/material';\nimport { connect } from 'react-redux'\nimport Stack from '@mui/material/Stack';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport TimePicker from '@mui/lab/TimePicker';\nimport axios from 'axios'\n\nclass Regulation extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSaveRegulations: false,\n        }\n        this.loadInitialData();\n    }\n\n    blurAnything = (e) => {\n        this.setState({\n            isSaveRegulations: true,\n        })\n    }\n\n    checkConstraint(data) {\n        if(data.regulation.exchangeRate <= 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Exchange rate must be greater than 0\",\"warning\");    \n            return false;\n        }\n        else if(data.regulation.miniumEmployeeAge <= 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Minium old of employee must be greater than 0\",\"warning\"); \n            return false;\n        }\n        else if(data.regulation.lessChangeTimeKeepingDay <= 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Day before absent must be greater than 0\",\"warning\"); \n            return false;\n        }\n        else if(data.regulation.minExpiredProduct <= 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"The different of expired day and import day must be greater than 0\",\"warning\"); \n            return false;\n        }\n        return true;\n    }\n\n    currency = '';\n    exchangeRate = 0;\n    miniumEmployeeAge = 0;\n    lessChangeTimeKeepingDay = 0;\n    minExpiredProduct = 0;\n\n    loadInitialData()\n    {\n        if(this.props.regulation != {})\n        {\n            this.currency = this.props.regulation.currency;\n            this.exchangeRate = this.props.regulation.exchangeRate;\n            this.miniumEmployeeAge = this.props.regulation.miniumEmployeeAge;\n            this.lessChangeTimeKeepingDay = this.props.regulation.lessChangeTimeKeepingDay;\n            this.minExpiredProduct = this.props.regulation.minExpiredProduct;\n        }\n    }   \n\n    SaveRegulations = async () => {\n        const data = {\n            email: this.props.infoUser.email,\n            token: localStorage.getItem('token'),\n            regulation : {\n                _id: this.props.infoUser.email,\n                currency: document.querySelector('select[name=\"currency\"]').value,\n                exchangeRate: document.querySelector('input[name=\"exchangeRate\"]').value,\n                miniumEmployeeAge: document.querySelector('input[name=\"miniumEmployeeAge\"]').value, \n                lessChangeTimeKeepingDay: document.querySelector('input[name=\"lessChangeTimeKeepingDay\"]').value,\n                minExpiredProduct: document.querySelector('input[name=\"minExpiredProduct\"]').value,\n            },\n        }\n        console.log(\"Thông tin quy định\", data);\n        if(this.checkConstraint(data)== false) return;\n        await axios.post(`http://localhost:5000/api/profile/regulation`, data)\n        .then(res => {\n            console.log(\"Add thành công\");\n            this.props.showAlert(\"Change regulation OK\", \"success\");\n        })\n        .catch(err => {\n            this.props.hideAlert();\n            this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n        });\n\n        // Thêm vào redux:\n        this.props.updateRegulation(data.regulation);\n    }\n\n\n    render() {\n        return (\n            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Regulation\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={3}>\n                            <Grid item md={6} xs={12}>\n                                <TextField\n                                    fullWidth\n                                    label=\"Currency\"\n                                    name=\"currency\"\n                                    onBlur={(e) => this.blurAnything(e)}\n                                    required\n                                    defaultValue={this.currency}\n                                    variant=\"outlined\"\n                                    select\n                                    SelectProps={{ native: true }}\n                                >\n                                    <option value=\"vnd\">\n                                        VNĐ\n                                    </option>\n                                    <option value=\"dollar\">\n                                        $\n                                    </option>\n                                </TextField>\n                            </Grid>\n                            <Grid item md={6} xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    label=\"Exchange rate ($ to VNĐ)\"\n                                    defaultValue={this.exchangeRate}\n                                    name=\"exchangeRate\"\n                                    onBlur={(e) => this.blurAnything(e)}\n                                    variant=\"outlined\"\n                                    type=\"number\"\n                                />\n                            </Grid>\n                            <Grid item md={6} xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    label=\"Minium day before timekeeping change\"\n                                    defaultValue={this.lessChangeTimeKeepingDay}\n                                    name=\"lessChangeTimeKeepingDay\"\n                                    variant=\"outlined\"\n                                    onBlur={(e) => this.blurAnything(e)}\n                                    type=\"number\"\n                                />\n                            </Grid>\n                            <Grid item md={6} xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    label=\"Employee Minium Age\"\n                                    defaultValue={this.miniumEmployeeAge}\n                                    name=\"miniumEmployeeAge\"\n                                    variant=\"outlined\"\n                                    onBlur={(e) => this.blurAnything(e)}\n                                    type=\"number\"\n                                />\n                            </Grid>\n                            <Grid item md={6} xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    label=\"Min expired product days\"\n                                    defaultValue={this.minExpiredProduct}\n                                    name=\"minExpiredProduct\"\n                                    variant=\"outlined\"\n                                    onBlur={(e) => this.blurAnything(e)}\n                                    type=\"number\"\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', p: 2 }}>\n                        <Button onClick={() => this.SaveRegulations()} disabled={!this.state.isSaveRegulations} color=\"primary\" variant=\"contained\">Save</Button>\n                    </Box>\n                </Card>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        infoUser: state.infoUser,\n        statusDarkmode: state.statusDarkmode,\n        regulation : state.regulationReducer,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        setRegulation: (data) => {\n            dispatch({\n                type: \"SET_REGULATION\",\n                data: data,\n            });\n        },\n        updateRegulation: (data) => {\n            dispatch({\n                type: \"UPDATE_REGULATION\",\n                data: data,\n            });\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Regulation);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ModalAdd.js",["1101","1102","1103","1104"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport TimePicker from '@mui/lab/TimePicker';\nimport { GiCancel } from 'react-icons/gi'\nimport axios from 'axios';\n\nclass ModalAdd extends Component {\n    constructor(props) {\n        super(props);\n\n        if (this.props.editShiftStatus) {\n            var _timeFrom = new Date();\n            if (this.props.objectEditShift.from.includes(\"PM\")) {\n                var fromHour =  parseInt(this.props.objectEditShift.from.slice(0, this.props.objectEditShift.from.indexOf(':')));\n                var fromMin = parseInt(this.props.objectEditShift.from.slice(this.props.objectEditShift.from.indexOf(':') + 1));\n                _timeFrom.setHours(fromHour + 12, fromMin);\n            } else {\n                var fromHour =  parseInt(this.props.objectEditShift.from.slice(0, this.props.objectEditShift.from.indexOf(':')));\n                var fromMin = parseInt(this.props.objectEditShift.from.slice(this.props.objectEditShift.from.indexOf(':') + 1));\n                _timeFrom.setHours(fromHour , fromMin);\n            }\n           \n            var _timeTo = new Date();\n            if (this.props.objectEditShift.to.includes(\"PM\")) {\n                var toHour = parseInt(this.props.objectEditShift.to.slice(0, this.props.objectEditShift.to.indexOf(':')));\n                var toMin = parseInt(this.props.objectEditShift.to.slice(this.props.objectEditShift.to.indexOf(':') + 1));\n                _timeTo.setHours(toHour + 12, toMin);\n            } else {\n                var toHour = parseInt(this.props.objectEditShift.to.slice(0, this.props.objectEditShift.to.indexOf(':')));\n                var toMin = parseInt(this.props.objectEditShift.to.slice(this.props.objectEditShift.to.indexOf(':') + 1));\n                _timeTo.setHours(toHour, toMin);\n            }\n            \n        }\n\n        this.state = {\n            timeFrom: this.props.editShiftStatus ? _timeFrom : new Date(2018, 5, 35, 0, 0, 0),\n            timeTo: this.props.editShiftStatus ? _timeTo : new Date(2018, 5, 35, 0, 0, 0),\n            isSalary: false,\n            isDescription: false,\n            isTimeTo: false,\n            valueTime: this.props.editShiftStatus ? 1 : null,\n        }\n    }\n\n    descriptionShift = this.props.editShiftStatus ? this.props.objectEditShift.description : \"Ex : abc\"\n    timeFrom = this.props.editShiftStatus ? this.props.objectEditShift.from : \"00:00 AM\"\n    timeTo = this.props.editShiftStatus ? this.props.objectEditShift.to : \"00:00 AM\"\n    salary = this.props.editShiftStatus ? this.props.objectEditShift.salary : 10000\n\n    // Handle user\n    hanhleCancel = (e) => {\n        this.props.changeAddStatus();\n        if (this.props.editShiftStatus) {\n            this.props.changeEditShiftStatus();\n        }\n    }\n\n    changeTimeFrom = (e) => {\n        var hourse = e.getHours()\n        const minutes = e.getMinutes()\n        if (hourse >= 12) {\n            hourse = hourse - 12;\n            this.timeFrom = hourse.toString() + \":\" + minutes.toString() + \" PM\"\n        } else {\n            this.timeFrom = hourse.toString() + \":\" + minutes.toString() + \" AM\"\n        }\n        this.setState({\n            timeFrom: e,\n        })\n    }\n\n    changeTimeTo = (e) => {\n        var hourse = e.getHours()\n        const minutes = e.getMinutes()\n        if (hourse >= 12) {\n            hourse = hourse - 12;\n            this.timeTo = hourse.toString() + \":\" + minutes.toString() + \" PM\"\n        } else {\n            this.timeTo = hourse.toString() + \":\" + minutes.toString() + \" AM\"\n        }\n        this.setState({\n            timeTo: e,\n        })\n    }\n\n    blurDiscription = (e) => {\n        this.descriptionShift = e.target.value;\n        if (e.target.value === \"\") {\n            this.setState({\n                isDescription: true,\n            })\n        } else {\n            this.setState({\n                isDescription: false,\n            })\n        }\n    }\n\n\n    // Tạo code để xác nhận\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    editShift = async () => {\n        if (this.state.timeTo - this.state.timeFrom < 1) {\n            this.props.hideAlert();\n            this.props.showAlert('The time end must be greater than the time start', 'error')\n        }\n        if (!this.state.isSalary && !this.state.isDescription && (this.state.timeTo - this.state.timeFrom > 0)) {\n            var data = {\n                token: localStorage.getItem('token'),\n                idUser: this.props.infoUser.email,\n                id: this.props.objectEditShift.id,\n                salary: this.salary,\n                description: this.descriptionShift,\n                from: this.timeFrom,\n                to: this.timeTo,\n            }\n            await axios.post(`http://localhost:5000/api/profile/update-shift`, data)\n                .then(res => {\n                    if (res.data.token) {\n                        localStorage.setItem('token', res.data.token);\n                        this.props.hideAlert();\n                        this.props.showAlert(\"Edit shift success\", \"success\");\n                        this.props.updateShift(data);\n                    }\n                    this.props.changeEditShiftStatus();\n                    this.props.changeAddStatus();\n                })\n                .catch(err => {\n                    this.props.changeLoginStatus();\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n                })\n\n        }\n    }\n\n    blurSalary = (e) => {\n        if (e.target.value <= -1) {\n            this.setState({\n                isSalary: true,\n            })\n        } else {\n            this.setState({\n                isSalary: false,\n            })\n        }\n        this.salary = e.target.value;\n    }\n\n    // Call API\n    addShift = () => {\n        if (this.state.timeTo - this.state.timeFrom < 1) {\n            this.props.hideAlert();\n            this.props.showAlert('The time end must be greater than the time start', 'error')\n        }\n        if (!this.state.isSalary && !this.state.isDescription && (this.state.timeTo - this.state.timeFrom > 0)) {\n            const code = this.makeCode(6);\n            const data = {\n                idUser: this.props.infoUser.email,\n                id: code,\n                salary: this.salary,\n                description: this.descriptionShift,\n                from: this.timeFrom,\n                to: this.timeTo,\n            }\n            const data1 = {\n                name: this.descriptionShift,\n                salary: this.salary,\n                timeFrom: this.timeFrom,\n                timeEnd: this.timeTo,\n                _id: { shiftID: code }\n            }\n            if (data) {\n                axios.post(`http://localhost:5000/api/profile/add-shift`, {\n                    email: this.props.infoUser.email,\n                    token: localStorage.getItem('token'),\n                    data: data,\n                })\n                    .then(res => {\n                        if (res.data.token) {\n                            this.props.addShift(data1);\n                            localStorage.setItem('token', res.data.token);\n                            this.props.hideAlert();\n                            this.props.showAlert(\"Add shift success\", \"success\");\n                        }\n                        this.props.changeAddStatus();\n                    })\n                    .catch(err => {\n                        this.props.changeLoginStatus();\n                        this.props.hideAlert();\n                        this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n                    })\n            }\n        }\n    }\n\n    limitText = (limitField, limitNum) => {\n        if (limitField.target.value.length > limitNum) {\n            limitField.target.value = limitField.target.value.substring(0, limitNum);\n        }\n    }\n\n    render() {\n        return (\n            <form className=\"modal-add-shift\" style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Create shift\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    id=\"outlined-basic\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    onKeyDown={(e) => this.limitText(e, 30)}\n                                    onKeyUp={(e) => this.limitText(e, 30)}\n                                    defaultValue={(this.props.editShiftStatus ? this.props.objectEditShift.description : this.descriptionShift)}\n                                    onBlur={(e) => this.blurDiscription(e)}\n                                    label=\"Shift description\"\n                                    error={this.state.isDescription}\n                                    helperText={this.state.isDescription ? \"Enter something\" : \"\"}\n                                    required\n                                    type=\"text\"\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    onBlur={(e) => this.blurSalary(e)}\n                                    label=\"Salary (VNĐ)\"\n                                    defaultValue={this.props.editShiftStatus ? this.props.objectEditShift.salary : this.salary}\n                                    error={this.state.isSalary}\n                                    helperText={this.state.isSalary ? \"Greater than 0\" : \"\"}\n                                    type=\"number\"\n                                    onKeyDown={(e) => this.limitText(e, 30)}\n                                    onKeyUp={(e) => this.limitText(e, 30)}\n                                    id=\"outlined-error-helper-text\"\n                                    name=\"salary\"\n                                    variant=\"outlined\"\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                    <Stack spacing={3}>\n                                        <TimePicker\n                                            label=\"From\"\n                                            value={this.state.timeFrom}\n                                            onChange={(newValue) => this.changeTimeFrom(newValue)}\n                                            renderInput={(params) => <TextField {...params} />}\n                                        />\n                                        <TimePicker\n                                            label=\"To\"\n                                            value={this.state.timeTo}\n                                            onChange={(newValue) => this.changeTimeTo(newValue)}\n                                            renderInput={(params) => <TextField {...params} />}\n                                        />\n                                    </Stack>\n                                </LocalizationProvider>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        {this.props.editShiftStatus ? (\n                            <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.editShift()} variant=\"contained\" startIcon={<BiEdit />}>\n                                Save\n                            </Button>) : (\n                            <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.addShift()} variant=\"contained\" startIcon={<BiPlusMedical />}>\n                                Add\n                            </Button>\n                        )}\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.hanhleCancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\n                            Cancel\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addStatus: state.addStatus,\n        infoUser: state.infoUser,\n        editShiftStatus: state.editShiftStatus,\n        objectEditShift: state.objectEditShift,\n        statusDarkmode: state.statusDarkmode\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_STATUS\",\n            });\n        },\n        addShift: (data) => {\n            dispatch({\n                type: \"ADD_SHIFT\",\n                newShift: data,\n            })\n        },\n        changeEditShiftStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_SHIFT_STATUS\",\n            })\n        },\n        updateShift: (data) => {\n            dispatch({\n                type: \"OBJECT_UPDATE_SHIFT\",\n                data: data,\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalAdd);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileSetting.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ChangePassword.js",["1105","1106","1107"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, Button, CardContent } from '@mui/material';\nimport axios from 'axios';\nimport {connect} from 'react-redux'\nimport { FaCommentsDollar } from 'react-icons/fa';\nvar bcrypt = require('bcryptjs');\n\nclass ChangePassword extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isCurPass: false,\n            isNewPass: false,\n            isRePass: false,\n            isChangePass: false,\n        }\n    }\n\n    messCurPass = \"\"\n    messNewPass = \"\"\n    messRePass = \"\"\n    curPass = \"\"\n    newPass = \"\"\n    rePass = \"\"\n\n    // Gọi api change password\n    changePassword = async () => {\n        if(this.props.role == false){ \n            if(this.curPass != this.props.infoUser.password)\n            {\n                this.props.hideAlert();\n                this.props.showAlert(\"Not a correct pass\", \"error\");\n                return;\n            }\n            const data = {\n                token: localStorage.getItem('token'),\n                employee: {\n                    _id: {\n                        employeeID: this.props.infoUser.employeeID,\n                        storeID: this.props.infoUser.managerID,\n                    },\n                    managerID: this.props.infoUser.managerID,\n                    password: this.newPass,\n                    firstName: this.props.infoUser.firstName,\n                    lastName: this.props.infoUser.lastName,\n                    phoneNumber: this.props.infoUser.tel,\n                    email: this.props.infoUser.email,\n                    address: this.props.infoUser.address,\n                    cardID: this.props.infoUser.cardID,\n                }   \n            }\n            axios.put(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Change password success\", \"success\");\n                this.props.setEmployeePass(this.newPass);\n            })\n            .catch(err => {\n            })\n        }\n        else {\n            const form = document.getElementById('form-change-password');\n            const data = {\n                token: localStorage.getItem('token'),\n                email: this.props.infoUser.email,\n                curPass: this.curPass,\n                newPass: this.hash(this.newPass),\n            }\n            await axios.post(`http://localhost:5000/api/profile/change-password`,data)\n            .then(res => {\n                if (res.data.status === -1) {\n                    this.props.hideAlert();\n                    this.props.showAlert(res.data.message, \"error\");\n                } else {\n                    form.reset();\n                    localStorage.setItem('token', res.data.token);\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Change password success\", \"success\");\n                }\n            })\n            .catch(err => {\n                this.props.changeLoginStatus();\n                this.props.hideAlert();\n                this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n            })\n        }\n        \n    }\n\n    // hash\n    hash = (pass) => {\n        var hash = bcrypt.hashSync(pass, 12)\n        return hash;\n    }\n\n    // Handele : blur, change\n    blurCurPassword = (e) => {\n        this.curPass= e.target.value;\n        if (e.target.value === \"\") {\n            this.setState({\n                isCurPass: false,\n                isChangePass: false,\n            })\n            return;\n        } else if (e.target.value.length < 6) {\n            this.messCurPass = \"Enter at least 6 characters\";\n            this.setState({\n                isCurPass: true,\n                isChangePass: false,\n            })\n        } else {\n            this.messCurPass = \"\";\n            this.setState({\n                isCurPass: false,\n            })\n            if(this.newPass.length>5 && this.newPass === this.rePass){\n                this.setState({\n                    isChangePass: true,\n                })\n            }\n        }\n    }\n\n    blurNewPassword = (e) => {\n        this.blurRePassword(e);\n        this.newPass = e.target.value;\n        if (e.target.value === \"\") {\n            this.setState({\n                isNewPass: false,\n                isChangePass: false,\n            })\n            return;\n        } else if (e.target.value.length < 6) {\n            this.messNewPass = \"Enter at least 6 characters\";\n            this.setState({\n                isNewPass: true,\n            })\n        } else {\n            this.messCurPass = \"\";\n            this.setState({\n                isNewPass: false,\n            })\n            this.blurRePassword(e);\n            if (this.rePass === this.newPass && this.curPass.length > 5){\n                this.setState({\n                    isChangePass: true,\n                })\n            }\n        }\n    }\n\n    blurRePassword = (e) => {\n        this.rePass = document.querySelector('input[name=\"re-password\"]').value\n        if (this.rePass !== this.newPass) {\n            this.messRePass = \"Re-password not correct\";\n            this.setState({\n                isRePass: true,\n                isChangePass: false,\n            })\n        } else {\n            this.messRePass = \"\";\n            this.setState({\n                isRePass: false,\n            })\n            if (this.rePass === this.newPass && this.curPass.length > 5){\n                this.setState({\n                    isChangePass: true,\n                })\n            }\n        }\n    }\n\n    limitText = (limitField, limitNum) => {\n        if (limitField.target.value.length > limitNum) {\n            limitField.target.value = limitField.target.value.substring(0, limitNum);\n        }\n    }\n\n    render() {\n        return (\n            <form id=\"form-change-password\" style={{marginBottom: '15px', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Change Password\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    variant=\"standard\"\n                                    fullWidth\n                                    name=\"cur-password\"\n                                    label=\"Current password\"\n                                    onKeyDown={(e) => this.limitText(e, 30)}\n                                    onKeyUp={(e) => this.limitText(e, 30)}\n                                    onBlur={(e) => this.blurCurPassword(e)}\n                                    error={this.state.isCurPass}\n                                    helperText={this.messCurPass}\n                                    type=\"password\"\n                                    required\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    fullWidth\n                                    label=\"New password\"\n                                    name=\"new-password\"\n                                    required\n                                    onKeyDown={(e) => this.limitText(e, 30)}\n                                    onKeyUp={(e) => this.limitText(e, 30)}\n                                    onBlur={(e) => this.blurNewPassword(e)}\n                                    error={this.state.isNewPass}\n                                    helperText={this.messNewPass}\n                                    type=\"password\"\n                                    variant=\"standard\"\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    fullWidth\n                                    label=\"New password again\"\n                                    onBlur={(e) => this.blurRePassword(e)}\n                                    error={this.state.isRePass}\n                                    helperText={this.messRePass}\n                                    onKeyDown={(e) => this.limitText(e, 30)}\n                                    onKeyUp={(e) => this.limitText(e, 30)}\n                                    name=\"re-password\"\n                                    required\n                                    type=\"password\"\n                                    variant=\"standard\"\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', p: 2 }}>\n                        <Button color=\"primary\" disabled={!this.state.isChangePass} onClick={() => this.changePassword()} variant=\"contained\">Change</Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        infoUser: state.infoUser,\n        statusDarkmode: state.statusDarkmode,\n        role: state.role,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        setEmployeePass: (password) => {\n            dispatch({\n                type: \"SET_EMPLOYEE_PASS\",\n                password: password\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangePassword);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileDetail.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileCoupon.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileHeader.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddTimeKeeperModal.js",["1108","1109","1110","1111","1112","1113","1114","1115","1116","1117","1118","1119","1120","1121","1122"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, \n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nvar listDayInWeek = [\n    {ID:'T2',name:'Thứ hai'}, \n    {ID:'T3',name:'Thứ ba'}, \n    {ID:'T4',name:'Thứ tư'}, \n    {ID:'T5',name:'Thứ năm'}, \n    {ID:'T6',name:'Thứ sáu'}, \n    {ID:'T7',name:'Thứ bảy'}, \n    {ID:'CN',name:'Chủ nhật'}\n];\nclass AddTimeKeepingModal extends Component {\n\n    genID = 0;\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n            timeKeepingID: '',\n            alterID: '',\n            dayChosed: '',\n            shiftID: '',\n        };\n    }\n\n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    checkContraint() {\n        if(this.state.dayChosed.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"You haven't select the day of week\",\"warning\");\n            return false;\n        }\n        if(this.state.shiftID.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"You haven't select the shift\",\"warning\");\n            return false;\n        }\n        console.log(this.state.timeKeepingID );\n        if( this.state.timeKeepingID == undefined || this.state.timeKeepingID.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"You haven't select the employee\",\"warning\"); \n            return false;\n        }\n        // Có CSDL thì báo xem có trùng với cái cũ ko nữa\n        return true;\n    }\n\n\n    addChange() {\n        if(this.checkContraint()==false);\n        const data = {\n            _id: {\n                dateInWeek: this.state.dayChosed,\n                storeID: this.props.infoUser.email,\n                shiftType: {\n                    _id: {\n                        shiftID: this.state.shiftID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n                employee: {\n                    _id: {\n                        employeeID: this.state.timeKeepingID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n            },\n            realDate: document.querySelector('input[name=\"realDate\"]').value,\n        };\n        this.props.addNewTimeKeeper(data);\n        this.props.changeAddTimeKeepingStatus();\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \n                    title=\"Change TimeKeeper\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            Real Date\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"date\" \n                                            name='realDate'\n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.getCurrentDateTime()}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Choose Day in week\n                                        </div>\n                                        <FormControl sx={{ minWidth: 120 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({dayChosed: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    listDayInWeek.map((item) =>\n                                                        <MenuItem value={item.ID}>\n                                                            {item.name}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n\n                                    <Grid item md={8} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>\n                                            Choose Shift\n                                        </div>\n                                        <FormControl sx={{ minWidth: 220 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({shiftID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\n                                                    : this.props.listShift.map((shift) =>\n                                                        <MenuItem value={shift._id.shiftID}>\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            TimeKeeping Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({timeKeepingID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        !(this.state.alterID == item._id.employeeID) ?\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                        : null\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.addChange()}>\n                                            Add Change\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listShift: state.listShift,\n        listEmployee: state.listEmployee,\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        addNewTimeKeeper: (data) => {\n            dispatch({\n                type: \"ADD_NEW_TIME_KEEPER\",\n                data: data,\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTimeKeepingModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ListShift.js",["1123","1124","1125","1126","1127"],"import React, { Component } from 'react';\nimport { Modal ,Grid,Card, CardHeader, Divider, TableHead, TableRow, Paper, Box, Button, CardContent, Table, TableBody, TableCell, TableContainer } from '@mui/material';\nimport { BiPlusMedical } from 'react-icons/bi';\nimport { IconButton } from '@mui/material'\nimport { styled } from '@mui/material/styles';\nimport { FiEdit, FiTrash2 } from 'react-icons/fi'\nimport { tableCellClasses } from '@mui/material/TableCell';\nimport { connect } from 'react-redux'\nimport axios from 'axios';\nimport { red, blue, lightBlue } from '@mui/material/colors';\nimport { CgDanger } from 'react-icons/cg'\nimport { useSelector, useDispatch } from 'react-redux'\nimport {TiArrowBack} from 'react-icons/ti'\n\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    [`&.${tableCellClasses.body}`]: {\n        fontSize: 14,\n    },\n}));\n\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 0,\n    },\n}));\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '1px solid #000',\n    borderRadius: '5px',\n    boxShadow: 24,\n    pt: 2,\n    px: 4,\n    pb: 3,\n};\n\n\nclass ListShift extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n        }\n    }\n\n    deleteShiftId = ''\n\n    handleEdit = (e, id, description, from, to, salary) => {\n        const data = {\n            description: description,\n            from: from,\n            id: id,\n            to: to,\n            salary: salary,\n        }\n        if (id) {\n            this.props.objectEditShift(data)\n            this.props.changeEditShiftStatus();\n            this.props.changeAddStatus();\n        }\n    }\n\n    showModal = (id) => {\n        this.setState({\n            open: true\n        })\n        this.deleteShiftId = id;\n    }\n\n    handleAdd = () => {\n        this.props.changeAddStatus();\n    }\n\n    handleDelete = (idShift) => {\n        if (idShift) {\n            axios.post(`http://localhost:5000/api/profile/delete-shift`, {\n                token: localStorage.getItem('token'),\n                email: this.props.infoUser.email,\n                idShift: idShift\n            })\n                .then(res => {\n                    if (res.data.token) {\n                        localStorage.setItem('token', res.data.token);\n                        this.props.deleteShift(idShift);\n                        this.props.hideAlert();\n                        this.props.showAlert(\"Delete shift success\", \"success\");\n                        this.setState({\n                            open: false \n                        })\n                    }\n                })\n                .catch(err => {\n                    this.setState({\n                        open: false \n                    })\n                    this.props.changeLoginStatus();\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n                })\n        }\n\n    }\n\n    render() {\n        return (\n            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px' }}>\n                <Card style={{ position: \"relative\", marginTop: '15px' }}>\n                    <CardHeader style={{ color: !this.props.statusDarkmode ? '#0091ea' : 'white', backgroundColor: !this.props.statusDarkmode ? '#efeeef' : '#455a64' }} title=\"List Shift\" />\n                    <Divider />\n                    <CardContent>\n                        <TableContainer id=\"choses-product\" component={Paper}>\n                            <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n                                <TableHead>\n                                    <TableRow>\n                                        <StyledTableCell>Description</StyledTableCell>\n                                        <StyledTableCell align=\"center\">Salary</StyledTableCell>\n                                        <StyledTableCell align=\"center\">From</StyledTableCell>\n                                        <StyledTableCell align=\"center\">To</StyledTableCell>\n                                        <StyledTableCell align=\"center\">Edit</StyledTableCell>\n                                        <StyledTableCell align=\"center\">Delete</StyledTableCell>\n                                    </TableRow>\n                                </TableHead>\n                                {this.props.listShift.map(item => {\n                                    return (\n                                        <TableBody>\n                                            <StyledTableRow key=\"abc\">\n                                                <StyledTableCell component=\"th\" scope=\"row\">{item.name}</StyledTableCell>\n                                                <StyledTableCell align=\"center\">\n                                                    {this.props.regulation.currency === 'vnd' ? (item.salary).toLocaleString() : ((item.salary) / this.props.regulation.exchangeRate).toFixed(2).toLocaleString()}\n                                                </StyledTableCell>\n                                                <StyledTableCell align=\"center\">{item.timeFrom}</StyledTableCell>\n                                                <StyledTableCell align=\"center\">{item.timeEnd}</StyledTableCell>\n                                                <StyledTableCell align=\"center\">\n                                                    <IconButton name={item._id.shiftID} onClick={(e) => this.handleEdit(e, item._id.shiftID, item.name, item.timeFrom, item.timeEnd, item.salary)} color=\"secondary\" aria-label=\"fingerprint\">\n                                                        <FiEdit />\n                                                    </IconButton>\n                                                </StyledTableCell>\n                                                <StyledTableCell align=\"center\">\n                                                    <IconButton name={item._id.shiftID} onClick={(e) => this.showModal(item._id.shiftID)} style={{ color: 'red' }} aria-label=\"fingerprint\">\n                                                        <FiTrash2 />\n                                                    </IconButton>\n                                                </StyledTableCell>\n                                            </StyledTableRow>\n                                        </TableBody>\n                                    )\n                                })}\n                            </Table>\n                        </TableContainer>\n                    </CardContent>\n                    <Divider />\n                    <Box className=\"add-shift\" sx={{ display: 'flex', justifyContent: 'flex-end', p: 2 }}>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleAdd()} variant=\"contained\" startIcon={<BiPlusMedical />}>\n                            add\n                        </Button>\n                    </Box>\n                </Card>\n                <Modal\n                    open={this.state.open}\n                    onClose={() => this.setState({open: false})}\n                    aria-labelledby=\"parent-modal-title\"\n                    aria-describedby=\"parent-modal-description\"\n                >\n                    <Box sx={{ ...style, width: 400 }}>\n                        <h2 style={{ textAlign: 'center', fontSize: '1.4rem', marginBottom: '15px' }} >Are you sure delete this shift ?</h2>\n                        <Divider />\n                        <Grid style={{ marginTop: '5px' }} container spacing={2}>\n                            <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\n                                <Button onClick={(e) => this.handleDelete(this.deleteShiftId)} style={{ color: 'white', backgroundColor: red[500] }}>DELETE</Button>\n                            </Grid>\n                            <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\n                                <Button onClick={() => this.setState({open: false})} style={{ backgroundColor: lightBlue[100] }}>CANCEL</Button>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Modal>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addStatus: state.addStatus,\n        listShift: state.listShift,\n        infoUser: state.infoUser,\n        statusDarkmode: state.statusDarkmode,\n        regulation: state.regulationReducer\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_STATUS\",\n            });\n        },\n        deleteShift: (idShift) => {\n            dispatch({\n                type: \"DELETE_SHIFT\",\n                idShift: idShift,\n            })\n        },\n        changeEditShiftStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_SHIFT_STATUS\",\n            })\n        },\n        objectEditShift: (data) => {\n            dispatch({\n                type: \"OBJECT_EDIT_SHIFT\",\n                data: data\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        }\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(ListShift);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/TimekeepingTable.js",["1128","1129","1130","1131","1132"],"import {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { withStyles } from '@material-ui/styles';\n// material\nimport { Paper, TableContainer, Table, TableHead, TableCell, TableRow, Button} from '@mui/material';\nimport { AiOutlineEdit, AiFillDelete } from \"react-icons/ai\";\n// ----------------------------------------------------------------------\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    } \n})\n\nclass TimeKeepingTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: 'false'\n    }\n    this.getAllTimeKeeping()\n  }\n\n    async getAllTimeKeeping()\n    {\n        var result = [];\n        const data = {\n          token: localStorage.getItem('token'),\n          filter: {\n              \"_id.storeID\": this.props.infoUser.email,\n          }   \n        }\n        await axios.get(`http://localhost:5000/api/employee/time-keeping`, {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n                // console.log(\"điểm danh\", res.data.data);\n            })\n            .catch(err => {\n                console.log(err);\n                this.props.hideAlert();\n\t\t\t\t        this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        // To redux\n        this.props.getTimeKeeping(result);\n    }\n\n  getShiftInforByID(shiftID)\n  {\n      var listShift = this.props.listShift;\n      for(var i = 0 ; i < listShift.length; i++)\n      {\n        if(listShift[i]._id.shiftID == shiftID)\n        {\n            return listShift[i].name + ' (' + listShift[i].timeFrom + '-' + listShift[i].timeEnd + ')';\n        }\n      }\n      return \"Can't get shift\";\n  }\n\n  getEmployeeFullNameByID(employeeID)\n  {\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n      {\n          var currentEmployee = this.props.listEmployee.employees[i];\n          if(currentEmployee._id.employeeID==employeeID)\n          {\n            return currentEmployee.lastName + ' ' + currentEmployee.firstName;\n          }\n      }\n      return \"Can't get name\";\n  }\n  render() {\n    const { classes } = this.props;\n    return ( \n      <div  > \n          <TableContainer component={Paper}>\n                <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='180px'>Day</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='80px'>Date Of Week</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" >Shift</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">ID</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">Name</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">Paid</TableCell>\n                            {/* <TableCell className={classes.goodTable_Cell_Header} align=\"center\"></TableCell> */}\n                        </TableRow>\n                        {\n                            this.props.listTimeKeeper.map((timeKeeper)=>\n                                (\n                                  <TableRow>\n                                    <TableCell className={classes.goodTable_Cell}>\n                                        {timeKeeper._id.realDate.substring(0,timeKeeper._id.realDate.indexOf('T') )}\n                                    </TableCell>\n                                    <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.dateInWeek}</TableCell>\n                                    <TableCell className={classes.goodTable_Cell}>\n                                        {timeKeeper._id.shiftType.name + \" (\"+ timeKeeper._id.shiftType.timeFrom + \n                                          ' - '+  timeKeeper._id.shiftType.timeEnd +')'}\n                                      </TableCell>\n                                    <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.employee._id.employeeID}</TableCell>\n                                    <TableCell className={classes.goodTable_Cell}>\n                                        {timeKeeper._id.employee.firstName + \" \" + timeKeeper._id.employee.lastName}\n                                    </TableCell>\n                                    <TableCell className={classes.goodTable_Cell}>\n                                        {timeKeeper.isPaidSalary.toString()}\n                                    </TableCell>\n                                </TableRow>\n                                )\n                            )\n                        }\n                    </TableHead>\n                </Table>\n          </TableContainer>\n            {/* <Button \n                variant=\"contained\"\n                onClick={() => this.props.changeAddTimeKeepingStatus()}\n            >\n              Add\n            </Button> */}\n      </div>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n      listTimeKeeper: state.listTimeKeeping,\n      listShift: state.listShift,\n      listEmployee: state.listEmployee,\n      infoUser: state.infoUser\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    changeAddTimeKeepingStatus: () => {\n      dispatch({\n          type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\n      });\n    },\n    changeUpdateTimeKeepingStatus: () => {\n      dispatch({\n          type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\n      });\n    },\n    changeUpdateTimeKeepingValue: (data) => {\n      dispatch({\n        type: \"SET_UPDATE_TIMEKEEPER_VALUE\",\n        data: data\n      });\n    },\n    deleteTimeKeeping: (data) => {\n      console.log(\"data\", data)\n      dispatch({\n        type: \"DELETE_TIMEKEEPER\",\n        data: data\n      });  \n    },\n    getTimeKeeping: (data) => {\n      dispatch({\n        type: \"GET_TIMEKEEPER\",\n        data: data\n      });  \n    },\n    showAlert: (message, typeMessage) => {\n      dispatch({\n        type: \"SHOW_ALERT\",\n        message: message,\n        typeMessage: typeMessage,\n      })\n    },\n    hideAlert: () => {\n      dispatch({\n        type: \"HIDE_ALERT\",\n      })\n    },\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(TimeKeepingTable));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/NoJobEmployee.js",["1133","1134","1135","1136","1137","1138"],"import React, { Component } from 'react';\nimport { Table, TableCell, TableContainer, TableRow, TableHead, Paper} from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nvar listUsers = [];\n\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n    } \n})\n\nclass NoJobEmployee extends Component {\n\n    genID = 0;\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n        };\n        listUsers = [];\n    }\n\n    cancel = () => {\n        this.props.changeAddEmployeeStatus();\n    }\n\n    addEmployee = () => {\n        this.addEmployeeToDatabase();\n        this.props.changeAddEmployeeStatus();\n    }\n\n    findEmployeeInAssign(employeeID)\n    {\n        var shiftAssign = this.props.listShiftAssign;\n        for(var i = 0 ; i < shiftAssign.length; i++)\n        {\n            if(shiftAssign[i]._id.employee._id.employeeID == employeeID)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div>\n                <TableContainer component={Paper} style={{width: 400}} >\n                    <Table>\n                        <TableHead>\n                            <TableRow style={{height: 20}}>\n                                <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" >      ID</TableCell>\n                                <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\">Employee</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        {\n\n                            this.props.listEmployee.employees.map((item) => \n                                !this.findEmployeeInAssign(item._id.employeeID)\n                                ?<TableRow>\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\" style={{height: 30}}>{item._id.employeeID}</TableCell>\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\">{item.firstName + ' ' + item.lastName}</TableCell>\n                                </TableRow>\n                                :(null)\n                            )\n                        }\n                        \n                    </Table>\n                </TableContainer>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listEmployee: state.listEmployee,\n        listShiftAssign: state.listShiftAssign,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles, {withTheme: true})(NoJobEmployee));\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UnShiftEmployee.js",["1139","1140","1141","1142","1143","1144","1145","1146","1147","1148"],"import {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Icon } from '@iconify/react';\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\nimport { withStyles } from '@material-ui/styles';\nimport '../../css/EmployeeManager.css'\n// material\nimport { Paper, TableContainer, Table, \n  TableHead, TableCell, TableRow, Button,\n  Menu, MenuItem, Grid\n} from '@mui/material';\nimport { AiOutlineEdit, AiFillDelete } from \"react-icons/ai\";\nimport plusFill from '@iconify/icons-eva/plus-fill';\n// ----------------------------------------------------------------------\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    } \n})\n\nclass UnShiftEmployee extends Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: false\n    }\n    this.getAllNextWeekTimeKeeping();\n    console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\n  }\n\n  async getAllNextWeekTimeKeeping()\n  {\n    var result = [];\n    const data = {\n      token: localStorage.getItem('token'),\n      filter: {\n          \"_id.storeID\": this.props.infoUser.email,\n      }   \n    }\n    await axios.get(`http://localhost:5000/api/employee/off-day`, {\n        params: {...data}\n    })\n        .then(res => {\n            result = res.data.data;\n            console.log(\"Báo nghỉ\", res.data.data);\n            this.props.getEmployeeDayOff(result);\n        })\n        .catch(err => {\n            console.log(err);\n            this.props.hideAlert();\n\t\t\t\t    this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n        })\n  }\n\n  findShift(shiftID) {\n      var shifts= this.props.listShift;\n        for(var i = 0 ; i < shifts.length ; i++)\n        {\n            if(shifts[i]._id.shiftID == shiftID)\n            {\n                return true;\n            }\n        }\n        return false;\n  }\n\n  getShiftNameAndTime(shiftID)\n  {\n      var shifts= this.props.listShift;\n      for(var i = 0 ; i < shifts.length ; i++)\n      {\n          if(shifts[i]._id.shiftID == shiftID)\n          {\n              return shifts[i].name + ' (' + shifts[i].timeFrom + ' - ' + shifts[i].timeEnd +') ';\n          }\n      }\n      return \"Can't get shift\";\n  }\n\n  getEmployeeNameByID(employeeID)\n  {\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n      {\n          var currentEmployee = this.props.listEmployee.employees[i];\n          if(currentEmployee._id.employeeID==employeeID)\n          {\n            return currentEmployee.firstName;\n          }\n      }\n      return \"This employee was sacked\";\n  }\n\n  reload()\n  {\n    this.setState({change: !this.state.change})\n  }\n\n  openOption = false;\n\n  handleClose ()\n  {\n      this.openOption = false;\n      this.setState({change: !this.state.change});\n  }\n\n  handleOpen()\n  {\n      this.openOption = true;\n      this.setState({change: !this.state.change});\n  }\n\n  findEmployeeNameByID(employeeID)\n  {\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n      {\n          var currentEmployee = this.props.listEmployee.employees[i];\n          if(currentEmployee._id.employeeID==employeeID)\n          {\n            return true;\n          }\n      }\n      return false;\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div>\n          <Button \n              variant=\"contained\"\n              onClick={() => this.props.changeAddNextWeekTimeKeepingStatus()}\n              startIcon={<Icon icon={plusFill} />}\n            >\n              \n            Add\n          </Button>\n          <TableContainer component={Paper} >\n                <Table className={classes.goodTable} size=\"small\" aria-label=\"a dense table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='80px' rowSpan={2}>Day</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" rowSpan={2}>Shift</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" rowSpan={2}>Real Date</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" colSpan={2}>Withdraw</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" colSpan={2}>Change</TableCell>\n                            <TableCell rowSpan={2} style={{color: '#fff', backgroundColor: '#000'}}/>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">ID</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">Name</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">ID</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">Name</TableCell>\n                        </TableRow>\n                        {\n                          this.props.nextWeekTimeKeeping.map((item) =>\n                          // this.findEmployeeNameByID(item._id.employee._id.employeeID) == false \n                          // || this.findEmployeeNameByID(item.alternativeEmployee._id.employeeID) == false\n                          this.findShift(item._id.shiftType._id.shiftID) == false\n                          ? (null) :\n                          <TableRow\n                              style={{\n                                position: 'relative',\n                              }}\n                          >\n                              <TableCell className={classes.goodTable_Cell}>{item._id.dateInWeek}</TableCell>\n                              <TableCell className={classes.goodTable_Cell}>{this.getShiftNameAndTime(item._id.shiftType._id.shiftID)}</TableCell>\n                              <TableCell className={classes.goodTable_Cell}>\n                                  {item._id.realDate ? item._id.realDate.indexOf('T') !=-1 ? item._id.realDate.substring(0,item._id.realDate.indexOf('T') ) : item._id.realDate : \"Loading...\"}\n                              </TableCell>\n                              <TableCell className={classes.goodTable_Cell}>{item._id.employee._id.employeeID}</TableCell>\n                              <TableCell className={classes.goodTable_Cell}>{this.getEmployeeNameByID(item._id.employee._id.employeeID)}</TableCell>\n                              <TableCell className={classes.goodTable_Cell}>{item.alternativeEmployee._id.employeeID}</TableCell>\n                              <TableCell className={classes.goodTable_Cell} style={{\n                                backgroundColor: this.findEmployeeNameByID(item.alternativeEmployee._id.employeeID) ? '#fff' :'#ff6057' \n                              }}>{this.getEmployeeNameByID(item.alternativeEmployee._id.employeeID)}</TableCell>\n                              <TableCell width={60} className={classes.goodTable_Cell} >\n                                  <div style={{display: 'flex'}}>\n                                      <AiOutlineEdit size={20} \n                                        onClick={() =>\n                                          {\n                                            this.props.changeUpdateNextWeekTimeKeepingStatus();\n                                            this.props.changeUpdateNextWeekTimeKeepingValue(item);\n                                          }\n                                        }\n                                      />\n                                      <AiFillDelete size={20} \n                                          onClick={() => \n                                              {\n                                                  const data = {\n                                                      token: localStorage.getItem('token'),   \n                                                      offDay: {\n                                                          _id: item._id\n                                                      }\n                                                  }\n                                                  console.log(\"data.offDay._id\", data.offDay._id)\n                                                  axios.delete(`http://localhost:5000/api/employee/off-day`,{data: data})\n                                                    .then(res => {\n                                                        this.props.hideAlert();\n\t\t\t\t                                                this.props.showAlert(\"Delete absent day success\",\"success\");\n                                                    })\n                                                    .catch(err => {\n                                                      this.props.hideAlert();\n                                                      this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n                                                    })\n                                                  this.props.deleteNextWeekTimeKeeping(item);\n                                              }\n                                            // this.props.changeUpdateNextWeekTimeKeepingStatus();\n                                            \n                                            // this.props.changeUpdateNextWeekTimeKeepingValue(item);\n                                          }\n                                      />\n                                    </div>      \n                              </TableCell> \n                          </TableRow> \n                          )\n                        }\n                    </TableHead>\n                    \n                </Table>\n            </TableContainer>\n              \n            \n      </div>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    nextWeekTimeKeeping: state.nextWeekTimeKeeping,\n    listEmployee: state.listEmployee,\n    listShift: state.listShift,\n    infoUser: state.infoUser,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    changeAddNextWeekTimeKeepingStatus: () => {\n      dispatch({\n          type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\n      });\n    },\n    changeUpdateNextWeekTimeKeepingStatus: () => {\n      dispatch({\n          type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\n      });\n    },\n    changeUpdateNextWeekTimeKeepingValue: (data) => {\n      dispatch({\n        type: \"SET_UPDATE_NEXT_WEEK_TIMEKEEPER_VALUE\",\n        data: data\n      });\n    },\n    deleteNextWeekTimeKeeping: (data) => {\n      dispatch({\n        type: \"DELETE_NEXT_WEEK_TIMEKEEPER\",\n        data: data\n      });\n      console.log(\"data\", data)\n    },\n    getEmployeeDayOff: (data) => {\n      dispatch({\n        type: \"SET_NEXT_WEEK_TIMEKEEPER\",\n        data: data\n      });\n    },\n    showAlert: (message, typeMessage) => {\n      dispatch({\n        type: \"SHOW_ALERT\",\n        message: message,\n        typeMessage: typeMessage,\n      })\n    },\n    hideAlert: () => {\n      dispatch({\n        type: \"HIDE_ALERT\",\n      })\n    },\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(UnShiftEmployee));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateNextWeekTimeKeeping.js",["1149","1150","1151","1152","1153","1154","1155","1156","1157","1158","1159","1160","1161","1162","1163"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, \n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\n  var listDayInWeek = [\n    {ID:'Monday',name:'Monday'}, \n    {ID:'Tuesday',name:'Tuesday'}, \n    {ID:'Wednesday',name:'Wednesday'}, \n    {ID:'Thursday',name:'Thursday'}, \n    {ID:'Friday',name:'Friday'}, \n    {ID:'Saturday',name:'Saturday'}, \n    {ID:'Sunday',name:'Sunday'}\n];\n\nclass UpdateNextWeekTimeKeepingModal extends Component {\n\n    genID = 0;\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n            withdrawID: '',\n            alterID: '',\n            dayChosed: '',\n            shiftID: '',\n        };\n        this.loadInitialData();\n    }\n\n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    isGreater(dateString1, dateString2){\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\n    }\n\n    calculateDay(dateString1, dateString2)\n    {\n        return (\n            (new Date(dateString1)).setHours(0, 0, 0) \n                - \n            (new Date(dateString2)).setHours(0,0,0)\n            )\n            /(1000 * 60 * 60 * 24);\n    }\n\n    checkContraint() {\n        if(!this.isGreater(document.querySelector('input[name=\"realDate\"]').value, this.getCurrentDateTime() ))\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"The input day must be greater than today\",\"warning\"); \n            return false;\n        }\n        // Check thử ngày nhập nhỏ hơn ngày báo nghỉ bn ngày\n        if(this.props.regulation != {})\n        {\n            if(this.calculateDay(document.querySelector('input[name=\"realDate\"]').value, this.getCurrentDateTime() ) < \n            this.props.regulation.lessChangeTimeKeepingDay)\n            {\n                console.log(\"Tính ngày\",this.calculateDay(document.querySelector('input[name=\"realDate\"]').value, this.getCurrentDateTime()));\n                this.props.hideAlert();\n\t\t\t    this.props.showAlert(\"The input day must be greater than today at least \"+ this.props.regulation.lessChangeTimeKeepingDay+\" day(s)\",\"warning\");\n                return false;\n            }\n        }\n        return true;\n    }\n    async updateChange() {\n        if(this.checkContraint() == false) return;\n        // Xoá cái hiện tại đi cái đã\n        const data = {\n            token: localStorage.getItem('token'),   \n            offDay: {\n                _id: this.props.updateNextWeekTimeKeepingValue._id\n            }\n        }\n\n        await axios.delete(`http://localhost:5000/api/employee/off-day`,{data: data})\n          .then(res => {\n          })\n          .catch(err => {\n            this.props.hideAlert();\n            this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n          })\n        this.props.deleteNextWeekTimeKeeping(this.props.updateNextWeekTimeKeepingValue);\n        console.log(\"Xoá được rồi\");\n        const dataUpdate = {\n            token: localStorage.getItem('token'),\n            offDay: {\n                _id: {\n                    dateInWeek: this.currentdayChosed,\n                    storeID: this.props.infoUser.email,\n                    shiftType: {\n                        _id: {\n                            shiftID: this.currentShipChosed,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    employee: {\n                        _id: {\n                            employeeID: this.currentWidrawID,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\n                },\n                alternativeEmployee: {\n                    _id: {\n                        employeeID: this.currentAlterID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n            }    \n        };\n        console.log(\"dataUpdate\", dataUpdate);\n        await axios.post(`http://localhost:5000/api/employee/off-day`, dataUpdate)\n          .then(res => {\n                console.log(\"Save success\");\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Update absent day success\",\"success\");\n                this.props.addNewChange(dataUpdate.offDay);\n                console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\n        })\n        .catch(err => {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(err.response.data.message,\"warning\");\n            console.log(err);\n            if(err.response.data.message)\n            {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(err.response.data.message,\"warning\");\n            }\n            // Nếu lỗi thì thêm lại\n            this.props.addNewChange(this.props.updateNextWeekTimeKeepingValue);\n            axios.post(`http://localhost:5000/api/employee/off-day`, {\n                token: localStorage.getItem('token'),\n                offDay: this.props.updateNextWeekTimeKeepingValue,\n            })\n            .then(res => {\n                    this.props.hideAlert();\n\t\t\t\t    this.props.showAlert(\"Add current absent day success\",\"success\"); \n                })\n                .catch(err => {\n                    if(err.response.data.message)\n                    {\n                        this.props.hideAlert();\n\t\t\t\t        this.props.showAlert(err.response.data.message,\"warning\");\n                    }\n                    else {\n                        this.props.hideAlert();\n\t\t\t\t        this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n                    }\n                });\n        })\n        // var indexOfData = this.findIndexCurrentNextTimeKeepingInRedux(data._id)\n        // this.props.changeUpdateNextWeekTimeKeeping(data, indexOfData);\n\n        this.props.changeUpdateNextWeekTimeKeepingStatus();\n    }\n\n    findIndexCurrentNextTimeKeepingInRedux(id)\n    {\n        //Đụng đến nếu sửa bảng\n        var listToSearch = this.props.nextWeekTimeKeeping;\n        for(var i = 0 ; i < listToSearch.length ; i ++)\n        {\n            if(listToSearch[i]._id.dateInWeek == id.dateInWeek && \n                listToSearch[i]._id.shiftType._id.shiftID == id.shiftType._id.shiftID&& \n                listToSearch[i]._id.employee._id.employeeID == id.employee._id.employeeID)\n            {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    realDate = '';\n    currentdayChosed = '';\n    currentShipChosed = '';\n    currentWidrawID = '';\n    loadInitialData() {\n        var val = this.props.updateNextWeekTimeKeepingValue;\n        this.realDate = val._id.realDate;\n        if(this.realDate.indexOf('T')!=-1) this.realDate = this.realDate.substring(0, this.realDate.indexOf('T'));\n        this.currentdayChosed = val._id.dateInWeek;\n        this.currentShipChosed = val._id.shiftType._id.shiftID;\n        this.currentWidrawID = val._id.employee._id.employeeID;\n        this.currentAlterID = val.alternativeEmployee._id.employeeID;\n        this.setState({\n            change : !this.state.change,\n            shiftID: this.currentShipChosed,\n            dayChosed: this.currentdayChosed,\n            withdrawID: this.currentWidrawID,\n            alterID: this.currentAlterID,\n        });\n    }\n\n    getDayInWeek(date) {\n        const d = new Date(date);\n    \n        const weekday = new Array(7);\n        weekday[0] = \"Sunday\";\n        weekday[1] = \"Monday\";\n        weekday[2] = \"Tuesday\";\n        weekday[3] = \"Wednesday\";\n        weekday[4] = \"Thursday\";\n        weekday[5] = \"Friday\";\n        weekday[6] = \"Saturday\";\n    \n        return weekday[d.getDay()];\n    }\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} \n                    title=\"Update Offday\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            Real Date\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"date\" \n                                            name='realDate'\n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.realDate}\n                                            onChange={(event) => {\n                                                console.log(\"new Date\",event.target.value)\n                                                this.currentdayChosed = this.getDayInWeek(event.target.value);\n                                                this.setState({dayChosed: this.getDayInWeek(event.target.value)});\n                                            }}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Choose Day in week\n                                        </div>\n                                        <FormControl sx={{ minWidth: 120 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                value={this.currentdayChosed}\n                                                onChange={(event) => {\n                                                    this.currentdayChosed = event.target.value;\n                                                    this.setState({dayChosed: event.target.value});\n                                                }}\n                                                readOnly = {true}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    listDayInWeek.map((item) =>\n                                                        <MenuItem value={item.ID}>\n                                                            {item.name}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n\n                                    <Grid item md={8} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>\n                                            Choose Shift\n                                        </div>\n                                        <FormControl sx={{ minWidth: 220 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                value={this.currentShipChosed}\n                                                onChange={(event) => {\n                                                    this.currentShipChosed = event.target.value;\n                                                    this.setState({shiftID: event.target.value});\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\n                                                    : this.props.listShift.map((shift) =>\n                                                        <MenuItem value={shift._id.shiftID}>\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Widraw Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                value={this.currentWidrawID}\n                                                onChange={(event) => {\n                                                    this.currentWidrawID = event.target.value;\n                                                    this.setState({withdrawID: event.target.value});\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Alter Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                value={this.currentAlterID}\n                                                onChange={(event) => {\n                                                    this.currentAlterID = event.target.value;\n                                                    this.setState({alterID: event.target.value});\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        !(this.currentWidrawID == item._id.employeeID) ?\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                        : null\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={12}>\n                                        <Divider></Divider>\n                                    </Grid>\n                                    \n                                    <Grid item md={12}\n                                        className='input-item'\n                                        style={{display: 'flex', justifyContent: 'space-evenly'}}\n                                    >\n                                        <Button variant=\"contained\" style={{backgroundColor: 'red'}} onClick={() => this.props.changeUpdateNextWeekTimeKeepingStatus()}>\n                                            Cancel\n                                        </Button>\n                                        <Button variant=\"contained\" onClick={() => this.updateChange()}>\n                                            Add Change\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listShift: state.listShift,\n        listEmployee: state.listEmployee,\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\n        updateNextWeekTimeKeepingValue: state.updateNextWeekTimeKeepingValue,\n        regulation: state.regulationReducer,\n        statusDarkmode: state.statusDarkmode,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeUpdateNextWeekTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        addNewChange: (data) => {\n            dispatch({\n                type: \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\",\n                data: data,\n            });\n        },\n        \n        changeUpdateNextWeekTimeKeeping: (data, indexOfData) => {\n            dispatch({\n                type: \"UPDATE_NEXT_WEEK_TIMEKEEPER\",\n                data: data,\n                index: indexOfData,\n            });\n        },\n        deleteNextWeekTimeKeeping: (data) => {\n            dispatch({\n              type: \"DELETE_NEXT_WEEK_TIMEKEEPER\",\n              data: data\n            });\n            console.log(\"data\", data)\n          },\n          showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateNextWeekTimeKeepingModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddNextWeekTimeKeeping.js",["1164","1165","1166","1167","1168","1169","1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, \n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nvar listDayInWeek = [\n    {ID:'Monday',name:'Monday'}, \n    {ID:'Tuesday',name:'Tuesday'}, \n    {ID:'Wednesday',name:'Wednesday'}, \n    {ID:'Thursday',name:'Thursday'}, \n    {ID:'Friday',name:'Friday'}, \n    {ID:'Saturday',name:'Saturday'}, \n    {ID:'Sunday',name:'Sunday'}\n];\nclass AddNextWeekTimeKeepingModal extends Component {\n\n    genID = 0;\n    dayChosed = '';\n    constructor(props) {\n        super(props);\n        this.dayChosed = this.getDayInWeek(this.getCurrentDateTime());\n        this.state = {\n            change: false,\n            withdrawID: '',\n            alterID: '',\n            dayChosed: this.getDayInWeek(this.getCurrentDateTime()),\n            shiftID: '',\n        };\n        \n    }\n\n    cancel = () => {\n        this.props.changeAddNextWeekTimeKeepingStatus();\n    }\n\n    addEmployee = () => {\n        this.addEmployeeToDatabase();\n        this.props.changeAddEmployeeStatus();\n    }\n\n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    isGreater(dateString1, dateString2){\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\n    }\n\n    calculateDay(dateString1, dateString2)\n    {\n        return (\n            (new Date(dateString1)).setHours(0, 0, 0) \n                - \n            (new Date(dateString2)).setHours(0,0,0)\n            )\n            /(1000 * 60 * 60 * 24);\n    }\n\n    checkContraint() {\n        if(this.state.dayChosed.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"You haven't select the day of week\",\"warning\");\n            return false;\n        }\n        if(this.state.shiftID.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"You haven't select the shift\",\"warning\");\n            return false;\n        }\n        console.log(this.state.withdrawID );\n        if( this.state.withdrawID == undefined || this.state.withdrawID.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"You haven't select the absent employee\",\"warning\"); \n            return false;\n        }\n        if(this.state.alterID== undefined || this.state.alterID.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"You haven't select the ablternative employee\",\"warning\"); \n            return false;\n        }\n        if(!this.isGreater(document.querySelector('input[name=\"realDate\"]').value, this.getCurrentDateTime() ))\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"The input day must be greater than today\",\"warning\"); \n            return false;\n        }\n        // Check thử ngày nhập nhỏ hơn ngày báo nghỉ bn ngày\n        if(this.props.regulation != {})\n        {\n            if(this.calculateDay(document.querySelector('input[name=\"realDate\"]').value, this.getCurrentDateTime() ) < \n            this.props.regulation.lessChangeTimeKeepingDay)\n            {\n                console.log(\"Tính ngày\",this.calculateDay(document.querySelector('input[name=\"realDate\"]').value, this.getCurrentDateTime()));\n                this.props.hideAlert();\n\t\t\t    this.props.showAlert(\"The input day must be greater than today at least \"+ this.props.regulation.lessChangeTimeKeepingDay+\" day(s)\",\"warning\");\n                return false;\n            }\n        }\n        return true;\n    }\n    getDayInWeek(date) {\n        const d = new Date(date);\n    \n        const weekday = new Array(7);\n        weekday[0] = \"Sunday\";\n        weekday[1] = \"Monday\";\n        weekday[2] = \"Tuesday\";\n        weekday[3] = \"Wednesday\";\n        weekday[4] = \"Thursday\";\n        weekday[5] = \"Friday\";\n        weekday[6] = \"Saturday\";\n    \n        return weekday[d.getDay()];\n    }\n\n    async addChange() {\n        if(this.checkContraint()==false) return ;\n        const data1 = {\n            token: localStorage.getItem('token'),\n            offDay: {\n                _id: {\n                    dateInWeek: this.state.dayChosed,\n                    storeID: this.props.infoUser.email,\n                    shiftType: {\n                        _id: {\n                            shiftID: this.state.shiftID,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    employee: {\n                        _id: {\n                            employeeID: this.state.withdrawID,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\n                },\n                alternativeEmployee: {\n                    _id: {\n                        employeeID: this.state.alterID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n                \n            }\n        };\n        await axios.post(`http://localhost:5000/api/employee/off-day`, data1)\n          .then(res => {\n              console.log(\"Save success\");\n                this.props.hideAlert();\n                this.props.showAlert(\"Save absent day success\",\"success\");\n              const data = {\n                _id: {\n                    dateInWeek: this.state.dayChosed,\n                    storeID: this.props.infoUser.email,\n                    shiftType: {\n                        _id: {\n                            shiftID: this.state.shiftID,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    employee: {\n                        _id: {\n                            employeeID: this.state.withdrawID,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\n                },\n                alternativeEmployee: {\n                    _id: {\n                        employeeID: this.state.alterID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n                \n            };\n            \n            this.props.addNewChange(data);\n            console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\n            this.props.changeAddNextWeekTimeKeepingStatus();\n          })\n          .catch(err => {\n                // console.log(\"err.response.data.message\", err.response.data.message);\n                if(err.response.data.message)\n                {\n                    this.props.hideAlert();\n\t\t\t\t    this.props.showAlert(err.response.data.message,\"warning\");\n                }\n                else {\n                    this.props.hideAlert();\n\t\t\t\t    this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n                }\n                console.log(err);\n          })\n        \n        // console.log(this.props.nextWeekTimeKeeping)\n\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} \n                    title=\"Change Offday\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            Real Date\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"date\" \n                                            name='realDate'\n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.getCurrentDateTime()}\n                                            onChange={(event) => {\n                                                this.dayChosed = this.getDayInWeek(event.target.value);\n                                                this.setState({dayChosed: this.getDayInWeek(event.target.value)});\n                                            }}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Choose Day in week\n                                        </div>\n                                        <FormControl sx={{ minWidth: 120 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                value={this.dayChosed}\n                                                onChange={(event) => {\n                                                    this.dayChosed = event.target.value;\n                                                    this.setState({dayChosed: event.target.value});\n\n                                                }}\n                                                readOnly={true}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    listDayInWeek.map((item) =>\n                                                        <MenuItem value={item.ID}>\n                                                            {item.name}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n\n                                    <Grid item md={8} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>\n                                            Choose Shift\n                                        </div>\n                                        <FormControl sx={{ minWidth: 220 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({shiftID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\n                                                    : this.props.listShift.map((shift) =>\n                                                        <MenuItem value={shift._id.shiftID}>\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Widraw Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({withdrawID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        !(this.state.alterID == item._id.employeeID) ?\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                        : null\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Alter Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({alterID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        !(this.state.withdrawID == item._id.employeeID) ?\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                        : null\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={12}>\n                                        <Divider></Divider>\n                                    </Grid>\n                                    <Grid item md={12}\n                                        className='input-item'\n                                        \n                                        style={{display: 'flex', justifyContent: 'space-evenly'}}\n                                    >\n                                        <Button variant=\"contained\" style={{backgroundColor: 'red'}} onClick={() => this.props.changeAddNextWeekTimeKeepingStatus()}>\n                                            Cancel\n                                        </Button>\n                                        <Button variant=\"contained\" onClick={() => this.addChange()}>\n                                            Add Change\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listShift: state.listShift,\n        listEmployee: state.listEmployee,\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\n        regulation: state.regulationReducer,\n        statusDarkmode: state.statusDarkmode,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddNextWeekTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        addNewChange: (data) => {\n            dispatch({\n                type: \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\",\n                data: data,\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNextWeekTimeKeepingModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/FixedCalendar.js",["1181"],"import {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { withStyles } from '@material-ui/styles';\n// material\nimport { Paper, TableContainer, Table, TableHead, TableCell, TableRow, Button } from '@mui/material';\nimport FixedTableCell from './FixedCalendarCell';\n\n// ----------------------------------------------------------------------\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '80px',\n    } \n})\n\nclass FixedCalendar extends Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: 'false'\n    }\n    this.getAllShiftAssign();\n  }\n  async getAllShiftAssign()\n  {\n    var result = [];\n    const data = {\n      token: localStorage.getItem('token'),\n      filter: {\n          \"_id.storeID\": this.props.infoUser.email,\n      }   \n    }\n    await axios.get(`http://localhost:5000/api/employee/shift-assign`, {\n        params: {...data}\n    })\n        .then(res => {\n            result = res.data.data;\n            this.props.setShiftAssign(result);\n        })\n        .catch(err => {\n            console.log('bug when add shift-assign', err);\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n        })\n  }\n  \n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div style={{marginTop: 10, maxHeight: 600}}> \n          <TableContainer id=\"scroll-bar\" style={{overflowX: 'hidden'}} component={Paper}>\n              <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n                  <TableHead>\n                      <TableRow>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" width='12%'>\n                                Shift\n                            </TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" width='12%'>Mon</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" width='12%'>Tue</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" width='12%'>Wed</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" width='12%'>Thu</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" width='12%'>Fri</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" width='12%'>Sat</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" width='12%'>Sun</TableCell>\n                      </TableRow>\n                  </TableHead>\n                      {\n                          this.props.listShift.map((shift) => \n                          (\n                              <TableRow>\n                                  <TableCell className={classes.goodTable_Cell} width={100}>{shift.timeFrom + '-' + shift.timeEnd}</TableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Monday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Tuesday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Wednesday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Thursday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Friday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Saturday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Sunday'}></FixedTableCell>\n                              </TableRow>\n                          ))\n                      }\n              </Table>\n          </TableContainer>\n      </div>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        listShift: state.listShift,\n        infoUser: state.infoUser,\n        listShiftAssign: state.listShiftAssign,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n      setShiftAssign: (data) => {\n          dispatch({\n              type: \"SET_SHIFT_ASSIGN\",\n              data: data,\n          });\n      },\n      showAlert: (message, typeMessage) => {\n        dispatch({\n            type: \"SHOW_ALERT\",\n            message: message,\n            typeMessage: typeMessage,\n        })\n    },\n    hideAlert: () => {\n        dispatch({\n            type: \"HIDE_ALERT\",\n        })\n    },\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(FixedCalendar));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/PayMoneyModal.js",["1182","1183","1184","1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1212","1213","1214"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Table, Grid, TextField, \n    TableCell, TableContainer, Button, InputLabel,\n    Paper, TableRow, TableHead } from '@mui/material';\nimport { connect } from 'react-redux'\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\nimport EmployeeInformation from './EmployeeInformation';\nimport { GiConsoleController } from 'react-icons/gi';\n\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    } \n})\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\n\nclass PayEmployeeModal extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            goodID : \"\",\n            change: false,\n            imageSelect: \"null\",\n            type:'none',\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\n        }; \n        // console.log(\"listTimeKeeper\", this.props.listTimeKeeper);\n        // console.log(\"this.props.employeeID\", this.props.employeeID);\n        this.calculateTotalSalary();\n    }\n\n    getShiftInforByID(shiftID)\n    {\n        var listShift = this.props.listShift;\n        for(var i = 0 ; i < listShift.length; i++)\n        {\n            if(listShift[i]._id.shiftID == shiftID)\n            {\n                return listShift[i].name + ' (' + listShift[i].timeFrom + '-' + listShift[i].timeEnd + ')';\n            }\n        }\n        return \"Can't get shift\";\n    }\n\n    getEmployeeFullNameByID(employeeID)\n    {\n            for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n            {\n                var currentEmployee = this.props.listEmployee.employees[i];\n                if(currentEmployee._id.employeeID==employeeID)\n                {\n                        return currentEmployee.lastName + ' ' + currentEmployee.firstName;\n                }\n            }\n        return \"Can't get name\";\n    }\n\n    exit() {\n        this.props.changePayEmployeeStatus();  \n    }\n\n    payEmployee(){\n        // alert(\"Confirm password\");\n        // viết api để trả lương ở đây\n        // this.props.changePayEmployeeStatus();\n        try {\n            for(var i =0; i< this.props.listTimeKeeper.length; i++)\n            {\n                if(this.props.listTimeKeeper[i]._id.employee._id.employeeID != this.props.employeeID.id) continue;\n                // Thử api\n                const data = {\n                    token: localStorage.getItem('token'),\n                    updatedTimeKeeping: {\n                        _id: this.props.listTimeKeeper[i]._id,\n                        isPaidSalary: true,\n                    }\n                };\n                axios.put(`http://localhost:5000/api/employee/time-keeping`, data)\n                    .then(res => {\n                        console.log(\"Update success\");\n                    })\n                    .catch(err => {\n                        console.log(err);\n                    })\n            }\n            // Cập nhật redux khi update việc trả lương\n            this.props.paySalary(this.props.employeeID.id);\n            console.log(\"Đã gọi hàm cập nhập trạng thái\", this.props.employeeID.id)\n        }\n        catch(e)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            console.log(\"Lỗi trả lương\", e);\n        }\n        \n        // this.props.changePayEmployeeStatus();    \n        // Cập nhật redux trạng thái trả lương nhiều cái cùng lúc\n\n    }\n\n    findShift(shiftID) {\n        var shifts= this.props.listShift;\n          for(var i = 0 ; i < shifts.length ; i++)\n          {\n              if(shifts[i]._id.shiftID == shiftID)\n              {\n                  return true;\n              }\n          }\n          return false;\n    }\n\n    getShiftNameAndTime(shiftID)\n    {\n        var shifts= this.props.listShift;\n        for(var i = 0 ; i < shifts.length ; i++)\n        {\n            if(shifts[i]._id.shiftID == shiftID)\n            {\n                return shifts[i].name + ' (' + shifts[i].timeFrom + ' - ' + shifts[i].timeEnd +') ';\n            }\n        }\n        return \"Can't get shift\";\n    }\n\n    calculateTime(timeFrom, timeEnd)\n    {\n        var realTimeFrom, realTimeEnd;\n\n        realTimeFrom = parseInt(timeFrom.substring(0, timeFrom.indexOf(':')));\n        if(timeFrom.indexOf('PM')!=-1) realTimeFrom += 12;\n        var minuteFrom= parseInt(timeFrom.substring(timeFrom.indexOf(':')+1, timeFrom.indexOf(':') + 3));\n\n        realTimeEnd = parseInt(timeEnd.substring(0, timeEnd.indexOf(':')));\n        if(timeEnd.indexOf('PM')!=-1) realTimeEnd += 12;\n        var minuteEnd= parseInt(timeEnd.substring(timeEnd.indexOf(':')+1, timeEnd.indexOf(':') + 3));\n\n        var timeDiff = realTimeEnd - realTimeFrom;\n        \n        if(minuteEnd - minuteFrom < 0)\n        {\n            timeDiff --;\n            minuteEnd += 60;\n        }\n\n        return Math.round(timeDiff + (minuteEnd - minuteFrom) / 60.0);\n    }\n\n    calculateSalary(shiftType){\n        return shiftType.salary * (this.calculateTime(shiftType.timeFrom,shiftType.timeEnd));\n    }\n\n    getEmployeeNameByID(employeeID)\n    {\n        for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n        {\n            var currentEmployee = this.props.listEmployee.employees[i];\n            if(currentEmployee._id.employeeID==employeeID)\n            {\n                return currentEmployee.firstName;\n            }\n        }\n        return \"This employee was sacked\";\n    }\n    findEmployeeNameByID(employeeID)\n    {\n        for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n        {\n            var currentEmployee = this.props.listEmployee.employees[i];\n            if(currentEmployee._id.employeeID==employeeID)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    totalSalary = 0;\n\n    calculateTotalSalary() {\n        // this.props.listTimeKeeper;\n        var baseSalary = 0;\n        for(var i = 0; i < this.props.listTimeKeeper.length ; i++)\n        {\n            if(\n                this.props.listTimeKeeper[i]._id.employee._id.employeeID == this.props.employeeID.id &&\n                this.props.listTimeKeeper[i].isPaidSalary == false\n                )\n            {\n                console.log(\"Chấm công\", this.props.listTimeKeeper[i])\n                baseSalary += this.calculateSalary(this.props.listTimeKeeper[i]._id.shiftType);\n            }\n        }\n        this.totalSalary = baseSalary;\n        this.setState({change: !this.state.change});\n        console.log(\"this.totalSalary\",this.totalSalary);\n    }\n\n    toReadableDay(dayToConvert) {\n        var days = dayToConvert.split('-');\n        return days[2] + '/' + days[1] + '/'+ days[0];\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <form \n                style={{ zIndex: '10', width: '80%', height: 600,justifyContent: 'center', marginTop: '40px', overflow:'auto'}} \n                autoComplete=\"off\" noValidate id='scroll-bar'\n            >\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"PAY EMPLOYEE\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}>\n                            <Card>\n                                <Grid container md={12}>\n                                    <EmployeeInformation></EmployeeInformation>\n                                </Grid>\n                                <label\n                                    style={{margin: 18, marginBottom: 4, fontWeight: 700}}\n                                >\n                                    Timekeeping table\n                                </label>\n                                \n                                <Grid container md={12}>\n                                     <TableContainer \n                                        component={Paper}\n                                        style={{\n                                            marginLeft: 18,\n                                            marginRight: 18,\n                                            // Thay đổi chiều dài cột tại đây\n                                            maxHeight: 400,\n                                            overflow: 'auto',\n                                        }}\n                                        id=\"scroll-bar\"\n                                     >\n                                            \n                                            <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n                                                <TableHead>\n                                                    <TableRow>\n                                                        <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='240px'>Day</TableCell>\n                                                        <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='100px'>Weekday</TableCell>\n                                                        <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='240px'>Shift</TableCell>\n                                                        <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='140px'>Per Hour</TableCell>\n                                                        <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='140px'>Salary</TableCell>\n                                                        <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='120px'>Salary status</TableCell>\n                                                        {/* <TableCell className={classes.goodTable_Cell_Header} align=\"center\"></TableCell> */}\n                                                    </TableRow>\n                                                    {\n                                                        this.props.listTimeKeeper.map((timeKeeper)=>\n                                                        timeKeeper._id.employee._id.employeeID != this.props.employeeID.id ? (null) :\n                                                            (\n                                                            <TableRow>\n                                                                <TableCell className={classes.goodTable_Cell} align=\"center\">\n                                                                    {this.toReadableDay(timeKeeper._id.realDate.substring(0,timeKeeper._id.realDate.indexOf('T') ))}\n                                                                </TableCell>\n                                                                <TableCell className={classes.goodTable_Cell} align=\"center\">{timeKeeper._id.dateInWeek}</TableCell>\n                                                                <TableCell className={classes.goodTable_Cell}>\n                                                                    {timeKeeper._id.shiftType.name + \" (\"+ timeKeeper._id.shiftType.timeFrom + \n                                                                    ' - '+  timeKeeper._id.shiftType.timeEnd +')'}\n                                                                </TableCell>\n                                                                <TableCell className={classes.goodTable_Cell}>\n                                                                    <div style={{display: 'flex'}}>\n                                                                        {\n                                                                            Object.keys(this.props.regulation).length == 0 ?\n                                                                            <div style={{marginRight: 4}}>{timeKeeper._id.shiftType.salary}</div> :\n                                                                            this.props.regulation.currency == 'vnd' ?\n                                                                            <div style={{marginRight: 4}}>{timeKeeper._id.shiftType.salary}</div> :\n                                                                            <div style={{marginRight: 4}}>{(timeKeeper._id.shiftType.salary/this.props.regulation.exchangeRate).toFixed(2)}</div>\n                                                                        }\n                                                                        {\n                                                                            (Object.keys(this.props.regulation).length == 0)\n                                                                                ? <div>{' VNĐ'}</div> :\n                                                                            (this.props.regulation.currency == 'vnd' ? <div>{' VNĐ'}</div> : <div>{' $'}</div> )\n                                                                        }\n                                                                    </div>\n                                                                </TableCell>\n                                                                <TableCell className={classes.goodTable_Cell}>\n                                                                    {/* {this.calculateSalary(timeKeeper._id.shiftType)}\\ */}\n                                                                    <div style={{display: 'flex'}}>\n                                                                        {\n                                                                            Object.keys(this.props.regulation).length == 0 ?\n                                                                            <div style={{marginRight: 4}}>{this.calculateSalary(timeKeeper._id.shiftType)}</div> :\n                                                                            this.props.regulation.currency == 'vnd' ?\n                                                                            <div style={{marginRight: 4}}>{this.calculateSalary(timeKeeper._id.shiftType)}</div> :\n                                                                            <div style={{marginRight: 4}}>{(this.calculateSalary(timeKeeper._id.shiftType)/this.props.regulation.exchangeRate).toFixed(2)}</div>\n                                                                        }\n                                                                        {\n                                                                            (Object.keys(this.props.regulation).length == 0)\n                                                                                ? <div>{' VNĐ'}</div> :\n                                                                            (this.props.regulation.currency == 'vnd' ? <div>{' VNĐ'}</div> : <div>{' $'}</div> )\n                                                                        }\n                                                                    </div>\n                                                                    \n                                                                </TableCell>\n                                                                <TableCell className={classes.goodTable_Cell} align=\"center\">\n                                                                    {\n                                                                        timeKeeper.isPaidSalary== true ? \n                                                                        <div style={{backgroundColor:'#73b504', color:'#fff', borderRadius: 4, lineHeight: 2.2}}>\n                                                                            Payed\n                                                                        </div> : \n                                                                        <div style={{backgroundColor:'#ff2400', color:'#fff', borderRadius: 4, lineHeight: 2.2}}>\n                                                                            Not payed\n                                                                        </div>\n                                                                    }\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            )\n                                                        )\n                                                    }\n                                                </TableHead>\n                                            </Table>\n                                    </TableContainer>\n                                    <Grid item md={12} style={{marginTop: 4}}>\n                                        <div style={{display: 'flex', margin: '12px 18px'}}>\n                                            <lable style={{fontWeight: 700, marginRight: '14px'}}>\n                                                TotalSalary: \n                                            </lable>\n                                            {\n                                                Object.keys(this.props.regulation).length == 0 ?\n                                                <div style={{marginRight: 4}}>{this.totalSalary}</div> :\n                                                this.props.regulation.currency == 'vnd' ?\n                                                <div style={{marginRight: 4}}>{this.totalSalary}</div> :\n                                                <div style={{marginRight: 4}}>{(this.totalSalary/this.props.regulation.exchangeRate).toFixed(2)}</div>\n                                            }\n                                            {\n                                                (Object.keys(this.props.regulation).length == 0)\n                                                    ? <div>{' VNĐ'}</div> :\n                                                (this.props.regulation.currency == 'vnd' ? <div>{' VNĐ'}</div> : <div>{' $'}</div> )\n                                            }\n                                        </div>\n                                        \n                                        <Button style={{margin: '-38px 18px', float: 'right'}}variant=\"contained\" onClick={() => this.payEmployee()}>\n                                            Pay employee\n                                        </Button>\n                                    </Grid>\n                                    \n                                </Grid>\n                                <Grid container md={12}>\n                                    <label\n                                        style={{margin: 18, marginBottom: 4, fontWeight: 700}}\n                                    >\n                                        ChangeTimekeeping table\n                                    </label>\n                                    <TableContainer component={Paper} \n                                        style={{\n                                            margin: 18, \n                                            marginTop: 0,\n                                            // Thay đổi chiều dài cột tại đây\n                                            maxHeight: 400,\n                                            overflow: 'auto',\n                                        }}\n                                        id='scroll-bar' \n                                    >\n                                        <Table className={classes.goodTable} size=\"small\" aria-label=\"a dense table\">\n                                            <TableHead>\n                                                <TableRow>\n                                                    <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='80px'>Day</TableCell>\n                                                    <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">Shift</TableCell>\n                                                    <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">Real Date</TableCell>\n                                                    <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">ID</TableCell>\n                                                    <TableCell className={classes.goodTable_Cell_Header}style={{color: '#fff', backgroundColor: '#000'}} align=\"center\">Name</TableCell>\n                                                </TableRow>\n                                                {\n                                                this.props.nextWeekTimeKeeping.map((item) =>\n                                                // this.findEmployeeNameByID(item._id.employee._id.employeeID) == false \n                                                // || this.findEmployeeNameByID(item.alternativeEmployee._id.employeeID) == false\n                                                this.props.employeeID.id != item._id.employee._id.employeeID\n                                                || this.findShift(item._id.shiftType._id.shiftID) == false\n                                                ? (null) :\n                                                <TableRow\n                                                    style={{\n                                                        position: 'relative',\n                                                    }}\n                                                >\n                                                    <TableCell className={classes.goodTable_Cell}>{item._id.dateInWeek}</TableCell>\n                                                    <TableCell className={classes.goodTable_Cell}>{this.getShiftNameAndTime(item._id.shiftType._id.shiftID)}</TableCell>\n                                                    <TableCell className={classes.goodTable_Cell}>\n                                                        {item._id.realDate ? item._id.realDate.indexOf('T') !=-1 ? item._id.realDate.substring(0,item._id.realDate.indexOf('T') ) : item._id.realDate : \"Loading...\"}\n                                                    </TableCell>\n                                                    <TableCell className={classes.goodTable_Cell}>{item._id.employee._id.employeeID}</TableCell>\n                                                    <TableCell className={classes.goodTable_Cell}>{this.getEmployeeNameByID(item._id.employee._id.employeeID)}</TableCell>\n                                                </TableRow> \n                                                )\n                                                }\n                                            </TableHead>\n                                            \n                                        </Table>\n                                    </TableContainer>\n                                </Grid>\n                                <Grid container md={12}>\n                                    <Grid item md={10}>\n                                    </Grid>\n                                    <Grid item md={2}>\n                                        <Button style={{margin: '4px 18px',float: 'right', backgroundColor:\"#f00\"}} variant=\"contained\" onClick={() => this.exit()}>\n                                            Exit\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        listTimeKeeper: state.listTimeKeeping,\n        listShift: state.listShift,\n        listEmployee: state.listEmployee,\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\n        infoUser: state.infoUser,\n        employeeID: state.currentEmployeeViewValue,\n        regulation: state.regulationReducer,\n        statusDarkmode: state.statusDarkmode,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changePayEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\n            });\n        },\n        paySalary: (employeeID) => {\n            dispatch({\n                type: \"PAY_SALARY\",\n                employeeID: employeeID\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(PayEmployeeModal));\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateEmployeeModal.js",["1215","1216","1217","1218","1219","1220","1221","1222","1223","1224","1225","1226","1227","1228","1229","1230","1231","1232","1233","1234","1235"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nclass UpdateEmployeeModal extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n        }; \n        this.loadInitialData();\n    }\n    imgUrl = 'none';\n    finishUpImage = true;\n    \n    async profileImageChange(fileChangeEvent) {\n        this.setState({\n            imageSelect: fileChangeEvent.target.files[0],\n        })\n        this.finishUpImage = false;\n        const file = fileChangeEvent.target.files[0];\n        const { type } = file;\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\n        } else {\n            const formData = new FormData();\n            formData.append(\"file\", fileChangeEvent.target.files[0])\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\n            await axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\n                .then(res => {\n                    this.imgUrl=res.data.url;\n                    this.setState({\n                        change: 'true'\n                    });\n                })\n                .catch(err => {\n                    console.log(\"Thất bại\");\n                })\n        }\n        this.finishUpImage = true;\n    }\n\n\n    cancel = () => {\n        \n    }\n\n    findIndexInListEmployee(employeeID) {\n        for(var i = 0; i < this.props.listEmployee.employees.length ; i++)\n        {\n            if(this.props.listEmployee.employees[i]._id.employeeID == employeeID)\n            {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    checkConstraint() {\n        //Constraint 2: Password không được có dưới 6 ký tự\n        var password = document.querySelector('input[name=\"password\"]').value.trim();\n        if(password.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Password can't be left blanked\",\"warning\");\n            return false;\n        }\n        if(password.length < 6)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Password can't be less than 6 character\",\"warning\");\n            return false;\n        }\n        // Constraint 3: FirstName không được trống\n        var firstName =  document.querySelector('input[name=\"firstName\"]').value.trim();\n        if(firstName.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"The firstname can't be left blanked\",\"warning\");\n            return false;\n        }\n        // Constraint 4: lastName không được trống\n        var lastName =  document.querySelector('input[name=\"lastName\"]').value.trim();\n        if(lastName.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"The lastname can't be left blanked\",\"warning\");\n            return false;\n        }\n        // Constraint 5: Số ID card không được để trống\n        var cardID= document.querySelector('input[name=\"cardID\"]').value.trim();\n        if(cardID.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"ID card can't be left blanked\",\"warning\");\n            return false;\n        }\n        // Constrain 6:Số điện thoại không được để trống và phải lớn hơn 6 ký tự\n        var phoneNumber= document.querySelector('input[name=\"phoneNumber\"]').value;\n        if(phoneNumber.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Phonenumber can't be left blanked\",\"warning\");\n            return false;\n        }\n        if(phoneNumber.length < 6)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Phonenumber can't be less than 6 character\",\"warning\");\n            return false;\n        }\n        // Constrain 7:Địa chỉ không được để trống\n        var address = document.querySelector('input[name=\"adress\"]').value;\n        if(address.length==0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Address can't be left blanked\",\"warning\");\n            return false;\n        }\n        // Constraint 8: Ngày sinh không được để trống\n        var birthDay = document.querySelector('input[name=\"birthDay\"]').value;\n        if(birthDay.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Birthday can't be left blanked\",\"warning\");\n            return false;\n        }\n        // Constraint 9: Email không được để trống\n        var email = document.querySelector('input[name=\"email\"]').value.trim();\n        if(email.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Email can't be left blanked\",\"warning\");\n            return false;\n        }\n        if(email.indexOf('@')==-1 || email.indexOf('@')==email.length-1)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Email is invalid\",\"warning\");\n            return false;\n        }\n        // Constraint 10: Ngày sinh không thể lớn hơn ngày bất đầu làm\n        var startDate = document.querySelector('input[name=\"startDate\"]').value;\n        if(!this.isGreater(startDate, birthDay))\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Birthday can't be greater than the startday\",\"warning\");\n            return false;\n        }\n        // Constraint 11: Check đã up ảnh xong chưa\n        if(this.finishUpImage == false)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"The picture is not uploaded yet\",\"warning\");\n            return false;\n        }\n        // Constraint 12: Check tuổi với cái regulation:\n        if(this.props.regulation != {})\n        {\n            if(this.calculateOld(startDate, birthDay) < this.props.regulation.miniumEmployeeAge)\n            {\n                console.log(\"Tính tuổi\",this.calculateOld(startDate, birthDay));\n                this.props.hideAlert();\n\t\t\t    this.props.showAlert(\"Employee is not old enough (\"+ this.props.regulation.miniumEmployeeAge+\")\",\"warning\");\n                return false;\n            }\n        }\n        return true;\n    }\n\n    isGreater(dateString1, dateString2){\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\n    }\n\n    calculateOld(dateString1, dateString2)\n    {\n        return (new Date(dateString1).getYear() - new Date(dateString2).getYear());\n    }\n\n    async updateEmployee(){\n        if(this.checkConstraint() == false) return;\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: this.id,\n                    storeID: this.props.infoUser.email,\n                },\n                managerID: this.props.infoUser.email,\n                password: document.querySelector('input[name=\"password\"]').value,\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\n                email: document.querySelector('input[name=\"email\"]').value,\n                address: document.querySelector('input[name=\"adress\"]').value,\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\n                imgUrl: this.imgUrl,\n            }   \n        }\n        // console.log(\"index\", this.findIndexInListEmployee(this.id));\n        console.log(\"updateEmployee\", data);\n        await axios.put(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Update success\");\n                \n            })\n            .catch(err => {\n                console.log(err);\n                this.props.changeLoginStatus();\n                this.props.hideAlert();\n                this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n            })\n        this.props.updateEmployeeRedux(data.employee, this.findIndexInListEmployee(this.id))\n        this.props.changeUpdateEmployeeStatus();\n    }\n\n    id = \"\";\n    password = \"\";\n    firstName = \"\";\n    lastName = \"\";\n    cardID = \"\";\n    phoneNumber = \"\";\n    address = \"\";\n    email = \"\";\n    startDate = \"\";\n    birthDay = \"\";\n\n\n    loadInitialData() {\n        var currentEmployee = this.props.currentEditEmployee.state;\n        // console.log(\"currentEmployee\", currentEmployee);\n        this.id = currentEmployee._id.employeeID;\n        this.password = currentEmployee.password;\n        this.firstName = currentEmployee.firstName;\n        this.lastName = currentEmployee.lastName;\n        this.cardID = currentEmployee.cardID;\n        this.phoneNumber = currentEmployee.phoneNumber;\n        this.address = currentEmployee.address;\n        this.email = currentEmployee.email;\n        this.startDate = currentEmployee.startDate;\n        this.imgUrl = currentEmployee.imgUrl;\n        if(this.startDate!=null && this.startDate.indexOf('T')!=-1)\n        {\n            this.startDate = this.startDate.substring(0, this.startDate.indexOf('T'));\n        }\n        this.birthDay = currentEmployee.dateOfBirth;\n        if(this.birthDay!=null && this.birthDay.indexOf('T')!=-1)\n        {\n            this.birthDay = this.birthDay.substring(0, this.birthDay.indexOf('T'));\n        }\n        this.setState({change: !this.state.change})\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"UPDATE EMPLOYEE\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                marginTop: '0px'\n                            }}\n                        >   \n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            {/* Ẩn đi */}\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                        </Grid>\n                        <Grid item md={12}>\n\n                            <Card >\n                                \n                               <Grid container md={12} style={{marginRight: 4}}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            ID\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            value={this.id}\n                                            readOnly={true}\n                                            disabled={true}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>Password</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"password\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.password}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"firstName\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.firstName}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"lastName\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.lastName}\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"number\" \n                                            name=\"cardID\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.cardID}\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"number\" \n                                            name=\"phoneNumber\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.phoneNumber}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Adress</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"adress\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.address}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Start Date</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\"\n                                            name=\"startDate\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.startDate}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"email\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.email}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\" \n                                            // class=\"input-val\"\n                                            name=\"birthDay\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.birthDay}\n                                        />\n                                    </Grid>\n                                </Grid>\n                                <Grid item sm={12} md={12} >\n                                    <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                                        <Button style={{margin: 12}} variant=\"contained\" onClick={() => this.updateEmployee()}>\n                                            UPDATE\n                                        </Button>\n                                    </div>\n                                </Grid>\n                                \n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        currentEditEmployee: state.currentEditEmployee,\n        infoUser: state.infoUser,\n        listEmployee: state.listEmployee,\n        regulation: state.regulationReducer,\n        statusDarkmode: state.statusDarkmode,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\n            });\n        },\n        changeUpdateEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\n            });\n        },\n        updateEmployeeRedux: (data, index) => {\n            dispatch({\n                type: \"UPDATE_EMPLOYEE\",\n                data: data,\n                index: index,\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateEmployeeModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddEmployeeModal.js",["1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246","1247","1248","1249","1250","1251","1252","1253","1254","1255","1256","1257","1258","1259"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nvar listUsers = [];\n\nclass AddEmployeeModal extends Component {\n\n    genID = 0;\n    imgUrl = 'none';\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n        };\n        listUsers = [];\n        this.getAllEmployee(); \n    }\n\n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    async getAllEmployee () {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/employee/`, {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                // console.log(err);\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        listUsers = [];\n        for(var i = 0; i < result.length; i++)\n        {\n            listUsers.push(result[i]);\n        }\n        this.props.getEmployee(listUsers);\n        if(listUsers.length > 0)\n        {\n            this.genID = parseInt(listUsers[listUsers.length - 1]._id.employeeID) + 1;\n            console.log(this.genID);\n        }\n        this.setState({change: !this.state.change});\n    }\n\n    isGreater(dateString1, dateString2){\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\n    }\n\n    calculateOld(dateString1, dateString2)\n    {\n        return (new Date(dateString1).getYear() - new Date(dateString2).getYear());\n    }\n\n    finishUpImage = true;\n    async profileImageChange(fileChangeEvent) {\n        this.setState({\n            imageSelect: fileChangeEvent.target.files[0],\n        })\n        this.finishUpImage = false;\n        const file = fileChangeEvent.target.files[0];\n        const { type } = file;\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\n        } else {\n            const formData = new FormData();\n            formData.append(\"file\", fileChangeEvent.target.files[0])\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\n            await axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\n                .then(res => {\n                    this.imgUrl=res.data.url;\n                    this.setState({\n                        change: 'true'\n                    });\n                })\n                .catch(err => {\n                    console.log(\"Thất bại\");\n                })\n        }\n        this.finishUpImage = true;\n    }\n\n    checkConstraint() {\n        // Constraint 1: ID trống hoặc bị trùng\n        var id  = document.querySelector('input[name=\"ID\"]').value;\n        if( id.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Can't let the id blanked\",\"warning\");\n            return false;\n        }\n        for(var i = 0; i < this.props.listEmployee.employees.length ; i++)\n        {\n            if(this.props.listEmployee.employees[i]._id.employeeID == id)\n            {\n                this.props.hideAlert();\n\t\t\t    this.props.showAlert(\"ID duplicated\",\"warning\");\n                return false;\n            }\n        }\n        // Trùng ID sa thải\n        for(var i = 0; i < this.props.listSackedEmployee.employees.length ; i++)\n        {\n            if(this.props.listSackedEmployee.employees[i]._id.employeeID == id)\n            {\n                this.props.hideAlert();\n\t\t\t    this.props.showAlert(\"ID duplicated\",\"warning\");\n                return false;\n            }\n        }\n\n        //Constraint 2: Password không được có dưới 6 ký tự\n        var password = document.querySelector('input[name=\"password\"]').value.trim();\n        if(password.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Password can't be left blanked\",\"warning\");\n            return false;\n        }\n        if(password.length < 6)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Password can't be less than 6 character\",\"warning\");\n            return false;\n        }\n        // Constraint 3: FirstName không được trống\n        var firstName =  document.querySelector('input[name=\"firstName\"]').value.trim();\n        if(firstName.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"The firstname can't be left blanked\",\"warning\");\n            return false;\n        }\n        // Constraint 4: lastName không được trống\n        var lastName =  document.querySelector('input[name=\"lastName\"]').value.trim();\n        if(lastName.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"The lastname can't be left blanked\",\"warning\");\n            return false;\n        }\n        // Constraint 5: Số ID card không được để trống\n        var cardID= document.querySelector('input[name=\"cardID\"]').value.trim();\n        if(cardID.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"ID card can't be left blanked\",\"warning\");\n            return false;\n        }\n        // Constrain 6:Số điện thoại không được để trống và phải lớn hơn 6 ký tự\n        var phoneNumber= document.querySelector('input[name=\"phoneNumber\"]').value;\n        if(phoneNumber.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Phonenumber can't be left blanked\",\"warning\");\n            return false;\n        }\n        if(phoneNumber.length < 6)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Phonenumber can't be less than 6 character\",\"warning\");\n            return false;\n        }\n        // Constrain 7:Địa chỉ không được để trống\n        var address = document.querySelector('input[name=\"adress\"]').value;\n        if(address.length==0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Address can't be left blanked\",\"warning\");\n            return false;\n        }\n        // Constraint 8: Ngày sinh không được để trống\n        var birthDay = document.querySelector('input[name=\"birthDay\"]').value;\n        if(birthDay.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Birthday can't be left blanked\",\"warning\");\n            return false;\n        }\n        // Constraint 9: Email không được để trống\n        var email = document.querySelector('input[name=\"email\"]').value.trim();\n        if(email.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Email can't be left blanked\",\"warning\");\n            return false;\n        }\n        if(email.indexOf('@')==-1 || email.indexOf('@')==email.length-1)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Email is invalid\",\"warning\");\n            return false;\n        }\n        // Constraint 10: Ngày sinh không thể lớn hơn ngày bất đầu làm\n        var startDate = document.querySelector('input[name=\"startDate\"]').value;\n        if(!this.isGreater(startDate, birthDay))\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Birthday can't be greater than the startday\",\"warning\");\n            return false;\n        }\n        // Constraint 11: Check đã up ảnh xong chưa\n        if(this.finishUpImage == false)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"The picture is not uploaded yet\",\"warning\");\n            return false;\n        }\n        // Constraint 12: Check tuổi với cái regulation:\n        if(this.props.regulation != {})\n        {\n            if(this.calculateOld(startDate, birthDay) < this.props.regulation.miniumEmployeeAge)\n            {\n                console.log(\"Tính tuổi\",this.calculateOld(startDate, birthDay));\n                this.props.hideAlert();\n\t\t\t    this.props.showAlert(\"Employee is not old enough (\"+ this.props.regulation.miniumEmployeeAge+\")\",\"warning\");\n                return false;\n            }\n        }\n        return true;\n    }\n    // Thêm nhân viên\n    async addEmployeeToDatabase()\n    {\n        var isAddOK = true;\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: document.querySelector('input[name=\"ID\"]').value,\n                    storeID: this.props.infoUser.email,\n                },\n                managerID: this.props.infoUser.email,\n                password: document.querySelector('input[name=\"password\"]').value,\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\n                email: document.querySelector('input[name=\"email\"]').value,\n                address: document.querySelector('input[name=\"adress\"]').value,\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\n                // endDate: \"2021-11-31T00:00:00.000Z\",\n                imgUrl: this.imgUrl,\n            }   \n        }\n        console.log(data);\n        await axios.post(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Save success\");\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Add employee success\",\"success\");\n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(err.response.data.message,\"warning\");\n                isAddOK = false;\n            })\n        // Thêm vào redux\n        if(isAddOK)\n        {\n            this.props.addEmployee(data.employee);\n            this.props.changeAddEmployeeStatus();\n        }\n            \n        \n    }\n\n    cancel = () => {\n        this.props.changeAddEmployeeStatus();\n    }\n\n    addEmployee = () => {\n        if(this.checkConstraint()==false) return;\n        this.addEmployeeToDatabase();\n        \n    }\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"ADD EMPLOYEE\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                marginTop: '0px'\n                            }}\n                        >   \n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                        </Grid>\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            ID\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            name='ID'\n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"  \n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>Password</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"password\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"firstName\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"lastName\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"number\" \n                                            name=\"cardID\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"number\" \n                                            name=\"phoneNumber\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Adress</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"adress\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Start Date</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\"\n                                            name=\"startDate\"\n                                            defaultValue={this.getCurrentDateTime()}\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"email\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\" \n                                            // class=\"input-val\"\n                                            name=\"birthDay\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item sm={12} md={12} >\n                                        <div style={{display: 'flex', justifyContent: 'flex-end'}}>\n                                            <Button variant=\"contained\" style={{margin: 12}} onClick={() => this.addEmployee()}>\n                                                Add\n                                            </Button>\n                                        </div>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listEmployee: state.listEmployee,\n        listSackedEmployee: state.listSackedEmployee,\n        regulation: state.regulationReducer,\n        statusDarkmode: state.statusDarkmode,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        addEmployee: (data) => {\n            dispatch({\n                type: \"ADD_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEmployeeModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/OptionMonth.js",["1260"],"import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Grow from '@mui/material/Grow';\nimport Paper from '@mui/material/Paper';\nimport Popper from '@mui/material/Popper';\nimport MenuItem from '@mui/material/MenuItem';\nimport MenuList from '@mui/material/MenuList';\nimport { BiCaretDown } from 'react-icons/bi'\nimport { useDispatch } from 'react-redux';\n\nconst options = [\n    {\n        month: 'All',\n        value: 0,\n    },\n    {\n        month: 'Jan',\n        value: 1,\n    },\n    {\n        month: 'Feb',\n        value: 2,\n    },\n    {\n        month: 'Mar',\n        value: 3,\n    },\n    {\n        month: 'Apr',\n        value: 4,\n    },\n    {\n        month: 'May',\n        value: 5,\n    },\n    {\n        month: 'Jun',\n        value: 6,\n    },\n    {\n        month: 'Jul',\n        value: 7,\n    },\n    {\n        month: 'Aug',\n        value: 8,\n    },\n    {\n        month: 'Sep',\n        value: 9,\n    },\n    {\n        month: 'Oct',\n        value: 10,\n    },\n    {\n        month: 'Nov',\n        value: 11,\n    },\n    {\n        month: 'Dec',\n        value: 12,\n    }\n];\n\n\n\nexport default function OptionMonth() {\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n    const dispatch = useDispatch()\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\n\n    const handleClick = () => {\n        console.info(`You clicked ${options[selectedIndex]}`);\n    };\n\n    const handleMenuItemClick = (event, index, option) => {\n        dispatch({\n            type: \"MONTH_SELECT_DASHBOARD\",\n            typeDashboard: option,\n          })\n        setSelectedIndex(index);\n        setOpen(false);\n    };\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    React.useEffect(() => {\n        dispatch({\n            type: \"RESET_MONTH_SELECT_DASHBOARD\"\n        })\n    }, [])\n\n    return (\n        <React.Fragment>\n            <ButtonGroup variant=\"contained\" ref={anchorRef} aria-label=\"split button\">\n                <Button onClick={handleClick}>{options[selectedIndex].month}</Button>\n                <Button\n                    size=\"small\"\n                    aria-controls={open ? 'split-button-menu' : undefined}\n                    aria-expanded={open ? 'true' : undefined}\n                    aria-label=\"select merge strategy\"\n                    aria-haspopup=\"menu\"\n                    onClick={handleToggle}\n                >\n                    <BiCaretDown />\n                </Button>\n            </ButtonGroup>\n            <Popper\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                transition\n                disablePortal\n            >\n                {({ TransitionProps, placement }) => (\n                    <Grow\n                        {...TransitionProps}\n                        style={{\n                            transformOrigin:\n                                placement === 'bottom' ? 'center top' : 'center bottom',\n                        }}\n                    >\n                        <Paper>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <MenuList id=\"split-button-menu\">\n                                    {options.map((item, index) => (\n                                        <MenuItem\n                                            key={item.value}\n                                            selected={index === selectedIndex}\n                                            onClick={(event) => handleMenuItemClick(event, index, item.value)}\n                                        >\n                                            {item.month}\n                                        </MenuItem>\n                                    ))}\n                                </MenuList>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Grow>\n                )}\n            </Popper>\n        </React.Fragment>\n    );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/TableReciept.js",["1261","1262","1263"],"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Collapse from '@mui/material/Collapse';\nimport IconButton from '@mui/material/IconButton';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport { Grid, Box } from '@mui/material';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport { red } from '@mui/material/colors'\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FiEdit } from 'react-icons/fi'\nimport axios from 'axios';\n\n\nfunction Row(props) {\n    const { row } = props;\n    const [open, setOpen] = React.useState(false);\n    const dispatch = useDispatch();\n    const listReciept = useSelector(state => state.listReciept)\n    const infoUser = useSelector(state => state.infoUser)\n    const regulation = useSelector(state => state.regulationReducer)\n    const statusEditInfoBill = useSelector(state => state.statusEditInfoBill)\n    const editReciept = (MAHD, coupon) => {\n        if (coupon) {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: \"This bill has used to discount!\",\n                typeMessage: \"warning\"\n            })\n        } else {\n            let objectInfoBill = [];\n            listReciept.map(value => {\n                if (value.MAHD === MAHD) {\n                    objectInfoBill = value\n                }\n                return value;\n            })\n            if (!statusEditInfoBill) {\n                dispatch({\n                    type: \"INFO_SHOPPING_BAGS_EDIT\",\n                    listProduct: objectInfoBill.listProduct,\n                })\n                dispatch({\n                    type: \"ADD_INFO_BILL_EDIT\",\n                    InfoBill: objectInfoBill,\n                })\n                dispatch({\n                    type: \"CHANGE_EDIT_INFOMATION_STATUS\",\n                })\n                dispatch({\n                    type: \"CHANGE_HISTORY_RECIEPT_STATUS\"\n                })\n            } else {\n                dispatch({\n                    type: \"HIDE_ALERT\",\n                })\n                dispatch({\n                    type: \"SHOW_ALERT\",\n                    message: \"You are editing another bill!\",\n                    typeMessage: \"warning\"\n                })\n            }\n        }\n    }\n\n    const TypeReciept = (isEdit, isDelete) => {\n        if (isDelete) {\n            return red[400]\n        } else if (isEdit) {\n            return '#f4f492'\n        } else {\n            return '#a6ffa6'\n        }\n    }\n\n\n    const StatusTypeReciept = (isEdit, isDelete) => {\n        if (isDelete) {\n            return 'Deleted'\n        } else if (isEdit) {\n            return 'Exchange'\n        } else {\n            return 'Success'\n        }\n    }\n\n    const showEdit = (isEdit, isDelete) => {\n        if (isEdit || isDelete) {\n            return true;\n        }\n    }\n\n    const countQuantity = () => {\n        let count = 0;\n        row.listProduct.map(value => {\n            count += value.quantity;\n        })\n        return count;\n    }\n\n    return (\n        <React.Fragment>\n            <TableRow style={{ backgroundColor: TypeReciept(row.isEdit, row.deleted), borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: '#90a4ae #90a4ae transparent #90a4ae' }} sx={{ '& > *': { borderBottom: 'unset' } }}>\n                <TableCell>\n                    <IconButton\n                        aria-label=\"expand row\"\n                        size=\"small\"\n                        onClick={() => setOpen(!open)}\n                    >\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {row.MAHD}\n                </TableCell>\n                <TableCell align=\"right\">{row.date}</TableCell>\n                <TableCell align=\"right\">\n                    {regulation.currency === 'vnd' ? (row.totalMoney).toLocaleString() : ((row.totalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\n                </TableCell>\n                <TableCell align=\"right\">{row.discount}</TableCell>\n                <TableCell align=\"right\">\n                    {regulation.currency === 'vnd' ? (row.totalFinalMoney).toLocaleString() : ((row.totalFinalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\n                </TableCell>\n                <TableCell>\n                    {!showEdit(row.isEdit, row.deleted) ? (\n                        <IconButton onClick={() => editReciept(row.MAHD, row.coupon)} color=\"secondary\" aria-label=\"fingerprint\">\n                            <FiEdit />\n                        </IconButton>\n                    ) : null}\n                </TableCell>\n            </TableRow>\n            <TableRow style={{ borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: 'transparent #90a4ae #90a4ae #90a4ae' }}>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={12}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box sx={{ margin: 1 }}>\n                            <Typography style={{ fontWeight: '600' }} variant=\"h6\" gutterBottom component=\"div\">\n                                Detail Recipet\n                            </Typography>\n                            <Grid container spacing={3}>\n                                <Grid item lg={6} md={12} xs={12}>\n                                    <Table size=\"small\" aria-label=\"purchases\">\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell>#</TableCell>\n                                                <TableCell>Name</TableCell>\n                                                <TableCell>Quantity</TableCell>\n                                                <TableCell align=\"right\">Price</TableCell>\n                                                <TableCell align=\"right\">Total Price</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {row.listProduct.map((value, key) => (\n                                                <TableRow key={value.name}>\n                                                    <TableCell>\n                                                        {key + 1}\n                                                    </TableCell>\n                                                    <TableCell>{value.product.name}</TableCell>\n                                                    <TableCell>{value.quantity}</TableCell>\n                                                    <TableCell align=\"right\">\n                                                        {regulation.currency === 'vnd' ? (value.product.sellPrice).toLocaleString() : ((value.product.sellPrice) / regulation.exchangeRate).toFixed(2).toLocaleString()}\n                                                    </TableCell>\n                                                    <TableCell align=\"right\">\n                                                        {regulation.currency === 'vnd' ? (value.quantity * value.product.sellPrice).toLocaleString() : ((value.quantity * value.product.sellPrice) / regulation.exchangeRate).toFixed(2).toLocaleString()}\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </Grid>\n                                <Grid style={{ borderLeft: '1px solid black', marginTop: '15px' }} item lg={6} md={12} xs={12}>\n                                    <Grid container spacing={3}>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Id Receipt:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.MAHD}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Status:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{StatusTypeReciept(row.isEdit, row.isDelete)}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Date:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.date}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Time:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.time}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Old bill:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.oldBill ? row.oldBill.MAHD : \"None\"}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Seller:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.name}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Total quanitty:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{countQuantity()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Total money:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>\n                                                        {regulation.currency === 'vnd' ? (row.totalMoney).toLocaleString() : ((row.totalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\n                                                    </p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Coupon:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.coupon ? row.coupon.idCoupon : \"Not apply\"}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Reduce money:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>\n                                                        {regulation.currency === 'vnd' ? (row.totalFinalMoney - row.totalMoney).toLocaleString() : ((row.totalFinalMoney - row.totalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\n                                                    </p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Discount (%):</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.discount}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>TOTAL:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>\n                                                        {regulation.currency === 'vnd' ? (row.totalFinalMoney).toLocaleString() : ((row.totalFinalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\n                                                    </p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    );\n}\n\nRow.propTypes = {\n    row: PropTypes.shape({\n        calories: PropTypes.number.isRequired,\n        carbs: PropTypes.number.isRequired,\n        fat: PropTypes.number.isRequired,\n        history: PropTypes.arrayOf(\n            PropTypes.shape({\n                amount: PropTypes.number.isRequired,\n                customerId: PropTypes.string.isRequired,\n                date: PropTypes.string.isRequired,\n            }),\n        ).isRequired,\n        name: PropTypes.string.isRequired,\n        price: PropTypes.number.isRequired,\n        protein: PropTypes.number.isRequired,\n    }).isRequired,\n};\n\n\nexport default function CollapsibleTable() {\n\n    const listReciept = useSelector(state => state.listReciept)\n\n    return (\n        <TableContainer style={{ overflowX: 'hidden' }} component={Paper}>\n            <Table aria-label=\"collapsible table\">\n                <TableHead>\n                    <TableRow style={{ backgroundColor: 'black', color: 'white' }}>\n                        <TableCell />\n                        <TableCell >Id Receipt</TableCell>\n                        <TableCell align=\"right\">Date</TableCell>\n                        <TableCell align=\"right\">Total</TableCell>\n                        <TableCell align=\"right\">Discount</TableCell>\n                        <TableCell align=\"right\">Total final</TableCell>\n                        <TableCell />\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {listReciept ?\n                        listReciept.map((row) => (\n                            <Row key={row.MAHD} row={row} />\n                        )) : null\n                    }\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/ComponentToPrint.js",["1264","1265","1266","1267","1268","1269","1270","1271","1272","1273","1274"],"import React from 'react';\n\n\n\nclass ComponentToPrint extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            date: new Date(),\n        }\n    }\n\n    minute = 1000 * 60;\n    hour = this.minute * 60;\n    day = this.hour * 24;\n    year = this.day * 365;\n\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    totalMoney = () => {\n        let total = 0;\n        this.props.shoppingBags.map(value => {\n            total += value.quantity * value.product.sellPrice;\n        })\n\n        if (this.props.regulation.currency != 'vnd') {\n            total = (total / this.props.regulation.exchangeRate).toFixed(2)\n        }\n\n        return total.toLocaleString();\n    }\n\n    reduceTotalMoney = () => {\n        let total = 0;\n        this.props.shoppingBags.map(value => {\n            total += value.quantity * value.product.sellPrice;\n        })\n        if (total !== 0) {\n            total = total * this.props.percentDiscount / 100\n        }\n\n        if (this.props.regulation.currency != 'vnd') {\n            total = (total / this.props.regulation.exchangeRate).toFixed(2)\n        }\n\n        return total.toLocaleString()\n    }\n\n    finalTotalMoney = () => {\n        let total = 0;\n        this.props.shoppingBags.map(value => {\n            total += value.quantity * value.product.sellPrice;\n        })\n        if (total !== 0 && this.props.percentDiscount !== 0) {\n            total -= total * this.props.percentDiscount / 100\n        }\n        if (this.props.regulation.currency != 'vnd') {\n            total = (total / this.props.regulation.exchangeRate).toFixed(2)\n        }\n        return total.toLocaleString();\n    }\n\n    dateFunction = () => {\n        let month = this.state.date.getMonth() + 1;\n        return \"  \" + this.state.date.getDate() + \" / \" + month + \" / \" + this.state.date.getFullYear()\n    }\n\n    renderMoneyProduct= (value) => {\n        let Money = 0\n        if (this.props.regulation.currency != 'vnd') {\n            Money = (value.product.sellPrice / this.props.regulation.exchangeRate).toFixed(2)\n        } else {\n            Money = value.product.sellPrice\n        }\n        return Money\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1 style={{ textAlign: 'center' }}>{this.props.infoUser.storeName}</h1>\n                </div>\n                <div style={{ borderBottom: '1px solid #00000059' }} className=\"col-12\">\n                    <p style={{ textAlign: 'center', marginBottom: '0' }}>{this.props.infoUser.address}</p>\n                    <p style={{ textAlign: 'center' }}>{this.props.infoUser.district + ' ' + this.props.infoUser.province}</p>\n                    <p style={{ textAlign: 'center' }}>{\"SĐT: \" + this.props.infoUser.tel}</p>\n                </div>\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\n                    <h4 style={{ textAlign: 'center' }}>HÓA ĐƠN THANH TOÁN</h4>\n                </div>\n                <div className=\"col-12\">\n                    <p style={{ textAlign: 'center', fontWeight: '400' }}>Số HĐ: {this.props.MAHD}</p>\n                    <div style={{ margin: '0 5px' }} className=\"row\">\n                        <div className=\"col-6\">\n                            <p style={{ fontWeight: '700' }}>Date:\n                                <span style={{ fontWeight: '400' }}>\n                                    {this.dateFunction()}\n                                </span>\n                            </p>\n                        </div>\n                        <div className=\"col-6\">\n                            <p style={{ fontWeight: '700' }}>Time:\n                                <span style={{ fontWeight: '400' }}>\n                                    {\"  \" + this.state.date.getHours() + \":\" + this.state.date.getMinutes()}\n                                </span>\n                            </p>\n                        </div>\n                    </div>\n                    <p style={{ fontWeight: '700', margin: '0 17px' }}>\n                        Cashier:\n                        <span style={{ fontWeight: '400' }}>\n                            {\"  Admin\"}\n                        </span>\n                    </p>\n                </div>\n                <table style={{ margin: '0 10px' }} class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Name</th>\n                            <th scope=\"col\">Quantity</th>\n                            <th scope=\"col\">Price</th>\n                            <th scope=\"col\">Total money</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.shoppingBags ? this.props.shoppingBags.map((value, key) => (\n                            <tr>\n                                <td>{key + 1}</td>\n                                <td>{value.product.name}</td>\n                                <td>{value.quantity}</td>\n                                <td>\n                                    {this.renderMoneyProduct(value)}\n                                </td>\n                                <td>\n                                    {(this.props.regulation.currency != 'vnd') ? ((value.quantity * value.product.sellPrice) / this.props.regulation.exchangeRate).toFixed(2) : (value.quantity * value.product.sellPrice)}\n                                </td>\n                            </tr>\n                        ))\n                            : null}\n                    </tbody>\n                </table>\n                <div style={{ marginTop: '20px' }} className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-6\">\n                            <h6 style={{ textAlign: 'end' }}>Total :</h6>\n                        </div>\n                        <div className=\"col-6\">\n                            <h6 style={{ textAlign: 'start' }}>{this.totalMoney()} {(this.props.regulation.currency != 'vnd') ? '$' : 'VNĐ'}</h6>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-6\">\n                            <h6 style={{ textAlign: 'end' }}>Discount :</h6>\n                        </div>\n                        <div className=\"col-6\">\n                            <h6 style={{ textAlign: 'start' }}>-{this.reduceTotalMoney()} {(this.props.regulation.currency != 'vnd') ? '$' : 'VNĐ'}</h6>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-6\">\n                            <h5 style={{ textAlign: 'end' }}>TOTAL FINAL :</h5>\n                        </div>\n                        <div className=\"col-6\">\n                            <h5 style={{ textAlign: 'start' }}>\n                                {this.finalTotalMoney()} {(this.props.regulation.currency != 'vnd') ? '$' : 'VNĐ'}\n                            </h5>\n                        </div>\n                    </div>\n                </div>\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\n                    <h6 style={{ textAlign: 'center', fontStyle: 'italic ' }}>Xin cảm ơn quý khách</h6>\n                    <h6 style={{ textAlign: 'center', fontStyle: 'italic ' }}>hẹn gặp lại!</h6>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ComponentToPrint;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/OptionYear.js",["1275"],"import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Grow from '@mui/material/Grow';\nimport Paper from '@mui/material/Paper';\nimport Popper from '@mui/material/Popper';\nimport MenuItem from '@mui/material/MenuItem';\nimport MenuList from '@mui/material/MenuList';\nimport {BiCaretDown} from 'react-icons/bi'\nimport { useDispatch } from 'react-redux';\n\nlet options = [];\nlet date = new Date()\nfor(let i = date.getFullYear();i >= 2000; i--) {\n    options.push(i);\n}\n\nexport default function OptionYear() {\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const dispatch = useDispatch()\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\n\n  const handleClick = () => {\n    console.info(`You clicked ${options[selectedIndex]}`);\n  };\n\n  const handleMenuItemClick = (event, index, option) => {\n    console.log(option)\n    dispatch({\n      type: \"YEAR_SELECT_DASHBOARD\",\n      typeDashboard: option,\n    })\n    setSelectedIndex(index);\n    setOpen(false);\n  };\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  React.useEffect(() => {\n    dispatch({\n      type: \"RESET_MONTH_SELECT_DASHBOARD\"\n    })\n  }, [])\n\n  return (\n    <React.Fragment>\n      <ButtonGroup variant=\"contained\" ref={anchorRef} aria-label=\"split button\">\n        <Button onClick={handleClick}>{options[selectedIndex]}</Button>\n        <Button\n          size=\"small\"\n          aria-controls={open ? 'split-button-menu' : undefined}\n          aria-expanded={open ? 'true' : undefined}\n          aria-label=\"select merge strategy\"\n          aria-haspopup=\"menu\"\n          onClick={handleToggle}\n        >\n          <BiCaretDown />\n        </Button>\n      </ButtonGroup>\n      <Popper\n        id=\"choses-product\"\n        open={open}\n        style={{height: '500px', overflowY:'scroll'}}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n      >\n        {({ TransitionProps, placement }) => (\n          <Grow\n            {...TransitionProps}\n            style={{\n              transformOrigin:\n                placement === 'bottom' ? 'center top' : 'center bottom',\n            }}\n          >\n            <Paper>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList id=\"split-button-menu\">\n                  {options.map((option, index) => (\n                    <MenuItem\n                      key={option}\n                      selected={index === selectedIndex}\n                      onClick={(event) => handleMenuItemClick(event, index, option)}\n                    >\n                      {option}\n                    </MenuItem>\n                  ))}\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>\n        )}\n      </Popper>\n    </React.Fragment>\n  );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/GroupButton.js",["1276"],"import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Grow from '@mui/material/Grow';\nimport Paper from '@mui/material/Paper';\nimport Popper from '@mui/material/Popper';\nimport MenuItem from '@mui/material/MenuItem';\nimport MenuList from '@mui/material/MenuList';\nimport {BiCaretDown} from 'react-icons/bi'\nimport { useDispatch } from 'react-redux';\n\nconst options = ['Month', 'Week' , 'Last Week'];\n\nexport default function SplitButton() {\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const dispatch = useDispatch()\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\n\n  const handleClick = () => {\n    //console.info(`You clicked ${options[selectedIndex]}`);\n  };\n\n  const handleMenuItemClick = (event, index, option) => {\n    //console.log(option)\n    dispatch({\n      type: \"TYPE_TIME_DASHBOARD\",\n      typeDashboard: option,\n    })\n    setSelectedIndex(index);\n    setOpen(false);\n  };\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  React.useEffect(() => {\n    dispatch({\n      type: \"RESET_TYPE_TIME_DASHBOARD\"\n    })\n  }, [])\n\n  return (\n    <React.Fragment>\n      <ButtonGroup variant=\"contained\" ref={anchorRef} aria-label=\"split button\">\n        <Button onClick={handleClick}>{options[selectedIndex]}</Button>\n        <Button\n          size=\"small\"\n          aria-controls={open ? 'split-button-menu' : undefined}\n          aria-expanded={open ? 'true' : undefined}\n          aria-label=\"select merge strategy\"\n          aria-haspopup=\"menu\"\n          onClick={handleToggle}\n        >\n          <BiCaretDown />\n        </Button>\n      </ButtonGroup>\n      <Popper\n        open={open}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n      >\n        {({ TransitionProps, placement }) => (\n          <Grow\n            {...TransitionProps}\n            style={{\n              transformOrigin:\n                placement === 'bottom' ? 'center top' : 'center bottom',\n            }}\n          >\n            <Paper>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList id=\"split-button-menu\">\n                  {options.map((option, index) => (\n                    <MenuItem\n                      key={option}\n                      selected={index === selectedIndex}\n                      onClick={(event) => handleMenuItemClick(event, index, option)}\n                    >\n                      {option}\n                    </MenuItem>\n                  ))}\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>\n        )}\n      </Popper>\n    </React.Fragment>\n  );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/BaseOptionChart.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/DarkMode.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/fakeData.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeTableHeader.js",["1277","1278","1279","1280","1281","1282","1283","1284","1285","1286"],"import PropTypes from 'prop-types';\n// material\nimport { visuallyHidden } from '@mui/utils';\nimport { Box, Checkbox, TableRow, TableCell, TableHead, TableSortLabel } from '@mui/material';\nimport { withStyles } from '@material-ui/styles';\n// ----------------------------------------------------------------------\n\nEmployeeTableHeader.propTypes = {\n  order: PropTypes.oneOf(['asc', 'desc']),\n  orderBy: PropTypes.string,\n  rowCount: PropTypes.number,\n  headLabel: PropTypes.array,\n  numSelected: PropTypes.number,\n  onRequestSort: PropTypes.func,\n  onSelectAllClick: PropTypes.func\n};\n\nfunction EmployeeTableHeader( props){\n  const {\n    order,\n    orderBy,\n    rowCount,\n    headLabel,\n    numSelected,\n    onRequestSort,\n    onSelectAllClick} = props;\n  return (\n    <TableHead>\n      <TableRow>\n        {headLabel.map((headCell) => (\n          <TableCell>\n            <TableSortLabel\n              style={{\n                color: '#333'\n              }}\n            >\n              {headCell.label}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nexport default EmployeeTableHeader;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/FixedCalendarCell.js",["1287","1288","1289","1290","1291","1292","1293","1294","1295","1296","1297","1298","1299","1300"],"import {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { withStyles } from '@material-ui/styles';\n// material\nimport { TableCell, List, ListItem, ListItemButton, ListItemText} from '@mui/material';\nimport '../../css/EmployeeManager.css';\n\n//icon\nimport { IoIosAdd,} from \"react-icons/io\";\nimport {  AiFillCloseCircle} from \"react-icons/ai\";\n\n\nimport AddEmployeeToShift from './AddEmployeeToShift';\n// ----------------------------------------------------------------------\nconst styles = theme =>  ({\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '80px',\n    } \n})\n\nclass FixedCalendarCell extends Component {\n  isOpen=false;\n\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: false\n    }\n    \n  }\n\n \n\n  handleChange() {\n    this.isOpen = !this.isOpen;\n    this.setState({change : !this.state.change})\n  }\n\n  getEmployeeNameByID(employeeID)\n  {\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n      {\n          var currentEmployee = this.props.listEmployee.employees[i];\n          if(currentEmployee._id.employeeID==employeeID)\n          {\n            return currentEmployee.firstName;\n          }\n      }\n      return \"Can't get name\";\n  }\n\n  findEmployeeNameByID(employeeID)\n  {\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n      {\n          var currentEmployee = this.props.listEmployee.employees[i];\n          if(currentEmployee._id.employeeID==employeeID)\n          {\n            return true;\n          }\n      }\n      return false;\n  }\n\n  getCurrentDateTime()\n  {\n      var currentDate = new Date();\n      var day = (currentDate.toString().split(' '))[2];\n      if(day.length < 2)\n      {\n          day = '0' + day;\n      }\n      var month = (new Date().getMonth() + 1).toString();\n      if(month.length<2)\n      {\n          month = '0' + month;\n      }\n      return new Date().getFullYear() + '-' + month + '-' + day;\n  }\n\n  async addThisShiftAssign(employeeID)\n  {\n      const data = {\n          token: localStorage.getItem('token'),\n          shiftAssign: {\n            _id: {\n              dateInWeek: this.props.dayIndex,\n              storeID: this.props.infoUser.email,\n              shiftType: {\n                  _id: {\n                      shiftID: this.props.shiftID,\n                      storeID: this.props.infoUser.email,\n                  },\n              },\n              employee: {\n                  _id: {\n                      employeeID: employeeID,\n                      storeID: this.props.infoUser.email,\n                  },\n              },\n            },\n          }\n          \n      }\n      await axios.post(`http://localhost:5000/api/employee/shift-assign`, data)\n        .then(res => {\n            this.props.hideAlert();\n            this.props.showAlert(\"Save shift assign success\",\"success\");\n        })\n        .catch(err => {\n            this.props.hideAlert();\n            this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            console.log('bug when add shift-assign',err);\n        })\n      this.handleChange();\n      this.props.AddShiftAssign(data.shiftAssign);\n  }\n\n  sendShiftInfoToRedux(){\n     var shiftAssign = {\n        _id: {\n          dateInWeek: this.props.dayIndex,\n          storeID: this.props.infoUser.email,\n          shiftType: {\n              _id: {\n                  shiftID: this.props.shiftID,\n                  storeID: this.props.infoUser.email,\n              },\n          },\n        }\n     }\n     this.props.changeCurrentShiftValue(shiftAssign);\n  }\n\n  removeShift(employeeID)\n  {\n    const data1 = {\n        token: localStorage.getItem('token'),\n        shiftAssign: {\n          _id: {\n            dateInWeek: this.props.dayIndex,\n            storeID: this.props.infoUser.email,\n            shiftType: {\n                _id: {\n                    shiftID: this.props.shiftID,\n                    storeID: this.props.infoUser.email,\n                },\n            },\n            employee: {\n                _id: {\n                    employeeID: employeeID,\n                    storeID: this.props.infoUser.email,\n                },\n            },\n          }\n      },\n    }\n      axios.delete(`http://localhost:5000/api/employee/shift-assign`,{data: data1})\n      .then(res => {\n        this.props.hideAlert();\n        this.props.showAlert(\"Delete shift assign success\",\"success\");\n      })\n      .catch(err => {\n        this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n      })\n      const data = {\n          _id: {\n            dateInWeek: this.props.dayIndex,\n            storeID: this.props.infoUser.email,\n            shiftType: {\n                _id: {\n                    shiftID: this.props.shiftID,\n                    storeID: this.props.infoUser.email,\n                },\n            },\n            employee: {\n                _id: {\n                    employeeID: employeeID,\n                    storeID: this.props.infoUser.email,\n                },\n            },\n        },\n      }\n      \n      // console.log(\"data\", data);\n      this.props.RemoveShiftAssign(data);\n      \n  }\n\n  findShiftInShiftAssign()\n  {\n      var listShiftAssign = this.props.listShiftAssign;\n      for(var i = 0 ; i < listShiftAssign.length ; i++)\n      {\n          if(this.props.shiftID == listShiftAssign[i]._id.shiftType._id.shiftID && \n            this.props.dayIndex == listShiftAssign[i]._id.dateInWeek && \n            this.findEmployeeNameByID(listShiftAssign[i]._id.employee._id.employeeID))\n            { \n                return true;\n            }\n      }\n      return false;\n  }\n\n  findEmployeeInShift(employeeID)\n  {\n      var listShiftAssign = this.props.listShiftAssign;\n      for(var i = 0 ; i < listShiftAssign.length; i++)\n      {\n          if(this.props.shiftID == listShiftAssign[i]._id.shiftType._id.shiftID \n            && this.props.dayIndex == listShiftAssign[i]._id.dateInWeek\n            && listShiftAssign[i]._id.employee._id.employeeID == employeeID)\n          return true;\n      }\n      return false;\n  }\n  \n  render() {\n    const { classes } = this.props;\n    return (\n        <TableCell \n            id=\"scroll-bar\"\n            className={classes.goodTable_Cell} \n            style={{\n                position: 'relative',\n                backgroundColor: !this.findShiftInShiftAssign() ?'#ff6057': 'yellowgreen',\n                height: '80px',\n            }}\n            // ref={this.myRef}    \n        >\n            <div\n                style={{\n                    position: 'absolute',\n                    right: 0,\n                    top: 0,\n                    borderRadius: '50%',\n                    backgroundColor: '#fff',\n                    width: 22,\n                    height: 22,\n                    textAlign: 'center'\n                }}\n                className='add-employee-to-shift-button'\n            >\n                <IoIosAdd \n                    size={30}\n                    style={{\n                        position: 'absolute',\n                        right: -4,\n                        top: -3,\n                    }}\n                    color='#0096FF'\n                    onClick={() => { \n                        this.sendShiftInfoToRedux(); \n                        this.props.changeAddEmployeeToShiftStatus()\n                      }\n                    }\n                >    \n                </IoIosAdd>\n                \n            </div>\n            { \n              this.props.listShiftAssign.map((item) => \n                (\n                  ( this.props.shiftID == item._id.shiftType._id.shiftID \n                    && this.props.dayIndex == item._id.dateInWeek \n                    && this.findEmployeeNameByID(item._id.employee._id.employeeID))\n                  ? <div style={{\n                            backgroundColor: \"#fff\", \n                            padding: 10, \n                            width: '100%',\n                            position: 'relative',\n                            marginBottom: 4\n                            }}\n                    >\n                      <span>\n                          {item._id.employee._id.employeeID + ' - ' \n                          + this.getEmployeeNameByID(item._id.employee._id.employeeID)}\n                      </span>\n                      <AiFillCloseCircle\n                          style={{\n                            color: 'red',\n                            position: 'absolute',\n                            right: 0, \n                            top: 0,\n                          }} \n                          size={20}\n                          onClick={() => this.removeShift(item._id.employee._id.employeeID)}\n                      ></AiFillCloseCircle>\n                    </div>\n                  : null\n                )\n              )\n            }\n            {\n              // this.isOpen \n              // ? \n              // // Đây là cái bảng chọn nhân viên\n              // <List \n              //   style={{\n              //     position: 'absolute',\n              //     right: 0,\n              //     top: 20,\n              //     zIndex: 10,\n              //     maxHeight: 100,\n              //     overflowY: 'auto',\n              //     width: 140,\n              //     backgroundColor: '#fff',\n              //     width: 200\n              //   }}\n              //   id=\"scroll-bar\"\n              // >\n              //   {/* <div style={{height: 12, backgroundColor:'#333'}}></div> */}\n              //   {\n              //     this.props.listEmployee.employees.map((item) =>\n              //       this.findEmployeeInShift(item._id.employeeID) ? null :\n              //       <ListItem style={{display: 'flex', flexDirection: 'column'}} disablePadding height={30} onClick={() => this.addThisShiftAssign(item._id.employeeID)}>\n              //           <ListItemButton>\n              //               <ListItemText>\n              //                 <span style={{fontSize: 14}}>{item._id.employeeID + ' - ' + item.firstName}</span>\n                                \n              //               </ListItemText>\n              //           </ListItemButton>\n              //           <div style={{\n              //               height: 2,\n              //               width: '100%',\n              //               border: '1px solid #333'\n              //           }}></div>\n              //       </ListItem>\n              //     )\n              //   }\n              // </List>\n              // : null\n            }\n            {/* {this.props.statusAddEmployeeToShift\n            ? \n                <div \n                    className=\"modal-add\"\n                >\n                    <div onClick={() => {\n                          console.log(\"Đã được đóng\")\n                          this.props.changeAddEmployeeToShiftStatus();\n                      }} className=\"modal-overlay\"></div>\n                    <AddEmployeeToShift\n                        style={{\n                            marginTop: 0\n                        }}\n                    >\n                    </AddEmployeeToShift>\n                </div>\n            : null\n            } */}\n        </TableCell>\n        \n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        listEmployee: state.listEmployee,\n        listShiftAssign: state.listShiftAssign,\n        infoUser: state.infoUser,\n        statusAddEmployeeToShift: state.statusAddEmployeeToShift,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    AddShiftAssign: (data) => {\n      dispatch({\n          type: \"ADD_NEW_SHIFT_ASSIGN\",\n          data: data,\n      });\n    },\n    RemoveShiftAssign: (data) => {\n      dispatch({\n          type: \"DELETE_SHIFT_ASSIGN\",\n          data: data,\n      });\n    },\n    showAlert: (message, typeMessage) => {\n      dispatch({\n        type: \"SHOW_ALERT\",\n        message: message,\n        typeMessage: typeMessage,\n      })\n    },\n    hideAlert: () => {\n      dispatch({\n        type: \"HIDE_ALERT\",\n      })\n    },\n    changeAddEmployeeToShiftStatus: () => {\n      dispatch({\n          type: \"CHANGE_ADD_EMPLOYEE_TO_SHIFT_STATUS\",\n      });\n    },\n    changeCurrentShiftValue: (data) => {\n      dispatch({\n        type: \"SET_CURRENT_SHIFT_VALUE\",\n        data: data\n      });\n    }\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(FixedCalendarCell));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeInformation.js",["1301","1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314","1315","1316"],"import {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport { Card, CardHeader, Table, Grid, TextField, \n    TableCell, TableContainer, Button, InputLabel,\n    Paper, TableRow, TableHead } from '@mui/material';\nimport { Image } from 'cloudinary-react';\n\n\nclass EmployeeInformation extends Component {\n    constructor(props) {\n      super(props);\n      this.loadInitialData();\n    }\n\n    currentEmployee ;\n\n    loadInitialData() {\n        this.currentEmployee = this.getEmployeeInformationByID(this.props.employeeID.id);\n    }\n\n    getEmployeeInformationByID(employeeID)\n    {\n        for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n        {\n            var currentEmployee = this.props.listEmployee.employees[i];\n            if(currentEmployee._id.employeeID==employeeID)\n            {\n                console.log(\"currentEmployee\", currentEmployee)\n                return currentEmployee;\n            }\n        }\n        return {};\n    }\n\n    toReadableDay(dayToConvert) {\n        var days = dayToConvert.split('-');\n        return days[2] + '/' + days[1] + '/'+ days[0];\n    }\n\n    render() {\n      return (\n        <div>\n            <Grid container>\n                <Grid item xs={2} display={{\n                    display: 'flex',\n                    // alignItems: 'center',\n                    justifyContent: 'center',\n                    marginTop: 20\n                }}>\n                    {\n                        this.currentEmployee.imgUrl =='none' ? \n                        <div\n                            style={{\n                                backgroundImage: \"url('https://res.cloudinary.com/databaseimg/image/upload/v1638852707/pskte7yrug4ifktds96c.png'\",\n                                 width: '80%', height: 0, paddingTop: '80%', backgroundSize: 'cover'\n                            }} \n                        >\n                        </div>\n                        : \n                        <div \n                            style={{\n                                backgroundImage: \"url('\" + this.currentEmployee.imgUrl + \"')\",\n                                width: '80%', height: 0, paddingTop: '80%', backgroundSize: 'cover'\n                            }}\n                        > \n                        </div>\n                    }\n                </Grid>\n                <Grid item xs={8}>\n                    <Grid container style={{marginTop: 14}}>\n                        <Grid item xs={6} class=\"property-display\">\n                            <lable class=\"property-name\">\n                                ID:\n                            </lable>\n                            <div class=\"property-val\">\n                                {this.currentEmployee._id.employeeID}\n                            </div>\n                        </Grid>\n                        <Grid item xs={6} class=\"property-display\">\n                            <lable class=\"property-name\">\n                                Password:\n                            </lable>\n                            <div class=\"property-val\">\n                                {this.currentEmployee.password}\n                            </div>\n                        </Grid>\n                        <Grid item xs={6} class=\"property-display\">\n                            <lable class=\"property-name\">\n                                First Name:\n                            </lable>\n                            <div class=\"property-val\">\n                                {this.currentEmployee.firstName}\n                            </div>\n                        </Grid>\n                        <Grid item xs={6} class=\"property-display\">\n                            <lable class=\"property-name\">\n                                Last Name:\n                            </lable>\n                            <div class=\"property-val\">\n                                {this.currentEmployee.lastName}\n                            </div>\n                        </Grid>\n                        <Grid item xs={6} class=\"property-display\">\n                            <lable class=\"property-name\">\n                                CardID:\n                            </lable>\n                            <div class=\"property-val\">\n                                {this.currentEmployee.cardID}\n                            </div>\n                        </Grid>\n                        <Grid item xs={6} class=\"property-display\">\n                            <lable class=\"property-name\">\n                                Phone Number:\n                            </lable>\n                            <div class=\"property-val\">\n                                {this.currentEmployee.phoneNumber}\n                            </div>\n                        </Grid>\n                        <Grid item xs={6} class=\"property-display\">\n                            <lable class=\"property-name\">\n                                Address:\n                            </lable>\n                            <div class=\"property-val\">\n                                {this.currentEmployee.address}\n                            </div>\n                        </Grid>\n                        <Grid item xs={6} class=\"property-display\">\n                            <lable class=\"property-name\">\n                                StartDate:\n                            </lable>\n                            <div class=\"property-val\">\n                                {this.toReadableDay(this.currentEmployee.startDate.indexOf('T')!=-1 ? \n                                this.currentEmployee.startDate.substring(0, this.currentEmployee.startDate.indexOf('T')) :\n                                this.currentEmployee.startDate)\n                                }\n                            </div>\n                        </Grid>\n                        <Grid item xs={6} class=\"property-display\">\n                            <lable class=\"property-name\">\n                                Email:\n                            </lable>\n                            <div class=\"property-val\">\n                                {this.currentEmployee.email}\n                            </div>\n                        </Grid>\n                        <Grid item xs={6} class=\"property-display\">\n                            <lable class=\"property-name\">\n                                Birthday:\n                            </lable>\n                            <div class=\"property-val\">\n                                {this.toReadableDay(this.currentEmployee.dateOfBirth.indexOf('T')!=-1 ? \n                                this.currentEmployee.dateOfBirth.substring(0, this.currentEmployee.dateOfBirth.indexOf('T')) : \n                                this.currentEmployee.dateOfBirth)}\n                            </div>\n                        </Grid>\n                        \n                    </Grid>\n                </Grid>\n            </Grid>\n        </div>\n      );\n    }\n    \n  }\n  const mapStateToProps = (state, ownProps) => {\n    return {\n        listEmployee: state.listEmployee,\n        employeeID: state.currentEmployeeViewValue,\n    }\n  }\n  \n  const mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n       \n    }\n  }\n  export default connect(mapStateToProps, mapDispatchToProps)(EmployeeInformation);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/SackedEmployeeMenu.js",["1317","1318","1319","1320","1321","1322","1323"],"import { Icon } from '@iconify/react';\nimport editFill from '@iconify/icons-eva/edit-fill';\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\nimport {GiPayMoney} from \"react-icons/gi\";\nimport {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\n// material\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Modal} from '@mui/material';\n\n// ----------------------------------------------------------------------\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '1px solid #000',\n    borderRadius: '5px',\n    boxShadow: 24,\n    pt: 2,\n    px: 4,\n    pb: 3,\n  };\nclass EmployeeMoreMenu extends Component {\n  currentEmployee = {};\n\n\n    constructor(props) {\n        super(props);\n        this.state= {\n            change: 'false',\n            openModal: false\n        }\n        this.myRef = React.createRef();\n    }\n    setIsOpen(val) {\n        this.isOpen = val;\n        this.setState({change: val});\n        \n    }\n\n    getSackedEmployeeByID(employeeID) {\n        var listEmployee = this.props.listSackedEmployee.employees;\n        console.log(listEmployee);\n        for(var i = 0; i < listEmployee.length ; i++)\n        {\n          if(employeeID == listEmployee[i]._id.employeeID)\n          {\n            return listEmployee[i];\n          }\n        }\n    }\n\n    backToWork() {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee:\n            [\n                {\n                    employeeID: this.props.data,\n                    storeID: this.props.infoUser.email,\n                },\n            ]\n            \n        }\n        axios.patch(`http://localhost:5000/api/employee/delete`, data)\n            .then(res => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Employee has returned to work\",\"success\");\n            })\n            .catch(err => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n\n        // Xoá khỏi redux sacked\n        this.props.backToWorkSackedEmployee(this.props.data);\n\n        // Thêm vào redux ko sacked\n        this.props.addEmployee(this.getSackedEmployeeByID(this.props.data));\n    }\n\n    delete() {\n        this.handleClose();\n        this.setIsOpen(false);\n        const data = {\n        token: localStorage.getItem('token'),\n        employee:\n        [\n            {\n                employeeID: this.props.data,\n                storeID: this.props.infoUser.email, \n            },\n        ] \n        }\n        console.log(data);\n\n        axios.delete(`http://localhost:5000/api/employee/delete`,{data: data})\n            .then(res => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Delete permantly employee(s) success\",\"success\");\n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n\n        // To redux\n        var employeeID = this.props.data;\n        this.props.deletePermantlyEmployee(employeeID);\n    }\n\n    handleClose() {\n        this.setState({openModal: false});\n    }\n  \n    openModal() {\n        this.setState({openModal: true});\n    }\n\n    isOpen=false;\n    render() {\n        return (\n        <>\n            <IconButton ref={this.myRef} onClick={() => this.setIsOpen(true)}>\n            <Icon icon={moreVerticalFill} width={20} height={20} />\n            </IconButton>\n    \n            <Menu\n                style={{\n                    position: 'absolute',\n                    bottom: 0,\n                    left: 0,\n                }}\n                open={this.isOpen}\n                onClose={() => this.setIsOpen(false)}\n                anchorEl={this.myRef.current}\n                // PaperProps={{\n                //   sx: { width: 200, maxWidth: '100%' }\n                // }}\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n                transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            >\n                <MenuItem sx={{ color: 'text.secondary' }}\n                    onClick={() => this.openModal()}\n                >\n                    <ListItemIcon>\n                        <Icon icon={trash2Outline} width={24} height={24} />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\n                </MenuItem>\n                <MenuItem sx={{ color: 'text.secondary' }}\n                    onClick={() => this.backToWork()}\n                >\n                    <ListItemIcon>\n                    <Icon icon={editFill} width={24} height={24} />\n                    </ListItemIcon>\n                    <ListItemText primary=\"Return\" primaryTypographyProps={{ variant: 'body2' }} />\n                </MenuItem>\n            </Menu>\n        <Modal\n            open={this.state.openModal}\n            onClose={() => this.handleClose()}\n            aria-labelledby=\"parent-modal-title\"\n            aria-describedby=\"parent-modal-description\"\n        >\n            <Box sx={{ ...style, width: 400 }}>\n                <h2 style={{ textAlign: 'center' , fontSize: 20}} id=\"parent-modal-title\">Are you sure to delete?</h2>\n                <Grid container spacing={2}>\n                    <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\n                        <Button onClick={() => this.delete()} style={{ color: 'white', backgroundColor: '#f44336' }}>DELETE</Button>\n                    </Grid>\n                    <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\n                        <Button onClick={() => this.handleClose()} style={{ backgroundColor: '#ADD8E6' }}>CANCEL</Button>\n                    </Grid>\n                </Grid>\n            </Box>\n        </Modal>\n        </>\n        );\n    }\n    \n    }\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\n        payEmployeeStatus: state.payEmployeeStatus,\n        listEmployee: state.listEmployee,\n        infoUser: state.infoUser,\n        listSackedEmployee: state.listSackedEmployee,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        backToWorkSackedEmployee: (id) => {\n            dispatch({\n                type: \"RETURN_TO_WORK\",\n                id: id\n            });\n        },\n        addEmployee: (data) => {\n            dispatch({\n                type: \"ADD_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        deletePermantlyEmployee: (employeeID) => {\n            dispatch({\n                type: \"DELETE_PERMANTLY_EMPLOYEE\",\n                employeeID: employeeID,\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeToolbar.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/SearchNotFound.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Label.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Page.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Scrollbar.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/ConfirmModal.js",["1324","1325","1326","1327","1328","1329"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport axios from 'axios';\n\nclass ConfirmModal extends Component {\n    constructor(props) {\n        super(props);\n    }\n    confirm = () => {\n        // Thực hiện các lệnh xử lý tại đây\n        this.props.changeConfirmStatus();\n        this.props.setConfirm();\n    }\n\n    cancel = () => {\n        this.props.changeConfirmStatus();\n        this.props.setQuit();\n    }\n\n    getMessage = ()  => {\n        var message = \"Cái này chưa code\";\n        switch(this.props.confirmCode)\n        {\n            case 'confirm-delete-good':\n                message = \"Are you sure to delete this product ?\";\n            case 'confirm-import-good':\n                message = \"Are you sure to import this product ?\";\n        }\n        return (\n            <div>\n                {message}\n            </div>\n        );\n    }\n    render() {\n        console.log(this.props.objectEditShift);\n        return (\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <Grid item md={12} xs={12}>\n                                {this.getMessage()}\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <Stack spacing={3}>\n                                   \n                                </Stack>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.confirm()} variant=\"contained\" startIcon={<BiPlusMedical />}>\n                            Xác nhận\n                        </Button>\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\n                            Hủy\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        confirmStatus: state.confirmStatus,\n        deleteStatus: state.deleteStatus,\n        confirmCode: state.confirmCode,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        setConfirm: () => {\n            dispatch({\n                type: \"CONFIRM\",\n            });\n        },\n        setQuit: () => {\n            dispatch({\n                type: \"QUIT\",\n            });\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmModal);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/EditTypeModal.js",["1330","1331","1332","1333","1334","1335"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Modal } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit} from 'react-icons/bi';\nimport { TiDelete } from \"react-icons/ti\";\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport axios from 'axios';\nimport TypeInfo from './TypeInfo';\nclass EditTypeModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            change: false,\n        }\n    }\n    confirm = () => {\n        // Thực hiện các lệnh xử lý tại đây\n        this.props.changeConfirmStatus();\n    }\n    cancel = () => {\n        // this.props.changeConfirmStatus();\n        this.props.changeEditTypeStatus();\n    }\n    \n\n    render() {\n        return (\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"All Good Type\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <Grid container item md={12} xs={12} spacing={0}>\n                                { this.props.typeProduct.map((type) => (\n                                    <TypeInfo type={type}></TypeInfo>\n                                ))}\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <Stack spacing={3}>\n                                   \n                                </Stack>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\n                            Thoát\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        editTypeStatus: state.editTypeStatus,\n        addTypeStatus: state.addTypeStatus,\n        isAddTypeStatus: state.isAddTypeStatus,\n        infoUser: state.infoUser,\n        typeProductValue: state.typeProductValue,\n        typeProduct: state.typeProduct,\n        statusDarkmode: state.statusDarkmode,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeEditTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\n            });\n        },\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        setEditTypeStatus: () => {\n            dispatch({\n                type: \"SET_EDIT_TYPE_STATUS\",\n            })\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        typeToUpdate: (data) => {\n            dispatch({\n                type: \"UPDATE_PRODUCT_TYPE\",\n                _id: {\n                    typeID: data._id.typeID,\n                    storeID: data._id.storeID,\n                },\n                name: data.name\n            })\n        },\n        changeStatusUpdateType: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_TYPE_STATUS\",\n            }); \n        },\n        deleteTypeFromRedux: (data) => {\n            dispatch({\n                type: \"DELETE_TYPE\",\n                data: data\n            });\n            \n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTypeModal);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/AddTypeModal.js",["1336","1337","1338","1339","1340","1341"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Alert } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel, GiVampireCape } from 'react-icons/gi'\nimport axios from 'axios';\n\nvar listTypeInfor = [];\n\n\n\nclass AddTypeModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state= {\n            change: 'false'\n        }\n        // this.getAllTypeList();\n        listTypeInfor = this.props.typeProduct;\n    }\n    storeID = \"\";\n    typeList = [];\n\n    addType = () => {\n        if(this.checkConstraint(this.typeName)==false)  return;\n        var genTypeID = 0;\n        if(listTypeInfor.length>0)\n        {\n            genTypeID = parseInt(listTypeInfor[listTypeInfor.length-1]._id.typeID) + 1;\n        } \n        const data = {\n            token: localStorage.getItem('token'),\n            productType: {\n                _id:{\n                    typeID: genTypeID,\n                    storeID: this.props.infoUser.email,\n                },\n                name: this.typeName,\n            }    \n        }\n        axios.post(`http://localhost:5000/api/product/type`, data)\n            .then(res => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Save product type success\",\"success\");\n                //TODO: Cập nhật token ở đây nữa\n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Add type failed\",\"warning\");\n            })\n        this.props.addTypeToReducer(data.productType);\n        this.props.changeAddTypeStatus();\n    }\n    \n    checkConstraint(typeName) {\n        console.log(\"check name\", typeName);\n        //Constraint 1: Check name\n        for(var i=0;i<listTypeInfor.length;i++)\n        {\n            if(listTypeInfor[i].name==typeName)\n            {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Duplicate type name\",\"warning\");\n                return false;\n            }\n        }        \n        // Constraint 2: Not blank\n        if(typeName.length==0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Type name can't be left blanked\",\"warning\");\n            return false;\n        }\n        return true;\n\n    }\n    cancel = () => {\n        this.props.changeAddTypeStatus();\n    }\n\n    handle = () => {\n        this.addType();\n    }\n    typeName = \"\";\n\n    changeTypeName(e)\n    {\n        this.typeName = e.target.value;\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '11', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader \n                        style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} \n                        title={\"Add Type\"}\n                        />\n                    <Divider />\n                    <CardContent>\n                        <Grid \n                            container \n                            spacing={2}\n                            justifyContent={'center'}\n                            alignItems={'center'}\n                        >\n                            <Grid item md={2} xs={12}>\n                                TypeName\n                            </Grid>\n                            <Grid item md={10} xs={12}>\n                                <TextField\n                                    id=\"outlined-basic\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    required\n                                    type=\"text\"\n                                    name=\"typeName\"\n                                    defaultValue={this.typeName}\n                                    onChange={(e) => this.changeTypeName(e)}\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <Stack spacing={3}>\n                                   \n                                </Stack>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        <Button \n                            style={{ backgroundColor: 'yellowgreen' }} \n                            onClick={() => this.handle()}\n                            variant=\"contained\" \n                            startIcon={<BiPlusMedical />}\n                        >\n                            Add type\n                        </Button>\n                        <Button \n                            style={{ backgroundColor: 'red' }} \n                            // onClick={() => this.editShift()}\n                            onClick={() => this.cancel()}\n                            variant=\"contained\" \n                            startIcon={<GiCancel />}\n                        >\n                            Cancel\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        infoUser: state.infoUser,\n        typeProductValue: state.typeProductValue,\n        typeProduct: state.typeProduct,\n        statusDarkmode: state.statusDarkmode,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeEditTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\n            });\n        },\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        addTypeToReducer: (data) => {\n            dispatch({\n                type: \"ADD_TYPE\",\n                data: data,\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTypeModal);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/SearchBar.js",["1342","1343","1344","1345"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Input from \"@material-ui/core/Input\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { MdClear} from \"react-icons/md\";\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport { withStyles } from '@material-ui/styles';\nimport classNames from \"classnames\";\n\nconst styles = theme => ({\n  root: {\n    // height: theme.spacing(6),\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    height: \"80px\",\n  },\n//   iconButton: {\n//     color: theme.palette.action.active,\n//     transform: \"scale(1, 1)\",\n//     transition: theme.transitions.create([\"transform\", \"color\"], {\n//       duration: theme.transitions.duration.shorter,\n//       easing: theme.transitions.easing.easeInOut,\n//     }),\n//   },\n  iconButtonHidden: {\n    transform: \"scale(0, 0)\",\n    \"& > $icon\": {\n      opacity: 0,\n    },\n  },\n  searchIconButton: {\n    // marginRight: theme.spacing(-6),\n  },\n//   icon: {\n//     transition: theme.transitions.create([\"opacity\"], {\n//       duration: theme.transitions.duration.shorter,\n//       easing: theme.transitions.easing.easeInOut,\n//     }),\n//   },\n  input: {\n    width: \"100%\",\n  },\n  searchContainer: {\n    margin: \"4px 8px 4px 8px\",\n    height: \"40px\",\n    // width: `calc(100% - ${theme.spacing(6 + 4)}px)`, // 6 button + 4 margin\n  },\n});\nconst SearchBar = React.forwardRef(\n  (\n    {\n      cancelOnEscape,\n      className,\n      classes,\n      closeIcon,\n      disabled,\n      onCancelSearch,\n      onRequestSearch,\n      searchIcon,\n      style,\n      ...inputProps\n    },\n    ref\n  ) => {\n    const inputRef = React.useRef();\n    const [value, setValue] = React.useState(inputProps.value);\n\n    React.useEffect(() => {\n      setValue(inputProps.value);\n    }, [inputProps.value]);\n\n    const handleFocus = React.useCallback(\n      (e) => {\n        if (inputProps.onFocus) {\n          inputProps.onFocus(e);\n        }\n      },\n      [inputProps.onFocus]\n    );\n\n    const handleBlur = React.useCallback(\n      (e) => {\n        setValue((v) => v.trim());\n        if (inputProps.onBlur) {\n          inputProps.onBlur(e);\n        }\n      },\n      [inputProps.onBlur]\n    );\n\n    const handleInput = React.useCallback(\n      (e) => {\n        setValue(e.target.value);\n        if (inputProps.onChange) {\n          inputProps.onChange(e.target.value);\n        }\n      },\n      [inputProps.onChange]\n    );\n\n    const handleCancel = React.useCallback(() => {\n      setValue(\"\");\n      if (onCancelSearch) {\n        onCancelSearch();\n      }\n    }, [onCancelSearch]);\n\n    const handleRequestSearch = React.useCallback(() => {\n      if (onRequestSearch) {\n        onRequestSearch(value);\n      }\n    }, [onRequestSearch, value]);\n\n    const handleKeyUp = React.useCallback(\n      (e) => {\n        if (e.charCode === 13 || e.key === \"Enter\") {\n          handleRequestSearch();\n        } else if (\n          cancelOnEscape &&\n          (e.charCode === 27 || e.key === \"Escape\")\n        ) {\n          handleCancel();\n        }\n        if (inputProps.onKeyUp) {\n          inputProps.onKeyUp(e);\n        }\n      },\n      [handleRequestSearch, cancelOnEscape, handleCancel, inputProps.onKeyUp]\n    );\n\n    React.useImperativeHandle(ref, () => ({\n      focus: () => {\n        inputRef.current.focus();\n      },\n      blur: () => {\n        inputRef.current.blur();\n      },\n    }));\n\n    return (\n      <Paper className={classNames(classes.root, className)} style={{height: '40px'}}>\n        <div className={classes.searchContainer}>\n          <Input\n            {...inputProps}\n            inputRef={inputRef}\n            onBlur={handleBlur}\n            value={value}\n            onChange={handleInput}\n            onKeyUp={handleKeyUp}\n            onFocus={handleFocus}\n            fullWidth\n            className={classes.input}\n            disableUnderline\n            disabled={disabled}\n          />\n        </div>\n        <IconButton\n          onClick={handleRequestSearch}\n          className={classNames(classes.iconButton, classes.searchIconButton, {\n            [classes.iconButtonHidden]: value !== \"\",\n          })}\n          disabled={disabled}\n        >\n          {React.cloneElement(searchIcon, {\n            classes: { root: classes.icon },\n          })}\n        </IconButton>\n        <IconButton\n          onClick={handleCancel}\n          className={classNames(classes.iconButton, {\n            [classes.iconButtonHidden]: value === \"\",\n          })}\n          disabled={disabled}\n        >\n          {React.cloneElement(closeIcon, {\n            classes: { root: classes.icon },\n          })}\n        </IconButton>\n      </Paper>\n    );\n  }\n);\n\nSearchBar.defaultProps = {\n  className: \"\",\n  closeIcon: <MdClear/>,\n  disabled: false,\n  placeholder: \"Search\",\n  searchIcon: <AiOutlineSearch />,\n  style: null,\n  value: \"\",\n};\n\nSearchBar.propTypes = {\n  cancelOnEscape: PropTypes.bool,\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  closeIcon: PropTypes.node,\n  disabled: PropTypes.bool,\n  onCancelSearch: PropTypes.func,\n  onChange: PropTypes.func,\n  onRequestSearch: PropTypes.func,\n  placeholder: PropTypes.string,\n  searchIcon: PropTypes.node,\n  style: PropTypes.object,\n  value: PropTypes.string,\n};\n\nexport default withStyles(styles)(SearchBar);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeMoreMenu.js",["1346","1347","1348","1349","1350","1351","1352"],"import { Icon } from '@iconify/react';\nimport editFill from '@iconify/icons-eva/edit-fill';\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\nimport {GiPayMoney} from \"react-icons/gi\";\nimport {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Modal} from '@mui/material';\n// material\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\n\n// ----------------------------------------------------------------------\nconst style = {\n  position: 'absolute',\n  top: '50%',\n  left: '50%',\n  transform: 'translate(-50%, -50%)',\n  width: 400,\n  bgcolor: 'background.paper',\n  border: '1px solid #000',\n  borderRadius: '5px',\n  boxShadow: 24,\n  pt: 2,\n  px: 4,\n  pb: 3,\n};\nclass EmployeeMoreMenu extends Component {\n  currentEmployee = {};\n\n\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: false,\n      openModal: false,\n    }\n    this.myRef = React.createRef();\n    this.getEmployeeByID(this.props.data);\n  }\n  setIsOpen(val) {\n    this.isOpen = val;\n    this.setState({change: val});\n    \n  }\n\n  edit() {\n    this.setIsOpen(false);\n    this.getEmployeeByID(this.props.data);\n    // console.log(\"send nude\", this.currentEmployee);\n    this.props.setUpdateEmployee(this.currentEmployee);\n    this.props.changeUpdateEmployeeStatus();\n  }\n\n  delete() {\n    this.setIsOpen(false);\n    this.handleClose();\n    const data = {\n      token: localStorage.getItem('token'),\n      employee:\n      [\n          {\n              employeeID: this.props.data,\n              storeID: this.props.infoUser.email, \n          },\n      ] \n    }\n    console.log(data);\n\n    axios.delete(`http://localhost:5000/api/employee`,{data: data})\n        .then(res => {\n            this.props.hideAlert();\n\t\t\t\t    this.props.showAlert(\"Delete employee(s) success\",\"success\");\n        })\n        .catch(err => {\n          this.props.hideAlert();\n          this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n        })\n    \n    //Move to sacked\n    this.props.deleteEmployeeToSackRedux(this.currentEmployee)\n    // Delete redux\n    this.props.deleteEmployeeRedux(this.props.data);\n\n    // Xoá hết shiftAssign\n    for(var i = 0; i < this.props.listShiftAssign.length; i++)\n    {\n        if(this.props.listShiftAssign[i]._id.employee._id.employeeID == this.props.data) \n        {\n          const data1 = {\n            token: localStorage.getItem('token'),\n            shiftAssign: {...this.props.listShiftAssign[i]}\n          }\n          console.log(\"data1\", data1)\n          axios.delete(`http://localhost:5000/api/employee/shift-assign`,{data: data1})\n          .then(res => {\n              // Xoá đi trong redux\n              this.props.RemoveShiftAssign(data1.shiftAssign);\n          })\n          .catch(err => {\n            this.props.hideAlert();\n            this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n          })\n        }\n        \n    }\n\n  }\n\n  getEmployeeByID(employeeID) {\n    var listEmployee = this.props.listEmployee.employees;\n    console.log(listEmployee);\n    for(var i = 0; i < listEmployee.length ; i++)\n    {\n      if(employeeID == listEmployee[i]._id.employeeID)\n      {\n        this.currentEmployee = listEmployee[i];\n        return listEmployee[i];\n      }\n    }\n  }\n\n  viewEmployee()\n  {\n      console.log(\"this.props.data\", this.props.data)\n      this.props.setIDView(this.props.data);\n      this.props.changePayEmployeeStatus();\n      this.setIsOpen(false);\n  }\n\n  isOpen=false;\n\n  handleClose() {\n      this.setState({openModal: false});\n  }\n\n  openModal() {\n      this.setState({openModal: true});\n  }\n  render() {\n    return (\n      <>\n        <IconButton ref={this.myRef} onClick={() => this.setIsOpen(true)}>\n          <Icon icon={moreVerticalFill} width={20} height={20} />\n        </IconButton>\n  \n        <Menu\n          style={{\n            position: 'absolute',\n            bottom: 0,\n            left: 0,\n          }}\n          open={this.isOpen}\n          onClose={() => this.setIsOpen(false)}\n          anchorEl={this.myRef.current}\n          // PaperProps={{\n          //   sx: { width: 200, maxWidth: '100%' }\n          // }}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        >\n          <MenuItem sx={{ color: 'text.secondary' }}\n            onClick={() => this.openModal()}\n          >\n            <ListItemIcon>\n              <Icon icon={trash2Outline} width={24} height={24} />\n            </ListItemIcon>\n            <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\n          </MenuItem>\n  \n          <MenuItem sx={{ color: 'text.secondary' }}\n            onClick={() => this.edit()}\n          >\n            <ListItemIcon>\n              <Icon icon={editFill} width={24} height={24} />\n            </ListItemIcon>\n            <ListItemText primary=\"Edit\" primaryTypographyProps={{ variant: 'body2' }} />\n          </MenuItem>\n          <MenuItem sx={{ color: 'text.secondary' }}\n            onClick={()=> this.viewEmployee()}\n          >\n            <ListItemIcon>\n              <GiPayMoney size={24}/> \n            </ListItemIcon>\n            <ListItemText primary=\"Pay money\" primaryTypographyProps={{ variant: 'body2' }} />\n          </MenuItem>\n        </Menu>\n        <Modal\n            open={this.state.openModal}\n            onClose={() => this.handleClose()}\n            aria-labelledby=\"parent-modal-title\"\n            aria-describedby=\"parent-modal-description\"\n        >\n            <Box sx={{ ...style, width: 400 }}>\n                <h2 style={{ textAlign: 'center' , fontSize: 20}} id=\"parent-modal-title\">Are you sure to delete?</h2>\n                <Grid container spacing={2}>\n                    <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\n                        <Button onClick={() => this.delete()} style={{ color: 'white', backgroundColor: '#f44336' }}>DELETE</Button>\n                    </Grid>\n                    <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\n                        <Button onClick={() => this.handleClose()} style={{ backgroundColor: '#ADD8E6' }}>CANCEL</Button>\n                    </Grid>\n                </Grid>\n            </Box>\n        </Modal>\n      </>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    updateEmployeeStatus: state.updateEmpoyeeStatus,\n    payEmployeeStatus: state.payEmployeeStatus,\n    listEmployee: state.listEmployee,\n    infoUser: state.infoUser,\n    listShiftAssign: state.listShiftAssign,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n      changeUpdateEmployeeStatus: () => {\n          dispatch({\n              type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\n          });\n      },\n      changePayEmployeeStatus: () => {\n        dispatch({\n            type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\n        });\n      },\n      setUpdateEmployee: (currentEmployee) => {\n        dispatch({\n          type: \"SET_UPDATE_EMPLOYEE\",\n          data: currentEmployee\n        });\n      }, \n      deleteEmployeeRedux: (id) => {\n        dispatch({\n          type: \"DELETE_EMPLOYEE\",\n          id: id\n        });\n      },\n      deleteEmployeeToSackRedux: (data) => {\n        dispatch({\n          type: \"DELETE_EMPLOYEE_SACKED\",\n          data: data\n        });\n      },\n      setIDView: (id) => {\n        dispatch({\n          type: \"SET_ID_EMPLOYEE\",\n          id: id\n        });\n      },\n      RemoveShiftAssign: (data) => {\n        dispatch({\n            type: \"DELETE_SHIFT_ASSIGN\",\n            data: data,\n        });\n      },\n      showAlert: (message, typeMessage) => {\n        dispatch({\n          type: \"SHOW_ALERT\",\n          message: message,\n          typeMessage: typeMessage,\n        })\n      },\n      hideAlert: () => {\n        dispatch({\n          type: \"HIDE_ALERT\",\n        })\n      },\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/UpdateTypeModal.js",["1353","1354","1355","1356","1357","1358","1359","1360","1361"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Alert } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel, GiVampireCape } from 'react-icons/gi'\nimport axios from 'axios';\n\nvar listTypeInfor = [];\n\nclass UpdateTypeModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state= {\n            change: 'false'\n        }\n        this.loadInitialData();\n        this.getAllTypeList();\n    }\n    storeID = \"\";\n    typeList = [];\n\n    async getAllTypeList(){\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        console.log(data.token);\n        console.log(data.filter);\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        //Get data và lưu các tên Type vào bảng\n        for(var i=0; i < result.length ; i++)\n        {\n            listTypeInfor.push(result[i]);\n        }\n    }\n    addType = () => {\n        var newTypeName = document.querySelector('input[name=\"typeName\"]').value.trim();\n        if(this.checkConstraint(newTypeName)==false)  return;\n        var genTypeID = 0;\n        if(listTypeInfor.length>0)\n        {\n            genTypeID = parseInt(listTypeInfor[listTypeInfor.length-1]._id.typeID) + 1;\n        } \n        const data = {\n            token: localStorage.getItem('token'),\n            productType: {\n                _id:{\n                    typeID: genTypeID,\n                    storeID: this.props.infoUser.email,\n                },\n                name: newTypeName,\n            }    \n        }\n        axios.post(`http://localhost:5000/api/product/type`, data)\n            .then(res => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Save product type success\",\"success\");\n                //TODO: Cập nhật token ở đây nữa\n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        this.props.changeAddTypeStatus();\n    }\n    \n    checkConstraint(typeName) {\n        //Constraint 1: Check name\n        for(var i=0;i<listTypeInfor.length;i++)\n        {\n            if(listTypeInfor[i].name==typeName)\n            {\n                if(typeName.trim()==this.props.typeProductValue.name)\n                {\n                    this.props.hideAlert();\n\t\t\t\t    this.props.showAlert(\"You must change your name before saving\",\"success\");\n                    return false;\n                }\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Duplicate type name\",\"success\");\n                return false;\n            }\n            \n        }        \n        // Constraint 2: Not blank\n        if(typeName.length==0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Type name can't be left blanked\",\"warning\");\n            return false;\n        }\n        return true;\n\n    }\n    cancel = () => {\n        this.props.changeStatusUpdateType();\n    }\n\n    handle = () => {\n        this.editType();\n    }\n\n    editType = () => {\n        var newTypeName = this.typeName;\n        if(this.checkConstraint(newTypeName)==false) return;\n        const data = {\n            token: localStorage.getItem('token'),\n            productType: {\n                _id: {\n                    typeID: this.props.typeProductValue._id.typeID,\n                    storeID: this.props.infoUser.email,\n                }, \n                name: newTypeName,\n            }\n        }\n        axios.put(`http://localhost:5000/api/product/type`, data)\n            .then(res => {\n                // Có khi mình sẽ cập nhật type ở dây\n                console.log(\"Update success\");\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Update typename success\",\"success\");\n            })\n            .catch(err => {\n                console.log(err);\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happended, restart and try again\",\"warning\");\n            })\n        this.props.changeStatusUpdateType();\n        this.props.updateNameToRedux(data.productType);\n        // this.loadAllGood();\n        // console.log(\"Cập nhập redux nào mấy anh\")\n        // this.props.updateNameToProductRedux(data.productType);\n        // this.props.changeEditTypeStatus();\n    }\n\n    getTypeNamebyTypeID (typeID) {\n        var typeName=\"Null\";\n        console.log(\"typeList\", this.props.typeProduct);\n        for(var i = 0; i < this.props.typeProduct.length;i++)\n        {   \n            if(this.props.typeProduct[i]._id.typeID == typeID)\n            {\n                typeName = this.props.typeProduct[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    async loadAllGood() {\n        var resultProduct = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }\n        }\n        await axios.get(`http://localhost:5000/api/product/`, {\n            params: { ...data }\n        })\n            .then(res => {\n                resultProduct = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        // Get hết từ cái productjoinType\n        var result = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, {\n            params: { ...data1 }\n        })\n            .then(res => {\n                result = res.data.data;\n                localStorage.getItem('token', res.data.token);\n            })\n            .catch(err => {\n                console.log(err);\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        // Lấy các cái jointype\n        var joinTypeInfor = [];\n        for (let i = 0; i < result.length; i++) {\n            joinTypeInfor.push(result[i]);\n        }\n        // console.log(\"joinTypeInfor\", joinTypeInfor);\n\n        var listProductInfor = [];\n        for (let i = 0; i < resultProduct.length; i++) {\n            var typeIDList = [];\n            var joinType = '';\n            for (var j = 0; j < joinTypeInfor.length; j++) {\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) \n                {\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\n                    joinType = joinType + ' ' + this.getTypeNamebyTypeID(joinTypeInfor[j]._id.typeID);\n                }\n            }\n\n            listProductInfor.push(\n                {\n                    ...resultProduct[i],\n                    typeIDList: typeIDList,\n                    joinType: joinType\n                });\n        }\n        this.props.getProductToReducer(listProductInfor);\n    }\n\n    typeName = \"\";\n    loadInitialData = () => {\n        this.typeName = this.props.typeProductValue.name;\n        this.setState({change: true});\n    }\n\n    changeTypeName(e)\n    {\n        this.typeName = e.target.value;\n    }\n    render() {\n        return (\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader \n                        style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} \n                        title={\"Update Type\"}\n                        />\n                    <Divider />\n                    <CardContent>\n                        <Grid \n                            container \n                            spacing={2}\n                            justifyContent={'center'}\n                            alignItems={'center'}\n                        >\n                            <Grid item md={2} xs={12}>\n                                TypeName\n                            </Grid>\n                            <Grid item md={10} xs={12}>\n                                <TextField\n                                    id=\"outlined-basic\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    required\n                                    type=\"text\"\n                                    name=\"typeName\"\n                                    defaultValue={this.typeName}\n                                    onChange={(e) => this.changeTypeName(e)}\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <Stack spacing={3}>\n                                   \n                                </Stack>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        <Button \n                            style={{ backgroundColor: 'yellowgreen' }} \n                            // onClick={() => this.addShift()} \n                            onClick={() => this.handle()}\n                            variant=\"contained\" \n                            startIcon={<BiPlusMedical />}\n                        >\n                            Xác nhận\n                        </Button>\n                        <Button \n                            style={{ backgroundColor: 'red' }} \n                            // onClick={() => this.editShift()}\n                            onClick={() => this.cancel()}\n                            variant=\"contained\" \n                            startIcon={<GiCancel />}\n                        >\n                            Cancel\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        typeProduct: state.typeProduct,\n        infoUser: state.infoUser,\n        typeProductValue: state.typeProductValue,\n        statusDarkmode: state.statusDarkmode,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeEditTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\n            });\n        },\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        addTypeToReducer: (data) => {\n            dispatch({\n                type: \"ADD_TYPE\",\n                data: data,\n            });\n        },\n         changeStatusUpdateType: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_TYPE_STATUS\",\n            }); \n        },\n        updateNameToRedux: (data) => {\n            dispatch({\n                type: \"UPDATE_TYPE\",\n                data: data,\n            });\n        },\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateTypeModal);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/AddGoodModal.js",["1362","1363","1364","1365","1366","1367","1368","1369","1370","1371","1372","1373","1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388"],"import React, { Component } from 'react';\nimport { TextField } from '@mui/material';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport { InputLabel, Button, Modal, Grid, Card, CardHeader, Divider, CardContent} from '@mui/material';\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { connect } from 'react-redux';\nimport GoodImage from '../../img/good-example.jpg';\nimport AddTypeModal from './AddTypeModal';\nimport { withStyles } from '@material-ui/styles';\nimport { AiFillPlusCircle} from \"react-icons/ai\";\nimport DateTimePicker from '@mui/lab/DateTimePicker';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport ConfirmModal from './ConfirmModal';\nimport { GiConsoleController } from 'react-icons/gi';\nimport {\n    Link\n} from \"react-router-dom\";\n\n// Use for choose type:\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nclass AddGoodModal extends Component {\n    imgUrl= 'none';\n    dateTime= Date.now();\n    currentDateTime = '2021-01-02';\n    finishUpImage = true;\n    curCurrencySelect = 'vnd';\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            imageSelect: \"null\",\n            type:'none',\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\n            change: false,\n        }; \n        //this.loadAllType(); \n        // this.loadAllGood();\n\n        this.currentDateTime = this.getCurrentDateTime();\n        typeSet = [];\n        // console.log(\"typeProduct\", this.props.typeProduct);\n        var listProductInfor = this.props.listProduct.state;\n        if(listProductInfor.length > 0)\n        {\n            this.generatedID = parseInt(listProductInfor[listProductInfor.length-1]._id.productID) + 1;\n        } \n        this.setState({change: !this.state.change})\n    }\n    \n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    handleAdd(){\n        this.props.changeAddTypeStatus();\n        this.props.setAddTypeStatus();\n    }\n\n    async profileImageChange(fileChangeEvent) {\n        this.setState({\n            imageSelect: fileChangeEvent.target.files[0],\n        })\n        this.finishUpImage = false;\n        const file = fileChangeEvent.target.files[0];\n        const { type } = file;\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\n        } else {\n            const formData = new FormData();\n            formData.append(\"file\", fileChangeEvent.target.files[0])\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\n            await axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\n                .then(res => {\n                    this.imgUrl=res.data.url;\n                    this.setState({\n                        change: 'true'\n                    });\n                })\n                .catch(err => {\n                    console.log(\"Thất bại\");\n                })\n        }\n        this.finishUpImage = true;\n    }\n\n    calculateDay(dateString1, dateString2)\n    {\n        return (\n            (new Date(dateString1)).setHours(0, 0, 0) \n                - \n            (new Date(dateString2)).setHours(0,0,0)\n            )\n            /(1000 * 60 * 60 * 24);\n    }\n\n    async importGood(e) {\n        var currentCurrency = document.querySelector('#currencySelector').value;\n        var isContinue = this.checkConstraint();\n        if(!isContinue)\n        {\n            e.preventDefault();\n            return;\n        }\n        \n        // // Thêm hàng hoá\n        const data = {\n            token: localStorage.getItem('token'),\n            product: {\n                _id: {\n                    productID: this.generatedID,\n                    importDate: document.querySelector('input[name=\"importDate\"]').value,\n                    storeID: this.props.infoUser.email,\n                },\n                name: document.querySelector('input[name=\"goodName\"]').value,\n                quantity: document.querySelector('input[name=\"goodQuantity\"]').value,\n                remain: document.querySelector('input[name=\"goodQuantity\"]').value,\n                importPrice: (currentCurrency == 'vnd') ?\n                    document.querySelector('input[name=\"originalPrice\"]').value :\n                    document.querySelector('input[name=\"originalPrice\"]').value* this.props.regulation.exchangeRate,\n                sellPrice: (currentCurrency == 'vnd') ?\n                    document.querySelector('input[name=\"sellPrice\"]').value:\n                    document.querySelector('input[name=\"sellPrice\"]').value * this.props.regulation.exchangeRate,\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\n                imgUrl: this.imgUrl,\n                unit: document.querySelector('input[name=\"unit\"]').value,\n            }   \n        }\n        console.log(data);\n\n        axios.post(`http://localhost:5000/api/product`, data)\n            .then(res => {\n                console.log(\"Save success\");\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Save product success\",\"success\");\n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n                console.log('Bug when add product', err);\n            })\n\n        //Thêm vào bảng joinType nữa\n\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\n        for(var i = 0 ; i < typeSet.length ; i++)\n        {\n            const data1 = {\n                token: localStorage.getItem('token'),\n                productJoinType: {\n                    _id : {\n                        productID: this.generatedID,\n                        typeID: typeSet[i], \n                        importDate: document.querySelector('input[name=\"importDate\"]').value,\n                        storeID: this.props.infoUser.email,\n                    }\n                }\n            }\n            axios.post(`http://localhost:5000/api/product/join`, data1)\n                .then(res => {\n                    console.log(\"lưu vô bảng join thành công\");\n                })\n                .catch(err => {\n                    console.log(err);\n                })\n        }\n        this.props.changeStatusAddGood();\n        // Thêm vào redux\n        var dataRedux = {\n            _id: {\n                productID: this.generatedID.toString(),\n                importDate: document.querySelector('input[name=\"importDate\"]').value + 'T00:00:00.000+00:00',\n                storeID: this.props.infoUser.email,\n            },\n            name: document.querySelector('input[name=\"goodName\"]').value,\n            quantity: document.querySelector('input[name=\"goodQuantity\"]').value,\n            remain: document.querySelector('input[name=\"goodQuantity\"]').value,\n            importPrice: (currentCurrency == 'vnd') ?\n                document.querySelector('input[name=\"originalPrice\"]').value :\n                document.querySelector('input[name=\"originalPrice\"]').value* this.props.regulation.exchangeRate,\n            sellPrice: (currentCurrency == 'vnd') ?\n                document.querySelector('input[name=\"sellPrice\"]').value:\n                document.querySelector('input[name=\"sellPrice\"]').value * this.props.regulation.exchangeRate,\n            expires: document.querySelector('input[name=\"expiredDate\"]').value + 'T00:00:00.000+00:00',\n            imgUrl: this.imgUrl,\n            unit: document.querySelector('input[name=\"unit\"]').value,\n            typeIDList: typeSet,\n        }\n        // console.log(\"dataRedux\", dataRedux); \n        this.props.addProductToRedux(dataRedux);\n        // console.log(data);\n        console.log(\"this.props.listProduct.state\", this.props.listProduct.state)\n    }\n    \n    checkConstraint = () => {\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\n        // Constraint 1: Check name\n        var productName =  document.querySelector('input[name=\"goodName\"]').value;\n        if(productName.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product name can't be left blanked\",\"warning\");\n            return false;\n        }\n        // Constraint 2: Check quantity\n        if(document.querySelector('input[name=\"goodQuantity\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product quantity can't be left blanked\",\"warning\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value) <= 0) \n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product quantity must be greater than 0\",\"warning\");\n            return false;\n        }\n        // Constraint 3: check Unit\n        if(document.querySelector('input[name=\"unit\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product unit can't be left blanked\",\"warning\");\n            return false;\n        }\n        // Constraint 4: Check import Price\n        if(document.querySelector('input[name=\"originalPrice\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product import price can't be left blanked\",\"warning\");\n            return false;\n        }\n        else if(parseFloat(document.querySelector('input[name=\"originalPrice\"]').value) <= 0.0) \n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product import price must be greater than 0\",\"warning\");\n            return false;\n        }\n        // Constraint 5: check sell Price\n        if(document.querySelector('input[name=\"sellPrice\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product sell price can't be left blanked\",\"warning\");\n            return false;\n        }\n        else if(parseFloat(document.querySelector('input[name=\"sellPrice\"]').value) <= 0.0) \n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product sell price must be greater than 0\",\"warning\");\n            return false;\n        }\n        // Constraint 6: Ngày nhập phải nhỏ  hơn ngày hết hạn\n        if (\n            (\n                new Date(document.querySelector('input[name=\"importDate\"]').value).getTime()\n                - \n                new Date(document.querySelector('input[name=\"expiredDate\"]').value).getTime()\n            ) >= 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert('Không thể nhập hàng hết hạn',\"warning\");\n            return false;\n        }\n        // Constraint 7: Check giá gốc nhỏ hơn giá bán\n        if(\n            parseFloat(document.querySelector('input[name=\"sellPrice\"]').value) \n            - \n            parseFloat(document.querySelector('input[name=\"originalPrice\"]').value) <=0.0\n            ) \n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product was expired\",\"warning\");\n            return false;\n        }\n        // Constraint 8: check xem đã  up ảnh lên xong chưa\n        if(this.finishUpImage == false)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Image was not uploaded yet\",\"warning\");\n            return false;\n        }\n        // Constraint 9: Ngày nhập phải nhỏ  hơn ngày hết hạn theo regulation\n        if(this.props.regulation!={})\n        {\n            if (\n                this.calculateDay(document.querySelector('input[name=\"expiredDate\"]').value, document.querySelector('input[name=\"importDate\"]').value)\n                < this.props.regulation.minExpiredProduct)\n                // minExpiredProduct\n            {\n                this.props.hideAlert();\n                 this.props.showAlert('The expired day must be at least ' + this.props.regulation.minExpiredProduct + ' older than the import day'\n                 ,\"warning\");\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    generatedID = 0;\n\n    getTypeNamebyTypeID (typeID) {\n        var typeName='Fuck';\n        for(var i = 0; i< this.props.typeProduct.length;i++)\n        {   \n            if(this.props.typeProduct[i]._id.typeID == typeID)\n            {\n                typeName = this.props.typeProduct[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    foundTypeInSet(typeID) {\n        for(var i = 0 ; i < typeSet.length; i++)\n        {\n            if(typeSet[i]==typeID._id.typeID) return true;\n        }\n        return false;\n    }\n    \n    render() {\n        return(\n            <form style={{ zIndex: '10', minWidth: '500px', width: '90%', justifyContent: 'center', marginTop: '10%' }}>   \n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"ADD GOOD\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid className=\"import-container\" container spacing={2}>\n                        <Grid item md={2}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                paddingLeft: '30px'\n                            }}\n                        >   \n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden', marginTop: '15px ' }}>\n                                <Image style={{width: '180px',height: '180px', padding: '10px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            {/* Ẩn đi */}\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                        </Grid>\n                        <Grid item md={10}>\n                                    <Grid container md={12}>\n                                        <Grid item md={6} \n                                            className='input-item'\n                                        >\n                                            <div \n                                                className=\"input-label\"\n                                                style={{\n                                                    width: '176px'\n                                                }}\n                                            >\n                                                ID\n                                            </div>\n                                            <StyledTextField\n                                                classname='input-box' \n                                                type=\"text\" \n                                                // class=\"input-val\" \n                                                style = {{width: '100%'}} \n                                                fullWidth \n                                                size=\"small\" \n                                                name=\"goodID\" \n                                                variant=\"outlined\"\n                                                value={this.generatedID}\n                                                readOnly={true}\n                                                disabled={true}\n                                            />\n                                        </Grid>\n                                        <Grid item md={6} \n                                            className='input-item'\n                                            style={{\n                                                marginLeft: 0,\n                                                paddingLeft: 0,\n                                            }}\n                                        >\n                                            <div className=\"input-label\" style={{width: 138}}>Import Date</div>\n                                            <StyledTextField\n                                                classname='input-box'   \n                                                type=\"date\" \n                                                style = {{width: '100%'}} \n                                                fullWidth\n                                                name=\"importDate\"\n                                                size=\"small\"\n                                                variant=\"outlined\"\n                                                defaultValue={this.currentDateTime}\n                                            />\n                                        </Grid>\n                                        \n                                        <Grid item md={6} \n                                            className='input-item'\n                                        >\n                                            <div className=\"input-label\"style={{width: '176px'}}>Name</div>\n                                            <StyledTextField\n                                                classname='input-box'   \n                                                type=\"text\" \n                                                // class=\"input-val\" \n                                                style = {{width: '100%'}} \n                                                fullWidth\n                                                size=\"small\"\n                                                name=\"goodName\" \n                                                variant=\"outlined\" \n                                            />\n                                        </Grid>\n                                        <Grid item md={4}\n                                            className='input-item'\n                                            style={{padding: '0px', marginLeft: '0px', marginRight: 0}}\n                                        >\n                                            <div \n                                                className=\"input-label\" \n                                                style={{width: '110px'}}\n                                            >\n                                                Quantity\n                                            </div>\n                                            <StyledTextField\n                                                style = {{width: '60%'}} \n                                                fullWidth\n                                                name=\"goodQuantity\" \n                                                variant=\"outlined\"\n                                                type=\"number\"\n                                            />\n                                        </Grid>\n                                        <Grid item md={2}\n                                            className='input-item'\n                                            style={{\n                                                paddingRight: 5\n                                            }}\n                                        >\n                                            <div \n                                                className=\"input-label\"\n                                                style={{\n                                                    marginLeft: 0,\n                                                    paddingLeft: 0,\n                                                    width: 40\n                                                }}\n                                            >\n                                                Unit\n                                            </div>\n                                            <StyledTextField\n                                                classname='input-box'\n                                                style = {{width: '100%', marginLeft: '4px'}} \n                                                fullWidth\n                                                variant=\"outlined\"\n                                                type=\"text\" \n                                                name=\"unit\" \n                                            />\n                                        </Grid>\n                                        <Grid item md={6} \n                                            className='input-item'\n                                        >\n                                            <div className=\"input-label\" style={{width: 176}}>Expired Date</div>\n                                            <StyledTextField\n                                                classname='input-box'   \n                                                type=\"date\" \n                                                style = {{width: '100%'}} \n                                                fullWidth\n                                                size=\"small\"\n                                                name=\"expiredDate\" \n                                                variant=\"outlined\"\n                                                defaultValue={this.currentDateTime}\n                                            />\n                                        </Grid>\n                                        <Grid item md={6} className='input-item' style={{marginLeft: -8}}>\n                                            <div className=\"input-label\" style={{width: 138}}>Currency</div>\n                                            <StyledTextField\n                                                // fullWidth\n                                                id=\"currencySelector\"\n                                                name=\"currency\"\n                                                variant=\"outlined\"\n                                                style = {{width: '100%'}} \n                                                select\n\n                                                SelectProps={{ native: true }}\n                                                onChange={(event) => {\n                                                    this.curCurrencySelect = event.target.value;\n                                                    this.setState({change: !this.state.change})\n                                                }}\n                                            >\n                                                <option value=\"vnd\">\n                                                    VNĐ\n                                                </option>\n                                                {\n                                                    this.props.regulation != {} ?\n                                                    <option value=\"dollar\">\n                                                        $\n                                                    </option>\n                                                    : (null)\n                                                }\n                                                \n                                            </StyledTextField>\n                                        </Grid>\n                                        <Grid item md={6}\n                                            className='input-item'\n                                        >\n                                            <div className=\"input-label\" style={{width: 189}}>Original Price</div>\n                                            <StyledTextField\n                                                classname='input-box'\n                                                style = {{width: '100%', marginRight: 8}} \n                                                fullWidth\n                                                name=\"originalPrice\" \n                                                variant=\"outlined\"\n                                                type=\"number\" \n                                            />\n                                            <div style={{width: 30}}>\n                                                { this.curCurrencySelect == 'vnd' ? <div>VNĐ</div> : <div>$</div>}\n                                            </div>\n                                            \n                                        </Grid>\n                                        <Grid item md={6}\n                                            className='input-item'\n                                            style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\n                                        >\n                                            <div \n                                                className=\"input-label\"\n                                                style={{width: '150px'}}\n                                            >\n                                                Sell Price\n                                            </div>\n                                            <StyledTextField\n                                                classname='input-box'\n                                                style = {{width: '100%', marginLeft: '4px',marginRight:'8px'}} \n                                                fullWidth\n                                                name=\"sellPrice\" \n                                                variant=\"outlined\"\n                                                type=\"number\" \n                                            />\n                                            { this.curCurrencySelect == 'vnd' ? <div>VNĐ</div> : <div>$</div>}\n                                        </Grid>\n                                        \n                                        <Grid item md={12}\n                                            className='input-item'\n                                        >\n                                            <div \n                                                className=\"input-label\"\n                                                style={{width:129}}\n                                            >\n                                                Product Type\n                                            </div>\n                                            <FormControl sx={{ minWidth: 120 }}>\n                                                <Select\n                                                    value={this.state.type}\n                                                    onChange={(event) => {\n                                                        this.setState({type: event.target.value});\n                                                        if(!typeSet.includes(event.target.value))\n                                                        {\n                                                            typeSet.push(event.target.value);\n                                                        }\n                                                        this.setState({change: !this.state.change})\n                                                    }}\n                                                    style={{\n                                                        height: 36,\n                                                    }}\n                                                >\n                                                    {\n                                                        this.props.typeProduct.length== 0 ? <MenuItem value={'none'}>None</MenuItem>:\n                                                        this.props.typeProduct.map((type) =>\n                                                            this.foundTypeInSet(type) ? null :\n                                                            <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\n                                                        )\n                                                    }   \n                                                </Select> \n                                            </FormControl>\n                                            <Button onClick={() => this.handleAdd()}>\n                                                <AiFillPlusCircle\n                                                    size={28}\n                                                    style={{\n                                                        fontSize: 28,\n                                                        margin: 0,\n                                                        padding: 0,\n                                                        width: 28,\n                                                        height: 28\n                                                    }}    \n                                                />\n                                            </Button>\n                                            <div className='all-type-container'>\n                                                {\n                                                    Array.from(typeSet).map((type) =>\n                                                        <div className='type-container'>\n                                                            \n                                                            <CancelIcon\n                                                                className='close-icon'\n                                                                size={10}\n                                                                onClick={() => {\n                                                                    typeSet = typeSet.filter(function(item) {\n                                                                        return item != type;\n                                                                    })\n                                                                    console.log(typeSet);\n                                                                    this.setState({type: 'none'});\n                                                                }}\n                                                    \n                                                            />\n                                                            <span className='type-title'>\n                                                                {this.getTypeNamebyTypeID(type)}\n                                                            </span>\n                                                        </div>\n                                                        \n                                                    )\n                                                }\n                                            </div>\n                                        </Grid>\n                                    </Grid>\n                            </Grid>\n                        </Grid> \n                    </CardContent>\n                    <Divider />    \n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'space-evenly',\n                            margin: 10,\n                            paddingBottom: 10,\n                        }}\n                    >\n                        <Button className=\"btn btn-primary\" style={{backgroundColor: 'red'}} variant=\"contained\" onClick={(e) => this.props.changeStatusAddGood()}>\n                            Cancel\n                        </Button>\n                        <Button className=\"btn btn-primary\" variant=\"contained\" onClick={(e) => this.importGood(e)}>\n                            IMPORT\n                        </Button> \n                    </div>\n                                   \n                </Card>    \n                {this.props.addTypeStatus ? (\n                    <div className=\"modal-add\">\n                        <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\n                        <AddTypeModal></AddTypeModal>\n                    </div>\n                ): null}\n                {this.props.confirmStatus ? (\n                    <div className=\"modal-add\">\n                        <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\n                        <ConfirmModal></ConfirmModal>\n                    </div>\n                ): null}\n            </form>\n        );        \n    }\n}\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        infoUser: state.infoUser,\n        isAddTypeStatus: state.isAddTypeStatus,\n        confirmStatus: state.confirmStatus,\n        typeProduct: state.typeProduct,\n        listProduct: state.listProduct,\n        regulation: state.regulationReducer,\n        statusDarkmode: state.statusDarkmode,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        updateAvatar: (avatar) => {\n            dispatch({\n                type: \"UPDATE_AVATAR\",\n                avatar: avatar\n            })\n        },\n        setAddTypeStatus: () => {\n            dispatch({\n                type: \"SET_ADD_TYPE_STATUS\",\n            });\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        setConfirm: () => {\n            dispatch({\n                type: \"SET_CONFIRM_IMPORT_GOOD\",\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n        getProductType: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_TYPE\",\n                data: data\n            });\n        },\n        changeStatusAddGood: () => {\n            dispatch({\n                type: \"CHANGE_ADD_GOOD_STATUS\",\n            }); \n        },\n        addProductToRedux: (data) => {\n            dispatch({\n                type: \"ADD_PRODUCT\",\n                data: data,\n            }); \n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddGoodModal);\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/UpdateGoodModal.js",["1389","1390","1391","1392","1393","1394","1395","1396","1397","1398","1399","1400","1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411","1412","1413","1414","1415","1416","1417","1418","1419","1420","1421","1422","1423","1424","1425","1426"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport GoodImage from './goodExample.jpg';\nimport AddTypeModal from './AddTypeModal';\nimport { withStyles } from '@material-ui/styles';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport DatePicker from '@mui/lab/DatePicker';\nimport DateTimePicker from '@mui/lab/DateTimePicker';\nimport { AiFillPlusCircle} from \"react-icons/ai\";\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport ConfirmModal from './ConfirmModal';\n\nvar productTypes =[];\nvar listTypeInfor=[];\n// typeSet chứa id của các cái type\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nclass UpdateGoodModal extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            goodID : \"\",\n            change: false,\n            imageSelect: \"null\",\n            type:'none',\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\n            exchangeRate: Object.keys(this.props.regulation).length== 0 ? 1 : this.props.regulation.currency == 'vnd' ? 1 : this.props.regulation.exchangeRate,\n        }; \n        typeSet = [];\n        this.loadInitialData();\n        this.loadAllType();\n        this.loadCurrentTypes();\n        \n    }\n    imgUrl='none';\n    goodID='';\n    importDate='';\n    name='';\n    imgUrl='';\n    quantity = 0;\n    remain = 0;\n    unit = \"\";\n    importPrice = \"\";\n    sellPrice = \"\";\n    expire =\"\";\n    finishUpImage = true;\n\n    async loadAllType() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        //Get data và lưu các tên Type vào bảng\n        listTypeInfor=[];\n        for(var i=0; i < result.length ; i++)\n        {\n            listTypeInfor.push(result[i]);\n        }\n        productTypes=[];\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\n        {\n            productTypes.push(listTypeInfor[i].name);\n        }\n        this.setState({change: true});\n    }\n\n    async loadCurrentTypes() {\n        // Get hết các cái join của sản phẩm\n        var allJoinMatch = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n                \"_id.productID\": this.goodID,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, \n        {\n            params: {...data1}\n        })\n            .then(res => {\n                allJoinMatch = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        console.log(\"Các join\",allJoinMatch);\n        // Thêm vào trên cái bảng typeSet\n        for(var i = 0 ; i < allJoinMatch.length ; i ++)\n        {\n            typeSet.push(allJoinMatch[i]._id.typeID);\n        }\n        this.setState({change: !this.state.change});\n    }\n    getTypeNamebyTypeID (typeID) {\n        var typeName='';\n        for(var i = 0; i<listTypeInfor.length;i++)\n        {   \n            if(listTypeInfor[i]._id.typeID == typeID)\n            {\n                typeName = listTypeInfor[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    calculateDay(dateString1, dateString2)\n    {\n        return (\n            (new Date(dateString1)).setHours(0, 0, 0) \n                - \n            (new Date(dateString2)).setHours(0,0,0)\n            )\n            /(1000 * 60 * 60 * 24);\n    }\n\n\n    curCurrencySelect = 'vnd';\n\n    checkConstraint = () => {\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\n        // Constraint 1: Check name\n        var productName =  document.querySelector('input[name=\"goodName\"]').value;\n        if(productName.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product name can't be left blanked\",\"warning\");\n            return false;\n        }\n        // Constraint 2: Check quantity\n        if(document.querySelector('input[name=\"goodQuantity\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product quantity can't be left blanked\",\"warning\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value) <= 0) \n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product quantity must be greater than 0\",\"warning\");\n            return false;\n        }\n        // Constraint 3: check Unit\n        if(document.querySelector('input[name=\"unit\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product unit can't be left blanked\",\"warning\");\n            return false;\n        }\n        // Constraint 4: Check import Price\n        if(document.querySelector('input[name=\"originalPrice\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product import price can't be left blanked\",\"warning\");\n            return false;\n        }\n        else if(parseFloat(document.querySelector('input[name=\"originalPrice\"]').value) <= 0) \n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product import price must be greater than 0\",\"warning\");\n            return false;\n        }\n        // Constraint 5: check sell Price\n        if(document.querySelector('input[name=\"sellPrice\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product sell price can't be left blanked\",\"warning\");\n            return false;\n        }\n        else if(parseFloat(document.querySelector('input[name=\"sellPrice\"]').value) <= 0) \n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product sell price must be greater than 0\",\"warning\");\n            return false;\n        }\n        // Constraint 6: Ngày nhập phải nhỏ  hơn ngày hết hạn và ngày hết hạn, ngày nhập phải khác null\n        if (\n            (\n                new Date(document.querySelector('input[name=\"importDate\"]').value).getTime()\n                - \n                new Date(document.querySelector('input[name=\"expiredDate\"]').value).getTime()\n            ) >= 0\n        )\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product was expired\",\"warning\");\n            return false;\n        }\n        // Constraint 7: Check giá gốc nhỏ hơn giá bán\n        if(\n            parseInt(document.querySelector('input[name=\"sellPrice\"]').value) \n            - \n            parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <=0\n            ) \n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Product sell price must be greater than product import price\",\"warning\");\n            return false;\n        }\n        // Constraint 8: check xem đã  up ảnh lên xong chưa\n        if(this.finishUpImage == false)\n        {\n            this.props.hideAlert();\n\t\t\tthis.props.showAlert(\"Image was not uploaded yet\",\"warning\");\n            return false;\n        }\n         // Constraint 9: Ngày nhập phải nhỏ  hơn ngày hết hạn theo regulation\n         if(this.props.regulation!={})\n         {\n             if (\n                 this.calculateDay(document.querySelector('input[name=\"expiredDate\"]').value, document.querySelector('input[name=\"importDate\"]').value)\n                 < this.props.regulation.minExpiredProduct)\n                 // minExpiredProduct\n             {\n                 this.props.hideAlert();\n                 this.props.showAlert('The expired day must be at least ' + this.props.regulation.minExpiredProduct + ' older than the import day'\n                 ,\"warning\");\n                 return false;\n             }\n         }\n        return true;\n    }\n\n    handleAdd(){\n        this.props.changeAddTypeStatus();\n    }\n\n    async updateGood() {\n        var currentCurrency = document.querySelector('#currencySelector').value;\n        var isContinue = this.checkConstraint();\n        if(!isContinue)\n        {\n            return;\n        }\n        \n        var productInfo = this.props.infoUpdate;\n        const data = {\n            token: localStorage.getItem('token'),\n            product: {\n                _id: {\n                    productID: document.querySelector('input[name=\"goodID\"]').value,\n                    importDate: productInfo._id.importDate,\n                    storeID: this.props.infoUser.email,\n                },\n                name: this.name,\n                quantity: this.quantity,\n                // remain: document.querySelector('input[name=\"goodQuantity\"]').value,\n                importPrice: (currentCurrency == 'vnd') ?\n                    document.querySelector('input[name=\"originalPrice\"]').value :\n                    document.querySelector('input[name=\"originalPrice\"]').value* this.props.regulation.exchangeRate,\n                sellPrice: (currentCurrency == 'vnd') ?\n                    document.querySelector('input[name=\"sellPrice\"]').value:\n                    document.querySelector('input[name=\"sellPrice\"]').value * this.props.regulation.exchangeRate,\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\n                imgUrl: this.imgUrl,\n                unit: document.querySelector('input[name=\"unit\"]').value,\n            }\n        }\n        console.log(\"Updategood\",data);\n        axios.put(`http://localhost:5000/api/product`, data)\n            .then(res => {\n                console.log(\"Update success\");\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Update product success\",\"success\");\n            })\n            .catch(err => {\n                console.log(err);\n            })\n        // Get hết các cái join của sản phẩm\n        var allJoinMatch = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n                \"_id.productID\": this.goodID,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, \n        {\n            params: {...data1}\n        })\n            .then(res => {\n                allJoinMatch = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        console.log(allJoinMatch);\n        // Xoá các join liên quan đến sản phẩm\n        var allProductJoin = [];\n        for(var i = 0 ; i < allJoinMatch.length; i++)\n        {\n            allProductJoin.push({\n                productID: this.goodID,\n                typeID: allJoinMatch[i]._id.typeID,\n                importDate: allJoinMatch[i]._id.importDate,\n                storeID: this.props.infoUser.email,\n            });\n        }\n        const dataJoin = {\n            token: localStorage.getItem('token'),\n            productJoinTypes: allProductJoin,      \n        }\n\n        console.log(dataJoin);\n\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\n            .then(res => {\n                console.log(\"delete join success\");\n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        // Thêm các cái hiện tại\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\n        for(var i = 0 ; i < typeSet.length ; i++)\n        {\n            const data1 = {\n                token: localStorage.getItem('token'),\n                productJoinType: {\n                    _id : {\n                        productID: this.goodID,\n                        typeID: typeSet[i], \n                        importDate: productInfo._id.importDate,\n                        storeID: this.props.infoUser.email,\n                    }\n                }\n            }\n            axios.post(`http://localhost:5000/api/product/join`, data1)\n                .then(res => {\n                    console.log(\"lưu vô bảng join thành công\");\n                })\n                .catch(err => {\n                    console.log(err);\n                })\n        }\n\n        // Thêm vào redux\n        var reduxData = {\n            _id: {\n                productID: productInfo._id.productID,\n                importDate: productInfo._id.importDate, \n                storeID: this.props.infoUser.email,\n            },\n            name: this.name,\n            quantity: this.quantity,\n            remain: this.remain,\n            importPrice: (currentCurrency == 'vnd') ?\n                document.querySelector('input[name=\"originalPrice\"]').value :\n                document.querySelector('input[name=\"originalPrice\"]').value* this.props.regulation.exchangeRate,\n            sellPrice: (currentCurrency == 'vnd') ?\n                document.querySelector('input[name=\"sellPrice\"]').value:\n                document.querySelector('input[name=\"sellPrice\"]').value * this.props.regulation.exchangeRate,\n            expires: document.querySelector('input[name=\"expiredDate\"]').value + 'T00:00:00.000+00:00',\n            imgUrl: this.imgUrl,\n            unit: document.querySelector('input[name=\"unit\"]').value,\n            typeIDList: typeSet,\n        }\n        this.props.updateProductToRedux(reduxData);\n        this.props.changeUpdateGoodStatus();\n    }\n\n    remain = 0;\n\n    cancel = () => {\n        this.props.changeUpdateGoodStatus();\n    }\n\n    loadInitialData = () => {\n        // Load các dữ liệu ban đầu của form ở đây để mà update nhưng mà bị lỗi 401 mẹ\n        //Xử lý sampleData\n        var productInfo = this.props.infoUpdate;\n        console.log(this.props.infoUpdate);\n\n        this.goodID = (productInfo._id.productID == null) ? '' : productInfo._id.productID;\n        this.importDate = productInfo._id.importDate;\n        this.importDate = this.importDate == null ? '' :this.importDate.substring(0, this.importDate.indexOf('T'));\n        this.name = productInfo.name == null ? '' : productInfo.name;\n        this.imgUrl = productInfo.imgUrl == null ? '' : productInfo.imgUrl;\n        this.quantity = productInfo.quantity == null ? '' : productInfo.quantity;\n        this.remain = productInfo.remain;\n        this.unit = productInfo.unit == null ? '' : productInfo.unit;\n        this.importPrice = productInfo.importPrice == null ? '' : productInfo.importPrice;\n        this.sellPrice = productInfo.sellPrice == null ? '' : productInfo.sellPrice;\n        this.expire = productInfo.expires; //substring(0,productInfo.expire.indexOf('T'));\n        this.expire = this.expire == null ? '' :this.expire.substring(0, this.expire.indexOf('T'));\n        console.log(\"this.expire\",this.expire );\n        this.setState({change: !this.state.change});\n    }\n\n    profileImageChange = (fileChangeEvent) => {\n        this.setState({\n            imageSelect: fileChangeEvent.target.files[0],\n        })\n        this.finishUpImage = false;\n        const file = fileChangeEvent.target.files[0];\n        const { type } = file;\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\n        } else {\n            const formData = new FormData();\n            formData.append(\"file\", fileChangeEvent.target.files[0])\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\n            axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\n                .then(res => {\n                    this.imgUrl=res.data.url;\n                    this.setState({\n                        change: 'true'\n                    });\n                })\n                .catch(err => {\n                    console.log(\"Thất bại\");\n                })\n        }\n        this.finishUpImage = true;\n    }\n\n    changeName = (e) => {\n        this.name = e.target.value;\n    }\n\n    changeValue = (e, variable) =>\n    {\n        if(variable=='quantity')\n        {\n            this.quantity = e.target.value;\n        }\n    }\n\n    foundTypeInSet(typeID) {\n        for(var i = 0 ; i < typeSet.length; i++)\n        {\n            if(typeSet[i]==typeID._id.typeID) return true;\n        }\n        return false;\n    }\n    render() {\n        \n        return (\n            <form style={{ zIndex: '10', width: '90%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"UPDATE GOOD\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                marginTop: '0px'\n                            }}\n                        >   \n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            {/* Ẩn đi */}\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                        </Grid>\n                        <Grid item md={12}>\n\n                            <Card \n                            >\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '165px'\n                                            }}\n                                        >\n                                            ID\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '100%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            name=\"goodID\" \n                                            variant=\"outlined\" \n                                            value={this.goodID}\n                                            readOnly={true}\n                                            disabled={true}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                        style={{\n                                            marginLeft: 0,\n                                            paddingLeft: 0\n                                        }}\n                                    >\n                                        <div className=\"input-label\" style={{width: 128}}>Import Date</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\" \n                                            style = {{width: '100%', paddingRight: 8}} \n                                            fullWidth\n                                            name=\"importDate\"\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.importDate}\n                                            readOnly={true}\n                                            disabled={true}\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '165px'}}>Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '100%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            name=\"goodName\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.name}\n                                            onChange={(e) => this.changeName(e)} \n                                        />\n                                    </Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                        style={{padding: '0px', marginLeft: '0px'}}\n                                    >\n                                        <div \n                                            className=\"input-label\" \n                                            style={{width: '106px'}}\n                                        >\n                                            Quantity\n                                        </div>\n                                        <StyledTextField\n                                            style = {{width: '60%'}} \n                                            fullWidth\n                                            name=\"goodQuantity\" \n                                            variant=\"outlined\"\n                                            type=\"number\" \n                                            defaultValue={this.quantity}\n                                            onChange={(e) => this.changeValue(e, 'quantity')}\n                                        />\n                                    </Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                        style={{\n                                            paddingRight: 24\n                                        }}\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                marginLeft: 0,\n                                                paddingLeft: 4\n                                            }}\n                                        >\n                                            Unit\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box'\n                                            style = {{width: '100%', marginLeft: '4px'}} \n                                            fullWidth\n                                            variant=\"outlined\"\n                                            type=\"text\" \n                                            name=\"unit\" \n                                            defaultValue={this.unit}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            name=\"expiredDate\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.expire} \n                                        />\n                                        {/* <StyledTextField\n                                            classname='input-box'\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \n                                            fullWidth\n                                            name=\"sellPrice\" \n                                            variant=\"outlined\"\n                                            value={this.expire}\n                                        /> */}\n                                    </Grid>\n                                    <Grid item md={6} className='input-item'>\n                                        <div className=\"input-label\" style={{width: 106, marginLeft: '-8px'}}>Currency</div>\n                                        <StyledTextField\n                                            // fullWidth\n                                            id=\"currencySelector\"\n                                            name=\"currency\"\n                                            variant=\"outlined\"\n                                            style = {{width: '70%'}} \n                                            select\n\n                                            SelectProps={{ native: true }}\n                                            onChange={(event) => {\n                                                var preChoice = this.curCurrencySelect;\n                                                this.curCurrencySelect = event.target.value;\n                                                if(preChoice != this.curCurrencySelect)\n                                                {\n                                                    if(this.curCurrencySelect == 'vnd')\n                                                    {\n                                                        this.sellPrice= (this.sellPrice*this.props.regulation.exchangeRate).toFixed(0)\n                                                        this.importPrice= (this.props.regulation.exchangeRate*this.importPrice).toFixed(0);\n                                                    }\n                                                    else\n                                                    {\n                                                        this.sellPrice= (this.sellPrice/this.props.regulation.exchangeRate).toFixed(2);\n                                                        this.importPrice= (this.importPrice/this.props.regulation.exchangeRate).toFixed(2);\n                                                    }\n                                                }\n                                                this.setState({change: !this.state.change,});\n                                            }}\n                                        >\n                                            <option value=\"vnd\">\n                                                VNĐ\n                                            </option>\n                                            {\n                                                Object.keys(this.props.regulation).length == 0 ?\n                                                <option value=\"dollar\">\n                                                    $\n                                                </option>\n                                                : (null)\n                                            }\n                                            \n                                        </StyledTextField>\n                                    </Grid>\n                                    <Grid item md={6}\n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: 128}}>Original Price</div>\n                                        <StyledTextField\n                                            classname='input-box'\n                                            style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \n                                            fullWidth\n                                            name=\"originalPrice\" \n                                            variant=\"outlined\"\n                                            type=\"number\"\n                                            // onChange={(this.)}\n                                            onChange={(e) => {\n                                                this.importPrice = e.target.value;\n                                                this.setState({\n                                                    change: !this.state.change,\n                                                });\n                                            }}\n                                            value={this.importPrice}\n                                        />\n                                        { this.curCurrencySelect == 'vnd' ? <div>VNĐ</div> : <div>$</div>}\n                                    </Grid>\n                                    <Grid item md={6}\n                                        className='input-item'\n                                        style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{width: '109px'}}\n                                        >\n                                            Sell Price\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box'\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \n                                            fullWidth\n                                            name=\"sellPrice\" \n                                            variant=\"outlined\"\n                                            type=\"number\" \n                                            onChange={(e) => {\n                                                this.sellPrice = e.target.value;\n                                                this.setState({\n                                                    change: !this.state.change,\n                                                });\n                                            }}\n                                            value={this.sellPrice}\n                                        />\n                                        { this.curCurrencySelect == 'vnd' ? <div>VNĐ</div> : <div>$</div>}\n                                    </Grid>\n                                    \n                                    <Grid item md={10}\n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{width:132}}\n                                        >\n                                            Product Type\n                                        </div>\n                                        <FormControl sx={{ minWidth: 120 }}>\n                                        {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                        <Select\n                                            value={this.state.type}\n                                            onChange={(event) => {\n                                                this.setState({type: event.target.value});\n                                                if(!typeSet.includes(event.target.value))\n                                                {\n                                                    typeSet.push(event.target.value);\n                                                }\n                                            }}\n                                            style={{\n                                                height: 36,\n                                            }}\n                                        >\n                                            {\n                                                this.props.typeProduct.length== 0 ? <MenuItem value={'none'}>None</MenuItem>:\n                                                this.props.typeProduct.map((type) =>\n                                                    this.foundTypeInSet(type) ? null :\n                                                    <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\n                                                )\n                                            }   \n                                        </Select> \n                                    </FormControl>\n                                        <Button onClick={() => this.handleAdd()}>\n                                            <AiFillPlusCircle\n                                                size={28}\n                                                style={{\n                                                    fontSize: 28,\n                                                    margin: 0,\n                                                    padding: 0,\n                                                    width: 28,\n                                                    height: 28\n                                                }}    \n                                            />\n                                        </Button>\n                                        <div className='all-type-container'>\n                                            {\n                                                Array.from(typeSet).map((type) =>\n                                                    <div item md={7} className='type-container'>\n                                                        <CancelIcon\n                                                            className='close-icon'\n                                                            size={10}\n                                                            onClick={() => {\n                                                                typeSet = typeSet.filter(function(item) {\n                                                                    return item != type;\n                                                                })\n                                                                console.log(typeSet);\n                                                                this.setState({type: 'none'});\n                                                            }}\n                                                \n                                                        />\n                                                        <span className='type-title'>\n                                                            {this.getTypeNamebyTypeID(type)}\n                                                        </span>\n                                                    </div>\n                                                    \n                                                )\n                                            }\n                                        </div>\n                                    </Grid>\n                                    {/* <Grid item md={10}\n                                        className='input-item'\n                                    >\n\n                                    </Grid> */}\n                                    <Grid item md={12}>\n                                        <Divider/>\n                                    </Grid>\n                                \n                                    <Grid item md={12}\n                                        className='input-item'\n                                        style={{display: 'flex', justifyContent: 'space-evenly'}}\n                                    >\n                                        <Button variant=\"contained\"  style={{marginLeft: 10, backgroundColor: 'red'}} onClick={() => this.props.changeUpdateGoodStatus()}>\n                                            Cancel\n                                        </Button>\n                                        <Button variant=\"contained\" style={{marginLeft: 10}} onClick={() => this.updateGood()}>\n                                            UPDATE\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                        \n                    \n                </div>\n                </Card>\n                {this.props.addTypeStatus ? (\n                        <div className=\"modal-add\" style={{ zIndex: '12'}}>\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\n                            <AddTypeModal></AddTypeModal>\n                        </div>\n                    ): null}\n                {this.props.confirmStatus ? (\n                    <div className=\"modal-add\">\n                        <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\n                        <ConfirmModal></ConfirmModal>\n                    </div>\n                ): null}\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        updateGoodStatus: state.updateGoodStatus,\n        confirmStatus: state.confirmStatus,\n        infoUpdate: state.infoUpdate,\n        infoUser: state.infoUser,\n        typeProduct: state.typeProduct,\n        listProduct: state.listProduct,\n        regulation: state.regulationReducer,\n        statusDarkmode: state.statusDarkmode,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        changeUpdateGoodStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\n            });\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        setUpdateConfirm: () => {\n            dispatch({\n                type: \"SET_CONFIRM_UPDATE_GOOD\",\n            }); \n        },\n        updateProductToRedux: (data) => {\n            dispatch({\n                type: \"UPDATE_PRODUCT\",\n                data: data,\n            }); \n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateGoodModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/GoodTable.js",["1427","1428","1429","1430","1431","1432","1433"],"import * as React from 'react';\nimport { Component } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { withStyles } from '@material-ui/styles';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport GoodRow from './TableRow';\n\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    } \n})\n\n\nvar listProductInfor = [];\nvar joinTypeInfor = [];\nvar listTypeInfor = [];\n\nclass GoodTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            update: false\n        }\n        console.log(\"this.props.listProduct.state\", this.props.listProduct.state);\n    }\n\n    getTypeNamebyTypeID (typeID) {\n        var typeName=\"Null\";\n        for(var i = 0; i < this.props.typeProduct.length;i++)\n        {   \n            if(this.props.typeProduct[i]._id.typeID == typeID)\n            {\n                typeName = this.props.typeProduct[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div id=\"scroll-bar\" style={{height: '550px', width: '100%', overflowY: 'auto'}}>\n                <TableContainer id=\"scroll-bar\" component={Paper}>\n                    <Table className={classes.goodTable} aria-label=\"collapsible table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ID</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">GoodName</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Quantity</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Sell Price</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ImportTime</TableCell>\n                                <TableCell className={classes.goodTable_Cell}/>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {\n                                this.props.listProduct.state == undefined ? (null):\n                                this.props.listProduct.state.map((product) => (\n                                    product==undefined ? null :\n                                    <GoodRow data={product} />\n                                ))\n                            }   \n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        infoUser: state.infoUser,\n        isAddTypeStatus: state.isAddTypeStatus,\n        confirmStatus: state.confirmStatus,\n        listProduct: state.listProduct,\n        typeProduct: state.typeProduct,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(GoodTable));\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/TableRow.js",["1434","1435","1436","1437","1438","1439","1440","1441","1442","1443","1444","1445","1446","1447","1448","1449"],"import * as React from 'react';\nimport Typography from '@mui/material/Typography';\nimport { Image } from 'cloudinary-react';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Collapse from '@mui/material/Collapse';\nimport IconButton from '@mui/material/IconButton';\nimport { withStyles } from '@material-ui/styles';\nimport GoodImage from './goodExample.jpg';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport { useDispatch } from 'react-redux'\nimport axios from 'axios';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { StaticRouter } from 'react-router-dom';\n\nconst styles = theme =>  ({\n    goodTable_Cell:{\n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: 4,\n        color: '#333'\n    }\n});\n\n\n\nclass GoodRow extends Component{\n    constructor(props) {\n        super(props);\n        this.state ={\n            update: false,\n            change: false,\n        }\n        console.log('regulation', this.props.regulation)\n    }\n    isOpen = false;\n    row = {};\n    setOpen(value) {\n        this.isOpen = value;\n        this.setState({change: !this.state.change});\n    }\n\n    async deleteProduct(row) {\n        // Xoá sản phẩm\n        console.log(\"row\", row)\n        const data = {\n            token: localStorage.getItem('token'),\n            products:\n            [\n                {\n                    productID: row._id.productID,\n                    importDate: row._id.importDate,\n                    storeID: row._id.storeID,\n                }\n            ]\n            \n        }\n        axios.delete(`http://localhost:5000/api/product`,{data: data})\n            .then(res => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Delete product success\",\"success\");\n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        \n        // Get hết các cái join của sản phẩm\n        var allJoinMatch = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": row._id.storeID,\n                \"_id.productID\": row._id.productID,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, \n        {\n            params: {...data1}\n        })\n            .then(res => {\n                allJoinMatch = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        console.log(allJoinMatch);\n        // Xoá các join liên quan đến sản phẩm\n        var allProductJoin = [];\n        for(var i = 0 ; i < allJoinMatch.length; i++)\n        {\n            allProductJoin.push({\n                productID: row._id.productID,\n                typeID: allJoinMatch[i]._id.typeID,\n                importDate: allJoinMatch[i]._id.importDate,\n                storeID: row._id.storeID,\n            });\n        }\n        const dataJoin = {\n            token: localStorage.getItem('token'),\n            productJoinTypes: allProductJoin,      \n        }\n\n        console.log(dataJoin);\n\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\n            .then(res => {\n                console.log(\"delete join success\");\n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        \n        console.log(\"this.props.data\",this.props.data)\n        this.props.deleteProductToRedux(this.props.data);\n    }\n\n    getTypeList(typeList)\n    {\n        var joinType = '';\n        for(var i = 0 ; i < typeList.length; i++)\n        {\n            for(var j = 0 ; j < this.props.typeProduct.length; j++)\n            {\n                if(this.props.typeProduct[j]._id.typeID == typeList[i])\n                {\n                    joinType += \" \" + this.props.typeProduct[j].name;\n                    break;\n                }\n            }\n        }\n        return joinType;\n    }\n\n    render () {\n        const { classes } = this.props;\n        const row = this.props.data;\n        // console.log(row);\n        return (\n            <React.Fragment>\n            <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row._id.productID}</TableCell>\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.name}</TableCell>\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.quantity}</TableCell>\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\n                <div style={{display: 'flex'}}>\n                    {\n                        Object.keys(this.props.regulation).length == 0 ?\n                        <div>{row.sellPrice}</div> :\n                        this.props.regulation.currency == 'vnd' ?\n                        <div>{row.sellPrice}</div> :\n                        <div>{(row.sellPrice/this.props.regulation.exchangeRate).toFixed(2)}</div>\n                    }\n                    \n                    <div style={{marginLeft: 4}}>\n                        {\n                            (Object.keys(this.props.regulation).length == 0)\n                                ? ' VNĐ':\n                            (this.props.regulation.currency == 'vnd' ? ' VNĐ' : ' $')\n                        }\n                    </div>\n                </div>\n                </TableCell>\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\n                    {/* {row.importTime == null ? '' : row.importTime.substring(0,row.importTime.indexOf('T'))} */}\n                    {row._id.importDate == null ? '': row._id.importDate.indexOf('T')==-1 ? row._id.importDate: row._id.importDate.substring(0,row._id.importDate.indexOf('T'))}\n                </TableCell>\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => this.setOpen(!this.isOpen)}>\n                        {this.isOpen ? (<KeyboardArrowUpIcon />) : (<KeyboardArrowDownIcon />)}\n                    </IconButton>\n                </TableCell>\n            </TableRow>\n            {\n                this.isOpen ?\n                <TableRow>\n                    <TableCell className={classes.goodTable_Cell} style={{ padding: 0, height: 100}} colSpan={8}>\n                        {/* <Collapse in={open} timeout=\"auto\" unmountOnExit> */}\n                        <Collapse in={true} timeout=\"auto\" unmountOnExit>\n                            <Box sx={{ margin: 1 }}>\n                                <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                    Other information\n                                </Typography>\n                                <div style={{display: 'flex'}}>\n                                    {  \n                                        row.imgUrl == \"none\"\n                                        ? <div style={{width: '100px', height: '100px', objectFit:'cover'}}><img src={GoodImage} style={{width: '100px', height: '100px', objectFit:'cover'}}/></div>\n                                        \n                                        : <div style={{width: '100px', height: '100px', objectFit:'cover'}}><Image style={{width: '100px', height: '100px', objectFit:'cover'}} cloudName=\"databaseimg\" publicId={row.imgUrl}>{row.imgUrl}</Image></div>\n                                    }\n                                    <Table>\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell className={classes.goodTable_Cell}><div style={{color: '#333'}}>Expired Day</div></TableCell>\n                                                <TableCell className={classes.goodTable_Cell}><div  style={{color: '#333'}}>Original Price</div></TableCell>\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div  style={{color: '#333'}}>Good Remain</div></TableCell>\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div  style={{color: '#333'}}>Product Type</div></TableCell>\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div style={{color: '#333'}}>Unit</div></TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            <TableRow>\n                                                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">\n                                                    {/* {row.hidden.expires == null ? '': row.hidden.expires.substring(0,row.hidden.expires.indexOf('T'))} */}\n                                                    {row.expires == null ? '': row.expires.indexOf('T') ==-1 ? row.expires : row.expires.substring(0,row.expires.indexOf('T'))}\n                                                </TableCell>\n                                                <TableCell className={classes.goodTable_Cell} >\n                                                    <div style={{display: 'flex'}}>\n                                                    {\n                                                        Object.keys(this.props.regulation).length == 0 ?\n                                                        <div>{row.importPrice}</div> :\n                                                        this.props.regulation.currency == 'vnd' ?\n                                                        <div>{row.importPrice}</div> :\n                                                        <div>{(row.importPrice/this.props.regulation.exchangeRate).toFixed(2)}</div>\n                                                    }\n                                                        <div style={{marginLeft: 4}}>\n                                                            {\n                                                                (Object.keys(this.props.regulation).length == 0)\n                                                                    ? ' VNĐ':\n                                                                (this.props.regulation.currency == 'vnd' ? ' VNĐ' : ' $')\n                                                            }\n                                                        </div>\n                                                    </div>\n                                                </TableCell>\n                                                <TableCell className={classes.goodTable_Cell}>{row.remain}</TableCell>\n                                                <TableCell className={classes.goodTable_Cell}>{this.getTypeList(row.typeIDList)}</TableCell>\n                                                <TableCell className={classes.goodTable_Cell}>{row.unit}</TableCell>\n                                            </TableRow>\n                                        </TableBody>\n                                    </Table>\n                                    <div className=\"button-container\">\n                                        <Button \n                                            onClick={() => {\n                                                // Truyền cái data vào trong hàm đây luôn\n                                                const data = row;\n                                                this.props.updateProduct(data);\n                                                this.props.openUpdateModal();\n                                            }}\n                                            variant=\"contained\"\n                                        >\n                                            Update\n                                        </Button>\n                                        <Button \n                                            variant=\"contained\"\n                                            onClick={() => this.deleteProduct(row)}\n                                        >\n                                            Delete\n                                            \n                                        </Button>\n                                    </div>\n                                </div>  \n                            </Box>\n                        </Collapse>\n                    </TableCell>\n                </TableRow>\n                : null\n            }\n            \n            </React.Fragment>\n        ); \n    }\n}\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        infoUser: state.infoUser,\n        isAddTypeStatus: state.isAddTypeStatus,\n        confirmStatus: state.confirmStatus,\n        listProduct: state.listProduct,\n        typeProduct: state.typeProduct,\n        regulation: state.regulationReducer,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n        updateProduct: (data) => {\n            dispatch({type: \"UPDATE_GOOD_DATA\", data});\n        },\n        openUpdateModal: (data) => {\n            dispatch({ type: \"CHANGE_UPDATE_GOOD_STATUS\", });\n        },\n        deleteProductToRedux: (data) => {\n            dispatch({\n                type: \"DELETE_PRODUCT\",\n                data: data,\n            }); \n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(GoodRow));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/GoodManager/ExcelInstructionStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/ExportRevenue.js",["1450"],"import React from \"react\";\nimport {\n    Card,\n    CardHeader,\n    Divider,\n    CardContent,\n    Grid,\n    TextField,\n    Box,\n    Button,\n} from \"@mui/material\";\nimport { GiCancel } from \"react-icons/gi\";\nimport { BiPlusMedical, BiEdit } from \"react-icons/bi\";\nimport Stack from \"@mui/material/Stack\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport axios from \"axios\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport DesktopDatePicker from \"@mui/lab/DesktopDatePicker\";\nfunction ModalConfirmPassword(props) {\n    const statusDarkmode = useSelector((state) => state.statusDarkmode);\n    const infoUser = useSelector((state) => state.infoUser);\n    const dispatch = useDispatch();\n    const [timeFrom, setTimeFrom] = React.useState(new Date());\n    const [timeEnd, settimeEnd] = React.useState(new Date());\n    const handleCancel = () => {\n        dispatch({\n            type: \"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\n        });\n    };\n\n    const changeTimeFrom = (newValue) => {\n        if (newValue) {\n            setTimeFrom(newValue);\n        }\n    };\n\n    const changetimeEnd = (newValue) => {\n        if (newValue) {\n            settimeEnd(newValue);\n        }\n    };\n\n    const exportFile = async () => {\n        if (timeEnd - timeFrom >= 0) {\n            // Xử lý ở đây\n            await axios({\n                method: \"get\",\n                url: \"http://localhost:5000/api/report\",\n                params: {\n                    token: localStorage.getItem(\"token\"),\n                    from: timeFrom,\n                    end: timeEnd,\n                    storeID: infoUser.email\n                },\n                responseType: \"blob\",\n            }).then((response) => {\n                const url = window.URL.createObjectURL(\n                    new Blob([response.data])\n                );\n                const link = document.createElement(\"a\");\n                link.href = url;\n                link.setAttribute(\"download\", \"Report.xlsx\"); //or any other extension\n                document.body.appendChild(link);\n                link.click();\n            });\n            //\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: \"Export success\",\n                typeMessage: \"success\",\n            });\n            handleCancel();\n        } else {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message:\n                    \"The end date must be greater than greater than or equal to the start date\",\n                typeMessage: \"warning\",\n            });\n        }\n    };\n\n    return (\n        <Card\n            className=\"card-confirm-password\"\n            style={{\n                minWidth: \"500px\",\n                width: \"600px\",\n                justifyContent: \"center\",\n                marginTop: \"10%\",\n            }}\n        >\n            <CardHeader\n                style={{\n                    color: !statusDarkmode ? \"#0091ea\" : \"white\",\n                    backgroundColor: !statusDarkmode ? \"#efeeef\" : \"#455a64\",\n                }}\n                title=\"Export file sales report\"\n            />\n            <Divider />\n            <CardContent>\n                <Grid container spacing={2}>\n                    <Grid item md={12} xs={12}>\n                        <LocalizationProvider dateAdapter={AdapterDateFns}>\n                            <Stack spacing={3}>\n                                <DesktopDatePicker\n                                    label=\"From\"\n                                    value={timeFrom}\n                                    minDate={new Date(\"2017-01-01\")}\n                                    onChange={(newValue) =>\n                                        changeTimeFrom(newValue)\n                                    }\n                                    renderInput={(params) => (\n                                        <TextField {...params} />\n                                    )}\n                                />\n                                <DesktopDatePicker\n                                    label=\"To\"\n                                    value={timeEnd}\n                                    minDate={new Date(\"2017-01-01\")}\n                                    onChange={(newValue) =>\n                                        changetimeEnd(newValue)\n                                    }\n                                    renderInput={(params) => (\n                                        <TextField {...params} />\n                                    )}\n                                />\n                            </Stack>\n                        </LocalizationProvider>\n                    </Grid>\n                </Grid>\n            </CardContent>\n            <Divider />\n            <Box sx={{ display: \"flex\", justifyContent: \"space-evenly\", p: 2 }}>\n                <Button\n                    onClick={() => exportFile()}\n                    style={{ backgroundColor: \"yellowgreen\" }}\n                    variant=\"contained\"\n                    startIcon={<BiPlusMedical />}\n                >\n                    Confirm\n                </Button>\n                <Button\n                    style={{ backgroundColor: \"red\" }}\n                    onClick={() => handleCancel()}\n                    variant=\"contained\"\n                    startIcon={<GiCancel />}\n                >\n                    Cancel\n                </Button>\n            </Box>\n        </Card>\n    );\n}\n\nexport default ModalConfirmPassword;\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/GoodTableDisplay.js",["1451","1452","1453","1454","1455","1456","1457","1458","1459","1460","1461","1462","1463","1464","1465","1466","1467","1468","1469","1470","1471","1472","1473","1474","1475","1476","1477","1478","1479","1480","1481","1482","1483","1484","1485","1486","1487","1488","1489"],"import * as React from 'react';\nimport { Component } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { withStyles } from '@material-ui/styles';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Collapse from '@mui/material/Collapse';\nimport IconButton from '@mui/material/IconButton';\nimport { Grid, Box, Button, Checkbox, Modal, Divider } from '@mui/material';\nimport { red, lightBlue } from '@mui/material/colors';\nimport Typography from '@mui/material/Typography';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FiXSquare } from 'react-icons/fi'\nimport { TiArrowBack } from 'react-icons/ti'\nimport { Image } from 'cloudinary-react';\nimport GoodImage from './goodExample.jpg';\nimport { fontWeight } from '@material-ui/system';\nimport { AiOutlineEdit, AiFillDelete } from \"react-icons/ai\";\n\nconst styles = theme => ({\n    goodTable: {\n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell: {\n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    }\n})\n\n\nvar listProductInfor = [];\nvar joinTypeInfor = [];\nvar listTypeInfor = [];\n\nfunction Row(props) {\n    const { row } = props;\n    const [open, setOpen] = React.useState(false);\n    const [openModal, setOpenModal] = React.useState(false);\n    const statusSelectAll = useSelector(state => state.statusSelectAll)\n    const infoUser = useSelector(state => state.infoUser)\n    const dispatch = useDispatch();\n    const [statusSelectReplace, setStatusSelectReplace] = React.useState(false);\n    const regulation = useSelector(state => state.regulationReducer)\n    const typeProduct = useSelector(state => state.typeProduct)\n\n    const style = {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: 400,\n        bgcolor: 'background.paper',\n        border: '1px solid #000',\n        borderRadius: '5px',\n        boxShadow: 24,\n        pt: 2,\n        px: 4,\n        pb: 3,\n    };\n\n    React.useEffect(() => {\n        setStatusSelectReplace(statusSelectAll)\n    }, [statusSelectAll])\n\n    const countQuantity = () => {\n        let count = 0;\n        row.listProduct.map(value => {\n            count += value.quantity;\n        })\n        return count;\n    }\n\n    const handleClose = () => {\n        setOpen(false);\n    }\n\n    const handleOpen = () => {\n        setOpen(true);\n    }\n\n    const getTypeNamebyTypeID = (typeID) => {\n        var typeName=\"Null\";\n        for(var i = 0; i < typeProduct.length;i++)\n        {   \n            if(typeProduct[i]._id.typeID == typeID)\n            {\n                typeName = typeProduct[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    \n\n    const editProduct = async (row) => \n    {\n        dispatch({type: \"UPDATE_GOOD_DATA\", data: row});\n        dispatch({ type: \"CHANGE_UPDATE_GOOD_STATUS\", });\n    }\n\n    const deleteProduct = async (row) => {\n        // Xoá sản phẩm\n        console.log(\"row\", row)\n        const data = {\n            token: localStorage.getItem('token'),\n            products:\n            [\n                {\n                    productID: row._id.productID,\n                    importDate: row._id.importDate,\n                    storeID: row._id.storeID,\n                }\n            ]\n            \n        }\n        axios.delete(`http://localhost:5000/api/product`,{data: data})\n            .then(res => {\n                dispatch({\n                    type: \"HIDE_ALERT\",\n                })\n                dispatch({\n                    type: \"SHOW_ALERT\",\n                    message: \"Delete product success\",\n                    typeMessage: \"success\",\n                })\n            })\n            .catch(err => {\n                dispatch({\n                    type: \"HIDE_ALERT\",\n                })\n                dispatch({\n                    type: \"SHOW_ALERT\",\n                    message: \"Something happened, restart and try again\",\n                    typeMessage: \"warning\",\n                })\n            })\n        \n        // Get hết các cái join của sản phẩm\n        var allJoinMatch = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": row._id.storeID,\n                \"_id.productID\": row._id.productID,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, \n        {\n            params: {...data1}\n        })\n            .then(res => {\n                allJoinMatch = res.data.data;\n            })\n            .catch(err => {\n                dispatch({\n                    type: \"HIDE_ALERT\",\n                })\n                dispatch({\n                    type: \"SHOW_ALERT\",\n                    message: \"Something happened, restart and try again\",\n                    typeMessage: \"warning\",\n                })\n            })\n        console.log(allJoinMatch);\n        // Xoá các join liên quan đến sản phẩm\n        var allProductJoin = [];\n        for(var i = 0 ; i < allJoinMatch.length; i++)\n        {\n            allProductJoin.push({\n                productID: row._id.productID,\n                typeID: allJoinMatch[i]._id.typeID,\n                importDate: allJoinMatch[i]._id.importDate,\n                storeID: row._id.storeID,\n            });\n        }\n        const dataJoin = {\n            token: localStorage.getItem('token'),\n            productJoinTypes: allProductJoin,      \n        }\n\n        console.log(dataJoin);\n\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\n            .then(res => {\n                console.log(\"delete join success\");\n            })\n            .catch(err => {\n                dispatch({\n                    type: \"HIDE_ALERT\",\n                })\n                dispatch({\n                    type: \"SHOW_ALERT\",\n                    message: \"Something happened, restart and try again\",\n                    typeMessage: \"warning\",\n                })\n            })\n        dispatch({\n            type: \"DELETE_PRODUCT\",\n            data: row,\n        });\n    }\n\n    const calculateDay = (dateString1, dateString2) =>\n    {\n        // console.log(\"dateString1\", dateString1);\n        // console.log(\"dateString2\", dateString2);\n        if(dateString1.indexOf('T') != -1)\n        {\n            dateString1 = dateString1.substring(0, dateString1.indexOf('T'));\n        }\n        var time = (\n            (new Date(dateString1)).setHours(0, 0, 0) \n                - \n            (new Date(dateString2)).setHours(0,0,0)\n            )\n            /(1000 * 60 * 60 * 24);\n        if(time > 0) return time;\n        else return <lable style={{color: 'red'}}>'Product is expired!'</lable>;\n    }\n\n    const getCurrentDateTimeString = () => {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    return (\n        <React.Fragment>\n            <TableRow style={{ borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: '#90a4ae #90a4ae transparent #90a4ae' }} sx={{ '& > *': { borderBottom: 'unset' } }}>\n                {/* <TableCell>\n                    <Checkbox {...label} checked={statusSelectReplace} onChange={(e) => ChangeCheckbox(e, row.MAHD)} color=\"default\" />\n                </TableCell> */}\n                <TableCell>\n                    <IconButton\n                        aria-label=\"expand row\"\n                        size=\"small\"\n                        onClick={() => setOpen(!open)}\n                    >\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {row._id.productID}\n                </TableCell>\n                <TableCell align=\"right\">{row.name}</TableCell>\n                <TableCell align=\"right\">\n                    <div style={{display: 'flex', justifyContent:'flex-end'}}>\n                        {\n                            row.typeIDList.map((typeID) => \n                                <label style={{\n                                        backgroundColor: '#088F8F', \n                                        color: 'white', \n                                        padding: '4px 8px', \n                                        borderRadius:'4px',\n                                        marginLeft: 10\n                                    }}>\n                                    {getTypeNamebyTypeID(typeID)}\n                                </label>\n                            )\n                        }\n                    </div>\n                </TableCell>\n                <TableCell align=\"right\">{row.quantity + ' (' + row.unit + ')'}</TableCell>\n                <TableCell align=\"right\">{row.remain + ' (' + row.unit + ')'}</TableCell>\n                <TableCell align=\"right\">\n                    <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\n                        {\n                            Object.keys(regulation).length == 0 ?\n                                <div>{row.sellPrice}</div> :\n                                regulation.currency == 'vnd' ?\n                                    <div>{row.sellPrice}</div> :\n                                    <div>{(row.sellPrice / regulation.exchangeRate).toFixed(2)}</div>\n                        }\n\n                        <div style={{ marginLeft: 4 }}>\n                            {\n                                (Object.keys(regulation).length == 0)\n                                    ? ' VNĐ' :\n                                    (regulation.currency == 'vnd' ? ' VNĐ' : ' $')\n                            }\n                        </div>\n                    </div>\n                </TableCell>\n            </TableRow>\n            <TableRow style={{ borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: 'transparent #90a4ae #90a4ae #90a4ae' }}>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={12}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Divider></Divider>\n                        <label style={{ fontWeight: 700, marginTop: 20, fontSize: 16, marginLeft: 10 }}>Product detail</label>\n                        <Grid container>\n                            <Grid item md={2}>\n                                {\n                                    row.imgUrl == \"none\"\n                                        ? <div style={{ width: '100px', height: '100px', objectFit: 'cover', margin: 10 }}><img src={GoodImage} style={{ width: '100px', height: '100px', objectFit: 'cover' }} /></div>\n\n                                        : <div style={{ width: '100px', height: '100px', objectFit: 'cover', margin: 10 }}><Image style={{ width: '100px', height: '100px', objectFit: 'cover' }} cloudName=\"databaseimg\" publicId={row.imgUrl}>{row.imgUrl}</Image></div>\n                                }\n                            </Grid>\n                            <Grid item md={10}>\n                                <Grid container>\n                                    <Grid item md={6}>\n                                        <div style={{ display: 'flex' , marginTop: 10}}>\n                                            <div style={{ fontWeight: 700, marginRight: 8, marginLeft: 20 }}>\n                                                {'Import price:'}\n                                            </div>\n                                            {\n                                                Object.keys(regulation).length == 0 ?\n                                                    <div>{row.importPrice}</div> :\n                                                    regulation.currency == 'vnd' ?\n                                                        <div>{row.importPrice}</div> :\n                                                        <div>{(row.importPrice / regulation.exchangeRate).toFixed(2)}</div>\n                                            }\n                                            <div style={{ marginLeft: 4 }}>\n                                                {\n                                                    (Object.keys(regulation).length == 0)\n                                                        ? ' VNĐ' :\n                                                        (regulation.currency == 'vnd' ? ' VNĐ' : ' $')\n                                                }\n                                            </div>\n                                        </div>\n                                    </Grid>\n                                    <Grid item md={6}>\n                                        <div style={{dislay: 'flex', marginTop: 10}}>\n                                            <lable style={{ fontWeight: 700, marginRight: 8, marginLeft: 20 }}>\n                                                Expired Day: \n                                            </lable>\n                                            <label>\n                                                {row.expires == null ? '' : row.expires.indexOf('T') == -1 ? row.expires : row.expires.substring(0, row.expires.indexOf('T'))}\n                                            </label>\n                                        </div>\n                                    </Grid>\n                                    <Grid item md={6}>\n                                        <div style={{dislay: 'flex', marginTop: 10}}>\n                                            <lable style={{ fontWeight: 700, marginRight: 8 , marginLeft: 18 }}>\n                                                Sold quantity: \n                                            </lable>\n                                            <label>\n                                                {row.quantity - row.remain}\n                                            </label>\n                                        </div>\n                                    </Grid>\n                                    <Grid item md={6}>\n                                        <div style={{dislay: 'flex', marginTop: 10}}>\n                                            <lable style={{ fontWeight: 700, marginRight: 8, marginLeft: 20 }}>\n                                                Day before expired: \n                                            </lable>\n                                            <label>\n                                                {calculateDay(row.expires.indexOf('T') == -1 ? row.expires : row.expires.substring(0, row.expires.indexOf('T')), getCurrentDateTimeString())}\n                                            </label>\n                                        </div>\n                                    </Grid>\n                                    <Grid item md={6}>\n                                        <div style={{dislay: 'flex', marginTop: 10}}>\n                                            <lable style={{ fontWeight: 700, marginRight: 8, marginLeft: 20 }}>\n                                                Profit per product: \n                                            </lable>\n                                            <label> \n                                                {\n                                                    Object.keys(regulation).length == 0 ?\n                                                        <div>{(row.sellPrice - row.importPrice)}</div> :\n                                                        regulation.currency == 'vnd' ?\n                                                            <div>{(row.sellPrice - row.importPrice)}</div> :\n                                                            <div>{((row.sellPrice - row.importPrice) / regulation.exchangeRate).toFixed(2)}</div>\n                                                }\n                                                \n                                            </label>\n                                            <label style={{ marginLeft: 4 }}>\n                                                {\n                                                    (Object.keys(regulation).length == 0)\n                                                        ? ' VNĐ' :\n                                                        (regulation.currency == 'vnd' ? ' VNĐ' : ' $')\n                                                }\n                                            </label>\n                                        </div>\n                                    </Grid>\n                                    <Grid item md={6}>\n                                        <div style={{dislay: 'flex', marginTop: 10}}>\n                                            <lable style={{ fontWeight: 700, marginRight: 8, marginLeft: 20 }}>\n                                                Real profit: \n                                            </lable>\n                                            <label> \n                                                {\n                                                    Object.keys(regulation).length == 0 ?\n                                                        <div>{(row.sellPrice - row.importPrice)*(row.quantity - row.remain)}</div> :\n                                                        regulation.currency == 'vnd' ?\n                                                            <div>{(row.sellPrice - row.importPrice)*(row.quantity - row.remain)}</div> :\n                                                            <div>{((row.sellPrice - row.importPrice)*(row.quantity - row.remain) / regulation.exchangeRate).toFixed(2)}</div>\n                                                }\n                                                \n                                            </label>\n                                            <label style={{ marginLeft: 4 }}>\n                                                {\n                                                    (Object.keys(regulation).length == 0)\n                                                        ? ' VNĐ' :\n                                                        (regulation.currency == 'vnd' ? ' VNĐ' : ' $')\n                                                }\n                                            </label>\n                                        </div>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n                        {/* Khu này dành cho sửa xoá các kiểu */}\n                        <Grid style={{ marginBottom: '10px' }} item md={12} xs={12}>\n                            <Grid style={{ justifyContent: 'end' }} container>\n                                <Grid style={{ justifyContent: 'end' }} item md={2} xs={2}>\n                                    <Button onClick={() => editProduct(row)} style={{ fontWeight: '700', fontSize: '0.6rem', backgroundColor: '#00bfa5', color: 'white' }}>\n                                        <AiOutlineEdit style={{ marginRight: '5px', fontSize: '1rem', transform: 'translateY(-5%)' }}></AiOutlineEdit>\n                                        Edit\n                                    </Button>\n                                </Grid> \n                                <Grid style={{ justifyContent: 'end' }} item md={2} xs={2}>\n                                    <Button onClick={() => setOpenModal(true)} style={{ fontWeight: '700', fontSize: '0.6rem', backgroundColor: red[400], color: 'white' }}>\n                                        <FiXSquare style={{ marginRight: '5px', fontSize: '1rem', transform: 'translateY(-5%)' }}></FiXSquare>\n                                        Delete\n                                    </Button>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n            <Modal\n                open={openModal}\n                onClose={handleClose}\n                aria-labelledby=\"parent-modal-title\"\n                aria-describedby=\"parent-modal-description\"\n            >\n                <Box sx={{ ...style, width: 400 }}>\n                    <h2 style={{ textAlign: 'center' }} id=\"parent-modal-title\">Are you sure to delete?</h2>\n                    <Grid container spacing={2}>\n                        <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\n                            <Button onClick={() => deleteProduct(row)} style={{ color: 'white', backgroundColor: red[500] }}>DELETE</Button>\n                        </Grid>\n                        <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\n                            <Button onClick={() => setOpenModal(false)} style={{ backgroundColor: lightBlue[100] }}>CANCEL</Button>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Modal>\n        </React.Fragment>\n    );\n}\n\nRow.propTypes = {\n    row: PropTypes.shape({\n        calories: PropTypes.number.isRequired,\n        carbs: PropTypes.number.isRequired,\n        fat: PropTypes.number.isRequired,\n        history: PropTypes.arrayOf(\n            PropTypes.shape({\n                amount: PropTypes.number.isRequired,\n                customerId: PropTypes.string.isRequired,\n                date: PropTypes.string.isRequired,\n            }),\n        ).isRequired,\n        name: PropTypes.string.isRequired,\n        price: PropTypes.number.isRequired,\n        protein: PropTypes.number.isRequired,\n    }).isRequired,\n};\n\nclass GoodTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            update: false\n        }\n        console.log(\"this.props.listProduct.state\", this.props.listProduct.state);\n    }\n\n    getTypeNamebyTypeID(typeID) {\n        var typeName = \"Null\";\n        for (var i = 0; i < this.props.typeProduct.length; i++) {\n            if (this.props.typeProduct[i]._id.typeID == typeID) {\n                typeName = this.props.typeProduct[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <TableContainer id='scroll-bar' style={{ maxHeight: '100vh', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', overflow: 'auto', overflowX: 'hidden' }} component={Paper}>\n                <Table aria-label=\"collapsible table\">\n                    <TableHead>\n                        <TableRow style={{ backgroundColor: 'black', color: 'white' }}>\n                            <TableCell></TableCell>\n                            <TableCell >Product ID</TableCell>\n                            <TableCell align=\"right\">Name</TableCell>\n                            <TableCell align=\"right\">Type</TableCell>\n                            <TableCell align=\"right\">Quantity</TableCell>\n                            <TableCell align=\"right\">Remain</TableCell>\n                            <TableCell align=\"right\">Sell Price</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {/* {listRecieptReplace ?\n                            listRecieptReplace.map((row) => (\n                                <Row key={row.MAHD} row={row} />\n                            )) : null\n                        } */}\n                        {\n                            this.props.listProduct.state == undefined ? (null) :\n                                this.props.listProduct.state.map((product) => (\n                                    product == undefined ? null :\n                                        <Row key={product._id.productID} row={product} />\n                                ))\n                        }\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        infoUser: state.infoUser,\n        isAddTypeStatus: state.isAddTypeStatus,\n        confirmStatus: state.confirmStatus,\n        listProduct: state.listProduct,\n        typeProduct: state.typeProduct,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        deleteProductToRedux: (data) => {\n            dispatch({\n                type: \"DELETE_PRODUCT\",\n                data: data,\n            }); \n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, { withTheme: true }))(GoodTable));\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/SortByTable.js",["1490"],"import React from 'react';\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\nimport { useSelector, useDispatch } from 'react-redux'\nimport TextField from '@mui/material/TextField';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\n\n\nfunction SortByTable(props) {\n    const dispatch = useDispatch()\n    const typeByDate = useSelector(state => state.typeByDate)\n    const [value, setValue] = React.useState(new Date());\n    const [value1, setValue1] = React.useState('all');\n    const darkmode = useSelector(state => state.statusDarkmode)\n\n    const selectDate = () => {\n        const data = {\n            type: \"typeByDate\",\n            day: value.getDate(),\n            month: value.getMonth() + 1,\n            year: value.getFullYear(),\n        }\n        dispatch({\n            type: \"TYPE_BY_DATE\",\n            typeByDate: data,\n        })\n    }\n\n    const changeTime = (newValue) => {\n        if (newValue) {\n            setValue(newValue);\n        }\n        if (typeByDate.type === 'typeByDate') {\n            const data = {\n                type: \"typeByDate\",\n                day: newValue.getDate(),\n                month: newValue.getMonth() + 1,\n                year: newValue.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        }\n    }\n\n    const selectType = () => {\n        if (value1 === 'all') {\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: { type: 'all' },\n            })\n        } else if (value1 === 'yesterday') {\n            let yesterday = new Date()\n            const data = {\n                type: \"yesterday\",\n                day: yesterday.getDate() - 1,\n                month: yesterday.getMonth() + 1,\n                year: yesterday.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        } else if (value1 === 'today') {\n            let today = new Date()\n            const data = {\n                type: \"today\",\n                day: today.getDate(),\n                month: today.getMonth() + 1,\n                year: today.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        } else if (value1 === 'lastmonth') {\n            let today = new Date()\n            const data = {\n                type: \"lastmonth\",\n                month: today.getMonth(),\n                year: today.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        } else if (value1 === 'lastyear') {\n            let today = new Date()\n            const data = {\n                type: \"lastyear\",\n                year: today.getFullYear() - 1,\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        }\n    }\n\n    const changeType = (e) => {\n        setValue1(e.target.value)\n        if (typeByDate.type === 'all' || typeByDate.type === 'yesterday' || typeByDate.type === 'today' || typeByDate.type === 'lastmonth' || typeByDate.type === 'lastyear') {\n            if (e.target.value === 'all') {\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: { type: 'all' },\n                })\n            }\n            if (e.target.value === 'yesterday') {\n                let yesterday = new Date()\n                let data = {\n                    type: \"yesterday\",\n                    day: yesterday.getDate() - 1,\n                    month: yesterday.getMonth() + 1,\n                    year: yesterday.getFullYear(),\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n            if (e.target.value === 'today') {\n                let today = new Date()\n                const data = {\n                    type: \"today\",\n                    day: today.getDate(),\n                    month: today.getMonth() + 1,\n                    year: today.getFullYear(),\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n            if (e.target.value === 'lastmonth') {\n                let today = new Date()\n                const data = {\n                    type: \"lastmonth\",\n                    month: today.getMonth(),\n                    year: today.getFullYear(),\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n            if (e.target.value === 'lastyear') {\n                let today = new Date()\n                const data = {\n                    type: \"lastyear\",\n                    year: today.getFullYear() - 1,\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n        }\n    }\n\n    React.useEffect(() => {\n        dispatch({\n            type: \"TYPE_BY_DATE\",\n            typeByDate: { type: 'all' },\n        })\n    }, [])\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item md={12} sm={12}  >\n                <Card>\n                    <CardHeader style={{ height: 56, color: !darkmode ? '#0091ea' :'white', backgroundColor: !darkmode ? '#efeeef' :'#455a64'}} title=\"Sort\" />\n                    <Divider></Divider>\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                <Grid item md={12} sm={12}>\n                                    <div className=\"form-check\">\n                                        <input onClick={() => selectType()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault2\" defaultChecked />\n                                        <FormControl fullWidth>\n                                            <InputLabel id=\"demo-simple-select-label\">Sort by</InputLabel>\n                                            <Select\n                                                labelId=\"demo-simple-select-label\"\n                                                id=\"demo-simple-select\"\n                                                value={value1}\n                                                label=\"Option\"\n                                                onChange={(e) => changeType(e)}\n                                                style={{height: 40}}\n                                            >\n                                                <MenuItem style={{height: 40}} value='all'>All</MenuItem>\n                                                <MenuItem value='today'>Today</MenuItem>\n                                                <MenuItem value='yesterday'>Yesterday</MenuItem>\n                                                <MenuItem value='lastmonth'>Last month</MenuItem>\n                                                <MenuItem value='lastyear'>Last year</MenuItem>\n                                            </Select>\n                                        </FormControl>\n                                    </div>\n                                </Grid>\n                                <Grid item md={12} sm={12}>\n                                    <div className=\"form-check\">\n                                        <input onClick={() => selectDate()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\" />\n                                        <DesktopDatePicker\n                                            label=\"Date\"\n                                            value={value}\n                                            minDate={new Date('2017-01-01')}\n                                            onChange={(newValue) => changeTime(newValue)}\n                                            renderInput={(params) => <TextField {...params} />} \n                                        />\n                                    </div>\n                                </Grid>\n                            </LocalizationProvider>\n                        </Grid>\n                    </CardContent>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default SortByTable;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/ExcelInstruction.js",["1491","1492","1493","1494","1495","1496","1497"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport axios from 'axios';\n\nclass ExcelInstruction extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    cancel = () => {\n        this.props.exit();\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', minWidth: '600px',width: '70%', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Instruction\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <Grid item md={12} xs={12} style={{margin: '0px 12px'}}>\n                                <label style={{fontWeight: 700, display: 'block'}}>Note:</label>\n                                - Uploaded file must have the column exactly like the template file<br/>\n                                - Product ID in the file can be changed<br/>\n                                - You can separate to add multiple types by adding ' || ' between the type\n                            </Grid>\n                            <Grid item md={12} xs={12} style={{margin: '0px 12px'}}>\n                                <label style={{fontWeight: 700, display: 'block'}}>Step by step:</label>\n                                - Click in the upload excel button<br/>\n                                - Choose a excel file and click OK<br/>\n                                - Wait for the alert or fix excel file, upload again if your excel file was error\n                            </Grid>\n                            {\n                                Object.keys(this.props.regulation).length == 0 ? null :\n                                <Grid item md={12} xs={12} style={{margin: '0px 12px'}}>\n                                    <label style={{fontWeight: 700, display: 'block'}}>Regulation:</label>\n                                    - The expiration date must be at least {this.props.regulation.minExpiredProduct} day(s) older than the import date \n                                </Grid>\n                            }\n                        </Grid>\n                        <a  style={{margin: '0px 12px'}}\n                            target=\"_blank\" rel=\"noopener noreferrer\"\n                            href=\"https://docs.google.com/spreadsheets/d/1bk99RhxehlZk-1B4c93rIZ7MvUNlWO7F/edit?usp=sharing&ouid=107720637610074440067&rtpof=true&sd=true\">\n                            Template link here !\n                        </a>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', p: 2 }}>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\n                            Exit    \n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        confirmStatus: state.confirmStatus,\n        deleteStatus: state.deleteStatus,\n        confirmCode: state.confirmCode,\n        regulation: state.regulationReducer,\n        statusDarkmode: state.statusDarkmode,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        exit: () => {\n            dispatch({\n                type: \"CHANGE_EXCEL_INSTRUCTION_STATUS\",\n            });\n        },\n\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExcelInstruction);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/TypeManager.js",["1498","1499","1500","1501","1502","1503","1504","1505"],"import React from 'react';\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\nimport { useSelector, useDispatch } from 'react-redux'\nimport TextField from '@mui/material/TextField';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\nimport Button from '@mui/material/Button';\nimport { IoIosAdd } from \"react-icons/io\";\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nfunction TypeManager(props) {\n    const dispatch = useDispatch()\n    const darkmode = useSelector(state => state.statusDarkmode)\n\n    const handleEditType = () => {\n        dispatch({\n            type: \"CHANGE_EDIT_TYPE_STATUS\",\n        });\n    }\n\n    const handleAdd = () => {\n        dispatch({\n            type: \"SET_ADD_TYPE_STATUS\",\n        });\n        dispatch({\n            type: \"CHANGE_ADD_TYPE_STATUS\",\n        });\n    }\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item md={12} sm={12}  >\n                <Card>\n                    <CardHeader style={{ height: 56, color: !darkmode ? '#0091ea' :'white', backgroundColor: !darkmode ? '#efeeef' :'#455a64'}} title=\"Type Manager\" />\n                    <Divider></Divider>\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                <Grid item md={6} sm={12}>\n                                    <Button style={{ backgroundColor: '#0d6efd', width:'100%' }} onClick={() => handleAdd()} variant=\"contained\">\n                                        <BiPlusMedical color={'white'} size={16} style={{marginRight: 4}}/>\n                                        add type\n                                    </Button>\n                                </Grid>\n                                <Grid item md={6} sm={12}>\n                                    <Button style={{ backgroundColor: 'yellowgreen', width:'100%' }} onClick={() => handleEditType()} variant=\"contained\">\n                                        All types\n                                    </Button>\n                                </Grid>\n                            </LocalizationProvider>\n                        </Grid>\n                    </CardContent>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default TypeManager;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/TypeInfo.js",["1506","1507","1508","1509","1510","1511","1512"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Modal} from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit} from 'react-icons/bi';\nimport { TiDelete } from \"react-icons/ti\";\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport axios from 'axios';\n\nconst style = {\n    position: 'absolute',\n    top: '50%',\n    left: '50%',\n    transform: 'translate(-50%, -50%)',\n    width: 400,\n    bgcolor: 'background.paper',\n    border: '1px solid #000',\n    borderRadius: '5px',\n    boxShadow: 24,\n    pt: 2,\n    px: 4,\n    pb: 3,\n};\n\nclass TypeInfo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            change: false,\n            openModal: false\n        }\n    }\n\n    edit = (type) => {\n        // this.props.setEditTypeStatus();\n        this.props.typeToUpdate(type);\n        // this.props.changeEditTypeStatus();\n        this.props.changeStatusUpdateType();\n    }\n\n    async getAllTypeList(){\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n\n        this.props.getProductType(result);\n    }\n\n    async delete(type){\n        console.log(\"type\", type);\n        this.handleClose();\n        this.props.changeEditTypeStatus();\n        const data = {\n            token: localStorage.getItem('token'),\n            productTypes:\n            [\n                {\n                    typeID: type._id.typeID,\n                    storeID: type._id.storeID\n                }\n            ]\n                \n        }\n        await axios.delete(`http://localhost:5000/api/product/type`,{data: data})\n            .then(res => {\n                console.log(\"delete success\");\n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n                console.log('bug when delete type',err);\n            })\n        this.props.deleteTypeFromRedux(data.productTypes[0]);\n        \n        // Ở đây mình phải cập nhật join nữa\n        // Phải get tất cả cái join mà có cái type là type hiện tại\n\n\n        var allJoinMatch = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n                \"_id.typeID\": type._id.typeID,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, \n        {\n            params: {...data1}\n        })\n            .then(res => {\n                allJoinMatch = res.data.data;\n            })\n            .catch(err => {\n                console.log('Bug when get join', err);\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n\n        var allProductJoin = [];\n        for(var i = 0 ; i < allJoinMatch.length; i++)\n        {\n            allProductJoin.push({\n                productID: allJoinMatch[i]._id.productID,\n                typeID: type._id.typeID,\n                importDate: allJoinMatch[i]._id.importDate,\n                storeID: this.props.infoUser.email,\n            });\n        }\n        \n        const dataJoin = {\n            token: localStorage.getItem('token'),\n            productJoinTypes: allProductJoin,      \n        }\n\n        console.log(dataJoin);\n\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\n            .then(res => {\n                console.log(\"delete join success\");\n            })\n            .catch(err => {\n                this.props.hideAlert();\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            })\n        \n        // Cập nhật các redux khi xoá join\n        this.props.deleteTypeProductInProduct(type._id.typeID);\n\n\n        // this.getAllTypeList();\n        console.log('this.typeProduct', this.props.typeProduct)\n        this.setState({change: !this.state.change})\n        \n        this.props.hideAlert();\n\t    this.props.showAlert(\"Delete type success   \",\"success\");\n    }\n\n    handleClose() {\n        this.setState({openModal: false});\n    }\n\n    openModal() {\n        this.setState({openModal: true});\n    }\n\n    type = this.props.type;\n\n    render() {\n        return (\n            <Grid md={12}>\n                <Grid container>\n                    <Grid item md={10} style={{padding: 4, paddingLeft: 20}}>\n                        <span>{this.type._id.typeID + ' '+ this.type.name}</span>\n                    </Grid>\n                    <Grid item md={2}>\n                        <BiEdit  size={20} color={'yellowgreen'}onClick={() => this.edit(this.type)}/>\n                        <TiDelete size={20} color={'red'} onClick={() => this.openModal()}/>\n                    </Grid>           \n                </Grid>\n                \n                <Modal\n                    open={this.state.openModal}\n                    onClose={() => this.handleClose()}\n                    aria-labelledby=\"parent-modal-title\"\n                    aria-describedby=\"parent-modal-description\"\n                >\n                    <Box sx={{ ...style, width: 400 }}>\n                        <h2 style={{ textAlign: 'center' }} id=\"parent-modal-title\">Are you sure to delete?</h2>\n                        <Grid container spacing={2}>\n                            <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\n                                <Button onClick={() => this.delete(this.type)} style={{ color: 'white', backgroundColor: '#f44336' }}>DELETE</Button>\n                            </Grid>\n                            <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\n                                <Button onClick={() => this.handleClose()} style={{ backgroundColor: '#ADD8E6' }}>CANCEL</Button>\n                            </Grid>\n                        </Grid>\n                    </Box>\n                </Modal>\n                <Divider></Divider>\n            </Grid>\n        )\n    }\n}\n\nconst mapStateToProps1 = (state, ownProps) => {\n    return {\n        editTypeStatus: state.editTypeStatus,\n        addTypeStatus: state.addTypeStatus,\n        isAddTypeStatus: state.isAddTypeStatus,\n        infoUser: state.infoUser,\n        typeProductValue: state.typeProductValue,\n        typeProduct: state.typeProduct,\n    }\n}\n\nconst mapDispatchToProps1 = (dispatch, ownProps) => {\n    return {\n        changeEditTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\n            });\n        },\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        setEditTypeStatus: () => {\n            dispatch({\n                type: \"SET_EDIT_TYPE_STATUS\",\n            })\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        typeToUpdate: (data) => {\n            dispatch({\n                type: \"UPDATE_PRODUCT_TYPE\",\n                _id: {\n                    typeID: data._id.typeID,\n                    storeID: data._id.storeID,\n                },\n                name: data.name\n            })\n        },\n        changeStatusUpdateType: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_TYPE_STATUS\",\n            }); \n        },\n        deleteTypeFromRedux: (data) => {\n            dispatch({\n                type: \"DELETE_TYPE\",\n                data: data\n            });\n            \n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        deleteTypeProductInProduct: (typeID) => {\n            dispatch({\n                type: \"DELETE_TYPE_PRODUCT\",\n                typeID: typeID\n            })\n        },\n        getProductType: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_TYPE\",\n                data: data\n            });\n        },\n        \n    }\n}\n\nexport default connect(mapStateToProps1, mapDispatchToProps1)(TypeInfo);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/addEmployeeToShiftStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/currentShiftInfoReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddEmployeeToShift.js",["1513","1514","1515","1516","1517","1518","1519","1520","1521"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel, Stack } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\nimport { GiCancel } from 'react-icons/gi'\nimport {IoMdAdd } from \"react-icons/io\";\n\nclass AddEmployeeToShiftModal extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            change: false,\n        };\n        console.log('listEmployee', this.props.listEmployee);\n        console.log('current Shift value', this.props.currentShiftValue)\n    }\n\n    \n    cancel = () => {\n        this.props.changeAddEmployeeToShiftStatus();\n    }\n\n    addEmployee = () => {\n    }\n\n    getShiftInforByID(shiftID)\n    {\n        var listShift = this.props.listShift;\n        for(var i = 0 ; i < listShift.length; i++)\n        {\n            if(listShift[i]._id.shiftID == shiftID)\n            {\n                return listShift[i].name + ' (' + listShift[i].timeFrom + '-' + listShift[i].timeEnd + ')';\n            }\n        }\n        return \"Can't get shift\";\n    }\n\n    findEmployeeInShift(employeeID)\n    {\n        var listShiftAssign = this.props.listShiftAssign;\n        // Lỗi ở chỗ thêm shift assign\n        console.log(\"listShiftAssign\", listShiftAssign);\n        for(var i = 0 ; i < listShiftAssign.length; i++)\n        {\n            if(this.props.currentShiftValue._id.shiftType._id.shiftID == listShiftAssign[i]._id.shiftType._id.shiftID \n                && this.props.currentShiftValue._id.dateInWeek == listShiftAssign[i]._id.dateInWeek\n                && listShiftAssign[i]._id.employee._id.employeeID == employeeID)\n            return true;\n        }\n        return false;\n    }\n\n    async addEmployeeToShift(employeeID) {\n        console.log(\"employeeID\", employeeID)\n        var currentShift = this.props.currentShiftValue;\n        currentShift._id.employee = {\n            _id: {\n                employeeID: employeeID,\n                storeID: this.props.infoUser.email,\n            },\n        }\n\n        const data = {\n            token: localStorage.getItem('token'),\n            shiftAssign: currentShift, \n        }\n        console.log(currentShift);\n        await axios.post(`http://localhost:5000/api/employee/shift-assign`, data)\n        .then(res => {\n            this.props.hideAlert();\n            this.props.showAlert(\"Save shift assign success\",\"success\");\n            this.props.AddShiftAssign(data.shiftAssign);\n        })\n        .catch(err => {\n            this.props.hideAlert();\n            this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\n            console.log('bug when add shift-assign',err);\n        })\n    }\n\n    render() {\n        return (\n            <form  style={{zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"All Employee To Shift\" />\n                    <Divider />\n                    <CardContent>\n\n                        <Grid container spacing={2}>\n                            <Grid item md={12}>\n                                {\"Add to shift: \"}\n                                {this.getShiftInforByID(this.props.currentShiftValue._id.shiftType._id.shiftID)}\n                                {\" in \" +this.props.currentShiftValue._id.dateInWeek}\n                            </Grid>\n                            <Grid id='scroll-bar' item md={12} xs={12} style={{\n                                    alignItems: 'center', \n                                    justifyContent: 'center', \n                                    display: 'flex', \n                                    flexDirection: 'column',\n                                    maxHeight: 200,\n                                    overflowY: 'auto',\n                                }}>\n                                    {\n                                        this.props.listEmployee.employees.map((item) =>\n                                            this.findEmployeeInShift(item._id.employeeID) ? (null) :\n                                            <Grid \n                                                onClick={() => this.addEmployeeToShift(item._id.employeeID)}\n                                                className='add-employee-to-shift-button'\n                                                style={{padding: 10, width: '100%', height: 40, borderRadius: '10px', border: '1px solid #333', marginRight: 20, display: 'flex', marginTop: 10}} item md={8}>\n                                                <div style={{marginRight: 20 , borderRadius: '100%',marginTop: 'auto', marginBottom: 'auto'}}>\n                                                    <IoMdAdd size={20}  color={'yellowgreen'} style={{marginTop: -5}}>\n                                                    </IoMdAdd>\n                                                </div>\n                                                \n                                                <label style={{marginTop: 'auto', marginBottom: 'auto'}}>\n                                                    {item._id.employeeID + ' - ' + item.lastName + ' ' + item.firstName}\n                                                </label>\n                                            </Grid> \n                                        )\n                                    }\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        <Button style={{ backgroundColor: 'red' }} onClick={() => this.cancel()} variant=\"contained\" startIcon={<GiCancel />}>\n                            Thoát\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listEmployee: state.listEmployee,\n        listSackedEmployee: state.listSackedEmployee,\n        regulation: state.regulationReducer,\n        statusDarkmode: state.statusDarkmode,\n        currentShiftValue: state.currentShiftValue,\n        listShift: state.listShift,\n        listShiftAssign: state.listShiftAssign,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        AddShiftAssign: (data) => {\n            dispatch({\n                type: \"ADD_NEW_SHIFT_ASSIGN\",\n                data: data,\n            });\n          },\n        changeAddEmployeeToShiftStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_TO_SHIFT_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        addEmployee: (data) => {\n            dispatch({\n                type: \"ADD_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEmployeeToShiftModal);\n\n               ",{"ruleId":"1522","severity":1,"message":"1523","line":10,"column":10,"nodeType":"1524","messageId":"1525","endLine":10,"endColumn":24},{"ruleId":"1526","severity":1,"message":"1527","line":13,"column":3,"nodeType":"1528","messageId":"1529","endLine":15,"endColumn":4},{"ruleId":"1522","severity":1,"message":"1530","line":24,"column":11,"nodeType":"1524","messageId":"1525","endLine":24,"endColumn":19},{"ruleId":"1531","severity":1,"message":"1532","line":35,"column":53,"nodeType":"1533","messageId":"1534","endLine":35,"endColumn":55},{"ruleId":"1535","severity":1,"message":"1536","line":48,"column":21,"nodeType":"1524","messageId":"1537","endLine":48,"endColumn":29},{"ruleId":"1535","severity":1,"message":"1538","line":49,"column":25,"nodeType":"1524","messageId":"1537","endLine":49,"endColumn":26},{"ruleId":"1531","severity":1,"message":"1532","line":51,"column":53,"nodeType":"1533","messageId":"1534","endLine":51,"endColumn":55},{"ruleId":"1535","severity":1,"message":"1536","line":65,"column":21,"nodeType":"1524","messageId":"1537","endLine":65,"endColumn":29},{"ruleId":"1535","severity":1,"message":"1538","line":66,"column":25,"nodeType":"1524","messageId":"1537","endLine":66,"endColumn":26},{"ruleId":"1531","severity":1,"message":"1532","line":68,"column":53,"nodeType":"1533","messageId":"1534","endLine":68,"endColumn":55},{"ruleId":"1535","severity":1,"message":"1536","line":85,"column":21,"nodeType":"1524","messageId":"1537","endLine":85,"endColumn":29},{"ruleId":"1535","severity":1,"message":"1538","line":86,"column":25,"nodeType":"1524","messageId":"1537","endLine":86,"endColumn":26},{"ruleId":"1531","severity":1,"message":"1532","line":23,"column":44,"nodeType":"1533","messageId":"1534","endLine":23,"endColumn":46},{"ruleId":"1535","severity":1,"message":"1536","line":37,"column":21,"nodeType":"1524","messageId":"1537","endLine":37,"endColumn":29},{"ruleId":"1535","severity":1,"message":"1538","line":38,"column":25,"nodeType":"1524","messageId":"1537","endLine":38,"endColumn":26},{"ruleId":"1531","severity":1,"message":"1532","line":40,"column":44,"nodeType":"1533","messageId":"1534","endLine":40,"endColumn":46},{"ruleId":"1531","severity":1,"message":"1532","line":38,"column":30,"nodeType":"1533","messageId":"1534","endLine":38,"endColumn":32},{"ruleId":"1535","severity":1,"message":"1536","line":56,"column":25,"nodeType":"1524","messageId":"1537","endLine":56,"endColumn":33},{"ruleId":"1535","severity":1,"message":"1538","line":57,"column":29,"nodeType":"1524","messageId":"1537","endLine":57,"endColumn":30},{"ruleId":"1531","severity":1,"message":"1532","line":42,"column":30,"nodeType":"1533","messageId":"1534","endLine":42,"endColumn":32},{"ruleId":"1535","severity":1,"message":"1536","line":53,"column":21,"nodeType":"1524","messageId":"1537","endLine":53,"endColumn":29},{"ruleId":"1535","severity":1,"message":"1538","line":54,"column":25,"nodeType":"1524","messageId":"1537","endLine":54,"endColumn":26},{"ruleId":"1539","severity":1,"message":"1540","line":5,"column":46,"nodeType":"1541","messageId":"1542","endLine":5,"endColumn":48},{"ruleId":"1539","severity":1,"message":"1543","line":41,"column":45,"nodeType":"1541","messageId":"1544","endLine":41,"endColumn":47},{"ruleId":"1539","severity":1,"message":"1540","line":48,"column":48,"nodeType":"1541","messageId":"1542","endLine":48,"endColumn":50},{"ruleId":"1539","severity":1,"message":"1543","line":21,"column":45,"nodeType":"1541","messageId":"1544","endLine":21,"endColumn":47},{"ruleId":"1531","severity":1,"message":"1532","line":38,"column":30,"nodeType":"1533","messageId":"1534","endLine":38,"endColumn":32},{"ruleId":"1535","severity":1,"message":"1536","line":52,"column":25,"nodeType":"1524","messageId":"1537","endLine":52,"endColumn":33},{"ruleId":"1535","severity":1,"message":"1538","line":53,"column":29,"nodeType":"1524","messageId":"1537","endLine":53,"endColumn":30},{"ruleId":"1535","severity":1,"message":"1536","line":78,"column":21,"nodeType":"1524","messageId":"1537","endLine":78,"endColumn":29},{"ruleId":"1535","severity":1,"message":"1538","line":79,"column":25,"nodeType":"1524","messageId":"1537","endLine":79,"endColumn":26},{"ruleId":"1531","severity":1,"message":"1545","line":81,"column":61,"nodeType":"1533","messageId":"1534","endLine":81,"endColumn":63},{"ruleId":"1531","severity":1,"message":"1545","line":11,"column":44,"nodeType":"1533","messageId":"1534","endLine":11,"endColumn":46},{"ruleId":"1546","severity":1,"message":"1547","line":101,"column":30,"nodeType":"1548","messageId":"1549","endLine":101,"endColumn":31,"suggestions":"1550"},{"ruleId":"1546","severity":1,"message":"1547","line":101,"column":46,"nodeType":"1548","messageId":"1549","endLine":101,"endColumn":47,"suggestions":"1551"},{"ruleId":"1546","severity":1,"message":"1547","line":93,"column":28,"nodeType":"1548","messageId":"1549","endLine":93,"endColumn":29,"suggestions":"1552"},{"ruleId":"1546","severity":1,"message":"1547","line":93,"column":44,"nodeType":"1548","messageId":"1549","endLine":93,"endColumn":45,"suggestions":"1553"},{"ruleId":"1522","severity":1,"message":"1530","line":32,"column":17,"nodeType":"1524","messageId":"1525","endLine":32,"endColumn":25},{"ruleId":"1546","severity":1,"message":"1547","line":132,"column":28,"nodeType":"1548","messageId":"1549","endLine":132,"endColumn":29,"suggestions":"1554"},{"ruleId":"1546","severity":1,"message":"1547","line":132,"column":44,"nodeType":"1548","messageId":"1549","endLine":132,"endColumn":45,"suggestions":"1555"},{"ruleId":"1556","severity":1,"message":"1557","line":307,"column":9,"nodeType":"1558","messageId":"1534","endLine":307,"endColumn":25},{"ruleId":"1522","severity":1,"message":"1559","line":9,"column":10,"nodeType":"1524","messageId":"1525","endLine":9,"endColumn":19},{"ruleId":"1522","severity":1,"message":"1560","line":14,"column":8,"nodeType":"1524","messageId":"1525","endLine":14,"endColumn":13},{"ruleId":"1561","severity":1,"message":"1562","line":209,"column":29,"nodeType":"1563","endLine":209,"endColumn":189},{"ruleId":"1531","severity":1,"message":"1545","line":217,"column":45,"nodeType":"1533","messageId":"1534","endLine":217,"endColumn":47},{"ruleId":"1531","severity":1,"message":"1545","line":230,"column":45,"nodeType":"1533","messageId":"1534","endLine":230,"endColumn":47},{"ruleId":"1564","severity":1,"message":"1565","line":295,"column":25,"nodeType":"1563","endLine":300,"endColumn":26},{"ruleId":"1522","severity":1,"message":"1566","line":2,"column":10,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":18},{"ruleId":"1522","severity":1,"message":"1567","line":3,"column":8,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":17},{"ruleId":"1522","severity":1,"message":"1568","line":4,"column":10,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":17},{"ruleId":"1522","severity":1,"message":"1569","line":6,"column":8,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":17},{"ruleId":"1522","severity":1,"message":"1570","line":18,"column":10,"nodeType":"1524","messageId":"1525","endLine":18,"endColumn":31},{"ruleId":"1522","severity":1,"message":"1571","line":22,"column":8,"nodeType":"1524","messageId":"1525","endLine":22,"endColumn":19},{"ruleId":"1522","severity":1,"message":"1572","line":24,"column":25,"nodeType":"1524","messageId":"1525","endLine":24,"endColumn":31},{"ruleId":"1522","severity":1,"message":"1573","line":25,"column":10,"nodeType":"1524","messageId":"1525","endLine":25,"endColumn":42},{"ruleId":"1531","severity":1,"message":"1545","line":107,"column":53,"nodeType":"1533","messageId":"1534","endLine":107,"endColumn":55},{"ruleId":"1522","severity":1,"message":"1574","line":175,"column":13,"nodeType":"1524","messageId":"1525","endLine":175,"endColumn":17},{"ruleId":"1531","severity":1,"message":"1532","line":211,"column":29,"nodeType":"1533","messageId":"1534","endLine":211,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1532","line":219,"column":29,"nodeType":"1533","messageId":"1534","endLine":219,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":246,"column":31,"nodeType":"1533","messageId":"1534","endLine":246,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1545","line":266,"column":62,"nodeType":"1533","messageId":"1534","endLine":266,"endColumn":64},{"ruleId":"1531","severity":1,"message":"1545","line":267,"column":62,"nodeType":"1533","messageId":"1534","endLine":267,"endColumn":64},{"ruleId":"1531","severity":1,"message":"1545","line":285,"column":29,"nodeType":"1533","messageId":"1534","endLine":285,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":303,"column":29,"nodeType":"1533","messageId":"1534","endLine":303,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":315,"column":23,"nodeType":"1533","messageId":"1534","endLine":315,"endColumn":25},{"ruleId":"1531","severity":1,"message":"1545","line":316,"column":23,"nodeType":"1533","messageId":"1534","endLine":316,"endColumn":25},{"ruleId":"1531","severity":1,"message":"1545","line":317,"column":21,"nodeType":"1533","messageId":"1534","endLine":317,"endColumn":23},{"ruleId":"1531","severity":1,"message":"1532","line":324,"column":24,"nodeType":"1533","messageId":"1534","endLine":324,"endColumn":26},{"ruleId":"1531","severity":1,"message":"1545","line":342,"column":30,"nodeType":"1533","messageId":"1534","endLine":342,"endColumn":32},{"ruleId":"1531","severity":1,"message":"1545","line":360,"column":86,"nodeType":"1533","messageId":"1534","endLine":360,"endColumn":88},{"ruleId":"1531","severity":1,"message":"1545","line":375,"column":104,"nodeType":"1533","messageId":"1534","endLine":375,"endColumn":106},{"ruleId":"1531","severity":1,"message":"1545","line":389,"column":96,"nodeType":"1533","messageId":"1534","endLine":389,"endColumn":98},{"ruleId":"1531","severity":1,"message":"1545","line":404,"column":53,"nodeType":"1533","messageId":"1534","endLine":404,"endColumn":55},{"ruleId":"1531","severity":1,"message":"1532","line":440,"column":30,"nodeType":"1533","messageId":"1534","endLine":440,"endColumn":32},{"ruleId":"1531","severity":1,"message":"1532","line":440,"column":56,"nodeType":"1533","messageId":"1534","endLine":440,"endColumn":58},{"ruleId":"1531","severity":1,"message":"1545","line":477,"column":54,"nodeType":"1533","messageId":"1534","endLine":477,"endColumn":56},{"ruleId":"1531","severity":1,"message":"1545","line":535,"column":55,"nodeType":"1533","messageId":"1534","endLine":535,"endColumn":57},{"ruleId":"1531","severity":1,"message":"1545","line":538,"column":53,"nodeType":"1533","messageId":"1534","endLine":538,"endColumn":55},{"ruleId":"1531","severity":1,"message":"1545","line":560,"column":40,"nodeType":"1533","messageId":"1534","endLine":560,"endColumn":42},{"ruleId":"1531","severity":1,"message":"1532","line":566,"column":31,"nodeType":"1533","messageId":"1534","endLine":566,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1545","line":586,"column":44,"nodeType":"1533","messageId":"1534","endLine":586,"endColumn":46},{"ruleId":"1531","severity":1,"message":"1532","line":591,"column":39,"nodeType":"1533","messageId":"1534","endLine":591,"endColumn":41},{"ruleId":"1535","severity":1,"message":"1575","line":593,"column":29,"nodeType":"1524","messageId":"1537","endLine":593,"endColumn":51},{"ruleId":"1535","severity":1,"message":"1575","line":619,"column":29,"nodeType":"1524","messageId":"1537","endLine":619,"endColumn":51},{"ruleId":"1535","severity":1,"message":"1576","line":689,"column":17,"nodeType":"1524","messageId":"1537","endLine":689,"endColumn":18},{"ruleId":"1535","severity":1,"message":"1576","line":707,"column":17,"nodeType":"1524","messageId":"1537","endLine":707,"endColumn":18},{"ruleId":"1561","severity":1,"message":"1562","line":749,"column":69,"nodeType":"1563","endLine":749,"endColumn":138},{"ruleId":"1522","severity":1,"message":"1577","line":2,"column":8,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":12},{"ruleId":"1522","severity":1,"message":"1578","line":3,"column":8,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":13},{"ruleId":"1522","severity":1,"message":"1579","line":4,"column":8,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":17},{"ruleId":"1522","severity":1,"message":"1580","line":5,"column":8,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":22},{"ruleId":"1522","severity":1,"message":"1581","line":7,"column":10,"nodeType":"1524","messageId":"1525","endLine":7,"endColumn":22},{"ruleId":"1522","severity":1,"message":"1582","line":13,"column":5,"nodeType":"1524","messageId":"1525","endLine":13,"endColumn":10},{"ruleId":"1522","severity":1,"message":"1583","line":14,"column":5,"nodeType":"1524","messageId":"1525","endLine":14,"endColumn":11},{"ruleId":"1522","severity":1,"message":"1584","line":16,"column":5,"nodeType":"1524","messageId":"1525","endLine":16,"endColumn":13},{"ruleId":"1522","severity":1,"message":"1585","line":20,"column":5,"nodeType":"1524","messageId":"1525","endLine":20,"endColumn":14},{"ruleId":"1522","severity":1,"message":"1586","line":21,"column":5,"nodeType":"1524","messageId":"1525","endLine":21,"endColumn":15},{"ruleId":"1522","severity":1,"message":"1587","line":23,"column":5,"nodeType":"1524","messageId":"1525","endLine":23,"endColumn":20},{"ruleId":"1522","severity":1,"message":"1588","line":24,"column":5,"nodeType":"1524","messageId":"1525","endLine":24,"endColumn":14},{"ruleId":"1522","severity":1,"message":"1589","line":24,"column":16,"nodeType":"1524","messageId":"1525","endLine":24,"endColumn":30},{"ruleId":"1522","severity":1,"message":"1590","line":29,"column":8,"nodeType":"1524","messageId":"1525","endLine":29,"endColumn":23},{"ruleId":"1522","severity":1,"message":"1591","line":32,"column":8,"nodeType":"1524","messageId":"1525","endLine":32,"endColumn":27},{"ruleId":"1522","severity":1,"message":"1592","line":33,"column":8,"nodeType":"1524","messageId":"1525","endLine":33,"endColumn":16},{"ruleId":"1522","severity":1,"message":"1593","line":69,"column":5,"nodeType":"1524","messageId":"1525","endLine":69,"endColumn":13},{"ruleId":"1522","severity":1,"message":"1594","line":70,"column":5,"nodeType":"1524","messageId":"1525","endLine":70,"endColumn":15},{"ruleId":"1522","severity":1,"message":"1595","line":71,"column":5,"nodeType":"1524","messageId":"1525","endLine":71,"endColumn":18},{"ruleId":"1531","severity":1,"message":"1532","line":342,"column":87,"nodeType":"1533","messageId":"1534","endLine":342,"endColumn":89},{"ruleId":"1539","severity":1,"message":"1543","line":179,"column":89,"nodeType":"1541","messageId":"1544","endLine":179,"endColumn":91},{"ruleId":"1522","severity":1,"message":"1596","line":2,"column":28,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":35},{"ruleId":"1522","severity":1,"message":"1597","line":3,"column":9,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":12},{"ruleId":"1522","severity":1,"message":"1598","line":3,"column":14,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":25},{"ruleId":"1522","severity":1,"message":"1599","line":3,"column":35,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":45},{"ruleId":"1522","severity":1,"message":"1600","line":5,"column":10,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":15},{"ruleId":"1522","severity":1,"message":"1601","line":6,"column":8,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":13},{"ruleId":"1522","severity":1,"message":"1602","line":10,"column":5,"nodeType":"1524","messageId":"1525","endLine":10,"endColumn":17},{"ruleId":"1522","severity":1,"message":"1603","line":14,"column":5,"nodeType":"1524","messageId":"1525","endLine":14,"endColumn":12},{"ruleId":"1531","severity":1,"message":"1545","line":76,"column":47,"nodeType":"1533","messageId":"1534","endLine":76,"endColumn":49},{"ruleId":"1531","severity":1,"message":"1545","line":77,"column":59,"nodeType":"1533","messageId":"1534","endLine":77,"endColumn":61},{"ruleId":"1531","severity":1,"message":"1545","line":78,"column":61,"nodeType":"1533","messageId":"1534","endLine":78,"endColumn":63},{"ruleId":"1531","severity":1,"message":"1545","line":103,"column":40,"nodeType":"1533","messageId":"1534","endLine":103,"endColumn":42},{"ruleId":"1531","severity":1,"message":"1545","line":109,"column":38,"nodeType":"1533","messageId":"1534","endLine":109,"endColumn":40},{"ruleId":"1531","severity":1,"message":"1545","line":116,"column":38,"nodeType":"1533","messageId":"1534","endLine":116,"endColumn":40},{"ruleId":"1531","severity":1,"message":"1545","line":116,"column":86,"nodeType":"1533","messageId":"1534","endLine":116,"endColumn":88},{"ruleId":"1531","severity":1,"message":"1545","line":128,"column":33,"nodeType":"1533","messageId":"1534","endLine":128,"endColumn":35},{"ruleId":"1531","severity":1,"message":"1545","line":253,"column":80,"nodeType":"1533","messageId":"1534","endLine":253,"endColumn":82},{"ruleId":"1531","severity":1,"message":"1545","line":290,"column":78,"nodeType":"1533","messageId":"1534","endLine":290,"endColumn":80},{"ruleId":"1522","severity":1,"message":"1604","line":1,"column":17,"nodeType":"1524","messageId":"1525","endLine":1,"endColumn":25},{"ruleId":"1522","severity":1,"message":"1605","line":3,"column":24,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":35},{"ruleId":"1606","severity":1,"message":"1607","line":12,"column":8,"nodeType":"1608","endLine":12,"endColumn":10,"suggestions":"1609"},{"ruleId":"1522","severity":1,"message":"1610","line":3,"column":10,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":33},{"ruleId":"1522","severity":1,"message":"1611","line":17,"column":13,"nodeType":"1524","messageId":"1525","endLine":17,"endColumn":18},{"ruleId":"1531","severity":1,"message":"1545","line":20,"column":33,"nodeType":"1533","messageId":"1534","endLine":20,"endColumn":35},{"ruleId":"1531","severity":1,"message":"1545","line":28,"column":29,"nodeType":"1533","messageId":"1534","endLine":28,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":28,"column":61,"nodeType":"1533","messageId":"1534","endLine":28,"endColumn":63},{"ruleId":"1531","severity":1,"message":"1545","line":28,"column":88,"nodeType":"1533","messageId":"1534","endLine":28,"endColumn":90},{"ruleId":"1539","severity":1,"message":"1540","line":34,"column":35,"nodeType":"1541","messageId":"1542","endLine":34,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":38,"column":29,"nodeType":"1533","messageId":"1534","endLine":38,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":38,"column":61,"nodeType":"1533","messageId":"1534","endLine":38,"endColumn":63},{"ruleId":"1531","severity":1,"message":"1545","line":38,"column":88,"nodeType":"1533","messageId":"1534","endLine":38,"endColumn":90},{"ruleId":"1531","severity":1,"message":"1545","line":51,"column":40,"nodeType":"1533","messageId":"1534","endLine":51,"endColumn":42},{"ruleId":"1535","severity":1,"message":"1612","line":52,"column":17,"nodeType":"1524","messageId":"1537","endLine":52,"endColumn":30},{"ruleId":"1535","severity":1,"message":"1538","line":53,"column":21,"nodeType":"1524","messageId":"1537","endLine":53,"endColumn":22},{"ruleId":"1535","severity":1,"message":"1613","line":55,"column":21,"nodeType":"1524","messageId":"1537","endLine":55,"endColumn":29},{"ruleId":"1535","severity":1,"message":"1614","line":56,"column":21,"nodeType":"1524","messageId":"1537","endLine":56,"endColumn":25},{"ruleId":"1531","severity":1,"message":"1545","line":59,"column":29,"nodeType":"1533","messageId":"1534","endLine":59,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":59,"column":65,"nodeType":"1533","messageId":"1534","endLine":59,"endColumn":67},{"ruleId":"1531","severity":1,"message":"1545","line":59,"column":92,"nodeType":"1533","messageId":"1534","endLine":59,"endColumn":94},{"ruleId":"1535","severity":1,"message":"1615","line":65,"column":17,"nodeType":"1524","messageId":"1537","endLine":65,"endColumn":30},{"ruleId":"1539","severity":1,"message":"1540","line":66,"column":35,"nodeType":"1541","messageId":"1542","endLine":66,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":70,"column":29,"nodeType":"1533","messageId":"1534","endLine":70,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":70,"column":65,"nodeType":"1533","messageId":"1534","endLine":70,"endColumn":67},{"ruleId":"1531","severity":1,"message":"1545","line":70,"column":92,"nodeType":"1533","messageId":"1534","endLine":70,"endColumn":94},{"ruleId":"1531","severity":1,"message":"1545","line":83,"column":40,"nodeType":"1533","messageId":"1534","endLine":83,"endColumn":42},{"ruleId":"1535","severity":1,"message":"1612","line":84,"column":17,"nodeType":"1524","messageId":"1537","endLine":84,"endColumn":30},{"ruleId":"1535","severity":1,"message":"1538","line":85,"column":21,"nodeType":"1524","messageId":"1537","endLine":85,"endColumn":22},{"ruleId":"1535","severity":1,"message":"1613","line":87,"column":21,"nodeType":"1524","messageId":"1537","endLine":87,"endColumn":29},{"ruleId":"1535","severity":1,"message":"1614","line":88,"column":21,"nodeType":"1524","messageId":"1537","endLine":88,"endColumn":25},{"ruleId":"1531","severity":1,"message":"1545","line":91,"column":29,"nodeType":"1533","messageId":"1534","endLine":91,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":91,"column":56,"nodeType":"1533","messageId":"1534","endLine":91,"endColumn":58},{"ruleId":"1535","severity":1,"message":"1615","line":97,"column":17,"nodeType":"1524","messageId":"1537","endLine":97,"endColumn":30},{"ruleId":"1539","severity":1,"message":"1540","line":98,"column":35,"nodeType":"1541","messageId":"1542","endLine":98,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":101,"column":29,"nodeType":"1533","messageId":"1534","endLine":101,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":101,"column":56,"nodeType":"1533","messageId":"1534","endLine":101,"endColumn":58},{"ruleId":"1531","severity":1,"message":"1545","line":113,"column":40,"nodeType":"1533","messageId":"1534","endLine":113,"endColumn":42},{"ruleId":"1535","severity":1,"message":"1612","line":114,"column":17,"nodeType":"1524","messageId":"1537","endLine":114,"endColumn":30},{"ruleId":"1535","severity":1,"message":"1538","line":115,"column":21,"nodeType":"1524","messageId":"1537","endLine":115,"endColumn":22},{"ruleId":"1535","severity":1,"message":"1613","line":117,"column":21,"nodeType":"1524","messageId":"1537","endLine":117,"endColumn":29},{"ruleId":"1535","severity":1,"message":"1614","line":118,"column":21,"nodeType":"1524","messageId":"1537","endLine":118,"endColumn":25},{"ruleId":"1531","severity":1,"message":"1545","line":121,"column":29,"nodeType":"1533","messageId":"1534","endLine":121,"endColumn":31},{"ruleId":"1535","severity":1,"message":"1615","line":127,"column":17,"nodeType":"1524","messageId":"1537","endLine":127,"endColumn":30},{"ruleId":"1539","severity":1,"message":"1540","line":128,"column":35,"nodeType":"1541","messageId":"1542","endLine":128,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":131,"column":29,"nodeType":"1533","messageId":"1534","endLine":131,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":143,"column":40,"nodeType":"1533","messageId":"1534","endLine":143,"endColumn":42},{"ruleId":"1535","severity":1,"message":"1612","line":144,"column":17,"nodeType":"1524","messageId":"1537","endLine":144,"endColumn":30},{"ruleId":"1531","severity":1,"message":"1532","line":145,"column":27,"nodeType":"1533","messageId":"1534","endLine":145,"endColumn":29},{"ruleId":"1531","severity":1,"message":"1532","line":145,"column":61,"nodeType":"1533","messageId":"1534","endLine":145,"endColumn":63},{"ruleId":"1535","severity":1,"message":"1538","line":146,"column":25,"nodeType":"1524","messageId":"1537","endLine":146,"endColumn":26},{"ruleId":"1535","severity":1,"message":"1615","line":152,"column":17,"nodeType":"1524","messageId":"1537","endLine":152,"endColumn":30},{"ruleId":"1539","severity":1,"message":"1540","line":153,"column":35,"nodeType":"1541","messageId":"1542","endLine":153,"endColumn":37},{"ruleId":"1606","severity":1,"message":"1616","line":167,"column":8,"nodeType":"1608","endLine":167,"endColumn":29,"suggestions":"1617"},{"ruleId":"1531","severity":1,"message":"1545","line":20,"column":33,"nodeType":"1533","messageId":"1534","endLine":20,"endColumn":35},{"ruleId":"1539","severity":1,"message":"1540","line":21,"column":35,"nodeType":"1541","messageId":"1542","endLine":21,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":24,"column":29,"nodeType":"1533","messageId":"1534","endLine":24,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":24,"column":61,"nodeType":"1533","messageId":"1534","endLine":24,"endColumn":63},{"ruleId":"1531","severity":1,"message":"1545","line":24,"column":88,"nodeType":"1533","messageId":"1534","endLine":24,"endColumn":90},{"ruleId":"1531","severity":1,"message":"1545","line":31,"column":40,"nodeType":"1533","messageId":"1534","endLine":31,"endColumn":42},{"ruleId":"1539","severity":1,"message":"1540","line":32,"column":35,"nodeType":"1541","messageId":"1542","endLine":32,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":35,"column":29,"nodeType":"1533","messageId":"1534","endLine":35,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":35,"column":71,"nodeType":"1533","messageId":"1534","endLine":35,"endColumn":73},{"ruleId":"1531","severity":1,"message":"1545","line":35,"column":114,"nodeType":"1533","messageId":"1534","endLine":35,"endColumn":116},{"ruleId":"1531","severity":1,"message":"1545","line":40,"column":40,"nodeType":"1533","messageId":"1534","endLine":40,"endColumn":42},{"ruleId":"1539","severity":1,"message":"1540","line":41,"column":35,"nodeType":"1541","messageId":"1542","endLine":41,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":44,"column":29,"nodeType":"1533","messageId":"1534","endLine":44,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":44,"column":64,"nodeType":"1533","messageId":"1534","endLine":44,"endColumn":66},{"ruleId":"1531","severity":1,"message":"1545","line":49,"column":40,"nodeType":"1533","messageId":"1534","endLine":49,"endColumn":42},{"ruleId":"1539","severity":1,"message":"1540","line":50,"column":35,"nodeType":"1541","messageId":"1542","endLine":50,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":53,"column":29,"nodeType":"1533","messageId":"1534","endLine":53,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":58,"column":40,"nodeType":"1533","messageId":"1534","endLine":58,"endColumn":42},{"ruleId":"1539","severity":1,"message":"1540","line":59,"column":35,"nodeType":"1541","messageId":"1542","endLine":59,"endColumn":37},{"ruleId":"1606","severity":1,"message":"1618","line":66,"column":8,"nodeType":"1608","endLine":66,"endColumn":29,"suggestions":"1619"},{"ruleId":"1522","severity":1,"message":"1610","line":3,"column":10,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":33},{"ruleId":"1522","severity":1,"message":"1620","line":5,"column":10,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":20},{"ruleId":"1531","severity":1,"message":"1532","line":13,"column":30,"nodeType":"1533","messageId":"1534","endLine":13,"endColumn":32},{"ruleId":"1531","severity":1,"message":"1532","line":17,"column":29,"nodeType":"1533","messageId":"1534","endLine":17,"endColumn":31},{"ruleId":"1522","severity":1,"message":"1621","line":32,"column":9,"nodeType":"1524","messageId":"1525","endLine":32,"endColumn":15},{"ruleId":"1522","severity":1,"message":"1622","line":40,"column":11,"nodeType":"1524","messageId":"1525","endLine":40,"endColumn":22},{"ruleId":"1522","severity":1,"message":"1623","line":43,"column":12,"nodeType":"1524","messageId":"1525","endLine":43,"endColumn":22},{"ruleId":"1522","severity":1,"message":"1624","line":43,"column":24,"nodeType":"1524","messageId":"1525","endLine":43,"endColumn":37},{"ruleId":"1522","severity":1,"message":"1611","line":49,"column":13,"nodeType":"1524","messageId":"1525","endLine":49,"endColumn":18},{"ruleId":"1531","severity":1,"message":"1545","line":56,"column":33,"nodeType":"1533","messageId":"1534","endLine":56,"endColumn":35},{"ruleId":"1531","severity":1,"message":"1545","line":64,"column":29,"nodeType":"1533","messageId":"1534","endLine":64,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":64,"column":65,"nodeType":"1533","messageId":"1534","endLine":64,"endColumn":67},{"ruleId":"1531","severity":1,"message":"1545","line":64,"column":92,"nodeType":"1533","messageId":"1534","endLine":64,"endColumn":94},{"ruleId":"1531","severity":1,"message":"1545","line":69,"column":40,"nodeType":"1533","messageId":"1534","endLine":69,"endColumn":42},{"ruleId":"1535","severity":1,"message":"1538","line":71,"column":21,"nodeType":"1524","messageId":"1537","endLine":71,"endColumn":22},{"ruleId":"1535","severity":1,"message":"1613","line":73,"column":21,"nodeType":"1524","messageId":"1537","endLine":73,"endColumn":29},{"ruleId":"1535","severity":1,"message":"1614","line":74,"column":21,"nodeType":"1524","messageId":"1537","endLine":74,"endColumn":25},{"ruleId":"1531","severity":1,"message":"1545","line":77,"column":29,"nodeType":"1533","messageId":"1534","endLine":77,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":77,"column":65,"nodeType":"1533","messageId":"1534","endLine":77,"endColumn":67},{"ruleId":"1531","severity":1,"message":"1545","line":77,"column":92,"nodeType":"1533","messageId":"1534","endLine":77,"endColumn":94},{"ruleId":"1531","severity":1,"message":"1545","line":83,"column":40,"nodeType":"1533","messageId":"1534","endLine":83,"endColumn":42},{"ruleId":"1535","severity":1,"message":"1538","line":85,"column":21,"nodeType":"1524","messageId":"1537","endLine":85,"endColumn":22},{"ruleId":"1535","severity":1,"message":"1613","line":87,"column":21,"nodeType":"1524","messageId":"1537","endLine":87,"endColumn":29},{"ruleId":"1535","severity":1,"message":"1614","line":88,"column":21,"nodeType":"1524","messageId":"1537","endLine":88,"endColumn":25},{"ruleId":"1531","severity":1,"message":"1545","line":91,"column":29,"nodeType":"1533","messageId":"1534","endLine":91,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":91,"column":56,"nodeType":"1533","messageId":"1534","endLine":91,"endColumn":58},{"ruleId":"1531","severity":1,"message":"1545","line":96,"column":40,"nodeType":"1533","messageId":"1534","endLine":96,"endColumn":42},{"ruleId":"1535","severity":1,"message":"1538","line":98,"column":21,"nodeType":"1524","messageId":"1537","endLine":98,"endColumn":22},{"ruleId":"1535","severity":1,"message":"1613","line":100,"column":21,"nodeType":"1524","messageId":"1537","endLine":100,"endColumn":29},{"ruleId":"1535","severity":1,"message":"1614","line":101,"column":21,"nodeType":"1524","messageId":"1537","endLine":101,"endColumn":25},{"ruleId":"1531","severity":1,"message":"1545","line":104,"column":29,"nodeType":"1533","messageId":"1534","endLine":104,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":109,"column":40,"nodeType":"1533","messageId":"1534","endLine":109,"endColumn":42},{"ruleId":"1535","severity":1,"message":"1538","line":111,"column":21,"nodeType":"1524","messageId":"1537","endLine":111,"endColumn":22},{"ruleId":"1606","severity":1,"message":"1625","line":117,"column":8,"nodeType":"1608","endLine":117,"endColumn":29,"suggestions":"1626"},{"ruleId":"1531","severity":1,"message":"1545","line":125,"column":49,"nodeType":"1533","messageId":"1534","endLine":125,"endColumn":51},{"ruleId":"1531","severity":1,"message":"1545","line":125,"column":77,"nodeType":"1533","messageId":"1534","endLine":125,"endColumn":79},{"ruleId":"1522","severity":1,"message":"1627","line":2,"column":82,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":88},{"ruleId":"1522","severity":1,"message":"1628","line":3,"column":10,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":23},{"ruleId":"1522","severity":1,"message":"1629","line":4,"column":10,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":20},{"ruleId":"1522","severity":1,"message":"1630","line":6,"column":10,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":16},{"ruleId":"1522","severity":1,"message":"1631","line":6,"column":18,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":26},{"ruleId":"1522","severity":1,"message":"1601","line":8,"column":8,"nodeType":"1524","messageId":"1525","endLine":8,"endColumn":13},{"ruleId":"1522","severity":1,"message":"1632","line":9,"column":23,"nodeType":"1524","messageId":"1525","endLine":9,"endColumn":34},{"ruleId":"1539","severity":1,"message":"1543","line":67,"column":44,"nodeType":"1541","messageId":"1544","endLine":67,"endColumn":46},{"ruleId":"1531","severity":1,"message":"1545","line":73,"column":24,"nodeType":"1533","messageId":"1534","endLine":73,"endColumn":26},{"ruleId":"1539","severity":1,"message":"1543","line":76,"column":40,"nodeType":"1541","messageId":"1544","endLine":76,"endColumn":42},{"ruleId":"1531","severity":1,"message":"1545","line":77,"column":31,"nodeType":"1533","messageId":"1534","endLine":77,"endColumn":33},{"ruleId":"1539","severity":1,"message":"1543","line":84,"column":37,"nodeType":"1541","messageId":"1544","endLine":84,"endColumn":39},{"ruleId":"1531","severity":1,"message":"1545","line":88,"column":36,"nodeType":"1533","messageId":"1534","endLine":88,"endColumn":38},{"ruleId":"1531","severity":1,"message":"1545","line":88,"column":74,"nodeType":"1533","messageId":"1534","endLine":88,"endColumn":76},{"ruleId":"1531","severity":1,"message":"1545","line":88,"column":111,"nodeType":"1533","messageId":"1534","endLine":88,"endColumn":113},{"ruleId":"1539","severity":1,"message":"1540","line":95,"column":23,"nodeType":"1541","messageId":"1542","endLine":95,"endColumn":25},{"ruleId":"1606","severity":1,"message":"1633","line":99,"column":8,"nodeType":"1608","endLine":99,"endColumn":34,"suggestions":"1634"},{"ruleId":"1531","severity":1,"message":"1545","line":190,"column":235,"nodeType":"1533","messageId":"1534","endLine":190,"endColumn":237},{"ruleId":"1606","severity":1,"message":"1607","line":50,"column":8,"nodeType":"1608","endLine":50,"endColumn":10,"suggestions":"1635"},{"ruleId":"1522","severity":1,"message":"1636","line":4,"column":10,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":14},{"ruleId":"1522","severity":1,"message":"1598","line":4,"column":43,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":54},{"ruleId":"1531","severity":1,"message":"1545","line":24,"column":33,"nodeType":"1533","messageId":"1534","endLine":24,"endColumn":35},{"ruleId":"1539","severity":1,"message":"1540","line":25,"column":35,"nodeType":"1541","messageId":"1542","endLine":25,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":28,"column":29,"nodeType":"1533","messageId":"1534","endLine":28,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":28,"column":61,"nodeType":"1533","messageId":"1534","endLine":28,"endColumn":63},{"ruleId":"1531","severity":1,"message":"1545","line":28,"column":88,"nodeType":"1533","messageId":"1534","endLine":28,"endColumn":90},{"ruleId":"1531","severity":1,"message":"1545","line":35,"column":40,"nodeType":"1533","messageId":"1534","endLine":35,"endColumn":42},{"ruleId":"1539","severity":1,"message":"1540","line":37,"column":35,"nodeType":"1541","messageId":"1542","endLine":37,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":40,"column":29,"nodeType":"1533","messageId":"1534","endLine":40,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":40,"column":67,"nodeType":"1533","messageId":"1534","endLine":40,"endColumn":69},{"ruleId":"1531","severity":1,"message":"1545","line":40,"column":108,"nodeType":"1533","messageId":"1534","endLine":40,"endColumn":110},{"ruleId":"1531","severity":1,"message":"1545","line":47,"column":40,"nodeType":"1533","messageId":"1534","endLine":47,"endColumn":42},{"ruleId":"1539","severity":1,"message":"1540","line":48,"column":35,"nodeType":"1541","messageId":"1542","endLine":48,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":51,"column":29,"nodeType":"1533","messageId":"1534","endLine":51,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":51,"column":68,"nodeType":"1533","messageId":"1534","endLine":51,"endColumn":70},{"ruleId":"1531","severity":1,"message":"1545","line":58,"column":40,"nodeType":"1533","messageId":"1534","endLine":58,"endColumn":42},{"ruleId":"1539","severity":1,"message":"1540","line":59,"column":35,"nodeType":"1541","messageId":"1542","endLine":59,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":62,"column":29,"nodeType":"1533","messageId":"1534","endLine":62,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":69,"column":40,"nodeType":"1533","messageId":"1534","endLine":69,"endColumn":42},{"ruleId":"1539","severity":1,"message":"1540","line":70,"column":35,"nodeType":"1541","messageId":"1542","endLine":70,"endColumn":37},{"ruleId":"1606","severity":1,"message":"1618","line":77,"column":8,"nodeType":"1608","endLine":77,"endColumn":29,"suggestions":"1637"},{"ruleId":"1531","severity":1,"message":"1545","line":85,"column":50,"nodeType":"1533","messageId":"1534","endLine":85,"endColumn":52},{"ruleId":"1531","severity":1,"message":"1545","line":85,"column":78,"nodeType":"1533","messageId":"1534","endLine":85,"endColumn":80},{"ruleId":"1539","severity":1,"message":"1540","line":23,"column":36,"nodeType":"1541","messageId":"1542","endLine":23,"endColumn":38},{"ruleId":"1539","severity":1,"message":"1543","line":86,"column":51,"nodeType":"1541","messageId":"1544","endLine":86,"endColumn":53},{"ruleId":"1531","severity":1,"message":"1545","line":90,"column":25,"nodeType":"1533","messageId":"1534","endLine":90,"endColumn":27},{"ruleId":"1531","severity":1,"message":"1545","line":90,"column":43,"nodeType":"1533","messageId":"1534","endLine":90,"endColumn":45},{"ruleId":"1531","severity":1,"message":"1545","line":90,"column":63,"nodeType":"1533","messageId":"1534","endLine":90,"endColumn":65},{"ruleId":"1606","severity":1,"message":"1638","line":95,"column":8,"nodeType":"1608","endLine":95,"endColumn":15,"suggestions":"1639"},{"ruleId":"1531","severity":1,"message":"1545","line":145,"column":139,"nodeType":"1533","messageId":"1534","endLine":145,"endColumn":141},{"ruleId":"1531","severity":1,"message":"1545","line":147,"column":137,"nodeType":"1533","messageId":"1534","endLine":147,"endColumn":139},{"ruleId":"1606","severity":1,"message":"1607","line":172,"column":8,"nodeType":"1608","endLine":172,"endColumn":10,"suggestions":"1640"},{"ruleId":"1522","severity":1,"message":"1641","line":1,"column":17,"nodeType":"1524","messageId":"1525","endLine":1,"endColumn":20},{"ruleId":"1522","severity":1,"message":"1632","line":11,"column":23,"nodeType":"1524","messageId":"1525","endLine":11,"endColumn":34},{"ruleId":"1522","severity":1,"message":"1642","line":17,"column":10,"nodeType":"1524","messageId":"1525","endLine":17,"endColumn":15},{"ruleId":"1531","severity":1,"message":"1545","line":60,"column":37,"nodeType":"1533","messageId":"1534","endLine":60,"endColumn":39},{"ruleId":"1539","severity":1,"message":"1540","line":115,"column":23,"nodeType":"1541","messageId":"1542","endLine":115,"endColumn":25},{"ruleId":"1539","severity":1,"message":"1540","line":119,"column":31,"nodeType":"1541","messageId":"1542","endLine":119,"endColumn":33},{"ruleId":"1539","severity":1,"message":"1540","line":125,"column":43,"nodeType":"1541","messageId":"1542","endLine":125,"endColumn":45},{"ruleId":"1539","severity":1,"message":"1543","line":192,"column":37,"nodeType":"1541","messageId":"1544","endLine":192,"endColumn":39},{"ruleId":"1539","severity":1,"message":"1540","line":219,"column":35,"nodeType":"1541","messageId":"1542","endLine":219,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":222,"column":25,"nodeType":"1533","messageId":"1534","endLine":222,"endColumn":27},{"ruleId":"1531","severity":1,"message":"1545","line":222,"column":58,"nodeType":"1533","messageId":"1534","endLine":222,"endColumn":60},{"ruleId":"1531","severity":1,"message":"1545","line":222,"column":91,"nodeType":"1533","messageId":"1534","endLine":222,"endColumn":93},{"ruleId":"1531","severity":1,"message":"1545","line":222,"column":124,"nodeType":"1533","messageId":"1534","endLine":222,"endColumn":126},{"ruleId":"1531","severity":1,"message":"1545","line":224,"column":29,"nodeType":"1533","messageId":"1534","endLine":224,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":224,"column":55,"nodeType":"1533","messageId":"1534","endLine":224,"endColumn":57},{"ruleId":"1539","severity":1,"message":"1540","line":226,"column":47,"nodeType":"1541","messageId":"1542","endLine":226,"endColumn":49},{"ruleId":"1643","severity":1,"message":"1644","line":248,"column":27,"nodeType":"1541","messageId":"1645","endLine":259,"endColumn":12},{"ruleId":"1539","severity":1,"message":"1540","line":248,"column":35,"nodeType":"1541","messageId":"1542","endLine":248,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":251,"column":19,"nodeType":"1533","messageId":"1534","endLine":251,"endColumn":21},{"ruleId":"1531","severity":1,"message":"1545","line":251,"column":46,"nodeType":"1533","messageId":"1534","endLine":251,"endColumn":48},{"ruleId":"1531","severity":1,"message":"1545","line":251,"column":72,"nodeType":"1533","messageId":"1534","endLine":251,"endColumn":74},{"ruleId":"1539","severity":1,"message":"1540","line":254,"column":47,"nodeType":"1541","messageId":"1542","endLine":254,"endColumn":49},{"ruleId":"1539","severity":1,"message":"1540","line":280,"column":33,"nodeType":"1541","messageId":"1542","endLine":280,"endColumn":35},{"ruleId":"1531","severity":1,"message":"1545","line":283,"column":23,"nodeType":"1533","messageId":"1534","endLine":283,"endColumn":25},{"ruleId":"1531","severity":1,"message":"1545","line":283,"column":56,"nodeType":"1533","messageId":"1534","endLine":283,"endColumn":58},{"ruleId":"1531","severity":1,"message":"1545","line":283,"column":89,"nodeType":"1533","messageId":"1534","endLine":283,"endColumn":91},{"ruleId":"1531","severity":1,"message":"1545","line":283,"column":122,"nodeType":"1533","messageId":"1534","endLine":283,"endColumn":124},{"ruleId":"1531","severity":1,"message":"1545","line":284,"column":26,"nodeType":"1533","messageId":"1534","endLine":284,"endColumn":28},{"ruleId":"1531","severity":1,"message":"1545","line":284,"column":55,"nodeType":"1533","messageId":"1534","endLine":284,"endColumn":57},{"ruleId":"1539","severity":1,"message":"1540","line":287,"column":47,"nodeType":"1541","messageId":"1542","endLine":287,"endColumn":49},{"ruleId":"1643","severity":1,"message":"1644","line":307,"column":27,"nodeType":"1541","messageId":"1645","endLine":318,"endColumn":12},{"ruleId":"1539","severity":1,"message":"1540","line":307,"column":35,"nodeType":"1541","messageId":"1542","endLine":307,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":310,"column":19,"nodeType":"1533","messageId":"1534","endLine":310,"endColumn":21},{"ruleId":"1531","severity":1,"message":"1545","line":310,"column":49,"nodeType":"1533","messageId":"1534","endLine":310,"endColumn":51},{"ruleId":"1531","severity":1,"message":"1545","line":310,"column":78,"nodeType":"1533","messageId":"1534","endLine":310,"endColumn":80},{"ruleId":"1539","severity":1,"message":"1540","line":313,"column":47,"nodeType":"1541","messageId":"1542","endLine":313,"endColumn":49},{"ruleId":"1539","severity":1,"message":"1540","line":344,"column":31,"nodeType":"1541","messageId":"1542","endLine":344,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1545","line":347,"column":15,"nodeType":"1533","messageId":"1534","endLine":347,"endColumn":17},{"ruleId":"1531","severity":1,"message":"1545","line":347,"column":41,"nodeType":"1533","messageId":"1534","endLine":347,"endColumn":43},{"ruleId":"1539","severity":1,"message":"1540","line":350,"column":43,"nodeType":"1541","messageId":"1542","endLine":350,"endColumn":45},{"ruleId":"1539","severity":1,"message":"1540","line":377,"column":29,"nodeType":"1541","messageId":"1542","endLine":377,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":380,"column":21,"nodeType":"1533","messageId":"1534","endLine":380,"endColumn":23},{"ruleId":"1531","severity":1,"message":"1545","line":385,"column":21,"nodeType":"1533","messageId":"1534","endLine":385,"endColumn":23},{"ruleId":"1531","severity":1,"message":"1545","line":391,"column":21,"nodeType":"1533","messageId":"1534","endLine":391,"endColumn":23},{"ruleId":"1531","severity":1,"message":"1545","line":391,"column":42,"nodeType":"1533","messageId":"1534","endLine":391,"endColumn":44},{"ruleId":"1531","severity":1,"message":"1545","line":393,"column":28,"nodeType":"1533","messageId":"1534","endLine":393,"endColumn":30},{"ruleId":"1531","severity":1,"message":"1545","line":395,"column":31,"nodeType":"1533","messageId":"1534","endLine":395,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1545","line":405,"column":37,"nodeType":"1533","messageId":"1534","endLine":405,"endColumn":39},{"ruleId":"1531","severity":1,"message":"1545","line":405,"column":71,"nodeType":"1533","messageId":"1534","endLine":405,"endColumn":73},{"ruleId":"1539","severity":1,"message":"1540","line":407,"column":29,"nodeType":"1541","messageId":"1542","endLine":407,"endColumn":31},{"ruleId":"1539","severity":1,"message":"1540","line":409,"column":33,"nodeType":"1541","messageId":"1542","endLine":409,"endColumn":35},{"ruleId":"1531","severity":1,"message":"1545","line":413,"column":27,"nodeType":"1533","messageId":"1534","endLine":413,"endColumn":29},{"ruleId":"1531","severity":1,"message":"1545","line":413,"column":54,"nodeType":"1533","messageId":"1534","endLine":413,"endColumn":56},{"ruleId":"1531","severity":1,"message":"1545","line":413,"column":81,"nodeType":"1533","messageId":"1534","endLine":413,"endColumn":83},{"ruleId":"1539","severity":1,"message":"1540","line":420,"column":26,"nodeType":"1541","messageId":"1542","endLine":420,"endColumn":28},{"ruleId":"1539","severity":1,"message":"1540","line":422,"column":33,"nodeType":"1541","messageId":"1542","endLine":422,"endColumn":35},{"ruleId":"1531","severity":1,"message":"1545","line":426,"column":27,"nodeType":"1533","messageId":"1534","endLine":426,"endColumn":29},{"ruleId":"1531","severity":1,"message":"1545","line":426,"column":54,"nodeType":"1533","messageId":"1534","endLine":426,"endColumn":56},{"ruleId":"1531","severity":1,"message":"1545","line":426,"column":81,"nodeType":"1533","messageId":"1534","endLine":426,"endColumn":83},{"ruleId":"1531","severity":1,"message":"1545","line":433,"column":23,"nodeType":"1533","messageId":"1534","endLine":433,"endColumn":25},{"ruleId":"1531","severity":1,"message":"1545","line":433,"column":44,"nodeType":"1533","messageId":"1534","endLine":433,"endColumn":46},{"ruleId":"1531","severity":1,"message":"1545","line":435,"column":30,"nodeType":"1533","messageId":"1534","endLine":435,"endColumn":32},{"ruleId":"1531","severity":1,"message":"1545","line":437,"column":33,"nodeType":"1533","messageId":"1534","endLine":437,"endColumn":35},{"ruleId":"1531","severity":1,"message":"1545","line":448,"column":31,"nodeType":"1533","messageId":"1534","endLine":448,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1545","line":449,"column":37,"nodeType":"1533","messageId":"1534","endLine":449,"endColumn":39},{"ruleId":"1539","severity":1,"message":"1540","line":450,"column":31,"nodeType":"1541","messageId":"1542","endLine":450,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1545","line":453,"column":23,"nodeType":"1533","messageId":"1534","endLine":453,"endColumn":25},{"ruleId":"1531","severity":1,"message":"1545","line":453,"column":43,"nodeType":"1533","messageId":"1534","endLine":453,"endColumn":45},{"ruleId":"1531","severity":1,"message":"1545","line":458,"column":23,"nodeType":"1533","messageId":"1534","endLine":458,"endColumn":25},{"ruleId":"1531","severity":1,"message":"1545","line":458,"column":47,"nodeType":"1533","messageId":"1534","endLine":458,"endColumn":49},{"ruleId":"1531","severity":1,"message":"1545","line":466,"column":23,"nodeType":"1533","messageId":"1534","endLine":466,"endColumn":25},{"ruleId":"1531","severity":1,"message":"1545","line":466,"column":44,"nodeType":"1533","messageId":"1534","endLine":466,"endColumn":46},{"ruleId":"1531","severity":1,"message":"1545","line":468,"column":30,"nodeType":"1533","messageId":"1534","endLine":468,"endColumn":32},{"ruleId":"1531","severity":1,"message":"1545","line":470,"column":33,"nodeType":"1533","messageId":"1534","endLine":470,"endColumn":35},{"ruleId":"1531","severity":1,"message":"1545","line":482,"column":29,"nodeType":"1533","messageId":"1534","endLine":482,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":483,"column":35,"nodeType":"1533","messageId":"1534","endLine":483,"endColumn":37},{"ruleId":"1539","severity":1,"message":"1540","line":484,"column":29,"nodeType":"1541","messageId":"1542","endLine":484,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":487,"column":21,"nodeType":"1533","messageId":"1534","endLine":487,"endColumn":23},{"ruleId":"1531","severity":1,"message":"1545","line":487,"column":41,"nodeType":"1533","messageId":"1534","endLine":487,"endColumn":43},{"ruleId":"1531","severity":1,"message":"1545","line":492,"column":21,"nodeType":"1533","messageId":"1534","endLine":492,"endColumn":23},{"ruleId":"1531","severity":1,"message":"1545","line":492,"column":45,"nodeType":"1533","messageId":"1534","endLine":492,"endColumn":47},{"ruleId":"1531","severity":1,"message":"1545","line":498,"column":21,"nodeType":"1533","messageId":"1534","endLine":498,"endColumn":23},{"ruleId":"1531","severity":1,"message":"1545","line":498,"column":42,"nodeType":"1533","messageId":"1534","endLine":498,"endColumn":44},{"ruleId":"1531","severity":1,"message":"1545","line":500,"column":28,"nodeType":"1533","messageId":"1534","endLine":500,"endColumn":30},{"ruleId":"1531","severity":1,"message":"1545","line":502,"column":31,"nodeType":"1533","messageId":"1534","endLine":502,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1545","line":524,"column":45,"nodeType":"1533","messageId":"1534","endLine":524,"endColumn":47},{"ruleId":"1531","severity":1,"message":"1545","line":524,"column":83,"nodeType":"1533","messageId":"1534","endLine":524,"endColumn":85},{"ruleId":"1606","severity":1,"message":"1646","line":544,"column":6,"nodeType":"1608","endLine":544,"endColumn":65,"suggestions":"1647"},{"ruleId":"1539","severity":1,"message":"1540","line":54,"column":35,"nodeType":"1541","messageId":"1542","endLine":54,"endColumn":37},{"ruleId":"1539","severity":1,"message":"1543","line":494,"column":86,"nodeType":"1541","messageId":"1544","endLine":494,"endColumn":88},{"ruleId":"1539","severity":1,"message":"1543","line":517,"column":38,"nodeType":"1541","messageId":"1544","endLine":517,"endColumn":40},{"ruleId":"1531","severity":1,"message":"1545","line":521,"column":36,"nodeType":"1533","messageId":"1534","endLine":521,"endColumn":38},{"ruleId":"1531","severity":1,"message":"1545","line":521,"column":70,"nodeType":"1533","messageId":"1534","endLine":521,"endColumn":72},{"ruleId":"1531","severity":1,"message":"1545","line":521,"column":103,"nodeType":"1533","messageId":"1534","endLine":521,"endColumn":105},{"ruleId":"1539","severity":1,"message":"1543","line":528,"column":38,"nodeType":"1541","messageId":"1544","endLine":528,"endColumn":40},{"ruleId":"1531","severity":1,"message":"1545","line":532,"column":38,"nodeType":"1533","messageId":"1534","endLine":532,"endColumn":40},{"ruleId":"1531","severity":1,"message":"1545","line":532,"column":71,"nodeType":"1533","messageId":"1534","endLine":532,"endColumn":73},{"ruleId":"1539","severity":1,"message":"1543","line":539,"column":38,"nodeType":"1541","messageId":"1544","endLine":539,"endColumn":40},{"ruleId":"1531","severity":1,"message":"1545","line":543,"column":37,"nodeType":"1533","messageId":"1534","endLine":543,"endColumn":39},{"ruleId":"1539","severity":1,"message":"1543","line":550,"column":38,"nodeType":"1541","messageId":"1544","endLine":550,"endColumn":40},{"ruleId":"1539","severity":1,"message":"1540","line":564,"column":24,"nodeType":"1541","messageId":"1542","endLine":564,"endColumn":26},{"ruleId":"1606","severity":1,"message":"1648","line":575,"column":8,"nodeType":"1608","endLine":575,"endColumn":71,"suggestions":"1649"},{"ruleId":"1539","severity":1,"message":"1540","line":25,"column":39,"nodeType":"1541","messageId":"1542","endLine":25,"endColumn":41},{"ruleId":"1539","severity":1,"message":"1540","line":33,"column":39,"nodeType":"1541","messageId":"1542","endLine":33,"endColumn":41},{"ruleId":"1539","severity":1,"message":"1540","line":45,"column":39,"nodeType":"1541","messageId":"1542","endLine":45,"endColumn":41},{"ruleId":"1643","severity":1,"message":"1650","line":177,"column":19,"nodeType":"1541","messageId":"1645","endLine":182,"endColumn":14},{"ruleId":"1535","severity":1,"message":"1538","line":189,"column":18,"nodeType":"1524","messageId":"1537","endLine":189,"endColumn":19},{"ruleId":"1643","severity":1,"message":"1650","line":203,"column":19,"nodeType":"1541","messageId":"1645","endLine":208,"endColumn":14},{"ruleId":"1539","severity":1,"message":"1540","line":233,"column":37,"nodeType":"1541","messageId":"1542","endLine":233,"endColumn":39},{"ruleId":"1539","severity":1,"message":"1540","line":263,"column":37,"nodeType":"1541","messageId":"1542","endLine":263,"endColumn":39},{"ruleId":"1556","severity":1,"message":"1651","line":377,"column":5,"nodeType":"1558","messageId":"1534","endLine":377,"endColumn":23},{"ruleId":"1522","severity":1,"message":"1652","line":7,"column":8,"nodeType":"1524","messageId":"1525","endLine":7,"endColumn":18},{"ruleId":"1531","severity":1,"message":"1545","line":41,"column":74,"nodeType":"1533","messageId":"1534","endLine":41,"endColumn":76},{"ruleId":"1531","severity":1,"message":"1545","line":51,"column":50,"nodeType":"1533","messageId":"1534","endLine":51,"endColumn":52},{"ruleId":"1531","severity":1,"message":"1545","line":60,"column":55,"nodeType":"1533","messageId":"1534","endLine":60,"endColumn":57},{"ruleId":"1653","severity":1,"message":"1654","line":218,"column":33,"nodeType":"1655","messageId":"1656","endLine":218,"endColumn":64},{"ruleId":"1522","severity":1,"message":"1582","line":4,"column":8,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":13},{"ruleId":"1522","severity":1,"message":"1657","line":5,"column":8,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":22},{"ruleId":"1522","severity":1,"message":"1658","line":6,"column":8,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":28},{"ruleId":"1522","severity":1,"message":"1652","line":7,"column":8,"nodeType":"1524","messageId":"1525","endLine":7,"endColumn":18},{"ruleId":"1531","severity":1,"message":"1532","line":61,"column":34,"nodeType":"1533","messageId":"1534","endLine":61,"endColumn":36},{"ruleId":"1531","severity":1,"message":"1545","line":85,"column":38,"nodeType":"1533","messageId":"1534","endLine":85,"endColumn":40},{"ruleId":"1535","severity":1,"message":"1659","line":23,"column":21,"nodeType":"1524","messageId":"1537","endLine":23,"endColumn":29},{"ruleId":"1535","severity":1,"message":"1660","line":24,"column":21,"nodeType":"1524","messageId":"1537","endLine":24,"endColumn":28},{"ruleId":"1535","severity":1,"message":"1661","line":34,"column":21,"nodeType":"1524","messageId":"1537","endLine":34,"endColumn":27},{"ruleId":"1535","severity":1,"message":"1662","line":35,"column":21,"nodeType":"1524","messageId":"1537","endLine":35,"endColumn":26},{"ruleId":"1522","severity":1,"message":"1663","line":5,"column":10,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":26},{"ruleId":"1531","severity":1,"message":"1545","line":28,"column":28,"nodeType":"1533","messageId":"1534","endLine":28,"endColumn":30},{"ruleId":"1531","severity":1,"message":"1532","line":29,"column":29,"nodeType":"1533","messageId":"1534","endLine":29,"endColumn":31},{"ruleId":"1522","severity":1,"message":"1596","line":2,"column":28,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":35},{"ruleId":"1522","severity":1,"message":"1597","line":3,"column":9,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":12},{"ruleId":"1522","severity":1,"message":"1598","line":3,"column":14,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":25},{"ruleId":"1522","severity":1,"message":"1599","line":3,"column":35,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":45},{"ruleId":"1522","severity":1,"message":"1600","line":5,"column":10,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":15},{"ruleId":"1522","severity":1,"message":"1601","line":6,"column":8,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":13},{"ruleId":"1522","severity":1,"message":"1602","line":10,"column":5,"nodeType":"1524","messageId":"1525","endLine":10,"endColumn":17},{"ruleId":"1522","severity":1,"message":"1603","line":14,"column":5,"nodeType":"1524","messageId":"1525","endLine":14,"endColumn":12},{"ruleId":"1531","severity":1,"message":"1545","line":70,"column":40,"nodeType":"1533","messageId":"1534","endLine":70,"endColumn":42},{"ruleId":"1531","severity":1,"message":"1545","line":76,"column":38,"nodeType":"1533","messageId":"1534","endLine":76,"endColumn":40},{"ruleId":"1531","severity":1,"message":"1545","line":83,"column":38,"nodeType":"1533","messageId":"1534","endLine":83,"endColumn":40},{"ruleId":"1531","severity":1,"message":"1545","line":83,"column":86,"nodeType":"1533","messageId":"1534","endLine":83,"endColumn":88},{"ruleId":"1531","severity":1,"message":"1545","line":95,"column":33,"nodeType":"1533","messageId":"1534","endLine":95,"endColumn":35},{"ruleId":"1531","severity":1,"message":"1545","line":214,"column":80,"nodeType":"1533","messageId":"1534","endLine":214,"endColumn":82},{"ruleId":"1531","severity":1,"message":"1545","line":249,"column":78,"nodeType":"1533","messageId":"1534","endLine":249,"endColumn":80},{"ruleId":"1522","severity":1,"message":"1664","line":10,"column":15,"nodeType":"1524","messageId":"1525","endLine":10,"endColumn":19},{"ruleId":"1522","severity":1,"message":"1665","line":11,"column":10,"nodeType":"1524","messageId":"1525","endLine":11,"endColumn":18},{"ruleId":"1522","severity":1,"message":"1605","line":12,"column":10,"nodeType":"1524","messageId":"1525","endLine":12,"endColumn":21},{"ruleId":"1522","severity":1,"message":"1632","line":12,"column":23,"nodeType":"1524","messageId":"1525","endLine":12,"endColumn":34},{"ruleId":"1522","severity":1,"message":"1666","line":13,"column":9,"nodeType":"1524","messageId":"1525","endLine":13,"endColumn":20},{"ruleId":"1522","severity":1,"message":"1627","line":6,"column":72,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":78},{"ruleId":"1522","severity":1,"message":"1667","line":7,"column":10,"nodeType":"1524","messageId":"1525","endLine":7,"endColumn":23},{"ruleId":"1522","severity":1,"message":"1668","line":7,"column":25,"nodeType":"1524","messageId":"1525","endLine":7,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":68,"column":37,"nodeType":"1533","messageId":"1534","endLine":68,"endColumn":39},{"ruleId":"1531","severity":1,"message":"1545","line":81,"column":44,"nodeType":"1533","messageId":"1534","endLine":81,"endColumn":46},{"ruleId":"1522","severity":1,"message":"1600","line":4,"column":10,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":15},{"ruleId":"1522","severity":1,"message":"1601","line":5,"column":8,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":13},{"ruleId":"1522","severity":1,"message":"1602","line":9,"column":5,"nodeType":"1524","messageId":"1525","endLine":9,"endColumn":17},{"ruleId":"1522","severity":1,"message":"1603","line":13,"column":5,"nodeType":"1524","messageId":"1525","endLine":13,"endColumn":12},{"ruleId":"1522","severity":1,"message":"1669","line":15,"column":5,"nodeType":"1524","messageId":"1525","endLine":15,"endColumn":14},{"ruleId":"1531","severity":1,"message":"1545","line":62,"column":59,"nodeType":"1533","messageId":"1534","endLine":62,"endColumn":61},{"ruleId":"1522","severity":1,"message":"1670","line":5,"column":8,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":24},{"ruleId":"1522","severity":1,"message":"1671","line":11,"column":3,"nodeType":"1524","messageId":"1525","endLine":11,"endColumn":7},{"ruleId":"1522","severity":1,"message":"1672","line":11,"column":9,"nodeType":"1524","messageId":"1525","endLine":11,"endColumn":17},{"ruleId":"1522","severity":1,"message":"1636","line":11,"column":19,"nodeType":"1524","messageId":"1525","endLine":11,"endColumn":23},{"ruleId":"1531","severity":1,"message":"1545","line":74,"column":38,"nodeType":"1533","messageId":"1534","endLine":74,"endColumn":40},{"ruleId":"1531","severity":1,"message":"1545","line":87,"column":36,"nodeType":"1533","messageId":"1534","endLine":87,"endColumn":38},{"ruleId":"1531","severity":1,"message":"1545","line":100,"column":44,"nodeType":"1533","messageId":"1534","endLine":100,"endColumn":46},{"ruleId":"1531","severity":1,"message":"1545","line":132,"column":44,"nodeType":"1533","messageId":"1534","endLine":132,"endColumn":46},{"ruleId":"1531","severity":1,"message":"1545","line":173,"column":74,"nodeType":"1533","messageId":"1534","endLine":173,"endColumn":76},{"ruleId":"1531","severity":1,"message":"1532","line":183,"column":87,"nodeType":"1533","messageId":"1534","endLine":183,"endColumn":89},{"ruleId":"1522","severity":1,"message":"1597","line":3,"column":9,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":12},{"ruleId":"1522","severity":1,"message":"1598","line":3,"column":14,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":25},{"ruleId":"1522","severity":1,"message":"1599","line":3,"column":35,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":45},{"ruleId":"1522","severity":1,"message":"1600","line":5,"column":10,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":15},{"ruleId":"1522","severity":1,"message":"1602","line":10,"column":5,"nodeType":"1524","messageId":"1525","endLine":10,"endColumn":17},{"ruleId":"1522","severity":1,"message":"1603","line":14,"column":5,"nodeType":"1524","messageId":"1525","endLine":14,"endColumn":12},{"ruleId":"1673","severity":1,"message":"1674","line":70,"column":5,"nodeType":"1528","messageId":"1534","endLine":84,"endColumn":6},{"ruleId":"1531","severity":1,"message":"1532","line":108,"column":34,"nodeType":"1533","messageId":"1534","endLine":108,"endColumn":36},{"ruleId":"1531","severity":1,"message":"1545","line":122,"column":34,"nodeType":"1533","messageId":"1534","endLine":122,"endColumn":36},{"ruleId":"1531","severity":1,"message":"1545","line":220,"column":47,"nodeType":"1533","messageId":"1534","endLine":220,"endColumn":49},{"ruleId":"1531","severity":1,"message":"1545","line":221,"column":59,"nodeType":"1533","messageId":"1534","endLine":221,"endColumn":61},{"ruleId":"1531","severity":1,"message":"1545","line":222,"column":61,"nodeType":"1533","messageId":"1534","endLine":222,"endColumn":63},{"ruleId":"1531","severity":1,"message":"1532","line":237,"column":38,"nodeType":"1533","messageId":"1534","endLine":237,"endColumn":40},{"ruleId":"1531","severity":1,"message":"1545","line":358,"column":80,"nodeType":"1533","messageId":"1534","endLine":358,"endColumn":82},{"ruleId":"1531","severity":1,"message":"1545","line":417,"column":80,"nodeType":"1533","messageId":"1534","endLine":417,"endColumn":82},{"ruleId":"1522","severity":1,"message":"1597","line":3,"column":9,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":12},{"ruleId":"1522","severity":1,"message":"1598","line":3,"column":14,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":25},{"ruleId":"1522","severity":1,"message":"1599","line":3,"column":35,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":45},{"ruleId":"1522","severity":1,"message":"1600","line":5,"column":10,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":15},{"ruleId":"1522","severity":1,"message":"1602","line":10,"column":5,"nodeType":"1524","messageId":"1525","endLine":10,"endColumn":17},{"ruleId":"1522","severity":1,"message":"1603","line":14,"column":5,"nodeType":"1524","messageId":"1525","endLine":14,"endColumn":12},{"ruleId":"1531","severity":1,"message":"1545","line":94,"column":40,"nodeType":"1533","messageId":"1534","endLine":94,"endColumn":42},{"ruleId":"1531","severity":1,"message":"1545","line":100,"column":38,"nodeType":"1533","messageId":"1534","endLine":100,"endColumn":40},{"ruleId":"1531","severity":1,"message":"1545","line":107,"column":35,"nodeType":"1533","messageId":"1534","endLine":107,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":107,"column":80,"nodeType":"1533","messageId":"1534","endLine":107,"endColumn":82},{"ruleId":"1531","severity":1,"message":"1545","line":113,"column":30,"nodeType":"1533","messageId":"1534","endLine":113,"endColumn":32},{"ruleId":"1531","severity":1,"message":"1545","line":113,"column":72,"nodeType":"1533","messageId":"1534","endLine":113,"endColumn":74},{"ruleId":"1531","severity":1,"message":"1532","line":126,"column":34,"nodeType":"1533","messageId":"1534","endLine":126,"endColumn":36},{"ruleId":"1531","severity":1,"message":"1545","line":155,"column":33,"nodeType":"1533","messageId":"1534","endLine":155,"endColumn":35},{"ruleId":"1531","severity":1,"message":"1545","line":336,"column":80,"nodeType":"1533","messageId":"1534","endLine":336,"endColumn":82},{"ruleId":"1531","severity":1,"message":"1545","line":371,"column":78,"nodeType":"1533","messageId":"1534","endLine":371,"endColumn":80},{"ruleId":"1531","severity":1,"message":"1545","line":405,"column":81,"nodeType":"1533","messageId":"1534","endLine":405,"endColumn":83},{"ruleId":"1522","severity":1,"message":"1627","line":6,"column":72,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":78},{"ruleId":"1522","severity":1,"message":"1599","line":3,"column":40,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":50},{"ruleId":"1522","severity":1,"message":"1675","line":10,"column":10,"nodeType":"1524","messageId":"1525","endLine":10,"endColumn":29},{"ruleId":"1522","severity":1,"message":"1602","line":13,"column":5,"nodeType":"1524","messageId":"1525","endLine":13,"endColumn":17},{"ruleId":"1522","severity":1,"message":"1603","line":17,"column":5,"nodeType":"1524","messageId":"1525","endLine":17,"endColumn":12},{"ruleId":"1522","severity":1,"message":"1676","line":37,"column":7,"nodeType":"1524","messageId":"1525","endLine":37,"endColumn":22},{"ruleId":"1531","severity":1,"message":"1545","line":71,"column":41,"nodeType":"1533","messageId":"1534","endLine":71,"endColumn":43},{"ruleId":"1531","severity":1,"message":"1545","line":84,"column":50,"nodeType":"1533","messageId":"1534","endLine":84,"endColumn":52},{"ruleId":"1531","severity":1,"message":"1532","line":103,"column":77,"nodeType":"1533","messageId":"1534","endLine":103,"endColumn":79},{"ruleId":"1531","severity":1,"message":"1545","line":140,"column":40,"nodeType":"1533","messageId":"1534","endLine":140,"endColumn":42},{"ruleId":"1531","severity":1,"message":"1545","line":153,"column":38,"nodeType":"1533","messageId":"1534","endLine":153,"endColumn":40},{"ruleId":"1531","severity":1,"message":"1532","line":166,"column":34,"nodeType":"1533","messageId":"1534","endLine":166,"endColumn":36},{"ruleId":"1531","severity":1,"message":"1532","line":170,"column":33,"nodeType":"1533","messageId":"1534","endLine":170,"endColumn":35},{"ruleId":"1531","severity":1,"message":"1545","line":193,"column":46,"nodeType":"1533","messageId":"1534","endLine":193,"endColumn":48},{"ruleId":"1531","severity":1,"message":"1545","line":205,"column":46,"nodeType":"1533","messageId":"1534","endLine":205,"endColumn":48},{"ruleId":"1531","severity":1,"message":"1545","line":221,"column":74,"nodeType":"1533","messageId":"1534","endLine":221,"endColumn":76},{"ruleId":"1531","severity":1,"message":"1545","line":222,"column":59,"nodeType":"1533","messageId":"1534","endLine":222,"endColumn":61},{"ruleId":"1531","severity":1,"message":"1532","line":291,"column":96,"nodeType":"1533","messageId":"1534","endLine":291,"endColumn":98},{"ruleId":"1531","severity":1,"message":"1545","line":305,"column":119,"nodeType":"1533","messageId":"1534","endLine":305,"endColumn":121},{"ruleId":"1531","severity":1,"message":"1545","line":307,"column":108,"nodeType":"1533","messageId":"1534","endLine":307,"endColumn":110},{"ruleId":"1531","severity":1,"message":"1545","line":312,"column":120,"nodeType":"1533","messageId":"1534","endLine":312,"endColumn":122},{"ruleId":"1531","severity":1,"message":"1545","line":314,"column":109,"nodeType":"1533","messageId":"1534","endLine":314,"endColumn":111},{"ruleId":"1531","severity":1,"message":"1545","line":322,"column":119,"nodeType":"1533","messageId":"1534","endLine":322,"endColumn":121},{"ruleId":"1531","severity":1,"message":"1545","line":324,"column":108,"nodeType":"1533","messageId":"1534","endLine":324,"endColumn":110},{"ruleId":"1531","severity":1,"message":"1545","line":329,"column":120,"nodeType":"1533","messageId":"1534","endLine":329,"endColumn":122},{"ruleId":"1531","severity":1,"message":"1545","line":331,"column":109,"nodeType":"1533","messageId":"1534","endLine":331,"endColumn":111},{"ruleId":"1531","severity":1,"message":"1545","line":338,"column":96,"nodeType":"1533","messageId":"1534","endLine":338,"endColumn":98},{"ruleId":"1531","severity":1,"message":"1545","line":360,"column":91,"nodeType":"1533","messageId":"1534","endLine":360,"endColumn":93},{"ruleId":"1531","severity":1,"message":"1545","line":362,"column":80,"nodeType":"1533","messageId":"1534","endLine":362,"endColumn":82},{"ruleId":"1531","severity":1,"message":"1545","line":367,"column":92,"nodeType":"1533","messageId":"1534","endLine":367,"endColumn":94},{"ruleId":"1531","severity":1,"message":"1545","line":369,"column":81,"nodeType":"1533","messageId":"1534","endLine":369,"endColumn":83},{"ruleId":"1531","severity":1,"message":"1532","line":408,"column":74,"nodeType":"1533","messageId":"1534","endLine":408,"endColumn":76},{"ruleId":"1531","severity":1,"message":"1545","line":409,"column":99,"nodeType":"1533","messageId":"1534","endLine":409,"endColumn":101},{"ruleId":"1531","severity":1,"message":"1532","line":419,"column":109,"nodeType":"1533","messageId":"1534","endLine":419,"endColumn":111},{"ruleId":"1522","severity":1,"message":"1596","line":2,"column":28,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":35},{"ruleId":"1522","severity":1,"message":"1597","line":2,"column":54,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":57},{"ruleId":"1522","severity":1,"message":"1598","line":2,"column":59,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":70},{"ruleId":"1522","severity":1,"message":"1599","line":2,"column":80,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":90},{"ruleId":"1531","severity":1,"message":"1545","line":67,"column":68,"nodeType":"1533","messageId":"1534","endLine":67,"endColumn":70},{"ruleId":"1531","severity":1,"message":"1545","line":78,"column":28,"nodeType":"1533","messageId":"1534","endLine":78,"endColumn":30},{"ruleId":"1531","severity":1,"message":"1545","line":92,"column":29,"nodeType":"1533","messageId":"1534","endLine":92,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":100,"column":28,"nodeType":"1533","messageId":"1534","endLine":100,"endColumn":30},{"ruleId":"1531","severity":1,"message":"1545","line":108,"column":26,"nodeType":"1533","messageId":"1534","endLine":108,"endColumn":28},{"ruleId":"1531","severity":1,"message":"1545","line":116,"column":31,"nodeType":"1533","messageId":"1534","endLine":116,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1545","line":130,"column":26,"nodeType":"1533","messageId":"1534","endLine":130,"endColumn":28},{"ruleId":"1531","severity":1,"message":"1545","line":138,"column":28,"nodeType":"1533","messageId":"1534","endLine":138,"endColumn":30},{"ruleId":"1531","severity":1,"message":"1545","line":146,"column":25,"nodeType":"1533","messageId":"1534","endLine":146,"endColumn":27},{"ruleId":"1531","severity":1,"message":"1545","line":152,"column":30,"nodeType":"1533","messageId":"1534","endLine":152,"endColumn":32},{"ruleId":"1531","severity":1,"message":"1545","line":152,"column":56,"nodeType":"1533","messageId":"1534","endLine":152,"endColumn":58},{"ruleId":"1531","severity":1,"message":"1545","line":167,"column":31,"nodeType":"1533","messageId":"1534","endLine":167,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1532","line":174,"column":34,"nodeType":"1533","messageId":"1534","endLine":174,"endColumn":36},{"ruleId":"1531","severity":1,"message":"1545","line":197,"column":35,"nodeType":"1533","messageId":"1534","endLine":197,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1532","line":260,"column":63,"nodeType":"1533","messageId":"1534","endLine":260,"endColumn":65},{"ruleId":"1531","severity":1,"message":"1532","line":265,"column":61,"nodeType":"1533","messageId":"1534","endLine":265,"endColumn":63},{"ruleId":"1531","severity":1,"message":"1545","line":293,"column":127,"nodeType":"1533","messageId":"1534","endLine":293,"endColumn":129},{"ruleId":"1522","severity":1,"message":"1596","line":2,"column":28,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":35},{"ruleId":"1522","severity":1,"message":"1597","line":2,"column":54,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":57},{"ruleId":"1522","severity":1,"message":"1598","line":2,"column":59,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":70},{"ruleId":"1522","severity":1,"message":"1599","line":2,"column":80,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":90},{"ruleId":"1522","severity":1,"message":"1602","line":9,"column":5,"nodeType":"1524","messageId":"1525","endLine":9,"endColumn":17},{"ruleId":"1522","severity":1,"message":"1603","line":13,"column":5,"nodeType":"1524","messageId":"1525","endLine":13,"endColumn":12},{"ruleId":"1531","severity":1,"message":"1545","line":132,"column":23,"nodeType":"1533","messageId":"1534","endLine":132,"endColumn":25},{"ruleId":"1531","severity":1,"message":"1545","line":140,"column":68,"nodeType":"1533","messageId":"1534","endLine":140,"endColumn":70},{"ruleId":"1535","severity":1,"message":"1538","line":148,"column":17,"nodeType":"1524","messageId":"1537","endLine":148,"endColumn":18},{"ruleId":"1531","severity":1,"message":"1545","line":150,"column":74,"nodeType":"1533","messageId":"1534","endLine":150,"endColumn":76},{"ruleId":"1531","severity":1,"message":"1545","line":160,"column":28,"nodeType":"1533","messageId":"1534","endLine":160,"endColumn":30},{"ruleId":"1531","severity":1,"message":"1545","line":174,"column":29,"nodeType":"1533","messageId":"1534","endLine":174,"endColumn":31},{"ruleId":"1531","severity":1,"message":"1545","line":182,"column":28,"nodeType":"1533","messageId":"1534","endLine":182,"endColumn":30},{"ruleId":"1531","severity":1,"message":"1545","line":190,"column":26,"nodeType":"1533","messageId":"1534","endLine":190,"endColumn":28},{"ruleId":"1531","severity":1,"message":"1545","line":198,"column":31,"nodeType":"1533","messageId":"1534","endLine":198,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1545","line":212,"column":26,"nodeType":"1533","messageId":"1534","endLine":212,"endColumn":28},{"ruleId":"1531","severity":1,"message":"1545","line":220,"column":28,"nodeType":"1533","messageId":"1534","endLine":220,"endColumn":30},{"ruleId":"1531","severity":1,"message":"1545","line":228,"column":25,"nodeType":"1533","messageId":"1534","endLine":228,"endColumn":27},{"ruleId":"1531","severity":1,"message":"1545","line":234,"column":30,"nodeType":"1533","messageId":"1534","endLine":234,"endColumn":32},{"ruleId":"1531","severity":1,"message":"1545","line":234,"column":56,"nodeType":"1533","messageId":"1534","endLine":234,"endColumn":58},{"ruleId":"1531","severity":1,"message":"1545","line":249,"column":31,"nodeType":"1533","messageId":"1534","endLine":249,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1532","line":256,"column":34,"nodeType":"1533","messageId":"1534","endLine":256,"endColumn":36},{"ruleId":"1531","severity":1,"message":"1545","line":320,"column":34,"nodeType":"1533","messageId":"1534","endLine":320,"endColumn":36},{"ruleId":"1531","severity":1,"message":"1545","line":345,"column":127,"nodeType":"1533","messageId":"1534","endLine":345,"endColumn":129},{"ruleId":"1606","severity":1,"message":"1607","line":105,"column":8,"nodeType":"1608","endLine":105,"endColumn":10,"suggestions":"1677"},{"ruleId":"1522","severity":1,"message":"1601","line":19,"column":8,"nodeType":"1524","messageId":"1525","endLine":19,"endColumn":13},{"ruleId":"1522","severity":1,"message":"1678","line":27,"column":11,"nodeType":"1524","messageId":"1525","endLine":27,"endColumn":19},{"ruleId":"1539","severity":1,"message":"1540","line":105,"column":35,"nodeType":"1541","messageId":"1542","endLine":105,"endColumn":37},{"ruleId":"1539","severity":1,"message":"1540","line":31,"column":43,"nodeType":"1541","messageId":"1542","endLine":31,"endColumn":45},{"ruleId":"1531","severity":1,"message":"1532","line":35,"column":44,"nodeType":"1533","messageId":"1534","endLine":35,"endColumn":46},{"ruleId":"1539","severity":1,"message":"1540","line":44,"column":43,"nodeType":"1541","messageId":"1542","endLine":44,"endColumn":45},{"ruleId":"1531","severity":1,"message":"1532","line":51,"column":44,"nodeType":"1533","messageId":"1534","endLine":51,"endColumn":46},{"ruleId":"1539","severity":1,"message":"1540","line":60,"column":43,"nodeType":"1541","messageId":"1542","endLine":60,"endColumn":45},{"ruleId":"1531","severity":1,"message":"1532","line":66,"column":44,"nodeType":"1533","messageId":"1534","endLine":66,"endColumn":46},{"ruleId":"1531","severity":1,"message":"1532","line":79,"column":44,"nodeType":"1533","messageId":"1534","endLine":79,"endColumn":46},{"ruleId":"1531","severity":1,"message":"1532","line":146,"column":70,"nodeType":"1533","messageId":"1534","endLine":146,"endColumn":72},{"ruleId":"1531","severity":1,"message":"1532","line":159,"column":117,"nodeType":"1533","messageId":"1534","endLine":159,"endColumn":119},{"ruleId":"1531","severity":1,"message":"1532","line":169,"column":124,"nodeType":"1533","messageId":"1534","endLine":169,"endColumn":126},{"ruleId":"1531","severity":1,"message":"1532","line":180,"column":91,"nodeType":"1533","messageId":"1534","endLine":180,"endColumn":93},{"ruleId":"1606","severity":1,"message":"1607","line":55,"column":6,"nodeType":"1608","endLine":55,"endColumn":8,"suggestions":"1679"},{"ruleId":"1606","severity":1,"message":"1607","line":51,"column":6,"nodeType":"1608","endLine":51,"endColumn":8,"suggestions":"1680"},{"ruleId":"1522","severity":1,"message":"1681","line":3,"column":10,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":24},{"ruleId":"1522","severity":1,"message":"1597","line":4,"column":10,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":13},{"ruleId":"1522","severity":1,"message":"1584","line":4,"column":15,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":23},{"ruleId":"1522","severity":1,"message":"1682","line":5,"column":10,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":20},{"ruleId":"1522","severity":1,"message":"1683","line":20,"column":5,"nodeType":"1524","messageId":"1525","endLine":20,"endColumn":10},{"ruleId":"1522","severity":1,"message":"1684","line":21,"column":5,"nodeType":"1524","messageId":"1525","endLine":21,"endColumn":12},{"ruleId":"1522","severity":1,"message":"1685","line":22,"column":5,"nodeType":"1524","messageId":"1525","endLine":22,"endColumn":13},{"ruleId":"1522","severity":1,"message":"1686","line":24,"column":5,"nodeType":"1524","messageId":"1525","endLine":24,"endColumn":16},{"ruleId":"1522","severity":1,"message":"1687","line":25,"column":5,"nodeType":"1524","messageId":"1525","endLine":25,"endColumn":18},{"ruleId":"1522","severity":1,"message":"1688","line":26,"column":5,"nodeType":"1524","messageId":"1525","endLine":26,"endColumn":21},{"ruleId":"1522","severity":1,"message":"1689","line":6,"column":21,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":25},{"ruleId":"1522","severity":1,"message":"1690","line":6,"column":27,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":35},{"ruleId":"1522","severity":1,"message":"1691","line":6,"column":37,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":51},{"ruleId":"1522","severity":1,"message":"1692","line":6,"column":53,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":65},{"ruleId":"1522","severity":1,"message":"1693","line":14,"column":8,"nodeType":"1524","messageId":"1525","endLine":14,"endColumn":26},{"ruleId":"1531","severity":1,"message":"1545","line":48,"column":44,"nodeType":"1533","messageId":"1534","endLine":48,"endColumn":46},{"ruleId":"1531","severity":1,"message":"1545","line":61,"column":44,"nodeType":"1533","messageId":"1534","endLine":61,"endColumn":46},{"ruleId":"1531","severity":1,"message":"1545","line":200,"column":33,"nodeType":"1533","messageId":"1534","endLine":200,"endColumn":35},{"ruleId":"1531","severity":1,"message":"1545","line":201,"column":33,"nodeType":"1533","messageId":"1534","endLine":201,"endColumn":35},{"ruleId":"1531","severity":1,"message":"1545","line":215,"column":33,"nodeType":"1533","messageId":"1534","endLine":215,"endColumn":35},{"ruleId":"1531","severity":1,"message":"1545","line":216,"column":36,"nodeType":"1533","messageId":"1534","endLine":216,"endColumn":38},{"ruleId":"1531","severity":1,"message":"1545","line":217,"column":63,"nodeType":"1533","messageId":"1534","endLine":217,"endColumn":65},{"ruleId":"1531","severity":1,"message":"1545","line":269,"column":40,"nodeType":"1533","messageId":"1534","endLine":269,"endColumn":42},{"ruleId":"1531","severity":1,"message":"1545","line":270,"column":44,"nodeType":"1533","messageId":"1534","endLine":270,"endColumn":46},{"ruleId":"1522","severity":1,"message":"1694","line":3,"column":10,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":14},{"ruleId":"1522","severity":1,"message":"1695","line":3,"column":16,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":26},{"ruleId":"1522","severity":1,"message":"1696","line":3,"column":28,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":33},{"ruleId":"1522","severity":1,"message":"1697","line":3,"column":41,"nodeType":"1524","messageId":"1525","endLine":3,"endColumn":50},{"ruleId":"1522","severity":1,"message":"1698","line":4,"column":5,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":14},{"ruleId":"1522","severity":1,"message":"1699","line":4,"column":16,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":30},{"ruleId":"1522","severity":1,"message":"1627","line":4,"column":32,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":38},{"ruleId":"1522","severity":1,"message":"1599","line":4,"column":40,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":50},{"ruleId":"1522","severity":1,"message":"1700","line":5,"column":5,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":10},{"ruleId":"1522","severity":1,"message":"1701","line":5,"column":12,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":20},{"ruleId":"1522","severity":1,"message":"1588","line":5,"column":22,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":31},{"ruleId":"1522","severity":1,"message":"1600","line":6,"column":10,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":15},{"ruleId":"1531","severity":1,"message":"1545","line":26,"column":46,"nodeType":"1533","messageId":"1534","endLine":26,"endColumn":48},{"ruleId":"1531","severity":1,"message":"1545","line":51,"column":53,"nodeType":"1533","messageId":"1534","endLine":51,"endColumn":55},{"ruleId":"1531","severity":1,"message":"1532","line":132,"column":96,"nodeType":"1533","messageId":"1534","endLine":132,"endColumn":98},{"ruleId":"1531","severity":1,"message":"1532","line":151,"column":98,"nodeType":"1533","messageId":"1534","endLine":151,"endColumn":100},{"ruleId":"1522","severity":1,"message":"1702","line":5,"column":9,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":19},{"ruleId":"1522","severity":1,"message":"1694","line":11,"column":10,"nodeType":"1524","messageId":"1525","endLine":11,"endColumn":14},{"ruleId":"1522","severity":1,"message":"1695","line":11,"column":16,"nodeType":"1524","messageId":"1525","endLine":11,"endColumn":26},{"ruleId":"1522","severity":1,"message":"1596","line":11,"column":28,"nodeType":"1524","messageId":"1525","endLine":11,"endColumn":35},{"ruleId":"1522","severity":1,"message":"1697","line":11,"column":43,"nodeType":"1524","messageId":"1525","endLine":11,"endColumn":52},{"ruleId":"1522","severity":1,"message":"1598","line":11,"column":59,"nodeType":"1524","messageId":"1525","endLine":11,"endColumn":70},{"ruleId":"1531","severity":1,"message":"1545","line":51,"column":25,"nodeType":"1533","messageId":"1534","endLine":51,"endColumn":27},{"ruleId":"1522","severity":1,"message":"1697","line":2,"column":43,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":52},{"ruleId":"1522","severity":1,"message":"1572","line":4,"column":25,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":31},{"ruleId":"1522","severity":1,"message":"1601","line":7,"column":8,"nodeType":"1524","messageId":"1525","endLine":7,"endColumn":13},{"ruleId":"1526","severity":1,"message":"1527","line":10,"column":5,"nodeType":"1528","messageId":"1529","endLine":12,"endColumn":6},{"ruleId":"1703","severity":1,"message":"1704","line":26,"column":9,"nodeType":"1705","messageId":"1706","endLine":32,"endColumn":10},{"ruleId":"1707","severity":1,"message":"1708","line":30,"column":13,"nodeType":"1709","messageId":"1710","endLine":31,"endColumn":67},{"ruleId":"1522","severity":1,"message":"1697","line":2,"column":43,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":52},{"ruleId":"1522","severity":1,"message":"1711","line":2,"column":80,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":85},{"ruleId":"1522","severity":1,"message":"1628","line":4,"column":10,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":23},{"ruleId":"1522","severity":1,"message":"1572","line":4,"column":25,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":31},{"ruleId":"1522","severity":1,"message":"1712","line":5,"column":10,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":18},{"ruleId":"1522","severity":1,"message":"1601","line":8,"column":8,"nodeType":"1524","messageId":"1525","endLine":8,"endColumn":13},{"ruleId":"1522","severity":1,"message":"1560","line":2,"column":80,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":85},{"ruleId":"1522","severity":1,"message":"1572","line":4,"column":25,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":31},{"ruleId":"1522","severity":1,"message":"1713","line":6,"column":20,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1545","line":26,"column":47,"nodeType":"1533","messageId":"1534","endLine":26,"endColumn":49},{"ruleId":"1531","severity":1,"message":"1545","line":61,"column":37,"nodeType":"1533","messageId":"1534","endLine":61,"endColumn":39},{"ruleId":"1531","severity":1,"message":"1545","line":69,"column":27,"nodeType":"1533","messageId":"1534","endLine":69,"endColumn":29},{"ruleId":"1606","severity":1,"message":"1714","line":79,"column":7,"nodeType":"1608","endLine":79,"endColumn":27,"suggestions":"1715"},{"ruleId":"1606","severity":1,"message":"1714","line":89,"column":7,"nodeType":"1608","endLine":89,"endColumn":26,"suggestions":"1716"},{"ruleId":"1606","severity":1,"message":"1714","line":99,"column":7,"nodeType":"1608","endLine":99,"endColumn":28,"suggestions":"1717"},{"ruleId":"1606","severity":1,"message":"1714","line":129,"column":7,"nodeType":"1608","endLine":129,"endColumn":78,"suggestions":"1718"},{"ruleId":"1522","severity":1,"message":"1694","line":9,"column":10,"nodeType":"1524","messageId":"1525","endLine":9,"endColumn":14},{"ruleId":"1522","severity":1,"message":"1695","line":9,"column":16,"nodeType":"1524","messageId":"1525","endLine":9,"endColumn":26},{"ruleId":"1522","severity":1,"message":"1596","line":9,"column":28,"nodeType":"1524","messageId":"1525","endLine":9,"endColumn":35},{"ruleId":"1522","severity":1,"message":"1697","line":9,"column":43,"nodeType":"1524","messageId":"1525","endLine":9,"endColumn":52},{"ruleId":"1522","severity":1,"message":"1598","line":9,"column":59,"nodeType":"1524","messageId":"1525","endLine":9,"endColumn":70},{"ruleId":"1531","severity":1,"message":"1545","line":88,"column":70,"nodeType":"1533","messageId":"1534","endLine":88,"endColumn":72},{"ruleId":"1531","severity":1,"message":"1545","line":115,"column":21,"nodeType":"1533","messageId":"1534","endLine":115,"endColumn":23},{"ruleId":"1522","severity":1,"message":"1560","line":2,"column":80,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":85},{"ruleId":"1522","severity":1,"message":"1572","line":4,"column":25,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":31},{"ruleId":"1522","severity":1,"message":"1713","line":6,"column":20,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1545","line":52,"column":45,"nodeType":"1533","messageId":"1534","endLine":52,"endColumn":47},{"ruleId":"1531","severity":1,"message":"1545","line":85,"column":37,"nodeType":"1533","messageId":"1534","endLine":85,"endColumn":39},{"ruleId":"1531","severity":1,"message":"1545","line":87,"column":35,"nodeType":"1533","messageId":"1534","endLine":87,"endColumn":37},{"ruleId":"1531","severity":1,"message":"1545","line":100,"column":27,"nodeType":"1533","messageId":"1534","endLine":100,"endColumn":29},{"ruleId":"1531","severity":1,"message":"1545","line":119,"column":45,"nodeType":"1533","messageId":"1534","endLine":119,"endColumn":47},{"ruleId":"1531","severity":1,"message":"1545","line":155,"column":53,"nodeType":"1533","messageId":"1534","endLine":155,"endColumn":55},{"ruleId":"1522","severity":1,"message":"1599","line":6,"column":10,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":20},{"ruleId":"1522","severity":1,"message":"1711","line":6,"column":30,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":35},{"ruleId":"1522","severity":1,"message":"1719","line":11,"column":8,"nodeType":"1524","messageId":"1525","endLine":11,"endColumn":17},{"ruleId":"1522","severity":1,"message":"1720","line":15,"column":8,"nodeType":"1524","messageId":"1525","endLine":15,"endColumn":22},{"ruleId":"1522","severity":1,"message":"1657","line":16,"column":8,"nodeType":"1524","messageId":"1525","endLine":16,"endColumn":22},{"ruleId":"1522","severity":1,"message":"1658","line":17,"column":8,"nodeType":"1524","messageId":"1525","endLine":17,"endColumn":28},{"ruleId":"1522","severity":1,"message":"1675","line":20,"column":10,"nodeType":"1524","messageId":"1525","endLine":20,"endColumn":29},{"ruleId":"1522","severity":1,"message":"1721","line":22,"column":5,"nodeType":"1524","messageId":"1525","endLine":22,"endColumn":9},{"ruleId":"1531","severity":1,"message":"1545","line":147,"column":47,"nodeType":"1533","messageId":"1534","endLine":147,"endColumn":49},{"ruleId":"1531","severity":1,"message":"1545","line":150,"column":45,"nodeType":"1533","messageId":"1534","endLine":150,"endColumn":47},{"ruleId":"1531","severity":1,"message":"1545","line":207,"column":43,"nodeType":"1533","messageId":"1534","endLine":207,"endColumn":45},{"ruleId":"1531","severity":1,"message":"1545","line":210,"column":41,"nodeType":"1533","messageId":"1534","endLine":210,"endColumn":43},{"ruleId":"1531","severity":1,"message":"1545","line":228,"column":31,"nodeType":"1533","messageId":"1534","endLine":228,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1545","line":235,"column":78,"nodeType":"1533","messageId":"1534","endLine":235,"endColumn":80},{"ruleId":"1531","severity":1,"message":"1545","line":248,"column":70,"nodeType":"1533","messageId":"1534","endLine":248,"endColumn":72},{"ruleId":"1531","severity":1,"message":"1545","line":255,"column":79,"nodeType":"1533","messageId":"1534","endLine":255,"endColumn":81},{"ruleId":"1531","severity":1,"message":"1545","line":268,"column":75,"nodeType":"1533","messageId":"1534","endLine":268,"endColumn":77},{"ruleId":"1531","severity":1,"message":"1545","line":304,"column":31,"nodeType":"1533","messageId":"1534","endLine":304,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1532","line":311,"column":33,"nodeType":"1533","messageId":"1534","endLine":311,"endColumn":35},{"ruleId":"1531","severity":1,"message":"1545","line":334,"column":53,"nodeType":"1533","messageId":"1534","endLine":334,"endColumn":55},{"ruleId":"1531","severity":1,"message":"1545","line":346,"column":26,"nodeType":"1533","messageId":"1534","endLine":346,"endColumn":28},{"ruleId":"1531","severity":1,"message":"1545","line":369,"column":144,"nodeType":"1533","messageId":"1534","endLine":369,"endColumn":146},{"ruleId":"1531","severity":1,"message":"1532","line":514,"column":75,"nodeType":"1533","messageId":"1534","endLine":514,"endColumn":77},{"ruleId":"1531","severity":1,"message":"1545","line":536,"column":74,"nodeType":"1533","messageId":"1534","endLine":536,"endColumn":76},{"ruleId":"1531","severity":1,"message":"1545","line":558,"column":70,"nodeType":"1533","messageId":"1534","endLine":558,"endColumn":72},{"ruleId":"1531","severity":1,"message":"1545","line":586,"column":86,"nodeType":"1533","messageId":"1534","endLine":586,"endColumn":88},{"ruleId":"1531","severity":1,"message":"1532","line":616,"column":85,"nodeType":"1533","messageId":"1534","endLine":616,"endColumn":87},{"ruleId":"1522","severity":1,"message":"1597","line":2,"column":54,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":57},{"ruleId":"1522","severity":1,"message":"1598","line":2,"column":59,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":70},{"ruleId":"1522","severity":1,"message":"1599","line":2,"column":80,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":90},{"ruleId":"1522","severity":1,"message":"1628","line":4,"column":10,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":23},{"ruleId":"1522","severity":1,"message":"1572","line":4,"column":25,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":31},{"ruleId":"1522","severity":1,"message":"1582","line":5,"column":8,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":13},{"ruleId":"1522","severity":1,"message":"1722","line":6,"column":10,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":18},{"ruleId":"1522","severity":1,"message":"1719","line":13,"column":8,"nodeType":"1524","messageId":"1525","endLine":13,"endColumn":17},{"ruleId":"1522","severity":1,"message":"1658","line":16,"column":8,"nodeType":"1524","messageId":"1525","endLine":16,"endColumn":28},{"ruleId":"1522","severity":1,"message":"1657","line":17,"column":8,"nodeType":"1524","messageId":"1525","endLine":17,"endColumn":22},{"ruleId":"1522","severity":1,"message":"1723","line":18,"column":8,"nodeType":"1524","messageId":"1525","endLine":18,"endColumn":18},{"ruleId":"1522","severity":1,"message":"1720","line":19,"column":8,"nodeType":"1524","messageId":"1525","endLine":19,"endColumn":22},{"ruleId":"1531","severity":1,"message":"1545","line":51,"column":68,"nodeType":"1533","messageId":"1534","endLine":51,"endColumn":70},{"ruleId":"1531","severity":1,"message":"1545","line":51,"column":110,"nodeType":"1533","messageId":"1534","endLine":51,"endColumn":112},{"ruleId":"1535","severity":1,"message":"1538","line":100,"column":17,"nodeType":"1524","messageId":"1537","endLine":100,"endColumn":18},{"ruleId":"1531","severity":1,"message":"1545","line":141,"column":44,"nodeType":"1533","messageId":"1534","endLine":141,"endColumn":46},{"ruleId":"1531","severity":1,"message":"1545","line":167,"column":31,"nodeType":"1533","messageId":"1534","endLine":167,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1545","line":174,"column":78,"nodeType":"1533","messageId":"1534","endLine":174,"endColumn":80},{"ruleId":"1531","severity":1,"message":"1545","line":187,"column":70,"nodeType":"1533","messageId":"1534","endLine":187,"endColumn":72},{"ruleId":"1531","severity":1,"message":"1545","line":194,"column":79,"nodeType":"1533","messageId":"1534","endLine":194,"endColumn":81},{"ruleId":"1531","severity":1,"message":"1545","line":207,"column":75,"nodeType":"1533","messageId":"1534","endLine":207,"endColumn":77},{"ruleId":"1531","severity":1,"message":"1545","line":244,"column":31,"nodeType":"1533","messageId":"1534","endLine":244,"endColumn":33},{"ruleId":"1531","severity":1,"message":"1532","line":251,"column":34,"nodeType":"1533","messageId":"1534","endLine":251,"endColumn":36},{"ruleId":"1531","severity":1,"message":"1545","line":291,"column":47,"nodeType":"1533","messageId":"1534","endLine":291,"endColumn":49},{"ruleId":"1531","severity":1,"message":"1545","line":294,"column":45,"nodeType":"1533","messageId":"1534","endLine":294,"endColumn":47},{"ruleId":"1535","severity":1,"message":"1538","line":362,"column":17,"nodeType":"1524","messageId":"1537","endLine":362,"endColumn":18},{"ruleId":"1531","severity":1,"message":"1545","line":394,"column":43,"nodeType":"1533","messageId":"1534","endLine":394,"endColumn":45},{"ruleId":"1531","severity":1,"message":"1545","line":397,"column":41,"nodeType":"1533","messageId":"1534","endLine":397,"endColumn":43},{"ruleId":"1531","severity":1,"message":"1545","line":469,"column":20,"nodeType":"1533","messageId":"1534","endLine":469,"endColumn":22},{"ruleId":"1531","severity":1,"message":"1545","line":478,"column":26,"nodeType":"1533","messageId":"1534","endLine":478,"endColumn":28},{"ruleId":"1531","severity":1,"message":"1545","line":504,"column":127,"nodeType":"1533","messageId":"1534","endLine":504,"endColumn":129},{"ruleId":"1531","severity":1,"message":"1532","line":661,"column":62,"nodeType":"1533","messageId":"1534","endLine":661,"endColumn":64},{"ruleId":"1531","severity":1,"message":"1545","line":663,"column":79,"nodeType":"1533","messageId":"1534","endLine":663,"endColumn":81},{"ruleId":"1531","severity":1,"message":"1545","line":681,"column":91,"nodeType":"1533","messageId":"1534","endLine":681,"endColumn":93},{"ruleId":"1531","severity":1,"message":"1545","line":710,"column":66,"nodeType":"1533","messageId":"1534","endLine":710,"endColumn":68},{"ruleId":"1531","severity":1,"message":"1545","line":737,"column":66,"nodeType":"1533","messageId":"1534","endLine":737,"endColumn":68},{"ruleId":"1531","severity":1,"message":"1545","line":765,"column":78,"nodeType":"1533","messageId":"1534","endLine":765,"endColumn":80},{"ruleId":"1531","severity":1,"message":"1532","line":794,"column":81,"nodeType":"1533","messageId":"1534","endLine":794,"endColumn":83},{"ruleId":"1522","severity":1,"message":"1601","line":11,"column":8,"nodeType":"1524","messageId":"1525","endLine":11,"endColumn":13},{"ruleId":"1522","severity":1,"message":"1724","line":30,"column":5,"nodeType":"1524","messageId":"1525","endLine":30,"endColumn":21},{"ruleId":"1522","severity":1,"message":"1725","line":31,"column":5,"nodeType":"1524","messageId":"1525","endLine":31,"endColumn":18},{"ruleId":"1522","severity":1,"message":"1726","line":32,"column":5,"nodeType":"1524","messageId":"1525","endLine":32,"endColumn":18},{"ruleId":"1531","severity":1,"message":"1545","line":47,"column":53,"nodeType":"1533","messageId":"1534","endLine":47,"endColumn":55},{"ruleId":"1531","severity":1,"message":"1545","line":74,"column":62,"nodeType":"1533","messageId":"1534","endLine":74,"endColumn":64},{"ruleId":"1531","severity":1,"message":"1545","line":76,"column":44,"nodeType":"1533","messageId":"1534","endLine":76,"endColumn":46},{"ruleId":"1522","severity":1,"message":"1699","line":15,"column":8,"nodeType":"1524","messageId":"1525","endLine":15,"endColumn":22},{"ruleId":"1522","severity":1,"message":"1632","line":18,"column":10,"nodeType":"1524","messageId":"1525","endLine":18,"endColumn":21},{"ruleId":"1522","severity":1,"message":"1727","line":22,"column":10,"nodeType":"1524","messageId":"1525","endLine":22,"endColumn":22},{"ruleId":"1531","severity":1,"message":"1545","line":137,"column":57,"nodeType":"1533","messageId":"1534","endLine":137,"endColumn":59},{"ruleId":"1531","severity":1,"message":"1545","line":160,"column":67,"nodeType":"1533","messageId":"1534","endLine":160,"endColumn":69},{"ruleId":"1531","severity":1,"message":"1545","line":162,"column":56,"nodeType":"1533","messageId":"1534","endLine":162,"endColumn":58},{"ruleId":"1531","severity":1,"message":"1545","line":169,"column":72,"nodeType":"1533","messageId":"1534","endLine":169,"endColumn":74},{"ruleId":"1531","severity":1,"message":"1545","line":171,"column":61,"nodeType":"1533","messageId":"1534","endLine":171,"endColumn":63},{"ruleId":"1531","severity":1,"message":"1545","line":178,"column":86,"nodeType":"1533","messageId":"1534","endLine":178,"endColumn":88},{"ruleId":"1531","severity":1,"message":"1545","line":198,"column":52,"nodeType":"1533","messageId":"1534","endLine":198,"endColumn":54},{"ruleId":"1561","severity":1,"message":"1562","line":199,"column":109,"nodeType":"1563","endLine":199,"endColumn":192},{"ruleId":"1531","severity":1,"message":"1545","line":217,"column":105,"nodeType":"1533","messageId":"1534","endLine":217,"endColumn":107},{"ruleId":"1531","severity":1,"message":"1545","line":222,"column":99,"nodeType":"1533","messageId":"1534","endLine":222,"endColumn":101},{"ruleId":"1531","severity":1,"message":"1545","line":224,"column":88,"nodeType":"1533","messageId":"1534","endLine":224,"endColumn":90},{"ruleId":"1531","severity":1,"message":"1545","line":230,"column":108,"nodeType":"1533","messageId":"1534","endLine":230,"endColumn":110},{"ruleId":"1531","severity":1,"message":"1545","line":232,"column":97,"nodeType":"1533","messageId":"1534","endLine":232,"endColumn":99},{"ruleId":"1522","severity":1,"message":"1572","line":13,"column":25,"nodeType":"1524","messageId":"1525","endLine":13,"endColumn":31},{"ruleId":"1522","severity":1,"message":"1584","line":16,"column":29,"nodeType":"1524","messageId":"1525","endLine":16,"endColumn":37},{"ruleId":"1522","severity":1,"message":"1586","line":18,"column":8,"nodeType":"1524","messageId":"1525","endLine":18,"endColumn":18},{"ruleId":"1522","severity":1,"message":"1666","line":23,"column":10,"nodeType":"1524","messageId":"1525","endLine":23,"endColumn":21},{"ruleId":"1522","severity":1,"message":"1728","line":26,"column":10,"nodeType":"1524","messageId":"1525","endLine":26,"endColumn":20},{"ruleId":"1522","severity":1,"message":"1668","line":27,"column":25,"nodeType":"1524","messageId":"1525","endLine":27,"endColumn":37},{"ruleId":"1522","severity":1,"message":"1724","line":44,"column":5,"nodeType":"1524","messageId":"1525","endLine":44,"endColumn":21},{"ruleId":"1522","severity":1,"message":"1725","line":45,"column":5,"nodeType":"1524","messageId":"1525","endLine":45,"endColumn":18},{"ruleId":"1522","severity":1,"message":"1726","line":46,"column":5,"nodeType":"1524","messageId":"1525","endLine":46,"endColumn":18},{"ruleId":"1522","severity":1,"message":"1678","line":53,"column":11,"nodeType":"1524","messageId":"1525","endLine":53,"endColumn":19},{"ruleId":"1522","severity":1,"message":"1729","line":55,"column":12,"nodeType":"1524","messageId":"1525","endLine":55,"endColumn":31},{"ruleId":"1522","severity":1,"message":"1730","line":78,"column":11,"nodeType":"1524","messageId":"1525","endLine":78,"endColumn":24},{"ruleId":"1539","severity":1,"message":"1540","line":80,"column":35,"nodeType":"1541","messageId":"1542","endLine":80,"endColumn":37},{"ruleId":"1522","severity":1,"message":"1731","line":90,"column":11,"nodeType":"1524","messageId":"1525","endLine":90,"endColumn":21},{"ruleId":"1531","severity":1,"message":"1545","line":98,"column":42,"nodeType":"1533","messageId":"1534","endLine":98,"endColumn":44},{"ruleId":"1531","severity":1,"message":"1532","line":221,"column":37,"nodeType":"1533","messageId":"1534","endLine":221,"endColumn":39},{"ruleId":"1531","severity":1,"message":"1545","line":291,"column":60,"nodeType":"1533","messageId":"1534","endLine":291,"endColumn":62},{"ruleId":"1531","severity":1,"message":"1545","line":293,"column":53,"nodeType":"1533","messageId":"1534","endLine":293,"endColumn":55},{"ruleId":"1531","severity":1,"message":"1545","line":300,"column":65,"nodeType":"1533","messageId":"1534","endLine":300,"endColumn":67},{"ruleId":"1531","severity":1,"message":"1545","line":302,"column":58,"nodeType":"1533","messageId":"1534","endLine":302,"endColumn":60},{"ruleId":"1531","severity":1,"message":"1545","line":316,"column":48,"nodeType":"1533","messageId":"1534","endLine":316,"endColumn":50},{"ruleId":"1561","severity":1,"message":"1562","line":317,"column":124,"nodeType":"1563","endLine":317,"endColumn":211},{"ruleId":"1531","severity":1,"message":"1545","line":330,"column":80,"nodeType":"1533","messageId":"1534","endLine":330,"endColumn":82},{"ruleId":"1531","severity":1,"message":"1545","line":332,"column":73,"nodeType":"1533","messageId":"1534","endLine":332,"endColumn":75},{"ruleId":"1531","severity":1,"message":"1545","line":338,"column":85,"nodeType":"1533","messageId":"1534","endLine":338,"endColumn":87},{"ruleId":"1531","severity":1,"message":"1545","line":340,"column":78,"nodeType":"1533","messageId":"1534","endLine":340,"endColumn":80},{"ruleId":"1531","severity":1,"message":"1545","line":351,"column":102,"nodeType":"1533","messageId":"1534","endLine":351,"endColumn":104},{"ruleId":"1531","severity":1,"message":"1545","line":371,"column":88,"nodeType":"1533","messageId":"1534","endLine":371,"endColumn":90},{"ruleId":"1531","severity":1,"message":"1545","line":382,"column":84,"nodeType":"1533","messageId":"1534","endLine":382,"endColumn":86},{"ruleId":"1531","severity":1,"message":"1545","line":384,"column":77,"nodeType":"1533","messageId":"1534","endLine":384,"endColumn":79},{"ruleId":"1531","severity":1,"message":"1545","line":392,"column":85,"nodeType":"1533","messageId":"1534","endLine":392,"endColumn":87},{"ruleId":"1531","severity":1,"message":"1545","line":394,"column":78,"nodeType":"1533","messageId":"1534","endLine":394,"endColumn":80},{"ruleId":"1531","severity":1,"message":"1545","line":406,"column":84,"nodeType":"1533","messageId":"1534","endLine":406,"endColumn":86},{"ruleId":"1531","severity":1,"message":"1545","line":408,"column":77,"nodeType":"1533","messageId":"1534","endLine":408,"endColumn":79},{"ruleId":"1531","severity":1,"message":"1545","line":416,"column":85,"nodeType":"1533","messageId":"1534","endLine":416,"endColumn":87},{"ruleId":"1531","severity":1,"message":"1545","line":418,"column":78,"nodeType":"1533","messageId":"1534","endLine":418,"endColumn":80},{"ruleId":"1531","severity":1,"message":"1545","line":500,"column":54,"nodeType":"1533","messageId":"1534","endLine":500,"endColumn":56},{"ruleId":"1522","severity":1,"message":"1732","line":509,"column":17,"nodeType":"1524","messageId":"1525","endLine":509,"endColumn":24},{"ruleId":"1531","severity":1,"message":"1545","line":531,"column":58,"nodeType":"1533","messageId":"1534","endLine":531,"endColumn":60},{"ruleId":"1531","severity":1,"message":"1545","line":533,"column":45,"nodeType":"1533","messageId":"1534","endLine":533,"endColumn":47},{"ruleId":"1606","severity":1,"message":"1607","line":172,"column":8,"nodeType":"1608","endLine":172,"endColumn":10,"suggestions":"1733"},{"ruleId":"1522","severity":1,"message":"1697","line":2,"column":43,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":52},{"ruleId":"1522","severity":1,"message":"1628","line":4,"column":10,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":23},{"ruleId":"1522","severity":1,"message":"1572","line":4,"column":25,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":31},{"ruleId":"1522","severity":1,"message":"1582","line":5,"column":8,"nodeType":"1524","messageId":"1525","endLine":5,"endColumn":13},{"ruleId":"1522","severity":1,"message":"1601","line":7,"column":8,"nodeType":"1524","messageId":"1525","endLine":7,"endColumn":13},{"ruleId":"1526","severity":1,"message":"1527","line":10,"column":5,"nodeType":"1528","messageId":"1529","endLine":12,"endColumn":6},{"ruleId":"1531","severity":1,"message":"1545","line":39,"column":75,"nodeType":"1533","messageId":"1534","endLine":39,"endColumn":77},{"ruleId":"1522","severity":1,"message":"1697","line":4,"column":8,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":17},{"ruleId":"1522","severity":1,"message":"1734","line":7,"column":8,"nodeType":"1524","messageId":"1525","endLine":7,"endColumn":25},{"ruleId":"1522","severity":1,"message":"1599","line":8,"column":8,"nodeType":"1524","messageId":"1525","endLine":8,"endColumn":18},{"ruleId":"1522","severity":1,"message":"1672","line":9,"column":8,"nodeType":"1524","messageId":"1525","endLine":9,"endColumn":16},{"ruleId":"1522","severity":1,"message":"1735","line":10,"column":8,"nodeType":"1524","messageId":"1525","endLine":10,"endColumn":19},{"ruleId":"1522","severity":1,"message":"1736","line":11,"column":8,"nodeType":"1524","messageId":"1525","endLine":11,"endColumn":14},{"ruleId":"1522","severity":1,"message":"1737","line":13,"column":10,"nodeType":"1524","messageId":"1525","endLine":13,"endColumn":18},{"ruleId":"1522","severity":1,"message":"1572","line":14,"column":25,"nodeType":"1524","messageId":"1525","endLine":14,"endColumn":31},{"ruleId":"1522","severity":1,"message":"1694","line":2,"column":10,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":14},{"ruleId":"1522","severity":1,"message":"1695","line":2,"column":16,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":26},{"ruleId":"1522","severity":1,"message":"1697","line":2,"column":43,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":52},{"ruleId":"1522","severity":1,"message":"1598","line":2,"column":59,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":70},{"ruleId":"1522","severity":1,"message":"1628","line":4,"column":10,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":23},{"ruleId":"1522","severity":1,"message":"1582","line":6,"column":8,"nodeType":"1524","messageId":"1525","endLine":6,"endColumn":13},{"ruleId":"1522","severity":1,"message":"1722","line":7,"column":10,"nodeType":"1524","messageId":"1525","endLine":7,"endColumn":18},{"ruleId":"1522","severity":1,"message":"1697","line":2,"column":43,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":52},{"ruleId":"1522","severity":1,"message":"1599","line":2,"column":80,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":90},{"ruleId":"1522","severity":1,"message":"1582","line":2,"column":92,"nodeType":"1524","messageId":"1525","endLine":2,"endColumn":97},{"ruleId":"1522","severity":1,"message":"1600","line":4,"column":10,"nodeType":"1524","messageId":"1525","endLine":4,"endColumn":15},{"ruleId":"1522","severity":1,"message":"1682","line":7,"column":10,"nodeType":"1524","messageId":"1525","endLine":7,"endColumn":20},{"ruleId":"1531","severity":1,"message":"1545","line":35,"column":41,"nodeType":"1533","messageId":"1534","endLine":35,"endColumn":43},{"ruleId":"1531","severity":1,"message":"1545","line":50,"column":71,"nodeType":"1533","messageId":"1534","endLine":50,"endColumn":73},{"ruleId":"1531","severity":1,"message":"1545","line":51,"column":64,"nodeType":"1533","messageId":"1534","endLine":51,"endColumn":66},{"ruleId":"1531","severity":1,"message":"1545","line":52,"column":67,"nodeType":"1533","messageId":"1534","endLine":52,"endColumn":69},"no-unused-vars","'FiChevronRight' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'joinType' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-redeclare","'newState' is already defined.","redeclared","'i' is already defined.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","Expected '===' and instead saw '=='.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["1738","1739"],["1740","1741"],["1742","1743"],["1744","1745"],["1746","1747"],["1748","1749"],"no-dupe-keys","Duplicate key 'updateShiftTypes'.","ObjectExpression","'FiXSquare' is defined but never used.","'Alert' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'DataGrid' is defined but never used.","'GoodTable' is defined but never used.","'NavLink' is defined but never used.","'SearchBar' is defined but never used.","'inputAdornmentClasses' is defined but never used.","'SortByTable' is defined but never used.","'BiEdit' is defined but never used.","'MdOutlineIntegrationInstructions' is defined but never used.","'name' is assigned a value but never used.","'currentproductJoinType' is already defined.","'m' is already defined.","'Page' is defined but never used.","'Label' is defined but never used.","'Scrollbar' is defined but never used.","'SearchNotFound' is defined but never used.","'sentenceCase' is defined but never used.","'Stack' is defined but never used.","'Avatar' is defined but never used.","'Checkbox' is defined but never used.","'Container' is defined but never used.","'Typography' is defined but never used.","'TablePagination' is defined but never used.","'TableHead' is defined but never used.","'TableSortLabel' is defined but never used.","'EmployeeToolbar' is defined but never used.","'EmployeeTableHeader' is defined but never used.","'USERLIST' is defined but never used.","'selected' is assigned a value but never used.","'filterName' is assigned a value but never used.","'filteredUsers' is assigned a value but never used.","'Divider' is defined but never used.","'Box' is defined but never used.","'CardContent' is defined but never used.","'InputLabel' is defined but never used.","'Image' is defined but never used.","'axios' is defined but never used.","'productTypes' is assigned a value but never used.","'typeSet' is assigned a value but never used.","'useState' is defined but never used.","'useSelector' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["1750"],"'RiMoneyDollarCircleFill' is defined but never used.","'money' is assigned a value but never used.","'importProduct' is already defined.","'realDate' is already defined.","'date' is already defined.","'exportProduct' is already defined.","React Hook React.useEffect has missing dependencies: 'listProduct', 'listReciept', and 'nowTime'. Either include them or remove the dependency array.",["1751"],"React Hook React.useEffect has missing dependencies: 'listReciept' and 'nowTime'. Either include them or remove the dependency array.",["1752"],"'BsCashCoin' is defined but never used.","'salary' is assigned a value but never used.","'listReciept' is assigned a value but never used.","'totalMoney' is assigned a value but never used.","'setTotalMoney' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'listTimeKeeping' and 'nowTime'. Either include them or remove the dependency array.",["1753"],"'Button' is defined but never used.","'BiPlusMedical' is defined but never used.","'IconButton' is defined but never used.","'FiEdit' is defined but never used.","'FiTrash2' is defined but never used.","'useDispatch' is defined but never used.","React Hook React.useEffect has a missing dependency: 'listReceipt'. Either include it or remove the dependency array.",["1754"],["1755"],"'Grid' is defined but never used.",["1756"],"React Hook React.useEffect has a missing dependency: 'listReciept'. Either include it or remove the dependency array.",["1757"],["1758"],"'now' is defined but never used.","'title' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'moneyDoanhThu', 'moneyTienGoc'.","unsafeRefs","React Hook React.useEffect has missing dependencies: 'DateInMonth', 'DateInWeek', 'DateInYear', 'GrowthPercent', 'nowTime', 'totalMoneyInMonth', and 'totalMoneyInWeek'. Either include them or remove the dependency array.",["1759"],"React Hook React.useEffect has missing dependencies: 'dispatch' and 'listMAHD'. Either include them or remove the dependency array.",["1760"],"Function declared in a loop contains unsafe references to variable(s) 'i'.","Duplicate key 'InfomationBillEdit'.","'TimePicker' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'AdapterDateFns' is defined but never used.","'LocalizationProvider' is defined but never used.","'fromHour' is already defined.","'fromMin' is already defined.","'toHour' is already defined.","'toMin' is already defined.","'FaCommentsDollar' is defined but never used.","'blue' is defined but never used.","'CgDanger' is defined but never used.","'TiArrowBack' is defined but never used.","'AiOutlineEdit' is defined but never used.","'AiFillDelete' is defined but never used.","'listUsers' is assigned a value but never used.","'moreVerticalFill' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","no-dupe-class-members","Duplicate name 'getCurrentDateTime'.","'GiConsoleController' is defined but never used.","'StyledTextField' is assigned a value but never used.",["1761"],"'infoUser' is assigned a value but never used.",["1762"],["1763"],"'visuallyHidden' is defined but never used.","'withStyles' is defined but never used.","'order' is assigned a value but never used.","'orderBy' is assigned a value but never used.","'rowCount' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'onRequestSort' is assigned a value but never used.","'onSelectAllClick' is assigned a value but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemButton' is defined but never used.","'ListItemText' is defined but never used.","'AddEmployeeToShift' is defined but never used.","'Card' is defined but never used.","'CardHeader' is defined but never used.","'Table' is defined but never used.","'TextField' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'Paper' is defined but never used.","'TableRow' is defined but never used.","'GiPayMoney' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'Modal' is defined but never used.","'TiDelete' is defined but never used.","'GiVampireCape' is defined but never used.","React Hook React.useCallback has a missing dependency: 'inputProps'. Either include it or remove the dependency array.",["1764"],["1765"],["1766"],["1767"],"'GoodImage' is defined but never used.","'DateTimePicker' is defined but never used.","'Link' is defined but never used.","'GiCancel' is defined but never used.","'DatePicker' is defined but never used.","'listProductInfor' is assigned a value but never used.","'joinTypeInfor' is assigned a value but never used.","'listTypeInfor' is assigned a value but never used.","'StaticRouter' is defined but never used.","'fontWeight' is defined but never used.","'statusSelectReplace' is assigned a value but never used.","'countQuantity' is assigned a value but never used.","'handleOpen' is assigned a value but never used.","'classes' is assigned a value but never used.",["1768"],"'DesktopDatePicker' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'IoIosAdd' is defined but never used.",{"messageId":"1769","fix":"1770","desc":"1771"},{"messageId":"1772","fix":"1773","desc":"1774"},{"messageId":"1769","fix":"1775","desc":"1771"},{"messageId":"1772","fix":"1776","desc":"1774"},{"messageId":"1769","fix":"1777","desc":"1771"},{"messageId":"1772","fix":"1778","desc":"1774"},{"messageId":"1769","fix":"1779","desc":"1771"},{"messageId":"1772","fix":"1780","desc":"1774"},{"messageId":"1769","fix":"1781","desc":"1771"},{"messageId":"1772","fix":"1782","desc":"1774"},{"messageId":"1769","fix":"1783","desc":"1771"},{"messageId":"1772","fix":"1784","desc":"1774"},{"desc":"1785","fix":"1786"},{"desc":"1787","fix":"1788"},{"desc":"1789","fix":"1790"},{"desc":"1791","fix":"1792"},{"desc":"1793","fix":"1794"},{"desc":"1785","fix":"1795"},{"desc":"1789","fix":"1796"},{"desc":"1797","fix":"1798"},{"desc":"1785","fix":"1799"},{"desc":"1800","fix":"1801"},{"desc":"1802","fix":"1803"},{"desc":"1785","fix":"1804"},{"desc":"1785","fix":"1805"},{"desc":"1785","fix":"1806"},{"desc":"1807","fix":"1808"},{"desc":"1807","fix":"1809"},{"desc":"1807","fix":"1810"},{"desc":"1811","fix":"1812"},{"desc":"1785","fix":"1813"},"removeEscape",{"range":"1814","text":"1815"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1816","text":"1817"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1818","text":"1815"},{"range":"1819","text":"1817"},{"range":"1820","text":"1815"},{"range":"1821","text":"1817"},{"range":"1822","text":"1815"},{"range":"1823","text":"1817"},{"range":"1824","text":"1815"},{"range":"1825","text":"1817"},{"range":"1826","text":"1815"},{"range":"1827","text":"1817"},"Update the dependencies array to be: [dispatch]",{"range":"1828","text":"1829"},"Update the dependencies array to be: [listProduct, listReciept, nowTime, typeHeaderDashboard]",{"range":"1830","text":"1831"},"Update the dependencies array to be: [listReciept, nowTime, typeHeaderDashboard]",{"range":"1832","text":"1833"},"Update the dependencies array to be: [listTimeKeeping, nowTime, typeHeaderDashboard]",{"range":"1834","text":"1835"},"Update the dependencies array to be: [typeCheck, value1, value, listReceipt]",{"range":"1836","text":"1837"},{"range":"1838","text":"1829"},{"range":"1839","text":"1833"},"Update the dependencies array to be: [listReciept, value]",{"range":"1840","text":"1841"},{"range":"1842","text":"1829"},"Update the dependencies array to be: [typeTimeDashboard, growth, typeMonth, typeYear, regulation, nowTime, DateInYear, GrowthPercent, DateInWeek, totalMoneyInWeek, totalMoneyInMonth, DateInMonth]",{"range":"1843","text":"1844"},"Update the dependencies array to be: [typeReciept, typeByDate, listReciept, statusSelectAll, search, dispatch, listMAHD]",{"range":"1845","text":"1846"},{"range":"1847","text":"1829"},{"range":"1848","text":"1829"},{"range":"1849","text":"1829"},"Update the dependencies array to be: [inputProps]",{"range":"1850","text":"1851"},{"range":"1852","text":"1851"},{"range":"1853","text":"1851"},"Update the dependencies array to be: [cancelOnEscape, inputProps, handleRequestSearch, handleCancel]",{"range":"1854","text":"1855"},{"range":"1856","text":"1829"},[3498,3499],"",[3498,3498],"\\",[3514,3515],[3514,3514],[3037,3038],[3037,3037],[3053,3054],[3053,3053],[6012,6013],[6012,6012],[6028,6029],[6028,6028],[311,313],"[dispatch]",[7385,7406],"[listProduct, listReciept, nowTime, typeHeaderDashboard]",[2717,2738],"[listReciept, nowTime, typeHeaderDashboard]",[4943,4964],"[listTimeKeeping, nowTime, typeHeaderDashboard]",[3450,3476],"[typeCheck, value1, value, listReceipt]",[1506,1508],[3074,3095],[2758,2765],"[listReciept, value]",[5640,5642],[18887,18946],"[typeTimeDashboard, growth, typeMonth, typeYear, regulation, nowTime, DateInYear, GrowthPercent, DateInWeek, totalMoneyInWeek, totalMoneyInMonth, DateInMonth]",[27986,28049],"[typeReciept, typeByDate, listReciept, statusSelectAll, search, dispatch, listMAHD]",[2161,2163],[1481,1483],[1418,1420],[1989,2009],"[inputProps]",[2200,2219],[2427,2448],[3164,3235],"[cancelOnEscape, inputProps, handleRequestSearch, handleCancel]",[5640,5642]]