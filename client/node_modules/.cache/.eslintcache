[{"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/index.js":"1","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/App.js":"2","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Store.js":"3","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/LoginStatusReducer.js":"4","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DirectionURL.js":"5","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Body.js":"6","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Login.js":"7","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Register.js":"8","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/ForgotPassword.js":"9","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DashboardURL.js":"10","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Partials/SideNavBar.js":"11","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/DashBoard.js":"12","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeeManager.js":"13","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/ReiceiptManager.js":"14","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodManager.js":"15","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile.js":"16"},{"size":295,"mtime":1633355355609,"results":"17","hashOfConfig":"18"},{"size":941,"mtime":1633355355602,"results":"19","hashOfConfig":"18"},{"size":239,"mtime":1633355355606,"results":"20","hashOfConfig":"18"},{"size":284,"mtime":1633355355606,"results":"21","hashOfConfig":"18"},{"size":1256,"mtime":1633355355607,"results":"22","hashOfConfig":"18"},{"size":1274,"mtime":1633355355603,"results":"23","hashOfConfig":"18"},{"size":10316,"mtime":1633419856778,"results":"24","hashOfConfig":"18"},{"size":14771,"mtime":1633355355605,"results":"25","hashOfConfig":"18"},{"size":12505,"mtime":1633355355604,"results":"26","hashOfConfig":"18"},{"size":1009,"mtime":1633355355607,"results":"27","hashOfConfig":"18"},{"size":3822,"mtime":1633355355605,"results":"28","hashOfConfig":"18"},{"size":250,"mtime":1633355355603,"results":"29","hashOfConfig":"18"},{"size":237,"mtime":1633355355603,"results":"30","hashOfConfig":"18"},{"size":234,"mtime":1633355355606,"results":"31","hashOfConfig":"18"},{"size":225,"mtime":1633355355603,"results":"32","hashOfConfig":"18"},{"size":213,"mtime":1633355355605,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1evuik7",{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"36"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"36"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/index.js",[],["72","73"],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/App.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Store.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/LoginStatusReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DirectionURL.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Body.js",["74"],"import React, { Component } from 'react';\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport DashboardURL from '../Router/DashboardURL';\nimport {connect} from 'react-redux';\nimport SideNavBar from './Partials/SideNavBar';\n\nclass Body extends Component {\n    render() {\n        return (\n            <div style={{display: 'flex'}}>\n                {/*                 \n                <Link to=\"/home\">Home</Link>\n                <Link to=\"/dashboard\">DashBoard</Link>\n                <Link to=\"/test1\">test1</Link>\n                <Link to=\"/test2\">test2</Link> */}\n                <SideNavBar/>\n                <div style={{ width: '100%', display: 'flex', border: '1px solid #333',  \n                justifyContent: 'center', alignItems: 'center'}}>\n                    <DashboardURL></DashboardURL>\n                </div>\n                \n                \n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            })\n        }\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(Body);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Login.js",["75","76","77"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../CSS/Login.css'\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\nimport { FiChevronRight, FiXSquare } from \"react-icons/fi\";\nimport { BiUser } from \"react-icons/bi\";\nimport Avatar from '@mui/material/Avatar'\nimport { IconContext } from \"react-icons\";\nimport { GoogleLogin } from 'react-google-login';\nimport axios from 'axios';\nimport Alert from '@mui/material/Alert';\nimport bcrypt from 'bcryptjs';\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            appId: \"543752153590340\",\n            clientId: \"826925109796-mi95l41fi57bdlolpvnfdg5bpt9oc81h.apps.googleusercontent.com\",\n            email: \"\",\n            password: \"\",\n            statusFailed: false,\n            statusSucces: false,\n        }\n    }\n\n    // Hash password\n    hash = (pass) => {\n        // var bcrypt = require('bcryptjs');\n        var hash = bcrypt.hashSync(pass, 12)\n        // verified so sánh \n        var verified = bcrypt.compareSync(\"lngthinphc\", hash);\n        return hash;\n    }\n\n\n    // Login with google\n    onLoginSuccess = (res) => {\n        this.OutAlert();\n        axios.post(`http://localhost:3000/signin-withgoogle`, res.profileObj)\n            .then(res => {\n                console.log(\"thành công\");\n                this.setState({\n                    statusSucces: true,\n                })\n            })\n            .catch(err => {\n                this.setState({\n                    statusSucces: true,\n                })\n                console.log(\"lỗi\");\n            })\n    }\n\n    onFailureSuccess = (res) => {\n        this.setState({\n            statusFailed: true,\n            statusSucces: false,\n        })\n    }\n\n    // Out Alert\n    OutAlert = () => {\n        this.setState({\n            statusFailed: false,\n            statusSucces: false,\n        })\n    }\n\n    // Check để thay đổi trạng thái đã login hay chưa\n    isLoginCheck = (e) => {\n        this.OutAlert();\n        if (this.blurEmail() && this.blurPassword()) {\n            axios.post(`http://localhost:3000/signin-withgmail-password`, {\n                email: this.state.email,\n                password: this.state.password,\n            })\n            .then(res => {\n                console.log(\"thành công\");\n                this.setState({\n                    statusSucces: true,\n                })\n                return res;\n            })\n            .catch(err => {\n                this.setState({\n                    statusSucces: true,\n                })\n                const form = document.getElementById('login-form');\n                form.reset();\n                console.log(\"lỗi\");\n            })\n        }\n    }\n\n\n    // Handle user : blur , change in input\n    blurEmail = () => {\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        const event = document.querySelector('#email');\n        const elementValue = event.value;\n        const formGroup = event.parentElement.parentElement;\n        // Gán giá trị mail\n        this.setState({\n            email: elementValue,\n        })\n        // check validate\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        this.setState({\n            password: this.hash(elementValue),\n        })\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n\n    render() {\n        const enterPress = this.isLoginCheck;\n        document.onkeydown = function(e){\n            switch (e.which) {\n                case 13:\n                    enterPress(e);\n                    break;\n                default:\n                    break;\n            }\n        }\n  \n        return (\n            <div className=\"Login\">\n                <div className=\"form-login\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <BiUser></BiUser>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Login</div>\n                                <NavLink to=\"/register\" className=\"auth-form__switch-btn\">Register <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight></NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"auth-form__support\">\n                                    <span className=\"auth-form__support-forget\">\n                                        <NavLink onclick=\"\" to=\"/forgot\" className=\"auth-form__switch-btn\">Forgot password</NavLink>\n                                    </span>\n                                    <span className=\"auth-form__help-separate\" />\n                                    <span className=\"auth-form__support-need-support\">Need help?</span>\n                                </div>\n                                <div className=\"auth-form__support\">\n                                    <GoogleLogin\n                                        className=\"auth-form__support-google\"\n                                        clientId={this.state.clientId}\n                                        buttonText=\"Login with Google\"\n                                        onSuccess={this.onLoginSuccess}\n                                        onFailure={this.onFailureSuccess}\n                                        cookiePolicy={'single_host_origin'}\n                                    />\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div to=\"/home\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n                {this.state.statusSucces ? <Alert onClick={() => this.OutAlert()} className=\"message-error\" severity=\"success\">This is a success alert — check it out! <FiXSquare></FiXSquare></Alert> : null}\n                {this.state.statusFailed ? <Alert onClick={() => this.OutAlert()} className=\"message-error\" severity=\"error\">Login failed — check it out! <FiXSquare></FiXSquare></Alert> : null }\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Register.js",["78","79","80"],"import React, { Component } from 'react';\nimport '../../CSS/Login.css'\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport Avatar from '@mui/material/Avatar'\nimport { IconContext } from \"react-icons\";\nimport { FiChevronLeft, FiUserPlus, FiXSquare } from \"react-icons/fi\";\nimport { BsFillEnvelopeFill, BsLockFill, BsCodeSlash } from \"react-icons/bs\";\nimport { FaPhoneSquare } from \"react-icons/fa\";\nimport axios from 'axios';\nimport Alert from '@mui/material/Alert';\nimport emailjs from 'emailjs-com';\nvar bcrypt = require('bcryptjs');\n\n\nclass Register extends Component {\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            email: \"\",\n            password: \"\",\n            tel: \"\",\n            code: \"\",\n            statusSendCode: true,\n            statusFailed: false,\n            statusSuccess: false,\n        }\n    }\n\n    // Send code tới người dùng\n    sendCode = (a = this.makeCode(6)) => {\n        this.setState({\n            code: a,\n        })\n        emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\n        emailjs.send(\"gmail_main\", \"template_plasdgf\", {\n            To_mail: `${this.state.email}`,\n            code: `${a}`,\n        })\n            .then((response) => {\n                console.log('SUCCESS!', response.status, response.text);\n            }, (err) => {\n                console.log('FAILED...', err);\n            });\n    }\n\n    // status SignUp \n    SignUp = (e) => {\n        this.OutAlert();\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword() && this.blurTel()) {\n            const form = document.getElementById('register-form');\n            axios.post(`http://localhost:3000/register-with-email`, {\n                email: this.state.email,\n                password: this.state.password,\n                tel: this.state.tel,\n            })\n                .then(res => {\n                    console.log(\"thành công\");\n                })\n                .catch(err => {\n                    form.reset();\n                    this.setState({\n                        statusSuccess: true,\n                    })\n                    console.log(\"Thất bại\");\n                })\n\n        }\n    }\n\n    // Out Alert\n    OutAlert = () => {\n        this.setState({\n            statusFailed: false,\n            statusSuccess: false,\n        })\n    }\n\n    // Tạo mã code cho người dùng xác nhận\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    // Hashpassword\n    hash = (pass) => {\n        var hash = bcrypt.hashSync(pass, 12)\n        return hash;\n    }\n\n    // Hashpass -> pass : trả về true, false\n    hashReturn = (rePass) => {\n        var verified = bcrypt.compareSync(rePass, this.state.password);\n        return verified;\n    }\n\n    // Handle user : blur, change in input\n    blurEmail = () => {\n        const regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        const e = document.getElementById('email');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        this.setState({\n            email: elementValue,\n        })\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            this.setState({\n                statusSendCode: false,\n            })\n            return true;\n        }\n    }\n\n    blurCode = () => {\n        const e = document.getElementById('code');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (this.state.code === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\n            return false\n        } else if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\n            return false\n        } else if (elementValue !== this.state.code) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\n            return false\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        this.setState({\n            password: this.hash(elementValue),\n        })\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurRePassword = () => {\n        const e = document.getElementById('re-password')\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (!this.hashReturn(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true\n        }\n    }\n\n    blurTel = () => {\n        const e = document.getElementById('tel');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        const regex = /^\\d+$/;\n        this.setState({\n            tel: elementValue,\n        })\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Phone is not in the correct format\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    changeInput = (e) => {\n        const elementValue = e.target.value;\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    render() {\n        const enterPress = this.SignUp;\n        document.onkeydown = function (e) {\n            switch (e.which) {\n                case 13:\n                    enterPress(e);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return (\n            <div className=\"Login\">\n                <div className=\"form-register\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <FiUserPlus></FiUserPlus>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Register</div>\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Login</NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/register-submit\" method=\"post\" id=\"register-form\">\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND</button>\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"re-password\" id=\"re-password\" placeholder=\"Emter re-password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <FaPhoneSquare className=\"input-custom-icon\" ></FaPhoneSquare>\n                                        </span>\n                                        <input className=\"form-control\" onBlur={(e) => this.blurTel(e)} onChange={(e) => this.changeInput(e)} name=\"tel\" rules=\"required\" id=\"tel\" placeholder=\"Ex: 0303030303\" type=\"tel\" />\n\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"register-description\">Bằng cách ấn vào nút\n                                    <span className=\"register-description__keyword\">“ĐĂNG KÝ”</span>\n                                    , tôi đồng ý với\n                                    <span className=\"register-description__keyword\">Điều Khoản Sử Dụng</span> và\n                                    <div className=\"register-description__keyword\"> Chính Sách Bảo Mật</div>\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div onClick={(e) => this.SignUp(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign Up</div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div >\n                {this.state.statusSuccess ? <Alert onClick={() => this.OutAlert()} className=\"message-error\" severity=\"success\">This is a success alert — check it out! <FiXSquare></FiXSquare></Alert> : null}\n                {this.state.statusFailed ? <Alert onClick={() => this.OutAlert()} className=\"message-error\" severity=\"error\">Login failed — check it out! <FiXSquare></FiXSquare></Alert> : null}\n            </div >\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/ForgotPassword.js",["81","82"],"import React, { Component } from 'react';\nimport Avatar from '@mui/material/Avatar'\nimport { IconContext } from \"react-icons\";\nimport { FiSend, FiXSquare } from \"react-icons/fi\";\nimport { BsFillEnvelopeFill, BsLockFill, BsBoxArrowInLeft, BsCodeSlash } from \"react-icons/bs\";\nimport emailjs from 'emailjs-com';\nimport Alert from '@mui/material/Alert';\nimport axios from 'axios';\nimport {\n    NavLink\n} from \"react-router-dom\";\nvar bcrypt = require('bcryptjs');\n\n\nclass ForgotPassword extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            email: \"\",\n            password: \"\",\n            code: \"\",\n            statusSendCode: true,\n            statusFailed: false,\n            statusSuccess: false,\n        }\n    }\n\n    // Send code tới người dùng\n    sendCode = (a = this.makeCode(6)) => {\n        this.setState({\n            code: a,\n        })\n        emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\n        emailjs.send(\"gmail_main\", \"template_plasdgf\", {\n            To_mail: `${this.state.email}`,\n            code: `${a}`,\n        })\n            .then((response) => {\n                console.log('SUCCESS!', response.status, response.text);\n            }, (err) => {\n                console.log('FAILED...', err);\n            });\n    }\n\n    // Tạo code để xác nhận\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    // Hashpassword\n    hash = (pass) => {\n        var hash = bcrypt.hashSync(pass, 12)\n        return hash;\n    }\n\n    // Hashpass -> pass : trả về true, false\n    hashReturn = (rePass) => {\n        var verified = bcrypt.compareSync(rePass, this.state.password);\n        return verified;\n    }\n    // Out Alert\n    OutAlert = () => {\n        this.setState({\n            statusFailed: false,\n            statusSuccess: false,\n        })\n    }\n\n\n    //Check tìm lại mật khẩu\n    findPassword = (e) => {\n        this.OutAlert();\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword()) {\n            const form = document.getElementById('findpass-form');\n            axios.post(`http://localhost:3000/findpasword`, {\n                email: this.state.email,\n                password: this.state.password,\n            })\n                .then(res => {\n                    console.log(\"thành công\");\n                })\n                .catch(err => {\n                    this.setState({\n                        statusSuccess: true,\n                    })\n                    form.reset();\n                    console.log(\"thất bại\");\n                })\n        }\n    }\n\n\n    // Handle user blue change in input\n    blurEmail = () => {\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        const event = document.querySelector('#email');\n        const elementValue = event.value;\n        const formGroup = event.parentElement.parentElement;\n        this.setState({\n            email: elementValue,\n        })\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            this.setState({\n                statusSendCode: false,\n            })\n            return true;\n        }\n    }\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        this.setState({\n            password: this.hash(elementValue),\n        })\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurCode = () => {\n        const e = document.getElementById('code');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (this.state.code === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\n            return false\n        } else if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\n            return false\n        } else if (elementValue !== this.state.code) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\n            return false\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurRePassword = () => {\n        const e = document.getElementById('re-password')\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (!this.hashReturn(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    render() {\n        const enterPress = this.findPassword;\n        document.onkeydown = function (e) {\n            switch (e.which) {\n                case 13:\n                    enterPress(e);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return (\n            <div className=\"Login\">\n                <div className=\"form-findpass\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <FiSend></FiSend>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Find password</div>\n                                <NavLink onclick=\"\" to=\"/login\" className=\"auth-form__switch-btn\"><BsBoxArrowInLeft className=\"arrow-return\"></BsBoxArrowInLeft></NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/findpass-submit?_method=PUT\" method=\"POST\" id=\"findpass-form\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"Ex: abc@gmail.com\" type=\"text\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"code\" className=\"form-label\">Code</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND</button>\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">New password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">Re-password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"password\" rules=\"required|min:6\" id=\"re-password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div onClick={(e) => this.findPassword(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Find Password</div>\n                                </div>\n\n                            </form>\n                        </div>\n                    </div>\n                </div>\n                {this.state.statusSuccess ? <Alert onClick={() => this.OutAlert()} className=\"message-error\" severity=\"success\">This is a success alert — check it out! <FiXSquare></FiXSquare></Alert> : null}\n                {this.state.statusFailed ? <Alert onClick={() => this.OutAlert()} className=\"message-error\" severity=\"error\">Login failed — check it out! <FiXSquare></FiXSquare></Alert> : null}\n            </div>\n        );\n    }\n}\n\nexport default ForgotPassword;\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DashboardURL.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Partials/SideNavBar.js",["83","84","85","86"],"import React, { Component } from 'react';\n\nimport {connect} from 'react-redux';\nimport { \n    AiOutlineDashboard,\n    AiFillDashboard,\n    AiOutlineContainer,\n    AiFillContainer\n} from \"react-icons/ai\";\nimport { ImProfile } from \"react-icons/im\";\nimport { BsFillPeopleFill,BsInfoCircleFill} from \"react-icons/bs\";\nimport { \n    IoPeopleOutline,\n    IoPeopleSharp,\n    IoReceiptOutline,\n    IoReceiptSharp\n} from \"react-icons/io5\";\nimport { RiProfileFill, RiProfileLine } from \"react-icons/ri\";\nimport { FaSignOutAlt } from \"react-icons/fa\";\n\nimport Kurisu from '../../img/kurisu.jpg';\nimport { NavLink } from 'react-router-dom';\n\nimport '../../CSS/DashBoard.css'\n\n\nclass SideNavBar extends Component {\n    render() {\n        return (\n            <div>\n                <div class=\"navibar sidebar\">\n                    <div class=\"nav-heading\">\n                        <img src={Kurisu} style ={{width: 50, height: 50, borderRadius: '100%'}}></img>\n                        <span class=\"user-name\" style ={{marginLeft: 10, color: '#fff'}}>Makise Kurisu</span>\n                    </div>\n                    <div class=\"nav-container\">\n                        <NavLink className=\"nav-item\" to=\"/dashboard\">\n                            <AiOutlineDashboard class=\"nav-item-icon\"/>\n                            <AiFillDashboard class=\"nav-item-icon icon-activate\"/>   \n                            <span>Dashboard</span>\n                        </NavLink>\n                        <NavLink to='/profile' className=\"nav-item\" href='#'>\n                            <RiProfileLine class=\"nav-item-icon\"/>\n                            <RiProfileFill class=\"nav-item-icon icon-activate\"/>\n                            <span>Profile</span>\n                        </NavLink>\n                        <NavLink to='/employeemanager' className=\"nav-item\" href='#'>\n                            <IoPeopleOutline class=\"nav-item-icon\"/>\n                            <IoPeopleSharp class=\"nav-item-icon icon-activate\"/>\n                            <span>Employee Manager</span>\n                        </NavLink>\n                        <NavLink to=\"/goodmanager\" className=\"nav-item\" href='#'>\n                            <AiOutlineContainer className=\"nav-item-icon\"/>\n                            <AiFillContainer className=\"nav-item-icon icon-activate\"/>\n                            <span>Goods Manager</span>\n                        </NavLink>\n                        <NavLink to=\"/receiptmanager\" className=\"nav-item\" href='#'>\n                            <IoReceiptOutline class=\"nav-item-icon\"/>\n                            <IoReceiptSharp class=\"nav-item-icon icon-activate\"/>\n                            <span>Receipt Manager</span>\n                        </NavLink>\n                    </div>\n                    \n                    <div class=\"nav-footer\">\n                        <NavLink to=\"/login\" onClick={() => this.props.changeLoginStatus()} className=\"nav-item\" style={{flex: 5}}>\n                            <FaSignOutAlt class=\"nav-item-icon\"/>\n                            <span>Sign out</span>\n                        </NavLink>\n                        <a href=\"#\" className=\"nav-item\" style={{flex: 4}}>\n                            <BsInfoCircleFill class=\"nav-item-icon\"/>\n                            <span>About</span>\n                        </a>\n                    </div>\n                </div>\n            </div>\n        );\n    }   \n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SideNavBar);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/DashBoard.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeeManager.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/ReiceiptManager.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodManager.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile.js",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":3,"column":5,"nodeType":"93","messageId":"94","endLine":3,"endColumn":12},{"ruleId":"91","severity":1,"message":"95","line":36,"column":13,"nodeType":"93","messageId":"94","endLine":36,"endColumn":21},{"ruleId":"96","severity":1,"message":"97","line":103,"column":28,"nodeType":"98","messageId":"99","endLine":103,"endColumn":29,"suggestions":"100"},{"ruleId":"96","severity":1,"message":"97","line":103,"column":44,"nodeType":"98","messageId":"99","endLine":103,"endColumn":45,"suggestions":"101"},{"ruleId":"96","severity":1,"message":"97","line":108,"column":30,"nodeType":"98","messageId":"99","endLine":108,"endColumn":31,"suggestions":"102"},{"ruleId":"96","severity":1,"message":"97","line":108,"column":46,"nodeType":"98","messageId":"99","endLine":108,"endColumn":47,"suggestions":"103"},{"ruleId":"91","severity":1,"message":"104","line":227,"column":15,"nodeType":"93","messageId":"94","endLine":227,"endColumn":27},{"ruleId":"96","severity":1,"message":"97","line":102,"column":28,"nodeType":"98","messageId":"99","endLine":102,"endColumn":29,"suggestions":"105"},{"ruleId":"96","severity":1,"message":"97","line":102,"column":44,"nodeType":"98","messageId":"99","endLine":102,"endColumn":45,"suggestions":"106"},{"ruleId":"91","severity":1,"message":"107","line":10,"column":10,"nodeType":"93","messageId":"94","endLine":10,"endColumn":19},{"ruleId":"91","severity":1,"message":"108","line":11,"column":10,"nodeType":"93","messageId":"94","endLine":11,"endColumn":26},{"ruleId":"109","severity":1,"message":"110","line":33,"column":25,"nodeType":"111","endLine":33,"endColumn":98},{"ruleId":"112","severity":1,"message":"113","line":69,"column":25,"nodeType":"111","endLine":69,"endColumn":76},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'NavLink' is defined but never used.","Identifier","unusedVar","'verified' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["116","117"],["118","119"],["120","121"],["122","123"],"'elementValue' is assigned a value but never used.",["124","125"],["126","127"],"'ImProfile' is defined but never used.","'BsFillPeopleFill' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"messageId":"128","fix":"129","desc":"130"},{"messageId":"131","fix":"132","desc":"133"},{"messageId":"128","fix":"134","desc":"130"},{"messageId":"131","fix":"135","desc":"133"},{"messageId":"128","fix":"136","desc":"130"},{"messageId":"131","fix":"137","desc":"133"},{"messageId":"128","fix":"138","desc":"130"},{"messageId":"131","fix":"139","desc":"133"},{"messageId":"128","fix":"140","desc":"130"},{"messageId":"131","fix":"141","desc":"133"},{"messageId":"128","fix":"142","desc":"130"},{"messageId":"131","fix":"143","desc":"133"},"removeEscape",{"range":"144","text":"145"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"146","text":"147"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"148","text":"145"},{"range":"149","text":"147"},{"range":"150","text":"145"},{"range":"151","text":"147"},{"range":"152","text":"145"},{"range":"153","text":"147"},{"range":"154","text":"145"},{"range":"155","text":"147"},{"range":"156","text":"145"},{"range":"157","text":"147"},[2959,2960],"",[2959,2959],"\\",[2975,2976],[2975,2975],[3196,3197],[3196,3196],[3212,3213],[3212,3212],[2993,2994],[2993,2993],[3009,3010],[3009,3009]]