[{"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\index.js":"1","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\App.js":"2","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Store.js":"3","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DirectionURL.js":"4","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\DistrictReducer.js":"5","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ProvinceReducer.js":"6","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\LoginStatusReducer.js":"7","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeStatusReducer.js":"8","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListShiftReducer.js":"9","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUserReducer.js":"10","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ConfirmModalReducer.js":"11","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ObjectEditShiftReducer.js":"12","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\typeProductReducer.js":"13","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListProductReducer.js":"14","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RoleReducer.js":"15","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeProductValueReducer.js":"16","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\chooseTypeProduct.js":"17","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddShiftReducer.js":"18","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDarkModeReducer.js":"19","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditShiftReducer.js":"20","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusConfirmReducer.js":"21","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDeleteConfirmReducer.js":"22","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateGoodReducer.js":"23","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddTypeReducer.js":"24","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditTypeReducer.js":"25","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusYesConfirmReducer.js":"26","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusIsAddTypeReducer.js":"27","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddEmployeeReducer.js":"28","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusModalConfirmPassword.js":"29","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateEmployeeReducer.js":"30","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusPayMoneyStatus.js":"31","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Body.js":"32","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Register.js":"33","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Login.js":"34","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\LoginWithEmployee.js":"35","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\ForgotPassword.js":"36","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DashboardURL.js":"37","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\ModalConfirmPassword.js":"38","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Partials\\SideNavBar.js":"39","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\ReiceiptManager.js":"40","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeeManager.js":"41","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodManager.js":"42","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\DashBoard.js":"43","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\SellProduct.js":"44","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Profile.js":"45","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodImport.js":"46","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\EditTypeModal.js":"47","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\PayMoneyModal.js":"48","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\ConfirmModal.js":"49","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\AddTypeModal.js":"50","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ModalAdd.js":"51","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ListShift.js":"52","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Regulation.js":"53","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileSetting.js":"54","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ChangePassword.js":"55","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileDetail.js":"56","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileHeader.js":"57","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Tabs.js":"58","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\DarkMode.js":"59","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ComponentToPrint.js":"60","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButton.js":"61","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\Statistic.js":"62","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\Calendar.js":"63","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\UpdateGoodModal.js":"64","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\SearchBar.js":"65","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodTable.js":"66","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\fakeData.js":"67","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateEmployeeModal.js":"68","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddEmployeeModal.js":"69","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeTableHeader.js":"70","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeMoreMenu.js":"71","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeToolbar.js":"72","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Scrollbar.js":"73","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\SearchNotFound.js":"74","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Label.js":"75","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Page.js":"76","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\BaseOptionChart.js":"77","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\AlertReducer.js":"78"},{"size":309,"mtime":1634653035214,"results":"79","hashOfConfig":"80"},{"size":2684,"mtime":1635352049476,"results":"81","hashOfConfig":"80"},{"size":3099,"mtime":1635348483543,"results":"82","hashOfConfig":"80"},{"size":2219,"mtime":1634653035202,"results":"83","hashOfConfig":"80"},{"size":376,"mtime":1634661219450,"results":"84","hashOfConfig":"80"},{"size":384,"mtime":1634653035196,"results":"85","hashOfConfig":"80"},{"size":295,"mtime":1634653035195,"results":"86","hashOfConfig":"80"},{"size":343,"mtime":1634653035200,"results":"87","hashOfConfig":"80"},{"size":1665,"mtime":1635263716280,"results":"88","hashOfConfig":"80"},{"size":2176,"mtime":1635316557324,"results":"89","hashOfConfig":"80"},{"size":482,"mtime":1634653035193,"results":"90","hashOfConfig":"80"},{"size":340,"mtime":1634653035196,"results":"91","hashOfConfig":"80"},{"size":383,"mtime":1634653127803,"results":"92","hashOfConfig":"80"},{"size":1562,"mtime":1634653035195,"results":"93","hashOfConfig":"80"},{"size":316,"mtime":1634653035196,"results":"94","hashOfConfig":"80"},{"size":668,"mtime":1635260224145,"results":"95","hashOfConfig":"80"},{"size":358,"mtime":1634653035201,"results":"96","hashOfConfig":"80"},{"size":303,"mtime":1634653035196,"results":"97","hashOfConfig":"80"},{"size":302,"mtime":1634653035197,"results":"98","hashOfConfig":"80"},{"size":312,"mtime":1634653035198,"results":"99","hashOfConfig":"80"},{"size":303,"mtime":1634653035197,"results":"100","hashOfConfig":"80"},{"size":390,"mtime":1634653035198,"results":"101","hashOfConfig":"80"},{"size":319,"mtime":1634653035200,"results":"102","hashOfConfig":"80"},{"size":304,"mtime":1634653035197,"results":"103","hashOfConfig":"80"},{"size":309,"mtime":1634653035198,"results":"104","hashOfConfig":"80"},{"size":350,"mtime":1634653035200,"results":"105","hashOfConfig":"80"},{"size":372,"mtime":1634653035198,"results":"106","hashOfConfig":"80"},{"size":324,"mtime":1634653035196,"results":"107","hashOfConfig":"80"},{"size":370,"mtime":1634653035199,"results":"108","hashOfConfig":"80"},{"size":339,"mtime":1634653035199,"results":"109","hashOfConfig":"80"},{"size":324,"mtime":1634653035199,"results":"110","hashOfConfig":"80"},{"size":1782,"mtime":1635354471725,"results":"111","hashOfConfig":"80"},{"size":15628,"mtime":1635355266268,"results":"112","hashOfConfig":"80"},{"size":12493,"mtime":1635355233155,"results":"113","hashOfConfig":"80"},{"size":8716,"mtime":1635076012732,"results":"114","hashOfConfig":"80"},{"size":12948,"mtime":1635355253856,"results":"115","hashOfConfig":"80"},{"size":1348,"mtime":1635354702809,"results":"116","hashOfConfig":"80"},{"size":1956,"mtime":1634653035172,"results":"117","hashOfConfig":"80"},{"size":7008,"mtime":1635318930397,"results":"118","hashOfConfig":"80"},{"size":246,"mtime":1634653035177,"results":"119","hashOfConfig":"80"},{"size":15121,"mtime":1634653035157,"results":"120","hashOfConfig":"80"},{"size":7264,"mtime":1634653035162,"results":"121","hashOfConfig":"80"},{"size":5591,"mtime":1635354580147,"results":"122","hashOfConfig":"80"},{"size":6821,"mtime":1635354610896,"results":"123","hashOfConfig":"80"},{"size":2835,"mtime":1635354596571,"results":"124","hashOfConfig":"80"},{"size":25801,"mtime":1635260224142,"results":"125","hashOfConfig":"80"},{"size":6357,"mtime":1635260224141,"results":"126","hashOfConfig":"80"},{"size":13994,"mtime":1634693084642,"results":"127","hashOfConfig":"80"},{"size":3507,"mtime":1634653035163,"results":"128","hashOfConfig":"80"},{"size":8331,"mtime":1635260224139,"results":"129","hashOfConfig":"80"},{"size":13404,"mtime":1635355344432,"results":"130","hashOfConfig":"80"},{"size":7459,"mtime":1635355305833,"results":"131","hashOfConfig":"80"},{"size":7029,"mtime":1635248571075,"results":"132","hashOfConfig":"80"},{"size":892,"mtime":1634661943839,"results":"133","hashOfConfig":"80"},{"size":7811,"mtime":1635355289524,"results":"134","hashOfConfig":"80"},{"size":16193,"mtime":1635355409397,"results":"135","hashOfConfig":"80"},{"size":4541,"mtime":1635355632563,"results":"136","hashOfConfig":"80"},{"size":1294,"mtime":1635354095848,"results":"137","hashOfConfig":"80"},{"size":3134,"mtime":1634653035174,"results":"138","hashOfConfig":"80"},{"size":714,"mtime":1634653035178,"results":"139","hashOfConfig":"80"},{"size":2783,"mtime":1634653035157,"results":"140","hashOfConfig":"80"},{"size":1849,"mtime":1634653035157,"results":"141","hashOfConfig":"80"},{"size":1607,"mtime":1634653035155,"results":"142","hashOfConfig":"80"},{"size":25067,"mtime":1634653035166,"results":"143","hashOfConfig":"80"},{"size":5541,"mtime":1634653035165,"results":"144","hashOfConfig":"80"},{"size":14815,"mtime":1635260224143,"results":"145","hashOfConfig":"80"},{"size":953,"mtime":1634653035162,"results":"146","hashOfConfig":"80"},{"size":14258,"mtime":1634693020329,"results":"147","hashOfConfig":"80"},{"size":14072,"mtime":1634693071555,"results":"148","hashOfConfig":"80"},{"size":2024,"mtime":1634653035159,"results":"149","hashOfConfig":"80"},{"size":3377,"mtime":1634653035159,"results":"150","hashOfConfig":"80"},{"size":2489,"mtime":1634653035159,"results":"151","hashOfConfig":"80"},{"size":1541,"mtime":1634653035161,"results":"152","hashOfConfig":"80"},{"size":0,"mtime":1634653035161,"results":"153","hashOfConfig":"80"},{"size":2458,"mtime":1634653035160,"results":"154","hashOfConfig":"80"},{"size":482,"mtime":1634653035160,"results":"155","hashOfConfig":"80"},{"size":5649,"mtime":1634653035155,"results":"156","hashOfConfig":"80"},{"size":670,"mtime":1635349470393,"results":"157","hashOfConfig":"80"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},"1ieljoc",{"filePath":"161","messages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"167","messages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"169","messages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"160"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"160"},{"filePath":"237","messages":"238","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"160"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"160"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"160"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"160"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"259","usedDeprecatedRules":"160"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"160"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"160"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"160"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"295","usedDeprecatedRules":"160"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"160"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"160"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"160"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"160"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"160"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"315","usedDeprecatedRules":"160"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"160"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"160"},"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\index.js",[],["333","334"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\App.js",["335","336"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Store.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DirectionURL.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\DistrictReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ProvinceReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\LoginStatusReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeStatusReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUserReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ConfirmModalReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ObjectEditShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\typeProductReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListProductReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RoleReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeProductValueReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\chooseTypeProduct.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDarkModeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusConfirmReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDeleteConfirmReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateGoodReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddTypeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditTypeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusYesConfirmReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusIsAddTypeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddEmployeeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusModalConfirmPassword.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateEmployeeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusPayMoneyStatus.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Body.js",["337","338","339","340"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Register.js",["341","342","343"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Login.js",["344","345"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\LoginWithEmployee.js",["346"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../css/Login.css'\r\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\r\nimport {  FiXSquare,FiChevronLeft } from \"react-icons/fi\";\r\nimport {FaUserTie} from 'react-icons/fa'\r\nimport { Avatar } from '@mui/material'\r\nimport { IconContext } from \"react-icons\";\r\nimport axios from 'axios';\r\nimport Alert from '@mui/material/Alert';\r\n\r\nclass LoginWithEmployee extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            statusFailed: false,\r\n            statusSucces: false,\r\n        }\r\n    }\r\n\r\n    message = \"Login success\";\r\n\r\n    // Out Alert\r\n    OutAlert = () => {\r\n        this.setState({\r\n            statusFailed: false,\r\n            statusSucces: false,\r\n        })\r\n    }\r\n\r\n    // Check để thay đổi trạng thái đã login hay chưa\r\n    isLoginCheck = (e) => {\r\n        // this.OutAlert();\r\n        // if (this.blurEmail() && this.blurPassword()) {\r\n        //     axios.post(`http://localhost:5000/sign-in-employee`, {\r\n        //         username: document.querySelector('#username').value,\r\n        //         password: document.getElementById('password').value,\r\n        //     })\r\n        //         .then(res => {\r\n        //             switch (res.data.status) {\r\n        //                 case 1:\r\n        //                     this.message = res.data.message;\r\n        //                     this.setState({\r\n        //                         statusSucces: true,\r\n        //                     })\r\n        //                     localStorage.setItem('token', res.data.token);\r\n        //                     this.props.changeLoginStatus();\r\n        //                     break;\r\n        //                 case -1:\r\n        //                     this.message = res.data.message;\r\n        //                     this.setState({\r\n        //                         statusFailed: true,\r\n        //                     })\r\n        //                     break;\r\n        //                 default:\r\n        //                     break;\r\n        //             }\r\n        //         })\r\n        //         .catch(err => {\r\n        //             this.message = \"Enter again\";\r\n        //             this.setState({\r\n        //                 statusFailed: true,\r\n        //             })\r\n        //         })\r\n        // }\r\n        this.setState({\r\n            statusSucces: true,\r\n        })\r\n        this.props.setRole()\r\n    }\r\n\r\n\r\n    // Handle user : blur , change in input\r\n    blurEmail = () => {\r\n        const event = document.querySelector('#username');\r\n        let elementValue = event.value;\r\n        const formGroup = event.parentElement.parentElement;\r\n        // check validate\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        let elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Employee'\r\n    }\r\n\r\n    render() {\r\n        const enterPress = this.isLoginCheck;\r\n        document.onkeydown = function (e) {\r\n            switch (e.which) {\r\n                case 13:\r\n                    enterPress(e);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-login\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <FaUserTie></FaUserTie>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Employee</div>\r\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Login</NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">Username</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"username\"  id=\"username\" placeholder=\"VD: phuoc123\" type=\"text\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\"  id=\"password\" placeholder=\"Emter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div to=\"/sellproduct\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {this.state.statusSucces ? <Alert onClick={() => this.OutAlert()} className=\"message-error\" severity=\"success\">{this.message} — check it out! <FiXSquare></FiXSquare></Alert> : null}\r\n                {this.state.statusFailed ? <Alert onClick={() => this.OutAlert()} className=\"message-error\" severity=\"error\">{this.message} — check it out! <FiXSquare></FiXSquare></Alert> : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        setRole: () => {\r\n            dispatch({\r\n                type: \"EMPLOYEE_ROLE\",\r\n            });\r\n            localStorage.setItem('role', 'employee');\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps , mapDispatchToProps)(LoginWithEmployee);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\ForgotPassword.js",["347","348","349"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DashboardURL.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\ModalConfirmPassword.js",["350"],"import React from 'react';\r\nimport {Card,CardHeader,Divider,CardContent,Grid,TextField,Box,Button} from '@mui/material';\r\nimport {BiPlusMedical} from 'react-icons/bi'\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction ModalConfirmPassword(props) {\r\n\r\n    const statusConfirmPassword = useSelector(state => state.statusConfirmPassword)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleCancel = () => {\r\n        dispatch({\r\n            type:\"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Card className=\"card-confirm-password\" style={{ minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }}>\r\n            <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm password\" />\r\n            <Divider />\r\n            <CardContent>\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={12} xs={12}>\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            label=\"Your password\"\r\n                            required\r\n                            type=\"password\"\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n            <Divider />\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                <Button style={{ backgroundColor: 'yellowgreen' }} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                    Xác nhận\r\n                </Button>\r\n                <Button style={{ backgroundColor: 'red' }} onClick={() => handleCancel()} variant=\"contained\" startIcon={<GiCancel />}>\r\n                    Hủy\r\n                </Button>\r\n            </Box>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default ModalConfirmPassword;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Partials\\SideNavBar.js",["351","352","353","354"],"import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    AiOutlineDashboard,\r\n    AiFillDashboard,\r\n    AiOutlineContainer,\r\n    AiFillContainer\r\n} from \"react-icons/ai\";\r\nimport { BsInfoCircleFill} from \"react-icons/bs\";\r\nimport { \r\n    IoPeopleOutline,\r\n    IoPeopleSharp,\r\n    IoReceiptOutline,\r\n    IoReceiptSharp,\r\n} from \"react-icons/io5\";\r\nimport { IoIosArrowBack } from \"react-icons/io\";\r\nimport { RiProfileFill, RiProfileLine } from \"react-icons/ri\";\r\nimport { FaSignOutAlt } from \"react-icons/fa\";\r\nimport {GiSellCard} from 'react-icons/gi'\r\nimport Avatar from '../../img/avatar_default.jpg';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport '../../css/SideNavBar.css';\r\n\r\nclass SideNavBar extends Component {\r\n    \r\n    render() {\r\n\r\n        const navbarContainer = document.querySelector('.navbar-container');\r\n        console.log(navbarContainer);\r\n        // navbarContainer.setAttribute(\"style\",\"width:20px\");\r\n        return (\r\n            <div \r\n                class=\"navbar-container\"\r\n                style={{\r\n                    width: 0\r\n                }}\r\n            >\r\n                <div class=\"navibar sidebar\">\r\n                    <div className=\"nav-icon\" >\r\n                        <IoIosArrowBack\r\n                            size={20}\r\n                        />\r\n                    </div>\r\n                    <div class=\"nav-heading\">\r\n                        <div class=\"navbar-heading-container\">\r\n                            <img src={this.props.infoUser.avatar ? this.props.infoUser.avatar: Avatar} style ={{width: 40, height: 40, borderRadius: '100%'}}></img>\r\n                            <span class=\"user-name\">{this.props.infoUser.lastName +\" \" + this.props.infoUser.firstName}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"nav-container\">\r\n                        {   \r\n                            // this.props.role == true ?\r\n                            localStorage.getItem('role')=='admin' ?\r\n                            (<NavLink className=\"nav-item\" to=\"/dashboard\">\r\n                                <AiOutlineDashboard class=\"nav-item-icon\" />\r\n                                <AiFillDashboard class=\"nav-item-icon icon-activate\" />\r\n                                <span className=\"nav-item-lable\">Dashboard</span>\r\n                            </NavLink>):(null)\r\n                        }\r\n                        \r\n                        <NavLink to=\"/profile\" className=\"nav-item\" href=\"#\">\r\n                            <RiProfileLine class=\"nav-item-icon\" />\r\n                            <RiProfileFill class=\"nav-item-icon icon-activate\" />\r\n                            <span className=\"nav-item-lable\">Profile</span>\r\n                        </NavLink>\r\n\r\n                        {   \r\n                            // this.props.role == true ?\r\n                            localStorage.getItem('role')=='admin' ?\r\n                            (   \r\n                                <div>\r\n                                    <NavLink\r\n                                        to=\"/employeemanager\"\r\n                                        className=\"nav-item\"\r\n                                        href=\"#\"\r\n                                    >\r\n                                        <IoPeopleOutline class=\"nav-item-icon\" />\r\n                                        <IoPeopleSharp class=\"nav-item-icon icon-activate\" />\r\n                                        <span className=\"nav-item-lable\">Employee Manager</span>\r\n                                    </NavLink>\r\n                                    <NavLink\r\n                                        to=\"/goodmanager\"\r\n                                        className=\"nav-item\"\r\n                                        href=\"#\"\r\n                                    >\r\n                                        <AiOutlineContainer className=\"nav-item-icon\" />\r\n                                        <AiFillContainer className=\"nav-item-icon icon-activate\" />\r\n                                        <span className=\"nav-item-lable\">Goods Manager</span>\r\n                                    </NavLink>\r\n                                    <NavLink\r\n                                        to=\"/receiptmanager\"\r\n                                        className=\"nav-item\"\r\n                                        href=\"#\"\r\n                                    >\r\n                                        <IoReceiptOutline class=\"nav-item-icon\" />\r\n                                        <IoReceiptSharp class=\"nav-item-icon icon-activate\" />\r\n                                        <span className=\"nav-item-lable\">Receipt Manager</span>\r\n                                    </NavLink>\r\n                                </div>    \r\n                            ):(null)\r\n                        }   \r\n                        \r\n                        <NavLink to=\"/sellproduct\" className=\"nav-item\" href='#'>\r\n                            <GiSellCard class=\"nav-item-icon\"/>\r\n                            <GiSellCard class=\"nav-item-icon icon-activate\"/>\r\n                            <span className=\"nav-item-lable\">Sell Product</span>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                    <div class=\"nav-footer\">\r\n                        <NavLink\r\n                            to=\"/login\"\r\n                            onClick={() => this.props.changeLoginStatus()}\r\n                            className=\"nav-item\"\r\n                            style={{ flex: 5 }}\r\n                        >\r\n                            <FaSignOutAlt class=\"nav-item-icon\" />\r\n                            <span className=\"nav-item-lable\">Sign out</span>\r\n                        </NavLink>\r\n                        {/* <a href=\"#\" className=\"nav-item\" style={{ flex: 4 }}>\r\n                            <BsInfoCircleFill class=\"nav-item-icon\" /> */}\r\n                        <a href=\"#\" className=\"nav-item\" onClick={() => this.props.changeConfirmPasswordTest()} style={{flex: 4}}>\r\n                            <BsInfoCircleFill class=\"nav-item-icon\"/>\r\n                            <span className=\"nav-item-lable\">About</span>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n        infoUser: state.infoUser,\r\n        role: state.role,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            })\r\n        },\r\n        changeConfirmPasswordTest: () => {\r\n            dispatch({\r\n                type:\"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SideNavBar);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\ReiceiptManager.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeeManager.js",["355","356","357","358","359","360","361","362","363","364"],"import React, { Component } from 'react';\r\nimport Page from './EmployeePartials/Page';\r\nimport Label from './EmployeePartials/Label';\r\nimport Scrollbar from './EmployeePartials/Scrollbar';\r\nimport SearchNotFound from './EmployeePartials/SearchNotFound';\r\nimport { Icon } from '@iconify/react';\r\nimport { sentenceCase } from 'change-case';\r\nimport {connect} from 'react-redux'\r\nimport plusFill from '@iconify/icons-eva/plus-fill';\r\nimport {\r\n    Card,\r\n    Table,\r\n    Stack,\r\n    Avatar,\r\n    Button,\r\n    Checkbox,\r\n    TableRow,\r\n    TableBody,\r\n    TableCell,\r\n    Container,\r\n    Typography,\r\n    TableContainer,\r\n    TablePagination\r\n} from '@mui/material';\r\nimport EmployeeToolbar from './EmployeePartials/EmployeeToolbar';\r\nimport EmployeeMoreMenu from './EmployeePartials/EmployeeMoreMenu';\r\nimport EmployeeTableHeader from './EmployeePartials/EmployeeTableHeader';\r\nimport USERLIST from './EmployeePartials/fakeData'\r\nimport AddEmployeeModal from './EmployeePartials/AddEmployeeModal';\r\nimport UpdateEmployeeModal from './EmployeePartials/UpdateEmployeeModal';\r\nimport PayMoneyModal from './EmployeePartials/PayMoneyModal';\r\n\r\n\r\nconst TABLE_HEAD = [\r\n    { id: 'ID', label: 'ID', alignRight: false },\r\n    { id: 'firstName', label: 'Name', alignRight: false },\r\n    { id: 'lastName', label: 'Last Name', alignRight: false },\r\n    { id: 'old', label: 'Old', alignRight: false },\r\n    { id: 'gender', label: 'Gender', alignRight: false },\r\n    { id: 'province', label: 'Province', alignRight: false },\r\n    { id: 'phoneNumber', label: 'Phone', alignRight: false },\r\n    { id: 'email', label: 'Email', alignRight: false },\r\n    { id: 'adress', label: 'Adress', alignRight: false },\r\n    { id: '' }\r\n];\r\n\r\nvar selected = [];\r\nvar filterName = \"\";\r\nvar filteredUsers = USERLIST;\r\nvar page = 5;\r\nvar rowsPerPage = 5;\r\nclass EmployeeManager extends Component {\r\n    handleFilterByName(event){\r\n        filterName = event.target.value;\r\n    }\r\n    addEmployee () {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{height:'800px', overflowY: 'auto'}}\r\n            >\r\n                <Container\r\n                    style={{marginTop: 60}}\r\n                >\r\n                    <span\r\n                        style = {{\r\n                            color: \"#fff\",\r\n                            border: '1px solid cyan',\r\n                            padding: 12,\r\n                            backgroundColor: '#222'\r\n                        }}\r\n                    >\r\n                        Current Employee\r\n                    </span>\r\n                    <Button\r\n                        variant='contained'\r\n                        startIcon={<Icon icon={plusFill} />}\r\n                        onClick={() => this.addEmployee()}\r\n                    >\r\n                        New User\r\n                    </Button>\r\n\r\n                    <Card>\r\n                    {/* <EmployeeToolbar\r\n                        numSelected={selected.length}\r\n                        filterName={filterName}\r\n                        // onFilterName={this.handleFilterByName(event)}\r\n                    /> */}\r\n                    <TableContainer>\r\n                        <Table>\r\n                            <EmployeeTableHeader\r\n                                // order={order}\r\n                                // orderBy={orderBy}\r\n                                headLabel={TABLE_HEAD}\r\n                                rowCount={USERLIST.length}\r\n                                numSelected={selected.length}\r\n                                // onRequestSort={handleRequestSort}\r\n                                // onSelectAllClick={handleSelectAllClick}\r\n                            />\r\n                            <TableBody\r\n                                style={{height: '400px', width: '100%'}}\r\n                            >\r\n                            {\r\n                                filteredUsers\r\n                                .map((row) => {\r\n                                    \r\n                                const { id, firstName, lastName, gender, province,email, adress, old, phone, avatarUrl, isVerified } = row;\r\n                                const isItemSelected = selected.indexOf(firstName) !== -1;\r\n\r\n                                return (\r\n                                    <TableRow\r\n                                        hover\r\n                                        key={id}\r\n                                        tabIndex={-1}\r\n                                        role=\"checkbox\"\r\n                                        // selected={isItemSelected}\r\n                                        // aria-checked={isItemSelected}\r\n                                    >\r\n                                        <TableCell padding=\"checkbox\">\r\n                                            <Checkbox\r\n                                            checked={isItemSelected}\r\n                                            // onChange={(event) => handleClick(event, name)}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell align=\"left\">{id}</TableCell>\r\n                                        <TableCell component=\"th\" scope=\"row\" padding=\"none\">\r\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n                                            <Avatar alt={firstName} src={avatarUrl} />\r\n                                            <Typography variant=\"subtitle2\" noWrap>\r\n                                                {firstName}\r\n                                            </Typography>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"left\">{lastName}</TableCell>  \r\n                                        <TableCell align=\"left\">{old}</TableCell>\r\n                                        <TableCell align=\"left\">{gender}</TableCell>\r\n                                        <TableCell align=\"left\">{province}</TableCell>\r\n                                        <TableCell align=\"left\">{phone}</TableCell>\r\n                                        <TableCell align=\"left\">{email}</TableCell>\r\n                                        <TableCell align=\"left\">{adress}</TableCell>\r\n                                        <TableCell align=\"right\">\r\n                                            <EmployeeMoreMenu />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={USERLIST.length}\r\n                        // rowsPerPage={rowsPerPage}\r\n                        // page={page}\r\n                        // onPageChange={handleChangePage}\r\n                        // onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    />\r\n                    </Card>\r\n                </Container>\r\n                <Container\r\n                    style={{marginTop: 60}}\r\n                    style={{\r\n                        marginBottom: 220,\r\n                        marginTop: 40\r\n                    }}\r\n                >\r\n                    <span\r\n                        style = {{\r\n                            color: \"#fff\",\r\n                            border: '1px solid cyan',\r\n                            padding: 12,\r\n                            margin: 12,\r\n                            height: 40,\r\n                            backgroundColor: '#222'\r\n                        }}\r\n                    >\r\n                        Sacked Employee\r\n                    </span>\r\n                    <Card>\r\n                    {/* <EmployeeToolbar\r\n                        numSelected={selected.length}\r\n                        filterName={filterName}\r\n                        // onFilterName={this.handleFilterByName(event)}\r\n                    /> */}\r\n                    <TableContainer>\r\n                    <Table>\r\n                        <EmployeeTableHeader\r\n                            // order={order}\r\n                            // orderBy={orderBy}\r\n                            headLabel={TABLE_HEAD}\r\n                            // rowCount={USERLIST.length}\r\n                            // numSelected={selected.length}\r\n                            // onRequestSort={handleRequestSort}\r\n                            // onSelectAllClick={handleSelectAllClick}\r\n                        />\r\n                        <TableBody\r\n                            style={{height: '400px'}}\r\n                        >\r\n                        {\r\n                                filteredUsers\r\n                                .map((row) => {\r\n                                    \r\n                                const { id, firstName, lastName, gender, province,email, adress, old, phone, avatarUrl, isVerified } = row;\r\n                                const isItemSelected = selected.indexOf(firstName) !== -1;\r\n\r\n                                return (\r\n                                    <TableRow\r\n                                        hover\r\n                                        key={id}\r\n                                        tabIndex={-1}\r\n                                        role=\"checkbox\"\r\n                                        // selected={isItemSelected}\r\n                                        // aria-checked={isItemSelected}\r\n                                    >\r\n                                        <TableCell padding=\"checkbox\">\r\n                                            <Checkbox\r\n                                            checked={isItemSelected}\r\n                                            // onChange={(event) => handleClick(event, name)}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell align=\"left\">{id}</TableCell>\r\n                                        <TableCell component=\"th\" scope=\"row\" padding=\"none\">\r\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n                                            <Avatar alt={firstName} src={avatarUrl} />\r\n                                            <Typography variant=\"subtitle2\" noWrap>\r\n                                                {firstName}\r\n                                            </Typography>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"left\">{lastName}</TableCell>  \r\n                                        <TableCell align=\"left\">{old}</TableCell>\r\n                                        <TableCell align=\"left\">{gender}</TableCell>\r\n                                        <TableCell align=\"left\">{province}</TableCell>\r\n                                        <TableCell align=\"left\">{phone}</TableCell>\r\n                                        <TableCell align=\"left\">{email}</TableCell>\r\n                                        <TableCell align=\"left\">{adress}</TableCell>\r\n                                        <TableCell align=\"right\">\r\n                                            <EmployeeMoreMenu />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                                })}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={USERLIST.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        // onPageChange={handleChangePage}\r\n                        // onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        \r\n                    />\r\n                    </Card>\r\n                </Container>\r\n                {/* Đây là phần modal */}\r\n                {this.props.addEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeAddEmployeeStatus();}} className=\"modal-overlay\"></div>\r\n                        <AddEmployeeModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </AddEmployeeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.updateEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeUpdateEmployeeStatus();}} className=\"modal-overlay\"></div>\r\n                        <UpdateEmployeeModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </UpdateEmployeeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.payEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changePayEmployeeStatus();}} className=\"modal-overlay\"></div>\r\n                        <PayMoneyModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </PayMoneyModal>\r\n                    </div>\r\n                ): null}\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\r\n        payEmployeeStatus: state.payEmployeeStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changePayEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n            });\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps , mapDispatchToProps)(EmployeeManager);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodManager.js",["365","366","367"],"import { Component } from 'react';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport GoodTable from './GoodPartials/GoodTable';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Button from '@mui/material/Button';\r\nimport SearchBar from './GoodPartials/SearchBar';\r\nimport {connect} from 'react-redux'\r\nimport AddTypeModal from './GoodPartials/AddTypeModal';\r\nimport '../css/GoodManager.css';\r\nimport ConfirmModal from './GoodPartials/ConfirmModal';\r\nimport UpdateGoodModal from './GoodPartials/UpdateGoodModal';\r\nimport EditTypeModal from './GoodPartials/EditTypeModal';\r\n\r\nconst columns = [\r\n    { field: 'id', headerName: 'ID', width: 40 },\r\n    { field: 'firstName', headerName: 'First name', width: 200 },\r\n    { field: 'lastName', headerName: 'Last name', width: 200 },\r\n    {\r\n      field: 'age',\r\n      headerName: 'Age',\r\n      type: 'number',\r\n      width: 130,\r\n    },\r\n    {\r\n      field: 'fullName',\r\n      headerName: 'Full name',\r\n      description: 'This column has a value getter and is not sortable.',\r\n      sortable: false,\r\n      width: 160,\r\n      valueGetter: (params) =>\r\n        `${params.getValue(params.id, 'firstName') || ''} ${\r\n          params.getValue(params.id, 'lastName') || ''\r\n        }`,\r\n    },\r\n  ];\r\n\r\n  const rows = [\r\n    { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\r\n    { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\r\n    { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\r\n    { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\r\n    { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\r\n    { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\r\n    { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\r\n    { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\r\n    { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\r\n  ];\r\n\r\n\r\nclass GoodManager extends Component {\r\n    \r\n    handleAdd() {\r\n        this.props.changeAddTypeStatus();\r\n        this.props.setAddTypeStatus();\r\n    }\r\n    handleConfirm(){\r\n        this.props.changeConfirmStatus();\r\n        this.props.unsetDelete();\r\n    }\r\n    handleConfirmDelete(){\r\n        this.props.changeConfirmStatus();\r\n        this.props.setDeleteConfirm();\r\n    }\r\n    handleUpdateGood() {\r\n        this.props.changeUpdateGoodStatus();\r\n    }\r\n    handleEditType() {\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                Good Manager\r\n                <div style={{ height: 600, width: '100%', overflowX: 'scroll' }}>\r\n                    <div style={{display: 'flex'}}>\r\n                        <Button variant=\"contained\">\r\n                            <NavLink style={{color: '#fff', textDecoration: 'none'}} to=\"/goodmanager/import\">Import</NavLink>\r\n                        </Button>\r\n                        <SearchBar style={{height: '120px'}}/>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleAdd()} variant=\"contained\">\r\n                            add type\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleEditType()} variant=\"contained\">\r\n                            edit type\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleConfirmDelete()} variant=\"contained\">\r\n                            Delete\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleConfirm()} variant=\"contained\">\r\n                            Edit\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleUpdateGood()} variant=\"contained\">\r\n                            Update Good\r\n                        </Button>\r\n\r\n                     </div>\r\n\r\n                    <GoodTable />\r\n\r\n                    {/* Đây là phần modal */}\r\n                    {this.props.addTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <AddTypeModal></AddTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.confirmStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                            <ConfirmModal></ConfirmModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.updateGoodStatus ? (\r\n                        <div \r\n                            className=\"modal-add\"\r\n                        >\r\n                            <div onClick={() => {this.props.changeUpdateGoodStatus();}} className=\"modal-overlay\"></div>\r\n                            <UpdateGoodModal\r\n                                style={{\r\n                                    marginTop: 0\r\n                                }}\r\n                            >\r\n                            </UpdateGoodModal>\r\n                        </div>\r\n                    ): null}\r\n                     {this.props.editTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeEditTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <EditTypeModal></EditTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        deleteStatus: state.deleteStatus,\r\n        updateGoodStatus: state.updateGoodStatus,\r\n        editTypeStatus: state.editTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        unsetDelete: () => {\r\n            dispatch({\r\n                type: \"UNSET_DELETE_STATUS\",\r\n            })\r\n        },\r\n        changeUpdateGoodStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\r\n            })\r\n        },\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            })\r\n        },\r\n        setAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        setDeleteConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_DELETE_GOOD\",\r\n            }); \r\n        },\r\n        \r\n    }\r\n}\r\nexport default connect(mapStateToProps , mapDispatchToProps)(GoodManager);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\DashBoard.js",["368"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\SellProduct.js",["369","370"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Profile.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodImport.js",["371","372","373","374","375","376","377","378"],"import React, { Component } from 'react';\r\nimport { TextField } from '@mui/material';\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { InputLabel, Button, Modal, Grid, Card, CardHeader} from '@mui/material';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { connect } from 'react-redux';\r\nimport GoodImage from '../../img/good-example.jpg';\r\nimport AddTypeModal from './AddTypeModal';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport ConfirmModal from './ConfirmModal';\r\n\r\n// Use for save type\r\nvar productTypes =[];\r\nvar listTypeInfor = [];\r\n\r\nvar listProductInfor = [];\r\n\r\n// Use for choose type:\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass GoodImport extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n            currentDateTime: new Date('2014-08-18T21:11:54'),\r\n            change: false,\r\n        }; \r\n        this.loadAllType(); \r\n        this.loadAllGood();\r\n    }\r\n    handleAdd(){\r\n        this.props.changeAddTypeStatus();\r\n        this.props.setAddTypeStatus();\r\n    }\r\n    imgUrl= 'none';\r\n    dateTime= Date.now();\r\n\r\n    profileImageChange = (fileChangeEvent) => {\r\n        this.setState({\r\n            imageSelect: fileChangeEvent.target.files[0],\r\n        })\r\n        const file = fileChangeEvent.target.files[0];\r\n        const { type } = file;\r\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\r\n        } else {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", fileChangeEvent.target.files[0])\r\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\r\n            axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\r\n                .then(res => {\r\n                    this.imgUrl=res.data.url;\r\n                    this.setState({\r\n                        change: 'true'\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"Thất bại\");\r\n                })\r\n\r\n        }\r\n\r\n    }\r\n\r\n    async importGood() {\r\n        // Thêm hàng hoá\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            product: {\r\n                _id: {\r\n                    productID: this.generatedID,\r\n                    importDate: Date(this.dateTime),\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: document.querySelector('input[name=\"goodName\"]').value,\r\n                quantity: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                remain: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\r\n                sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\r\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\r\n                imgUrl: this.imgUrl,\r\n                unit: document.querySelector('input[name=\"unit\"]').value,\r\n            }\r\n        }\r\n        axios.post(`http://localhost:5000/api/product`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu được rồi anh chai\")\r\n                console.log(data._id.importDate)\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                console.log(err);\r\n            })\r\n\r\n        //Thêm vào bảng joinType nữa\r\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\r\n        for(var i = 0 ; i < typeSet.length ; i++)\r\n        {\r\n            const data1 = {\r\n                token: localStorage.getItem('token'),\r\n                productJoinType: {\r\n                    _id : {\r\n                        productID: this.generatedID,\r\n                        typeID: typeSet[i], \r\n                        importDate: Date.now(),\r\n                        storeID: this.props.infoUser.email,\r\n                    }\r\n                }\r\n            }\r\n            console.log(data1);\r\n            console.log(\"Đang thêm vô bảng join\")\r\n            axios.post(`http://localhost:5000/api/product/join`, data1)\r\n                .then(res => {\r\n                    console.log(\"lưu vô bảng join thành công\");\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                })\r\n        }\r\n        \r\n\r\n        // console.log(data);\r\n    }\r\n    checkConstraint = () => {\r\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\r\n        // Kiểm tra thử form ok ko\r\n        this.props.changeConfirmStatus();\r\n        this.props.setConfirm();\r\n    }\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                storeID: this.props.infoUser.email,\r\n            }   \r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        listTypeInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n        productTypes=[];\r\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\r\n        {\r\n            productTypes.push(listTypeInfor[i].name);\r\n        }\r\n        this.setState({change: true});\r\n    }\r\n\r\n    async loadAllGood() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                storeID: this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                alert(\"Lấy hết đc product ròi anh chai\");\r\n                result = res.data.data;\r\n                console.log(res.data.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Get data và lưu các tên Type vào dữ liệU\r\n        //Get data và lưu các tên Type vào bảng\r\n        listProductInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listProductInfor.push(result[i]);\r\n        }\r\n        this.generatedID = listProductInfor.length;\r\n        alert(this.generatedID);\r\n        this.setState({change: false});\r\n    }\r\n\r\n    generatedID = 0;\r\n\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName='';\r\n        for(var i = 0; i<listTypeInfor.length;i++)\r\n        {   \r\n            if(listTypeInfor[i]._id.typeID == typeID)\r\n            {\r\n                typeName = listTypeInfor[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    render() {\r\n        \r\n        return(\r\n            <div \r\n                style={{ \r\n                    height: 600, width: '100%', overflowY: 'scroll', backgroundColor: 'rgb(221,235,255)'   \r\n                }}\r\n            >   \r\n                <div className=\"good-import-header\"></div>\r\n                <Grid className=\"import-container\" container spacing={2}>\r\n                    <Grid item md={3}  \r\n                        style={{\r\n                            display: 'flex', \r\n                            justifyContent:'center', \r\n                            flexDirection:'column',\r\n                            alignItems:'center',\r\n                            paddingLeft: '30px'\r\n                        }}\r\n                    >   \r\n                        <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden', marginTop: '15px ' }}>\r\n                            <Image style={{width: '240px',height: '240px', padding: '10px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                        </label>\r\n                        {/* Ẩn đi */}\r\n                        <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                    </Grid>\r\n                    <Grid item md={9}>\r\n\r\n                        <Card \r\n                            style={{\r\n                                marginRight: '18px',\r\n                            }}\r\n                        >\r\n                            <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"ADD GOOD\" />\r\n                            <Grid container md={12}>\r\n                                <Grid item md={6} \r\n                                    className='input-item'\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\"\r\n                                        style={{\r\n                                            width: '116px'\r\n                                        }}\r\n                                    >\r\n                                        ID\r\n                                    </div>\r\n                                    <StyledTextField\r\n                                        classname='input-box' \r\n                                        type=\"text\" \r\n                                        // class=\"input-val\" \r\n                                        style = {{width: '100%'}} \r\n                                        fullWidth \r\n                                        size=\"small\" \r\n                                        name=\"goodID\" \r\n                                        variant=\"outlined\"\r\n                                        value={this.generatedID}\r\n                                        inputProps={\r\n                                            { readOnly: true, }\r\n                                        } \r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={6} \r\n                                    className='input-item'\r\n                                    style={{\r\n                                        marginLeft: 0,\r\n                                        paddingLeft: 0\r\n                                    }}\r\n                                >\r\n                                    <div className=\"input-label\" style={{width: 128}}>Import Date</div>\r\n                                    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                        <DateTimePicker\r\n                                            renderInput={(params) => <StyledTextField \r\n                                                                        {...params} \r\n                                                                        classname='input-box'\r\n                                                                        name=\"importDateTime\"\r\n                                                                        style = {{width: '70%', marginRight: 20}} \r\n                                                                        fullWidth \r\n                                                                    />}\r\n                                            value={this.dateTime}\r\n                                            onChange={(newValue) => {\r\n                                                this.changeTimeFrom(newValue);\r\n                                            }}\r\n                                        />\r\n                                    </LocalizationProvider>\r\n                                </Grid>\r\n                                \r\n                                <Grid item md={6} \r\n                                    className='input-item'\r\n                                >\r\n                                    <div className=\"input-label\"style={{width: '114px'}}>Name</div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'   \r\n                                        type=\"text\" \r\n                                        // class=\"input-val\" \r\n                                        style = {{width: '100%'}} \r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        name=\"goodName\" \r\n                                        variant=\"outlined\" \r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={3}\r\n                                    className='input-item'\r\n                                    style={{padding: '0px', marginLeft: '0px'}}\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\" \r\n                                        style={{width: '100px'}}\r\n                                    >\r\n                                        Quantity\r\n                                    </div>\r\n                                    <StyledTextField\r\n                                        style = {{width: '60%'}} \r\n                                        fullWidth\r\n                                        name=\"goodQuantity\" \r\n                                        variant=\"outlined\"\r\n                                        type=\"number\" \r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={3}\r\n                                    className='input-item'\r\n                                    style={{\r\n                                        paddingRight: 24\r\n                                    }}\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\"\r\n                                        style={{\r\n                                            marginLeft: 0,\r\n                                            paddingLeft: 4\r\n                                        }}\r\n                                    >\r\n                                        Unit\r\n                                    </div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'\r\n                                        style = {{width: '100%', marginLeft: '4px'}} \r\n                                        fullWidth\r\n                                        variant=\"outlined\"\r\n                                        type=\"text\" \r\n                                        name=\"unit\" \r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={6}\r\n                                    className='input-item'\r\n                                >\r\n                                    <div className=\"input-label\" style={{width: 128}}>Original Price</div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'\r\n                                        style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \r\n                                        fullWidth\r\n                                        name=\"originalPrice\" \r\n                                        variant=\"outlined\"\r\n                                        type=\"number\" \r\n                                    />\r\n                                    đ\r\n                                </Grid>\r\n                                <Grid item md={6}\r\n                                    className='input-item'\r\n                                    style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\"\r\n                                        style={{width: '96px'}}\r\n                                    >\r\n                                        Sell Price\r\n                                    </div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'\r\n                                        style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \r\n                                        fullWidth\r\n                                        name=\"sellPrice\" \r\n                                        variant=\"outlined\"\r\n                                        type=\"number\" \r\n                                    />\r\n                                    đ\r\n                                </Grid>\r\n                                <Grid item md={7} \r\n                                    className='input-item'\r\n                                >\r\n                                    <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'   \r\n                                        type=\"date\" \r\n                                        style = {{width: '70%'}} \r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        name=\"expiredDate\" \r\n                                        variant=\"outlined\" \r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={10}\r\n                                    className='input-item'\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\"\r\n                                        style={{width:132}}\r\n                                    >\r\n                                        Product Type\r\n                                    </div>\r\n                                    <FormControl sx={{ minWidth: 120 }}>\r\n                                        {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                        <Select\r\n                                            value={this.state.type}\r\n                                            onChange={(event) => {\r\n                                                this.setState({type: event.target.value});\r\n                                                if(!typeSet.includes(event.target.value))\r\n                                                {\r\n                                                    typeSet.push(event.target.value);\r\n                                                }\r\n                                            }}\r\n                                            style={{\r\n                                                height: 36,\r\n                                            }}\r\n                                        >\r\n                                            {\r\n                                                listTypeInfor.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                : listTypeInfor.map((type) =>\r\n                                                    <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\r\n                                                )\r\n                                            }   \r\n                                        </Select> \r\n                                    </FormControl>\r\n                                    <Button onClick={() => this.handleAdd()}>\r\n                                        <AiFillPlusCircle\r\n                                            size={28}\r\n                                            style={{\r\n                                                fontSize: 28,\r\n                                                margin: 0,\r\n                                                padding: 0,\r\n                                                width: 28,\r\n                                                height: 28\r\n                                            }}    \r\n                                        />\r\n                                    </Button>\r\n                                    <div className='all-type-container'>\r\n                                            {\r\n                                                Array.from(typeSet).map((type) =>\r\n                                                    <div className='type-container'>\r\n                                                        \r\n                                                        <CancelIcon\r\n                                                            className='close-icon'\r\n                                                            size={10}\r\n                                                            onClick={() => {\r\n                                                                typeSet = typeSet.filter(function(item) {\r\n                                                                    return item != type;\r\n                                                                })\r\n                                                                console.log(typeSet);\r\n                                                                this.setState({type: 'none'});\r\n                                                            }}\r\n                                                \r\n                                                        />\r\n                                                        <span className='type-title'>\r\n                                                            {this.getTypeNamebyTypeID(type)}\r\n                                                        </span>\r\n                                                    </div>\r\n                                                    \r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                </Grid>\r\n                                {/* <Grid item md={10}\r\n                                    className='input-item'\r\n                                >\r\n\r\n                                </Grid> */}\r\n                                <Grid item md={2}\r\n                                    className='input-item'\r\n                                >\r\n                                    <Button variant=\"contained\" onClick={() => this.importGood()}>\r\n                                        Import\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item sm={12} md={12} >\r\n                        \r\n                    </Grid>\r\n                </Grid> \r\n                    \r\n                {this.props.addTypeStatus ? (\r\n                    <div className=\"modal-add\">\r\n                        <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                        <AddTypeModal></AddTypeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.confirmStatus ? (\r\n                    <div className=\"modal-add\">\r\n                        <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                        <ConfirmModal></ConfirmModal>\r\n                    </div>\r\n                ): null}\r\n            </div>\r\n        );        \r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        confirmStatus: state.confirmStatus\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar\r\n            })\r\n        },\r\n        setAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_IMPORT_GOOD\",\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GoodImport);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\EditTypeModal.js",["379","380","381","382"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit} from 'react-icons/bi';\r\nimport { TiDelete } from \"react-icons/ti\";\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\nimport AddTypeModal from './AddTypeModal';\r\n\r\nvar productTypes =[];\r\nvar listTypeInfor = [];\r\n\r\nclass EditTypeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.loadAllType();\r\n        this.state = {\r\n            change: false\r\n        }\r\n    }\r\n    confirm = () => {\r\n        // Thực hiện các lệnh xử lý tại đây\r\n        this.props.changeConfirmStatus();\r\n    }\r\n    cancel = () => {\r\n        // this.props.changeConfirmStatus();\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    edit = (type) => {\r\n        this.props.changeAddTypeStatus();\r\n        this.props.setEditTypeStatus();\r\n        this.props.typeToUpdate(type);\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    async delete(type){\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productTypes:\r\n            [\r\n                {\r\n                    typeID: type._id.typeID,\r\n                    storeID: type._id.storeID\r\n                }\r\n            ]\r\n                \r\n        }\r\n        await axios.delete(`http://localhost:5000/api/product/type`,{data: data})\r\n            .then(res => {\r\n                console.log(\"Update success\");\r\n                alert('delete được rồi anh trai')\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                // alert(\"Lỗi gì cmnr\")\r\n            })\r\n        this.loadAllType();\r\n    }\r\n    \r\n\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                storeID: this.props.infoUser.email,\r\n            }   \r\n        }\r\n        console.log(data.token);\r\n        // alert(data.token);\r\n        console.log(data.filter);\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err); // 401 ở đây\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        listTypeInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n        productTypes=[];\r\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\r\n        {\r\n            productTypes.push(listTypeInfor[i].name);\r\n        }\r\n        this.setState({change: true});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"All Good Type\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid container item md={12} xs={12} spacing={0}>\r\n                                { listTypeInfor.map((type) => (\r\n                                    <Grid item md={3} style={{border:'1px solid #333', padding: 4}}>\r\n                                        <span>{type.name}</span>\r\n                                        <BiEdit onClick={() => this.edit(type)}/>\r\n                                        <TiDelete onClick={() => this.delete(type)}/>\r\n                                    </Grid>\r\n                                ))}\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Thoát\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n                {/* {this.props.addTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <AddTypeModal></AddTypeModal>\r\n                        </div>\r\n                    ): null} */}\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        editTypeStatus: state.editTypeStatus,\r\n        addTypeStatus: state.addTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        infoUser: state.infoUser,\r\n        typeProductValue: state.typeProductValue,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        setEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_EDIT_TYPE_STATUS\",\r\n            })\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        typeToUpdate: (data) => {\r\n            dispatch({\r\n                type: \"UPDATE_PRODUCT_TYPE\",\r\n                _id: {\r\n                    typeID: data._id.typeID,\r\n                    storeID: data._id.storeID,\r\n                },\r\n                name: data.name\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTypeModal);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\PayMoneyModal.js",["383","384","385","386","387","388","389","390","391","392","393","394","395","396","397","398","399","400","401","402","403"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass PayEmployeeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            goodID : \"\",\r\n            change: false,\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n        }; \r\n    }\r\n    \r\n\r\n    cancel = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"PAY EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\" \r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>Old</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Gender</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Province</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.props.changePayEmployeeStatus()}>\r\n                                            Pay employee\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changePayEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PayEmployeeModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\ConfirmModal.js",["404","405","406","407","408","409"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nclass ConfirmModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    confirm = () => {\r\n        // Thực hiện các lệnh xử lý tại đây\r\n        this.props.changeConfirmStatus();\r\n        this.props.setConfirm();\r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeConfirmStatus();\r\n        this.props.setQuit();\r\n    }\r\n\r\n    getMessage = ()  => {\r\n        var message = \"Cái này chưa code\";\r\n        switch(this.props.confirmCode)\r\n        {\r\n            case 'confirm-delete-good':\r\n                message = \"Are you sure to delete this product ?\";\r\n            case 'confirm-import-good':\r\n                message = \"Are you sure to import this product ?\";\r\n        }\r\n        return (\r\n            <div>\r\n                {message}\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        console.log(this.props.objectEditShift);\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={12} xs={12}>\r\n                                {this.getMessage()}\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.confirm()} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                            Xác nhận\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Hủy\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        confirmStatus: state.confirmStatus,\r\n        deleteStatus: state.deleteStatus,\r\n        confirmCode: state.confirmCode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setConfirm: () => {\r\n            dispatch({\r\n                type: \"CONFIRM\",\r\n            });\r\n        },\r\n        setQuit: () => {\r\n            dispatch({\r\n                type: \"QUIT\",\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmModal);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\AddTypeModal.js",["410","411","412","413","414","415","416","417"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Alert } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel, GiVampireCape } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nvar listTypeInfor = [];\r\n\r\nclass AddTypeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            change: 'false'\r\n        }\r\n        this.loadInitialData();\r\n        this.getAllTypeList();\r\n    }\r\n    storeID = \"\";\r\n    typeList = [];\r\n\r\n    async getAllTypeList(){\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                storeID: this.props.infoUser.email,\r\n            }   \r\n        }\r\n        console.log(data.token);\r\n        // alert(data.token);\r\n        console.log(data.filter);\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                alert(\"Get success\");\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err); // 401 ở đây\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n    }\r\n    addType = () => {\r\n        var newTypeName = document.querySelector('input[name=\"typeName\"]').value.trim();\r\n        if(this.checkConstraint(newTypeName)==false)  return;\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productType: {\r\n                _id:{\r\n                    typeID: listTypeInfor.length,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: newTypeName,\r\n            }    \r\n        }\r\n        axios.post(`http://localhost:5000/api/product/type`, data)\r\n            .then(res => {\r\n                alert(\"Save success\");\r\n                //TODO: Cập nhật token ở đây nữa\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        this.props.changeAddTypeStatus();\r\n    }\r\n    \r\n    checkConstraint(typeName) {\r\n        //Constraint 1: Check name\r\n        for(var i=0;i<listTypeInfor.length;i++)\r\n        {\r\n            if(listTypeInfor[i].name==typeName)\r\n            {\r\n                if(!this.props.isAddTypeStatus && typeName.trim()==this.props.typeProductValue.name)\r\n                {\r\n                    alert(\"Không đổi tên à anh zai\");\r\n                    return false;\r\n                }\r\n                alert(\"Trùng tên rồi anh chai\");\r\n                return false;\r\n            }\r\n            \r\n        }        \r\n        // Constraint 2: Not blank\r\n        if(typeName.length==0)\r\n        {\r\n            alert(\"Không nhập gì à anh chai\")\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n    cancel = () => {\r\n        this.props.changeAddTypeStatus();\r\n    }\r\n\r\n    handle = () => {\r\n        if (this.props.isAddTypeStatus)\r\n            this.addType();\r\n        else \r\n            this.editType();\r\n    }\r\n\r\n    editType = () => {\r\n        var newTypeName = this.typeName;\r\n        if(this.checkConstraint(newTypeName)==false) return;\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productType: {\r\n                _id: {\r\n                    typeID: this.props.typeProductValue._id.typeID,\r\n                    storeID: this.props.infoUser.email,\r\n                }, \r\n                name: newTypeName,\r\n            }\r\n        }\r\n        // alert(data.product.name)\r\n        axios.put(`http://localhost:5000/api/product/type`, data)\r\n            .then(res => {\r\n                // Có khi mình sẽ cập nhật type ở dây\r\n                console.log(\"Update success\");\r\n                alert('update được rồi anh trai')\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(\"Lỗi gì cmnr\")\r\n            })\r\n        this.props.changeAddTypeStatus();\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    typeName = \"\";\r\n    loadInitialData = () => {\r\n        if (this.props.isAddTypeStatus) {\r\n            \r\n        }\r\n        else\r\n        {\r\n            this.typeName = this.props.typeProductValue.name;\r\n            this.setState({change: true});\r\n        } \r\n    }\r\n\r\n    changeTypeName(e)\r\n    {\r\n        this.typeName = e.target.value;\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader \r\n                        style={{ color: 'blue', backgroundColor: '#efeeef', textAlign: 'center' }} \r\n                        title={this.props.isAddTypeStatus? \"Add Type\" : \"Edit Type\"}\r\n                        />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid \r\n                            container \r\n                            spacing={2}\r\n                            justifyContent={'center'}\r\n                            alignItems={'center'}\r\n                        >\r\n                            <Grid item md={2} xs={12}>\r\n                                TypeName\r\n                            </Grid>\r\n                            <Grid item md={10} xs={12}>\r\n                                <TextField\r\n                                    id=\"outlined-basic\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    required\r\n                                    type=\"text\"\r\n                                    name=\"typeName\"\r\n                                    defaultValue={this.typeName}\r\n                                    onChange={(e) => this.changeTypeName(e)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button \r\n                            style={{ backgroundColor: 'yellowgreen' }} \r\n                            // onClick={() => this.addShift()} \r\n                            onClick={() => this.handle()}\r\n                            variant=\"contained\" \r\n                            startIcon={<BiPlusMedical />}\r\n                        >\r\n                            Xác nhận\r\n                        </Button>\r\n                        <Button \r\n                            style={{ backgroundColor: 'red' }} \r\n                            // onClick={() => this.editShift()}\r\n                            onClick={() => this.cancel()}\r\n                            variant=\"contained\" \r\n                            startIcon={<GiCancel />}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        infoUser: state.infoUser,\r\n        typeProductValue: state.typeProductValue\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTypeModal);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ModalAdd.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ListShift.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Regulation.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileSetting.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ChangePassword.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileDetail.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileHeader.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Tabs.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\DarkMode.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ComponentToPrint.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButton.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\Statistic.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\Calendar.js",["418","419","420"],"import * as React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport StaticDateRangePicker from '@mui/lab/StaticDateRangePicker';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport default function StaticDateRangePickerDemo() {\r\n    const [value, setValue] = React.useState([new Date(2021, 2, 2), new Date(2021, 2, 5)]);\r\n    const [date, setDate] = React.useState(new Date(2021, 4, 2))\r\n\r\n    const value1 = [\r\n        { date: '2021/01/11', count:2 },\r\n        { date: '2021/04/12', count:2 },\r\n        { date: '2021/05/01', count:5 },\r\n        { date: '2021/05/02', count:5 },\r\n        { date: '2021/05/03', count:1 },\r\n        { date: '2021/05/04', count:11 },\r\n        { date: '2021/05/08', count:32 },\r\n      ];\r\n\r\n    return (\r\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n            <StaticDateRangePicker\r\n                displayStaticWrapperAs=\"desktop\"\r\n                value={value}\r\n                onChange={(date) => {\r\n                    setDate(date);\r\n                }}\r\n                renderInput={(startProps, endProps) => (\r\n                    <React.Fragment>\r\n                        <TextField {...startProps} />\r\n                        <Box sx={{ mx: 2 }}> to </Box>\r\n                        <TextField {...endProps} />\r\n                    </React.Fragment>\r\n                )}\r\n                calendars={4}\r\n                disableAutoMonthSwitching={true}\r\n            />\r\n        </LocalizationProvider>\r\n    );\r\n}\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\UpdateGoodModal.js",["421","422","423","424","425","426","427","428","429","430","431","432"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport GoodImage from './goodExample.jpg';\r\nimport AddTypeModal from './AddTypeModal';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport ConfirmModal from './ConfirmModal';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass UpdateGoodModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            goodID : \"\",\r\n            change: false,\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n        }; \r\n        this.loadInitialData = this.loadInitialData.bind(this);\r\n        // this.loadInitialData();\r\n        // alert(this.state.goodID)\r\n    }\r\n    imgUrl='none';\r\n    goodID='';\r\n    importDate='';\r\n    name='';\r\n    imgUrl='';\r\n    quantity = 0;\r\n    remain = 0;\r\n    unit = \"\";\r\n    sellPrice = \"\";\r\n    expire =\"\";\r\n    \r\n    blurDiscription = (e) => {\r\n        this.descriptionShift = e.target.value;\r\n    }\r\n    blurSalary = (e) => {\r\n        this.salary = e.target.value;\r\n    }\r\n\r\n    updateGood = () => {\r\n        this.props.changeUpdateGoodStatus();\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            product: {\r\n                _id: {\r\n                    productID: document.querySelector('input[name=\"goodID\"]').value,\r\n                    importDate: Date(this.dateTime),\r\n                },\r\n                name: document.querySelector('input[name=\"goodName\"]').value,\r\n                quantity: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                // remain: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\r\n                sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\r\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\r\n                imgUrl: this.imgUrl,\r\n                unit: document.querySelector('input[name=\"unit\"]').value,\r\n            }\r\n        }\r\n        axios.put(`http://localhost:5000/api/product`, data)\r\n            .then(res => {\r\n                console.log(\"Update success\");\r\n                alert('update được rồi anh trai')\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        console.log(data);\r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeUpdateGoodStatus();\r\n    }\r\n\r\n    sampleData = {\r\n        email:\"19522006@gm.uit.edu.vn\",\r\n        token:\"this is token\",\r\n        data: [\r\n            {\r\n                _id:{\r\n                    productID:\"1212121\",\r\n                    importDate:\"2021-10-08T00:00:00.000Z\"\r\n                },\r\n                name:\"SHIIijjjiI\",\r\n                imgUrl:\"none\",\r\n                quantity:4,\r\n                remain:4,\r\n                unit:\"12\",\r\n                importPrice:7,\r\n                sellPrice:7,\r\n                expires:\"2000-11-10T00:00:00.000Z\",\r\n            },\r\n            {\r\n                _id:{\r\n                    productID:\"121212aa1\",\r\n                    importDate:\"2021-10-08T00:00:00.000Z\"\r\n                }, \r\n                name:\"q\",\r\n                imgUrl:\"none\",\r\n                quantity:11,\r\n                remain:11,\r\n                unit:\"11\",\r\n                importPrice:212,\r\n                sellPrice:120,\r\n                expires:\"2021-10-28\"\r\n            }\r\n        ]\r\n    }\r\n\r\n    loadInitialData = () => {\r\n        // Load các dữ liệu ban đầu của form ở đây để mà update nhưng mà bị lỗi 401 mẹ\r\n        var data = this.sampleData;\r\n        //Xử lý sampleData\r\n        var productInfo = data.data[0];\r\n        this.goodID = productInfo._id.productID;\r\n        this.importDate = productInfo._id.importDate;\r\n        this.name = productInfo.name;\r\n        this.imgUrl = productInfo.imgUrl;\r\n        this.quantity = productInfo.quantity;\r\n        // this.remain = productInfo.remain;\r\n        this.unit = productInfo.unit;\r\n        this.sellPrice = productInfo.sellPrice;\r\n        this.expire = productInfo.expires;\r\n    }\r\n\r\n    render() {\r\n        this.loadInitialData();\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"UPDATE GOOD\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card \r\n                            >\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            name=\"goodID\" \r\n                                            variant=\"outlined\" \r\n                                            value={this.goodID}\r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                        style={{\r\n                                            marginLeft: 0,\r\n                                            paddingLeft: 0\r\n                                        }}\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 128}}>Import Date</div>\r\n                                        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                            <DateTimePicker\r\n                                                renderInput={(params) => <StyledTextField \r\n                                                                            {...params} \r\n                                                                            classname='input-box'\r\n                                                                            name=\"importDateTime\"\r\n                                                                            style = {{width: '70%', marginRight: 20}} \r\n                                                                            fullWidth \r\n                                                                        />}\r\n                                                value={this.importDate}\r\n                                                readOnly={true}\r\n                                                disabled={true}\r\n                                            />\r\n                                        </LocalizationProvider>\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            name=\"goodName\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.name} \r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                        style={{padding: '0px', marginLeft: '0px'}}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\" \r\n                                            style={{width: '100px'}}\r\n                                        >\r\n                                            Quantity\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            style = {{width: '60%'}} \r\n                                            fullWidth\r\n                                            name=\"goodQuantity\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\" \r\n                                            defaultValue={this.quantity}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                        style={{\r\n                                            paddingRight: 24\r\n                                        }}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                marginLeft: 0,\r\n                                                paddingLeft: 4\r\n                                            }}\r\n                                        >\r\n                                            Unit\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '100%', marginLeft: '4px'}} \r\n                                            fullWidth\r\n                                            variant=\"outlined\"\r\n                                            type=\"text\" \r\n                                            name=\"unit\" \r\n                                            defaultValue={this.unit}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 128}}>Original Price</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"originalPrice\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\"\r\n                                            defaultValue={this.importPrice}\r\n                                        />\r\n                                        đ\r\n                                    </Grid>\r\n                                    <Grid item md={6}\r\n                                        className='input-item'\r\n                                        style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{width: '96px'}}\r\n                                        >\r\n                                            Sell Price\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"sellPrice\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\" \r\n                                            defaultValue={this.sellPrice}\r\n                                        />\r\n                                        đ\r\n                                    </Grid>\r\n                                    <Grid item md={7} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\r\n                                        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                            <DatePicker\r\n                                                renderInput={(params) => <StyledTextField \r\n                                                                            {...params} \r\n                                                                            classname='input-box'\r\n                                                                            name=\"expiredDate\"\r\n                                                                            style = {{width: '70%', marginRight: 20}} \r\n                                                                            fullWidth \r\n                                                                            value={this.expire}\r\n                                                                        />}\r\n                                                defaultvalue={this.expire}\r\n                                                onChange={(newValue) => {\r\n                                                    this.changeTimeFrom(newValue);\r\n                                                }}\r\n                                            />\r\n                                        </LocalizationProvider>\r\n                                        \r\n                                    </Grid>\r\n                                    <Grid item md={10}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{width:132}}\r\n                                        >\r\n                                            Product Type\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 120 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({type: event.target.value});\r\n                                                    if(!typeSet.includes(event.target.value))\r\n                                                    {\r\n                                                        typeSet.push(event.target.value);\r\n                                                    }\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    productTypes.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                    : productTypes.map((type) =>\r\n                                                        <MenuItem value={type}>{type}</MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                        <Button onClick={() => this.handleAdd()}>\r\n                                            <AiFillPlusCircle\r\n                                                size={28}\r\n                                                style={{\r\n                                                    fontSize: 28,\r\n                                                    margin: 0,\r\n                                                    padding: 0,\r\n                                                    width: 28,\r\n                                                    height: 28\r\n                                                }}    \r\n                                            />\r\n                                        </Button>\r\n                                        <div className='all-type-container'>\r\n                                                {\r\n                                                    Array.from(typeSet).map((type) =>\r\n                                                        <div className='type-container'>\r\n                                                            \r\n                                                            <CancelIcon\r\n                                                                className='close-icon'\r\n                                                                size={10}\r\n                                                                onClick={() => {\r\n                                                                    typeSet = typeSet.filter(function(item) {\r\n                                                                        return item != type;\r\n                                                                    })\r\n                                                                    console.log(typeSet);\r\n                                                                    this.setState({type: 'none'});\r\n                                                                }}\r\n                                                    \r\n                                                            />\r\n                                                            <span className='type-title'>\r\n                                                                {type}\r\n                                                            </span>\r\n                                                        </div>\r\n                                                        \r\n                                                    )\r\n                                                }\r\n                                            </div>\r\n                                    </Grid>\r\n                                    {/* <Grid item md={10}\r\n                                        className='input-item'\r\n                                    >\r\n\r\n                                    </Grid> */}\r\n                                    <Grid item md={2}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.updateGood()}>\r\n                                            UPDATE\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                        \r\n                    {this.props.addTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <AddTypeModal></AddTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.confirmStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                            <ConfirmModal></ConfirmModal>\r\n                        </div>\r\n                    ): null}\r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        updateGoodStatus: state.updateGoodStatus,\r\n        confirmStatus: state.confirmStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeUpdateGoodStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setUpdateConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_UPDATE_GOOD\",\r\n            }); \r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateGoodModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\SearchBar.js",["433","434","435","436"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { MdClear} from \"react-icons/md\";\r\nimport { AiOutlineSearch } from \"react-icons/ai\";\r\nimport { withStyles } from '@material-ui/styles';\r\nimport classNames from \"classnames\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    // height: theme.spacing(6),\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    height: \"80px\",\r\n  },\r\n//   iconButton: {\r\n//     color: theme.palette.action.active,\r\n//     transform: \"scale(1, 1)\",\r\n//     transition: theme.transitions.create([\"transform\", \"color\"], {\r\n//       duration: theme.transitions.duration.shorter,\r\n//       easing: theme.transitions.easing.easeInOut,\r\n//     }),\r\n//   },\r\n  iconButtonHidden: {\r\n    transform: \"scale(0, 0)\",\r\n    \"& > $icon\": {\r\n      opacity: 0,\r\n    },\r\n  },\r\n  searchIconButton: {\r\n    // marginRight: theme.spacing(-6),\r\n  },\r\n//   icon: {\r\n//     transition: theme.transitions.create([\"opacity\"], {\r\n//       duration: theme.transitions.duration.shorter,\r\n//       easing: theme.transitions.easing.easeInOut,\r\n//     }),\r\n//   },\r\n  input: {\r\n    width: \"100%\",\r\n  },\r\n  searchContainer: {\r\n    margin: \"4px 8px 4px 8px\",\r\n    height: \"40px\",\r\n    // width: `calc(100% - ${theme.spacing(6 + 4)}px)`, // 6 button + 4 margin\r\n  },\r\n});\r\nconst SearchBar = React.forwardRef(\r\n  (\r\n    {\r\n      cancelOnEscape,\r\n      className,\r\n      classes,\r\n      closeIcon,\r\n      disabled,\r\n      onCancelSearch,\r\n      onRequestSearch,\r\n      searchIcon,\r\n      style,\r\n      ...inputProps\r\n    },\r\n    ref\r\n  ) => {\r\n    const inputRef = React.useRef();\r\n    const [value, setValue] = React.useState(inputProps.value);\r\n\r\n    React.useEffect(() => {\r\n      setValue(inputProps.value);\r\n    }, [inputProps.value]);\r\n\r\n    const handleFocus = React.useCallback(\r\n      (e) => {\r\n        if (inputProps.onFocus) {\r\n          inputProps.onFocus(e);\r\n        }\r\n      },\r\n      [inputProps.onFocus]\r\n    );\r\n\r\n    const handleBlur = React.useCallback(\r\n      (e) => {\r\n        setValue((v) => v.trim());\r\n        if (inputProps.onBlur) {\r\n          inputProps.onBlur(e);\r\n        }\r\n      },\r\n      [inputProps.onBlur]\r\n    );\r\n\r\n    const handleInput = React.useCallback(\r\n      (e) => {\r\n        setValue(e.target.value);\r\n        if (inputProps.onChange) {\r\n          inputProps.onChange(e.target.value);\r\n        }\r\n      },\r\n      [inputProps.onChange]\r\n    );\r\n\r\n    const handleCancel = React.useCallback(() => {\r\n      setValue(\"\");\r\n      if (onCancelSearch) {\r\n        onCancelSearch();\r\n      }\r\n    }, [onCancelSearch]);\r\n\r\n    const handleRequestSearch = React.useCallback(() => {\r\n      if (onRequestSearch) {\r\n        onRequestSearch(value);\r\n      }\r\n    }, [onRequestSearch, value]);\r\n\r\n    const handleKeyUp = React.useCallback(\r\n      (e) => {\r\n        if (e.charCode === 13 || e.key === \"Enter\") {\r\n          handleRequestSearch();\r\n        } else if (\r\n          cancelOnEscape &&\r\n          (e.charCode === 27 || e.key === \"Escape\")\r\n        ) {\r\n          handleCancel();\r\n        }\r\n        if (inputProps.onKeyUp) {\r\n          inputProps.onKeyUp(e);\r\n        }\r\n      },\r\n      [handleRequestSearch, cancelOnEscape, handleCancel, inputProps.onKeyUp]\r\n    );\r\n\r\n    React.useImperativeHandle(ref, () => ({\r\n      focus: () => {\r\n        inputRef.current.focus();\r\n      },\r\n      blur: () => {\r\n        inputRef.current.blur();\r\n      },\r\n    }));\r\n\r\n    return (\r\n      <Paper className={classNames(classes.root, className)} style={{height: '40px'}}>\r\n        <div className={classes.searchContainer}>\r\n          <Input\r\n            {...inputProps}\r\n            inputRef={inputRef}\r\n            onBlur={handleBlur}\r\n            value={value}\r\n            onChange={handleInput}\r\n            onKeyUp={handleKeyUp}\r\n            onFocus={handleFocus}\r\n            fullWidth\r\n            className={classes.input}\r\n            disableUnderline\r\n            disabled={disabled}\r\n          />\r\n        </div>\r\n        <IconButton\r\n          onClick={handleRequestSearch}\r\n          className={classNames(classes.iconButton, classes.searchIconButton, {\r\n            [classes.iconButtonHidden]: value !== \"\",\r\n          })}\r\n          disabled={disabled}\r\n        >\r\n          {React.cloneElement(searchIcon, {\r\n            classes: { root: classes.icon },\r\n          })}\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={handleCancel}\r\n          className={classNames(classes.iconButton, {\r\n            [classes.iconButtonHidden]: value === \"\",\r\n          })}\r\n          disabled={disabled}\r\n        >\r\n          {React.cloneElement(closeIcon, {\r\n            classes: { root: classes.icon },\r\n          })}\r\n        </IconButton>\r\n      </Paper>\r\n    );\r\n  }\r\n);\r\n\r\nSearchBar.defaultProps = {\r\n  className: \"\",\r\n  closeIcon: <MdClear/>,\r\n  disabled: false,\r\n  placeholder: \"Search\",\r\n  searchIcon: <AiOutlineSearch />,\r\n  style: null,\r\n  value: \"\",\r\n};\r\n\r\nSearchBar.propTypes = {\r\n  cancelOnEscape: PropTypes.bool,\r\n  classes: PropTypes.object.isRequired,\r\n  className: PropTypes.string,\r\n  closeIcon: PropTypes.node,\r\n  disabled: PropTypes.bool,\r\n  onCancelSearch: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n  onRequestSearch: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  searchIcon: PropTypes.node,\r\n  style: PropTypes.object,\r\n  value: PropTypes.string,\r\n};\r\n\r\nexport default withStyles(styles)(SearchBar);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodTable.js",["437","438","439","440","441","442","443"],"import * as React from 'react';\r\nimport { Component } from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport GoodImage from './goodExample.jpg';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport { Image } from 'cloudinary-react';\r\n\r\nfunction createData(index, id, name, quantity, originalPrice, sellPrice, importTime, productType, imgUrl) {\r\n    return {\r\n        index,\r\n        id,\r\n        name,\r\n        quantity,\r\n        sellPrice,\r\n        importTime,\r\n        imgLink: imgUrl,\r\n        hidden: [\r\n            {\r\n                date: '2020-01-05',\r\n                remaining: quantity,\r\n                originalPrice: originalPrice,\r\n                productType: productType,\r\n            }\r\n        ],\r\n    };\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    goodTable_Cell:{\r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    }\r\n}));\r\n\r\n\r\n\r\nfunction Row(props) {\r\n    const { row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const classes = useStyles();\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.index}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.id}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.name}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.quantity}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.sellPrice}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.importTime}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\r\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n                        {open ? (<KeyboardArrowUpIcon />) : (<KeyboardArrowDownIcon />)}\r\n                    </IconButton>\r\n                </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell className={classes.goodTable_Cell} style={{ padding: 0}} colSpan={8}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Box sx={{ margin: 1 }}>\r\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                Other information\r\n                            </Typography>\r\n                            <div style={{display: 'flex'}}>\r\n                                {  \r\n                                    row.imgLink == \"none\"\r\n                                    ? <img src={GoodImage} style={{width: '100px', height: '100px', objectFit:'cover'}}/>\r\n                                    : <Image style={{width: '100px', height: '100px', objectFit:'cover'}} cloudName=\"databaseimg\" publicId={row.imgLink}>{row.imgLink}</Image>\r\n                                }\r\n                                \r\n                                \r\n                                <Table size=\"small\" aria-label=\"purchases\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell className={classes.goodTable_Cell}>Expired Day</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>Original Price</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>Good Remain</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>Product Type</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        {row.hidden.map((hiddenRow) => (\r\n                                            <TableRow key={hiddenRow.date}>\r\n                                                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">\r\n                                                    {hiddenRow.date}\r\n                                                </TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}>{hiddenRow.originalPrice}</TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}>{hiddenRow.remaining}</TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}>{hiddenRow.productType}</TableCell>\r\n                                            </TableRow>\r\n                                        ))}\r\n                                    </TableBody>\r\n                                </Table>\r\n                                <div className=\"button-container\">\r\n                                    <Button \r\n                                        onClick={() => {\r\n                                            removeRow(row)\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                    >\r\n                                        Update\r\n                                    </Button>\r\n                                    <Button variant=\"contained\">Delete</Button>\r\n                                </div>\r\n                            </div>  \r\n                        </Box>\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nfunction removeRow(row)\r\n{\r\n    rows = rows.filter(function(item) {\r\n        return item !== row;\r\n    })   \r\n    alert(rows.length);\r\n    // Tới đây là ổn, tìm cách gọi hàm trong class nữa là ok\r\n    \r\n}\r\n\r\nvar rows = [\r\n    // createData(1,10001,'Frozen yoghurt', 159, 20, 24, '1/1/2021','food'),\r\n    // createData(2,10002,'Ice cream sandwich', 237, 27, 37, '2/2/2021', 'food'),\r\n    // createData(3,10003,'Eclair', 262, 16, 24, '3/3/2021', 'food'),\r\n    // createData(4,10004,'Cupcake', 305, 47, 67, '4/4/2021', 'cuisine'),\r\n    // createData(5,10005,'Gingerbread', 356, 26, 49, '31/1/2021', 'cuisine'),\r\n    // createData(6,10006,'Frozen yoghurt', 159, 20, 24, '1/1/2021','cuisine'),\r\n    // createData(7,10007,'Ice cream sandwich', 237, 27, 37, '2/2/2021', 'food'),\r\n    // createData(8,10008,'Eclair', 262, 16, 24, '3/3/2021', 'food'),\r\n    // createData(9,10009,'Cupcake', 305, 47, 67, '4/4/2021', 'detergent'),\r\n    // createData(10,10010,'Gingerbread', 356, 26, 49, '31/1/2021', 'detergent'),\r\n    // createData(11,10011,'Frozen yoghurt', 159, 20, 24, '1/1/2021','detergent'),\r\n    // createData(12,10012,'Ice cream sandwich', 237, 27, 37, '2/2/2021', 'food'),\r\n    // createData(13,10013,'Eclair', 262, 16, 24, '3/3/2021', 'food'),\r\n    // createData(14,10014,'Cupcake', 305, 47, 67, '4/4/2021', 'food'),\r\n    // createData(15,10015,'Gingerbread', 356, 26, 49, '31/1/2021', 'food'),\r\n];\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    } \r\n})\r\n\r\n\r\nvar listProductInfor = [];\r\nvar joinTypeInfor = [];\r\nvar listTypeInfor = [];\r\n\r\nclass GoodTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            update: false\r\n        }\r\n        this.loadAllType();\r\n        this.loadAllGood();\r\n    }\r\n    removeProduct= (row) => {\r\n        // Đây là xử lý ở phía dữ liệu, có thể await gì đó.\r\n        // Xử lý ở phía giao diện(tạm)\r\n\r\n        // Đây là câu lệnh để update nhẹ\r\n        this.setState({update: this.state.update})\r\n    }\r\n    async loadAllGood() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                storeID: this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                alert(\"Lấy hết đc product ròi anh chai\");\r\n                result = res.data.data;\r\n                console.log(res.data.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Get data và lưu các tên Type vào dữ liệU\r\n        //Get data và lưu các tên Type vào bảng\r\n        listProductInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listProductInfor.push(result[i]);\r\n        }\r\n        // Get hết từ cái productjoinType\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                storeID: this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                alert(\"Lấy hết đc join ròi anh chai\");\r\n                result = res.data.data;\r\n                console.log(res.data.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })  \r\n        // Lấy các cái jointype\r\n        joinTypeInfor = [];\r\n        for(var i = 0 ; i < result.length; i++)\r\n        {\r\n            joinTypeInfor.push(result[i]);\r\n        }\r\n\r\n        //createData(index, id, name, quantity, originalPrice, sellPrice, importTime, productType, imgUrl)\r\n        // Cập nhật vào cái row đi cho chắc\r\n        rows = [];\r\n        for(var i = 0; i < listProductInfor.length ; i++)\r\n        {\r\n            var obj = listProductInfor[i];\r\n\r\n            var joinType = '';\r\n            // // Lấy tất cả các type trong cái product\r\n            for(var j = 0; j < joinTypeInfor.length ; j++)\r\n            {\r\n\r\n                // console.log(\"joinTypeInfor[]\", j ,joinTypeInfor[j])\r\n                if(joinTypeInfor[j]._id.productID == obj._id.productID)\r\n                {\r\n                    joinType = joinType + ' ' + this.getTypeNamebyTypeID(joinTypeInfor[j]._id.typeID);\r\n                }\r\n            }\r\n\r\n            rows.push(\r\n                createData((i+1), obj._id.productID, obj.name, obj.quantity, \r\n                    obj.importPrice, obj.sellPrice, obj._id.importDate, joinType, obj.imgUrl)\r\n            );\r\n            console.log(\"obj.imgUrl\",obj.imgUrl);\r\n        }\r\n        \r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                storeID: this.props.infoUser.email,\r\n            }   \r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        listTypeInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n\r\n        this.setState({change: true});\r\n    }\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName='';\r\n        for(var i = 0; i<listTypeInfor.length;i++)\r\n        {   \r\n            if(listTypeInfor[i]._id.typeID == typeID)\r\n            {\r\n                typeName = listTypeInfor[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div>\r\n                <TableContainer component={Paper}>\r\n                    <Table className={classes.goodTable} aria-label=\"collapsible table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Index</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ID</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">GoodName</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Quantity</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Sell Price</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ImportTime</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell}/>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows.map((row) => (\r\n                                <Row key={row.name} row={row} />\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        confirmStatus: state.confirmStatus\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(GoodTable));\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\fakeData.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateEmployeeModal.js",["444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass UpdateEmployeeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            goodID : \"\",\r\n            change: false,\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n        }; \r\n    }\r\n    \r\n\r\n    cancel = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"UPDATE EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\" \r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>Old</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Gender</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Province</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.props.changeUpdateEmployeeStatus()}>\r\n                                            UPDATE employee\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateEmployeeModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddEmployeeModal.js",["465","466","467","468","469","470","471","472","473","474","475","476","477","478","479","480","481","482","483","484","485"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass AddEmployeeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            goodID : \"\",\r\n            change: false,\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n        }; \r\n    }\r\n    \r\n\r\n    cancel = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"ADD EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\" \r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>Old</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Gender</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Province</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.addEmployee()}>\r\n                                            Add employee\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEmployeeModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeTableHeader.js",["486","487"],"import PropTypes from 'prop-types';\r\n// material\r\nimport { visuallyHidden } from '@mui/utils';\r\nimport { Box, Checkbox, TableRow, TableCell, TableHead, TableSortLabel } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nEmployeeTableHeader.propTypes = {\r\n  order: PropTypes.oneOf(['asc', 'desc']),\r\n  orderBy: PropTypes.string,\r\n  rowCount: PropTypes.number,\r\n  headLabel: PropTypes.array,\r\n  numSelected: PropTypes.number,\r\n  onRequestSort: PropTypes.func,\r\n  onSelectAllClick: PropTypes.func\r\n};\r\n\r\nexport default function EmployeeTableHeader({\r\n  order,\r\n  orderBy,\r\n  rowCount,\r\n  headLabel,\r\n  numSelected,\r\n  onRequestSort,\r\n  onSelectAllClick\r\n}) {\r\n  // const createSortHandler = (property) => (event) => {\r\n  //   onRequestSort(event, property);\r\n  // };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            // indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            // checked={rowCount > 0 && numSelected === rowCount}\r\n            // onChange={onSelectAllClick}\r\n          />\r\n        </TableCell>\r\n        {headLabel.map((headCell) => (\r\n          <TableCell\r\n            // key={headCell.id}\r\n            // align={headCell.alignRight ? 'right' : 'left'}\r\n            // sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              // hideSortIcon\r\n              // active={orderBy === headCell.id}\r\n              // direction={orderBy === headCell.id ? order : 'asc'}\r\n              // onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {/* {orderBy === headCell.id ? (\r\n                <Box sx={{ ...visuallyHidden }}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null} */}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeMoreMenu.js",["488","489","490"],"import { Icon } from '@iconify/react';\r\nimport { useRef, useState } from 'react';\r\nimport editFill from '@iconify/icons-eva/edit-fill';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\r\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\r\nimport {GiPayMoney} from \"react-icons/gi\";\r\nimport {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\n// material\r\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nclass EmployeeMoreMenu extends Component {\r\n  // const ref = useRef(null);\r\n  // const [isOpen, setIsOpen] = useState(false);\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: 'false'\r\n    }\r\n  }\r\n  setIsOpen(val) {\r\n    this.isOpen = val;\r\n    this.setState({change: val});\r\n  }\r\n\r\n  edit() {\r\n    this.props.changeUpdateEmployeeStatus();\r\n  }\r\n\r\n  isOpen=false;\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          position:'relative'\r\n        }}\r\n      >\r\n        <IconButton onClick={() => this.setIsOpen(true)}>\r\n          <Icon icon={moreVerticalFill} width={20} height={20} />\r\n        </IconButton>\r\n  \r\n        <Menu\r\n          open={this.isOpen}\r\n          style={{\r\n            position:'absolute',\r\n            top: 0,\r\n            right: 0,\r\n          }}\r\n          onClose={() => this.setIsOpen(false)}\r\n          PaperProps={{\r\n            sx: { width: 200, maxWidth: '100%' }\r\n          }}\r\n          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n          transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        >\r\n          <MenuItem sx={{ color: 'text.secondary' }}>\r\n            <ListItemIcon>\r\n              <Icon icon={trash2Outline} width={24} height={24} />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n  \r\n          <MenuItem sx={{ color: 'text.secondary' }}\r\n            onClick={() => this.edit()}\r\n          >\r\n            <ListItemIcon>\r\n              <Icon icon={editFill} width={24} height={24} />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Edit\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n          <MenuItem sx={{ color: 'text.secondary' }}\r\n            onClick={()=> this.props.changePayEmployeeStatus()}\r\n          >\r\n            <ListItemIcon>\r\n              <GiPayMoney size={24}/> \r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Pay money\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n        </Menu>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    updateEmployeeStatus: state.updateEmpoyeeStatus,\r\n    payEmployeeStatus: state.payEmployeeStatus,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n      changeUpdateEmployeeStatus: () => {\r\n          dispatch({\r\n              type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n          });\r\n      },\r\n      changePayEmployeeStatus: () => {\r\n        dispatch({\r\n            type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n        });\r\n    },\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeToolbar.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Scrollbar.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\SearchNotFound.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Label.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Page.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\BaseOptionChart.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\AlertReducer.js",[],{"ruleId":"491","replacedBy":"492"},{"ruleId":"493","replacedBy":"494"},{"ruleId":"495","severity":1,"message":"496","line":10,"column":10,"nodeType":"497","messageId":"498","endLine":10,"endColumn":24},{"ruleId":"499","severity":1,"message":"500","line":13,"column":3,"nodeType":"501","messageId":"502","endLine":15,"endColumn":4},{"ruleId":"495","severity":1,"message":"503","line":3,"column":5,"nodeType":"497","messageId":"498","endLine":3,"endColumn":12},{"ruleId":"495","severity":1,"message":"504","line":8,"column":8,"nodeType":"497","messageId":"498","endLine":8,"endColumn":13},{"ruleId":"495","severity":1,"message":"496","line":9,"column":10,"nodeType":"497","messageId":"498","endLine":9,"endColumn":24},{"ruleId":"495","severity":1,"message":"505","line":9,"column":26,"nodeType":"497","messageId":"498","endLine":9,"endColumn":35},{"ruleId":"495","severity":1,"message":"506","line":13,"column":8,"nodeType":"497","messageId":"498","endLine":13,"endColumn":15},{"ruleId":"507","severity":1,"message":"508","line":106,"column":30,"nodeType":"509","messageId":"510","endLine":106,"endColumn":31,"suggestions":"511"},{"ruleId":"507","severity":1,"message":"508","line":106,"column":46,"nodeType":"509","messageId":"510","endLine":106,"endColumn":47,"suggestions":"512"},{"ruleId":"507","severity":1,"message":"508","line":94,"column":28,"nodeType":"509","messageId":"510","endLine":94,"endColumn":29,"suggestions":"513"},{"ruleId":"507","severity":1,"message":"508","line":94,"column":44,"nodeType":"509","messageId":"510","endLine":94,"endColumn":45,"suggestions":"514"},{"ruleId":"495","severity":1,"message":"515","line":13,"column":8,"nodeType":"497","messageId":"498","endLine":13,"endColumn":13},{"ruleId":"495","severity":1,"message":"506","line":6,"column":8,"nodeType":"497","messageId":"498","endLine":6,"endColumn":15},{"ruleId":"507","severity":1,"message":"508","line":97,"column":28,"nodeType":"509","messageId":"510","endLine":97,"endColumn":29,"suggestions":"516"},{"ruleId":"507","severity":1,"message":"508","line":97,"column":44,"nodeType":"509","messageId":"510","endLine":97,"endColumn":45,"suggestions":"517"},{"ruleId":"495","severity":1,"message":"518","line":9,"column":11,"nodeType":"497","messageId":"498","endLine":9,"endColumn":32},{"ruleId":"519","severity":1,"message":"520","line":48,"column":29,"nodeType":"521","endLine":48,"endColumn":159},{"ruleId":"522","severity":1,"message":"523","line":55,"column":57,"nodeType":"524","messageId":"525","endLine":55,"endColumn":59},{"ruleId":"522","severity":1,"message":"523","line":71,"column":57,"nodeType":"524","messageId":"525","endLine":71,"endColumn":59},{"ruleId":"526","severity":1,"message":"527","line":124,"column":25,"nodeType":"521","endLine":124,"endColumn":131},{"ruleId":"495","severity":1,"message":"528","line":2,"column":8,"nodeType":"497","messageId":"498","endLine":2,"endColumn":12},{"ruleId":"495","severity":1,"message":"529","line":3,"column":8,"nodeType":"497","messageId":"498","endLine":3,"endColumn":13},{"ruleId":"495","severity":1,"message":"530","line":4,"column":8,"nodeType":"497","messageId":"498","endLine":4,"endColumn":17},{"ruleId":"495","severity":1,"message":"531","line":5,"column":8,"nodeType":"497","messageId":"498","endLine":5,"endColumn":22},{"ruleId":"495","severity":1,"message":"532","line":7,"column":10,"nodeType":"497","messageId":"498","endLine":7,"endColumn":22},{"ruleId":"495","severity":1,"message":"533","line":25,"column":8,"nodeType":"497","messageId":"498","endLine":25,"endColumn":23},{"ruleId":"495","severity":1,"message":"534","line":48,"column":5,"nodeType":"497","messageId":"498","endLine":48,"endColumn":15},{"ruleId":"495","severity":1,"message":"535","line":109,"column":121,"nodeType":"497","messageId":"498","endLine":109,"endColumn":131},{"ruleId":"536","severity":1,"message":"537","line":166,"column":21,"nodeType":"538","messageId":"539","endLine":169,"endColumn":23},{"ruleId":"495","severity":1,"message":"535","line":207,"column":121,"nodeType":"497","messageId":"498","endLine":207,"endColumn":131},{"ruleId":"495","severity":1,"message":"540","line":2,"column":10,"nodeType":"497","messageId":"498","endLine":2,"endColumn":18},{"ruleId":"495","severity":1,"message":"541","line":14,"column":7,"nodeType":"497","messageId":"498","endLine":14,"endColumn":14},{"ruleId":"495","severity":1,"message":"542","line":37,"column":9,"nodeType":"497","messageId":"498","endLine":37,"endColumn":13},{"ruleId":"495","severity":1,"message":"543","line":8,"column":8,"nodeType":"497","messageId":"498","endLine":8,"endColumn":19},{"ruleId":"544","severity":1,"message":"545","line":60,"column":78,"nodeType":"546","messageId":"547","endLine":60,"endColumn":80},{"ruleId":"526","severity":1,"message":"527","line":109,"column":48,"nodeType":"521","endLine":109,"endColumn":60},{"ruleId":"495","severity":1,"message":"548","line":6,"column":10,"nodeType":"497","messageId":"498","endLine":6,"endColumn":20},{"ruleId":"495","severity":1,"message":"549","line":6,"column":30,"nodeType":"497","messageId":"498","endLine":6,"endColumn":35},{"ruleId":"495","severity":1,"message":"550","line":11,"column":8,"nodeType":"497","messageId":"498","endLine":11,"endColumn":17},{"ruleId":"551","severity":1,"message":"552","line":182,"column":17,"nodeType":"497","messageId":"553","endLine":182,"endColumn":18},{"ruleId":"522","severity":1,"message":"523","line":227,"column":44,"nodeType":"524","messageId":"525","endLine":227,"endColumn":46},{"ruleId":"522","severity":1,"message":"523","line":256,"column":140,"nodeType":"524","messageId":"525","endLine":256,"endColumn":142},{"ruleId":"522","severity":1,"message":"523","line":451,"column":69,"nodeType":"524","messageId":"525","endLine":451,"endColumn":71},{"ruleId":"522","severity":1,"message":"554","line":480,"column":81,"nodeType":"524","messageId":"525","endLine":480,"endColumn":83},{"ruleId":"495","severity":1,"message":"555","line":2,"column":43,"nodeType":"497","messageId":"498","endLine":2,"endColumn":52},{"ruleId":"495","severity":1,"message":"556","line":4,"column":10,"nodeType":"497","messageId":"498","endLine":4,"endColumn":23},{"ruleId":"495","severity":1,"message":"557","line":9,"column":8,"nodeType":"497","messageId":"498","endLine":9,"endColumn":20},{"ruleId":"551","severity":1,"message":"552","line":91,"column":17,"nodeType":"497","messageId":"553","endLine":91,"endColumn":18},{"ruleId":"495","severity":1,"message":"558","line":2,"column":28,"nodeType":"497","messageId":"498","endLine":2,"endColumn":35},{"ruleId":"495","severity":1,"message":"559","line":2,"column":54,"nodeType":"497","messageId":"498","endLine":2,"endColumn":57},{"ruleId":"495","severity":1,"message":"560","line":2,"column":59,"nodeType":"497","messageId":"498","endLine":2,"endColumn":70},{"ruleId":"495","severity":1,"message":"548","line":2,"column":80,"nodeType":"497","messageId":"498","endLine":2,"endColumn":90},{"ruleId":"495","severity":1,"message":"556","line":4,"column":10,"nodeType":"497","messageId":"498","endLine":4,"endColumn":23},{"ruleId":"495","severity":1,"message":"561","line":4,"column":25,"nodeType":"497","messageId":"498","endLine":4,"endColumn":31},{"ruleId":"495","severity":1,"message":"562","line":5,"column":8,"nodeType":"497","messageId":"498","endLine":5,"endColumn":13},{"ruleId":"495","severity":1,"message":"563","line":6,"column":10,"nodeType":"497","messageId":"498","endLine":6,"endColumn":18},{"ruleId":"495","severity":1,"message":"564","line":7,"column":8,"nodeType":"497","messageId":"498","endLine":7,"endColumn":14},{"ruleId":"495","severity":1,"message":"565","line":8,"column":8,"nodeType":"497","messageId":"498","endLine":8,"endColumn":16},{"ruleId":"495","severity":1,"message":"566","line":9,"column":8,"nodeType":"497","messageId":"498","endLine":9,"endColumn":19},{"ruleId":"495","severity":1,"message":"515","line":11,"column":8,"nodeType":"497","messageId":"498","endLine":11,"endColumn":13},{"ruleId":"495","severity":1,"message":"567","line":14,"column":8,"nodeType":"497","messageId":"498","endLine":14,"endColumn":28},{"ruleId":"495","severity":1,"message":"568","line":15,"column":8,"nodeType":"497","messageId":"498","endLine":15,"endColumn":22},{"ruleId":"495","severity":1,"message":"569","line":16,"column":8,"nodeType":"497","messageId":"498","endLine":16,"endColumn":18},{"ruleId":"495","severity":1,"message":"570","line":17,"column":8,"nodeType":"497","messageId":"498","endLine":17,"endColumn":22},{"ruleId":"495","severity":1,"message":"571","line":18,"column":10,"nodeType":"497","messageId":"498","endLine":18,"endColumn":26},{"ruleId":"495","severity":1,"message":"572","line":19,"column":8,"nodeType":"497","messageId":"498","endLine":19,"endColumn":18},{"ruleId":"495","severity":1,"message":"573","line":21,"column":5,"nodeType":"497","messageId":"498","endLine":21,"endColumn":17},{"ruleId":"495","severity":1,"message":"574","line":25,"column":5,"nodeType":"497","messageId":"498","endLine":25,"endColumn":12},{"ruleId":"522","severity":1,"message":"523","line":81,"column":127,"nodeType":"524","messageId":"525","endLine":81,"endColumn":129},{"ruleId":"495","severity":1,"message":"555","line":2,"column":43,"nodeType":"497","messageId":"498","endLine":2,"endColumn":52},{"ruleId":"495","severity":1,"message":"561","line":4,"column":25,"nodeType":"497","messageId":"498","endLine":4,"endColumn":31},{"ruleId":"495","severity":1,"message":"515","line":7,"column":8,"nodeType":"497","messageId":"498","endLine":7,"endColumn":13},{"ruleId":"499","severity":1,"message":"500","line":10,"column":5,"nodeType":"501","messageId":"502","endLine":12,"endColumn":6},{"ruleId":"575","severity":1,"message":"576","line":26,"column":9,"nodeType":"577","messageId":"578","endLine":32,"endColumn":10},{"ruleId":"579","severity":1,"message":"580","line":30,"column":13,"nodeType":"581","messageId":"582","endLine":31,"endColumn":67},{"ruleId":"495","severity":1,"message":"504","line":2,"column":80,"nodeType":"497","messageId":"498","endLine":2,"endColumn":85},{"ruleId":"495","severity":1,"message":"561","line":4,"column":25,"nodeType":"497","messageId":"498","endLine":4,"endColumn":31},{"ruleId":"495","severity":1,"message":"583","line":6,"column":20,"nodeType":"497","messageId":"498","endLine":6,"endColumn":33},{"ruleId":"522","severity":1,"message":"523","line":54,"column":45,"nodeType":"524","messageId":"525","endLine":54,"endColumn":47},{"ruleId":"522","severity":1,"message":"523","line":80,"column":37,"nodeType":"524","messageId":"525","endLine":80,"endColumn":39},{"ruleId":"522","severity":1,"message":"523","line":82,"column":66,"nodeType":"524","messageId":"525","endLine":82,"endColumn":68},{"ruleId":"522","severity":1,"message":"523","line":93,"column":27,"nodeType":"524","messageId":"525","endLine":93,"endColumn":29},{"ruleId":"522","severity":1,"message":"523","line":114,"column":45,"nodeType":"524","messageId":"525","endLine":114,"endColumn":47},{"ruleId":"495","severity":1,"message":"584","line":9,"column":19,"nodeType":"497","messageId":"498","endLine":9,"endColumn":27},{"ruleId":"495","severity":1,"message":"585","line":10,"column":12,"nodeType":"497","messageId":"498","endLine":10,"endColumn":16},{"ruleId":"495","severity":1,"message":"586","line":12,"column":11,"nodeType":"497","messageId":"498","endLine":12,"endColumn":17},{"ruleId":"495","severity":1,"message":"558","line":2,"column":28,"nodeType":"497","messageId":"498","endLine":2,"endColumn":35},{"ruleId":"495","severity":1,"message":"559","line":2,"column":54,"nodeType":"497","messageId":"498","endLine":2,"endColumn":57},{"ruleId":"495","severity":1,"message":"560","line":2,"column":59,"nodeType":"497","messageId":"498","endLine":2,"endColumn":70},{"ruleId":"495","severity":1,"message":"548","line":2,"column":80,"nodeType":"497","messageId":"498","endLine":2,"endColumn":90},{"ruleId":"495","severity":1,"message":"556","line":4,"column":10,"nodeType":"497","messageId":"498","endLine":4,"endColumn":23},{"ruleId":"495","severity":1,"message":"561","line":4,"column":25,"nodeType":"497","messageId":"498","endLine":4,"endColumn":31},{"ruleId":"495","severity":1,"message":"562","line":5,"column":8,"nodeType":"497","messageId":"498","endLine":5,"endColumn":13},{"ruleId":"495","severity":1,"message":"563","line":6,"column":10,"nodeType":"497","messageId":"498","endLine":6,"endColumn":18},{"ruleId":"495","severity":1,"message":"550","line":13,"column":8,"nodeType":"497","messageId":"498","endLine":13,"endColumn":17},{"ruleId":"522","severity":1,"message":"523","line":182,"column":127,"nodeType":"524","messageId":"525","endLine":182,"endColumn":129},{"ruleId":"522","severity":1,"message":"523","line":385,"column":72,"nodeType":"524","messageId":"525","endLine":385,"endColumn":74},{"ruleId":"522","severity":1,"message":"554","line":414,"column":85,"nodeType":"524","messageId":"525","endLine":414,"endColumn":87},{"ruleId":"587","severity":1,"message":"588","line":79,"column":7,"nodeType":"589","endLine":79,"endColumn":27,"suggestions":"590"},{"ruleId":"587","severity":1,"message":"588","line":89,"column":7,"nodeType":"589","endLine":89,"endColumn":26,"suggestions":"591"},{"ruleId":"587","severity":1,"message":"588","line":99,"column":7,"nodeType":"589","endLine":99,"endColumn":28,"suggestions":"592"},{"ruleId":"587","severity":1,"message":"588","line":129,"column":7,"nodeType":"589","endLine":129,"endColumn":78,"suggestions":"593"},{"ruleId":"522","severity":1,"message":"523","line":82,"column":49,"nodeType":"524","messageId":"525","endLine":82,"endColumn":51},{"ruleId":"519","severity":1,"message":"520","line":83,"column":39,"nodeType":"521","endLine":83,"endColumn":122},{"ruleId":"495","severity":1,"message":"594","line":220,"column":15,"nodeType":"497","messageId":"498","endLine":220,"endColumn":20},{"ruleId":"551","severity":1,"message":"552","line":240,"column":17,"nodeType":"497","messageId":"553","endLine":240,"endColumn":18},{"ruleId":"551","severity":1,"message":"552","line":248,"column":17,"nodeType":"497","messageId":"553","endLine":248,"endColumn":18},{"ruleId":"522","severity":1,"message":"523","line":258,"column":51,"nodeType":"524","messageId":"525","endLine":258,"endColumn":53},{"ruleId":"522","severity":1,"message":"523","line":307,"column":44,"nodeType":"524","messageId":"525","endLine":307,"endColumn":46},{"ruleId":"495","severity":1,"message":"558","line":2,"column":28,"nodeType":"497","messageId":"498","endLine":2,"endColumn":35},{"ruleId":"495","severity":1,"message":"559","line":2,"column":54,"nodeType":"497","messageId":"498","endLine":2,"endColumn":57},{"ruleId":"495","severity":1,"message":"560","line":2,"column":59,"nodeType":"497","messageId":"498","endLine":2,"endColumn":70},{"ruleId":"495","severity":1,"message":"548","line":2,"column":80,"nodeType":"497","messageId":"498","endLine":2,"endColumn":90},{"ruleId":"495","severity":1,"message":"556","line":4,"column":10,"nodeType":"497","messageId":"498","endLine":4,"endColumn":23},{"ruleId":"495","severity":1,"message":"561","line":4,"column":25,"nodeType":"497","messageId":"498","endLine":4,"endColumn":31},{"ruleId":"495","severity":1,"message":"562","line":5,"column":8,"nodeType":"497","messageId":"498","endLine":5,"endColumn":13},{"ruleId":"495","severity":1,"message":"563","line":6,"column":10,"nodeType":"497","messageId":"498","endLine":6,"endColumn":18},{"ruleId":"495","severity":1,"message":"564","line":7,"column":8,"nodeType":"497","messageId":"498","endLine":7,"endColumn":14},{"ruleId":"495","severity":1,"message":"565","line":8,"column":8,"nodeType":"497","messageId":"498","endLine":8,"endColumn":16},{"ruleId":"495","severity":1,"message":"566","line":9,"column":8,"nodeType":"497","messageId":"498","endLine":9,"endColumn":19},{"ruleId":"495","severity":1,"message":"515","line":11,"column":8,"nodeType":"497","messageId":"498","endLine":11,"endColumn":13},{"ruleId":"495","severity":1,"message":"567","line":14,"column":8,"nodeType":"497","messageId":"498","endLine":14,"endColumn":28},{"ruleId":"495","severity":1,"message":"568","line":15,"column":8,"nodeType":"497","messageId":"498","endLine":15,"endColumn":22},{"ruleId":"495","severity":1,"message":"569","line":16,"column":8,"nodeType":"497","messageId":"498","endLine":16,"endColumn":18},{"ruleId":"495","severity":1,"message":"570","line":17,"column":8,"nodeType":"497","messageId":"498","endLine":17,"endColumn":22},{"ruleId":"495","severity":1,"message":"571","line":18,"column":10,"nodeType":"497","messageId":"498","endLine":18,"endColumn":26},{"ruleId":"495","severity":1,"message":"572","line":19,"column":8,"nodeType":"497","messageId":"498","endLine":19,"endColumn":18},{"ruleId":"495","severity":1,"message":"573","line":21,"column":5,"nodeType":"497","messageId":"498","endLine":21,"endColumn":17},{"ruleId":"495","severity":1,"message":"574","line":25,"column":5,"nodeType":"497","messageId":"498","endLine":25,"endColumn":12},{"ruleId":"522","severity":1,"message":"523","line":81,"column":127,"nodeType":"524","messageId":"525","endLine":81,"endColumn":129},{"ruleId":"495","severity":1,"message":"558","line":2,"column":28,"nodeType":"497","messageId":"498","endLine":2,"endColumn":35},{"ruleId":"495","severity":1,"message":"559","line":2,"column":54,"nodeType":"497","messageId":"498","endLine":2,"endColumn":57},{"ruleId":"495","severity":1,"message":"560","line":2,"column":59,"nodeType":"497","messageId":"498","endLine":2,"endColumn":70},{"ruleId":"495","severity":1,"message":"548","line":2,"column":80,"nodeType":"497","messageId":"498","endLine":2,"endColumn":90},{"ruleId":"495","severity":1,"message":"556","line":4,"column":10,"nodeType":"497","messageId":"498","endLine":4,"endColumn":23},{"ruleId":"495","severity":1,"message":"561","line":4,"column":25,"nodeType":"497","messageId":"498","endLine":4,"endColumn":31},{"ruleId":"495","severity":1,"message":"562","line":5,"column":8,"nodeType":"497","messageId":"498","endLine":5,"endColumn":13},{"ruleId":"495","severity":1,"message":"563","line":6,"column":10,"nodeType":"497","messageId":"498","endLine":6,"endColumn":18},{"ruleId":"495","severity":1,"message":"564","line":7,"column":8,"nodeType":"497","messageId":"498","endLine":7,"endColumn":14},{"ruleId":"495","severity":1,"message":"565","line":8,"column":8,"nodeType":"497","messageId":"498","endLine":8,"endColumn":16},{"ruleId":"495","severity":1,"message":"566","line":9,"column":8,"nodeType":"497","messageId":"498","endLine":9,"endColumn":19},{"ruleId":"495","severity":1,"message":"515","line":11,"column":8,"nodeType":"497","messageId":"498","endLine":11,"endColumn":13},{"ruleId":"495","severity":1,"message":"567","line":14,"column":8,"nodeType":"497","messageId":"498","endLine":14,"endColumn":28},{"ruleId":"495","severity":1,"message":"568","line":15,"column":8,"nodeType":"497","messageId":"498","endLine":15,"endColumn":22},{"ruleId":"495","severity":1,"message":"569","line":16,"column":8,"nodeType":"497","messageId":"498","endLine":16,"endColumn":18},{"ruleId":"495","severity":1,"message":"570","line":17,"column":8,"nodeType":"497","messageId":"498","endLine":17,"endColumn":22},{"ruleId":"495","severity":1,"message":"571","line":18,"column":10,"nodeType":"497","messageId":"498","endLine":18,"endColumn":26},{"ruleId":"495","severity":1,"message":"572","line":19,"column":8,"nodeType":"497","messageId":"498","endLine":19,"endColumn":18},{"ruleId":"495","severity":1,"message":"573","line":21,"column":5,"nodeType":"497","messageId":"498","endLine":21,"endColumn":17},{"ruleId":"495","severity":1,"message":"574","line":25,"column":5,"nodeType":"497","messageId":"498","endLine":25,"endColumn":12},{"ruleId":"522","severity":1,"message":"523","line":81,"column":127,"nodeType":"524","messageId":"525","endLine":81,"endColumn":129},{"ruleId":"495","severity":1,"message":"595","line":3,"column":10,"nodeType":"497","messageId":"498","endLine":3,"endColumn":24},{"ruleId":"495","severity":1,"message":"559","line":4,"column":10,"nodeType":"497","messageId":"498","endLine":4,"endColumn":13},{"ruleId":"495","severity":1,"message":"596","line":2,"column":10,"nodeType":"497","messageId":"498","endLine":2,"endColumn":16},{"ruleId":"495","severity":1,"message":"597","line":2,"column":18,"nodeType":"497","messageId":"498","endLine":2,"endColumn":26},{"ruleId":"495","severity":1,"message":"598","line":4,"column":18,"nodeType":"497","messageId":"498","endLine":4,"endColumn":28},"no-native-reassign",["599"],"no-negated-in-lhs",["600"],"no-unused-vars","'FiChevronRight' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'NavLink' is defined but never used.","'Alert' is defined but never used.","'FiXSquare' is defined but never used.","'emailjs' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["601","602"],["603","604"],["605","606"],["607","608"],"'axios' is defined but never used.",["609","610"],["611","612"],"'statusConfirmPassword' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Page' is defined but never used.","'Label' is defined but never used.","'Scrollbar' is defined but never used.","'SearchNotFound' is defined but never used.","'sentenceCase' is defined but never used.","'EmployeeToolbar' is defined but never used.","'filterName' is assigned a value but never used.","'isVerified' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'DataGrid' is defined but never used.","'columns' is assigned a value but never used.","'rows' is assigned a value but never used.","'SplitButton' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'InputLabel' is defined but never used.","'Modal' is defined but never used.","'GoodImage' is defined but never used.","no-redeclare","'i' is already defined.","redeclared","Expected '!==' and instead saw '!='.","'TextField' is defined but never used.","'BiPlusMedical' is defined but never used.","'AddTypeModal' is defined but never used.","'Divider' is defined but never used.","'Box' is defined but never used.","'CardContent' is defined but never used.","'BiEdit' is defined but never used.","'Stack' is defined but never used.","'GiCancel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'FormControl' is defined but never used.","'LocalizationProvider' is defined but never used.","'AdapterDateFns' is defined but never used.","'DatePicker' is defined but never used.","'DateTimePicker' is defined but never used.","'AiFillPlusCircle' is defined but never used.","'CancelIcon' is defined but never used.","'productTypes' is assigned a value but never used.","'typeSet' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'GiVampireCape' is defined but never used.","'setValue' is assigned a value but never used.","'date' is assigned a value but never used.","'value1' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useCallback has a missing dependency: 'inputProps'. Either include it or remove the dependency array.","ArrayExpression",["613"],["614"],["615"],["616"],"'data1' is assigned a value but never used.","'visuallyHidden' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'RouterLink' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"617","fix":"618","desc":"619"},{"messageId":"620","fix":"621","desc":"622"},{"messageId":"617","fix":"623","desc":"619"},{"messageId":"620","fix":"624","desc":"622"},{"messageId":"617","fix":"625","desc":"619"},{"messageId":"620","fix":"626","desc":"622"},{"messageId":"617","fix":"627","desc":"619"},{"messageId":"620","fix":"628","desc":"622"},{"messageId":"617","fix":"629","desc":"619"},{"messageId":"620","fix":"630","desc":"622"},{"messageId":"617","fix":"631","desc":"619"},{"messageId":"620","fix":"632","desc":"622"},{"desc":"633","fix":"634"},{"desc":"633","fix":"635"},{"desc":"633","fix":"636"},{"desc":"637","fix":"638"},"removeEscape",{"range":"639","text":"640"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"641","text":"642"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"643","text":"640"},{"range":"644","text":"642"},{"range":"645","text":"640"},{"range":"646","text":"642"},{"range":"647","text":"640"},{"range":"648","text":"642"},{"range":"649","text":"640"},{"range":"650","text":"642"},{"range":"651","text":"640"},{"range":"652","text":"642"},"Update the dependencies array to be: [inputProps]",{"range":"653","text":"654"},{"range":"655","text":"654"},{"range":"656","text":"654"},"Update the dependencies array to be: [cancelOnEscape, inputProps, handleRequestSearch, handleCancel]",{"range":"657","text":"658"},[3748,3749],"",[3748,3748],"\\",[3764,3765],[3764,3764],[4066,4067],[4066,4066],[4082,4083],[4082,4082],[3284,3285],[3284,3284],[3300,3301],[3300,3300],[2067,2087],"[inputProps]",[2288,2307],[2525,2546],[3292,3363],"[cancelOnEscape, inputProps, handleRequestSearch, handleCancel]"]