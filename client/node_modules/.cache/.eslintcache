[{"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\index.js":"1","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\App.js":"2","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Store.js":"3","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DirectionURL.js":"4","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\LoginStatusReducer.js":"5","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\DistrictReducer.js":"6","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ProvinceReducer.js":"7","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeStatusReducer.js":"8","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ObjectEditShiftReducer.js":"9","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUserReducer.js":"10","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListShiftReducer.js":"11","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ConfirmModalReducer.js":"12","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RoleReducer.js":"13","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeProductValueReducer.js":"14","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\AlertReducer.js":"15","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddShiftReducer.js":"16","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDeleteConfirmReducer.js":"17","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusConfirmReducer.js":"18","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusModalConfirmPassword.js":"19","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditShiftReducer.js":"20","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditTypeReducer.js":"21","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddTypeReducer.js":"22","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddEmployeeReducer.js":"23","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusIsAddTypeReducer.js":"24","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateEmployeeReducer.js":"25","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusYesConfirmReducer.js":"26","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusPayMoneyStatus.js":"27","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDarkModeReducer.js":"28","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListProductReducer.js":"29","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\chooseTypeProduct.js":"30","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\typeProductReducer.js":"31","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUpdateProduct.js":"32","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateGoodReducer.js":"33","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Login.js":"34","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\LoginWithEmployee.js":"35","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Body.js":"36","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Register.js":"37","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\ForgotPassword.js":"38","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\ModalConfirmPassword.js":"39","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DashboardURL.js":"40","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Partials\\SideNavBar.js":"41","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\ReiceiptManager.js":"42","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeeManager.js":"43","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\DashBoard.js":"44","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Profile.js":"45","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodManager.js":"46","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\SellProduct.js":"47","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodImport.js":"48","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\PayMoneyModal.js":"49","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\ConfirmModal.js":"50","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\EditTypeModal.js":"51","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\UpdateGoodModal.js":"52","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\AddTypeModal.js":"53","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ComponentToPrint.js":"54","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Tabs.js":"55","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\SearchBar.js":"56","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ModalAdd.js":"57","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileSetting.js":"58","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodTable.js":"59","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ListShift.js":"60","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ChangePassword.js":"61","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Regulation.js":"62","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileDetail.js":"63","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileHeader.js":"64","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButton.js":"65","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\Statistic.js":"66","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\Calendar.js":"67","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddEmployeeModal.js":"68","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeTableHeader.js":"69","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\fakeData.js":"70","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateEmployeeModal.js":"71","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeToolbar.js":"72","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeMoreMenu.js":"73","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\SearchNotFound.js":"74","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Scrollbar.js":"75","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Label.js":"76","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Page.js":"77","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\DarkMode.js":"78","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\TableRow.js":"79","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\BaseOptionChart.js":"80","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\ShoppingBagsReducer.js":"81","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ShoppingBags.js":"82","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Print.js":"83"},{"size":309,"mtime":1634653035214,"results":"84","hashOfConfig":"85"},{"size":2843,"mtime":1635959960980,"results":"86","hashOfConfig":"85"},{"size":3295,"mtime":1635595736265,"results":"87","hashOfConfig":"85"},{"size":2219,"mtime":1634653035202,"results":"88","hashOfConfig":"85"},{"size":295,"mtime":1634653035195,"results":"89","hashOfConfig":"85"},{"size":376,"mtime":1634661219450,"results":"90","hashOfConfig":"85"},{"size":384,"mtime":1634653035196,"results":"91","hashOfConfig":"85"},{"size":343,"mtime":1634653035200,"results":"92","hashOfConfig":"85"},{"size":340,"mtime":1634653035196,"results":"93","hashOfConfig":"85"},{"size":2176,"mtime":1635316557324,"results":"94","hashOfConfig":"85"},{"size":1666,"mtime":1635820567487,"results":"95","hashOfConfig":"85"},{"size":482,"mtime":1634653035193,"results":"96","hashOfConfig":"85"},{"size":316,"mtime":1634653035196,"results":"97","hashOfConfig":"85"},{"size":668,"mtime":1635260224145,"results":"98","hashOfConfig":"85"},{"size":670,"mtime":1635349470393,"results":"99","hashOfConfig":"85"},{"size":303,"mtime":1634653035196,"results":"100","hashOfConfig":"85"},{"size":390,"mtime":1634653035198,"results":"101","hashOfConfig":"85"},{"size":303,"mtime":1634653035197,"results":"102","hashOfConfig":"85"},{"size":370,"mtime":1634653035199,"results":"103","hashOfConfig":"85"},{"size":312,"mtime":1634653035198,"results":"104","hashOfConfig":"85"},{"size":309,"mtime":1634653035198,"results":"105","hashOfConfig":"85"},{"size":304,"mtime":1634653035197,"results":"106","hashOfConfig":"85"},{"size":324,"mtime":1634653035196,"results":"107","hashOfConfig":"85"},{"size":372,"mtime":1634653035198,"results":"108","hashOfConfig":"85"},{"size":339,"mtime":1634653035199,"results":"109","hashOfConfig":"85"},{"size":350,"mtime":1634653035200,"results":"110","hashOfConfig":"85"},{"size":324,"mtime":1634653035199,"results":"111","hashOfConfig":"85"},{"size":302,"mtime":1634653035197,"results":"112","hashOfConfig":"85"},{"size":714,"mtime":1635923595585,"results":"113","hashOfConfig":"85"},{"size":360,"mtime":1635428539250,"results":"114","hashOfConfig":"85"},{"size":604,"mtime":1635428539250,"results":"115","hashOfConfig":"85"},{"size":1109,"mtime":1635428539243,"results":"116","hashOfConfig":"85"},{"size":323,"mtime":1635428539248,"results":"117","hashOfConfig":"85"},{"size":12493,"mtime":1635355233155,"results":"118","hashOfConfig":"85"},{"size":8716,"mtime":1635076012732,"results":"119","hashOfConfig":"85"},{"size":1773,"mtime":1635585225945,"results":"120","hashOfConfig":"85"},{"size":15628,"mtime":1635355266268,"results":"121","hashOfConfig":"85"},{"size":12948,"mtime":1635355253856,"results":"122","hashOfConfig":"85"},{"size":1956,"mtime":1634653035172,"results":"123","hashOfConfig":"85"},{"size":1350,"mtime":1635428539251,"results":"124","hashOfConfig":"85"},{"size":8991,"mtime":1635428539239,"results":"125","hashOfConfig":"85"},{"size":246,"mtime":1634653035177,"results":"126","hashOfConfig":"85"},{"size":15121,"mtime":1634653035157,"results":"127","hashOfConfig":"85"},{"size":5591,"mtime":1635354580147,"results":"128","hashOfConfig":"85"},{"size":2835,"mtime":1635354596571,"results":"129","hashOfConfig":"85"},{"size":5969,"mtime":1635428539228,"results":"130","hashOfConfig":"85"},{"size":13515,"mtime":1635959823485,"results":"131","hashOfConfig":"85"},{"size":25921,"mtime":1635428539232,"results":"132","hashOfConfig":"85"},{"size":13994,"mtime":1634693084642,"results":"133","hashOfConfig":"85"},{"size":3507,"mtime":1634653035163,"results":"134","hashOfConfig":"85"},{"size":6381,"mtime":1635428539231,"results":"135","hashOfConfig":"85"},{"size":25722,"mtime":1635428539237,"results":"136","hashOfConfig":"85"},{"size":8496,"mtime":1635428539230,"results":"137","hashOfConfig":"85"},{"size":6750,"mtime":1635954558980,"results":"138","hashOfConfig":"85"},{"size":1754,"mtime":1635428539241,"results":"139","hashOfConfig":"85"},{"size":5541,"mtime":1634653035165,"results":"140","hashOfConfig":"85"},{"size":14621,"mtime":1635870469964,"results":"141","hashOfConfig":"85"},{"size":898,"mtime":1635617246610,"results":"142","hashOfConfig":"85"},{"size":7817,"mtime":1635739059906,"results":"143","hashOfConfig":"85"},{"size":7459,"mtime":1635355305833,"results":"144","hashOfConfig":"85"},{"size":7916,"mtime":1635822461674,"results":"145","hashOfConfig":"85"},{"size":7670,"mtime":1635750222303,"results":"146","hashOfConfig":"85"},{"size":16191,"mtime":1635857248758,"results":"147","hashOfConfig":"85"},{"size":4541,"mtime":1635355632563,"results":"148","hashOfConfig":"85"},{"size":2783,"mtime":1634653035157,"results":"149","hashOfConfig":"85"},{"size":1849,"mtime":1634653035157,"results":"150","hashOfConfig":"85"},{"size":1607,"mtime":1634653035155,"results":"151","hashOfConfig":"85"},{"size":14072,"mtime":1634693071555,"results":"152","hashOfConfig":"85"},{"size":2024,"mtime":1634653035159,"results":"153","hashOfConfig":"85"},{"size":953,"mtime":1634653035162,"results":"154","hashOfConfig":"85"},{"size":14258,"mtime":1634693020329,"results":"155","hashOfConfig":"85"},{"size":2489,"mtime":1634653035159,"results":"156","hashOfConfig":"85"},{"size":3377,"mtime":1634653035159,"results":"157","hashOfConfig":"85"},{"size":0,"mtime":1634653035161,"results":"158","hashOfConfig":"85"},{"size":1541,"mtime":1634653035161,"results":"159","hashOfConfig":"85"},{"size":2458,"mtime":1634653035160,"results":"160","hashOfConfig":"85"},{"size":482,"mtime":1634653035160,"results":"161","hashOfConfig":"85"},{"size":3134,"mtime":1634653035174,"results":"162","hashOfConfig":"85"},{"size":7571,"mtime":1635428539235,"results":"163","hashOfConfig":"85"},{"size":5649,"mtime":1634653035155,"results":"164","hashOfConfig":"85"},{"size":1166,"mtime":1635926615527,"results":"165","hashOfConfig":"85"},{"size":3760,"mtime":1635957825883,"results":"166","hashOfConfig":"85"},{"size":4310,"mtime":1635955034987,"results":"167","hashOfConfig":"85"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},"1ieljoc",{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"177","messages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"197","messages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"199","messages":"200","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"201","messages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"227","messages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"229","messages":"230","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"235","messages":"236","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"237","usedDeprecatedRules":"170"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"170"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"170"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"170"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"170"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"170"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"170"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"262","usedDeprecatedRules":"170"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265","usedDeprecatedRules":"170"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"170"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"170"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"170"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"170"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"282","usedDeprecatedRules":"170"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285","usedDeprecatedRules":"170"},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288","usedDeprecatedRules":"170"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"170"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"170"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"170"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300","usedDeprecatedRules":"170"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"170"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"170"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"170"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328","usedDeprecatedRules":"170"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"170"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"170"},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"170"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"170"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"170"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"170"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"170"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"170"},"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\index.js",[],["366","367"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\App.js",["368","369"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Store.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DirectionURL.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\LoginStatusReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\DistrictReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ProvinceReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeStatusReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ObjectEditShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUserReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ConfirmModalReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RoleReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeProductValueReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\AlertReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDeleteConfirmReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusConfirmReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusModalConfirmPassword.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditTypeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddTypeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddEmployeeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusIsAddTypeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateEmployeeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusYesConfirmReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusPayMoneyStatus.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDarkModeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListProductReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\chooseTypeProduct.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\typeProductReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUpdateProduct.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateGoodReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Login.js",["370","371"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../css/Login.css'\r\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\r\nimport { FiChevronRight } from \"react-icons/fi\";\r\nimport { BiUser } from \"react-icons/bi\";\r\nimport { Avatar } from '@mui/material'\r\nimport { IconContext } from \"react-icons\";\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport axios from 'axios';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            appId: \"543752153590340\",\r\n            clientId: \"826925109796-mi95l41fi57bdlolpvnfdg5bpt9oc81h.apps.googleusercontent.com\",\r\n        }\r\n    }\r\n\r\n    // Login with google\r\n    onLoginSuccess = async (res) => {\r\n        this.props.setRole();\r\n        await axios.post(`http://localhost:5000/sign-in-with-google`, res.profileObj)\r\n            .then(res => {\r\n                console.log(\"thành công\");\r\n                console.log(res.data);\r\n                switch (res.data.status) {\r\n                    case 1:\r\n                        localStorage.setItem('token', res.data.token);\r\n                        this.props.updateProfile(res.data.data);\r\n                        this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n                        this.props.updateShiftTypes(res.data.data.shiftTypes);\r\n                        this.props.changeLoginStatus();\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(res.data.message, \"success\");\r\n                        break;\r\n                    case -1:\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(res.data.message, \"error\");\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Error, server don't active\", \"error\");\r\n            })\r\n    }\r\n\r\n    // Check để thay đổi trạng thái đã login hay chưa\r\n    isLoginCheck = async (e) => {\r\n        this.props.setRole();\r\n        if (this.blurEmail() && this.blurPassword()) {\r\n            await axios.post(`http://localhost:5000/sign-in-with-gmail-password`, {\r\n                email: document.querySelector('#email').value,\r\n                password: document.getElementById('password').value,\r\n            })\r\n                .then(res => {\r\n                    console.log(res.data);\r\n                    switch (res.data.status) {\r\n                        case 1:\r\n                            localStorage.setItem('token', res.data.token);\r\n                            this.props.updateProfile(res.data.data);\r\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n                            this.props.updateShiftTypes(res.data.data.shiftTypes);\r\n                            this.props.changeLoginStatus();\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"success\");\r\n                            break;\r\n                        case -1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"error\");\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Error system\", \"error\");\r\n                })\r\n        }\r\n    }\r\n\r\n    // Handle user : blur , change in input\r\n    blurEmail = () => {\r\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        const event = document.querySelector('#email');\r\n        let elementValue = event.value;\r\n        const formGroup = event.parentElement.parentElement;\r\n        // check validate\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else if (!regex.test(elementValue)) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        let elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Login'\r\n    }\r\n\r\n    render() {\r\n        const enterPress = this.isLoginCheck;\r\n        document.onkeydown = function (e) {\r\n            switch (e.which) {\r\n                case 13:\r\n                    enterPress(e);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-login\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <BiUser></BiUser>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Login</div>\r\n                                <NavLink to=\"/register\" className=\"auth-form__switch-btn\">Register <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight></NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"auth-form__support\">\r\n                                    <span className=\"auth-form__support-forget\">\r\n                                        <NavLink to=\"/forgot\" className=\"auth-form__switch-btn\">Forgot password</NavLink>\r\n                                    </span>\r\n                                    <span className=\"auth-form__help-separate\" />\r\n                                    <span className=\"auth-form__support-need-support\">Need help?</span>\r\n                                </div>\r\n                                <div className=\"auth-form__support\">\r\n                                    <GoogleLogin\r\n                                        className=\"auth-form__support-google\"\r\n                                        clientId={this.state.clientId}\r\n                                        buttonText=\"Login with Google\"\r\n                                        onSuccess={this.onLoginSuccess}\r\n                                        onFailure={this.onFailureSuccess}\r\n                                        cookiePolicy={'single_host_origin'}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div to=\"/home\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <NavLink to=\"/employee\" id=\"navlink\" className=\"auth-form__btn-log-in auth-form__switch-btn auth-form-employee\">\r\n                                        Employee\r\n                                        <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight>\r\n                                    </NavLink>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        updateProfile: (data) => {\r\n            dispatch({\r\n                type: \"UPDATA_DATA_USER\",\r\n                data: data,\r\n            })\r\n        },\r\n        setRole: () => {\r\n            dispatch({\r\n                type: \"ADMIN_ROLE\"\r\n            });\r\n            localStorage.setItem('role', 'admin');\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar,\r\n            })\r\n        },\r\n        updateShiftTypes: (shiftTypes) => {\r\n            dispatch({\r\n                type: \"UPDATE_DATA_SHIFT_USER\",\r\n                shiftTypes: shiftTypes,\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\LoginWithEmployee.js",["372"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../css/Login.css'\r\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\r\nimport {  FiXSquare,FiChevronLeft } from \"react-icons/fi\";\r\nimport {FaUserTie} from 'react-icons/fa'\r\nimport { Avatar } from '@mui/material'\r\nimport { IconContext } from \"react-icons\";\r\nimport axios from 'axios';\r\nimport Alert from '@mui/material/Alert';\r\n\r\nclass LoginWithEmployee extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            statusFailed: false,\r\n            statusSucces: false,\r\n        }\r\n    }\r\n\r\n    message = \"Login success\";\r\n\r\n    // Out Alert\r\n    OutAlert = () => {\r\n        this.setState({\r\n            statusFailed: false,\r\n            statusSucces: false,\r\n        })\r\n    }\r\n\r\n    // Check để thay đổi trạng thái đã login hay chưa\r\n    isLoginCheck = (e) => {\r\n        // this.OutAlert();\r\n        // if (this.blurEmail() && this.blurPassword()) {\r\n        //     axios.post(`http://localhost:5000/sign-in-employee`, {\r\n        //         username: document.querySelector('#username').value,\r\n        //         password: document.getElementById('password').value,\r\n        //     })\r\n        //         .then(res => {\r\n        //             switch (res.data.status) {\r\n        //                 case 1:\r\n        //                     this.message = res.data.message;\r\n        //                     this.setState({\r\n        //                         statusSucces: true,\r\n        //                     })\r\n        //                     localStorage.setItem('token', res.data.token);\r\n        //                     this.props.changeLoginStatus();\r\n        //                     break;\r\n        //                 case -1:\r\n        //                     this.message = res.data.message;\r\n        //                     this.setState({\r\n        //                         statusFailed: true,\r\n        //                     })\r\n        //                     break;\r\n        //                 default:\r\n        //                     break;\r\n        //             }\r\n        //         })\r\n        //         .catch(err => {\r\n        //             this.message = \"Enter again\";\r\n        //             this.setState({\r\n        //                 statusFailed: true,\r\n        //             })\r\n        //         })\r\n        // }\r\n        this.setState({\r\n            statusSucces: true,\r\n        })\r\n        this.props.setRole()\r\n    }\r\n\r\n\r\n    // Handle user : blur , change in input\r\n    blurEmail = () => {\r\n        const event = document.querySelector('#username');\r\n        let elementValue = event.value;\r\n        const formGroup = event.parentElement.parentElement;\r\n        // check validate\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        let elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Employee'\r\n    }\r\n\r\n    render() {\r\n        const enterPress = this.isLoginCheck;\r\n        document.onkeydown = function (e) {\r\n            switch (e.which) {\r\n                case 13:\r\n                    enterPress(e);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-login\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <FaUserTie></FaUserTie>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Employee</div>\r\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Login</NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">Username</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"username\"  id=\"username\" placeholder=\"VD: phuoc123\" type=\"text\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\"  id=\"password\" placeholder=\"Emter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div to=\"/sellproduct\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {this.state.statusSucces ? <Alert onClick={() => this.OutAlert()} className=\"message-error\" severity=\"success\">{this.message} — check it out! <FiXSquare></FiXSquare></Alert> : null}\r\n                {this.state.statusFailed ? <Alert onClick={() => this.OutAlert()} className=\"message-error\" severity=\"error\">{this.message} — check it out! <FiXSquare></FiXSquare></Alert> : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        setRole: () => {\r\n            dispatch({\r\n                type: \"EMPLOYEE_ROLE\",\r\n            });\r\n            localStorage.setItem('role', 'employee');\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps , mapDispatchToProps)(LoginWithEmployee);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Body.js",["373","374","375","376"],"import React, { Component } from 'react';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport DashboardURL from '../Router/DashboardURL';\r\nimport { connect } from 'react-redux';\r\nimport SideNavBar from './Partials/SideNavBar';\r\nimport Alert from '@mui/material/Alert';\r\nimport { FiChevronRight, FiXSquare } from \"react-icons/fi\";\r\nimport '../css/Body.css'\r\nimport ModalConfirmPassword from './ModalConfirmPassword';\r\n\r\nclass Body extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <SideNavBar />\r\n                <div \r\n                    className=\"body-content\"\r\n                    style={{\r\n                        width: 'calc(100% - 224px)',\r\n                        position: 'fixed', top: 0, right: 0, backgroundColor: this.props.statusDarkmode ? '#ebebeb' : 'rgba(20,20,20,0.4)', borderLeft: '2px solid #99999975',\r\n                    }}\r\n                >\r\n                    <DashboardURL></DashboardURL>\r\n                </div>\r\n                {this.props.statusConfirmPassword ?\r\n                    <div className=\"modal-comfirm-password\">\r\n                        <ModalConfirmPassword></ModalConfirmPassword>\r\n                    </div> : null\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n        statusDarkmode: state.statusDarkmode,\r\n        statusConfirmPassword: state.statusConfirmPassword,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Body);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Register.js",["377","378","379"],"import React, { Component } from 'react';\r\nimport '../../css/Login.css'\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport Avatar from '@mui/material/Avatar'\r\nimport { IconContext } from \"react-icons\";\r\nimport { FiChevronLeft, FiUserPlus } from \"react-icons/fi\";\r\nimport { BsFillEnvelopeFill, BsLockFill, BsCodeSlash } from \"react-icons/bs\";\r\nimport { FaPhoneSquare } from \"react-icons/fa\";\r\nimport axios from 'axios';\r\nimport emailjs from 'emailjs-com';\r\nvar bcrypt = require('bcryptjs');\r\n\r\n\r\nclass Register extends Component {\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.state = {\r\n            code: \"\",\r\n            statusSendCode: true,\r\n        }\r\n    }\r\n\r\n\r\n    // Send code tới người dùng\r\n    sendCode = (a = this.makeCode(6)) => {\r\n        this.setState({\r\n            code: \"123456\"\r\n        })\r\n        // this.setState({\r\n        //     code: a,\r\n        // })\r\n        // emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\r\n        // emailjs.send(\"gmail_main\", \"template_plasdgf\", {\r\n        //     To_mail: `${document.getElementById('email').value}`,\r\n        //     code: `${a}`,\r\n        // })\r\n        //     .then((response) => {\r\n        //         console.log('SUCCESS!', response.status, response.text);\r\n        //     }, (err) => {\r\n        //         console.log('FAILED...', err);\r\n        //     });\r\n    }\r\n\r\n    // status SignUp \r\n    SignUp = (e) => {\r\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword() && this.blurTel()) {\r\n            axios.post(`http://localhost:5000/register-with-email`, {\r\n                email: document.getElementById('email').value,\r\n                password: this.hash(document.getElementById('password').value),\r\n                tel: document.getElementById('tel').value,\r\n            })\r\n                .then(res => {\r\n                    console.log(res.data);\r\n                    switch (res.data.status) {\r\n                        case 1:\r\n                            localStorage.setItem('token', res.data.token);\r\n                            this.props.updateProfile(res.data.data);\r\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n                            this.props.changeLoginStatus();\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"success\");\r\n\r\n                            break;\r\n                        case -1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"error\");\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Error system\", \"error\");\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n\r\n    // Tạo mã code cho người dùng xác nhận\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Hashpassword\r\n    hash = (pass) => {\r\n        var hash = bcrypt.hashSync(pass, 12)\r\n        return hash;\r\n    }\r\n\r\n\r\n    // Handle user : blur, change in input\r\n    blurEmail = () => {\r\n        const regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        const e = document.getElementById('email');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            this.setState({\r\n                statusSendCode: true,\r\n            })\r\n            return false;\r\n        } else if (!regex.test(elementValue)) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\r\n            this.setState({\r\n                statusSendCode: true,\r\n            })\r\n            return false\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            this.setState({\r\n                statusSendCode: false,\r\n            })\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurCode = () => {\r\n        const e = document.getElementById('code');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (this.state.code === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\r\n            return false\r\n        } else if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\r\n            return false\r\n        } else if (elementValue !== this.state.code) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\r\n            return false\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurRePassword = () => {\r\n        const e = document.getElementById('re-password')\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else if (document.getElementById('password').value !== elementValue) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true\r\n        }\r\n    }\r\n\r\n    blurTel = () => {\r\n        const e = document.getElementById('tel');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        const regex = /^\\d+$/;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else if (!regex.test(elementValue)) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Phone is not in the correct format\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Register'\r\n    }\r\n\r\n    render() {\r\n        const enterPress = this.SignUp;\r\n        document.onkeydown = function (e) {\r\n            switch (e.which) {\r\n                case 13:\r\n                    enterPress(e);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-register\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <FiUserPlus></FiUserPlus>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Register</div>\r\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Login</NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/register-submit\" method=\"post\" id=\"register-form\">\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\r\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND CODE</button>\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"re-password\" id=\"re-password\" placeholder=\"Emter re-password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <FaPhoneSquare className=\"input-custom-icon\" ></FaPhoneSquare>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onBlur={(e) => this.blurTel(e)} onChange={(e) => this.changeInput(e)} name=\"tel\" rules=\"required\" id=\"tel\" placeholder=\"Ex: 0303030303\" type=\"tel\" />\r\n\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"register-description\">Bằng cách ấn vào nút\r\n                                    <span className=\"register-description__keyword\">“ĐĂNG KÝ”</span>\r\n                                    , tôi đồng ý với\r\n                                    <span className=\"register-description__keyword\">Điều Khoản Sử Dụng</span> và\r\n                                    <div className=\"register-description__keyword\"> Chính Sách Bảo Mật</div>\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div onClick={(e) => this.SignUp(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign Up</div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        updateProfile: (data) => {\r\n            dispatch({\r\n                type: \"UPDATA_DATA_USER\",\r\n                data: data,\r\n            })\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar,\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\ForgotPassword.js",["380","381","382"],"import React, { Component } from 'react';\r\nimport Avatar from '@mui/material/Avatar'\r\nimport { IconContext } from \"react-icons\";\r\nimport { FiSend } from \"react-icons/fi\";\r\nimport { BsFillEnvelopeFill, BsLockFill, BsBoxArrowInLeft, BsCodeSlash } from \"react-icons/bs\";\r\nimport emailjs from 'emailjs-com';\r\nimport axios from 'axios';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nvar bcrypt = require('bcryptjs');\r\n\r\n\r\nclass ForgotPassword extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            code: \"\",\r\n            statusSendCode: true,\r\n        }\r\n    }\r\n\r\n\r\n    // Send code tới người dùng\r\n    sendCode = (a = this.makeCode(6)) => {\r\n        this.setState({\r\n            code: \"123456\"\r\n        })\r\n        // this.setState({\r\n        //     code: a,\r\n        // })\r\n        // emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\r\n        // emailjs.send(\"gmail_main\", \"template_plasdgf\", {\r\n        //     To_mail: `${document.querySelector('#email').value}`,\r\n        //     code: `${a}`,\r\n        // })\r\n        //     .then((response) => {\r\n        //         console.log('SUCCESS!', response.status, response.text);\r\n        //     }, (err) => {\r\n        //         console.log('FAILED...', err);\r\n        //     });\r\n    }\r\n\r\n    // Tạo code để xác nhận\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Hashpassword\r\n    hash = (pass) => {\r\n        var hash = bcrypt.hashSync(pass, 12)\r\n        return hash;\r\n    }\r\n\r\n    //Check tìm lại mật khẩu\r\n    findPassword = (e) => {\r\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword()) {\r\n            const form = document.getElementById('findpass-form');\r\n            axios.post(`http://localhost:5000/find-password`, {\r\n                email: document.querySelector('#email').value,\r\n                password: this.hash(document.getElementById('password').value),\r\n            })\r\n                .then(res => {\r\n                    form.reset();\r\n                    console.log(res.data.status);\r\n                    switch (res.data.status) {\r\n                        case 1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"success\");\r\n                            break;\r\n                        case -1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"error\");\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Error system\", \"error\");\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    // Handle user blue change in input\r\n    blurEmail = () => {\r\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        const event = document.querySelector('#email');\r\n        const elementValue = event.value;\r\n        const formGroup = event.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            this.setState({\r\n                statusSendCode: true,\r\n            })\r\n            return false;\r\n        } else if (!regex.test(elementValue)) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\r\n            this.setState({\r\n                statusSendCode: true,\r\n            })\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            this.setState({\r\n                statusSendCode: false,\r\n            })\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurCode = () => {\r\n        const e = document.getElementById('code');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (this.state.code === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\r\n            return false\r\n        } else if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\r\n            return false\r\n        } else if (elementValue !== this.state.code) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\r\n            return false\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurRePassword = () => {\r\n        const e = document.getElementById('re-password')\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else if (document.getElementById('password').value !== elementValue) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Find password'\r\n    }\r\n\r\n    render() {\r\n        const enterPress = this.findPassword;\r\n        document.onkeydown = function (e) {\r\n            switch (e.which) {\r\n                case 13:\r\n                    enterPress(e);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-findpass\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <FiSend></FiSend>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Find password</div>\r\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"><BsBoxArrowInLeft className=\"arrow-return\"></BsBoxArrowInLeft></NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/findpass-submit?_method=PUT\" method=\"POST\" id=\"findpass-form\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"Ex: abc@gmail.com\" type=\"text\" />\r\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND</button>\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"code\" className=\"form-label\">Code</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\r\n\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">New password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">Re-password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"password\" rules=\"required|min:6\" id=\"re-password\" placeholder=\"Emter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div onClick={(e) => this.findPassword(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Find Password</div>\r\n                                </div>\r\n\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapDispatchToProps)(ForgotPassword);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\ModalConfirmPassword.js",["383"],"import React from 'react';\r\nimport {Card,CardHeader,Divider,CardContent,Grid,TextField,Box,Button} from '@mui/material';\r\nimport {BiPlusMedical} from 'react-icons/bi'\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction ModalConfirmPassword(props) {\r\n\r\n    const statusConfirmPassword = useSelector(state => state.statusConfirmPassword)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleCancel = () => {\r\n        dispatch({\r\n            type:\"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Card className=\"card-confirm-password\" style={{ minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }}>\r\n            <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm password\" />\r\n            <Divider />\r\n            <CardContent>\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={12} xs={12}>\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            label=\"Your password\"\r\n                            required\r\n                            type=\"password\"\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n            <Divider />\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                <Button style={{ backgroundColor: 'yellowgreen' }} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                    Xác nhận\r\n                </Button>\r\n                <Button style={{ backgroundColor: 'red' }} onClick={() => handleCancel()} variant=\"contained\" startIcon={<GiCancel />}>\r\n                    Hủy\r\n                </Button>\r\n            </Box>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default ModalConfirmPassword;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DashboardURL.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Partials\\SideNavBar.js",["384","385","386","387","388"],"import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    AiOutlineDashboard,\r\n    AiFillDashboard,\r\n    AiOutlineContainer,\r\n    AiFillContainer\r\n} from \"react-icons/ai\";\r\nimport { BsInfoCircleFill} from \"react-icons/bs\";\r\nimport { \r\n    IoPeopleOutline,\r\n    IoPeopleSharp,\r\n    IoReceiptOutline,\r\n    IoReceiptSharp,\r\n} from \"react-icons/io5\";\r\nimport { IoIosArrowBack } from \"react-icons/io\";\r\nimport { RiProfileFill, RiProfileLine } from \"react-icons/ri\";\r\nimport { FaSignOutAlt } from \"react-icons/fa\";\r\nimport {GiSellCard} from 'react-icons/gi'\r\nimport Avatar from '../../img/avatar_default.jpg';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport '../../css/SideNavBar.css';\r\n\r\nclass SideNavBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            change: true,\r\n        }\r\n        this.getInitialScreen();\r\n    }\r\n    active= ['active', '', '','','',''];\r\n    \r\n    changeIndex(index) {\r\n        for(var i = 0; i<this.active.length;i++)\r\n        {\r\n            this.active[i]='';\r\n        }\r\n        this.active[index] = 'active';\r\n        this.setState({change: !this.state.change});\r\n    }   \r\n\r\n    getInitialScreen() {\r\n        var link = window.location.href;\r\n        link = link.substring(link.lastIndexOf('/') + 1);\r\n\r\n        for(var i = 0; i<this.active.length;i++)\r\n        {\r\n            this.active[i]='';\r\n        }\r\n\r\n        switch(link)\r\n        {\r\n            case \"profile\":\r\n                this.active[1] = 'active';\r\n                break;\r\n            case \"employeemanager\":\r\n                this.active[2] = 'active';\r\n                break;\r\n            case \"goodmanager\":\r\n                this.active[3] = 'active';\r\n                break;\r\n            case \"receiptmanager\":\r\n                this.active[4] = 'active';\r\n                break;\r\n            case \"sellproduct\":\r\n                this.active[5] = 'active';\r\n                break;\r\n            default :\r\n                this.active[0] = 'active';\r\n                break;\r\n        }\r\n        this.setState({change: !this.state.change});\r\n    }\r\n    render() {\r\n\r\n        const navbarContainer = document.querySelector('.navbar-container');\r\n        console.log(navbarContainer);\r\n        return (\r\n            <div \r\n                class=\"navbar-container\"\r\n                style={{\r\n                    width: 0\r\n                }}\r\n            >\r\n                <div class=\"navibar sidebar\">\r\n                    <div className=\"nav-icon\" >\r\n                        <IoIosArrowBack\r\n                            size={20}\r\n                        />\r\n                    </div>\r\n                    <div class=\"nav-heading\">\r\n                        <div class=\"navbar-heading-container\">\r\n                            <img src={this.props.infoUser.avatar ? this.props.infoUser.avatar: Avatar} style ={{width: 40, height: 40, borderRadius: '100%'}}></img>\r\n                            <span class=\"user-name\">{this.props.infoUser.lastName +\" \" + this.props.infoUser.firstName}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"nav-container\">\r\n                        {   \r\n                            // this.props.role == true ?\r\n                            localStorage.getItem('role')=='admin' ?\r\n                            (<NavLink className={\"nav-item \" + this.active[0]} to=\"/dashboard\"\r\n                                onClick={() => this.changeIndex(0)}                            \r\n                            >\r\n                                <AiOutlineDashboard class=\"nav-item-icon\" />\r\n                                <AiFillDashboard class=\"nav-item-icon icon-activate\" />\r\n                                <span className=\"nav-item-lable\">Dashboard</span>\r\n                            </NavLink>):(null)\r\n                        }\r\n                        \r\n                        <NavLink to=\"/profile\" className={\"nav-item \" + this.active[1]} href=\"#\"\r\n                            onClick={() => this.changeIndex(1)} \r\n                        >\r\n                            <RiProfileLine class=\"nav-item-icon\" />\r\n                            <RiProfileFill class=\"nav-item-icon icon-activate\" />\r\n                            <span className=\"nav-item-lable\">Profile</span>\r\n                        </NavLink>\r\n\r\n                        {   \r\n                            // this.props.role == true ?\r\n                            localStorage.getItem('role')=='admin' ?\r\n                            (   \r\n                                <div>\r\n                                    <NavLink\r\n                                        to=\"/employeemanager\"\r\n                                        className={\"nav-item \" + this.active[2]}\r\n                                        href=\"#\"\r\n                                        onClick={() => this.changeIndex(2)} \r\n                                    >\r\n                                        <IoPeopleOutline class=\"nav-item-icon\" />\r\n                                        <IoPeopleSharp class=\"nav-item-icon icon-activate\" />\r\n                                        <span className=\"nav-item-lable\">Employee Manager</span>\r\n                                    </NavLink>\r\n                                    <NavLink\r\n                                        to=\"/goodmanager\"\r\n                                        className={\"nav-item \" + this.active[3]}\r\n                                        href=\"#\"\r\n                                        onClick={() => this.changeIndex(3)} \r\n                                    >\r\n                                        <AiOutlineContainer className=\"nav-item-icon\" />\r\n                                        <AiFillContainer className=\"nav-item-icon icon-activate\" />\r\n                                        <span className=\"nav-item-lable\">Goods Manager</span>\r\n                                    </NavLink>\r\n                                    <NavLink\r\n                                        to=\"/receiptmanager\"\r\n                                        className={\"nav-item \" + this.active[4]}\r\n                                        href=\"#\"\r\n                                        onClick={() => this.changeIndex(4)} \r\n                                    >\r\n                                        <IoReceiptOutline class=\"nav-item-icon\" />\r\n                                        <IoReceiptSharp class=\"nav-item-icon icon-activate\" />\r\n                                        <span className=\"nav-item-lable\">Receipt Manager</span>\r\n                                    </NavLink>\r\n                                </div>    \r\n                            ):(null)\r\n                        }   \r\n                        \r\n                        <NavLink to=\"/sellproduct\" className={\"nav-item \" + this.active[5]} href='#'\r\n                            onClick={() => this.changeIndex(5)} \r\n                        >\r\n                            <GiSellCard class=\"nav-item-icon\"/>\r\n                            <GiSellCard class=\"nav-item-icon icon-activate\"/>\r\n                            <span className=\"nav-item-lable\">Sell Product</span>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                    <div class=\"nav-footer\">\r\n                        <a\r\n                            to=\"/login\"\r\n                            onClick={() => this.props.changeLoginStatus()}\r\n                            className={\"nav-item \"}\r\n                            style={{ flex: 5 }}\r\n                        >\r\n                            <FaSignOutAlt class=\"nav-item-icon\" />\r\n                            <span className=\"nav-item-lable\">Sign out</span>\r\n                        </a>\r\n                        {/* <a href=\"#\" className={\"nav-item \" + this.active[0]} style={{ flex: 4 }}>\r\n                            <BsInfoCircleFill class=\"nav-item-icon\" /> */}\r\n                        <a href=\"#\" className={\"nav-item \"} onClick={() => this.props.changeConfirmPasswordTest()} style={{flex: 4}}>\r\n                            <BsInfoCircleFill class=\"nav-item-icon\"/>\r\n                            <span className=\"nav-item-lable\">About</span>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n        infoUser: state.infoUser,\r\n        role: state.role,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            })\r\n        },\r\n        changeConfirmPasswordTest: () => {\r\n            dispatch({\r\n                type:\"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SideNavBar);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\ReiceiptManager.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeeManager.js",["389","390","391","392","393","394","395","396","397","398"],"import React, { Component } from 'react';\r\nimport Page from './EmployeePartials/Page';\r\nimport Label from './EmployeePartials/Label';\r\nimport Scrollbar from './EmployeePartials/Scrollbar';\r\nimport SearchNotFound from './EmployeePartials/SearchNotFound';\r\nimport { Icon } from '@iconify/react';\r\nimport { sentenceCase } from 'change-case';\r\nimport {connect} from 'react-redux'\r\nimport plusFill from '@iconify/icons-eva/plus-fill';\r\nimport {\r\n    Card,\r\n    Table,\r\n    Stack,\r\n    Avatar,\r\n    Button,\r\n    Checkbox,\r\n    TableRow,\r\n    TableBody,\r\n    TableCell,\r\n    Container,\r\n    Typography,\r\n    TableContainer,\r\n    TablePagination\r\n} from '@mui/material';\r\nimport EmployeeToolbar from './EmployeePartials/EmployeeToolbar';\r\nimport EmployeeMoreMenu from './EmployeePartials/EmployeeMoreMenu';\r\nimport EmployeeTableHeader from './EmployeePartials/EmployeeTableHeader';\r\nimport USERLIST from './EmployeePartials/fakeData'\r\nimport AddEmployeeModal from './EmployeePartials/AddEmployeeModal';\r\nimport UpdateEmployeeModal from './EmployeePartials/UpdateEmployeeModal';\r\nimport PayMoneyModal from './EmployeePartials/PayMoneyModal';\r\n\r\n\r\nconst TABLE_HEAD = [\r\n    { id: 'ID', label: 'ID', alignRight: false },\r\n    { id: 'firstName', label: 'Name', alignRight: false },\r\n    { id: 'lastName', label: 'Last Name', alignRight: false },\r\n    { id: 'old', label: 'Old', alignRight: false },\r\n    { id: 'gender', label: 'Gender', alignRight: false },\r\n    { id: 'province', label: 'Province', alignRight: false },\r\n    { id: 'phoneNumber', label: 'Phone', alignRight: false },\r\n    { id: 'email', label: 'Email', alignRight: false },\r\n    { id: 'adress', label: 'Adress', alignRight: false },\r\n    { id: '' }\r\n];\r\n\r\nvar selected = [];\r\nvar filterName = \"\";\r\nvar filteredUsers = USERLIST;\r\nvar page = 5;\r\nvar rowsPerPage = 5;\r\nclass EmployeeManager extends Component {\r\n    handleFilterByName(event){\r\n        filterName = event.target.value;\r\n    }\r\n    addEmployee () {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div\r\n                style={{height:'800px', overflowY: 'auto'}}\r\n            >\r\n                <Container\r\n                    style={{marginTop: 60}}\r\n                >\r\n                    <span\r\n                        style = {{\r\n                            color: \"#fff\",\r\n                            border: '1px solid cyan',\r\n                            padding: 12,\r\n                            backgroundColor: '#222'\r\n                        }}\r\n                    >\r\n                        Current Employee\r\n                    </span>\r\n                    <Button\r\n                        variant='contained'\r\n                        startIcon={<Icon icon={plusFill} />}\r\n                        onClick={() => this.addEmployee()}\r\n                    >\r\n                        New User\r\n                    </Button>\r\n\r\n                    <Card>\r\n                    {/* <EmployeeToolbar\r\n                        numSelected={selected.length}\r\n                        filterName={filterName}\r\n                        // onFilterName={this.handleFilterByName(event)}\r\n                    /> */}\r\n                    <TableContainer>\r\n                        <Table>\r\n                            <EmployeeTableHeader\r\n                                // order={order}\r\n                                // orderBy={orderBy}\r\n                                headLabel={TABLE_HEAD}\r\n                                rowCount={USERLIST.length}\r\n                                numSelected={selected.length}\r\n                                // onRequestSort={handleRequestSort}\r\n                                // onSelectAllClick={handleSelectAllClick}\r\n                            />\r\n                            <TableBody\r\n                                style={{height: '400px', width: '100%'}}\r\n                            >\r\n                            {\r\n                                filteredUsers\r\n                                .map((row) => {\r\n                                    \r\n                                const { id, firstName, lastName, gender, province,email, adress, old, phone, avatarUrl, isVerified } = row;\r\n                                const isItemSelected = selected.indexOf(firstName) !== -1;\r\n\r\n                                return (\r\n                                    <TableRow\r\n                                        hover\r\n                                        key={id}\r\n                                        tabIndex={-1}\r\n                                        role=\"checkbox\"\r\n                                        // selected={isItemSelected}\r\n                                        // aria-checked={isItemSelected}\r\n                                    >\r\n                                        <TableCell padding=\"checkbox\">\r\n                                            <Checkbox\r\n                                            checked={isItemSelected}\r\n                                            // onChange={(event) => handleClick(event, name)}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell align=\"left\">{id}</TableCell>\r\n                                        <TableCell component=\"th\" scope=\"row\" padding=\"none\">\r\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n                                            <Avatar alt={firstName} src={avatarUrl} />\r\n                                            <Typography variant=\"subtitle2\" noWrap>\r\n                                                {firstName}\r\n                                            </Typography>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"left\">{lastName}</TableCell>  \r\n                                        <TableCell align=\"left\">{old}</TableCell>\r\n                                        <TableCell align=\"left\">{gender}</TableCell>\r\n                                        <TableCell align=\"left\">{province}</TableCell>\r\n                                        <TableCell align=\"left\">{phone}</TableCell>\r\n                                        <TableCell align=\"left\">{email}</TableCell>\r\n                                        <TableCell align=\"left\">{adress}</TableCell>\r\n                                        <TableCell align=\"right\">\r\n                                            <EmployeeMoreMenu />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={USERLIST.length}\r\n                        // rowsPerPage={rowsPerPage}\r\n                        // page={page}\r\n                        // onPageChange={handleChangePage}\r\n                        // onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    />\r\n                    </Card>\r\n                </Container>\r\n                <Container\r\n                    style={{marginTop: 60}}\r\n                    style={{\r\n                        marginBottom: 220,\r\n                        marginTop: 40\r\n                    }}\r\n                >\r\n                    <span\r\n                        style = {{\r\n                            color: \"#fff\",\r\n                            border: '1px solid cyan',\r\n                            padding: 12,\r\n                            margin: 12,\r\n                            height: 40,\r\n                            backgroundColor: '#222'\r\n                        }}\r\n                    >\r\n                        Sacked Employee\r\n                    </span>\r\n                    <Card>\r\n                    {/* <EmployeeToolbar\r\n                        numSelected={selected.length}\r\n                        filterName={filterName}\r\n                        // onFilterName={this.handleFilterByName(event)}\r\n                    /> */}\r\n                    <TableContainer>\r\n                    <Table>\r\n                        <EmployeeTableHeader\r\n                            // order={order}\r\n                            // orderBy={orderBy}\r\n                            headLabel={TABLE_HEAD}\r\n                            // rowCount={USERLIST.length}\r\n                            // numSelected={selected.length}\r\n                            // onRequestSort={handleRequestSort}\r\n                            // onSelectAllClick={handleSelectAllClick}\r\n                        />\r\n                        <TableBody\r\n                            style={{height: '400px'}}\r\n                        >\r\n                        {\r\n                                filteredUsers\r\n                                .map((row) => {\r\n                                    \r\n                                const { id, firstName, lastName, gender, province,email, adress, old, phone, avatarUrl, isVerified } = row;\r\n                                const isItemSelected = selected.indexOf(firstName) !== -1;\r\n\r\n                                return (\r\n                                    <TableRow\r\n                                        hover\r\n                                        key={id}\r\n                                        tabIndex={-1}\r\n                                        role=\"checkbox\"\r\n                                        // selected={isItemSelected}\r\n                                        // aria-checked={isItemSelected}\r\n                                    >\r\n                                        <TableCell padding=\"checkbox\">\r\n                                            <Checkbox\r\n                                            checked={isItemSelected}\r\n                                            // onChange={(event) => handleClick(event, name)}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell align=\"left\">{id}</TableCell>\r\n                                        <TableCell component=\"th\" scope=\"row\" padding=\"none\">\r\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n                                            <Avatar alt={firstName} src={avatarUrl} />\r\n                                            <Typography variant=\"subtitle2\" noWrap>\r\n                                                {firstName}\r\n                                            </Typography>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                        <TableCell align=\"left\">{lastName}</TableCell>  \r\n                                        <TableCell align=\"left\">{old}</TableCell>\r\n                                        <TableCell align=\"left\">{gender}</TableCell>\r\n                                        <TableCell align=\"left\">{province}</TableCell>\r\n                                        <TableCell align=\"left\">{phone}</TableCell>\r\n                                        <TableCell align=\"left\">{email}</TableCell>\r\n                                        <TableCell align=\"left\">{adress}</TableCell>\r\n                                        <TableCell align=\"right\">\r\n                                            <EmployeeMoreMenu />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                                })}\r\n                        </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n\r\n                    <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={USERLIST.length}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        // onPageChange={handleChangePage}\r\n                        // onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        \r\n                    />\r\n                    </Card>\r\n                </Container>\r\n                {/* Đây là phần modal */}\r\n                {this.props.addEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeAddEmployeeStatus();}} className=\"modal-overlay\"></div>\r\n                        <AddEmployeeModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </AddEmployeeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.updateEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeUpdateEmployeeStatus();}} className=\"modal-overlay\"></div>\r\n                        <UpdateEmployeeModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </UpdateEmployeeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.payEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changePayEmployeeStatus();}} className=\"modal-overlay\"></div>\r\n                        <PayMoneyModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </PayMoneyModal>\r\n                    </div>\r\n                ): null}\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\r\n        payEmployeeStatus: state.payEmployeeStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changePayEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n            });\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps , mapDispatchToProps)(EmployeeManager);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\DashBoard.js",["399"],"import React, { Component } from 'react';\r\nimport '../../css/Dashboard.css'\r\nimport { Container, Grid } from '@mui/material';\r\nimport { Typography } from '@mui/material';\r\nimport { DiApple } from 'react-icons/di'\r\nimport StaticDateRangePickerDemo from './Calendar'\r\nimport AppWebsiteVisits from './Statistic';\r\nimport SplitButton from './GroupButton';\r\nimport FullCalendar from '@fullcalendar/react' // must go before plugins\r\nimport dayGridPlugin from '@fullcalendar/daygrid' // a plugin!\r\nimport interactionPlugin from \"@fullcalendar/interaction\" // needed for dayClick\r\n\r\n\r\nclass DashBoard extends Component {\r\n\r\n    renderEventContent = (eventInfo) => {\r\n        return (\r\n            <>\r\n                <b>{eventInfo.timeText}</b>\r\n                <i>{eventInfo.event.title}</i>\r\n            </>\r\n        )\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'DashBoard'\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"dashboard\" style={{ overflow: 'scroll', overflowX: 'hidden', height: '100vh' }}>\r\n                <Container style={{ marginTop: '40px' }} maxWidth=\"xl\">\r\n                    <Grid container spacing={3}>\r\n                        <Grid className=\"dashboard-item\" item md={3} sm={12} >\r\n                            <div className=\"dashboard-css\">\r\n                                <div className=\"dashboard-item-img\" style={{ marginBottom: '30px' }}>\r\n                                    <DiApple className=\"dashboard-item-icon\"></DiApple>\r\n                                </div>\r\n                                <Typography style={{ marginBottom: '10px' }} variant=\"h4\">256</Typography>\r\n                                <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                                    Total money\r\n                                </Typography>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid className=\"dashboard-item\" item md={3} sm={12} >\r\n                            <div className=\"dashboard-css sold-good\">\r\n                                <div className=\"dashboard-item-img sold-good\" style={{ marginBottom: '30px' }}>\r\n                                    <DiApple className=\"dashboard-item-icon sold-good\"></DiApple>\r\n                                </div>\r\n                                <Typography style={{ marginBottom: '10px' }} variant=\"h4\">256</Typography>\r\n                                <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                                    Sold good\r\n                                </Typography>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid className=\"dashboard-item\" item md={3} sm={12} >\r\n                            <div className=\"dashboard-css imported-good\">\r\n                                <div className=\"dashboard-item-img imported-good\" style={{ marginBottom: '30px' }}>\r\n                                    <DiApple className=\"dashboard-item-icon imported-good\"></DiApple>\r\n                                </div>\r\n                                <Typography style={{ marginBottom: '10px' }} variant=\"h4\">256</Typography>\r\n                                <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                                    Imported good\r\n                                </Typography>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid className=\"dashboard-item\" item md={3} sm={12} >\r\n                            <div className=\"dashboard-css error-receipt\">\r\n                                <div className=\"dashboard-item-img error-receipt\" style={{ marginBottom: '30px' }}>\r\n                                    <DiApple className=\"dashboard-item-icon error-receipt\"></DiApple>\r\n                                </div>\r\n                                <Typography style={{ marginBottom: '10px' }} variant=\"h4\">256</Typography>\r\n                                <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                                    Error receipt\r\n                                </Typography>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid className=\"dashboard-item\" item md={12} sm={12} >\r\n                            <div style={{ borderRadius: '20px' }}>\r\n                                <StaticDateRangePickerDemo></StaticDateRangePickerDemo>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid className=\"dashboard-item\" item md={12} sm={12} >\r\n                            <div style={{ borderRadius: '20px' }}>\r\n                                <FullCalendar\r\n                                    plugins={[ dayGridPlugin, interactionPlugin ]}\r\n                                    initialView=\"dayGridMonth\"\r\n                                    weekends={true}\r\n                                    events={[\r\n                                        { title: 'event 1', date: '2021-10-18' },\r\n                                        { title: 'event 2', date: '2021-10-18' }\r\n                                    ]}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid className=\"dashboard-item\" item md={12} sm={12} >\r\n                            <AppWebsiteVisits></AppWebsiteVisits>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DashBoard;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Profile.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodManager.js",["400"],"import { Component } from 'react';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport GoodTable from './GoodPartials/GoodTable';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Button from '@mui/material/Button';\r\nimport SearchBar from './GoodPartials/SearchBar';\r\nimport {connect} from 'react-redux'\r\nimport AddTypeModal from './GoodPartials/AddTypeModal';\r\nimport '../css/GoodManager.css';\r\nimport ConfirmModal from './GoodPartials/ConfirmModal';\r\nimport UpdateGoodModal from './GoodPartials/UpdateGoodModal';\r\nimport EditTypeModal from './GoodPartials/EditTypeModal';\r\n\r\nclass GoodManager extends Component {\r\n    \r\n    handleAdd() {\r\n        this.props.changeAddTypeStatus();\r\n        this.props.setAddTypeStatus();\r\n    }\r\n    handleConfirm(){\r\n        this.props.changeConfirmStatus();\r\n        this.props.unsetDelete();\r\n    }\r\n    handleConfirmDelete(){\r\n        this.props.changeConfirmStatus();\r\n        this.props.setDeleteConfirm();\r\n    }\r\n    handleUpdateGood() {\r\n        this.props.changeUpdateGoodStatus();\r\n    }\r\n    handleEditType() {\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                Good Manager\r\n                <div style={{ height: '800px', width: '100%', overflowX: 'scroll' }}>\r\n                    <div style={{display: 'flex'}}>\r\n                        <Button variant=\"contained\">\r\n                            <NavLink style={{color: '#fff', textDecoration: 'none'}} to=\"/goodmanager/import\">Import</NavLink>\r\n                        </Button>\r\n                        <SearchBar style={{height: '120px'}}/>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleAdd()} variant=\"contained\">\r\n                            add type\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleEditType()} variant=\"contained\">\r\n                            edit type\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleConfirmDelete()} variant=\"contained\">\r\n                            Delete\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleConfirm()} variant=\"contained\">\r\n                            Edit\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleUpdateGood()} variant=\"contained\">\r\n                            Update Good\r\n                        </Button>\r\n\r\n                     </div>\r\n\r\n                    <GoodTable />\r\n\r\n                    {/* Đây là phần modal */}\r\n                    {this.props.addTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <AddTypeModal></AddTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.confirmStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                            <ConfirmModal></ConfirmModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.updateGoodStatus ? (\r\n                        <div \r\n                            className=\"modal-add\"\r\n                        >\r\n                            <div onClick={() => {this.props.changeUpdateGoodStatus();}} className=\"modal-overlay\"></div>\r\n                            <UpdateGoodModal\r\n                                style={{\r\n                                    marginTop: 0\r\n                                }}\r\n                            >\r\n                            </UpdateGoodModal>\r\n                        </div>\r\n                    ): null}\r\n                     {this.props.editTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeEditTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <EditTypeModal></EditTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        deleteStatus: state.deleteStatus,\r\n        updateGoodStatus: state.updateGoodStatus,\r\n        editTypeStatus: state.editTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        unsetDelete: () => {\r\n            dispatch({\r\n                type: \"UNSET_DELETE_STATUS\",\r\n            })\r\n        },\r\n        changeUpdateGoodStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\r\n            })\r\n        },\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            })\r\n        },\r\n        setAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        setDeleteConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_DELETE_GOOD\",\r\n            }); \r\n        },\r\n        \r\n    }\r\n}\r\nexport default connect(mapStateToProps , mapDispatchToProps)(GoodManager);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\SellProduct.js",["401","402","403","404","405","406","407","408"],"import React, { Component } from 'react';\r\nimport ReactToPrint from 'react-to-print';\r\nimport { Container, Grid, Button, CardActionArea, CardActions, CardMedia } from '@mui/material';\r\nimport ComponentToPrint from './ComponentToPrint';\r\nimport '../../css/SellProduct.css'\r\nimport Tabs from './Tabs'\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\nimport exampleImg from '../../img/good-example.jpg'\r\nimport { BiPlusMedical } from 'react-icons/bi';\r\nimport { connect } from 'react-redux'\r\nimport axios from 'axios';\r\nimport { Image } from 'cloudinary-react';\r\nimport ShoppingBags from './ShoppingBags';\r\nimport Printf from './Print'\r\n\r\nclass SellProduct extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            change: false,\r\n            test1: true,\r\n        }\r\n        this.loadAllType();\r\n        this.loadAllGood();\r\n    }\r\n\r\n\r\n    bull = (\r\n        <Box\r\n            component=\"span\"\r\n            sx={{ display: 'inline-block', mx: '2px', transform: 'scale(0.8)' }}\r\n        >\r\n            •\r\n        </Box>\r\n    );\r\n\r\n    AddProduct = (value) => {\r\n        var isCheck = false;\r\n        var currentQuantity;\r\n        var maxQuantity;\r\n        this.props.shoppingBags.map(value1 => {\r\n            if (value1.product.name === value.name) {\r\n                isCheck = true;\r\n                currentQuantity = value1.quantity\r\n                maxQuantity = value.quantity\r\n            } else {\r\n            }\r\n        })\r\n        if (isCheck) {\r\n            if (currentQuantity < maxQuantity) {\r\n                this.props.raiseQuantity(value.name);\r\n            }\r\n        } else {\r\n            const newProduct = {\r\n                product: value,\r\n                quantity: 1,\r\n            }\r\n            this.props.addNewProductToShoppingBags(newProduct);\r\n        }\r\n\r\n    }\r\n    \r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }\r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`,\r\n            {\r\n                params: { ...data }\r\n            })\r\n            .then(res => {\r\n                result = res.data.data;\r\n                localStorage.getItem('token', res.data.token);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        var listTypeInfor = [];\r\n        for (var i = 0; i < result.length; i++) {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n        this.props.getTypeToReducer(listTypeInfor);\r\n        this.setState({ change: !this.state.change });\r\n    }\r\n\r\n    async loadAllGood() {\r\n        var resultProduct = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }\r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/`, {\r\n            params: { ...data }\r\n        })\r\n            .then(res => {\r\n                resultProduct = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Get hết từ cái productjoinType\r\n        var result = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                storeID: this.props.infoUser.email,\r\n            }\r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, {\r\n            params: { ...data1 }\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n                localStorage.getItem('token', res.data.token);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Lấy các cái jointype\r\n        var joinTypeInfor = [];\r\n        for (var i = 0; i < result.length; i++) {\r\n            joinTypeInfor.push(result[i]);\r\n        }\r\n        console.log(\"joinTypeInfor\", joinTypeInfor);\r\n\r\n        var listProductInfor = [];\r\n        for (var i = 0; i < resultProduct.length; i++) {\r\n            var typeIDList = [];\r\n            for (var j = 0; j < joinTypeInfor.length; j++) {\r\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\r\n                    resultProduct[i]._id.productID == joinTypeInfor[j]._id.productID) {\r\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\r\n                }\r\n            }\r\n\r\n            listProductInfor.push(\r\n                {\r\n                    ...resultProduct[i],\r\n                    typeIDList: typeIDList\r\n                });\r\n        }\r\n\r\n        console.log(\"listProductInfor: \", listProductInfor);\r\n        this.props.getProductToReducer(listProductInfor);\r\n        // console.log(\"this.props.listProduct.state: \", this.props.listProduct.state);\r\n        this.setState({ change: !this.state.change });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n        console.log(\"ĐÃ reset\");\r\n        return (\r\n            <div className=\"sell-product\" >\r\n                <Container maxWidth=\"xl\">\r\n                    <Grid container spacing={2}>\r\n                        <Grid item md={8} sm={12}  >\r\n                            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', borderRadius: '8px', marginTop: '20px', backgroundColor: '#ffffff', height: 'calc(100vh - 40px)', overflow: 'hidden' }}>\r\n                                <div style={{ overflow: 'hidden', marginBottom: '5px' }}>\r\n                                    <Tabs></Tabs>\r\n                                </div>\r\n                                <Container id=\"choses-product\" style={{ height: '94%', overflowY: 'scroll' }} maxWidth=\"xl\">\r\n                                    <Grid container spacing={2}>\r\n                                        {this.props.listProduct.state\r\n                                            ? this.props.listProduct.state.filter(value => {\r\n                                                if (this.props.chooseTypeProductID === 'all') {\r\n                                                    return value;\r\n                                                }\r\n                                                if (value.typeIDList.includes(this.props.chooseTypeProductID)) {\r\n                                                    return value;\r\n                                                }\r\n                                            }).map(value => (\r\n                                                <Grid item md={3} sm={3}>\r\n                                                    <Card onClick={() => this.AddProduct(value)}>\r\n                                                        <CardActionArea>\r\n                                                            {\r\n                                                                value.imgUrl == \"none\"\r\n                                                                    ? <CardMedia\r\n                                                                        component=\"img\"\r\n                                                                        height=\"140\"\r\n                                                                        image={exampleImg}\r\n                                                                        alt=\"green iguana\"\r\n                                                                    />\r\n\r\n                                                                    : <CardMedia\r\n                                                                        component=\"img\"\r\n                                                                        height=\"140\"\r\n                                                                        image={value.imgUrl}\r\n                                                                        alt=\"green iguana\"\r\n                                                                    />\r\n                                                            }\r\n                                                            <CardContent style={{ padding: '5px' }}>\r\n                                                                <Typography style={{ textAlign: 'center' }} gutterBottom variant=\"h6\" component=\"div\">\r\n                                                                    {value.name}\r\n                                                                </Typography>\r\n                                                            </CardContent>\r\n                                                        </CardActionArea>\r\n                                                        <CardActions style={{ justifyContent: 'center' }}>\r\n                                                            <Button style={{ color: 'green', fontWeight: '700' }} endIcon={<BiPlusMedical></BiPlusMedical>} size=\"medium\" color=\"primary\">\r\n                                                                {value.sellPrice}\r\n                                                            </Button>\r\n                                                        </CardActions>\r\n                                                    </Card>\r\n                                                </Grid>\r\n                                            )) : (null)}\r\n                                    </Grid>\r\n                                </Container>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item md={4} lg={4} >\r\n                            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', borderRadius: '8px', marginTop: '20px', backgroundColor: '#ffffff', height: 'calc(100vh - 40px)', overflow: 'hidden', overflowX: 'hidden' }}>\r\n                                <div id=\"choses-product\" style={{ backgroundColor: '#ebebeb', height: '60%', margin: '10px', overflowY: 'scroll', overflowX: 'hidden' }} >\r\n                                    <Grid sty container spacing={0}>\r\n                                        {/* Table */}\r\n                                        <Grid item className=\"customizeTable\" style={{ backgroundColor: 'rgba(20,20,20,0.4)', alignContent: 'center', justifyContent: 'center', borderBottom: '2px solic black' }} md={12} sm={12}>\r\n                                            <Grid style={{ textAlign: 'center', alignItems: 'center', justifyItems: 'center', fontWeight: 'bold' }} container spacing={0}>\r\n                                                <Grid item md={1} sm={1}>\r\n                                                    #\r\n                                                </Grid>\r\n                                                <Grid item md={1} sm={1}>\r\n\r\n                                                </Grid>\r\n                                                <Grid item md={4} sm={4}>\r\n                                                    Name\r\n                                                </Grid>\r\n                                                <Grid item md={3} sm={3}>\r\n                                                    Quantity\r\n                                                </Grid>\r\n                                                <Grid style={{ fontWeight: '700' }} item md={3} sm={3}>\r\n                                                    Giá\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        {/* Bắt đầu hóa đơn */}\r\n                                        <ShoppingBags></ShoppingBags>\r\n                                    </Grid>\r\n                                </div>\r\n                                <div style={{ height: '40%' }}>\r\n                                    <Printf ></Printf>\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        listProduct: state.listProduct,\r\n        chooseTypeProductID: state.chooseTypeProduct,\r\n        infoUser: state.infoUser,\r\n        shoppingBags: state.shoppingBags,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_STATUS\",\r\n            });\r\n        },\r\n        getTypeToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        getProductToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_AND_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        addNewProductToShoppingBags: (newProduct) => {\r\n            dispatch({\r\n                type: \"ADD_NEW_PRODUCT_SHOPPING_BAGS\",\r\n                newProduct: newProduct,\r\n            })\r\n        },\r\n        raiseQuantity: (name) => {\r\n            dispatch({\r\n                type: \"RAISE_QUANTITY_SHOPPING_BAGS\",\r\n                name: name,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SellProduct);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodImport.js",["409","410","411","412","413","414","415","416"],"import React, { Component } from 'react';\r\nimport { TextField } from '@mui/material';\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { InputLabel, Button, Modal, Grid, Card, CardHeader} from '@mui/material';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { connect } from 'react-redux';\r\nimport GoodImage from '../../img/good-example.jpg';\r\nimport AddTypeModal from './AddTypeModal';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport ConfirmModal from './ConfirmModal';\r\n\r\n// Use for save type\r\nvar productTypes =[];\r\nvar listTypeInfor = [];\r\n\r\nvar listProductInfor = [];\r\n\r\n// Use for choose type:\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass GoodImport extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n            currentDateTime: new Date('2014-08-18T21:11:54'),\r\n            change: false,\r\n        }; \r\n        this.loadAllType(); \r\n        this.loadAllGood();\r\n    }\r\n    handleAdd(){\r\n        this.props.changeAddTypeStatus();\r\n        this.props.setAddTypeStatus();\r\n    }\r\n    imgUrl= 'none';\r\n    dateTime= Date.now();\r\n\r\n    profileImageChange = (fileChangeEvent) => {\r\n        this.setState({\r\n            imageSelect: fileChangeEvent.target.files[0],\r\n        })\r\n        const file = fileChangeEvent.target.files[0];\r\n        const { type } = file;\r\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\r\n        } else {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", fileChangeEvent.target.files[0])\r\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\r\n            axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\r\n                .then(res => {\r\n                    this.imgUrl=res.data.url;\r\n                    this.setState({\r\n                        change: 'true'\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"Thất bại\");\r\n                })\r\n\r\n        }\r\n\r\n    }\r\n\r\n    async importGood() {\r\n        // Thêm hàng hoá\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            product: {\r\n                _id: {\r\n                    productID: this.generatedID,\r\n                    importDate: Date(this.dateTime),\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: document.querySelector('input[name=\"goodName\"]').value,\r\n                quantity: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                remain: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\r\n                sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\r\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\r\n                imgUrl: this.imgUrl,\r\n                unit: document.querySelector('input[name=\"unit\"]').value,\r\n            }\r\n        }\r\n        axios.post(`http://localhost:5000/api/product`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu được rồi anh chai\")\r\n                console.log(data._id.importDate)\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                console.log(err);\r\n            })\r\n\r\n        //Thêm vào bảng joinType nữa\r\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\r\n        for(var i = 0 ; i < typeSet.length ; i++)\r\n        {\r\n            const data1 = {\r\n                token: localStorage.getItem('token'),\r\n                productJoinType: {\r\n                    _id : {\r\n                        productID: this.generatedID,\r\n                        typeID: typeSet[i], \r\n                        importDate: Date.now(),\r\n                        storeID: this.props.infoUser.email,\r\n                    }\r\n                }\r\n            }\r\n            console.log(data1);\r\n            console.log(\"Đang thêm vô bảng join\")\r\n            axios.post(`http://localhost:5000/api/product/join`, data1)\r\n                .then(res => {\r\n                    console.log(\"lưu vô bảng join thành công\");\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                })\r\n        }\r\n        \r\n\r\n        // console.log(data);\r\n    }\r\n    checkConstraint = () => {\r\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\r\n        // Kiểm tra thử form ok ko\r\n        this.props.changeConfirmStatus();\r\n        this.props.setConfirm();\r\n    }\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                storeID: this.props.infoUser.email,\r\n            }   \r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        listTypeInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n        productTypes=[];\r\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\r\n        {\r\n            productTypes.push(listTypeInfor[i].name);\r\n        }\r\n        this.setState({change: true});\r\n    }\r\n\r\n    async loadAllGood() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                storeID: this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                alert(\"Lấy hết đc product ròi anh chai\");\r\n                result = res.data.data;\r\n                console.log(res.data.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Get data và lưu các tên Type vào dữ liệU\r\n        //Get data và lưu các tên Type vào bảng\r\n        listProductInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listProductInfor.push(result[i]);\r\n        }\r\n        if(listProductInfor.length>0)\r\n        {\r\n            this.generatedID = parseInt(listProductInfor[listProductInfor.length-1]._id.productID) + 1;\r\n        } \r\n        else this.generatedID = 0;\r\n        this.setState({change: false});\r\n    }\r\n\r\n    generatedID = 0;\r\n\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName='';\r\n        for(var i = 0; i<listTypeInfor.length;i++)\r\n        {   \r\n            if(listTypeInfor[i]._id.typeID == typeID)\r\n            {\r\n                typeName = listTypeInfor[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    render() {\r\n        \r\n        return(\r\n            <div \r\n                style={{ \r\n                    height: \"800px\", width: '100%', overflowY: 'scroll', backgroundColor: 'rgb(221,235,255)'   \r\n                }}\r\n            >   \r\n                <div className=\"good-import-header\"></div>\r\n                <Grid className=\"import-container\" container spacing={2}>\r\n                    <Grid item md={3}  \r\n                        style={{\r\n                            display: 'flex', \r\n                            justifyContent:'center', \r\n                            flexDirection:'column',\r\n                            alignItems:'center',\r\n                            paddingLeft: '30px'\r\n                        }}\r\n                    >   \r\n                        <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden', marginTop: '15px ' }}>\r\n                            <Image style={{width: '240px',height: '240px', padding: '10px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                        </label>\r\n                        {/* Ẩn đi */}\r\n                        <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                    </Grid>\r\n                    <Grid item md={9}>\r\n\r\n                        <Card \r\n                            style={{\r\n                                marginRight: '18px',\r\n                            }}\r\n                        >\r\n                            <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"ADD GOOD\" />\r\n                            <Grid container md={12}>\r\n                                <Grid item md={6} \r\n                                    className='input-item'\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\"\r\n                                        style={{\r\n                                            width: '116px'\r\n                                        }}\r\n                                    >\r\n                                        ID\r\n                                    </div>\r\n                                    <StyledTextField\r\n                                        classname='input-box' \r\n                                        type=\"text\" \r\n                                        // class=\"input-val\" \r\n                                        style = {{width: '100%'}} \r\n                                        fullWidth \r\n                                        size=\"small\" \r\n                                        name=\"goodID\" \r\n                                        variant=\"outlined\"\r\n                                        value={this.generatedID}\r\n                                        inputProps={\r\n                                            { readOnly: true, }\r\n                                        } \r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={6} \r\n                                    className='input-item'\r\n                                    style={{\r\n                                        marginLeft: 0,\r\n                                        paddingLeft: 0\r\n                                    }}\r\n                                >\r\n                                    <div className=\"input-label\" style={{width: 128}}>Import Date</div>\r\n                                    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                        <DateTimePicker\r\n                                            renderInput={(params) => <StyledTextField \r\n                                                                        {...params} \r\n                                                                        classname='input-box'\r\n                                                                        name=\"importDateTime\"\r\n                                                                        style = {{width: '70%', marginRight: 20}} \r\n                                                                        fullWidth \r\n                                                                    />}\r\n                                            value={this.dateTime}\r\n                                            onChange={(newValue) => {\r\n                                                this.changeTimeFrom(newValue);\r\n                                            }}\r\n                                        />\r\n                                    </LocalizationProvider>\r\n                                </Grid>\r\n                                \r\n                                <Grid item md={6} \r\n                                    className='input-item'\r\n                                >\r\n                                    <div className=\"input-label\"style={{width: '114px'}}>Name</div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'   \r\n                                        type=\"text\" \r\n                                        // class=\"input-val\" \r\n                                        style = {{width: '100%'}} \r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        name=\"goodName\" \r\n                                        variant=\"outlined\" \r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={3}\r\n                                    className='input-item'\r\n                                    style={{padding: '0px', marginLeft: '0px'}}\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\" \r\n                                        style={{width: '100px'}}\r\n                                    >\r\n                                        Quantity\r\n                                    </div>\r\n                                    <StyledTextField\r\n                                        style = {{width: '60%'}} \r\n                                        fullWidth\r\n                                        name=\"goodQuantity\" \r\n                                        variant=\"outlined\"\r\n                                        type=\"number\" \r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={3}\r\n                                    className='input-item'\r\n                                    style={{\r\n                                        paddingRight: 24\r\n                                    }}\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\"\r\n                                        style={{\r\n                                            marginLeft: 0,\r\n                                            paddingLeft: 4\r\n                                        }}\r\n                                    >\r\n                                        Unit\r\n                                    </div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'\r\n                                        style = {{width: '100%', marginLeft: '4px'}} \r\n                                        fullWidth\r\n                                        variant=\"outlined\"\r\n                                        type=\"text\" \r\n                                        name=\"unit\" \r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={6}\r\n                                    className='input-item'\r\n                                >\r\n                                    <div className=\"input-label\" style={{width: 128}}>Original Price</div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'\r\n                                        style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \r\n                                        fullWidth\r\n                                        name=\"originalPrice\" \r\n                                        variant=\"outlined\"\r\n                                        type=\"number\" \r\n                                    />\r\n                                    đ\r\n                                </Grid>\r\n                                <Grid item md={6}\r\n                                    className='input-item'\r\n                                    style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\"\r\n                                        style={{width: '96px'}}\r\n                                    >\r\n                                        Sell Price\r\n                                    </div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'\r\n                                        style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \r\n                                        fullWidth\r\n                                        name=\"sellPrice\" \r\n                                        variant=\"outlined\"\r\n                                        type=\"number\" \r\n                                    />\r\n                                    đ\r\n                                </Grid>\r\n                                <Grid item md={7} \r\n                                    className='input-item'\r\n                                >\r\n                                    <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'   \r\n                                        type=\"date\" \r\n                                        style = {{width: '70%'}} \r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        name=\"expiredDate\" \r\n                                        variant=\"outlined\" \r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={10}\r\n                                    className='input-item'\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\"\r\n                                        style={{width:132}}\r\n                                    >\r\n                                        Product Type\r\n                                    </div>\r\n                                    <FormControl sx={{ minWidth: 120 }}>\r\n                                        {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                        <Select\r\n                                            value={this.state.type}\r\n                                            onChange={(event) => {\r\n                                                this.setState({type: event.target.value});\r\n                                                if(!typeSet.includes(event.target.value))\r\n                                                {\r\n                                                    typeSet.push(event.target.value);\r\n                                                }\r\n                                            }}\r\n                                            style={{\r\n                                                height: 36,\r\n                                            }}\r\n                                        >\r\n                                            {\r\n                                                listTypeInfor.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                : listTypeInfor.map((type) =>\r\n                                                    <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\r\n                                                )\r\n                                            }   \r\n                                        </Select> \r\n                                    </FormControl>\r\n                                    <Button onClick={() => this.handleAdd()}>\r\n                                        <AiFillPlusCircle\r\n                                            size={28}\r\n                                            style={{\r\n                                                fontSize: 28,\r\n                                                margin: 0,\r\n                                                padding: 0,\r\n                                                width: 28,\r\n                                                height: 28\r\n                                            }}    \r\n                                        />\r\n                                    </Button>\r\n                                    <div className='all-type-container'>\r\n                                            {\r\n                                                Array.from(typeSet).map((type) =>\r\n                                                    <div className='type-container'>\r\n                                                        \r\n                                                        <CancelIcon\r\n                                                            className='close-icon'\r\n                                                            size={10}\r\n                                                            onClick={() => {\r\n                                                                typeSet = typeSet.filter(function(item) {\r\n                                                                    return item != type;\r\n                                                                })\r\n                                                                console.log(typeSet);\r\n                                                                this.setState({type: 'none'});\r\n                                                            }}\r\n                                                \r\n                                                        />\r\n                                                        <span className='type-title'>\r\n                                                            {this.getTypeNamebyTypeID(type)}\r\n                                                        </span>\r\n                                                    </div>\r\n                                                    \r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                </Grid>\r\n                                {/* <Grid item md={10}\r\n                                    className='input-item'\r\n                                >\r\n\r\n                                </Grid> */}\r\n                                <Grid item md={2}\r\n                                    className='input-item'\r\n                                >\r\n                                    <Button variant=\"contained\" onClick={() => this.importGood()}>\r\n                                        Import\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item sm={12} md={12} >\r\n                        \r\n                    </Grid>\r\n                </Grid> \r\n                    \r\n                {this.props.addTypeStatus ? (\r\n                    <div className=\"modal-add\">\r\n                        <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                        <AddTypeModal></AddTypeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.confirmStatus ? (\r\n                    <div className=\"modal-add\">\r\n                        <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                        <ConfirmModal></ConfirmModal>\r\n                    </div>\r\n                ): null}\r\n            </div>\r\n        );        \r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        confirmStatus: state.confirmStatus\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar\r\n            })\r\n        },\r\n        setAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_IMPORT_GOOD\",\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GoodImport);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\PayMoneyModal.js",["417","418","419","420","421","422","423","424","425","426","427","428","429","430","431","432","433","434","435","436","437"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass PayEmployeeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            goodID : \"\",\r\n            change: false,\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n        }; \r\n    }\r\n    \r\n\r\n    cancel = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"PAY EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\" \r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>Old</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Gender</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Province</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.props.changePayEmployeeStatus()}>\r\n                                            Pay employee\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changePayEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PayEmployeeModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\ConfirmModal.js",["438","439","440","441","442","443"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nclass ConfirmModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    confirm = () => {\r\n        // Thực hiện các lệnh xử lý tại đây\r\n        this.props.changeConfirmStatus();\r\n        this.props.setConfirm();\r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeConfirmStatus();\r\n        this.props.setQuit();\r\n    }\r\n\r\n    getMessage = ()  => {\r\n        var message = \"Cái này chưa code\";\r\n        switch(this.props.confirmCode)\r\n        {\r\n            case 'confirm-delete-good':\r\n                message = \"Are you sure to delete this product ?\";\r\n            case 'confirm-import-good':\r\n                message = \"Are you sure to import this product ?\";\r\n        }\r\n        return (\r\n            <div>\r\n                {message}\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        console.log(this.props.objectEditShift);\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={12} xs={12}>\r\n                                {this.getMessage()}\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.confirm()} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                            Xác nhận\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Hủy\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        confirmStatus: state.confirmStatus,\r\n        deleteStatus: state.deleteStatus,\r\n        confirmCode: state.confirmCode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setConfirm: () => {\r\n            dispatch({\r\n                type: \"CONFIRM\",\r\n            });\r\n        },\r\n        setQuit: () => {\r\n            dispatch({\r\n                type: \"QUIT\",\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmModal);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\EditTypeModal.js",["444","445","446","447"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit} from 'react-icons/bi';\r\nimport { TiDelete } from \"react-icons/ti\";\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\nimport AddTypeModal from './AddTypeModal';\r\n\r\nvar productTypes =[];\r\nvar listTypeInfor = [];\r\n\r\nclass EditTypeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.loadAllType();\r\n        this.state = {\r\n            change: false\r\n        }\r\n    }\r\n    confirm = () => {\r\n        // Thực hiện các lệnh xử lý tại đây\r\n        this.props.changeConfirmStatus();\r\n    }\r\n    cancel = () => {\r\n        // this.props.changeConfirmStatus();\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    edit = (type) => {\r\n        this.props.changeAddTypeStatus();\r\n        this.props.setEditTypeStatus();\r\n        this.props.typeToUpdate(type);\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    async delete(type){\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productTypes:\r\n            [\r\n                {\r\n                    typeID: type._id.typeID,\r\n                    storeID: type._id.storeID\r\n                }\r\n            ]\r\n                \r\n        }\r\n        await axios.delete(`http://localhost:5000/api/product/type`,{data: data})\r\n            .then(res => {\r\n                console.log(\"delete success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                // alert(\"Lỗi gì cmnr\")\r\n            })\r\n        // Ở đây mình phải cập nhật join nữa\r\n        \r\n\r\n        this.loadAllType();\r\n        \r\n    }\r\n    \r\n\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                storeID: this.props.infoUser.email,\r\n            }   \r\n        }\r\n        console.log(data.token);\r\n        // alert(data.token);\r\n        console.log(data.filter);\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err); // 401 ở đây\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        listTypeInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n        productTypes=[];\r\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\r\n        {\r\n            productTypes.push(listTypeInfor[i].name);\r\n        }\r\n        this.setState({change: true});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"All Good Type\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid container item md={12} xs={12} spacing={0}>\r\n                                { listTypeInfor.map((type) => (\r\n                                    <Grid item md={3} style={{border:'1px solid #333', padding: 4}}>\r\n                                        <span>{type.name}</span>\r\n                                        <BiEdit onClick={() => this.edit(type)}/>\r\n                                        <TiDelete onClick={() => this.delete(type)}/>\r\n                                    </Grid>\r\n                                ))}\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Thoát\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n                {/* {this.props.addTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <AddTypeModal></AddTypeModal>\r\n                        </div>\r\n                    ): null} */}\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        editTypeStatus: state.editTypeStatus,\r\n        addTypeStatus: state.addTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        infoUser: state.infoUser,\r\n        typeProductValue: state.typeProductValue,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        setEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_EDIT_TYPE_STATUS\",\r\n            })\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        typeToUpdate: (data) => {\r\n            dispatch({\r\n                type: \"UPDATE_PRODUCT_TYPE\",\r\n                _id: {\r\n                    typeID: data._id.typeID,\r\n                    storeID: data._id.storeID,\r\n                },\r\n                name: data.name\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTypeModal);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\UpdateGoodModal.js",["448","449","450","451","452","453","454","455","456","457","458","459","460"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport GoodImage from './goodExample.jpg';\r\nimport AddTypeModal from './AddTypeModal';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport ConfirmModal from './ConfirmModal';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass UpdateGoodModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            goodID : \"\",\r\n            change: false,\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n        }; \r\n        this.loadInitialData();\r\n    }\r\n    imgUrl='none';\r\n    goodID='';\r\n    importDate='';\r\n    name='';\r\n    imgUrl='';\r\n    quantity = 0;\r\n    remain = 0;\r\n    unit = \"\";\r\n    importPrice = \"\";\r\n    sellPrice = \"\";\r\n    expire =\"\";\r\n    \r\n    blurDiscription = (e) => {\r\n        this.descriptionShift = e.target.value;\r\n    }\r\n    blurSalary = (e) => {\r\n        this.salary = e.target.value;\r\n    }\r\n\r\n    updateGood = () => {\r\n        this.props.changeUpdateGoodStatus();\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            product: {\r\n                _id: {\r\n                    productID: document.querySelector('input[name=\"goodID\"]').value,\r\n                    importDate: Date(this.dateTime),\r\n                },\r\n                name: document.querySelector('input[name=\"goodName\"]').value,\r\n                quantity: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                // remain: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\r\n                sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\r\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\r\n                imgUrl: this.imgUrl,\r\n                unit: document.querySelector('input[name=\"unit\"]').value,\r\n            }\r\n        }\r\n        axios.put(`http://localhost:5000/api/product`, data)\r\n            .then(res => {\r\n                console.log(\"Update success\");\r\n                alert('update được rồi anh trai')\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        console.log(data);\r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeUpdateGoodStatus();\r\n    }\r\n\r\n    sampleData = {\r\n        email:\"19522006@gm.uit.edu.vn\",\r\n        token:\"this is token\",\r\n        data: [\r\n            {\r\n                _id:{\r\n                    productID:\"1212121\",\r\n                    importDate:\"2021-10-08T00:00:00.000Z\"\r\n                },\r\n                name:\"SHIIijjjiI\",\r\n                imgUrl:\"none\",\r\n                quantity:4,\r\n                remain:4,\r\n                unit:\"12\",\r\n                importPrice:7,\r\n                sellPrice:7,\r\n                expires:\"2000-11-10T00:00:00.000Z\",\r\n            },\r\n            {\r\n                _id:{\r\n                    productID:\"121212aa1\",\r\n                    importDate:\"2021-10-08T00:00:00.000Z\"\r\n                }, \r\n                name:\"q\",\r\n                imgUrl:\"none\",\r\n                quantity:11,\r\n                remain:11,\r\n                unit:\"11\",\r\n                importPrice:212,\r\n                sellPrice:120,\r\n                expires:\"2021-10-28\"\r\n            }\r\n        ]\r\n    }\r\n\r\n    loadInitialData = () => {\r\n        // Load các dữ liệu ban đầu của form ở đây để mà update nhưng mà bị lỗi 401 mẹ\r\n        //Xử lý sampleData\r\n        var productInfo = this.props.infoUpdate;\r\n        console.log(this.props.infoUpdate);\r\n\r\n        this.goodID = productInfo._id.productID;\r\n        this.importDate = productInfo._id.importDate;\r\n        this.name = productInfo.name;\r\n        this.imgUrl = productInfo.imgUrl;\r\n        this.quantity = productInfo.quantity;\r\n        // this.remain = productInfo.remain;\r\n        this.unit = productInfo.unit;\r\n        this.importPrice = productInfo.importPrice;\r\n        this.sellPrice = productInfo.sellPrice;\r\n        this.expire = productInfo.expires;\r\n        console.log(\"expire\", this.expire);\r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"UPDATE GOOD\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card \r\n                            >\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            name=\"goodID\" \r\n                                            variant=\"outlined\" \r\n                                            value={this.goodID}\r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                        style={{\r\n                                            marginLeft: 0,\r\n                                            paddingLeft: 0\r\n                                        }}\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 128}}>Import Date</div>\r\n                                        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                            <DateTimePicker\r\n                                                renderInput={(params) => <StyledTextField \r\n                                                                            {...params} \r\n                                                                            classname='input-box'\r\n                                                                            name=\"importDateTime\"\r\n                                                                            style = {{width: '70%', marginRight: 20}} \r\n                                                                            fullWidth \r\n                                                                        />}\r\n                                                value={this.importDate}\r\n                                                readOnly={true}\r\n                                                disabled={true}\r\n                                            />\r\n                                        </LocalizationProvider>\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            name=\"goodName\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.name} \r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                        style={{padding: '0px', marginLeft: '0px'}}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\" \r\n                                            style={{width: '100px'}}\r\n                                        >\r\n                                            Quantity\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            style = {{width: '60%'}} \r\n                                            fullWidth\r\n                                            name=\"goodQuantity\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\" \r\n                                            defaultValue={this.quantity}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                        style={{\r\n                                            paddingRight: 24\r\n                                        }}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                marginLeft: 0,\r\n                                                paddingLeft: 4\r\n                                            }}\r\n                                        >\r\n                                            Unit\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '100%', marginLeft: '4px'}} \r\n                                            fullWidth\r\n                                            variant=\"outlined\"\r\n                                            type=\"text\" \r\n                                            name=\"unit\" \r\n                                            defaultValue={this.unit}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 128}}>Original Price</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"originalPrice\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\"\r\n                                            defaultValue={this.importPrice}\r\n                                        />\r\n                                        đ\r\n                                    </Grid>\r\n                                    <Grid item md={6}\r\n                                        className='input-item'\r\n                                        style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{width: '96px'}}\r\n                                        >\r\n                                            Sell Price\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"sellPrice\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\" \r\n                                            defaultValue={this.sellPrice}\r\n                                        />\r\n                                        đ\r\n                                    </Grid>\r\n                                    <Grid item md={7} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\r\n                                        {/* <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                            <DatePicker\r\n                                                renderInput={(params) => <StyledTextField \r\n                                                                            {...params} \r\n                                                                            classname='input-box'\r\n                                                                            name=\"expiredDate\"\r\n                                                                            style = {{width: '70%', marginRight: 20}} \r\n                                                                            fullWidth \r\n                                                                            value={this.expire}\r\n                                                                        />}\r\n                                                defaultvalue={this.expire}\r\n                                                onChange={(newValue) => {\r\n                                                    this.changeTimeFrom(newValue);\r\n                                                }}\r\n                                            />\r\n                                        </LocalizationProvider> */}\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"sellPrice\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\" \r\n                                            value={this.expire}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={10}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{width:132}}\r\n                                        >\r\n                                            Product Type\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 120 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({type: event.target.value});\r\n                                                    if(!typeSet.includes(event.target.value))\r\n                                                    {\r\n                                                        typeSet.push(event.target.value);\r\n                                                    }\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    productTypes.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                    : productTypes.map((type) =>\r\n                                                        <MenuItem value={type}>{type}</MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                        <Button onClick={() => this.handleAdd()}>\r\n                                            <AiFillPlusCircle\r\n                                                size={28}\r\n                                                style={{\r\n                                                    fontSize: 28,\r\n                                                    margin: 0,\r\n                                                    padding: 0,\r\n                                                    width: 28,\r\n                                                    height: 28\r\n                                                }}    \r\n                                            />\r\n                                        </Button>\r\n                                        <div className='all-type-container'>\r\n                                                {\r\n                                                    Array.from(typeSet).map((type) =>\r\n                                                        <div className='type-container'>\r\n                                                            \r\n                                                            <CancelIcon\r\n                                                                className='close-icon'\r\n                                                                size={10}\r\n                                                                onClick={() => {\r\n                                                                    typeSet = typeSet.filter(function(item) {\r\n                                                                        return item != type;\r\n                                                                    })\r\n                                                                    console.log(typeSet);\r\n                                                                    this.setState({type: 'none'});\r\n                                                                }}\r\n                                                    \r\n                                                            />\r\n                                                            <span className='type-title'>\r\n                                                                {type}\r\n                                                            </span>\r\n                                                        </div>\r\n                                                        \r\n                                                    )\r\n                                                }\r\n                                            </div>\r\n                                    </Grid>\r\n                                    {/* <Grid item md={10}\r\n                                        className='input-item'\r\n                                    >\r\n\r\n                                    </Grid> */}\r\n                                    <Grid item md={2}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.updateGood()}>\r\n                                            UPDATE\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                        \r\n                    {this.props.addTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <AddTypeModal></AddTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.confirmStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                            <ConfirmModal></ConfirmModal>\r\n                        </div>\r\n                    ): null}\r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        updateGoodStatus: state.updateGoodStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUpdate: state.infoUpdate,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeUpdateGoodStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setUpdateConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_UPDATE_GOOD\",\r\n            }); \r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateGoodModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\AddTypeModal.js",["461","462","463","464","465","466","467","468"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Alert } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel, GiVampireCape } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nvar listTypeInfor = [];\r\n\r\nclass AddTypeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            change: 'false'\r\n        }\r\n        this.loadInitialData();\r\n        this.getAllTypeList();\r\n    }\r\n    storeID = \"\";\r\n    typeList = [];\r\n\r\n    async getAllTypeList(){\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                storeID: this.props.infoUser.email,\r\n            }   \r\n        }\r\n        console.log(data.token);\r\n        // alert(data.token);\r\n        console.log(data.filter);\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                alert(\"Get success\");\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err); // 401 ở đây\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n    }\r\n    addType = () => {\r\n        var newTypeName = document.querySelector('input[name=\"typeName\"]').value.trim();\r\n        if(this.checkConstraint(newTypeName)==false)  return;\r\n        var genTypeID = 0;\r\n        if(listTypeInfor.length>0)\r\n        {\r\n            genTypeID = parseInt(listTypeInfor[listTypeInfor.length-1]._id.typeID) + 1;\r\n        } \r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productType: {\r\n                _id:{\r\n                    typeID: genTypeID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: newTypeName,\r\n            }    \r\n        }\r\n        axios.post(`http://localhost:5000/api/product/type`, data)\r\n            .then(res => {\r\n                alert(\"Save success\");\r\n                //TODO: Cập nhật token ở đây nữa\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        this.props.changeAddTypeStatus();\r\n    }\r\n    \r\n    checkConstraint(typeName) {\r\n        //Constraint 1: Check name\r\n        for(var i=0;i<listTypeInfor.length;i++)\r\n        {\r\n            if(listTypeInfor[i].name==typeName)\r\n            {\r\n                if(!this.props.isAddTypeStatus && typeName.trim()==this.props.typeProductValue.name)\r\n                {\r\n                    alert(\"Không đổi tên à anh zai\");\r\n                    return false;\r\n                }\r\n                alert(\"Trùng tên rồi anh chai\");\r\n                return false;\r\n            }\r\n            \r\n        }        \r\n        // Constraint 2: Not blank\r\n        if(typeName.length==0)\r\n        {\r\n            alert(\"Không nhập gì à anh chai\")\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n    cancel = () => {\r\n        this.props.changeAddTypeStatus();\r\n    }\r\n\r\n    handle = () => {\r\n        if (this.props.isAddTypeStatus)\r\n            this.addType();\r\n        else \r\n            this.editType();\r\n    }\r\n\r\n    editType = () => {\r\n        var newTypeName = this.typeName;\r\n        if(this.checkConstraint(newTypeName)==false) return;\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productType: {\r\n                _id: {\r\n                    typeID: this.props.typeProductValue._id.typeID,\r\n                    storeID: this.props.infoUser.email,\r\n                }, \r\n                name: newTypeName,\r\n            }\r\n        }\r\n        // alert(data.product.name)\r\n        axios.put(`http://localhost:5000/api/product/type`, data)\r\n            .then(res => {\r\n                // Có khi mình sẽ cập nhật type ở dây\r\n                console.log(\"Update success\");\r\n                alert('update được rồi anh trai')\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(\"Lỗi gì cmnr\")\r\n            })\r\n        this.props.changeAddTypeStatus();\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    typeName = \"\";\r\n    loadInitialData = () => {\r\n        if (this.props.isAddTypeStatus) {\r\n            \r\n        }\r\n        else\r\n        {\r\n            this.typeName = this.props.typeProductValue.name;\r\n            this.setState({change: true});\r\n        } \r\n    }\r\n\r\n    changeTypeName(e)\r\n    {\r\n        this.typeName = e.target.value;\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader \r\n                        style={{ color: 'blue', backgroundColor: '#efeeef', textAlign: 'center' }} \r\n                        title={this.props.isAddTypeStatus? \"Add Type\" : \"Edit Type\"}\r\n                        />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid \r\n                            container \r\n                            spacing={2}\r\n                            justifyContent={'center'}\r\n                            alignItems={'center'}\r\n                        >\r\n                            <Grid item md={2} xs={12}>\r\n                                TypeName\r\n                            </Grid>\r\n                            <Grid item md={10} xs={12}>\r\n                                <TextField\r\n                                    id=\"outlined-basic\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    required\r\n                                    type=\"text\"\r\n                                    name=\"typeName\"\r\n                                    defaultValue={this.typeName}\r\n                                    onChange={(e) => this.changeTypeName(e)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button \r\n                            style={{ backgroundColor: 'yellowgreen' }} \r\n                            // onClick={() => this.addShift()} \r\n                            onClick={() => this.handle()}\r\n                            variant=\"contained\" \r\n                            startIcon={<BiPlusMedical />}\r\n                        >\r\n                            Xác nhận\r\n                        </Button>\r\n                        <Button \r\n                            style={{ backgroundColor: 'red' }} \r\n                            // onClick={() => this.editShift()}\r\n                            onClick={() => this.cancel()}\r\n                            variant=\"contained\" \r\n                            startIcon={<GiCancel />}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        infoUser: state.infoUser,\r\n        typeProductValue: state.typeProductValue\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTypeModal);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ComponentToPrint.js",["469","470","471","472"],"import { connect } from \"react-redux\";\r\nimport React from 'react';\r\nimport { borderBottom } from \"@mui/system\";\r\n\r\n\r\n\r\nclass ComponentToPrint extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date(),\r\n        }\r\n    }\r\n\r\n    minute = 1000 * 60;\r\n    hour = this.minute * 60;\r\n    day = this.hour * 24;\r\n    year = this.day * 365;\r\n\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    totalMoney = () => {\r\n        let total = 0;\r\n        this.props.shoppingBags.map(value => {\r\n            total += value.quantity * value.product.sellPrice;\r\n        })\r\n        return total.toLocaleString();\r\n    }\r\n\r\n    reduceTotalMoney = () => {\r\n        let total = 0;\r\n        this.props.shoppingBags.map(value => {\r\n            total += value.quantity * value.product.sellPrice;\r\n        })\r\n        if (total !== 0) {\r\n            total = total*this.props.percentDiscount/100\r\n        }\r\n        return total.toLocaleString()\r\n    }\r\n\r\n    finalTotalMoney = () => {\r\n        let total = this.totalMoney - this.reduceTotalMoney();\r\n        return total.toLocaleString()\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"row\">\r\n                {this.reduceTotalMoney()}\r\n                <div className=\"col-12\">\r\n                    <h1 style={{ textAlign: 'center' }}>{this.props.infoUser.storeName}</h1>\r\n                </div>\r\n                <div style={{ borderBottom: '1px solid #00000059' }} className=\"col-12\">\r\n                    <p style={{ textAlign: 'center', marginBottom: '0' }}>{this.props.infoUser.address}</p>\r\n                    <p style={{ textAlign: 'center' }}>{this.props.infoUser.district + ' ' + this.props.infoUser.province}</p>\r\n                    <p style={{ textAlign: 'center' }}>{\"SĐT: \" + this.props.infoUser.tel}</p>\r\n                </div>\r\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\r\n                    <h4 style={{ textAlign: 'center' }}>HÓA ĐƠN THANH TOÁN</h4>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <p style={{ textAlign: 'center', fontWeight: '400' }}>Số HĐ: {this.makeCode(10)}</p>\r\n                    <div style={{ margin: '0 5px' }} className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <p style={{ fontWeight: '700' }}>Date:\r\n                                <span style={{ fontWeight: '400' }}>\r\n                                    {\"  \" + this.state.date.getDate() + \" / \" + this.state.date.getMonth() + \" / \" + this.state.date.getFullYear()}\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <p style={{ fontWeight: '700' }}>Time:\r\n                                <span style={{ fontWeight: '400' }}>\r\n                                    {\"  \" + this.state.date.getHours() + \":\" + this.state.date.getMinutes()}\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <p style={{ fontWeight: '700', margin: '0 17px' }}>\r\n                        Cashier:\r\n                        <span style={{ fontWeight: '400' }}>\r\n                            {\"  Admin\"}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <table style={{ margin: '0 10px' }} class=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Quantity</th>\r\n                            <th scope=\"col\">Price</th>\r\n                            <th scope=\"col\">Total money</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.props.shoppingBags ? this.props.shoppingBags.map((value, key) => (\r\n                            <tr>\r\n                                <td>{key + 1}</td>\r\n                                <td>{value.product.name}</td>\r\n                                <td>{value.quantity}</td>\r\n                                <td>{value.product.sellPrice}</td>\r\n                                <td>{value.quantity * value.product.sellPrice}</td>\r\n                            </tr>\r\n                        ))\r\n                            : 'Không có gì'}\r\n\r\n                    </tbody>\r\n                </table>\r\n                <div style={{marginTop: '20px'}} className=\"col-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'end' }}>Total :</h6>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'start' }}>{this.totalMoney()}đ</h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'end' }}>Discount :</h6>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'start' }}>-{this.reduceTotalMoney()}đ</h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <h5 style={{ textAlign: 'end' }}>TOTAL FINAL :</h5>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h5 style={{ textAlign: 'start' }}>{this.finalTotalMoney()}đ</h5>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\r\n                    <h6 style={{ textAlign: 'center',fontStyle: 'italic ' }}>Xin cảm ơn quý khách</h6>\r\n                    <h6 style={{ textAlign: 'center',fontStyle: 'italic ' }}>hẹn gặp lại!</h6>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ComponentToPrint;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Tabs.js",["473"],"import * as React from 'react';\r\nimport Tabs from '@mui/material/Tabs';\r\nimport Tab from '@mui/material/Tab';\r\nimport { useSelector , useDispatch} from 'react-redux';\r\nimport { Table } from '@material-ui/core';\r\n\r\nexport default function IconLabelTabs() {\r\n    const [value, setValue] = React.useState(0);\r\n    const typeProduct = useSelector(state => state.typeProduct)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleChange = (event, newValue) => {\r\n        setValue(newValue);\r\n        console.log(newValue);\r\n        var index;\r\n        if (newValue === 0) {\r\n            index = 'all'\r\n        } else {\r\n            typeProduct.state.map((value ,key) => {\r\n                 if (key === newValue - 1) {\r\n                    index = value._id.typeID\r\n                }\r\n                return true;\r\n            })\r\n        }\r\n        // console.log(typeProduct.state, typeProduct.state.length);\r\n        // // typeProduct.map(val => {\r\n        // //     console.log(val.name);\r\n        // // });\r\n\r\n        // for(var i = 0 ; i < typeProduct.state.length; i++)\r\n        // {\r\n        //     console.log(\"name:\", typeProduct.state[i].name)\r\n        // };\r\n        dispatch({\r\n            type: \"UPDATE_TYPE_CHOOSE\",\r\n            typeProductID: index,\r\n        })\r\n    };\r\n    return (\r\n        <Tabs\r\n            value={value}\r\n            onChange={handleChange}\r\n            variant=\"scrollable\"\r\n            scrollButtons=\"auto\"\r\n            aria-label=\"scrollable auto tabs example\"\r\n        >\r\n            <Tab  label=\"Tất cả\" />\r\n            {typeProduct.state \r\n                ?typeProduct.state.map(value => (\r\n                    <Tab  label={value.name} />))\r\n                :(null)\r\n            }\r\n        </Tabs>\r\n    );\r\n}\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\SearchBar.js",["474","475","476","477"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { MdClear} from \"react-icons/md\";\r\nimport { AiOutlineSearch } from \"react-icons/ai\";\r\nimport { withStyles } from '@material-ui/styles';\r\nimport classNames from \"classnames\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    // height: theme.spacing(6),\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    height: \"80px\",\r\n  },\r\n//   iconButton: {\r\n//     color: theme.palette.action.active,\r\n//     transform: \"scale(1, 1)\",\r\n//     transition: theme.transitions.create([\"transform\", \"color\"], {\r\n//       duration: theme.transitions.duration.shorter,\r\n//       easing: theme.transitions.easing.easeInOut,\r\n//     }),\r\n//   },\r\n  iconButtonHidden: {\r\n    transform: \"scale(0, 0)\",\r\n    \"& > $icon\": {\r\n      opacity: 0,\r\n    },\r\n  },\r\n  searchIconButton: {\r\n    // marginRight: theme.spacing(-6),\r\n  },\r\n//   icon: {\r\n//     transition: theme.transitions.create([\"opacity\"], {\r\n//       duration: theme.transitions.duration.shorter,\r\n//       easing: theme.transitions.easing.easeInOut,\r\n//     }),\r\n//   },\r\n  input: {\r\n    width: \"100%\",\r\n  },\r\n  searchContainer: {\r\n    margin: \"4px 8px 4px 8px\",\r\n    height: \"40px\",\r\n    // width: `calc(100% - ${theme.spacing(6 + 4)}px)`, // 6 button + 4 margin\r\n  },\r\n});\r\nconst SearchBar = React.forwardRef(\r\n  (\r\n    {\r\n      cancelOnEscape,\r\n      className,\r\n      classes,\r\n      closeIcon,\r\n      disabled,\r\n      onCancelSearch,\r\n      onRequestSearch,\r\n      searchIcon,\r\n      style,\r\n      ...inputProps\r\n    },\r\n    ref\r\n  ) => {\r\n    const inputRef = React.useRef();\r\n    const [value, setValue] = React.useState(inputProps.value);\r\n\r\n    React.useEffect(() => {\r\n      setValue(inputProps.value);\r\n    }, [inputProps.value]);\r\n\r\n    const handleFocus = React.useCallback(\r\n      (e) => {\r\n        if (inputProps.onFocus) {\r\n          inputProps.onFocus(e);\r\n        }\r\n      },\r\n      [inputProps.onFocus]\r\n    );\r\n\r\n    const handleBlur = React.useCallback(\r\n      (e) => {\r\n        setValue((v) => v.trim());\r\n        if (inputProps.onBlur) {\r\n          inputProps.onBlur(e);\r\n        }\r\n      },\r\n      [inputProps.onBlur]\r\n    );\r\n\r\n    const handleInput = React.useCallback(\r\n      (e) => {\r\n        setValue(e.target.value);\r\n        if (inputProps.onChange) {\r\n          inputProps.onChange(e.target.value);\r\n        }\r\n      },\r\n      [inputProps.onChange]\r\n    );\r\n\r\n    const handleCancel = React.useCallback(() => {\r\n      setValue(\"\");\r\n      if (onCancelSearch) {\r\n        onCancelSearch();\r\n      }\r\n    }, [onCancelSearch]);\r\n\r\n    const handleRequestSearch = React.useCallback(() => {\r\n      if (onRequestSearch) {\r\n        onRequestSearch(value);\r\n      }\r\n    }, [onRequestSearch, value]);\r\n\r\n    const handleKeyUp = React.useCallback(\r\n      (e) => {\r\n        if (e.charCode === 13 || e.key === \"Enter\") {\r\n          handleRequestSearch();\r\n        } else if (\r\n          cancelOnEscape &&\r\n          (e.charCode === 27 || e.key === \"Escape\")\r\n        ) {\r\n          handleCancel();\r\n        }\r\n        if (inputProps.onKeyUp) {\r\n          inputProps.onKeyUp(e);\r\n        }\r\n      },\r\n      [handleRequestSearch, cancelOnEscape, handleCancel, inputProps.onKeyUp]\r\n    );\r\n\r\n    React.useImperativeHandle(ref, () => ({\r\n      focus: () => {\r\n        inputRef.current.focus();\r\n      },\r\n      blur: () => {\r\n        inputRef.current.blur();\r\n      },\r\n    }));\r\n\r\n    return (\r\n      <Paper className={classNames(classes.root, className)} style={{height: '40px'}}>\r\n        <div className={classes.searchContainer}>\r\n          <Input\r\n            {...inputProps}\r\n            inputRef={inputRef}\r\n            onBlur={handleBlur}\r\n            value={value}\r\n            onChange={handleInput}\r\n            onKeyUp={handleKeyUp}\r\n            onFocus={handleFocus}\r\n            fullWidth\r\n            className={classes.input}\r\n            disableUnderline\r\n            disabled={disabled}\r\n          />\r\n        </div>\r\n        <IconButton\r\n          onClick={handleRequestSearch}\r\n          className={classNames(classes.iconButton, classes.searchIconButton, {\r\n            [classes.iconButtonHidden]: value !== \"\",\r\n          })}\r\n          disabled={disabled}\r\n        >\r\n          {React.cloneElement(searchIcon, {\r\n            classes: { root: classes.icon },\r\n          })}\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={handleCancel}\r\n          className={classNames(classes.iconButton, {\r\n            [classes.iconButtonHidden]: value === \"\",\r\n          })}\r\n          disabled={disabled}\r\n        >\r\n          {React.cloneElement(closeIcon, {\r\n            classes: { root: classes.icon },\r\n          })}\r\n        </IconButton>\r\n      </Paper>\r\n    );\r\n  }\r\n);\r\n\r\nSearchBar.defaultProps = {\r\n  className: \"\",\r\n  closeIcon: <MdClear/>,\r\n  disabled: false,\r\n  placeholder: \"Search\",\r\n  searchIcon: <AiOutlineSearch />,\r\n  style: null,\r\n  value: \"\",\r\n};\r\n\r\nSearchBar.propTypes = {\r\n  cancelOnEscape: PropTypes.bool,\r\n  classes: PropTypes.object.isRequired,\r\n  className: PropTypes.string,\r\n  closeIcon: PropTypes.node,\r\n  disabled: PropTypes.bool,\r\n  onCancelSearch: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n  onRequestSearch: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  searchIcon: PropTypes.node,\r\n  style: PropTypes.object,\r\n  value: PropTypes.string,\r\n};\r\n\r\nexport default withStyles(styles)(SearchBar);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ModalAdd.js",["478","479","480","481"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport TimePicker from '@mui/lab/TimePicker';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nclass ModalAdd extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        if (this.props.editShiftStatus) {\r\n            var _timeFrom = new Date();\r\n            if (this.props.objectEditShift.from.includes(\"PM\")) {\r\n                \r\n                var fromHour =  parseInt(this.props.objectEditShift.from.slice(0, this.props.objectEditShift.from.indexOf(':')));\r\n                var fromMin = parseInt(this.props.objectEditShift.from.slice(this.props.objectEditShift.from.indexOf(':') + 1));\r\n                _timeFrom.setHours(fromHour + 12, fromMin);\r\n            } else {\r\n                var fromHour =  parseInt(this.props.objectEditShift.from.slice(0, this.props.objectEditShift.from.indexOf(':')));\r\n                var fromMin = parseInt(this.props.objectEditShift.from.slice(this.props.objectEditShift.from.indexOf(':') + 1));\r\n                _timeFrom.setHours(fromHour , fromMin);\r\n            }\r\n           \r\n            var _timeTo = new Date();\r\n            if (this.props.objectEditShift.to.includes(\"PM\")) {\r\n                var toHour = parseInt(this.props.objectEditShift.to.slice(0, this.props.objectEditShift.to.indexOf(':')));\r\n                var toMin = parseInt(this.props.objectEditShift.to.slice(this.props.objectEditShift.to.indexOf(':') + 1));\r\n                _timeTo.setHours(toHour + 12, toMin);\r\n            } else {\r\n                var toHour = parseInt(this.props.objectEditShift.to.slice(0, this.props.objectEditShift.to.indexOf(':')));\r\n                var toMin = parseInt(this.props.objectEditShift.to.slice(this.props.objectEditShift.to.indexOf(':') + 1));\r\n                _timeTo.setHours(toHour, toMin);\r\n            }\r\n            \r\n        }\r\n\r\n        this.state = {\r\n            timeFrom: this.props.editShiftStatus ? _timeFrom : new Date(2018, 5, 35, 0, 0, 0),\r\n            timeTo: this.props.editShiftStatus ? _timeTo : new Date(2018, 5, 35, 0, 0, 0),\r\n            isSalary: false,\r\n            isDescription: false,\r\n            isTimeTo: false,\r\n            valueTime: this.props.editShiftStatus ? 1 : null,\r\n        }\r\n    }\r\n\r\n    descriptionShift = this.props.editShiftStatus ? this.props.objectEditShift.description : \"Ex : abc\"\r\n    timeFrom = this.props.editShiftStatus ? this.props.objectEditShift.from : \"00:00 AM\"\r\n    timeTo = this.props.editShiftStatus ? this.props.objectEditShift.to : \"00:00 AM\"\r\n    salary = this.props.editShiftStatus ? this.props.objectEditShift.salary : 10000\r\n\r\n    // Handle user\r\n    hanhleCancel = (e) => {\r\n        this.props.changeAddStatus();\r\n        if (this.props.editShiftStatus) {\r\n            this.props.changeEditShiftStatus();\r\n        }\r\n    }\r\n\r\n    changeTimeFrom = (e) => {\r\n        var hourse = e.getHours()\r\n        const minutes = e.getMinutes()\r\n        if (hourse >= 12) {\r\n            hourse = hourse - 12;\r\n            this.timeFrom = hourse.toString() + \":\" + minutes.toString() + \" PM\"\r\n        } else {\r\n            this.timeFrom = hourse.toString() + \":\" + minutes.toString() + \" AM\"\r\n        }\r\n        console.log(this.timeFrom);\r\n        this.setState({\r\n            timeFrom: e,\r\n        })\r\n    }\r\n\r\n    changeTimeTo = (e) => {\r\n        var hourse = e.getHours()\r\n        const minutes = e.getMinutes()\r\n        if (hourse >= 12) {\r\n            hourse = hourse - 12;\r\n            this.timeTo = hourse.toString() + \":\" + minutes.toString() + \" PM\"\r\n        } else {\r\n            this.timeTo = hourse.toString() + \":\" + minutes.toString() + \" AM\"\r\n        }\r\n        console.log(this.timeTo);\r\n        this.setState({\r\n            timeTo: e,\r\n        })\r\n    }\r\n\r\n    blurDiscription = (e) => {\r\n        this.descriptionShift = e.target.value;\r\n        if (e.target.value === \"\") {\r\n            this.setState({\r\n                isDescription: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isDescription: false,\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    // Tạo code để xác nhận\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    editShift = async () => {\r\n        if (this.state.timeTo - this.state.timeFrom < 1) {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('The time end must be greater than the time start', 'error')\r\n        }\r\n        if (!this.state.isSalary && !this.state.isDescription && (this.state.timeTo - this.state.timeFrom > 0)) {\r\n            var data = {\r\n                token: localStorage.getItem('token'),\r\n                idUser: this.props.infoUser.email,\r\n                id: this.props.objectEditShift.id,\r\n                salary: this.salary,\r\n                description: this.descriptionShift,\r\n                from: this.timeFrom,\r\n                to: this.timeTo,\r\n            }\r\n            await axios.post(`http://localhost:5000/api/profile/update-shift`, data)\r\n                .then(res => {\r\n                    if (res.data.token) {\r\n                        localStorage.setItem('token', res.data.token);\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(\"Edit shift success\", \"success\");\r\n                        this.props.updateShift(data);\r\n                    }\r\n                    this.props.changeEditShiftStatus();\r\n                    this.props.changeAddStatus();\r\n                })\r\n                .catch(err => {\r\n                    this.props.changeLoginStatus();\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n    blurSalary = (e) => {\r\n        if (e.target.value <= -1) {\r\n            this.setState({\r\n                isSalary: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isSalary: false,\r\n            })\r\n        }\r\n        this.salary = e.target.value;\r\n    }\r\n\r\n    // Call API\r\n    addShift = () => {\r\n        if (this.state.timeTo - this.state.timeFrom < 1) {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('The time end must be greater than the time start', 'error')\r\n        }\r\n        if (!this.state.isSalary && !this.state.isDescription && (this.state.timeTo - this.state.timeFrom > 0)) {\r\n            const code = this.makeCode(6);\r\n            const data = {\r\n                idUser: this.props.infoUser.email,\r\n                id: code,\r\n                salary: this.salary,\r\n                description: this.descriptionShift,\r\n                from: this.timeFrom,\r\n                to: this.timeTo,\r\n            }\r\n            const data1 = {\r\n                name: this.descriptionShift,\r\n                salary: this.salary,\r\n                timeFrom: this.timeFrom,\r\n                timeEnd: this.timeTo,\r\n                _id: { shiftID: code }\r\n            }\r\n            if (data) {\r\n                axios.post(`http://localhost:5000/api/profile/add-shift`, {\r\n                    email: this.props.infoUser.email,\r\n                    token: localStorage.getItem('token'),\r\n                    data: data,\r\n                })\r\n                    .then(res => {\r\n                        if (res.data.token) {\r\n                            this.props.addShift(data1);\r\n                            localStorage.setItem('token', res.data.token);\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(\"Add shift success\", \"success\");\r\n                        }\r\n                        this.props.changeAddStatus();\r\n                    })\r\n                    .catch(err => {\r\n                        this.props.changeLoginStatus();\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Create shift\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={12} xs={12}>\r\n                                <TextField\r\n                                    id=\"outlined-basic\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    defaultValue={(this.props.editShiftStatus ? this.props.objectEditShift.description : this.descriptionShift)}\r\n                                    onBlur={(e) => this.blurDiscription(e)}\r\n                                    label=\"Shift description\"\r\n                                    error={this.state.isDescription}\r\n                                    helperText={this.state.isDescription ? \"Enter something\" : \"\"}\r\n                                    required\r\n                                    type=\"text\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    onBlur={(e) => this.blurSalary(e)}\r\n                                    label=\"Salary\"\r\n                                    defaultValue={this.props.editShiftStatus ? this.props.objectEditShift.salary : this.salary}\r\n                                    error={this.state.isSalary}\r\n                                    helperText={this.state.isSalary ? \"Greater than 0\" : \"\"}\r\n                                    type=\"number\"\r\n                                    id=\"outlined-error-helper-text\"\r\n                                    name=\"salary\"\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                    <Stack spacing={3}>\r\n                                        <TimePicker\r\n                                            label=\"From\"\r\n                                            value={this.state.timeFrom}\r\n                                            onChange={(newValue) => this.changeTimeFrom(newValue)}\r\n                                            renderInput={(params) => <TextField {...params} />}\r\n                                        />\r\n                                        <TimePicker\r\n                                            label=\"To\"\r\n                                            value={this.state.timeTo}\r\n                                            onChange={(newValue) => this.changeTimeTo(newValue)}\r\n                                            renderInput={(params) => <TextField {...params} />}\r\n                                        />\r\n                                    </Stack>\r\n                                </LocalizationProvider>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        {this.props.editShiftStatus ? (\r\n                            <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.editShift()} variant=\"contained\" startIcon={<BiEdit />}>\r\n                                Save\r\n                            </Button>) : (\r\n                            <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.addShift()} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                                Add\r\n                            </Button>\r\n                        )}\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.hanhleCancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Cancel\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addStatus: state.addStatus,\r\n        infoUser: state.infoUser,\r\n        editShiftStatus: state.editShiftStatus,\r\n        objectEditShift: state.objectEditShift,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_STATUS\",\r\n            });\r\n        },\r\n        addShift: (data) => {\r\n            dispatch({\r\n                type: \"ADD_SHIFT\",\r\n                newShift: data,\r\n            })\r\n        },\r\n        changeEditShiftStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_SHIFT_STATUS\",\r\n            })\r\n        },\r\n        updateShift: (data) => {\r\n            dispatch({\r\n                type: \"OBJECT_UPDATE_SHIFT\",\r\n                data: data,\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalAdd);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileSetting.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodTable.js",["482","483","484","485","486"],"import * as React from 'react';\r\nimport { Component } from 'react';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport GoodRow from './TableRow';\r\n\r\nfunction createData(index, id, name, quantity, originalPrice, sellPrice, importTime, productType, imgUrl, unit) {\r\n    return {\r\n        index,\r\n        id,\r\n        name,\r\n        quantity,\r\n        sellPrice,\r\n        importTime,\r\n        imgLink: imgUrl,\r\n        hidden:\r\n        {\r\n            expires: '2020-01-05',\r\n            remaining: quantity,\r\n            originalPrice: originalPrice,\r\n            productType: productType,\r\n            unit: unit,\r\n        },\r\n    };\r\n}\r\n\r\n\r\nvar rows = [];\r\n\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    } \r\n})\r\n\r\n\r\nvar listProductInfor = [];\r\nvar joinTypeInfor = [];\r\nvar listTypeInfor = [];\r\n\r\nclass GoodTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            update: false\r\n        }\r\n        this.loadAllType();\r\n        this.loadAllGood();\r\n    }\r\n    removeProduct= (row) => {\r\n        // Đây là xử lý ở phía dữ liệu, có thể await gì đó.\r\n        // Xử lý ở phía giao diện(tạm)\r\n\r\n        // Đây là câu lệnh để update nhẹ\r\n        this.setState({update: this.state.update})\r\n    }\r\n    async loadAllGood() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                // alert(\"Lấy hết đc product ròi anh chai\");\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Get data và lưu các tên Type vào dữ liệU\r\n        //Get data và lưu các tên Type vào bảng\r\n        listProductInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listProductInfor.push(result[i]);\r\n        }\r\n        // Get hết từ cái productjoinType\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                storeID: this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })  \r\n        // Lấy các cái jointype\r\n        joinTypeInfor = [];\r\n        for(var i = 0 ; i < result.length; i++)\r\n        {\r\n            joinTypeInfor.push(result[i]);\r\n        }\r\n\r\n        //createData(index, id, name, quantity, originalPrice, sellPrice, importTime, productType, imgUrl)\r\n        // Cập nhật vào cái row đi cho chắc\r\n        rows = [];\r\n        for(var i = 0; i < listProductInfor.length ; i++)\r\n        {\r\n            var obj = listProductInfor[i];\r\n\r\n            var joinType = '';\r\n            // // Lấy tất cả các type trong cái product\r\n            for(var j = 0; j < joinTypeInfor.length ; j++)\r\n            {\r\n\r\n                // console.log(\"joinTypeInfor[]\", j ,joinTypeInfor[j])\r\n                if(joinTypeInfor[j]._id.productID == obj._id.productID)\r\n                {\r\n                    joinType = joinType + ' ' + this.getTypeNamebyTypeID(joinTypeInfor[j]._id.typeID);\r\n                }\r\n            }\r\n\r\n            rows.push(\r\n                createData((i+1), obj._id.productID, obj.name, obj.quantity, \r\n                    obj.importPrice, obj.sellPrice, obj._id.importDate, joinType, obj.imgUrl, obj.unit)\r\n            );\r\n            console.log(\"obj.imgUrl\",obj.imgUrl);\r\n        }\r\n        \r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                storeID: this.props.infoUser.email,\r\n            }   \r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        listTypeInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n\r\n        this.setState({change: true});\r\n    }\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName='';\r\n        for(var i = 0; i<listTypeInfor.length;i++)\r\n        {   \r\n            if(listTypeInfor[i]._id.typeID == typeID)\r\n            {\r\n                typeName = listTypeInfor[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div>\r\n                <TableContainer component={Paper}>\r\n                    <Table className={classes.goodTable} aria-label=\"collapsible table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Index</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ID</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">GoodName</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Quantity</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Sell Price</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ImportTime</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell}/>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows.map((row) => (\r\n                                <GoodRow key={row.name} row={row} />\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        confirmStatus: state.confirmStatus\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(GoodTable));\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ListShift.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ChangePassword.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Regulation.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileDetail.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileHeader.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButton.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\Statistic.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\Calendar.js",["487","488","489"],"import * as React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport StaticDateRangePicker from '@mui/lab/StaticDateRangePicker';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport default function StaticDateRangePickerDemo() {\r\n    const [value, setValue] = React.useState([new Date(2021, 2, 2), new Date(2021, 2, 5)]);\r\n    const [date, setDate] = React.useState(new Date(2021, 4, 2))\r\n\r\n    const value1 = [\r\n        { date: '2021/01/11', count:2 },\r\n        { date: '2021/04/12', count:2 },\r\n        { date: '2021/05/01', count:5 },\r\n        { date: '2021/05/02', count:5 },\r\n        { date: '2021/05/03', count:1 },\r\n        { date: '2021/05/04', count:11 },\r\n        { date: '2021/05/08', count:32 },\r\n      ];\r\n\r\n    return (\r\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n            <StaticDateRangePicker\r\n                displayStaticWrapperAs=\"desktop\"\r\n                value={value}\r\n                onChange={(date) => {\r\n                    setDate(date);\r\n                }}\r\n                renderInput={(startProps, endProps) => (\r\n                    <React.Fragment>\r\n                        <TextField {...startProps} />\r\n                        <Box sx={{ mx: 2 }}> to </Box>\r\n                        <TextField {...endProps} />\r\n                    </React.Fragment>\r\n                )}\r\n                calendars={4}\r\n                disableAutoMonthSwitching={true}\r\n            />\r\n        </LocalizationProvider>\r\n    );\r\n}\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddEmployeeModal.js",["490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507","508","509","510"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass AddEmployeeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            goodID : \"\",\r\n            change: false,\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n        }; \r\n    }\r\n    \r\n\r\n    cancel = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"ADD EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\" \r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>Old</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Gender</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Province</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.addEmployee()}>\r\n                                            Add employee\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEmployeeModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeTableHeader.js",["511","512"],"import PropTypes from 'prop-types';\r\n// material\r\nimport { visuallyHidden } from '@mui/utils';\r\nimport { Box, Checkbox, TableRow, TableCell, TableHead, TableSortLabel } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nEmployeeTableHeader.propTypes = {\r\n  order: PropTypes.oneOf(['asc', 'desc']),\r\n  orderBy: PropTypes.string,\r\n  rowCount: PropTypes.number,\r\n  headLabel: PropTypes.array,\r\n  numSelected: PropTypes.number,\r\n  onRequestSort: PropTypes.func,\r\n  onSelectAllClick: PropTypes.func\r\n};\r\n\r\nexport default function EmployeeTableHeader({\r\n  order,\r\n  orderBy,\r\n  rowCount,\r\n  headLabel,\r\n  numSelected,\r\n  onRequestSort,\r\n  onSelectAllClick\r\n}) {\r\n  // const createSortHandler = (property) => (event) => {\r\n  //   onRequestSort(event, property);\r\n  // };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            // indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            // checked={rowCount > 0 && numSelected === rowCount}\r\n            // onChange={onSelectAllClick}\r\n          />\r\n        </TableCell>\r\n        {headLabel.map((headCell) => (\r\n          <TableCell\r\n            // key={headCell.id}\r\n            // align={headCell.alignRight ? 'right' : 'left'}\r\n            // sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              // hideSortIcon\r\n              // active={orderBy === headCell.id}\r\n              // direction={orderBy === headCell.id ? order : 'asc'}\r\n              // onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n              {/* {orderBy === headCell.id ? (\r\n                <Box sx={{ ...visuallyHidden }}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null} */}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\fakeData.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateEmployeeModal.js",["513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529","530","531","532","533"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass UpdateEmployeeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            goodID : \"\",\r\n            change: false,\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n        }; \r\n    }\r\n    \r\n\r\n    cancel = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"UPDATE EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\" \r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>Old</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Gender</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Province</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.props.changeUpdateEmployeeStatus()}>\r\n                                            UPDATE employee\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateEmployeeModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeToolbar.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeMoreMenu.js",["534","535","536"],"import { Icon } from '@iconify/react';\r\nimport { useRef, useState } from 'react';\r\nimport editFill from '@iconify/icons-eva/edit-fill';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\r\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\r\nimport {GiPayMoney} from \"react-icons/gi\";\r\nimport {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\n// material\r\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nclass EmployeeMoreMenu extends Component {\r\n  // const ref = useRef(null);\r\n  // const [isOpen, setIsOpen] = useState(false);\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: 'false'\r\n    }\r\n  }\r\n  setIsOpen(val) {\r\n    this.isOpen = val;\r\n    this.setState({change: val});\r\n  }\r\n\r\n  edit() {\r\n    this.props.changeUpdateEmployeeStatus();\r\n  }\r\n\r\n  isOpen=false;\r\n  render() {\r\n    return (\r\n      <div\r\n        style={{\r\n          position:'relative'\r\n        }}\r\n      >\r\n        <IconButton onClick={() => this.setIsOpen(true)}>\r\n          <Icon icon={moreVerticalFill} width={20} height={20} />\r\n        </IconButton>\r\n  \r\n        <Menu\r\n          open={this.isOpen}\r\n          style={{\r\n            position:'absolute',\r\n            top: 0,\r\n            right: 0,\r\n          }}\r\n          onClose={() => this.setIsOpen(false)}\r\n          PaperProps={{\r\n            sx: { width: 200, maxWidth: '100%' }\r\n          }}\r\n          anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n          transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        >\r\n          <MenuItem sx={{ color: 'text.secondary' }}>\r\n            <ListItemIcon>\r\n              <Icon icon={trash2Outline} width={24} height={24} />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n  \r\n          <MenuItem sx={{ color: 'text.secondary' }}\r\n            onClick={() => this.edit()}\r\n          >\r\n            <ListItemIcon>\r\n              <Icon icon={editFill} width={24} height={24} />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Edit\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n          <MenuItem sx={{ color: 'text.secondary' }}\r\n            onClick={()=> this.props.changePayEmployeeStatus()}\r\n          >\r\n            <ListItemIcon>\r\n              <GiPayMoney size={24}/> \r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Pay money\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n        </Menu>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    updateEmployeeStatus: state.updateEmpoyeeStatus,\r\n    payEmployeeStatus: state.payEmployeeStatus,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n      changeUpdateEmployeeStatus: () => {\r\n          dispatch({\r\n              type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n          });\r\n      },\r\n      changePayEmployeeStatus: () => {\r\n        dispatch({\r\n            type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n        });\r\n    },\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\SearchNotFound.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Scrollbar.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Label.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Page.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\DarkMode.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\TableRow.js",["537","538","539","540"],"import * as React from 'react';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Image } from 'cloudinary-react';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport GoodImage from './goodExample.jpg';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { useDispatch } from 'react-redux'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    goodTable_Cell:{\r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    }\r\n}));\r\n\r\nfunction GoodRow(props) {\r\n    const { row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.index}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.id}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.name}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.quantity}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.sellPrice}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.importTime}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\r\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n                        {open ? (<KeyboardArrowUpIcon />) : (<KeyboardArrowDownIcon />)}\r\n                    </IconButton>\r\n                </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell className={classes.goodTable_Cell} style={{ padding: 0}} colSpan={8}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Box sx={{ margin: 1 }}>\r\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                Other information\r\n                            </Typography>\r\n                            <div style={{display: 'flex'}}>\r\n                                {  \r\n                                    row.imgLink == \"none\"\r\n                                    ? <div style={{width: '100px', height: '100px', objectFit:'cover'}}><img src={GoodImage} style={{width: '100px', height: '100px', objectFit:'cover'}}/></div>\r\n                                    \r\n                                    : <div style={{width: '100px', height: '100px', objectFit:'cover'}}><Image style={{width: '100px', height: '100px', objectFit:'cover'}} cloudName=\"databaseimg\" publicId={row.imgLink}>{row.imgLink}</Image></div>\r\n                                }\r\n                                \r\n                                \r\n                                <Table size=\"small\" aria-label=\"purchases\">\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell className={classes.goodTable_Cell}>Expired Day</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>Original Price</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>Good Remain</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>Product Type</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>Unit</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        <TableRow>\r\n                                            <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">\r\n                                                {row.hidden.expires}\r\n                                            </TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>{row.hidden.originalPrice}</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>{row.hidden.remaining}</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>{row.hidden.productType}</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>{row.hidden.unit}</TableCell>\r\n                                        </TableRow>\r\n                                    </TableBody>\r\n                                </Table>\r\n                                <div className=\"button-container\">\r\n                                    <Button \r\n                                        onClick={() => {\r\n                                            // Truyền cái data vào trong hàm đây luôn\r\n                                            dispatch({type: \"UPDATE_GOOD_DATA\", \r\n                                                _id: {\r\n                                                    productID: row.productID,\r\n                                                    importDate: row.importDate,\r\n                                                },\r\n                                                name: row.name,\r\n                                                imgUrl: row.imgUrl,\r\n                                                quantity: row.quantity,\r\n                                                remain: row.quantity,\r\n                                                unit: row.unit,\r\n                                                importPrice: row.hidden.originalPrice,\r\n                                                sellPrice: row.sellPrice,\r\n                                                expires: row.hidden.expires,  \r\n                                                unit: row.hidden.unit\r\n                                            });\r\n                                            console.log(\"đã thêm row vào cái redux\", row);\r\n                                            console.log(\"Giá gốc\",  row.hidden.originalPrice);\r\n                                            dispatch({ type: \"CHANGE_UPDATE_GOOD_STATUS\", });\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                    >\r\n                                        Update\r\n                                    </Button>\r\n                                    <Button variant=\"contained\">Delete</Button>\r\n                                </div>\r\n                            </div>  \r\n                        </Box>\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default GoodRow;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\BaseOptionChart.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\ShoppingBagsReducer.js",["541"],"\r\nconst shoppingBagsInitialState = [],\r\n    shoppingBagsReducer = (state = shoppingBagsInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"ADD_NEW_PRODUCT_SHOPPING_BAGS\": \r\n                return [...state, action.newProduct];\r\n            case \"RAISE_QUANTITY_SHOPPING_BAGS\":\r\n                return state.map(value => {\r\n                    if (value.product.name === action.name) {\r\n                        value.quantity += 1;\r\n                    }\r\n                    return value\r\n                })\r\n            case \"REDUCE_QUANTITY_SHOPPING_BAGS\":\r\n                return state.map(value => {\r\n                    if (value.product.name === action.name) {\r\n                        value.quantity -= 1;\r\n                    }\r\n                    return value\r\n                })\r\n            case \"DELETE_PRODUCT_SHOPPING_BAGS\":\r\n                return state.filter(value => {\r\n                    if (value.product.name !== action.name) {\r\n                        return value\r\n                    }\r\n                })\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default shoppingBagsReducer;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ShoppingBags.js",["542","543","544"],"import {React, useState} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport axios from 'axios';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { Grid} from '@mui/material';\r\nimport { FiChevronLeft, FiChevronRight } from \"react-icons/fi\";\r\nfunction ShoppingBags(props) {\r\n    const shoppingBags = useSelector(state => state.shoppingBags)\r\n    const infoUser = useSelector(state => state.infoUser)\r\n    const dispatch = useDispatch();\r\n\r\n    function raiseQuantity (name, currentQuantity, maxQuantity) {\r\n        if (currentQuantity < maxQuantity) {\r\n            dispatch({\r\n                type: \"RAISE_QUANTITY_SHOPPING_BAGS\",\r\n                name: name,\r\n            })\r\n        }\r\n    }\r\n\r\n    function reduceQuantity (name, quantity) {\r\n        if(quantity > 1) {\r\n            dispatch({\r\n                type: \"REDUCE_QUANTITY_SHOPPING_BAGS\",\r\n                name: name,\r\n            })\r\n        }\r\n    }\r\n\r\n    function deleteProduct(name) {\r\n        dispatch({\r\n            type: \"DELETE_PRODUCT_SHOPPING_BAGS\",\r\n            name: name,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div style={{width: '100%'}}>\r\n            {console.log(shoppingBags)}\r\n            {\r\n                (shoppingBags === []) ?\r\n                    (<div style={{ width: '100%', height: '100%', textAlign: 'center', marginTop: '100px' }}>\r\n                        <h3>Không có gì</h3>\r\n                    </div>) : shoppingBags.map((value, key) => (\r\n                        <Grid item className=\"customize-list-table\" style={{ backgroundColor: 'white', alignContent: 'center', justifyContent: 'center', paddingTop: '5px', paddingBottom: '5px' }} md={12} sm={12}>\r\n                            <Grid style={{ textAlign: 'center', alignItems: 'center', justifyItems: 'center' }} container spacing={0}>\r\n                                <Grid item md={1} sm={1}>\r\n                                    {key + 1}\r\n                                </Grid>\r\n                                <Grid item md={1} sm={1}>\r\n                                    <IconButton onClick={() => deleteProduct(value.product.name)} aria-label=\"delete\" size=\"small\">\r\n                                        <DeleteIcon />\r\n                                    </IconButton>\r\n                                </Grid>\r\n                                <Grid style={{ fontSize: '0.8rem', overflow: 'hidden' }} item md={4} sm={4}>\r\n                                    {value.product.name}\r\n                                </Grid>\r\n                                <Grid item md={3} sm={3}>\r\n                                    <IconButton onClick={() => reduceQuantity(value.product.name, value.quantity)} aria-label=\"delete\" size=\"small\">\r\n                                        <FiChevronLeft></FiChevronLeft>\r\n                                    </IconButton>\r\n                                    <input style={{ width: '35%', textAlign: 'center' }} value={value.quantity} type=\"text\" />\r\n                                    <IconButton onClick={() => raiseQuantity(value.product.name, value.quantity, value.product.quantity)} aria-label=\"delete\" size=\"small\">\r\n                                        <FiChevronRight></FiChevronRight>\r\n                                    </IconButton>\r\n                                </Grid>\r\n                                <Grid style={{ fontWeight: '700' }} item md={3} sm={3}>\r\n                                    {value.product.sellPrice * value.quantity}\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    ))\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShoppingBags;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Print.js",["545","546","547"],"import React from 'react';\r\nimport ReactToPrint from 'react-to-print';\r\nimport { connect } from 'react-redux';\r\nimport ComponentToPrint from './ComponentToPrint';\r\n\r\nclass Printf extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      percentDiscount: 0,\r\n    }\r\n  }\r\n\r\n  blurDiscount = (e) => {\r\n    if (e.target.value <= 100 && e.target.value >= 0) {\r\n      this.setState({\r\n        percentDiscount: e.target.value,\r\n      })\r\n    } else if (e.target.value < 0) {\r\n      this.setState({\r\n        percentDiscount: 0,\r\n      })\r\n    } else {\r\n      this.setState({\r\n        percentDiscount: 100,\r\n      })\r\n    }\r\n  }\r\n\r\n  changeDiscount = (e) => {\r\n    this.setState({\r\n      percentDiscount: e.target.value,\r\n    })\r\n  }\r\n\r\n  totalMoney = () => {\r\n    let total = 0;\r\n    this.props.shoppingBags.map(value => {\r\n      total += value.quantity * value.product.sellPrice;\r\n    })\r\n    return total.toLocaleString();\r\n  }\r\n\r\n  reduceMoney = () => {\r\n    let total = 0;\r\n    this.props.shoppingBags.map(value => {\r\n      total += value.quantity * value.product.sellPrice;\r\n    })\r\n    if (total !== 0) {\r\n      total = total*this.state.percentDiscount/100\r\n      return total.toLocaleString();\r\n    } \r\n    return total.toLocaleString();\r\n  }\r\n\r\n  totalFinalMoney = () => {\r\n    let total = 0;\r\n    this.props.shoppingBags.map(value => {\r\n      total += value.quantity * value.product.sellPrice;\r\n    })\r\n    if (total !== 0) {\r\n      total -= total*this.state.percentDiscount/100\r\n      return total.toLocaleString();\r\n    } \r\n    return total.toLocaleString();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div style={{ margin: '0px' }} className=\"row\">\r\n          <div className=\"col-10 offset-1\">\r\n            <div className=\"row\">\r\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\r\n                <p style={{}}>Total</p>\r\n              </div>\r\n              <div className=\"col-5\">\r\n                <p style={{ textAlign: 'end', marginBottom: '0', fontSize: '1.2rem' }}>{this.totalMoney()}</p>\r\n              </div>\r\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\r\n                <p>Discount (%)</p>\r\n              </div>\r\n              <div style={{ marginBottom: '10px' }} className=\"col-5\">\r\n                <input value={this.state.percentDiscount} onChange={(e) => this.changeDiscount(e)} onBlur={(e) => this.blurDiscount(e)} style={{ fontSize: '1.2rem', border: 'none', outline: 'none', textAlign: 'end', width: '100%', borderBottom: '1px solid black' }} min={0} max={100} type=\"number\"></input>\r\n              </div>\r\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\r\n                <p style={{}}>Reduce</p>\r\n              </div>\r\n              <div className=\"col-5\">\r\n                <p style={{ textAlign: 'end', marginBottom: '0', fontSize: '1.2rem' }}>-{this.reduceMoney()}</p>\r\n              </div>\r\n              <div className=\"col-7\">\r\n                <p style={{ margin: '0', fontSize: '1.2rem', fontWeight: '700' }}>TOTAL FINAL</p>\r\n              </div>\r\n              <div className=\"col-5\">\r\n                <p style={{ margin: '0', fontSize: '1.2rem', textAlign: 'end', color: 'green', fontWeight: '700' }}>{this.totalFinalMoney()}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"col-12\">\r\n            <ReactToPrint\r\n              trigger={() => {\r\n                return <div style={{ marginTop: '10px', borderRadius: '4px', fontWeight: '600', backgroundColor: '#37c737', textAlign: 'center', alignContent: 'center', padding: '15px 0', fontSize: '1.4rem' }}>\r\n                  PAY (F9)\r\n                </div>;\r\n              }}\r\n              content={() => this.componentRef}\r\n            />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Ẩn đi */}\r\n        <div style={{ display: 'none' }}>\r\n          <ComponentToPrint percentDiscount={this.state.percentDiscount} infoUser={this.props.infoUser} shoppingBags={this.props.shoppingBags} ref={el => (this.componentRef = el)} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    infoUser: state.infoUser,\r\n    shoppingBags: state.shoppingBags,\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Printf)",{"ruleId":"548","replacedBy":"549"},{"ruleId":"550","replacedBy":"551"},{"ruleId":"552","severity":1,"message":"553","line":10,"column":10,"nodeType":"554","messageId":"555","endLine":10,"endColumn":24},{"ruleId":"556","severity":1,"message":"557","line":13,"column":3,"nodeType":"558","messageId":"559","endLine":15,"endColumn":4},{"ruleId":"560","severity":1,"message":"561","line":94,"column":28,"nodeType":"562","messageId":"563","endLine":94,"endColumn":29,"suggestions":"564"},{"ruleId":"560","severity":1,"message":"561","line":94,"column":44,"nodeType":"562","messageId":"563","endLine":94,"endColumn":45,"suggestions":"565"},{"ruleId":"552","severity":1,"message":"566","line":13,"column":8,"nodeType":"554","messageId":"555","endLine":13,"endColumn":13},{"ruleId":"552","severity":1,"message":"567","line":3,"column":5,"nodeType":"554","messageId":"555","endLine":3,"endColumn":12},{"ruleId":"552","severity":1,"message":"568","line":8,"column":8,"nodeType":"554","messageId":"555","endLine":8,"endColumn":13},{"ruleId":"552","severity":1,"message":"553","line":9,"column":10,"nodeType":"554","messageId":"555","endLine":9,"endColumn":24},{"ruleId":"552","severity":1,"message":"569","line":9,"column":26,"nodeType":"554","messageId":"555","endLine":9,"endColumn":35},{"ruleId":"552","severity":1,"message":"570","line":13,"column":8,"nodeType":"554","messageId":"555","endLine":13,"endColumn":15},{"ruleId":"560","severity":1,"message":"561","line":106,"column":30,"nodeType":"562","messageId":"563","endLine":106,"endColumn":31,"suggestions":"571"},{"ruleId":"560","severity":1,"message":"561","line":106,"column":46,"nodeType":"562","messageId":"563","endLine":106,"endColumn":47,"suggestions":"572"},{"ruleId":"552","severity":1,"message":"570","line":6,"column":8,"nodeType":"554","messageId":"555","endLine":6,"endColumn":15},{"ruleId":"560","severity":1,"message":"561","line":97,"column":28,"nodeType":"562","messageId":"563","endLine":97,"endColumn":29,"suggestions":"573"},{"ruleId":"560","severity":1,"message":"561","line":97,"column":44,"nodeType":"562","messageId":"563","endLine":97,"endColumn":45,"suggestions":"574"},{"ruleId":"552","severity":1,"message":"575","line":9,"column":11,"nodeType":"554","messageId":"555","endLine":9,"endColumn":32},{"ruleId":"576","severity":1,"message":"577","line":96,"column":29,"nodeType":"578","endLine":96,"endColumn":159},{"ruleId":"579","severity":1,"message":"580","line":103,"column":57,"nodeType":"581","messageId":"582","endLine":103,"endColumn":59},{"ruleId":"579","severity":1,"message":"580","line":123,"column":57,"nodeType":"581","messageId":"582","endLine":123,"endColumn":59},{"ruleId":"583","severity":1,"message":"584","line":170,"column":25,"nodeType":"578","endLine":175,"endColumn":26},{"ruleId":"583","severity":1,"message":"585","line":181,"column":25,"nodeType":"578","endLine":181,"endColumn":134},{"ruleId":"552","severity":1,"message":"586","line":2,"column":8,"nodeType":"554","messageId":"555","endLine":2,"endColumn":12},{"ruleId":"552","severity":1,"message":"587","line":3,"column":8,"nodeType":"554","messageId":"555","endLine":3,"endColumn":13},{"ruleId":"552","severity":1,"message":"588","line":4,"column":8,"nodeType":"554","messageId":"555","endLine":4,"endColumn":17},{"ruleId":"552","severity":1,"message":"589","line":5,"column":8,"nodeType":"554","messageId":"555","endLine":5,"endColumn":22},{"ruleId":"552","severity":1,"message":"590","line":7,"column":10,"nodeType":"554","messageId":"555","endLine":7,"endColumn":22},{"ruleId":"552","severity":1,"message":"591","line":25,"column":8,"nodeType":"554","messageId":"555","endLine":25,"endColumn":23},{"ruleId":"552","severity":1,"message":"592","line":48,"column":5,"nodeType":"554","messageId":"555","endLine":48,"endColumn":15},{"ruleId":"552","severity":1,"message":"593","line":109,"column":121,"nodeType":"554","messageId":"555","endLine":109,"endColumn":131},{"ruleId":"594","severity":1,"message":"595","line":166,"column":21,"nodeType":"596","messageId":"597","endLine":169,"endColumn":23},{"ruleId":"552","severity":1,"message":"593","line":207,"column":121,"nodeType":"554","messageId":"555","endLine":207,"endColumn":131},{"ruleId":"552","severity":1,"message":"598","line":8,"column":8,"nodeType":"554","messageId":"555","endLine":8,"endColumn":19},{"ruleId":"552","severity":1,"message":"599","line":2,"column":10,"nodeType":"554","messageId":"555","endLine":2,"endColumn":18},{"ruleId":"552","severity":1,"message":"600","line":2,"column":8,"nodeType":"554","messageId":"555","endLine":2,"endColumn":20},{"ruleId":"552","severity":1,"message":"601","line":4,"column":8,"nodeType":"554","messageId":"555","endLine":4,"endColumn":24},{"ruleId":"552","severity":1,"message":"602","line":15,"column":10,"nodeType":"554","messageId":"555","endLine":15,"endColumn":15},{"ruleId":"603","severity":1,"message":"604","line":45,"column":44,"nodeType":"605","messageId":"606","endLine":45,"endColumn":46},{"ruleId":"607","severity":1,"message":"608","line":143,"column":18,"nodeType":"554","messageId":"609","endLine":143,"endColumn":19},{"ruleId":"579","severity":1,"message":"580","line":147,"column":52,"nodeType":"581","messageId":"582","endLine":147,"endColumn":54},{"ruleId":"603","severity":1,"message":"610","line":184,"column":89,"nodeType":"605","messageId":"611","endLine":184,"endColumn":91},{"ruleId":"579","severity":1,"message":"580","line":196,"column":78,"nodeType":"581","messageId":"582","endLine":196,"endColumn":80},{"ruleId":"552","severity":1,"message":"612","line":6,"column":10,"nodeType":"554","messageId":"555","endLine":6,"endColumn":20},{"ruleId":"552","severity":1,"message":"613","line":6,"column":30,"nodeType":"554","messageId":"555","endLine":6,"endColumn":35},{"ruleId":"552","severity":1,"message":"614","line":11,"column":8,"nodeType":"554","messageId":"555","endLine":11,"endColumn":17},{"ruleId":"607","severity":1,"message":"608","line":182,"column":17,"nodeType":"554","messageId":"609","endLine":182,"endColumn":18},{"ruleId":"579","severity":1,"message":"580","line":230,"column":44,"nodeType":"581","messageId":"582","endLine":230,"endColumn":46},{"ruleId":"579","severity":1,"message":"580","line":259,"column":140,"nodeType":"581","messageId":"582","endLine":259,"endColumn":142},{"ruleId":"579","severity":1,"message":"580","line":454,"column":69,"nodeType":"581","messageId":"582","endLine":454,"endColumn":71},{"ruleId":"579","severity":1,"message":"615","line":483,"column":81,"nodeType":"581","messageId":"582","endLine":483,"endColumn":83},{"ruleId":"552","severity":1,"message":"616","line":2,"column":28,"nodeType":"554","messageId":"555","endLine":2,"endColumn":35},{"ruleId":"552","severity":1,"message":"617","line":2,"column":54,"nodeType":"554","messageId":"555","endLine":2,"endColumn":57},{"ruleId":"552","severity":1,"message":"618","line":2,"column":59,"nodeType":"554","messageId":"555","endLine":2,"endColumn":70},{"ruleId":"552","severity":1,"message":"612","line":2,"column":80,"nodeType":"554","messageId":"555","endLine":2,"endColumn":90},{"ruleId":"552","severity":1,"message":"619","line":4,"column":10,"nodeType":"554","messageId":"555","endLine":4,"endColumn":23},{"ruleId":"552","severity":1,"message":"620","line":4,"column":25,"nodeType":"554","messageId":"555","endLine":4,"endColumn":31},{"ruleId":"552","severity":1,"message":"621","line":5,"column":8,"nodeType":"554","messageId":"555","endLine":5,"endColumn":13},{"ruleId":"552","severity":1,"message":"622","line":6,"column":10,"nodeType":"554","messageId":"555","endLine":6,"endColumn":18},{"ruleId":"552","severity":1,"message":"623","line":7,"column":8,"nodeType":"554","messageId":"555","endLine":7,"endColumn":14},{"ruleId":"552","severity":1,"message":"624","line":8,"column":8,"nodeType":"554","messageId":"555","endLine":8,"endColumn":16},{"ruleId":"552","severity":1,"message":"625","line":9,"column":8,"nodeType":"554","messageId":"555","endLine":9,"endColumn":19},{"ruleId":"552","severity":1,"message":"566","line":11,"column":8,"nodeType":"554","messageId":"555","endLine":11,"endColumn":13},{"ruleId":"552","severity":1,"message":"626","line":14,"column":8,"nodeType":"554","messageId":"555","endLine":14,"endColumn":28},{"ruleId":"552","severity":1,"message":"627","line":15,"column":8,"nodeType":"554","messageId":"555","endLine":15,"endColumn":22},{"ruleId":"552","severity":1,"message":"628","line":16,"column":8,"nodeType":"554","messageId":"555","endLine":16,"endColumn":18},{"ruleId":"552","severity":1,"message":"629","line":17,"column":8,"nodeType":"554","messageId":"555","endLine":17,"endColumn":22},{"ruleId":"552","severity":1,"message":"630","line":18,"column":10,"nodeType":"554","messageId":"555","endLine":18,"endColumn":26},{"ruleId":"552","severity":1,"message":"631","line":19,"column":8,"nodeType":"554","messageId":"555","endLine":19,"endColumn":18},{"ruleId":"552","severity":1,"message":"632","line":21,"column":5,"nodeType":"554","messageId":"555","endLine":21,"endColumn":17},{"ruleId":"552","severity":1,"message":"633","line":25,"column":5,"nodeType":"554","messageId":"555","endLine":25,"endColumn":12},{"ruleId":"579","severity":1,"message":"580","line":81,"column":127,"nodeType":"581","messageId":"582","endLine":81,"endColumn":129},{"ruleId":"552","severity":1,"message":"634","line":2,"column":43,"nodeType":"554","messageId":"555","endLine":2,"endColumn":52},{"ruleId":"552","severity":1,"message":"620","line":4,"column":25,"nodeType":"554","messageId":"555","endLine":4,"endColumn":31},{"ruleId":"552","severity":1,"message":"566","line":7,"column":8,"nodeType":"554","messageId":"555","endLine":7,"endColumn":13},{"ruleId":"556","severity":1,"message":"557","line":10,"column":5,"nodeType":"558","messageId":"559","endLine":12,"endColumn":6},{"ruleId":"635","severity":1,"message":"636","line":26,"column":9,"nodeType":"637","messageId":"638","endLine":32,"endColumn":10},{"ruleId":"639","severity":1,"message":"640","line":30,"column":13,"nodeType":"641","messageId":"642","endLine":31,"endColumn":67},{"ruleId":"552","severity":1,"message":"634","line":2,"column":43,"nodeType":"554","messageId":"555","endLine":2,"endColumn":52},{"ruleId":"552","severity":1,"message":"619","line":4,"column":10,"nodeType":"554","messageId":"555","endLine":4,"endColumn":23},{"ruleId":"552","severity":1,"message":"643","line":9,"column":8,"nodeType":"554","messageId":"555","endLine":9,"endColumn":20},{"ruleId":"607","severity":1,"message":"608","line":94,"column":17,"nodeType":"554","messageId":"609","endLine":94,"endColumn":18},{"ruleId":"552","severity":1,"message":"616","line":2,"column":28,"nodeType":"554","messageId":"555","endLine":2,"endColumn":35},{"ruleId":"552","severity":1,"message":"617","line":2,"column":54,"nodeType":"554","messageId":"555","endLine":2,"endColumn":57},{"ruleId":"552","severity":1,"message":"618","line":2,"column":59,"nodeType":"554","messageId":"555","endLine":2,"endColumn":70},{"ruleId":"552","severity":1,"message":"612","line":2,"column":80,"nodeType":"554","messageId":"555","endLine":2,"endColumn":90},{"ruleId":"552","severity":1,"message":"619","line":4,"column":10,"nodeType":"554","messageId":"555","endLine":4,"endColumn":23},{"ruleId":"552","severity":1,"message":"620","line":4,"column":25,"nodeType":"554","messageId":"555","endLine":4,"endColumn":31},{"ruleId":"552","severity":1,"message":"621","line":5,"column":8,"nodeType":"554","messageId":"555","endLine":5,"endColumn":13},{"ruleId":"552","severity":1,"message":"622","line":6,"column":10,"nodeType":"554","messageId":"555","endLine":6,"endColumn":18},{"ruleId":"552","severity":1,"message":"614","line":13,"column":8,"nodeType":"554","messageId":"555","endLine":13,"endColumn":17},{"ruleId":"552","severity":1,"message":"628","line":18,"column":8,"nodeType":"554","messageId":"555","endLine":18,"endColumn":18},{"ruleId":"579","severity":1,"message":"580","line":185,"column":127,"nodeType":"581","messageId":"582","endLine":185,"endColumn":129},{"ruleId":"579","severity":1,"message":"580","line":396,"column":72,"nodeType":"581","messageId":"582","endLine":396,"endColumn":74},{"ruleId":"579","severity":1,"message":"615","line":425,"column":85,"nodeType":"581","messageId":"582","endLine":425,"endColumn":87},{"ruleId":"552","severity":1,"message":"568","line":2,"column":80,"nodeType":"554","messageId":"555","endLine":2,"endColumn":85},{"ruleId":"552","severity":1,"message":"620","line":4,"column":25,"nodeType":"554","messageId":"555","endLine":4,"endColumn":31},{"ruleId":"552","severity":1,"message":"644","line":6,"column":20,"nodeType":"554","messageId":"555","endLine":6,"endColumn":33},{"ruleId":"579","severity":1,"message":"580","line":54,"column":45,"nodeType":"581","messageId":"582","endLine":54,"endColumn":47},{"ruleId":"579","severity":1,"message":"580","line":85,"column":37,"nodeType":"581","messageId":"582","endLine":85,"endColumn":39},{"ruleId":"579","severity":1,"message":"580","line":87,"column":66,"nodeType":"581","messageId":"582","endLine":87,"endColumn":68},{"ruleId":"579","severity":1,"message":"580","line":98,"column":27,"nodeType":"581","messageId":"582","endLine":98,"endColumn":29},{"ruleId":"579","severity":1,"message":"580","line":119,"column":45,"nodeType":"581","messageId":"582","endLine":119,"endColumn":47},{"ruleId":"552","severity":1,"message":"645","line":1,"column":10,"nodeType":"554","messageId":"555","endLine":1,"endColumn":17},{"ruleId":"552","severity":1,"message":"646","line":3,"column":10,"nodeType":"554","messageId":"555","endLine":3,"endColumn":22},{"ruleId":"603","severity":1,"message":"604","line":33,"column":43,"nodeType":"605","messageId":"606","endLine":33,"endColumn":45},{"ruleId":"603","severity":1,"message":"604","line":41,"column":43,"nodeType":"605","messageId":"606","endLine":41,"endColumn":45},{"ruleId":"552","severity":1,"message":"647","line":5,"column":10,"nodeType":"554","messageId":"555","endLine":5,"endColumn":15},{"ruleId":"648","severity":1,"message":"649","line":79,"column":7,"nodeType":"650","endLine":79,"endColumn":27,"suggestions":"651"},{"ruleId":"648","severity":1,"message":"649","line":89,"column":7,"nodeType":"650","endLine":89,"endColumn":26,"suggestions":"652"},{"ruleId":"648","severity":1,"message":"649","line":99,"column":7,"nodeType":"650","endLine":99,"endColumn":28,"suggestions":"653"},{"ruleId":"648","severity":1,"message":"649","line":129,"column":7,"nodeType":"650","endLine":129,"endColumn":78,"suggestions":"654"},{"ruleId":"607","severity":1,"message":"655","line":24,"column":21,"nodeType":"554","messageId":"609","endLine":24,"endColumn":29},{"ruleId":"607","severity":1,"message":"656","line":25,"column":21,"nodeType":"554","messageId":"609","endLine":25,"endColumn":28},{"ruleId":"607","severity":1,"message":"657","line":35,"column":21,"nodeType":"554","messageId":"609","endLine":35,"endColumn":27},{"ruleId":"607","severity":1,"message":"658","line":36,"column":21,"nodeType":"554","messageId":"609","endLine":36,"endColumn":26},{"ruleId":"552","severity":1,"message":"659","line":100,"column":15,"nodeType":"554","messageId":"555","endLine":100,"endColumn":20},{"ruleId":"607","severity":1,"message":"608","line":118,"column":17,"nodeType":"554","messageId":"609","endLine":118,"endColumn":18},{"ruleId":"607","severity":1,"message":"608","line":126,"column":17,"nodeType":"554","messageId":"609","endLine":126,"endColumn":18},{"ruleId":"579","severity":1,"message":"580","line":136,"column":51,"nodeType":"581","messageId":"582","endLine":136,"endColumn":53},{"ruleId":"579","severity":1,"message":"580","line":185,"column":44,"nodeType":"581","messageId":"582","endLine":185,"endColumn":46},{"ruleId":"552","severity":1,"message":"660","line":9,"column":19,"nodeType":"554","messageId":"555","endLine":9,"endColumn":27},{"ruleId":"552","severity":1,"message":"661","line":10,"column":12,"nodeType":"554","messageId":"555","endLine":10,"endColumn":16},{"ruleId":"552","severity":1,"message":"662","line":12,"column":11,"nodeType":"554","messageId":"555","endLine":12,"endColumn":17},{"ruleId":"552","severity":1,"message":"616","line":2,"column":28,"nodeType":"554","messageId":"555","endLine":2,"endColumn":35},{"ruleId":"552","severity":1,"message":"617","line":2,"column":54,"nodeType":"554","messageId":"555","endLine":2,"endColumn":57},{"ruleId":"552","severity":1,"message":"618","line":2,"column":59,"nodeType":"554","messageId":"555","endLine":2,"endColumn":70},{"ruleId":"552","severity":1,"message":"612","line":2,"column":80,"nodeType":"554","messageId":"555","endLine":2,"endColumn":90},{"ruleId":"552","severity":1,"message":"619","line":4,"column":10,"nodeType":"554","messageId":"555","endLine":4,"endColumn":23},{"ruleId":"552","severity":1,"message":"620","line":4,"column":25,"nodeType":"554","messageId":"555","endLine":4,"endColumn":31},{"ruleId":"552","severity":1,"message":"621","line":5,"column":8,"nodeType":"554","messageId":"555","endLine":5,"endColumn":13},{"ruleId":"552","severity":1,"message":"622","line":6,"column":10,"nodeType":"554","messageId":"555","endLine":6,"endColumn":18},{"ruleId":"552","severity":1,"message":"623","line":7,"column":8,"nodeType":"554","messageId":"555","endLine":7,"endColumn":14},{"ruleId":"552","severity":1,"message":"624","line":8,"column":8,"nodeType":"554","messageId":"555","endLine":8,"endColumn":16},{"ruleId":"552","severity":1,"message":"625","line":9,"column":8,"nodeType":"554","messageId":"555","endLine":9,"endColumn":19},{"ruleId":"552","severity":1,"message":"566","line":11,"column":8,"nodeType":"554","messageId":"555","endLine":11,"endColumn":13},{"ruleId":"552","severity":1,"message":"626","line":14,"column":8,"nodeType":"554","messageId":"555","endLine":14,"endColumn":28},{"ruleId":"552","severity":1,"message":"627","line":15,"column":8,"nodeType":"554","messageId":"555","endLine":15,"endColumn":22},{"ruleId":"552","severity":1,"message":"628","line":16,"column":8,"nodeType":"554","messageId":"555","endLine":16,"endColumn":18},{"ruleId":"552","severity":1,"message":"629","line":17,"column":8,"nodeType":"554","messageId":"555","endLine":17,"endColumn":22},{"ruleId":"552","severity":1,"message":"630","line":18,"column":10,"nodeType":"554","messageId":"555","endLine":18,"endColumn":26},{"ruleId":"552","severity":1,"message":"631","line":19,"column":8,"nodeType":"554","messageId":"555","endLine":19,"endColumn":18},{"ruleId":"552","severity":1,"message":"632","line":21,"column":5,"nodeType":"554","messageId":"555","endLine":21,"endColumn":17},{"ruleId":"552","severity":1,"message":"633","line":25,"column":5,"nodeType":"554","messageId":"555","endLine":25,"endColumn":12},{"ruleId":"579","severity":1,"message":"580","line":81,"column":127,"nodeType":"581","messageId":"582","endLine":81,"endColumn":129},{"ruleId":"552","severity":1,"message":"663","line":3,"column":10,"nodeType":"554","messageId":"555","endLine":3,"endColumn":24},{"ruleId":"552","severity":1,"message":"617","line":4,"column":10,"nodeType":"554","messageId":"555","endLine":4,"endColumn":13},{"ruleId":"552","severity":1,"message":"616","line":2,"column":28,"nodeType":"554","messageId":"555","endLine":2,"endColumn":35},{"ruleId":"552","severity":1,"message":"617","line":2,"column":54,"nodeType":"554","messageId":"555","endLine":2,"endColumn":57},{"ruleId":"552","severity":1,"message":"618","line":2,"column":59,"nodeType":"554","messageId":"555","endLine":2,"endColumn":70},{"ruleId":"552","severity":1,"message":"612","line":2,"column":80,"nodeType":"554","messageId":"555","endLine":2,"endColumn":90},{"ruleId":"552","severity":1,"message":"619","line":4,"column":10,"nodeType":"554","messageId":"555","endLine":4,"endColumn":23},{"ruleId":"552","severity":1,"message":"620","line":4,"column":25,"nodeType":"554","messageId":"555","endLine":4,"endColumn":31},{"ruleId":"552","severity":1,"message":"621","line":5,"column":8,"nodeType":"554","messageId":"555","endLine":5,"endColumn":13},{"ruleId":"552","severity":1,"message":"622","line":6,"column":10,"nodeType":"554","messageId":"555","endLine":6,"endColumn":18},{"ruleId":"552","severity":1,"message":"623","line":7,"column":8,"nodeType":"554","messageId":"555","endLine":7,"endColumn":14},{"ruleId":"552","severity":1,"message":"624","line":8,"column":8,"nodeType":"554","messageId":"555","endLine":8,"endColumn":16},{"ruleId":"552","severity":1,"message":"625","line":9,"column":8,"nodeType":"554","messageId":"555","endLine":9,"endColumn":19},{"ruleId":"552","severity":1,"message":"566","line":11,"column":8,"nodeType":"554","messageId":"555","endLine":11,"endColumn":13},{"ruleId":"552","severity":1,"message":"626","line":14,"column":8,"nodeType":"554","messageId":"555","endLine":14,"endColumn":28},{"ruleId":"552","severity":1,"message":"627","line":15,"column":8,"nodeType":"554","messageId":"555","endLine":15,"endColumn":22},{"ruleId":"552","severity":1,"message":"628","line":16,"column":8,"nodeType":"554","messageId":"555","endLine":16,"endColumn":18},{"ruleId":"552","severity":1,"message":"629","line":17,"column":8,"nodeType":"554","messageId":"555","endLine":17,"endColumn":22},{"ruleId":"552","severity":1,"message":"630","line":18,"column":10,"nodeType":"554","messageId":"555","endLine":18,"endColumn":26},{"ruleId":"552","severity":1,"message":"631","line":19,"column":8,"nodeType":"554","messageId":"555","endLine":19,"endColumn":18},{"ruleId":"552","severity":1,"message":"632","line":21,"column":5,"nodeType":"554","messageId":"555","endLine":21,"endColumn":17},{"ruleId":"552","severity":1,"message":"633","line":25,"column":5,"nodeType":"554","messageId":"555","endLine":25,"endColumn":12},{"ruleId":"579","severity":1,"message":"580","line":81,"column":127,"nodeType":"581","messageId":"582","endLine":81,"endColumn":129},{"ruleId":"552","severity":1,"message":"664","line":2,"column":10,"nodeType":"554","messageId":"555","endLine":2,"endColumn":16},{"ruleId":"552","severity":1,"message":"665","line":2,"column":18,"nodeType":"554","messageId":"555","endLine":2,"endColumn":26},{"ruleId":"552","severity":1,"message":"666","line":4,"column":18,"nodeType":"554","messageId":"555","endLine":4,"endColumn":28},{"ruleId":"552","severity":1,"message":"667","line":15,"column":8,"nodeType":"554","messageId":"555","endLine":15,"endColumn":22},{"ruleId":"579","severity":1,"message":"580","line":57,"column":49,"nodeType":"581","messageId":"582","endLine":57,"endColumn":51},{"ruleId":"576","severity":1,"message":"577","line":58,"column":105,"nodeType":"578","endLine":58,"endColumn":188},{"ruleId":"668","severity":1,"message":"669","line":103,"column":49,"nodeType":"670","messageId":"582","endLine":103,"endColumn":53},{"ruleId":"603","severity":1,"message":"610","line":22,"column":43,"nodeType":"605","messageId":"611","endLine":22,"endColumn":45},{"ruleId":"552","severity":1,"message":"665","line":1,"column":16,"nodeType":"554","messageId":"555","endLine":1,"endColumn":24},{"ruleId":"552","severity":1,"message":"566","line":3,"column":8,"nodeType":"554","messageId":"555","endLine":3,"endColumn":13},{"ruleId":"552","severity":1,"message":"671","line":10,"column":11,"nodeType":"554","messageId":"555","endLine":10,"endColumn":19},{"ruleId":"603","severity":1,"message":"604","line":38,"column":39,"nodeType":"605","messageId":"606","endLine":38,"endColumn":41},{"ruleId":"603","severity":1,"message":"604","line":46,"column":39,"nodeType":"605","messageId":"606","endLine":46,"endColumn":41},{"ruleId":"603","severity":1,"message":"604","line":58,"column":39,"nodeType":"605","messageId":"606","endLine":58,"endColumn":41},"no-native-reassign",["672"],"no-negated-in-lhs",["673"],"no-unused-vars","'FiChevronRight' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["674","675"],["676","677"],"'axios' is defined but never used.","'NavLink' is defined but never used.","'Alert' is defined but never used.","'FiXSquare' is defined but never used.","'emailjs' is defined but never used.",["678","679"],["680","681"],["682","683"],["684","685"],"'statusConfirmPassword' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Page' is defined but never used.","'Label' is defined but never used.","'Scrollbar' is defined but never used.","'SearchNotFound' is defined but never used.","'sentenceCase' is defined but never used.","'EmployeeToolbar' is defined but never used.","'filterName' is assigned a value but never used.","'isVerified' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'SplitButton' is defined but never used.","'DataGrid' is defined but never used.","'ReactToPrint' is defined but never used.","'ComponentToPrint' is defined but never used.","'Image' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-redeclare","'i' is already defined.","redeclared","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","'InputLabel' is defined but never used.","'Modal' is defined but never used.","'GoodImage' is defined but never used.","Expected '!==' and instead saw '!='.","'Divider' is defined but never used.","'Box' is defined but never used.","'CardContent' is defined but never used.","'BiPlusMedical' is defined but never used.","'BiEdit' is defined but never used.","'Stack' is defined but never used.","'GiCancel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'FormControl' is defined but never used.","'LocalizationProvider' is defined but never used.","'AdapterDateFns' is defined but never used.","'DatePicker' is defined but never used.","'DateTimePicker' is defined but never used.","'AiFillPlusCircle' is defined but never used.","'CancelIcon' is defined but never used.","'productTypes' is assigned a value but never used.","'typeSet' is assigned a value but never used.","'TextField' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'AddTypeModal' is defined but never used.","'GiVampireCape' is defined but never used.","'connect' is defined but never used.","'borderBottom' is defined but never used.","'Table' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useCallback has a missing dependency: 'inputProps'. Either include it or remove the dependency array.","ArrayExpression",["686"],["687"],["688"],["689"],"'fromHour' is already defined.","'fromMin' is already defined.","'toHour' is already defined.","'toMin' is already defined.","'data1' is assigned a value but never used.","'setValue' is assigned a value but never used.","'date' is assigned a value but never used.","'value1' is assigned a value but never used.","'visuallyHidden' is defined but never used.","'useRef' is defined but never used.","'useState' is defined but never used.","'RouterLink' is defined but never used.","'TableContainer' is defined but never used.","no-dupe-keys","Duplicate key 'unit'.","ObjectExpression","'infoUser' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"messageId":"690","fix":"691","desc":"692"},{"messageId":"693","fix":"694","desc":"695"},{"messageId":"690","fix":"696","desc":"692"},{"messageId":"693","fix":"697","desc":"695"},{"messageId":"690","fix":"698","desc":"692"},{"messageId":"693","fix":"699","desc":"695"},{"messageId":"690","fix":"700","desc":"692"},{"messageId":"693","fix":"701","desc":"695"},{"messageId":"690","fix":"702","desc":"692"},{"messageId":"693","fix":"703","desc":"695"},{"messageId":"690","fix":"704","desc":"692"},{"messageId":"693","fix":"705","desc":"695"},{"desc":"706","fix":"707"},{"desc":"706","fix":"708"},{"desc":"706","fix":"709"},{"desc":"710","fix":"711"},"removeEscape",{"range":"712","text":"713"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"714","text":"715"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"716","text":"713"},{"range":"717","text":"715"},{"range":"718","text":"713"},{"range":"719","text":"715"},{"range":"720","text":"713"},{"range":"721","text":"715"},{"range":"722","text":"713"},{"range":"723","text":"715"},{"range":"724","text":"713"},{"range":"725","text":"715"},"Update the dependencies array to be: [inputProps]",{"range":"726","text":"727"},{"range":"728","text":"727"},{"range":"729","text":"727"},"Update the dependencies array to be: [cancelOnEscape, inputProps, handleRequestSearch, handleCancel]",{"range":"730","text":"731"},[4066,4067],"",[4066,4066],"\\",[4082,4083],[4082,4082],[3748,3749],[3748,3748],[3764,3765],[3764,3764],[3284,3285],[3284,3284],[3300,3301],[3300,3300],[2067,2087],"[inputProps]",[2288,2307],[2525,2546],[3292,3363],"[cancelOnEscape, inputProps, handleRequestSearch, handleCancel]"]