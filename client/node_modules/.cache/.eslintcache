<<<<<<< HEAD
[{"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\index.js":"1","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\App.js":"2","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Store.js":"3","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeStatusReducer.js":"4","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\LoginStatusReducer.js":"5","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ProvinceReducer.js":"6","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ObjectEditShiftReducer.js":"7","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\DistrictReducer.js":"8","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUserReducer.js":"9","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RoleReducer.js":"10","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListShiftReducer.js":"11","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListProductReducer.js":"12","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ConfirmModalReducer.js":"13","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\typeProductReducer.js":"14","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\chooseTypeProduct.js":"15","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeProductValueReducer.js":"16","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\AlertReducer.js":"17","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUpdateProduct.js":"18","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddShiftReducer.js":"19","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditShiftReducer.js":"20","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDarkModeReducer.js":"21","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDeleteConfirmReducer.js":"22","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusConfirmReducer.js":"23","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateGoodReducer.js":"24","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusIsAddTypeReducer.js":"25","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusYesConfirmReducer.js":"26","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditTypeReducer.js":"27","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusModalConfirmPassword.js":"28","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddTypeReducer.js":"29","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DirectionURL.js":"30","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateEmployeeReducer.js":"31","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusPayMoneyStatus.js":"32","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\ShoppingBagsReducer.js":"33","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddEmployeeReducer.js":"34","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\ListRecieptReducer.js":"35","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\StatusShowHistoryRecieptReducer.js":"36","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\TypeByDate.js":"37","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\StatusEditInfomationBill.js":"38","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\currentEditEmployeeReducer.js":"39","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\TypeReciept.js":"40","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\InfomationBillEdit.js":"41","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\employeeListReducer.js":"42","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\employeeSackedListReducer.js":"43","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\LoginWithEmployee.js":"44","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Login.js":"45","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Body.js":"46","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Register.js":"47","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\ForgotPassword.js":"48","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DashboardURL.js":"49","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\ModalConfirmPassword.js":"50","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Partials\\SideNavBar.js":"51","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodManager.js":"52","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\DashBoard.js":"53","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\ReiceiptManager.js":"54","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\SellProduct.js":"55","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Profile.js":"56","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodImport.js":"57","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeeManager.js":"58","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\EditTypeModal.js":"59","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Regulation.js":"60","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileSetting.js":"61","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ModalAdd.js":"62","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ListShift.js":"63","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Print.js":"64","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileDetail.js":"65","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\HistoryReciept.js":"66","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ChangePassword.js":"67","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileHeader.js":"68","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\ConfirmModal.js":"69","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\AddTypeModal.js":"70","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\fakeData.js":"71","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateEmployeeModal.js":"72","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\PayMoneyModal.js":"73","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\SackedEmployeeMenu.js":"74","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeMoreMenu.js":"75","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeToolbar.js":"76","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddEmployeeModal.js":"77","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\FixedCalendar.js":"78","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeTableHeader.js":"79","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UnShiftEmployee.js":"80","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\DarkMode.js":"81","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ComponentToPrint.js":"82","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\TableReciept.js":"83","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\FixedCalendarCell.js":"84","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\SearchNotFound.js":"85","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Page.js":"86","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Scrollbar.js":"87","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Label.js":"88","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ShoppingBags.js":"89","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Tabs.js":"90","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\StatusReceiptType.js":"91","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\DateReciept.js":"92","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\TableReciept.js":"93","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\Statistic.js":"94","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButton.js":"95","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\Calendar.js":"96","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\SearchBar.js":"97","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\UpdateGoodModal.js":"98","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodTable.js":"99","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\BaseOptionChart.js":"100","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\TableRow.js":"101","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\ControlReciept.js":"102","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\StatusSelectAll.js":"103","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\ListRecieptDelete.js":"104"},{"size":309,"mtime":1634653035214,"results":"105","hashOfConfig":"106"},{"size":3075,"mtime":1636603313108,"results":"107","hashOfConfig":"106"},{"size":4621,"mtime":1636691347891,"results":"108","hashOfConfig":"106"},{"size":343,"mtime":1634653035200,"results":"109","hashOfConfig":"106"},{"size":295,"mtime":1634653035195,"results":"110","hashOfConfig":"106"},{"size":384,"mtime":1634653035196,"results":"111","hashOfConfig":"106"},{"size":340,"mtime":1634653035196,"results":"112","hashOfConfig":"106"},{"size":376,"mtime":1634661219450,"results":"113","hashOfConfig":"106"},{"size":2176,"mtime":1635316557324,"results":"114","hashOfConfig":"106"},{"size":316,"mtime":1634653035196,"results":"115","hashOfConfig":"106"},{"size":1666,"mtime":1635820567487,"results":"116","hashOfConfig":"106"},{"size":714,"mtime":1635923595585,"results":"117","hashOfConfig":"106"},{"size":482,"mtime":1634653035193,"results":"118","hashOfConfig":"106"},{"size":604,"mtime":1635428539250,"results":"119","hashOfConfig":"106"},{"size":360,"mtime":1635428539250,"results":"120","hashOfConfig":"106"},{"size":668,"mtime":1635260224145,"results":"121","hashOfConfig":"106"},{"size":670,"mtime":1635349470393,"results":"122","hashOfConfig":"106"},{"size":1109,"mtime":1635428539243,"results":"123","hashOfConfig":"106"},{"size":303,"mtime":1634653035196,"results":"124","hashOfConfig":"106"},{"size":312,"mtime":1634653035198,"results":"125","hashOfConfig":"106"},{"size":302,"mtime":1634653035197,"results":"126","hashOfConfig":"106"},{"size":390,"mtime":1634653035198,"results":"127","hashOfConfig":"106"},{"size":303,"mtime":1634653035197,"results":"128","hashOfConfig":"106"},{"size":323,"mtime":1635428539248,"results":"129","hashOfConfig":"106"},{"size":372,"mtime":1634653035198,"results":"130","hashOfConfig":"106"},{"size":350,"mtime":1634653035200,"results":"131","hashOfConfig":"106"},{"size":309,"mtime":1634653035198,"results":"132","hashOfConfig":"106"},{"size":370,"mtime":1634653035199,"results":"133","hashOfConfig":"106"},{"size":304,"mtime":1634653035197,"results":"134","hashOfConfig":"106"},{"size":2219,"mtime":1634653035202,"results":"135","hashOfConfig":"106"},{"size":339,"mtime":1634653035199,"results":"136","hashOfConfig":"106"},{"size":324,"mtime":1634653035199,"results":"137","hashOfConfig":"106"},{"size":1332,"mtime":1636565138279,"results":"138","hashOfConfig":"106"},{"size":324,"mtime":1634653035196,"results":"139","hashOfConfig":"106"},{"size":2721,"mtime":1636694278205,"results":"140","hashOfConfig":"106"},{"size":341,"mtime":1636018498899,"results":"141","hashOfConfig":"106"},{"size":340,"mtime":1636611050856,"results":"142","hashOfConfig":"106"},{"size":341,"mtime":1636272406917,"results":"143","hashOfConfig":"106"},{"size":901,"mtime":1636472317541,"results":"144","hashOfConfig":"106"},{"size":541,"mtime":1636615262019,"results":"145","hashOfConfig":"106"},{"size":357,"mtime":1636272916157,"results":"146","hashOfConfig":"106"},{"size":969,"mtime":1636472317542,"results":"147","hashOfConfig":"106"},{"size":1000,"mtime":1636472317542,"results":"148","hashOfConfig":"106"},{"size":8679,"mtime":1636602459227,"results":"149","hashOfConfig":"106"},{"size":12681,"mtime":1636475739784,"results":"150","hashOfConfig":"106"},{"size":1612,"mtime":1636637337399,"results":"151","hashOfConfig":"106"},{"size":15628,"mtime":1636527552475,"results":"152","hashOfConfig":"106"},{"size":12948,"mtime":1635355253856,"results":"153","hashOfConfig":"106"},{"size":1758,"mtime":1636533344072,"results":"154","hashOfConfig":"106"},{"size":1956,"mtime":1634653035172,"results":"155","hashOfConfig":"106"},{"size":9202,"mtime":1636637710341,"results":"156","hashOfConfig":"106"},{"size":5988,"mtime":1636472317532,"results":"157","hashOfConfig":"106"},{"size":5591,"mtime":1635354580147,"results":"158","hashOfConfig":"106"},{"size":1669,"mtime":1636630853345,"results":"159","hashOfConfig":"106"},{"size":13549,"mtime":1636472317541,"results":"160","hashOfConfig":"106"},{"size":3850,"mtime":1636638406114,"results":"161","hashOfConfig":"106"},{"size":30676,"mtime":1636472317535,"results":"162","hashOfConfig":"106"},{"size":27396,"mtime":1636602355359,"results":"163","hashOfConfig":"106"},{"size":7839,"mtime":1636472317534,"results":"164","hashOfConfig":"106"},{"size":7794,"mtime":1636638369417,"results":"165","hashOfConfig":"106"},{"size":1157,"mtime":1636638477062,"results":"166","hashOfConfig":"106"},{"size":14755,"mtime":1636638645344,"results":"167","hashOfConfig":"106"},{"size":7583,"mtime":1636638522337,"results":"168","hashOfConfig":"106"},{"size":7670,"mtime":1636699385735,"results":"169","hashOfConfig":"106"},{"size":16316,"mtime":1636638261332,"results":"170","hashOfConfig":"106"},{"size":1162,"mtime":1636640740329,"results":"171","hashOfConfig":"106"},{"size":8040,"mtime":1636638317394,"results":"172","hashOfConfig":"106"},{"size":4541,"mtime":1635355632563,"results":"173","hashOfConfig":"106"},{"size":3507,"mtime":1634653035163,"results":"174","hashOfConfig":"106"},{"size":8411,"mtime":1636472317533,"results":"175","hashOfConfig":"106"},{"size":698,"mtime":1636472317531,"results":"176","hashOfConfig":"106"},{"size":16791,"mtime":1636472317531,"results":"177","hashOfConfig":"106"},{"size":13994,"mtime":1634693084642,"results":"178","hashOfConfig":"106"},{"size":4065,"mtime":1636472317529,"results":"179","hashOfConfig":"106"},{"size":4568,"mtime":1636472317527,"results":"180","hashOfConfig":"106"},{"size":2489,"mtime":1634653035159,"results":"181","hashOfConfig":"106"},{"size":16233,"mtime":1636602355359,"results":"182","hashOfConfig":"106"},{"size":4240,"mtime":1636602355360,"results":"183","hashOfConfig":"106"},{"size":2923,"mtime":1636602355360,"results":"184","hashOfConfig":"106"},{"size":4087,"mtime":1636602355361,"results":"185","hashOfConfig":"106"},{"size":3134,"mtime":1634653035174,"results":"186","hashOfConfig":"106"},{"size":6985,"mtime":1636562253245,"results":"187","hashOfConfig":"106"},{"size":16663,"mtime":1636564988315,"results":"188","hashOfConfig":"106"},{"size":3705,"mtime":1636602355361,"results":"189","hashOfConfig":"106"},{"size":0,"mtime":1634653035161,"results":"190","hashOfConfig":"106"},{"size":482,"mtime":1634653035160,"results":"191","hashOfConfig":"106"},{"size":1541,"mtime":1634653035161,"results":"192","hashOfConfig":"106"},{"size":2458,"mtime":1634653035160,"results":"193","hashOfConfig":"106"},{"size":3687,"mtime":1636639802326,"results":"194","hashOfConfig":"106"},{"size":1391,"mtime":1636028967907,"results":"195","hashOfConfig":"106"},{"size":4129,"mtime":1636639477504,"results":"196","hashOfConfig":"106"},{"size":9085,"mtime":1636699199733,"results":"197","hashOfConfig":"106"},{"size":21512,"mtime":1636699460150,"results":"198","hashOfConfig":"106"},{"size":1849,"mtime":1634653035157,"results":"199","hashOfConfig":"106"},{"size":2783,"mtime":1634653035157,"results":"200","hashOfConfig":"106"},{"size":1607,"mtime":1634653035155,"results":"201","hashOfConfig":"106"},{"size":5541,"mtime":1634653035165,"results":"202","hashOfConfig":"106"},{"size":33701,"mtime":1636472317539,"results":"203","hashOfConfig":"106"},{"size":7974,"mtime":1636472317536,"results":"204","hashOfConfig":"106"},{"size":5649,"mtime":1634653035155,"results":"205","hashOfConfig":"106"},{"size":10343,"mtime":1636472317537,"results":"206","hashOfConfig":"106"},{"size":5982,"mtime":1636694262173,"results":"207","hashOfConfig":"106"},{"size":314,"mtime":1636643392866,"results":"208","hashOfConfig":"106"},{"size":629,"mtime":1636694738193,"results":"209","hashOfConfig":"106"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},"1ieljoc",{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"212"},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"212"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"212"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"212"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"212"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"212"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"212"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"212"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"212"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"212"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"212"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"332","usedDeprecatedRules":"212"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"337","usedDeprecatedRules":"212"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"340","usedDeprecatedRules":"212"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343","usedDeprecatedRules":"212"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"350","usedDeprecatedRules":"212"},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"359","usedDeprecatedRules":"212"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"366","usedDeprecatedRules":"212"},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"369","usedDeprecatedRules":"212"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"212"},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"377","usedDeprecatedRules":"212"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"212"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"212"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388","usedDeprecatedRules":"212"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"212"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394","usedDeprecatedRules":"212"},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"397","usedDeprecatedRules":"212"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"212"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"405","usedDeprecatedRules":"212"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"212"},{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"417","messages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"431","messages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"212"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"212"},{"filePath":"437","messages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"212"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"212"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"445","messages":"446","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"212"},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"212"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\index.js",[],["454","455"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\App.js",["456","457"],"import React, { Component } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n} from \"react-router-dom\";\r\nimport DirectionURL from './Router/DirectionURL';\r\nimport './css/App.css'\r\nimport { connect } from 'react-redux'\r\nimport axios from 'axios';\r\nimport Alert from '@mui/material/Alert';\r\nimport { FiChevronRight, FiXSquare } from \"react-icons/fi\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  async componentWillMount() {\r\n    if (localStorage.getItem('token') && localStorage.getItem('token') !== \"\") {\r\n      axios.post(`http://localhost:5000/refresh`, {\r\n        token: localStorage.getItem('token'),\r\n      })\r\n        .then(res => {\r\n          console.log(\"Thành công\");\r\n          console.log(res.data);\r\n          if (res.status === 200) {\r\n            localStorage.setItem('token', res.data.token);\r\n            this.props.updateProfile(res.data.data);\r\n            this.props.updateRecieptUser(res.data.data.receipts)\r\n            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n            this.props.updateShiftTypes(res.data.data.shiftTypes)\r\n            this.props.changeLoginStatus();\r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(\"thất bại\");\r\n        })\r\n    }\r\n  }\r\n\r\n  autoHideAlert = () => {\r\n    setTimeout(() => this.props.hideAlert(), 4000);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <DirectionURL></DirectionURL>\r\n        {this.props.alertReducer.status ? this.autoHideAlert() : null}\r\n        {this.props.alertReducer.status ? <Alert style={{cursor: 'pointer'}} onClick={() => this.props.hideAlert()} className=\"message-error\" severity={this.props.alertReducer.typeMessage}>{this.props.alertReducer.message} — check it out! <FiXSquare></FiXSquare></Alert> : null}\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    isLogin: state.loginStatus,\r\n    alertReducer: state.alert,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    changeLoginStatus: () => {\r\n      dispatch({\r\n        type: \"CHANGE_LOGIN_STATUS\",\r\n      });\r\n    },\r\n    updateProvince: (data) => {\r\n      dispatch({\r\n        type: \"UPDATE_DATA\",\r\n        data: data,\r\n      })\r\n    },\r\n    updateRecieptUser: (data) => {\r\n      dispatch({\r\n        type: \"UPDATE_RECIEPT_USER\",\r\n        listReciept: data,\r\n      })\r\n    },\r\n    updateProfile: (data) => {\r\n      dispatch({\r\n        type: \"UPDATA_DATA_USER\",\r\n        data: data,\r\n      })\r\n    },\r\n    updateAvatar: (avatar) => {\r\n      dispatch({\r\n        type: \"UPDATE_AVATAR\",\r\n        avatar: avatar,\r\n      })\r\n    },\r\n    updateShiftTypes: (shiftTypes) => {\r\n      dispatch({\r\n        type: \"UPDATE_DATA_SHIFT_USER\",\r\n        shiftTypes: shiftTypes,\r\n      })\r\n    },\r\n    hideAlert: () => {\r\n      dispatch({\r\n        type: \"HIDE_ALERT\",\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Store.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeStatusReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\LoginStatusReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ProvinceReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ObjectEditShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\DistrictReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUserReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RoleReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListProductReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ConfirmModalReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\typeProductReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\chooseTypeProduct.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeProductValueReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\AlertReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUpdateProduct.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDarkModeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDeleteConfirmReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusConfirmReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateGoodReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusIsAddTypeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusYesConfirmReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditTypeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusModalConfirmPassword.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddTypeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DirectionURL.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateEmployeeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusPayMoneyStatus.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\ShoppingBagsReducer.js",["458"],"const shoppingBagsInitialState = [],\r\n    shoppingBagsReducer = (state = shoppingBagsInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"ADD_NEW_PRODUCT_SHOPPING_BAGS\": \r\n                return [...state, action.newProduct];\r\n            case \"RAISE_QUANTITY_SHOPPING_BAGS\":\r\n                return state.map(value => {\r\n                    if (value.product.name === action.name) {\r\n                        value.quantity += 1;\r\n                    }\r\n                    return value\r\n                })\r\n            case \"REDUCE_QUANTITY_SHOPPING_BAGS\":\r\n                return state.map(value => {\r\n                    if (value.product.name === action.name) {\r\n                        value.quantity -= 1;\r\n                    }\r\n                    return value\r\n                })\r\n            case \"DELETE_PRODUCT_SHOPPING_BAGS\":\r\n                return state.filter((value) => {\r\n                    if (value.product.name !== action.name) {\r\n                        return value;\r\n                    }\r\n                })\r\n            case \"RESET_SHOPPING_BAGS\":\r\n                return state = [];\r\n            case \"INFO_SHOPPING_BAGS_EDIT\":\r\n                return action.listProduct\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default shoppingBagsReducer;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddEmployeeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\ListRecieptReducer.js",["459","460","461","462"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\StatusShowHistoryRecieptReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\TypeByDate.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\StatusEditInfomationBill.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\currentEditEmployeeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\TypeReciept.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\InfomationBillEdit.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\employeeListReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\employeeSackedListReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\LoginWithEmployee.js",["463","464"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../css/Login.css'\r\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\r\nimport { FiXSquare, FiChevronLeft } from \"react-icons/fi\";\r\nimport { FaUserTie } from 'react-icons/fa'\r\nimport { Avatar } from '@mui/material'\r\nimport { IconContext } from \"react-icons\";\r\nimport axios from 'axios';\r\nimport Alert from '@mui/material/Alert';\r\n\r\nclass LoginWithEmployee extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    // Check để thay đổi trạng thái đã login hay chưa\r\n    isLoginCheck = async (e) => {\r\n        this.props.setRole();\r\n        if (this.blurEmail() && this.blurPassword()) {\r\n            await axios.post(`http://localhost:5000/sign-in-employee`, {\r\n                email: document.querySelector('#username').value,\r\n                password: document.getElementById('password').value,\r\n            })\r\n                .then(res => {\r\n                    console.log(res.data);\r\n                    switch (res.data.status) {\r\n                        case 1:\r\n                            localStorage.setItem('token', res.data.token);\r\n                            this.props.changeLoginStatus();\r\n                            this.props.updateProfile(res.data.data);\r\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"success\");\r\n                            break;\r\n                        case -1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"error\");\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Error system\", \"error\");\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    // Handle user : blur , change in input\r\n    blurEmail = () => {\r\n        const event = document.querySelector('#username');\r\n        let elementValue = event.value;\r\n        const formGroup = event.parentElement.parentElement;\r\n        // check validate\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        let elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Employee'\r\n    }\r\n\r\n    render() {\r\n        const enterPress = this.isLoginCheck;\r\n        document.onkeydown = function (e) {\r\n            switch (e.which) {\r\n                case 13:\r\n                    enterPress(e);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-login\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <FaUserTie></FaUserTie>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Employee</div>\r\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Login</NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">Username</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"username\" id=\"username\" placeholder=\"VD: phuoc123\" type=\"text\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div to=\"/sellproduct\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        setRole: () => {\r\n            dispatch({\r\n                type: \"EMPLOYEE_ROLE\",\r\n            });\r\n            localStorage.setItem('role', 'employee');\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        updateProfile: (data) => {\r\n            dispatch({\r\n                type: \"UPDATA_DATA_USER\",\r\n                data: data,\r\n            })\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar,\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginWithEmployee);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Login.js",["465","466","467"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../css/Login.css'\r\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\r\nimport { FiChevronRight } from \"react-icons/fi\";\r\nimport { BiUser } from \"react-icons/bi\";\r\nimport { Avatar } from '@mui/material'\r\nimport { IconContext } from \"react-icons\";\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport axios from 'axios';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            appId: \"543752153590340\",\r\n            clientId: \"826925109796-mi95l41fi57bdlolpvnfdg5bpt9oc81h.apps.googleusercontent.com\",\r\n        }\r\n    }\r\n\r\n    // Login with google\r\n    onLoginSuccess = async (res) => {\r\n        this.props.setRole();\r\n        await axios.post(`http://localhost:5000/sign-in-with-google`, res.profileObj)\r\n            .then(res => {\r\n                console.log(\"thành công\");\r\n                console.log(res.data);\r\n                switch (res.data.status) {\r\n                    case 1:\r\n                        localStorage.setItem('token', res.data.token);\r\n                        this.props.updateProfile(res.data.data);\r\n                        this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n                        this.props.updateShiftTypes(res.data.data.shiftTypes);\r\n                        this.props.changeLoginStatus();\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(res.data.message, \"success\");\r\n                        break;\r\n                    case -1:\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(res.data.message, \"error\");\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Error, server don't active\", \"error\");\r\n            })\r\n    }\r\n\r\n    // Check để thay đổi trạng thái đã login hay chưa\r\n    isLoginCheck = async (e) => {\r\n        this.props.setRole();\r\n        if (this.blurEmail() && this.blurPassword()) {\r\n            await axios.post(`http://localhost:5000/sign-in-with-gmail-password`, {\r\n                email: document.querySelector('#email').value,\r\n                password: document.getElementById('password').value,\r\n            })\r\n                .then(res => {\r\n                    console.log(res.data);\r\n                    switch (res.data.status) {\r\n                        case 1:\r\n                            localStorage.setItem('token', res.data.token);\r\n                            this.props.updateProfile(res.data.data);\r\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n                            this.props.updateShiftTypes(res.data.data.shiftTypes);\r\n                            this.props.changeLoginStatus();\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"success\");\r\n                            break;\r\n                        case -1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"error\");\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Error system\", \"error\");\r\n                })\r\n        }\r\n    }\r\n\r\n    // Handle user : blur , change in input\r\n    blurEmail = () => {\r\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        const event = document.querySelector('#email');\r\n        let elementValue = event.value;\r\n        const formGroup = event.parentElement.parentElement;\r\n        // check validate\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else if (!regex.test(elementValue)) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        let elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Login'\r\n    }\r\n\r\n    render() {\r\n        const enterPress = this.isLoginCheck;\r\n        document.onkeydown = function (e) {\r\n            switch (e.which) {\r\n                case 13:\r\n                    enterPress(e);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-login\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <BiUser></BiUser>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Login</div>\r\n                                <NavLink to=\"/register\" className=\"auth-form__switch-btn\">Register <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight></NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"auth-form__support\">\r\n                                    <span className=\"auth-form__support-forget\">\r\n                                        <NavLink to=\"/forgot\" className=\"auth-form__switch-btn\">Forgot password</NavLink>\r\n                                    </span>\r\n                                    <span className=\"auth-form__help-separate\" />\r\n                                    <span className=\"auth-form__support-need-support\">Need help?</span>\r\n                                </div>\r\n                                <div className=\"auth-form__support\">\r\n                                    <GoogleLogin\r\n                                        className=\"auth-form__support-google\"\r\n                                        clientId={this.state.clientId}\r\n                                        buttonText=\"Login with Google\"\r\n                                        onSuccess={this.onLoginSuccess}\r\n                                        onFailure={this.onFailureSuccess}\r\n                                        cookiePolicy={'single_host_origin'}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div to=\"/home\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <NavLink to=\"/employee\" id=\"navlink\" className=\"auth-form__btn-log-in auth-form__switch-btn auth-form-employee\">\r\n                                        Employee\r\n                                        <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight>\r\n                                    </NavLink>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        updateProfile: (data) => {\r\n            dispatch({\r\n                type: \"UPDATA_DATA_USER\",\r\n                data: data,\r\n            })\r\n        },\r\n        setRole: () => {\r\n            dispatch({\r\n                type: \"ADMIN_ROLE\"\r\n            });\r\n            localStorage.setItem('role', 'admin');\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar,\r\n            })\r\n        },\r\n        updateShiftTypes: (shiftTypes) => {\r\n            dispatch({\r\n                type: \"UPDATE_DATA_SHIFT_USER\",\r\n                shiftTypes: shiftTypes,\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        updateShiftTypes: (shiftTypes) => {\r\n            dispatch({\r\n                type: \"UPDATE_DATA_SHIFT_USER\",\r\n                shiftTypes: shiftTypes,\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Body.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Register.js",["468","469","470"],"import React, { Component } from 'react';\r\nimport '../../css/Login.css'\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport Avatar from '@mui/material/Avatar'\r\nimport { IconContext } from \"react-icons\";\r\nimport { FiChevronLeft, FiUserPlus } from \"react-icons/fi\";\r\nimport { BsFillEnvelopeFill, BsLockFill, BsCodeSlash } from \"react-icons/bs\";\r\nimport { FaPhoneSquare } from \"react-icons/fa\";\r\nimport axios from 'axios';\r\nimport emailjs from 'emailjs-com';\r\nvar bcrypt = require('bcryptjs');\r\n\r\n\r\nclass Register extends Component {\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.state = {\r\n            code: \"\",\r\n            statusSendCode: true,\r\n        }\r\n    }\r\n\r\n\r\n    // Send code tới người dùng\r\n    sendCode = (a = this.makeCode(6)) => {\r\n        this.setState({\r\n            code: \"123456\"\r\n        })\r\n        // this.setState({\r\n        //     code: a,\r\n        // })\r\n        // emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\r\n        // emailjs.send(\"gmail_main\", \"template_plasdgf\", {\r\n        //     To_mail: `${document.getElementById('email').value}`,\r\n        //     code: `${a}`,\r\n        // })\r\n        //     .then((response) => {\r\n        //         console.log('SUCCESS!', response.status, response.text);\r\n        //     }, (err) => {\r\n        //         console.log('FAILED...', err);\r\n        //     });\r\n    }\r\n\r\n    // status SignUp \r\n    SignUp = (e) => {\r\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword() && this.blurTel()) {\r\n            axios.post(`http://localhost:5000/register-with-email`, {\r\n                email: document.getElementById('email').value,\r\n                password: this.hash(document.getElementById('password').value),\r\n                tel: document.getElementById('tel').value,\r\n            })\r\n                .then(res => {\r\n                    console.log(res.data);\r\n                    switch (res.data.status) {\r\n                        case 1:\r\n                            localStorage.setItem('token', res.data.token);\r\n                            this.props.updateProfile(res.data.data);\r\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n                            this.props.changeLoginStatus();\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"success\");\r\n\r\n                            break;\r\n                        case -1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"error\");\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Error system\", \"error\");\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n\r\n    // Tạo mã code cho người dùng xác nhận\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Hashpassword\r\n    hash = (pass) => {\r\n        var hash = bcrypt.hashSync(pass, 12)\r\n        return hash;\r\n    }\r\n\r\n\r\n    // Handle user : blur, change in input\r\n    blurEmail = () => {\r\n        const regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        const e = document.getElementById('email');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            this.setState({\r\n                statusSendCode: true,\r\n            })\r\n            return false;\r\n        } else if (!regex.test(elementValue)) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\r\n            this.setState({\r\n                statusSendCode: true,\r\n            })\r\n            return false\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            this.setState({\r\n                statusSendCode: false,\r\n            })\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurCode = () => {\r\n        const e = document.getElementById('code');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (this.state.code === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\r\n            return false\r\n        } else if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\r\n            return false\r\n        } else if (elementValue !== this.state.code) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\r\n            return false\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurRePassword = () => {\r\n        const e = document.getElementById('re-password')\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else if (document.getElementById('password').value !== elementValue) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true\r\n        }\r\n    }\r\n\r\n    blurTel = () => {\r\n        const e = document.getElementById('tel');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        const regex = /^\\d+$/;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else if (!regex.test(elementValue)) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Phone is not in the correct format\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Register'\r\n    }\r\n\r\n    render() {\r\n        const enterPress = this.SignUp;\r\n        document.onkeydown = function (e) {\r\n            switch (e.which) {\r\n                case 13:\r\n                    enterPress(e);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-register\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <FiUserPlus></FiUserPlus>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Register</div>\r\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Login</NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/register-submit\" method=\"post\" id=\"register-form\">\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\r\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND CODE</button>\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"re-password\" id=\"re-password\" placeholder=\"Emter re-password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <FaPhoneSquare className=\"input-custom-icon\" ></FaPhoneSquare>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onBlur={(e) => this.blurTel(e)} onChange={(e) => this.changeInput(e)} name=\"tel\" rules=\"required\" id=\"tel\" placeholder=\"Ex: 0303030303\" type=\"tel\" />\r\n\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"register-description\">Bằng cách ấn vào nút\r\n                                    <span className=\"register-description__keyword\">“ĐĂNG KÝ”</span>\r\n                                    , tôi đồng ý với\r\n                                    <span className=\"register-description__keyword\">Điều Khoản Sử Dụng</span> và\r\n                                    <div className=\"register-description__keyword\"> Chính Sách Bảo Mật</div>\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div onClick={(e) => this.SignUp(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign Up</div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        updateProfile: (data) => {\r\n            dispatch({\r\n                type: \"UPDATA_DATA_USER\",\r\n                data: data,\r\n            })\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar,\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\ForgotPassword.js",["471","472","473"],"import React, { Component } from 'react';\r\nimport Avatar from '@mui/material/Avatar'\r\nimport { IconContext } from \"react-icons\";\r\nimport { FiSend } from \"react-icons/fi\";\r\nimport { BsFillEnvelopeFill, BsLockFill, BsBoxArrowInLeft, BsCodeSlash } from \"react-icons/bs\";\r\nimport emailjs from 'emailjs-com';\r\nimport axios from 'axios';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nvar bcrypt = require('bcryptjs');\r\n\r\n\r\nclass ForgotPassword extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            code: \"\",\r\n            statusSendCode: true,\r\n        }\r\n    }\r\n\r\n\r\n    // Send code tới người dùng\r\n    sendCode = (a = this.makeCode(6)) => {\r\n        this.setState({\r\n            code: \"123456\"\r\n        })\r\n        // this.setState({\r\n        //     code: a,\r\n        // })\r\n        // emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\r\n        // emailjs.send(\"gmail_main\", \"template_plasdgf\", {\r\n        //     To_mail: `${document.querySelector('#email').value}`,\r\n        //     code: `${a}`,\r\n        // })\r\n        //     .then((response) => {\r\n        //         console.log('SUCCESS!', response.status, response.text);\r\n        //     }, (err) => {\r\n        //         console.log('FAILED...', err);\r\n        //     });\r\n    }\r\n\r\n    // Tạo code để xác nhận\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Hashpassword\r\n    hash = (pass) => {\r\n        var hash = bcrypt.hashSync(pass, 12)\r\n        return hash;\r\n    }\r\n\r\n    //Check tìm lại mật khẩu\r\n    findPassword = (e) => {\r\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword()) {\r\n            const form = document.getElementById('findpass-form');\r\n            axios.post(`http://localhost:5000/find-password`, {\r\n                email: document.querySelector('#email').value,\r\n                password: this.hash(document.getElementById('password').value),\r\n            })\r\n                .then(res => {\r\n                    form.reset();\r\n                    console.log(res.data.status);\r\n                    switch (res.data.status) {\r\n                        case 1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"success\");\r\n                            break;\r\n                        case -1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"error\");\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Error system\", \"error\");\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    // Handle user blue change in input\r\n    blurEmail = () => {\r\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        const event = document.querySelector('#email');\r\n        const elementValue = event.value;\r\n        const formGroup = event.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            this.setState({\r\n                statusSendCode: true,\r\n            })\r\n            return false;\r\n        } else if (!regex.test(elementValue)) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\r\n            this.setState({\r\n                statusSendCode: true,\r\n            })\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            this.setState({\r\n                statusSendCode: false,\r\n            })\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurCode = () => {\r\n        const e = document.getElementById('code');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (this.state.code === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\r\n            return false\r\n        } else if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\r\n            return false\r\n        } else if (elementValue !== this.state.code) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\r\n            return false\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurRePassword = () => {\r\n        const e = document.getElementById('re-password')\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else if (document.getElementById('password').value !== elementValue) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Find password'\r\n    }\r\n\r\n    render() {\r\n        const enterPress = this.findPassword;\r\n        document.onkeydown = function (e) {\r\n            switch (e.which) {\r\n                case 13:\r\n                    enterPress(e);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-findpass\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <FiSend></FiSend>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Find password</div>\r\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"><BsBoxArrowInLeft className=\"arrow-return\"></BsBoxArrowInLeft></NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/findpass-submit?_method=PUT\" method=\"POST\" id=\"findpass-form\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"Ex: abc@gmail.com\" type=\"text\" />\r\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND</button>\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"code\" className=\"form-label\">Code</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\r\n\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">New password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">Re-password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"password\" rules=\"required|min:6\" id=\"re-password\" placeholder=\"Emter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div onClick={(e) => this.findPassword(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Find Password</div>\r\n                                </div>\r\n\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapDispatchToProps)(ForgotPassword);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DashboardURL.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\ModalConfirmPassword.js",["474"],"import React from 'react';\r\nimport {Card,CardHeader,Divider,CardContent,Grid,TextField,Box,Button} from '@mui/material';\r\nimport {BiPlusMedical} from 'react-icons/bi'\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction ModalConfirmPassword(props) {\r\n\r\n    const statusConfirmPassword = useSelector(state => state.statusConfirmPassword)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleCancel = () => {\r\n        dispatch({\r\n            type:\"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Card className=\"card-confirm-password\" style={{ minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }}>\r\n            <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm password\" />\r\n            <Divider />\r\n            <CardContent>\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={12} xs={12}>\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            label=\"Your password\"\r\n                            required\r\n                            type=\"password\"\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n            <Divider />\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                <Button style={{ backgroundColor: 'yellowgreen' }} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                    Xác nhận\r\n                </Button>\r\n                <Button style={{ backgroundColor: 'red' }} onClick={() => handleCancel()} variant=\"contained\" startIcon={<GiCancel />}>\r\n                    Hủy\r\n                </Button>\r\n            </Box>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default ModalConfirmPassword;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Partials\\SideNavBar.js",["475","476","477","478"],"import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    AiOutlineDashboard,\r\n    AiFillDashboard,\r\n    AiOutlineContainer,\r\n    AiFillContainer\r\n} from \"react-icons/ai\";\r\nimport { BsInfoCircleFill } from \"react-icons/bs\";\r\nimport {\r\n    IoPeopleOutline,\r\n    IoPeopleSharp,\r\n    IoReceiptOutline,\r\n    IoReceiptSharp,\r\n} from \"react-icons/io5\";\r\nimport { IoIosArrowBack } from \"react-icons/io\";\r\nimport { RiProfileFill, RiProfileLine } from \"react-icons/ri\";\r\nimport { FaSignOutAlt } from \"react-icons/fa\";\r\nimport { GiSellCard } from 'react-icons/gi'\r\nimport Avatar from '../../img/avatar_default.jpg';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport '../../css/SideNavBar.css';\r\n\r\nclass SideNavBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            change: true,\r\n        }\r\n        this.getInitialScreen();\r\n    }\r\n    active = ['active', '', '', '', '', ''];\r\n\r\n    changeIndex(index) {\r\n        for (var i = 0; i < this.active.length; i++) {\r\n            this.active[i] = '';\r\n        }\r\n        this.active[index] = 'active';\r\n        this.setState({ change: !this.state.change });\r\n    }\r\n\r\n    getInitialScreen() {\r\n        var link = window.location.href;\r\n        link = link.substring(link.lastIndexOf('/') + 1);\r\n\r\n        for (var i = 0; i < this.active.length; i++) {\r\n            this.active[i] = '';\r\n        }\r\n\r\n        switch (link) {\r\n            case \"profile\":\r\n                this.active[1] = 'active';\r\n                break;\r\n            case \"employeemanager\":\r\n                this.active[2] = 'active';\r\n                break;\r\n            case \"goodmanager\":\r\n                this.active[3] = 'active';\r\n                break;\r\n            case \"import\":\r\n                this.active[3] = 'active';\r\n                break;    \r\n            case \"receiptmanager\":\r\n                this.active[4] = 'active';\r\n                break;\r\n            case \"sellproduct\":\r\n                this.active[5] = 'active';\r\n                break;\r\n            default:\r\n                this.active[0] = 'active';\r\n                break;\r\n        }\r\n        this.setState({ change: !this.state.change });\r\n    }\r\n    render() {\r\n\r\n        const navbarContainer = document.querySelector('.navbar-container');\r\n        console.log(navbarContainer);\r\n        return (\r\n            <div\r\n                class=\"navbar-container\"\r\n                style={{\r\n                    width: 0,\r\n                }}\r\n            >\r\n                <div style={{backgroundColor: !this.props.statusDarkmode ?  '#fafafa' : '#37474f' }} class=\"navibar sidebar\">\r\n                    <div className=\"nav-icon\" >\r\n                        <IoIosArrowBack\r\n                            size={20}\r\n                        />\r\n                    </div>\r\n                    <div class=\"nav-heading\">\r\n                        <div style={{backgroundColor: !this.props.statusDarkmode ?  '#cfd8dc' : '#455a64'  }} class=\"navbar-heading-container\">\r\n                            <img src={this.props.infoUser.avatar ? this.props.infoUser.avatar : Avatar} style={{ width: 40, height: 40, borderRadius: '100%' }}></img>\r\n                            <span style={{color: !this.props.statusDarkmode ?  'black' : 'white', fontWeight:'700'}} class=\"user-name\">{this.props.infoUser.lastName + \" \" + this.props.infoUser.firstName}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"nav-container\">\r\n                        {\r\n                            // this.props.role == true ?\r\n                            localStorage.getItem('role') == 'admin' ?\r\n                                (<NavLink className={\"nav-item \" + this.active[0]} to=\"/dashboard\"\r\n                                    onClick={() => this.changeIndex(0)}\r\n                                >\r\n                                    <AiOutlineDashboard class=\"nav-item-icon\" />\r\n                                    <AiFillDashboard class=\"nav-item-icon icon-activate\" />\r\n                                    <span className=\"nav-item-lable\">Dashboard</span>\r\n                                </NavLink>) : (null)\r\n                        }\r\n\r\n                        <NavLink to=\"/profile\" className={\"nav-item \" + this.active[1]} href=\"#\"\r\n                            onClick={() => this.changeIndex(1)}\r\n                        >\r\n                            <RiProfileLine class=\"nav-item-icon\" />\r\n                            <RiProfileFill class=\"nav-item-icon icon-activate\" />\r\n                            <span className=\"nav-item-lable\">Profile</span>\r\n                        </NavLink>\r\n\r\n                        {\r\n                            this.props.role === true ?\r\n                                (\r\n                                    <div>\r\n                                        <NavLink\r\n                                            to=\"/employeemanager\"\r\n                                            className={\"nav-item \" + this.active[2]}\r\n                                            href=\"#\"\r\n                                            onClick={() => this.changeIndex(2)}\r\n                                        >\r\n                                            <IoPeopleOutline class=\"nav-item-icon\" />\r\n                                            <IoPeopleSharp class=\"nav-item-icon icon-activate\" />\r\n                                            <span className=\"nav-item-lable\">Employee Manager</span>\r\n                                        </NavLink>\r\n                                        <NavLink\r\n                                            to=\"/goodmanager\"\r\n                                            className={\"nav-item \" + this.active[3]}\r\n                                            href=\"#\"\r\n                                            onClick={() => this.changeIndex(3)}\r\n                                        >\r\n                                            <AiOutlineContainer className=\"nav-item-icon\" />\r\n                                            <AiFillContainer className=\"nav-item-icon icon-activate\" />\r\n                                            <span className=\"nav-item-lable\">Goods Manager</span>\r\n                                        </NavLink>\r\n                                        <NavLink\r\n                                            to=\"/receiptmanager\"\r\n                                            className={\"nav-item \" + this.active[4]}\r\n                                            href=\"#\"\r\n                                            onClick={() => this.changeIndex(4)}\r\n                                        >\r\n                                            <IoReceiptOutline class=\"nav-item-icon\" />\r\n                                            <IoReceiptSharp class=\"nav-item-icon icon-activate\" />\r\n                                            <span className=\"nav-item-lable\">Receipt Manager</span>\r\n                                        </NavLink>\r\n                                    </div>\r\n                                ) : (null)\r\n                        }\r\n\r\n                        <NavLink to=\"/sellproduct\" className={\"nav-item \" + this.active[5]} href='#'\r\n                            onClick={() => this.changeIndex(5)}\r\n                        >\r\n                            <GiSellCard class=\"nav-item-icon\" />\r\n                            <GiSellCard class=\"nav-item-icon icon-activate\" />\r\n                            <span className=\"nav-item-lable\">Sell Product</span>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                    <div class=\"nav-footer\">\r\n                        <a\r\n                            to=\"/login\"\r\n                            onClick={() => this.props.changeLoginStatus()}\r\n                            className={\"nav-item \"}\r\n                            style={{ flex: 5 }}\r\n                        >\r\n                            <FaSignOutAlt class=\"nav-item-icon\" />\r\n                            <span className=\"nav-item-lable\">Sign out</span>\r\n                        </a>\r\n                        <a href=\"#\" className={\"nav-item \"} onClick={() => this.props.changeConfirmPasswordTest()} style={{ flex: 4 }}>\r\n                            <BsInfoCircleFill class=\"nav-item-icon\" />\r\n                            <span className=\"nav-item-lable\">About</span>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n        infoUser: state.infoUser,\r\n        role: state.role,\r\n        statusDarkmode: state.statusDarkmode\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            })\r\n        },\r\n        changeConfirmPasswordTest: () => {\r\n            dispatch({\r\n                type: \"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SideNavBar);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodManager.js",["479"],"import { Component } from 'react';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport GoodTable from './GoodPartials/GoodTable';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Button from '@mui/material/Button';\r\nimport SearchBar from './GoodPartials/SearchBar';\r\nimport {connect} from 'react-redux'\r\nimport AddTypeModal from './GoodPartials/AddTypeModal';\r\nimport '../css/GoodManager.css';\r\nimport ConfirmModal from './GoodPartials/ConfirmModal';\r\nimport UpdateGoodModal from './GoodPartials/UpdateGoodModal';\r\nimport EditTypeModal from './GoodPartials/EditTypeModal';\r\n\r\nclass GoodManager extends Component {\r\n    \r\n    handleAdd() {\r\n        this.props.changeAddTypeStatus();\r\n        this.props.setAddTypeStatus();\r\n    }\r\n    handleConfirm(){\r\n        this.props.changeConfirmStatus();\r\n        this.props.unsetDelete();\r\n    }\r\n    handleConfirmDelete(){\r\n        this.props.changeConfirmStatus();\r\n        this.props.setDeleteConfirm();\r\n    }\r\n    handleUpdateGood() {\r\n        this.props.changeUpdateGoodStatus();\r\n    }\r\n    handleEditType() {\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div style={{height: '100%', width: '100%', marginTop: '40px', marginBottom: '40px', paddingBottom: '40px' }}>\r\n                    <div style={{display: 'flex'}}>\r\n                        <Button variant=\"contained\">\r\n                            <NavLink style={{color: '#fff', textDecoration: 'none'}} to=\"/goodmanager/import\">Import</NavLink>\r\n                        </Button>\r\n                        <SearchBar style={{height: '120px'}}/>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleAdd()} variant=\"contained\">\r\n                            add type\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleEditType()} variant=\"contained\">\r\n                            edit type\r\n                        </Button>\r\n                        {/* <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleConfirmDelete()} variant=\"contained\">\r\n                            Delete\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleConfirm()} variant=\"contained\">\r\n                            Edit\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleUpdateGood()} variant=\"contained\">\r\n                            Update Good\r\n                        </Button> */}\r\n\r\n                     </div>\r\n\r\n                    <GoodTable />\r\n\r\n                    {/* Đây là phần modal */}\r\n                    {this.props.addTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <AddTypeModal></AddTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.confirmStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                            <ConfirmModal></ConfirmModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.updateGoodStatus ? (\r\n                        <div \r\n                            className=\"modal-add\"\r\n                        >\r\n                            <div onClick={() => {this.props.changeUpdateGoodStatus();}} className=\"modal-overlay\"></div>\r\n                            <UpdateGoodModal\r\n                                style={{\r\n                                    marginTop: 0\r\n                                }}\r\n                            >\r\n                            </UpdateGoodModal>\r\n                        </div>\r\n                    ): null}\r\n                     {this.props.editTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeEditTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <EditTypeModal></EditTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        deleteStatus: state.deleteStatus,\r\n        updateGoodStatus: state.updateGoodStatus,\r\n        editTypeStatus: state.editTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        unsetDelete: () => {\r\n            dispatch({\r\n                type: \"UNSET_DELETE_STATUS\",\r\n            })\r\n        },\r\n        changeUpdateGoodStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\r\n            })\r\n        },\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            })\r\n        },\r\n        setAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        setDeleteConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_DELETE_GOOD\",\r\n            }); \r\n        },\r\n        \r\n    }\r\n}\r\nexport default connect(mapStateToProps , mapDispatchToProps)(GoodManager);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\DashBoard.js",["480"],"import React, { Component } from 'react';\r\nimport '../../css/Dashboard.css'\r\nimport { Container, Grid } from '@mui/material';\r\nimport { Typography } from '@mui/material';\r\nimport { DiApple } from 'react-icons/di'\r\nimport StaticDateRangePickerDemo from './Calendar'\r\nimport AppWebsiteVisits from './Statistic';\r\nimport SplitButton from './GroupButton';\r\nimport FullCalendar from '@fullcalendar/react' // must go before plugins\r\nimport dayGridPlugin from '@fullcalendar/daygrid' // a plugin!\r\nimport interactionPlugin from \"@fullcalendar/interaction\" // needed for dayClick\r\n\r\n\r\nclass DashBoard extends Component {\r\n\r\n    renderEventContent = (eventInfo) => {\r\n        return (\r\n            <>\r\n                <b>{eventInfo.timeText}</b>\r\n                <i>{eventInfo.event.title}</i>\r\n            </>\r\n        )\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'DashBoard'\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"dashboard\" style={{ overflow: 'scroll', overflowX: 'hidden', height: '100vh' }}>\r\n                <Container style={{ marginTop: '40px' }} maxWidth=\"xl\">\r\n                    <Grid container spacing={3}>\r\n                        <Grid className=\"dashboard-item\" item md={3} sm={12} >\r\n                            <div className=\"dashboard-css\">\r\n                                <div className=\"dashboard-item-img\" style={{ marginBottom: '30px' }}>\r\n                                    <DiApple className=\"dashboard-item-icon\"></DiApple>\r\n                                </div>\r\n                                <Typography style={{ marginBottom: '10px' }} variant=\"h4\">256</Typography>\r\n                                <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                                    Total money\r\n                                </Typography>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid className=\"dashboard-item\" item md={3} sm={12} >\r\n                            <div className=\"dashboard-css sold-good\">\r\n                                <div className=\"dashboard-item-img sold-good\" style={{ marginBottom: '30px' }}>\r\n                                    <DiApple className=\"dashboard-item-icon sold-good\"></DiApple>\r\n                                </div>\r\n                                <Typography style={{ marginBottom: '10px' }} variant=\"h4\">256</Typography>\r\n                                <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                                    Sold good\r\n                                </Typography>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid className=\"dashboard-item\" item md={3} sm={12} >\r\n                            <div className=\"dashboard-css imported-good\">\r\n                                <div className=\"dashboard-item-img imported-good\" style={{ marginBottom: '30px' }}>\r\n                                    <DiApple className=\"dashboard-item-icon imported-good\"></DiApple>\r\n                                </div>\r\n                                <Typography style={{ marginBottom: '10px' }} variant=\"h4\">256</Typography>\r\n                                <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                                    Imported good\r\n                                </Typography>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid className=\"dashboard-item\" item md={3} sm={12} >\r\n                            <div className=\"dashboard-css error-receipt\">\r\n                                <div className=\"dashboard-item-img error-receipt\" style={{ marginBottom: '30px' }}>\r\n                                    <DiApple className=\"dashboard-item-icon error-receipt\"></DiApple>\r\n                                </div>\r\n                                <Typography style={{ marginBottom: '10px' }} variant=\"h4\">256</Typography>\r\n                                <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                                    Error receipt\r\n                                </Typography>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid className=\"dashboard-item\" item md={12} sm={12} >\r\n                            <div style={{ borderRadius: '20px' }}>\r\n                                <StaticDateRangePickerDemo></StaticDateRangePickerDemo>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid className=\"dashboard-item\" item md={12} sm={12} >\r\n                            <div style={{ borderRadius: '20px' }}>\r\n                                <FullCalendar\r\n                                    plugins={[ dayGridPlugin, interactionPlugin ]}\r\n                                    initialView=\"dayGridMonth\"\r\n                                    weekends={true}\r\n                                    events={[\r\n                                        { title: 'event 1', date: '2021-10-18' },\r\n                                        { title: 'event 2', date: '2021-10-18' }\r\n                                    ]}\r\n                                />\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid className=\"dashboard-item\" item md={12} sm={12} >\r\n                            <AppWebsiteVisits></AppWebsiteVisits>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DashBoard;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\ReiceiptManager.js",["481"],"import React, { Component } from 'react';\r\nimport { Container, Grid, Button } from '@mui/material';\r\nimport CollapsibleTable from './TableReciept'\r\nimport StatusReceiptType from './StatusReceiptType';\r\nimport DateReciept from './DateReciept';\r\nimport ControlReciept from './ControlReciept';\r\nimport '../../css/RecieptManager.css'\r\nclass ReceiptManager extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"profile\" style={{ overflow: 'scroll', overflowX: 'hidden', height: '100vh' }}>\r\n                <Container style={{ marginBottom: '20px', marginTop: '20px' }} maxWidth=\"xl\">\r\n                    <Grid className=\"profile-body\" container spacing={2}>\r\n                        <Grid item md={3} sm={4}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <DateReciept></DateReciept>\r\n                                </Grid>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <StatusReceiptType></StatusReceiptType>\r\n                                </Grid>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <ControlReciept></ControlReciept>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid item md={9} sm={9}  >\r\n                            <CollapsibleTable></CollapsibleTable>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReceiptManager;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\SellProduct.js",["482"],"import React, { Component } from 'react';\r\nimport { Container, Grid, Button, CardActionArea, CardActions, CardMedia } from '@mui/material';\r\nimport '../../css/SellProduct.css'\r\nimport Tabs from './Tabs'\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\nimport exampleImg from '../../img/good-example.jpg'\r\nimport { BiPlusMedical } from 'react-icons/bi';\r\nimport { connect } from 'react-redux'\r\nimport axios from 'axios';\r\nimport ShoppingBags from './ShoppingBags';\r\nimport Printf from './Print'\r\nimport HistoryReciept from './HistoryReciept';\r\n\r\nclass SellProduct extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            change: false,\r\n            test1: true,\r\n        }\r\n        this.loadAllType();\r\n        this.loadAllGood();\r\n    }\r\n\r\n    bull = (\r\n        <Box\r\n            component=\"span\"\r\n            sx={{ display: 'inline-block', mx: '2px', transform: 'scale(0.8)' }}\r\n        >\r\n            •\r\n        </Box>\r\n    );\r\n\r\n    AddProduct = (value) => {\r\n        var isCheck = false;\r\n        var currentQuantity;\r\n        var maxQuantity;\r\n        this.props.shoppingBags.map(value1 => {\r\n            if (value1.product.name === value.name) {\r\n                isCheck = true;\r\n                currentQuantity = value1.quantity\r\n                maxQuantity = value.quantity\r\n            } \r\n            return value;\r\n        })\r\n        if (isCheck) {\r\n            if (currentQuantity < maxQuantity) {\r\n                this.props.raiseQuantity(value.name);\r\n            }\r\n        } else {\r\n            const newProduct = {\r\n                product: value,\r\n                quantity: 1,\r\n            }\r\n            this.props.addNewProductToShoppingBags(newProduct);\r\n        }\r\n\r\n    }\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }\r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`,\r\n            {\r\n                params: { ...data }\r\n            })\r\n            .then(res => {\r\n                result = res.data.data;\r\n                localStorage.getItem('token', res.data.token);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        var listTypeInfor = [];\r\n        for (var i = 0; i < result.length; i++) {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n        this.props.getTypeToReducer(listTypeInfor);\r\n        this.setState({ change: !this.state.change });\r\n    }\r\n\r\n    async loadAllGood() {\r\n        var resultProduct = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }\r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/`, {\r\n            params: { ...data }\r\n        })\r\n            .then(res => {\r\n                resultProduct = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Get hết từ cái productjoinType\r\n        var result = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, {\r\n            params: { ...data1 }\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n                localStorage.getItem('token', res.data.token);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Lấy các cái jointype\r\n        var joinTypeInfor = [];\r\n        for (let i = 0; i < result.length; i++) {\r\n            joinTypeInfor.push(result[i]);\r\n        }\r\n        console.log(\"joinTypeInfor\", joinTypeInfor);\r\n\r\n        var listProductInfor = [];\r\n        for (let i = 0; i < resultProduct.length; i++) {\r\n            var typeIDList = [];\r\n            for (var j = 0; j < joinTypeInfor.length; j++) {\r\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\r\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) {\r\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\r\n                }\r\n            }\r\n\r\n            listProductInfor.push(\r\n                {\r\n                    ...resultProduct[i],\r\n                    typeIDList: typeIDList\r\n                });\r\n        }\r\n\r\n        console.log(\"listProductInfor: \", listProductInfor);\r\n        this.props.getProductToReducer(listProductInfor);\r\n        this.setState({ change: !this.state.change });\r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        console.log(\"ĐÃ reset\");\r\n        return (\r\n            <div className=\"sell-product\" >\r\n                <Container maxWidth=\"xl\">\r\n                    <Grid container spacing={2}>\r\n                        <Grid item md={8} sm={12}  >\r\n                            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', borderRadius: '8px', marginTop: '20px', backgroundColor: '#ffffff', height: 'calc(100vh - 40px)', overflow: 'hidden' }}>\r\n                                <div style={{ overflow: 'hidden', marginBottom: '5px' }}>\r\n                                    <Tabs></Tabs>\r\n                                </div>\r\n                                <Container id=\"choses-product\" style={{ height: '94%', overflowY: 'scroll' }} maxWidth=\"xl\">\r\n                                    <Grid container spacing={2}>\r\n                                        {this.props.listProduct.state\r\n                                            ? this.props.listProduct.state.filter(value => {\r\n                                                if (this.props.chooseTypeProductID === 'all') {\r\n                                                    return value;\r\n                                                }\r\n                                                if (value.typeIDList.includes(this.props.chooseTypeProductID)) {\r\n                                                    return value;\r\n                                                }\r\n                                            }).map(value => (\r\n                                                <Grid item md={3} sm={3}>\r\n                                                    <Card onClick={() => this.AddProduct(value)}>\r\n                                                        <CardActionArea>\r\n                                                            {\r\n                                                                value.imgUrl === \"none\"\r\n                                                                    ? <CardMedia\r\n                                                                        component=\"img\"\r\n                                                                        height=\"140\"\r\n                                                                        image={exampleImg}\r\n                                                                        alt=\"green iguana\"\r\n                                                                    />\r\n\r\n                                                                    : <CardMedia\r\n                                                                        component=\"img\"\r\n                                                                        height=\"140\"\r\n                                                                        image={value.imgUrl}\r\n                                                                        alt=\"green iguana\"\r\n                                                                    />\r\n                                                            }\r\n                                                            <CardContent style={{ padding: '5px' }}>\r\n                                                                <Typography style={{ textAlign: 'center' }} gutterBottom variant=\"h6\" component=\"div\">\r\n                                                                    {value.name}\r\n                                                                </Typography>\r\n                                                            </CardContent>\r\n                                                        </CardActionArea>\r\n                                                        <CardActions style={{ justifyContent: 'center' }}>\r\n                                                            <Button style={{ color: 'green', fontWeight: '700' }} endIcon={<BiPlusMedical></BiPlusMedical>} size=\"medium\" color=\"primary\">\r\n                                                                {value.sellPrice}\r\n                                                            </Button>\r\n                                                        </CardActions>\r\n                                                    </Card>\r\n                                                </Grid>\r\n                                            )) : (null)}\r\n                                    </Grid>\r\n                                </Container>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item md={4} lg={4} >\r\n                            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', borderRadius: '8px', marginTop: '20px', backgroundColor: '#ffffff', height: 'calc(100vh - 40px)', overflow: 'hidden', overflowX: 'hidden' }}>\r\n                                <div id=\"choses-product\" style={{ backgroundColor: '#ebebeb', height: '60%', margin: '10px', overflowY: 'scroll', overflowX: 'hidden' }} >\r\n                                    <Grid sty container spacing={0}>\r\n                                        {/* Table */}\r\n                                        <Grid item className=\"customizeTable\" style={{ backgroundColor: 'rgba(20,20,20,0.4)', alignContent: 'center', justifyContent: 'center', borderBottom: '2px solic black' }} md={12} sm={12}>\r\n                                            <Grid style={{ textAlign: 'center', alignItems: 'center', justifyItems: 'center', fontWeight: 'bold' }} container spacing={0}>\r\n                                                <Grid item md={1} sm={1}>\r\n                                                    #\r\n                                                </Grid>\r\n                                                <Grid item md={1} sm={1}>\r\n\r\n                                                </Grid>\r\n                                                <Grid item md={4} sm={4}>\r\n                                                    Name\r\n                                                </Grid>\r\n                                                <Grid item md={3} sm={3}>\r\n                                                    Quantity\r\n                                                </Grid>\r\n                                                <Grid style={{ fontWeight: '700' }} item md={3} sm={3}>\r\n                                                    Giá\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        {/* Bắt đầu hóa đơn */}\r\n                                        <ShoppingBags></ShoppingBags>\r\n                                    </Grid>\r\n                                </div>\r\n                                <div style={{ height: '40%' }}>\r\n                                    <Printf ></Printf>\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n                {this.props.statusShowHistoryReciept ? (\r\n                    <HistoryReciept></HistoryReciept>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        listProduct: state.listProduct,\r\n        chooseTypeProductID: state.chooseTypeProduct,\r\n        infoUser: state.infoUser,\r\n        shoppingBags: state.shoppingBags,\r\n        statusShowHistoryReciept: state.statusShowHistoryReciept,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_STATUS\",\r\n            });\r\n        },\r\n        getTypeToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        getProductToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_AND_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        addNewProductToShoppingBags: (newProduct) => {\r\n            dispatch({\r\n                type: \"ADD_NEW_PRODUCT_SHOPPING_BAGS\",\r\n                newProduct: newProduct,\r\n            })\r\n        },\r\n        raiseQuantity: (name) => {\r\n            dispatch({\r\n                type: \"RAISE_QUANTITY_SHOPPING_BAGS\",\r\n                name: name,\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SellProduct);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Profile.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodImport.js",["483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501"],"import React, { Component } from 'react';\r\nimport { TextField } from '@mui/material';\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { InputLabel, Button, Modal, Grid, Card, CardHeader} from '@mui/material';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { connect } from 'react-redux';\r\nimport GoodImage from '../../img/good-example.jpg';\r\nimport AddTypeModal from './AddTypeModal';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport ConfirmModal from './ConfirmModal';\r\nimport { GiConsoleController } from 'react-icons/gi';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n// Use for save type\r\nvar productTypes =[];\r\nvar listTypeInfor = [];\r\n\r\nvar listProductInfor = [];\r\n\r\n// Use for choose type:\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass GoodImport extends Component {\r\n    imgUrl= 'none';\r\n    dateTime= Date.now();\r\n    currentDateTime = '2021-01-02';\r\n    finishUpImage = true;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n            change: false,\r\n        }; \r\n        this.loadAllType(); \r\n        this.loadAllGood();\r\n\r\n        this.currentDateTime = this.getCurrentDateTime();\r\n        console.log(\"this.currentDateTime\",this.currentDateTime);\r\n        typeSet = [];\r\n    }\r\n    \r\n    getCurrentDateTime()\r\n    {\r\n        var day = new Date().getDay().toString();\r\n        if(day.length<2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    handleAdd(){\r\n        this.props.changeAddTypeStatus();\r\n        this.props.setAddTypeStatus();\r\n    }\r\n    \r\n    async profileImageChange(fileChangeEvent) {\r\n        this.setState({\r\n            imageSelect: fileChangeEvent.target.files[0],\r\n        })\r\n        this.finishUpImage = false;\r\n        const file = fileChangeEvent.target.files[0];\r\n        const { type } = file;\r\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\r\n        } else {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", fileChangeEvent.target.files[0])\r\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\r\n            await axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\r\n                .then(res => {\r\n                    this.imgUrl=res.data.url;\r\n                    this.setState({\r\n                        change: 'true'\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"Thất bại\");\r\n                })\r\n        }\r\n        this.finishUpImage = true;\r\n    }\r\n\r\n    async importGood(e) {\r\n        // Ngăn chuyển trang\r\n        var isContinue = this.checkConstraint();\r\n        if(!isContinue)\r\n        {\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n        // Thêm hàng hoá\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            product: {\r\n                _id: {\r\n                    productID: this.generatedID,\r\n                    importDate: document.querySelector('input[name=\"importDate\"]').value,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: document.querySelector('input[name=\"goodName\"]').value,\r\n                quantity: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                remain: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\r\n                sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\r\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\r\n                imgUrl: this.imgUrl,\r\n                unit: document.querySelector('input[name=\"unit\"]').value,\r\n            }   \r\n        }\r\n        console.log(data);\r\n\r\n        axios.post(`http://localhost:5000/api/product`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu thành công\")\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                console.log(err);\r\n            })\r\n\r\n        //Thêm vào bảng joinType nữa\r\n\r\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\r\n        for(var i = 0 ; i < typeSet.length ; i++)\r\n        {\r\n            const data1 = {\r\n                token: localStorage.getItem('token'),\r\n                productJoinType: {\r\n                    _id : {\r\n                        productID: this.generatedID,\r\n                        typeID: typeSet[i], \r\n                        importDate: document.querySelector('input[name=\"importDate\"]').value,\r\n                        storeID: this.props.infoUser.email,\r\n                    }\r\n                }\r\n            }\r\n            axios.post(`http://localhost:5000/api/product/join`, data1)\r\n                .then(res => {\r\n                    console.log(\"lưu vô bảng join thành công\");\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                })\r\n        }\r\n        \r\n\r\n        // console.log(data);\r\n    }\r\n    \r\n    checkConstraint = () => {\r\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\r\n        // Constraint 1: Check name\r\n        var productName =  document.querySelector('input[name=\"goodName\"]').value;\r\n        if(productName.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Tên sản phẩm không được trống\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 2: Check quantity\r\n        if(document.querySelector('input[name=\"goodQuantity\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value) <= 0) \r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\r\n            alert('Số lượng sản phẩm phải lớn hơn 0');\r\n            return false;\r\n        }\r\n        // Constraint 3: check Unit\r\n        if(document.querySelector('input[name=\"unit\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\r\n            alert('Đơn vị của sản phẩm không được trống');\r\n            return false;\r\n        }\r\n        // Constraint 4: Check import Price\r\n        if(document.querySelector('input[name=\"originalPrice\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Giá nhập không được trống\",\"warning\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <= 0) \r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('Giá nhập phải lớn hơn 0',\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 5: check sell Price\r\n        if(document.querySelector('input[name=\"sellPrice\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Giá bán không được trống\",\"warning\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"sellPrice\"]').value) <= 0) \r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('Giá bán phải lớn hơn 0',\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 6: Ngày nhập phải nhỏ  hơn ngày hết hạn\r\n        if (\r\n            (\r\n                new Date(document.querySelector('input[name=\"importDate\"]').value).getTime()\r\n                - \r\n                new Date(document.querySelector('input[name=\"expiredDate\"]').value).getTime()\r\n            ) >= 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('Không thể nhập hàng hết hạn',\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 7: Check giá gốc nhỏ hơn giá bán\r\n        if(\r\n            parseInt(document.querySelector('input[name=\"sellPrice\"]').value) \r\n            - \r\n            parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <=0\r\n            ) \r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('Giá bán phải lớn hơn giá gốc',\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 8: check xem đã  up ảnh lên xong chưa\r\n        if(this.finishUpImage == false)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('Ảnh chưa được upload xong',\"warning\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        listTypeInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n        productTypes=[];\r\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\r\n        {\r\n            productTypes.push(listTypeInfor[i].name);\r\n        }\r\n        this.setState({change: true});\r\n    }\r\n\r\n    async loadAllGood() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                // alert(\"Lấy hết đc product ròi anh chai\");\r\n                result = res.data.data;\r\n                console.log(res.data.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Get data và lưu các tên Type vào dữ liệU\r\n        //Get data và lưu các tên Type vào bảng\r\n        listProductInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listProductInfor.push(result[i]);\r\n        }\r\n        if(listProductInfor.length>0)\r\n        {\r\n            this.generatedID = parseInt(listProductInfor[listProductInfor.length-1]._id.productID) + 1;\r\n        } \r\n        else this.generatedID = 0;\r\n        this.setState({change: false});\r\n    }\r\n\r\n    generatedID = 0;\r\n\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName='';\r\n        for(var i = 0; i<listTypeInfor.length;i++)\r\n        {   \r\n            if(listTypeInfor[i]._id.typeID == typeID)\r\n            {\r\n                typeName = listTypeInfor[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    foundTypeInSet(typeID) {\r\n        for(var i = 0 ; i < typeSet.length; i++)\r\n        {\r\n            if(typeSet[i]==typeID._id.typeID) return true;\r\n        }\r\n        return false;\r\n    }\r\n    render() {\r\n        \r\n        return(\r\n            <div \r\n                style={{ \r\n                    display: 'block', height: \"900px\", overflowY: 'auto ', backgroundColor: 'rgb(221,235,255)'   \r\n                }}\r\n            >   \r\n                <div className=\"good-import-header\"></div>\r\n                <Grid className=\"import-container\" style={{height: '79vh', overflowY: 'scroll'}} container spacing={2}>\r\n                    <Grid item md={3}  \r\n                        style={{\r\n                            display: 'flex', \r\n                            justifyContent:'center', \r\n                            flexDirection:'column',\r\n                            alignItems:'center',\r\n                            paddingLeft: '30px'\r\n                        }}\r\n                    >   \r\n                        <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden', marginTop: '15px ' }}>\r\n                            <Image style={{width: '240px',height: '240px', padding: '10px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                        </label>\r\n                        {/* Ẩn đi */}\r\n                        <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                    </Grid>\r\n                    <Grid item md={9}>\r\n\r\n                        <Card \r\n                            style={{\r\n                                marginRight: '18px',\r\n                            }}\r\n                        >\r\n                            <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"ADD GOOD\" />\r\n                            <Grid container md={12}>\r\n                                <Grid item md={6} \r\n                                    className='input-item'\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\"\r\n                                        style={{\r\n                                            width: '130px'\r\n                                        }}\r\n                                    >\r\n                                        ID\r\n                                    </div>\r\n                                    <StyledTextField\r\n                                        classname='input-box' \r\n                                        type=\"text\" \r\n                                        // class=\"input-val\" \r\n                                        style = {{width: '60%'}} \r\n                                        fullWidth \r\n                                        size=\"small\" \r\n                                        name=\"goodID\" \r\n                                        variant=\"outlined\"\r\n                                        value={this.generatedID}\r\n                                        readOnly={true}\r\n                                        disabled={true}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={6} \r\n                                    className='input-item'\r\n                                    style={{\r\n                                        marginLeft: 0,\r\n                                        paddingLeft: 0,\r\n                                    }}\r\n                                >\r\n                                    <div className=\"input-label\" style={{width: 110}}>Import Date</div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'   \r\n                                        type=\"date\" \r\n                                        style = {{width: '68%'}} \r\n                                        fullWidth\r\n                                        name=\"importDate\"\r\n                                        size=\"small\"\r\n                                        variant=\"outlined\"\r\n                                        defaultValue={this.currentDateTime}\r\n                                    />\r\n                                </Grid>\r\n                                \r\n                                <Grid item md={6} \r\n                                    className='input-item'\r\n                                >\r\n                                    <div className=\"input-label\"style={{width: '130px'}}>Name</div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'   \r\n                                        type=\"text\" \r\n                                        // class=\"input-val\" \r\n                                        style = {{width: '60%'}} \r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        name=\"goodName\" \r\n                                        variant=\"outlined\" \r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={4}\r\n                                    className='input-item'\r\n                                    style={{padding: '0px', marginLeft: '0px'}}\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\" \r\n                                        style={{width: '120px'}}\r\n                                    >\r\n                                        Quantity\r\n                                    </div>\r\n                                    <StyledTextField\r\n                                        style = {{width: '60%'}} \r\n                                        fullWidth\r\n                                        name=\"goodQuantity\" \r\n                                        variant=\"outlined\"\r\n                                        type=\"number\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={2}\r\n                                    className='input-item'\r\n                                    style={{\r\n                                        paddingRight: 12\r\n                                    }}\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\"\r\n                                        style={{\r\n                                            marginLeft: 0,\r\n                                            paddingLeft: 4,\r\n                                            width: 40\r\n                                        }}\r\n                                    >\r\n                                        Unit\r\n                                    </div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'\r\n                                        style = {{width: '100%', marginLeft: '4px'}} \r\n                                        fullWidth\r\n                                        variant=\"outlined\"\r\n                                        type=\"text\" \r\n                                        name=\"unit\" \r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={6}\r\n                                    className='input-item'\r\n                                >\r\n                                    <div className=\"input-label\" style={{width: 128}}>Original Price</div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'\r\n                                        style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \r\n                                        fullWidth\r\n                                        name=\"originalPrice\" \r\n                                        variant=\"outlined\"\r\n                                        type=\"number\" \r\n                                    />\r\n                                    đ\r\n                                </Grid>\r\n                                <Grid item md={6}\r\n                                    className='input-item'\r\n                                    style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\"\r\n                                        style={{width: '130px'}}\r\n                                    >\r\n                                        Sell Price\r\n                                    </div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'\r\n                                        style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \r\n                                        fullWidth\r\n                                        name=\"sellPrice\" \r\n                                        variant=\"outlined\"\r\n                                        type=\"number\" \r\n                                    />\r\n                                    đ\r\n                                </Grid>\r\n                                <Grid item md={7} \r\n                                    className='input-item'\r\n                                >\r\n                                    <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'   \r\n                                        type=\"date\" \r\n                                        style = {{width: '70%'}} \r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        name=\"expiredDate\" \r\n                                        variant=\"outlined\"\r\n                                        defaultValue={this.currentDateTime}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={10}\r\n                                    className='input-item'\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\"\r\n                                        style={{width:132}}\r\n                                    >\r\n                                        Product Type\r\n                                    </div>\r\n                                    <FormControl sx={{ minWidth: 120 }}>\r\n                                        {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                        <Select\r\n                                            value={this.state.type}\r\n                                            onChange={(event) => {\r\n                                                this.setState({type: event.target.value});\r\n                                                if(!typeSet.includes(event.target.value))\r\n                                                {\r\n                                                    typeSet.push(event.target.value);\r\n                                                }\r\n                                                this.setState({change: !this.state.change})\r\n                                            }}\r\n                                            style={{\r\n                                                height: 36,\r\n                                            }}\r\n                                        >\r\n                                            {\r\n                                                listTypeInfor.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                : listTypeInfor.map((type) =>\r\n                                                    ! this.foundTypeInSet(type) \r\n                                                    ? <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\r\n                                                    : null\r\n                                                )\r\n                                            }   \r\n                                        </Select> \r\n                                    </FormControl>\r\n                                    <Button onClick={() => this.handleAdd()}>\r\n                                        <AiFillPlusCircle\r\n                                            size={28}\r\n                                            style={{\r\n                                                fontSize: 28,\r\n                                                margin: 0,\r\n                                                padding: 0,\r\n                                                width: 28,\r\n                                                height: 28\r\n                                            }}    \r\n                                        />\r\n                                    </Button>\r\n                                    <div className='all-type-container'>\r\n                                        {\r\n                                            Array.from(typeSet).map((type) =>\r\n                                                <div className='type-container'>\r\n                                                    \r\n                                                    <CancelIcon\r\n                                                        className='close-icon'\r\n                                                        size={10}\r\n                                                        onClick={() => {\r\n                                                            typeSet = typeSet.filter(function(item) {\r\n                                                                return item != type;\r\n                                                            })\r\n                                                            console.log(typeSet);\r\n                                                            this.setState({type: 'none'});\r\n                                                        }}\r\n                                            \r\n                                                    />\r\n                                                    <span className='type-title'>\r\n                                                        {this.getTypeNamebyTypeID(type)}\r\n                                                    </span>\r\n                                                </div>\r\n                                                \r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                </Grid>\r\n                                {/* <Grid item md={10}\r\n                                    className='input-item'\r\n                                >\r\n\r\n                                </Grid> */}\r\n                                <Grid item md={2}\r\n                                    className='input-item'\r\n                                >\r\n                                    <Link to=\"/goodmanager\" className=\"btn btn-primary\" onClick={(e) => this.importGood(e)}>\r\n                                        IMPORT\r\n                                    </Link>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item sm={12} md={12} >\r\n                        \r\n                    </Grid>\r\n                </Grid> \r\n                    \r\n                {this.props.addTypeStatus ? (\r\n                    <div className=\"modal-add\">\r\n                        <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                        <AddTypeModal></AddTypeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.confirmStatus ? (\r\n                    <div className=\"modal-add\">\r\n                        <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                        <ConfirmModal></ConfirmModal>\r\n                    </div>\r\n                ): null}\r\n            </div>\r\n        );        \r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        confirmStatus: state.confirmStatus\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar\r\n            })\r\n        },\r\n        setAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_IMPORT_GOOD\",\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GoodImport);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeeManager.js",["502","503","504","505","506","507","508","509","510","511","512","513","514"],"import React, { Component } from 'react';\r\nimport Page from './EmployeePartials/Page';\r\nimport Label from './EmployeePartials/Label';\r\nimport Scrollbar from './EmployeePartials/Scrollbar';\r\nimport SearchNotFound from './EmployeePartials/SearchNotFound';\r\nimport { Icon } from '@iconify/react';\r\nimport { sentenceCase } from 'change-case';\r\nimport {connect} from 'react-redux'\r\nimport plusFill from '@iconify/icons-eva/plus-fill';\r\nimport {\r\n    Card,\r\n    Table,\r\n    Stack,\r\n    Avatar,\r\n    Button,\r\n    Checkbox,\r\n    TableRow,\r\n    TableBody,\r\n    TableCell,\r\n    Container,\r\n    Typography,\r\n    TableContainer,\r\n    TablePagination\r\n} from '@mui/material';\r\nimport EmployeeToolbar from './EmployeePartials/EmployeeToolbar';\r\nimport EmployeeMoreMenu from './EmployeePartials/EmployeeMoreMenu';\r\nimport SackedEmployeeMenu from './EmployeePartials/SackedEmployeeMenu';\r\nimport EmployeeTableHeader from './EmployeePartials/EmployeeTableHeader';\r\nimport USERLIST from './EmployeePartials/fakeData'\r\nimport AddEmployeeModal from './EmployeePartials/AddEmployeeModal';\r\nimport UpdateEmployeeModal from './EmployeePartials/UpdateEmployeeModal';\r\nimport PayMoneyModal from './EmployeePartials/PayMoneyModal';\r\nimport FixedCalendar from './EmployeePartials/FixedCalendar';\r\nimport UnShiftEmployee from './EmployeePartials/UnShiftEmployee';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nimport axios from 'axios';\r\n\r\nfunction EmployeeObj(employeeID, managerID, password, firstName, lastName, \r\n    phoneNumber, dateOfBirth, email, address, cardID, startDate, endDate) {\r\n    return {\r\n        employeeID: employeeID,\r\n        managerID: managerID,\r\n        password: password,\r\n        firstName: firstName,\r\n        lastName: lastName,\r\n        phoneNumber: phoneNumber,\r\n        dateOfBirth: dateOfBirth,\r\n        email: email,\r\n        address: address,\r\n        cardID: cardID,\r\n        startDate: startDate,\r\n        endDate: endDate,\r\n    };\r\n}\r\n\r\nconst TABLE_HEAD = [\r\n    { id: 'ID', label: 'ID', alignRight: false },\r\n    { id: 'firstName', label: 'Name', alignRight: false },\r\n    { id: 'lastName', label: 'Last Name', alignRight: false },\r\n    { id: 'old', label: 'Old', alignRight: false },\r\n    { id: 'gender', label: 'Gender', alignRight: false },\r\n    { id: 'province', label: 'Province', alignRight: false },\r\n    { id: 'phoneNumber', label: 'Phone', alignRight: false },\r\n    { id: 'email', label: 'Email', alignRight: false },\r\n    { id: 'adress', label: 'Adress', alignRight: false },\r\n    { id: '' }\r\n];\r\n\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '80px',\r\n    } \r\n})\r\n\r\nvar selected = [];\r\nvar filterName = \"\";\r\nvar filteredUsers = [];\r\nvar listUsers = [];\r\nvar page = 5;\r\nvar rowsPerPage = 5;\r\nclass EmployeeManager extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            change: false,\r\n        }; \r\n        //this.getAllEmployee();\r\n        this.getAllEmployee();\r\n        this.getSackedEmployee();\r\n    }\r\n\r\n    handleFilterByName(event){\r\n        filterName = event.target.value;\r\n    }\r\n\r\n    addEmployee () {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    // Dữ liệu mà Tài sẽ trả về khi get, còn khi post, delete, put thì chỉ trả về email với token thôi\r\n\r\n    sampleData = {\r\n        email: \"\",\r\n        token: \"\",\r\n        employees: [\r\n            {\r\n                _id: {\r\n                    employeeID: \"0\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n                managerID: \"19522006@gm.uit.edu.vn\",\r\n                password: \"abc123\",\r\n                firstName: \"Antonio\",\r\n                lastName: \"Rudiger\",\r\n                phoneNumber: \"03232323232\",\r\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\r\n                email: \"1912@gmail.com\",\r\n                address: \"Wherever\",\r\n                cardID: \"2511098589\",\r\n                startDate: \"2021-11-02T00:00:00.000Z\",\r\n                endDate: \"\",\r\n            },\r\n            {\r\n                _id: {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n                managerID: \"19522006@gm.uit.edu.vn\",\r\n                password: \"abc123\",\r\n                firstName: \"Antonio\",\r\n                lastName: \"Rudiger\",\r\n                phoneNumber: \"03232323232\",\r\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\r\n                email: \"1911@gmail.com\",\r\n                address: \"Wherever\",\r\n                cardID: \"25110985819\",\r\n                startDate: \"2021-11-02T00:00:00.000Z\",\r\n                endDate: \"2021-11-31T00:00:00.000Z\",\r\n            }\r\n        ]\r\n    }\r\n    // Lấy danh sách các nhân viên\r\n    async getAllEmployee () {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/employee/`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                // console.log(err);\r\n                alert(err)\r\n            })\r\n        listUsers = [];\r\n        for(var i = 0; i < result.length; i++)\r\n        {\r\n            listUsers.push(result[i]);\r\n        }\r\n        // Thêm vào cái redux\r\n        this.props.getEmployee(listUsers);\r\n        console.log(\"listUsers\", listUsers);\r\n        this.setState({change: !this.state.change});\r\n    }\r\n    // Thêm nhân viên\r\n    addEmployeeToDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n                managerID: \"19522006@gm.uit.edu.vn\",\r\n                password: \"abc123\",\r\n                firstName: \"Antonio\",\r\n                lastName: \"Rudiger\",\r\n                phoneNumber: \"03232323232\",\r\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\r\n                email: \"1911@gmail.com\",\r\n                address: \"Wherever\",\r\n                cardID: \"25110985819\",\r\n                startDate: \"2021-11-02T00:00:00.000Z\",\r\n                endDate: \"2021-11-31T00:00:00.000Z\",\r\n            }   \r\n        }\r\n        axios.post(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu thành công\")\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                console.log(err);\r\n            })\r\n    }\r\n    // Xoá nhân viên\r\n    deleteEmployeeFromDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee:\r\n            [\r\n                {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\", \r\n                },\r\n            ]\r\n            \r\n        }\r\n        axios.delete(`http://localhost:5000/api/employee`,{data: data})\r\n            .then(res => {\r\n                alert(\"delete employee(s) success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n    }\r\n    // Sửa nhân viên\r\n    updateEmployee()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n                managerID: \"19522006@gm.uit.edu.vn\",\r\n                password: \"abc123\",\r\n                firstName: \"Antonio\",\r\n                lastName: \"Rudiger Christensen\",\r\n                phoneNumber: \"03232323232\",\r\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\r\n                email: \"1911@gmail.com\",\r\n                address: \"Wherever\",\r\n                cardID: \"25110985819\",\r\n                startDate: \"2021-11-02T00:00:00.000Z\",\r\n                endDate: \"2021-11-31T00:00:00.000Z\",\r\n            }\r\n        }\r\n        axios.put(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Update success\");\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    async getSackedEmployee () {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/employee/delete`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                // alert(\"Lấy hết đc product ròi anh chai\");\r\n                result = res.data.data;\r\n                console.log(res.data.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        this.props.getSackedEmployee(result);\r\n        console.log(\"sacked reducer\", this.props.listSackedEmployee)\r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    backToWork() {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee:\r\n            [\r\n                {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\", \r\n                },\r\n            ]\r\n            \r\n        }\r\n        axios.patch(`http://localhost:5000/api/employee/delete`, data)\r\n            .then(res => {\r\n                alert(\"back to work success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n    }\r\n\r\n    // Xoá nhân viên hoàn toàn\r\n    deleteEmployeePermantlyFromDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee:\r\n            [\r\n                {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\", \r\n                },\r\n            ]\r\n            \r\n        }\r\n        axios.delete(`http://localhost:5000/api/employee/delete`,{data: data})\r\n            .then(res => {\r\n                alert(\"delete permantly employee(s) success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div\r\n                style={{display: 'block', overflowY: 'auto', height: '100vh'}}\r\n            >\r\n                <div>\r\n                    <Button\r\n                        onClick={() => {this.getAllEmployee()}}\r\n                        variant=\"contained\"\r\n                    >\r\n                        Get Employee\r\n                    </Button>\r\n                    {/* <Button\r\n                        onClick={() => this.addEmployeeToDatabase()}\r\n                        variant=\"contained\"\r\n                    >\r\n                        Add Employee\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => this.updateEmployee()}\r\n                        variant=\"contained\"\r\n                    >\r\n                        Update Employee\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => this.deleteEmployeeFromDatabase()}\r\n                        variant=\"contained\"\r\n                    >\r\n                        Delete Employee\r\n                    </Button> */}\r\n                    <Button\r\n                        onClick={() => this.getSackedEmployee()}\r\n                        variant=\"contained\"\r\n                    >\r\n                        Get Sacked Employee\r\n                    </Button>\r\n                    {/* <Button\r\n                        onClick={() => this.backToWork()}\r\n                        variant=\"contained\"\r\n                    >\r\n                        Back To Work\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => this.deleteEmployeePermantlyFromDatabase()}\r\n                        variant=\"contained\"\r\n                    >\r\n                        Delete Permantly\r\n                    </Button> */}\r\n                </div>\r\n                <Container\r\n                    style={{marginTop: 20, }}\r\n                >\r\n                    <span\r\n                        style = {{\r\n                            color: \"#fff\",\r\n                            padding: 12,\r\n                            border: '1px solid cyan',\r\n                            backgroundColor: '#222'\r\n                        }}\r\n                    >\r\n                        Current Employee\r\n                    </span>\r\n                    <Button\r\n                        variant='contained'\r\n                        startIcon={<Icon icon={plusFill} />}\r\n                        onClick={() => this.addEmployee()}\r\n                    >\r\n                        New User\r\n                    </Button>\r\n\r\n                    <Card>\r\n                    {/* <EmployeeToolbar\r\n                        numSelected={selected.length}\r\n                        filterName={filterName}\r\n                        // onFilterName={this.handleFilterByName(event)}\r\n                    /> */}\r\n                    <TableContainer style ={{maxHeight:'500px',overflowY: 'scroll'}}>\r\n                        <Table>\r\n                            <EmployeeTableHeader\r\n                                // order={order}\r\n                                // orderBy={orderBy}\r\n                                headLabel={TABLE_HEAD}\r\n                                rowCount={USERLIST.length}\r\n                                numSelected={selected.length}\r\n                                // onRequestSort={handleRequestSort}\r\n                                // onSelectAllClick={handleSelectAllClick}\r\n                            />\r\n                            <TableBody\r\n                                style={{height: '100%', width: '100%'}}\r\n                            >\r\n                            {\r\n                                this.props.listEmployee.employees.map((row) => {\r\n                                return (\r\n                                    <TableRow\r\n                                        hover\r\n                                        // key={id}\r\n                                        tabIndex={-1}\r\n                                        role=\"checkbox\"\r\n                                        // selected={isItemSelected}\r\n                                        // aria-checked={isItemSelected}\r\n                                    >\r\n                                        <TableCell padding=\"checkbox\">\r\n                                            <Checkbox\r\n                                            // checked={isItemSelected}\r\n                                            // onChange={(event) => handleClick(event, name)}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">\r\n                                            {row._id.employeeID}\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} component=\"th\" scope=\"row\" padding=\"none\">\r\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n                                            {/* <Avatar alt={row.firstName} src={avatarUrl} /> */}\r\n                                            <Typography variant=\"subtitle2\" noWrap>\r\n                                                {row.firstName}\r\n                                            </Typography>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.lastName}</TableCell>  \r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.dateOfBirth.substring(0,row.dateOfBirth.indexOf('T'))}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{\"gender\"}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{\"province\"}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.phoneNumber}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.email}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.address}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"right\">\r\n                                            <EmployeeMoreMenu\r\n                                                data={row._id.employeeID}    \r\n                                            >\r\n                                            </EmployeeMoreMenu>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n\r\n                    {/* <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={USERLIST.length}\r\n                        // rowsPerPage={rowsPerPage}\r\n                        // page={page}\r\n                        // onPageChange={handleChangePage}\r\n                        // onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    /> */}\r\n                    </Card>\r\n                </Container>\r\n                <FixedCalendar/>\r\n                <UnShiftEmployee/>\r\n                <Container\r\n                    style={{marginTop: 20, }}\r\n                >\r\n                    <span\r\n                        style = {{\r\n                            color: \"#fff\",\r\n                            padding: 12,\r\n                            border: '1px solid red',\r\n                            backgroundColor: 'red'\r\n                        }}\r\n                    >\r\n                        Sacked Employee\r\n                    </span>\r\n\r\n                    <Card>\r\n                    {/* <EmployeeToolbar\r\n                        numSelected={selected.length}\r\n                        filterName={filterName}\r\n                        // onFilterName={this.handleFilterByName(event)}\r\n                    /> */}\r\n                    <TableContainer style ={{maxHeight:'500px',overflowY: 'scroll'}}>\r\n                        <Table>\r\n                            <EmployeeTableHeader\r\n                                // order={order}\r\n                                // orderBy={orderBy}\r\n                                headLabel={TABLE_HEAD}\r\n                                rowCount={USERLIST.length}\r\n                                numSelected={selected.length}\r\n                                // onRequestSort={handleRequestSort}\r\n                                // onSelectAllClick={handleSelectAllClick}\r\n                            />\r\n                            <TableBody\r\n                                style={{height: '100%', width: '100%'}}\r\n                            >\r\n                            {\r\n                                this.props.listSackedEmployee.employees.map((row) => {\r\n                                return (\r\n                                    <TableRow\r\n                                        hover\r\n                                        // key={id}\r\n                                        tabIndex={-1}\r\n                                        role=\"checkbox\"\r\n                                        // selected={isItemSelected}\r\n                                        // aria-checked={isItemSelected}\r\n                                    >\r\n                                        <TableCell className = {classes.goodTable_Cell} padding=\"checkbox\">\r\n                                            <Checkbox\r\n                                            // checked={isItemSelected}\r\n                                            // onChange={(event) => handleClick(event, name)}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">\r\n                                            {row._id.employeeID}\r\n                                        </TableCell>\r\n                                        <TableCell component=\"th\" scope=\"row\" padding=\"none\">\r\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n                                            {/* <Avatar alt={row.firstName} src={avatarUrl} /> */}\r\n                                            <Typography variant=\"subtitle2\" noWrap>\r\n                                                {row.firstName}\r\n                                            </Typography>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.lastName}</TableCell>  \r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.dateOfBirth.substring(0,row.dateOfBirth.indexOf('T'))}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{\"gender\"}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{\"province\"}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.phoneNumber}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.email}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.address}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"right\">\r\n                                            <SackedEmployeeMenu\r\n                                                data={row._id.employeeID}    \r\n                                            >\r\n                                            </SackedEmployeeMenu>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n\r\n                    {/* <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={USERLIST.length}\r\n                        // rowsPerPage={rowsPerPage}\r\n                        // page={page}\r\n                        // onPageChange={handleChangePage}\r\n                        // onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    /> */}\r\n                    </Card>\r\n                </Container>\r\n                {/* Đây là phần modal */}\r\n                {this.props.addEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeAddEmployeeStatus();}} className=\"modal-overlay\"></div>\r\n                        <AddEmployeeModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </AddEmployeeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.updateEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeUpdateEmployeeStatus();}} \r\n                            className=\"moFixedCalendar\"\r\n                        />\r\n                        <UpdateEmployeeModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </UpdateEmployeeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.payEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changePayEmployeeStatus();}} className=\"modal-overlay\"></div>\r\n                        <PayMoneyModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </PayMoneyModal>\r\n                    </div>\r\n                ): null}\r\n\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\r\n        payEmployeeStatus: state.payEmployeeStatus,\r\n        infoUser: state.infoUser,\r\n        listEmployee: state.listEmployee,\r\n        listSackedEmployee: state.listSackedEmployee,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changePayEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        getSackedEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE_SACKED\",\r\n                employees: data,\r\n            });\r\n        }\r\n\r\n    }\r\n}\r\nexport default connect(mapStateToProps , mapDispatchToProps)((withStyles(styles, {withTheme: true}))(EmployeeManager));\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\EditTypeModal.js",["515","516","517","518"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit} from 'react-icons/bi';\r\nimport { TiDelete } from \"react-icons/ti\";\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\nimport AddTypeModal from './AddTypeModal';\r\n\r\nvar productTypes =[];\r\nvar listTypeInfor = [];\r\n\r\nclass EditTypeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.loadAllType();\r\n        this.state = {\r\n            change: false\r\n        }\r\n    }\r\n    confirm = () => {\r\n        // Thực hiện các lệnh xử lý tại đây\r\n        this.props.changeConfirmStatus();\r\n    }\r\n    cancel = () => {\r\n        // this.props.changeConfirmStatus();\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    edit = (type) => {\r\n        this.props.changeAddTypeStatus();\r\n        this.props.setEditTypeStatus();\r\n        this.props.typeToUpdate(type);\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    async delete(type){\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productTypes:\r\n            [\r\n                {\r\n                    typeID: type._id.typeID,\r\n                    storeID: type._id.storeID\r\n                }\r\n            ]\r\n                \r\n        }\r\n        await axios.delete(`http://localhost:5000/api/product/type`,{data: data})\r\n            .then(res => {\r\n                console.log(\"delete success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                // alert(\"Lỗi gì cmnr\")\r\n            })\r\n        // Ở đây mình phải cập nhật join nữa\r\n        // Phải get tất cả cái join mà có cái type là type hiện tại\r\n        var allJoinMatch = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n                \"_id.typeID\": type._id.typeID,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, \r\n        {\r\n            params: {...data1}\r\n        })\r\n            .then(res => {\r\n                allJoinMatch = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n\r\n        var allProductJoin = [];\r\n        for(var i = 0 ; i < allJoinMatch.length; i++)\r\n        {\r\n            allProductJoin.push({\r\n                productID: allJoinMatch[i]._id.productID,\r\n                typeID: type._id.typeID,\r\n                importDate: allJoinMatch[i]._id.importDate,\r\n                storeID: this.props.infoUser.email,\r\n                \r\n            });\r\n        }\r\n        \r\n        const dataJoin = {\r\n            token: localStorage.getItem('token'),\r\n            productJoinTypes: allProductJoin,      \r\n        }\r\n\r\n        console.log(dataJoin);\r\n\r\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\r\n            .then(res => {\r\n                console.log(\"delete join success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n\r\n        this.loadAllType();\r\n        this.setState({change: !this.state.change})\r\n    }\r\n    \r\n\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err); // 401 ở đây\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        listTypeInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n        productTypes=[];\r\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\r\n        {\r\n            productTypes.push(listTypeInfor[i].name);\r\n        }\r\n        this.setState({change: true});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"All Good Type\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid container item md={12} xs={12} spacing={0}>\r\n                                { listTypeInfor.map((type) => (\r\n                                    <Grid item md={3} style={{border:'1px solid #333', padding: 4}}>\r\n                                        <span>{type.name}</span>\r\n                                        <BiEdit onClick={() => this.edit(type)}/>\r\n                                        <TiDelete onClick={() => this.delete(type)}/>\r\n                                    </Grid>\r\n                                ))}\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Thoát\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n                {/* {this.props.addTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <AddTypeModal></AddTypeModal>\r\n                        </div>\r\n                    ): null} */}\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        editTypeStatus: state.editTypeStatus,\r\n        addTypeStatus: state.addTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        infoUser: state.infoUser,\r\n        typeProductValue: state.typeProductValue,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        setEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_EDIT_TYPE_STATUS\",\r\n            })\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        typeToUpdate: (data) => {\r\n            dispatch({\r\n                type: \"UPDATE_PRODUCT_TYPE\",\r\n                _id: {\r\n                    typeID: data._id.typeID,\r\n                    storeID: data._id.storeID,\r\n                },\r\n                name: data.name\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTypeModal);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Regulation.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileSetting.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ModalAdd.js",["519","520","521","522"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport TimePicker from '@mui/lab/TimePicker';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nclass ModalAdd extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        if (this.props.editShiftStatus) {\r\n            var _timeFrom = new Date();\r\n            if (this.props.objectEditShift.from.includes(\"PM\")) {\r\n                var fromHour =  parseInt(this.props.objectEditShift.from.slice(0, this.props.objectEditShift.from.indexOf(':')));\r\n                var fromMin = parseInt(this.props.objectEditShift.from.slice(this.props.objectEditShift.from.indexOf(':') + 1));\r\n                _timeFrom.setHours(fromHour + 12, fromMin);\r\n            } else {\r\n                var fromHour =  parseInt(this.props.objectEditShift.from.slice(0, this.props.objectEditShift.from.indexOf(':')));\r\n                var fromMin = parseInt(this.props.objectEditShift.from.slice(this.props.objectEditShift.from.indexOf(':') + 1));\r\n                _timeFrom.setHours(fromHour , fromMin);\r\n            }\r\n           \r\n            var _timeTo = new Date();\r\n            if (this.props.objectEditShift.to.includes(\"PM\")) {\r\n                var toHour = parseInt(this.props.objectEditShift.to.slice(0, this.props.objectEditShift.to.indexOf(':')));\r\n                var toMin = parseInt(this.props.objectEditShift.to.slice(this.props.objectEditShift.to.indexOf(':') + 1));\r\n                _timeTo.setHours(toHour + 12, toMin);\r\n            } else {\r\n                var toHour = parseInt(this.props.objectEditShift.to.slice(0, this.props.objectEditShift.to.indexOf(':')));\r\n                var toMin = parseInt(this.props.objectEditShift.to.slice(this.props.objectEditShift.to.indexOf(':') + 1));\r\n                _timeTo.setHours(toHour, toMin);\r\n            }\r\n            \r\n        }\r\n\r\n        this.state = {\r\n            timeFrom: this.props.editShiftStatus ? _timeFrom : new Date(2018, 5, 35, 0, 0, 0),\r\n            timeTo: this.props.editShiftStatus ? _timeTo : new Date(2018, 5, 35, 0, 0, 0),\r\n            isSalary: false,\r\n            isDescription: false,\r\n            isTimeTo: false,\r\n            valueTime: this.props.editShiftStatus ? 1 : null,\r\n        }\r\n    }\r\n\r\n    descriptionShift = this.props.editShiftStatus ? this.props.objectEditShift.description : \"Ex : abc\"\r\n    timeFrom = this.props.editShiftStatus ? this.props.objectEditShift.from : \"00:00 AM\"\r\n    timeTo = this.props.editShiftStatus ? this.props.objectEditShift.to : \"00:00 AM\"\r\n    salary = this.props.editShiftStatus ? this.props.objectEditShift.salary : 10000\r\n\r\n    // Handle user\r\n    hanhleCancel = (e) => {\r\n        this.props.changeAddStatus();\r\n        if (this.props.editShiftStatus) {\r\n            this.props.changeEditShiftStatus();\r\n        }\r\n    }\r\n\r\n    changeTimeFrom = (e) => {\r\n        var hourse = e.getHours()\r\n        const minutes = e.getMinutes()\r\n        if (hourse >= 12) {\r\n            hourse = hourse - 12;\r\n            this.timeFrom = hourse.toString() + \":\" + minutes.toString() + \" PM\"\r\n        } else {\r\n            this.timeFrom = hourse.toString() + \":\" + minutes.toString() + \" AM\"\r\n        }\r\n        console.log(this.timeFrom);\r\n        this.setState({\r\n            timeFrom: e,\r\n        })\r\n    }\r\n\r\n    changeTimeTo = (e) => {\r\n        var hourse = e.getHours()\r\n        const minutes = e.getMinutes()\r\n        if (hourse >= 12) {\r\n            hourse = hourse - 12;\r\n            this.timeTo = hourse.toString() + \":\" + minutes.toString() + \" PM\"\r\n        } else {\r\n            this.timeTo = hourse.toString() + \":\" + minutes.toString() + \" AM\"\r\n        }\r\n        console.log(this.timeTo);\r\n        this.setState({\r\n            timeTo: e,\r\n        })\r\n    }\r\n\r\n    blurDiscription = (e) => {\r\n        this.descriptionShift = e.target.value;\r\n        if (e.target.value === \"\") {\r\n            this.setState({\r\n                isDescription: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isDescription: false,\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    // Tạo code để xác nhận\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    editShift = async () => {\r\n        if (this.state.timeTo - this.state.timeFrom < 1) {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('The time end must be greater than the time start', 'error')\r\n        }\r\n        if (!this.state.isSalary && !this.state.isDescription && (this.state.timeTo - this.state.timeFrom > 0)) {\r\n            var data = {\r\n                token: localStorage.getItem('token'),\r\n                idUser: this.props.infoUser.email,\r\n                id: this.props.objectEditShift.id,\r\n                salary: this.salary,\r\n                description: this.descriptionShift,\r\n                from: this.timeFrom,\r\n                to: this.timeTo,\r\n            }\r\n            await axios.post(`http://localhost:5000/api/profile/update-shift`, data)\r\n                .then(res => {\r\n                    if (res.data.token) {\r\n                        localStorage.setItem('token', res.data.token);\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(\"Edit shift success\", \"success\");\r\n                        this.props.updateShift(data);\r\n                    }\r\n                    this.props.changeEditShiftStatus();\r\n                    this.props.changeAddStatus();\r\n                })\r\n                .catch(err => {\r\n                    this.props.changeLoginStatus();\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n    blurSalary = (e) => {\r\n        if (e.target.value <= -1) {\r\n            this.setState({\r\n                isSalary: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isSalary: false,\r\n            })\r\n        }\r\n        this.salary = e.target.value;\r\n    }\r\n\r\n    // Call API\r\n    addShift = () => {\r\n        if (this.state.timeTo - this.state.timeFrom < 1) {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('The time end must be greater than the time start', 'error')\r\n        }\r\n        if (!this.state.isSalary && !this.state.isDescription && (this.state.timeTo - this.state.timeFrom > 0)) {\r\n            const code = this.makeCode(6);\r\n            const data = {\r\n                idUser: this.props.infoUser.email,\r\n                id: code,\r\n                salary: this.salary,\r\n                description: this.descriptionShift,\r\n                from: this.timeFrom,\r\n                to: this.timeTo,\r\n            }\r\n            const data1 = {\r\n                name: this.descriptionShift,\r\n                salary: this.salary,\r\n                timeFrom: this.timeFrom,\r\n                timeEnd: this.timeTo,\r\n                _id: { shiftID: code }\r\n            }\r\n            if (data) {\r\n                axios.post(`http://localhost:5000/api/profile/add-shift`, {\r\n                    email: this.props.infoUser.email,\r\n                    token: localStorage.getItem('token'),\r\n                    data: data,\r\n                })\r\n                    .then(res => {\r\n                        if (res.data.token) {\r\n                            this.props.addShift(data1);\r\n                            localStorage.setItem('token', res.data.token);\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(\"Add shift success\", \"success\");\r\n                        }\r\n                        this.props.changeAddStatus();\r\n                    })\r\n                    .catch(err => {\r\n                        this.props.changeLoginStatus();\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"modal-add-shift\" style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Create shift\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={12} xs={12}>\r\n                                <TextField\r\n                                    id=\"outlined-basic\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    defaultValue={(this.props.editShiftStatus ? this.props.objectEditShift.description : this.descriptionShift)}\r\n                                    onBlur={(e) => this.blurDiscription(e)}\r\n                                    label=\"Shift description\"\r\n                                    error={this.state.isDescription}\r\n                                    helperText={this.state.isDescription ? \"Enter something\" : \"\"}\r\n                                    required\r\n                                    type=\"text\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    onBlur={(e) => this.blurSalary(e)}\r\n                                    label=\"Salary\"\r\n                                    defaultValue={this.props.editShiftStatus ? this.props.objectEditShift.salary : this.salary}\r\n                                    error={this.state.isSalary}\r\n                                    helperText={this.state.isSalary ? \"Greater than 0\" : \"\"}\r\n                                    type=\"number\"\r\n                                    id=\"outlined-error-helper-text\"\r\n                                    name=\"salary\"\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                    <Stack spacing={3}>\r\n                                        <TimePicker\r\n                                            label=\"From\"\r\n                                            value={this.state.timeFrom}\r\n                                            onChange={(newValue) => this.changeTimeFrom(newValue)}\r\n                                            renderInput={(params) => <TextField {...params} />}\r\n                                        />\r\n                                        <TimePicker\r\n                                            label=\"To\"\r\n                                            value={this.state.timeTo}\r\n                                            onChange={(newValue) => this.changeTimeTo(newValue)}\r\n                                            renderInput={(params) => <TextField {...params} />}\r\n                                        />\r\n                                    </Stack>\r\n                                </LocalizationProvider>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        {this.props.editShiftStatus ? (\r\n                            <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.editShift()} variant=\"contained\" startIcon={<BiEdit />}>\r\n                                Save\r\n                            </Button>) : (\r\n                            <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.addShift()} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                                Add\r\n                            </Button>\r\n                        )}\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.hanhleCancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Cancel\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addStatus: state.addStatus,\r\n        infoUser: state.infoUser,\r\n        editShiftStatus: state.editShiftStatus,\r\n        objectEditShift: state.objectEditShift,\r\n        statusDarkmode: state.statusDarkmode\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_STATUS\",\r\n            });\r\n        },\r\n        addShift: (data) => {\r\n            dispatch({\r\n                type: \"ADD_SHIFT\",\r\n                newShift: data,\r\n            })\r\n        },\r\n        changeEditShiftStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_SHIFT_STATUS\",\r\n            })\r\n        },\r\n        updateShift: (data) => {\r\n            dispatch({\r\n                type: \"OBJECT_UPDATE_SHIFT\",\r\n                data: data,\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalAdd);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ListShift.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Print.js",["523","524","525"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileDetail.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\HistoryReciept.js",["526","527"],"import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport CollapsibleTable from './TableReciept'\r\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\r\n\r\nfunction HistoryReciept(props) {\r\n\r\n    const darkmode = useSelector(state => state.statusDarkmode)\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div style={{ overflow: 'hidden' }} className=\"modal-history-reciept\">\r\n            <div onClick={() => { dispatch({ type: \"CHANGE_HISTORY_RECIEPT_STATUS\" }) }} className=\"modal-overlay\"></div>\r\n            <div className=\"history-list-receipt\">\r\n                <Card>\r\n                    <CardHeader style={{ color: !darkmode ? '#0091ea' : 'white', backgroundColor: !darkmode ? '#efeeef' : '#455a64' }} title=\"History Reciept\" />\r\n                    <Divider></Divider>\r\n                </Card>\r\n                <div id=\"choses-product\" style={{ margin: '30px', height: '82%', overflow: 'hidden', overflowY: 'scroll' }}>\r\n                    <CollapsibleTable></CollapsibleTable>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HistoryReciept;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ChangePassword.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileHeader.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\ConfirmModal.js",["528","529","530","531","532","533"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nclass ConfirmModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    confirm = () => {\r\n        // Thực hiện các lệnh xử lý tại đây\r\n        this.props.changeConfirmStatus();\r\n        this.props.setConfirm();\r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeConfirmStatus();\r\n        this.props.setQuit();\r\n    }\r\n\r\n    getMessage = ()  => {\r\n        var message = \"Cái này chưa code\";\r\n        switch(this.props.confirmCode)\r\n        {\r\n            case 'confirm-delete-good':\r\n                message = \"Are you sure to delete this product ?\";\r\n            case 'confirm-import-good':\r\n                message = \"Are you sure to import this product ?\";\r\n        }\r\n        return (\r\n            <div>\r\n                {message}\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        console.log(this.props.objectEditShift);\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={12} xs={12}>\r\n                                {this.getMessage()}\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.confirm()} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                            Xác nhận\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Hủy\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        confirmStatus: state.confirmStatus,\r\n        deleteStatus: state.deleteStatus,\r\n        confirmCode: state.confirmCode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setConfirm: () => {\r\n            dispatch({\r\n                type: \"CONFIRM\",\r\n            });\r\n        },\r\n        setQuit: () => {\r\n            dispatch({\r\n                type: \"QUIT\",\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmModal);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\AddTypeModal.js",["534","535","536","537","538","539","540","541"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Alert } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel, GiVampireCape } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nvar listTypeInfor = [];\r\n\r\nclass AddTypeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            change: 'false'\r\n        }\r\n        this.loadInitialData();\r\n        this.getAllTypeList();\r\n    }\r\n    storeID = \"\";\r\n    typeList = [];\r\n\r\n    async getAllTypeList(){\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        console.log(data.token);\r\n        // alert(data.token);\r\n        console.log(data.filter);\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n    }\r\n    addType = () => {\r\n        var newTypeName = document.querySelector('input[name=\"typeName\"]').value.trim();\r\n        if(this.checkConstraint(newTypeName)==false)  return;\r\n        var genTypeID = 0;\r\n        if(listTypeInfor.length>0)\r\n        {\r\n            genTypeID = parseInt(listTypeInfor[listTypeInfor.length-1]._id.typeID) + 1;\r\n        } \r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productType: {\r\n                _id:{\r\n                    typeID: genTypeID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: newTypeName,\r\n            }    \r\n        }\r\n        axios.post(`http://localhost:5000/api/product/type`, data)\r\n            .then(res => {\r\n                alert(\"Save success\");\r\n                //TODO: Cập nhật token ở đây nữa\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        this.props.changeAddTypeStatus();\r\n    }\r\n    \r\n    checkConstraint(typeName) {\r\n        //Constraint 1: Check name\r\n        for(var i=0;i<listTypeInfor.length;i++)\r\n        {\r\n            if(listTypeInfor[i].name==typeName)\r\n            {\r\n                if(!this.props.isAddTypeStatus && typeName.trim()==this.props.typeProductValue.name)\r\n                {\r\n                    alert(\"Không đổi tên à anh zai\");\r\n                    return false;\r\n                }\r\n                alert(\"Trùng tên rồi anh chai\");\r\n                return false;\r\n            }\r\n            \r\n        }        \r\n        // Constraint 2: Not blank\r\n        if(typeName.length==0)\r\n        {\r\n            alert(\"Không nhập gì à anh chai\")\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n    cancel = () => {\r\n        this.props.changeAddTypeStatus();\r\n    }\r\n\r\n    handle = () => {\r\n        if (this.props.isAddTypeStatus)\r\n            this.addType();\r\n        else \r\n            this.editType();\r\n    }\r\n\r\n    editType = () => {\r\n        var newTypeName = this.typeName;\r\n        if(this.checkConstraint(newTypeName)==false) return;\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productType: {\r\n                _id: {\r\n                    typeID: this.props.typeProductValue._id.typeID,\r\n                    storeID: this.props.infoUser.email,\r\n                }, \r\n                name: newTypeName,\r\n            }\r\n        }\r\n        // alert(data.product.name)\r\n        axios.put(`http://localhost:5000/api/product/type`, data)\r\n            .then(res => {\r\n                // Có khi mình sẽ cập nhật type ở dây\r\n                console.log(\"Update success\");\r\n                alert('update được rồi anh trai')\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(\"Lỗi gì cmnr\")\r\n            })\r\n        this.props.changeAddTypeStatus();\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    typeName = \"\";\r\n    loadInitialData = () => {\r\n        if (this.props.isAddTypeStatus) {\r\n            \r\n        }\r\n        else\r\n        {\r\n            this.typeName = this.props.typeProductValue.name;\r\n            this.setState({change: true});\r\n        } \r\n    }\r\n\r\n    changeTypeName(e)\r\n    {\r\n        this.typeName = e.target.value;\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader \r\n                        style={{ color: 'blue', backgroundColor: '#efeeef', textAlign: 'center' }} \r\n                        title={this.props.isAddTypeStatus? \"Add Type\" : \"Edit Type\"}\r\n                        />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid \r\n                            container \r\n                            spacing={2}\r\n                            justifyContent={'center'}\r\n                            alignItems={'center'}\r\n                        >\r\n                            <Grid item md={2} xs={12}>\r\n                                TypeName\r\n                            </Grid>\r\n                            <Grid item md={10} xs={12}>\r\n                                <TextField\r\n                                    id=\"outlined-basic\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    required\r\n                                    type=\"text\"\r\n                                    name=\"typeName\"\r\n                                    defaultValue={this.typeName}\r\n                                    onChange={(e) => this.changeTypeName(e)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button \r\n                            style={{ backgroundColor: 'yellowgreen' }} \r\n                            // onClick={() => this.addShift()} \r\n                            onClick={() => this.handle()}\r\n                            variant=\"contained\" \r\n                            startIcon={<BiPlusMedical />}\r\n                        >\r\n                            Xác nhận\r\n                        </Button>\r\n                        <Button \r\n                            style={{ backgroundColor: 'red' }} \r\n                            // onClick={() => this.editShift()}\r\n                            onClick={() => this.cancel()}\r\n                            variant=\"contained\" \r\n                            startIcon={<GiCancel />}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        infoUser: state.infoUser,\r\n        typeProductValue: state.typeProductValue\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTypeModal);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\fakeData.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateEmployeeModal.js",["542","543","544","545","546"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass UpdateEmployeeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n        }; \r\n        this.loadInitialData();\r\n    }\r\n    \r\n\r\n    cancel = () => {\r\n        \r\n    }\r\n\r\n    updateEmployee = () => {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: this.id,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                managerID: this.props.infoUser.email,\r\n                password: document.querySelector('input[name=\"password\"]').value,\r\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\r\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\r\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\r\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\r\n                email: document.querySelector('input[name=\"email\"]').value,\r\n                address: document.querySelector('input[name=\"adress\"]').value,\r\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\r\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\r\n            }   \r\n        }\r\n        console.log(data);\r\n        axios.put(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Update success\");\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        this.props.changeUpdateEmployeeStatus();\r\n    }\r\n\r\n    id = \"\";\r\n    password = \"\";\r\n    firstName = \"\";\r\n    lastName = \"\";\r\n    cardID = \"\";\r\n    phoneNumber = \"\";\r\n    address = \"\";\r\n    email = \"\";\r\n    startDate = \"\";\r\n    birthDay = \"\";\r\n\r\n\r\n    loadInitialData() {\r\n        var currentEmployee = this.props.currentEditEmployee.state;\r\n        console.log(\"currentEmployee\", currentEmployee);\r\n        this.id = currentEmployee._id.employeeID;\r\n        this.password = currentEmployee.password;\r\n        this.firstName = currentEmployee.firstName;\r\n        this.lastName = currentEmployee.lastName;\r\n        this.cardID = currentEmployee.cardID;\r\n        this.phoneNumber = currentEmployee.phoneNumber;\r\n        this.address = currentEmployee.address;\r\n        this.email = currentEmployee.email;\r\n        this.startDate = currentEmployee.startDate;\r\n        if(this.startDate!=null)\r\n        {\r\n            this.startDate = this.startDate.substring(0, this.startDate.indexOf('T'));\r\n        }\r\n        this.birthDay = currentEmployee.dateOfBirth;\r\n        if(this.birthDay!=null)\r\n        {\r\n            this.birthDay = this.birthDay.substring(0, this.birthDay.indexOf('T'));\r\n        }\r\n        this.setState({change: !this.state.change})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"UPDATE EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                               <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            value={this.id}\r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>Password</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"password\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.password}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"firstName\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.firstName}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"lastName\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.lastName}\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"cardID\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.cardID}\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"phoneNumber\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.phoneNumber}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Adress</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"adress\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.address}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>StartDate</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\"\r\n                                            name=\"startDate\"\r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.startDate}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"email\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.email}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\" \r\n                                            // class=\"input-val\"\r\n                                            name=\"birthDay\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.birthDay}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.updateEmployee()}>\r\n                                            UPDATE\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        currentEditEmployee: state.currentEditEmployee,\r\n        infoUser: state.infoUser\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateEmployeeModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\PayMoneyModal.js",["547","548","549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564","565","566","567"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass PayEmployeeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            goodID : \"\",\r\n            change: false,\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n        }; \r\n    }\r\n    \r\n\r\n    cancel = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"PAY EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\" \r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>Old</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Gender</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Province</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.props.changePayEmployeeStatus()}>\r\n                                            Pay employee\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changePayEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PayEmployeeModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\SackedEmployeeMenu.js",["568"],"import { Icon } from '@iconify/react';\r\nimport editFill from '@iconify/icons-eva/edit-fill';\r\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\r\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\r\nimport {GiPayMoney} from \"react-icons/gi\";\r\nimport {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\n// material\r\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nclass EmployeeMoreMenu extends Component {\r\n  currentEmployee = {};\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n        change: 'false'\r\n        }\r\n        this.myRef = React.createRef();\r\n    }\r\n    setIsOpen(val) {\r\n        this.isOpen = val;\r\n        this.setState({change: val});\r\n        \r\n    }\r\n\r\n    edit() {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee:\r\n            [\r\n                {\r\n                    employeeID: this.props.data,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n            ]\r\n            \r\n        }\r\n        axios.patch(`http://localhost:5000/api/employee/delete`, data)\r\n            .then(res => {\r\n                alert(\"back to work success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n    }\r\n\r\n    delete() {\r\n        const data = {\r\n        token: localStorage.getItem('token'),\r\n        employee:\r\n        [\r\n            {\r\n                employeeID: this.props.data,\r\n                storeID: this.props.infoUser.email, \r\n            },\r\n        ] \r\n        }\r\n        console.log(data);\r\n\r\n        axios.delete(`http://localhost:5000/api/employee/delete`,{data: data})\r\n            .then(res => {\r\n                alert(\"delete permantly employee(s) success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n    }\r\n\r\n    isOpen=false;\r\n    render() {\r\n        return (\r\n        <>\r\n            <IconButton ref={this.myRef} onClick={() => this.setIsOpen(true)}>\r\n            <Icon icon={moreVerticalFill} width={20} height={20} />\r\n            </IconButton>\r\n    \r\n            <Menu\r\n            style={{\r\n                position: 'absolute',\r\n                bottom: 0,\r\n                left: 0,\r\n            }}\r\n            open={this.isOpen}\r\n            onClose={() => this.setIsOpen(false)}\r\n            anchorEl={this.myRef.current}\r\n            // PaperProps={{\r\n            //   sx: { width: 200, maxWidth: '100%' }\r\n            // }}\r\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n            >\r\n            <MenuItem sx={{ color: 'text.secondary' }}\r\n                onClick={() => this.delete()}\r\n            >\r\n                <ListItemIcon>\r\n                <Icon icon={trash2Outline} width={24} height={24} />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\r\n            </MenuItem>\r\n    \r\n            <MenuItem sx={{ color: 'text.secondary' }}\r\n                onClick={() => this.edit()}\r\n            >\r\n                <ListItemIcon>\r\n                <Icon icon={editFill} width={24} height={24} />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Return\" primaryTypographyProps={{ variant: 'body2' }} />\r\n            </MenuItem>\r\n            </Menu>\r\n        </>\r\n        );\r\n    }\r\n    \r\n    }\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\r\n        payEmployeeStatus: state.payEmployeeStatus,\r\n        listEmployee: state.listEmployee,\r\n        infoUser: state.infoUser,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeMoreMenu.js",["569"],"import { Icon } from '@iconify/react';\r\nimport editFill from '@iconify/icons-eva/edit-fill';\r\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\r\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\r\nimport {GiPayMoney} from \"react-icons/gi\";\r\nimport {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\n// material\r\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nclass EmployeeMoreMenu extends Component {\r\n  currentEmployee = {};\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: 'false'\r\n    }\r\n    this.myRef = React.createRef();\r\n  }\r\n  setIsOpen(val) {\r\n    this.isOpen = val;\r\n    this.setState({change: val});\r\n    \r\n  }\r\n\r\n  edit() {\r\n    this.getEmployeeByID(this.props.data);\r\n    // console.log(\"send nude\", this.currentEmployee);\r\n    this.props.setUpdateEmployee(this.currentEmployee);\r\n    this.props.changeUpdateEmployeeStatus();\r\n  }\r\n\r\n  delete() {\r\n    const data = {\r\n      token: localStorage.getItem('token'),\r\n      employee:\r\n      [\r\n          {\r\n              employeeID: this.props.data,\r\n              storeID: this.props.infoUser.email, \r\n          },\r\n      ] \r\n    }\r\n    console.log(data);\r\n\r\n    axios.delete(`http://localhost:5000/api/employee`,{data: data})\r\n        .then(res => {\r\n            alert(\"delete employee(s) success\");\r\n        })\r\n        .catch(err => {\r\n            alert(err);\r\n        })\r\n  }\r\n\r\n  getEmployeeByID(employeeID) {\r\n    var listEmployee = this.props.listEmployee.employees;\r\n    console.log(listEmployee);\r\n    for(var i = 0; i < listEmployee.length ; i++)\r\n    {\r\n      if(employeeID == listEmployee[i]._id.employeeID)\r\n      {\r\n        this.currentEmployee = listEmployee[i];\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  isOpen=false;\r\n  render() {\r\n    return (\r\n      <>\r\n        <IconButton ref={this.myRef} onClick={() => this.setIsOpen(true)}>\r\n          <Icon icon={moreVerticalFill} width={20} height={20} />\r\n        </IconButton>\r\n  \r\n        <Menu\r\n          style={{\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            left: 0,\r\n          }}\r\n          open={this.isOpen}\r\n          onClose={() => this.setIsOpen(false)}\r\n          anchorEl={this.myRef.current}\r\n          // PaperProps={{\r\n          //   sx: { width: 200, maxWidth: '100%' }\r\n          // }}\r\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n          transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        >\r\n          <MenuItem sx={{ color: 'text.secondary' }}\r\n            onClick={() => this.delete()}\r\n          >\r\n            <ListItemIcon>\r\n              <Icon icon={trash2Outline} width={24} height={24} />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n  \r\n          <MenuItem sx={{ color: 'text.secondary' }}\r\n            onClick={() => this.edit()}\r\n          >\r\n            <ListItemIcon>\r\n              <Icon icon={editFill} width={24} height={24} />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Edit\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n          <MenuItem sx={{ color: 'text.secondary' }}\r\n            onClick={()=> this.props.changePayEmployeeStatus()}\r\n          >\r\n            <ListItemIcon>\r\n              <GiPayMoney size={24}/> \r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Pay money\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n        </Menu>\r\n      </>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    updateEmployeeStatus: state.updateEmpoyeeStatus,\r\n    payEmployeeStatus: state.payEmployeeStatus,\r\n    listEmployee: state.listEmployee,\r\n    infoUser: state.infoUser,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n      changeUpdateEmployeeStatus: () => {\r\n          dispatch({\r\n              type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n          });\r\n      },\r\n      changePayEmployeeStatus: () => {\r\n        dispatch({\r\n            type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n        });\r\n      },\r\n      setUpdateEmployee: (currentEmployee) => {\r\n        dispatch({\r\n          type: \"SET_UPDATE_EMPLOYEE\",\r\n          data: currentEmployee\r\n        });\r\n      }\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeToolbar.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddEmployeeModal.js",["570","571","572","573","574","575","576"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nvar listUsers = [];\r\n\r\nclass AddEmployeeModal extends Component {\r\n\r\n    genID = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n        };\r\n        listUsers = [];\r\n        this.getAllEmployee(); \r\n    }\r\n\r\n    async getAllEmployee () {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/employee/`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                // console.log(err);\r\n                alert(err)\r\n            })\r\n        listUsers = [];\r\n        for(var i = 0; i < result.length; i++)\r\n        {\r\n            listUsers.push(result[i]);\r\n        }\r\n        this.props.getEmployee(listUsers);\r\n        if(listUsers.length > 0)\r\n        {\r\n            this.genID = parseInt(listUsers[listUsers.length - 1]._id.employeeID) + 1;\r\n            console.log(this.genID);\r\n        }\r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    // Thêm nhân viên\r\n    async addEmployeeToDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: document.querySelector('input[name=\"ID\"]').value,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                managerID: this.props.infoUser.email,\r\n                password: document.querySelector('input[name=\"password\"]').value,\r\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\r\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\r\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\r\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\r\n                email: document.querySelector('input[name=\"email\"]').value,\r\n                address: document.querySelector('input[name=\"adress\"]').value,\r\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\r\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\r\n                // endDate: \"2021-11-31T00:00:00.000Z\",\r\n            }   \r\n        }\r\n        console.log(data);\r\n        await axios.post(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu thành công\")\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        this.addEmployeeToDatabase();\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"ADD EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            name='ID'\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={\"None\"}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>Password</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"password\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"firstName\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"lastName\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"cardID\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"phoneNumber\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Adress</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"adress\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>StartDate</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\"\r\n                                            name=\"startDate\"\r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"email\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\" \r\n                                            // class=\"input-val\"\r\n                                            name=\"birthDay\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.addEmployee()}>\r\n                                            Add\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEmployeeModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\FixedCalendar.js",["577"],"import {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { withStyles } from '@material-ui/styles';\r\n// material\r\nimport { Paper, TableContainer, Table, TableHead, TableCell, TableRow, Button } from '@mui/material';\r\nimport FixedTableCell from './FixedCalendarCell';\r\n\r\n// ----------------------------------------------------------------------\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '80px',\r\n    } \r\n})\r\n\r\nclass FixedCalendar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: 'false'\r\n    }\r\n  }\r\n  // Lấy các ca làm và từ đó tạo các dòng của ca làm đó, đầu tiên cứ mặc định là có 3 ca làm đã\r\n  listShift = [\r\n    {\r\n        timeFrom: '6h',\r\n        timeTo: '9h',\r\n        name: 'Morning shift 1'\r\n    },\r\n    {\r\n        timeFrom: '9h',\r\n        timeTo: '12h',\r\n        name: 'Morning shift 2'\r\n    },\r\n    {\r\n        timeFrom: '12h',\r\n        timeTo: '4h',\r\n        name: 'Afternoon shift'\r\n    },\r\n    {\r\n        timeFrom: '4h',\r\n        timeTo: '8h',\r\n        name: 'Night shift'\r\n    }\r\n  ]\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div style={{marginTop: 10, padding: 24, maxHeight: 600, overflowY: 'auto'}}> \r\n          <TableContainer component={Paper}>\r\n              <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                  <TableHead>\r\n                      <TableRow>\r\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='80px'>Shift</TableCell>\r\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Mon</TableCell>\r\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Tue</TableCell>\r\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Wed</TableCell>\r\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Thu</TableCell>\r\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Fri</TableCell>\r\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Sat</TableCell>\r\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Sun</TableCell>\r\n                      </TableRow>\r\n                      {\r\n                          this.listShift.map((shift) => (\r\n                              <TableRow>\r\n                                  <TableCell className={classes.goodTable_Cell}>{shift.timeFrom + '-' + shift.timeTo}</TableCell>\r\n                                  <FixedTableCell></FixedTableCell>\r\n                                  <FixedTableCell></FixedTableCell>\r\n                                  <FixedTableCell></FixedTableCell>\r\n                                  <FixedTableCell></FixedTableCell>\r\n                                  <FixedTableCell></FixedTableCell>\r\n                                  <FixedTableCell></FixedTableCell>\r\n                                  <FixedTableCell></FixedTableCell>\r\n                              </TableRow>\r\n                          ))\r\n                      }\r\n                  </TableHead>\r\n              </Table>\r\n          </TableContainer>\r\n          <Button variant=\"contained\">Save</Button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    \r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n      \r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(FixedCalendar));","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeTableHeader.js",["578","579","580","581","582","583","584","585"],"import PropTypes from 'prop-types';\r\n// material\r\nimport { visuallyHidden } from '@mui/utils';\r\nimport { Box, Checkbox, TableRow, TableCell, TableHead, TableSortLabel } from '@mui/material';\r\nimport { withStyles } from '@material-ui/styles';\r\n// ----------------------------------------------------------------------\r\n\r\nEmployeeTableHeader.propTypes = {\r\n  order: PropTypes.oneOf(['asc', 'desc']),\r\n  orderBy: PropTypes.string,\r\n  rowCount: PropTypes.number,\r\n  headLabel: PropTypes.array,\r\n  numSelected: PropTypes.number,\r\n  onRequestSort: PropTypes.func,\r\n  onSelectAllClick: PropTypes.func\r\n};\r\nconst styles = theme =>  ({\r\n  goodTable: {                                     \r\n      borderWidth: '1px',\r\n      borderColor: '#ccc',\r\n      borderStyle: 'solid'\r\n  },\r\n  goodTable_Cell_Header: {                                     \r\n      borderWidth: '1px',\r\n      borderColor: '#ccc',\r\n      borderStyle: 'solid',\r\n      height: '40px',\r\n  },\r\n  goodTable_Cell: {                                     \r\n      borderWidth: '1px',\r\n      borderColor: '#ccc',\r\n      borderStyle: 'solid',\r\n      height: '80px',\r\n  } \r\n})\r\n\r\nfunction EmployeeTableHeader( props){\r\n  const {\r\n    order,\r\n    orderBy,\r\n    rowCount,\r\n    headLabel,\r\n    numSelected,\r\n    onRequestSort,\r\n    onSelectAllClick} = props;\r\n  // const createSortHandler = (property) => (event) => {\r\n  //   onRequestSort(event, property);\r\n  // };\r\n  const {classes} =  props;\r\n  // console.log(\"headLabel\", headLabel);\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\" className = {classes.goodTable_Cell_Header}>\r\n          <Checkbox\r\n            // indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            // checked={rowCount > 0 && numSelected === rowCount}\r\n            // onChange={onSelectAllClick}\r\n          />\r\n        </TableCell>\r\n        {headLabel.map((headCell) => (\r\n          <TableCell\r\n            className = {classes.goodTable_Cell_Header}\r\n            // key={headCell.id}\r\n            // align={headCell.alignRight ? 'right' : 'left'}\r\n            // sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              // hideSortIcon\r\n              // active={orderBy === headCell.id}\r\n              // direction={orderBy === headCell.id ? order : 'asc'}\r\n              // onClick={createSortHandler(headCell.id)}\r\n              style={{\r\n                color: '#333'\r\n              }}\r\n            >\r\n              {headCell.label}\r\n              {/* {orderBy === headCell.id ? (\r\n                <Box sx={{ ...visuallyHidden }}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null} */}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nexport default withStyles( styles )( EmployeeTableHeader );","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UnShiftEmployee.js",["586"],"import {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { withStyles } from '@material-ui/styles';\r\n// material\r\nimport { Paper, TableContainer, Table, TableHead, TableCell, TableRow } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    } \r\n})\r\n\r\nclass UnShiftEmployee extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: 'false'\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div style={{marginTop: 0, padding: 24}}> \r\n          <TableContainer component={Paper}>\r\n                <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='80px' rowSpan={2}>Day</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" rowSpan={2}>Shift</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" colSpan={2}>Withdraw</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" colSpan={2}>Change</TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\r\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\r\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\r\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\r\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\r\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\r\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\r\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\r\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\r\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\r\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                </Table>\r\n            </TableContainer>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    \r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n      \r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(UnShiftEmployee));","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\DarkMode.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ComponentToPrint.js",["587","588","589"],"import React from 'react';\r\n\r\n\r\n\r\nclass ComponentToPrint extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date(),\r\n        }\r\n    }\r\n\r\n    minute = 1000 * 60;\r\n    hour = this.minute * 60;\r\n    day = this.hour * 24;\r\n    year = this.day * 365;\r\n\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    totalMoney = () => {\r\n        let total = 0;\r\n        this.props.shoppingBags.map(value => {\r\n            total += value.quantity * value.product.sellPrice;\r\n        })\r\n        return total.toLocaleString();\r\n    }\r\n\r\n    reduceTotalMoney = () => {\r\n        let total = 0;\r\n        this.props.shoppingBags.map(value => {\r\n            total += value.quantity * value.product.sellPrice;\r\n        })\r\n        if (total !== 0) {\r\n            total = total*this.props.percentDiscount/100\r\n        }\r\n        return total.toLocaleString()\r\n    }\r\n\r\n    finalTotalMoney = () => {\r\n        let total = 0;\r\n        this.props.shoppingBags.map(value => {\r\n            total += value.quantity * value.product.sellPrice;\r\n        })\r\n        if (total !== 0 && this.props.percentDiscount !== 0) {\r\n            total -= total*this.props.percentDiscount/100\r\n        }\r\n        return total.toLocaleString();\r\n    }\r\n\r\n    dateFunction = () => {\r\n        let month = this.state.date.getMonth()+1;\r\n        return \"  \" + this.state.date.getDate() + \" / \" + month + \" / \" + this.state.date.getFullYear()\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"row\">\r\n                {this.reduceTotalMoney()}\r\n                <div className=\"col-12\">\r\n                    <h1 style={{ textAlign: 'center' }}>{this.props.infoUser.storeName}</h1>\r\n                </div>\r\n                <div style={{ borderBottom: '1px solid #00000059' }} className=\"col-12\">\r\n                    <p style={{ textAlign: 'center', marginBottom: '0' }}>{this.props.infoUser.address}</p>\r\n                    <p style={{ textAlign: 'center' }}>{this.props.infoUser.district + ' ' + this.props.infoUser.province}</p>\r\n                    <p style={{ textAlign: 'center' }}>{\"SĐT: \" + this.props.infoUser.tel}</p>\r\n                </div>\r\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\r\n                    <h4 style={{ textAlign: 'center' }}>HÓA ĐƠN THANH TOÁN</h4>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <p style={{ textAlign: 'center', fontWeight: '400' }}>Số HĐ: {this.props.MAHD}</p>\r\n                    <div style={{ margin: '0 5px' }} className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <p style={{ fontWeight: '700' }}>Date:\r\n                                <span style={{ fontWeight: '400' }}>\r\n                                    {this.dateFunction()}\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <p style={{ fontWeight: '700' }}>Time:\r\n                                <span style={{ fontWeight: '400' }}>\r\n                                    {\"  \" + this.state.date.getHours() + \":\" + this.state.date.getMinutes()}\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <p style={{ fontWeight: '700', margin: '0 17px' }}>\r\n                        Cashier:\r\n                        <span style={{ fontWeight: '400' }}>\r\n                            {\"  Admin\"}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <table style={{ margin: '0 10px' }} class=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Quantity</th>\r\n                            <th scope=\"col\">Price</th>\r\n                            <th scope=\"col\">Total money</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.props.shoppingBags ? this.props.shoppingBags.map((value, key) => (\r\n                            <tr>\r\n                                <td>{key + 1}</td>\r\n                                <td>{value.product.name}</td>\r\n                                <td>{value.quantity}</td>\r\n                                <td>{value.product.sellPrice}</td>\r\n                                <td>{value.quantity * value.product.sellPrice}</td>\r\n                            </tr>\r\n                        ))\r\n                            : 'Không có gì'}\r\n\r\n                    </tbody>\r\n                </table>\r\n                <div style={{marginTop: '20px'}} className=\"col-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'end' }}>Total :</h6>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'start' }}>{this.totalMoney()}đ</h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'end' }}>Discount :</h6>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'start' }}>-{this.reduceTotalMoney()}đ</h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <h5 style={{ textAlign: 'end' }}>TOTAL FINAL :</h5>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h5 style={{ textAlign: 'start' }}>{this.finalTotalMoney()}đ</h5>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\r\n                    <h6 style={{ textAlign: 'center',fontStyle: 'italic ' }}>Xin cảm ơn quý khách</h6>\r\n                    <h6 style={{ textAlign: 'center',fontStyle: 'italic ' }}>hẹn gặp lại!</h6>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ComponentToPrint;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\TableReciept.js",["590"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport { Grid, Box } from '@mui/material';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { FiEdit } from 'react-icons/fi'\r\nimport axios from 'axios';\r\n\r\n\r\nfunction Row(props) {\r\n    const { row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const dispatch = useDispatch();\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const infoUser = useSelector(state => state.infoUser)\r\n    const statusEditInfoBill = useSelector(state => state.statusEditInfoBill)\r\n    const editReciept = (MAHD) => {\r\n        let objectInfoBill = [];\r\n        listReciept.map(value => {\r\n            if (value.MAHD === MAHD) {\r\n                objectInfoBill = value\r\n            }\r\n            return value;\r\n        })\r\n        if (!statusEditInfoBill) {\r\n            axios.post('http://localhost:5000/api/sell-product/edit-reciept',{\r\n                MAHD: MAHD,\r\n                token: localStorage.getItem('token'),\r\n                email: infoUser.email,\r\n            })\r\n            dispatch({\r\n                type: \"EDIT_SHOPPING_BAGS\",\r\n                MAHD: MAHD,\r\n            })\r\n            dispatch({\r\n                type: \"INFO_SHOPPING_BAGS_EDIT\",\r\n                listProduct: objectInfoBill.listProduct,\r\n            })\r\n            dispatch({\r\n                type: \"ADD_INFO_BILL_EDIT\",\r\n                InfoBill: objectInfoBill,\r\n            })\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_INFOMATION_STATUS\",\r\n            })\r\n            dispatch({\r\n                type: \"CHANGE_HISTORY_RECIEPT_STATUS\"\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: \"Con` don hang` cho` !\",\r\n                typeMessage: \"warning\"\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const TypeReciept = (isEdit, isDelete) => {\r\n        if (isDelete) {\r\n            return 'red'\r\n        } else if (isEdit) {\r\n            return '#f4f492'\r\n        } else {\r\n            return '#a6ffa6'\r\n        }\r\n    }\r\n\r\n    const StatusTypeReciept = (isEdit, isDelete) => {\r\n        if (isDelete) {\r\n            return 'Đã xóa'\r\n        } else if (isEdit) {\r\n            return 'Đổi trả'\r\n        } else {\r\n            return 'Thành công'\r\n        }\r\n    }\r\n\r\n    const showEdit = (isEdit, isDelete) => {\r\n        if (isEdit || isDelete) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const countQuantity = () => {\r\n        let count = 0;\r\n        row.listProduct.map(value => {\r\n            count += value.quantity;\r\n        })\r\n        return count;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow style={{ backgroundColor: TypeReciept(row.isEdit, row.isDelete) }} sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n                <TableCell>\r\n                    <IconButton\r\n                        aria-label=\"expand row\"\r\n                        size=\"small\"\r\n                        onClick={() => setOpen(!open)}\r\n                    >\r\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                    </IconButton>\r\n                </TableCell>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                    {row.MAHD}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.date}</TableCell>\r\n                <TableCell align=\"right\">{row.totalMoney}</TableCell>\r\n                <TableCell align=\"right\">{row.discount}</TableCell>\r\n                <TableCell align=\"right\">{row.totalFinalMoney}</TableCell>\r\n                <TableCell>\r\n                    {!showEdit(row.isEdit, row.isDelete) ? (\r\n                        <IconButton onClick={() => editReciept(row.MAHD)} color=\"secondary\" aria-label=\"fingerprint\">\r\n                            <FiEdit />\r\n                        </IconButton>\r\n                    ) : null}\r\n                </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={12}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Box sx={{ margin: 1 }}>\r\n                            <Typography style={{ fontWeight: '600' }} variant=\"h6\" gutterBottom component=\"div\">\r\n                                Detail Recipet\r\n                            </Typography>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item md={6} xs={6}>\r\n                                    <Table size=\"small\" aria-label=\"purchases\">\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                <TableCell>#</TableCell>\r\n                                                <TableCell>Name</TableCell>\r\n                                                <TableCell>Quantity</TableCell>\r\n                                                <TableCell align=\"right\">Price</TableCell>\r\n                                                <TableCell align=\"right\">Total Price</TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {row.listProduct.map((value, key) => (\r\n                                                <TableRow key={value.name}>\r\n                                                    <TableCell>\r\n                                                        {key + 1}\r\n                                                    </TableCell>\r\n                                                    <TableCell>{value.product.name}</TableCell>\r\n                                                    <TableCell>{value.quantity}</TableCell>\r\n                                                    <TableCell align=\"right\">{value.product.sellPrice.toLocaleString()}</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        {(value.quantity * value.product.sellPrice).toLocaleString()}\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            ))}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Grid>\r\n                                <Grid item md={6} xs={6}>\r\n                                    <Grid container spacing={3}>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Mã hóa đơn:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.MAHD}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Trạng thái:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{StatusTypeReciept(row.isEdit, row.isDelete)}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Thời gian:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.date}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Giờ:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.time}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Mã HD củ:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.oldBill ? row.oldBill.MAHD : \"Không có\"}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Người bán:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.name}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Tổng số lượng:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{countQuantity()}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Tổng tiền hàng:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.totalMoney.toLocaleString()}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Giảm giá (%):</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.discount}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>TỔNG:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>{row.totalFinalMoney.toLocaleString()}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nRow.propTypes = {\r\n    row: PropTypes.shape({\r\n        calories: PropTypes.number.isRequired,\r\n        carbs: PropTypes.number.isRequired,\r\n        fat: PropTypes.number.isRequired,\r\n        history: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                amount: PropTypes.number.isRequired,\r\n                customerId: PropTypes.string.isRequired,\r\n                date: PropTypes.string.isRequired,\r\n            }),\r\n        ).isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        price: PropTypes.number.isRequired,\r\n        protein: PropTypes.number.isRequired,\r\n    }).isRequired,\r\n};\r\n\r\n\r\nexport default function CollapsibleTable() {\r\n\r\n    const listReciept = useSelector(state => state.listReciept)\r\n\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table aria-label=\"collapsible table\">\r\n                <TableHead>\r\n                    <TableRow style={{ backgroundColor: 'black', color: 'white' }}>\r\n                        <TableCell />\r\n                        <TableCell >Mã HĐ</TableCell>\r\n                        <TableCell align=\"right\">Ngày hóa đơn</TableCell>\r\n                        <TableCell align=\"right\">Tổng hóa đơn</TableCell>\r\n                        <TableCell align=\"right\">Giảm giá</TableCell>\r\n                        <TableCell align=\"right\">Khách hàng trả</TableCell>\r\n                        <TableCell />\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {console.log(listReciept)}\r\n                    {listReciept ?\r\n                        listReciept.map((row) => (\r\n                            <Row key={row.MAHD} row={row} />\r\n                        )) : null\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\FixedCalendarCell.js",["591"],"import {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { withStyles } from '@material-ui/styles';\r\n// material\r\nimport { TableCell, List, ListItem, ListItemButton, ListItemText} from '@mui/material';\r\nimport '../../css/EmployeeManager.css';\r\n\r\n//icon\r\nimport { IoIosAdd } from \"react-icons/io\";\r\n\r\n// ----------------------------------------------------------------------\r\nconst styles = theme =>  ({\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '80px',\r\n    } \r\n})\r\n\r\nclass FixedCalendarCell extends Component {\r\n  isOpen=false;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: false\r\n    }\r\n  }\r\n\r\n  handleChange() {\r\n    this.isOpen = !this.isOpen;\r\n    console.log(\"this.isOpen\", this.isOpen)\r\n    this.setState({change : !this.state.change})\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n        <TableCell \r\n            className={classes.goodTable_Cell} \r\n            style={{\r\n                position: 'relative',\r\n                backgroundColor: '#ff6057'\r\n            }}    \r\n        >\r\n            <div\r\n                style={{\r\n                    position: 'absolute',\r\n                    right: 0,\r\n                    top: 0,\r\n                    borderRadius: '50%',\r\n                    backgroundColor: '#fff',\r\n                    width: 22,\r\n                    height: 22,\r\n                    textAlign: 'center'\r\n                }}\r\n                className='add-employee-to-shift-button'\r\n            >\r\n                <IoIosAdd \r\n                    size={30}\r\n                    style={{\r\n                        position: 'absolute',\r\n                        right: -4,\r\n                        top: -3,\r\n                    }}\r\n                    color='#0096FF'\r\n                    onClick={() => this.handleChange()}\r\n                >    \r\n                </IoIosAdd>\r\n                \r\n            </div>\r\n            {\r\n              this.isOpen \r\n              ? \r\n              <List \r\n                style={{\r\n                  position: 'absolute',\r\n                  right: 0,\r\n                  top: 20,\r\n                  zIndex: 10,\r\n                  height: 100,\r\n                  overflowY: 'auto',\r\n                  width: 140,\r\n                  backgroundColor: '#fff',\r\n                }}\r\n              >\r\n                  <ListItem disablePadding height={30} onClick={() => this.handleChange()}>\r\n                      <ListItemButton>\r\n                          <ListItemText>1-Azpili</ListItemText>\r\n                      </ListItemButton>\r\n                  </ListItem>\r\n                  <ListItem disablePadding onClick={() => this.handleChange()}>\r\n                      <ListItemButton>\r\n                          <ListItemText>2-Chris</ListItemText>\r\n                      </ListItemButton>\r\n                  </ListItem>\r\n                  <ListItem disablePadding onClick={() => this.handleChange()}>\r\n                      <ListItemButton>\r\n                          <ListItemText>3-Antonio</ListItemText>\r\n                      </ListItemButton>\r\n                  </ListItem>\r\n              </List>\r\n              : null\r\n            }\r\n            \r\n            \r\n        </TableCell>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    \r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n      \r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(FixedCalendarCell));","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\SearchNotFound.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Page.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Scrollbar.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Label.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ShoppingBags.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Tabs.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\StatusReceiptType.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\DateReciept.js",["592"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\TableReciept.js",["593","594","595","596","597","598","599","600","601","602","603","604","605","606"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\Statistic.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButton.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\Calendar.js",["607","608","609"],"import * as React from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport StaticDateRangePicker from '@mui/lab/StaticDateRangePicker';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport Box from '@mui/material/Box';\r\n\r\nexport default function StaticDateRangePickerDemo() {\r\n    const [value, setValue] = React.useState([new Date(2021, 2, 2), new Date(2021, 2, 5)]);\r\n    const [date, setDate] = React.useState(new Date(2021, 4, 2))\r\n\r\n    const value1 = [\r\n        { date: '2021/01/11', count:2 },\r\n        { date: '2021/04/12', count:2 },\r\n        { date: '2021/05/01', count:5 },\r\n        { date: '2021/05/02', count:5 },\r\n        { date: '2021/05/03', count:1 },\r\n        { date: '2021/05/04', count:11 },\r\n        { date: '2021/05/08', count:32 },\r\n      ];\r\n\r\n    return (\r\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n            <StaticDateRangePicker\r\n                displayStaticWrapperAs=\"desktop\"\r\n                value={value}\r\n                onChange={(date) => {\r\n                    setDate(date);\r\n                }}\r\n                renderInput={(startProps, endProps) => (\r\n                    <React.Fragment>\r\n                        <TextField {...startProps} />\r\n                        <Box sx={{ mx: 2 }}> to </Box>\r\n                        <TextField {...endProps} />\r\n                    </React.Fragment>\r\n                )}\r\n                calendars={4}\r\n                disableAutoMonthSwitching={true}\r\n            />\r\n        </LocalizationProvider>\r\n    );\r\n}\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\SearchBar.js",["610","611","612","613"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { MdClear} from \"react-icons/md\";\r\nimport { AiOutlineSearch } from \"react-icons/ai\";\r\nimport { withStyles } from '@material-ui/styles';\r\nimport classNames from \"classnames\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    // height: theme.spacing(6),\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    height: \"80px\",\r\n  },\r\n//   iconButton: {\r\n//     color: theme.palette.action.active,\r\n//     transform: \"scale(1, 1)\",\r\n//     transition: theme.transitions.create([\"transform\", \"color\"], {\r\n//       duration: theme.transitions.duration.shorter,\r\n//       easing: theme.transitions.easing.easeInOut,\r\n//     }),\r\n//   },\r\n  iconButtonHidden: {\r\n    transform: \"scale(0, 0)\",\r\n    \"& > $icon\": {\r\n      opacity: 0,\r\n    },\r\n  },\r\n  searchIconButton: {\r\n    // marginRight: theme.spacing(-6),\r\n  },\r\n//   icon: {\r\n//     transition: theme.transitions.create([\"opacity\"], {\r\n//       duration: theme.transitions.duration.shorter,\r\n//       easing: theme.transitions.easing.easeInOut,\r\n//     }),\r\n//   },\r\n  input: {\r\n    width: \"100%\",\r\n  },\r\n  searchContainer: {\r\n    margin: \"4px 8px 4px 8px\",\r\n    height: \"40px\",\r\n    // width: `calc(100% - ${theme.spacing(6 + 4)}px)`, // 6 button + 4 margin\r\n  },\r\n});\r\nconst SearchBar = React.forwardRef(\r\n  (\r\n    {\r\n      cancelOnEscape,\r\n      className,\r\n      classes,\r\n      closeIcon,\r\n      disabled,\r\n      onCancelSearch,\r\n      onRequestSearch,\r\n      searchIcon,\r\n      style,\r\n      ...inputProps\r\n    },\r\n    ref\r\n  ) => {\r\n    const inputRef = React.useRef();\r\n    const [value, setValue] = React.useState(inputProps.value);\r\n\r\n    React.useEffect(() => {\r\n      setValue(inputProps.value);\r\n    }, [inputProps.value]);\r\n\r\n    const handleFocus = React.useCallback(\r\n      (e) => {\r\n        if (inputProps.onFocus) {\r\n          inputProps.onFocus(e);\r\n        }\r\n      },\r\n      [inputProps.onFocus]\r\n    );\r\n\r\n    const handleBlur = React.useCallback(\r\n      (e) => {\r\n        setValue((v) => v.trim());\r\n        if (inputProps.onBlur) {\r\n          inputProps.onBlur(e);\r\n        }\r\n      },\r\n      [inputProps.onBlur]\r\n    );\r\n\r\n    const handleInput = React.useCallback(\r\n      (e) => {\r\n        setValue(e.target.value);\r\n        if (inputProps.onChange) {\r\n          inputProps.onChange(e.target.value);\r\n        }\r\n      },\r\n      [inputProps.onChange]\r\n    );\r\n\r\n    const handleCancel = React.useCallback(() => {\r\n      setValue(\"\");\r\n      if (onCancelSearch) {\r\n        onCancelSearch();\r\n      }\r\n    }, [onCancelSearch]);\r\n\r\n    const handleRequestSearch = React.useCallback(() => {\r\n      if (onRequestSearch) {\r\n        onRequestSearch(value);\r\n      }\r\n    }, [onRequestSearch, value]);\r\n\r\n    const handleKeyUp = React.useCallback(\r\n      (e) => {\r\n        if (e.charCode === 13 || e.key === \"Enter\") {\r\n          handleRequestSearch();\r\n        } else if (\r\n          cancelOnEscape &&\r\n          (e.charCode === 27 || e.key === \"Escape\")\r\n        ) {\r\n          handleCancel();\r\n        }\r\n        if (inputProps.onKeyUp) {\r\n          inputProps.onKeyUp(e);\r\n        }\r\n      },\r\n      [handleRequestSearch, cancelOnEscape, handleCancel, inputProps.onKeyUp]\r\n    );\r\n\r\n    React.useImperativeHandle(ref, () => ({\r\n      focus: () => {\r\n        inputRef.current.focus();\r\n      },\r\n      blur: () => {\r\n        inputRef.current.blur();\r\n      },\r\n    }));\r\n\r\n    return (\r\n      <Paper className={classNames(classes.root, className)} style={{height: '40px'}}>\r\n        <div className={classes.searchContainer}>\r\n          <Input\r\n            {...inputProps}\r\n            inputRef={inputRef}\r\n            onBlur={handleBlur}\r\n            value={value}\r\n            onChange={handleInput}\r\n            onKeyUp={handleKeyUp}\r\n            onFocus={handleFocus}\r\n            fullWidth\r\n            className={classes.input}\r\n            disableUnderline\r\n            disabled={disabled}\r\n          />\r\n        </div>\r\n        <IconButton\r\n          onClick={handleRequestSearch}\r\n          className={classNames(classes.iconButton, classes.searchIconButton, {\r\n            [classes.iconButtonHidden]: value !== \"\",\r\n          })}\r\n          disabled={disabled}\r\n        >\r\n          {React.cloneElement(searchIcon, {\r\n            classes: { root: classes.icon },\r\n          })}\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={handleCancel}\r\n          className={classNames(classes.iconButton, {\r\n            [classes.iconButtonHidden]: value === \"\",\r\n          })}\r\n          disabled={disabled}\r\n        >\r\n          {React.cloneElement(closeIcon, {\r\n            classes: { root: classes.icon },\r\n          })}\r\n        </IconButton>\r\n      </Paper>\r\n    );\r\n  }\r\n);\r\n\r\nSearchBar.defaultProps = {\r\n  className: \"\",\r\n  closeIcon: <MdClear/>,\r\n  disabled: false,\r\n  placeholder: \"Search\",\r\n  searchIcon: <AiOutlineSearch />,\r\n  style: null,\r\n  value: \"\",\r\n};\r\n\r\nSearchBar.propTypes = {\r\n  cancelOnEscape: PropTypes.bool,\r\n  classes: PropTypes.object.isRequired,\r\n  className: PropTypes.string,\r\n  closeIcon: PropTypes.node,\r\n  disabled: PropTypes.bool,\r\n  onCancelSearch: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n  onRequestSearch: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  searchIcon: PropTypes.node,\r\n  style: PropTypes.object,\r\n  value: PropTypes.string,\r\n};\r\n\r\nexport default withStyles(styles)(SearchBar);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\UpdateGoodModal.js",["614","615","616","617","618","619","620","621","622","623","624","625","626","627","628","629","630","631","632","633","634","635","636","637","638","639","640"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport GoodImage from './goodExample.jpg';\r\nimport AddTypeModal from './AddTypeModal';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport ConfirmModal from './ConfirmModal';\r\n\r\nvar productTypes =[];\r\nvar listTypeInfor=[];\r\n// typeSet chứa id của các cái type\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass UpdateGoodModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            goodID : \"\",\r\n            change: false,\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n        }; \r\n        typeSet = [];\r\n        this.loadInitialData();\r\n        this.loadAllType();\r\n        this.loadCurrentTypes();\r\n        \r\n    }\r\n    imgUrl='none';\r\n    goodID='';\r\n    importDate='';\r\n    name='';\r\n    imgUrl='';\r\n    quantity = 0;\r\n    remain = 0;\r\n    unit = \"\";\r\n    importPrice = \"\";\r\n    sellPrice = \"\";\r\n    expire =\"\";\r\n    finishUpImage = true;\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        listTypeInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n        productTypes=[];\r\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\r\n        {\r\n            productTypes.push(listTypeInfor[i].name);\r\n        }\r\n        this.setState({change: true});\r\n    }\r\n\r\n    async loadCurrentTypes() {\r\n        // Get hết các cái join của sản phẩm\r\n        var allJoinMatch = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n                \"_id.productID\": this.goodID,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, \r\n        {\r\n            params: {...data1}\r\n        })\r\n            .then(res => {\r\n                allJoinMatch = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        console.log(\"Các join\",allJoinMatch);\r\n        // Thêm vào trên cái bảng typeSet\r\n        for(var i = 0 ; i < allJoinMatch.length ; i ++)\r\n        {\r\n            typeSet.push(allJoinMatch[i]._id.typeID);\r\n        }\r\n        this.setState({change: !this.state.change});\r\n    }\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName='';\r\n        for(var i = 0; i<listTypeInfor.length;i++)\r\n        {   \r\n            if(listTypeInfor[i]._id.typeID == typeID)\r\n            {\r\n                typeName = listTypeInfor[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    checkConstraint = () => {\r\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\r\n        // Constraint 1: Check name\r\n        var productName =  document.querySelector('input[name=\"goodName\"]').value;\r\n        if(productName.length == 0)\r\n        {\r\n            alert(\"Tên sản phẩm không được trống\");\r\n            return false;\r\n        }\r\n        // Constraint 2: Check quantity\r\n        if(document.querySelector('input[name=\"goodQuantity\"]').value.length == 0)\r\n        {\r\n            alert(\"Số lượng sản phẩm không được trống\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value) <= 0) \r\n        {\r\n            alert('Số lượng sản phẩm phải lớn hơn 0');\r\n            return false;\r\n        }\r\n        // Constraint 3: check Unit\r\n        if(document.querySelector('input[name=\"unit\"]').value.length == 0)\r\n        {\r\n            alert('Đơn vị của sản phẩm không được trống');\r\n            return false;\r\n        }\r\n        // Constraint 4: Check import Price\r\n        if(document.querySelector('input[name=\"originalPrice\"]').value.length == 0)\r\n        {\r\n            alert(\"Giá nhập không được trống\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <= 0) \r\n        {\r\n            alert('Giá nhập phải lớn hơn 0');\r\n            return false;\r\n        }\r\n        // Constraint 5: check sell Price\r\n        if(document.querySelector('input[name=\"sellPrice\"]').value.length == 0)\r\n        {\r\n            alert(\"Giá bán không được trống\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"sellPrice\"]').value) <= 0) \r\n        {\r\n            alert('Giá bán phải lớn hơn 0');\r\n            return false;\r\n        }\r\n        // Constraint 6: Ngày nhập phải nhỏ  hơn ngày hết hạn và ngày hết hạn, ngày nhập phải khác null\r\n        if (\r\n            (\r\n                new Date(document.querySelector('input[name=\"importDate\"]').value).getTime()\r\n                - \r\n                new Date(document.querySelector('input[name=\"expiredDate\"]').value).getTime()\r\n            ) >= 0\r\n        )\r\n        {\r\n            alert('Không thể nhập hàng hết hạn');\r\n            return false;\r\n        }\r\n        // Constraint 7: Check giá gốc nhỏ hơn giá bán\r\n        if(\r\n            parseInt(document.querySelector('input[name=\"sellPrice\"]').value) \r\n            - \r\n            parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <=0\r\n            ) \r\n        {\r\n            alert('Giá bán phải lớn hơn giá gốc');\r\n            return false;\r\n        }\r\n        // Constraint 8: check xem đã  up ảnh lên xong chưa\r\n        if(this.finishUpImage == false)\r\n        {\r\n            alert('Ảnh chưa được upload xong');\r\n            return false;\r\n        }\r\n        alert('Constraint đã check đầy đủ');\r\n        return true;\r\n    }\r\n    async updateGood() {\r\n        var isContinue = this.checkConstraint();\r\n        if(!isContinue)\r\n        {\r\n            return;\r\n        }\r\n        this.props.changeUpdateGoodStatus();\r\n        var productInfo = this.props.infoUpdate;\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            product: {\r\n                _id: {\r\n                    productID: document.querySelector('input[name=\"goodID\"]').value,\r\n                    importDate: productInfo._id.importDate,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: this.name,\r\n                quantity: this.quantity,\r\n                // remain: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\r\n                sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\r\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\r\n                imgUrl: this.imgUrl,\r\n                unit: document.querySelector('input[name=\"unit\"]').value,\r\n            }\r\n        }\r\n        console.log(\"Updategood\",data);\r\n        axios.put(`http://localhost:5000/api/product`, data)\r\n            .then(res => {\r\n                console.log(\"Update success\");\r\n                alert('Đã update thành công sản phẩm')\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        // Get hết các cái join của sản phẩm\r\n        var allJoinMatch = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n                \"_id.productID\": this.goodID,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, \r\n        {\r\n            params: {...data1}\r\n        })\r\n            .then(res => {\r\n                allJoinMatch = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        console.log(allJoinMatch);\r\n        // Xoá các join liên quan đến sản phẩm\r\n        var allProductJoin = [];\r\n        for(var i = 0 ; i < allJoinMatch.length; i++)\r\n        {\r\n            allProductJoin.push({\r\n                productID: this.goodID,\r\n                typeID: allJoinMatch[i]._id.typeID,\r\n                importDate: allJoinMatch[i]._id.importDate,\r\n                storeID: this.props.infoUser.email,\r\n            });\r\n        }\r\n        const dataJoin = {\r\n            token: localStorage.getItem('token'),\r\n            productJoinTypes: allProductJoin,      \r\n        }\r\n\r\n        console.log(dataJoin);\r\n\r\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\r\n            .then(res => {\r\n                console.log(\"delete join success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        // Thêm các cái hiện tại\r\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\r\n        for(var i = 0 ; i < typeSet.length ; i++)\r\n        {\r\n            const data1 = {\r\n                token: localStorage.getItem('token'),\r\n                productJoinType: {\r\n                    _id : {\r\n                        productID: this.goodID,\r\n                        typeID: typeSet[i], \r\n                        importDate: productInfo._id.importDate,\r\n                        storeID: this.props.infoUser.email,\r\n                    }\r\n                }\r\n            }\r\n            axios.post(`http://localhost:5000/api/product/join`, data1)\r\n                .then(res => {\r\n                    console.log(\"lưu vô bảng join thành công\");\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    cancel = () => {\r\n        this.props.changeUpdateGoodStatus();\r\n    }\r\n\r\n    loadInitialData = () => {\r\n        // Load các dữ liệu ban đầu của form ở đây để mà update nhưng mà bị lỗi 401 mẹ\r\n        //Xử lý sampleData\r\n        var productInfo = this.props.infoUpdate;\r\n        console.log(this.props.infoUpdate);\r\n\r\n        this.goodID = (productInfo._id.productID == null) ? '' : productInfo._id.productID;\r\n        this.importDate = productInfo._id.importDate;\r\n        this.importDate = this.importDate == null ? '' :this.importDate.substring(0, this.importDate.indexOf('T'));\r\n        this.name = productInfo.name == null ? '' : productInfo.name;\r\n        this.imgUrl = productInfo.imgUrl == null ? '' : productInfo.imgUrl;\r\n        this.quantity = productInfo.quantity == null ? '' : productInfo.quantity;\r\n        // this.remain = productInfo.remain;\r\n        this.unit = productInfo.unit == null ? '' : productInfo.unit;\r\n        this.importPrice = productInfo.importPrice == null ? '' : productInfo.importPrice;\r\n        this.sellPrice = productInfo.sellPrice == null ? '' : productInfo.sellPrice;\r\n        this.expire = productInfo.expires; //substring(0,productInfo.expire.indexOf('T'));\r\n        this.expire = this.expire == null ? '' :this.expire.substring(0, this.expire.indexOf('T'));\r\n        console.log(\"this.expire\",this.expire );\r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    profileImageChange = (fileChangeEvent) => {\r\n        this.setState({\r\n            imageSelect: fileChangeEvent.target.files[0],\r\n        })\r\n        this.finishUpImage = false;\r\n        const file = fileChangeEvent.target.files[0];\r\n        const { type } = file;\r\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\r\n        } else {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", fileChangeEvent.target.files[0])\r\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\r\n            axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\r\n                .then(res => {\r\n                    this.imgUrl=res.data.url;\r\n                    this.setState({\r\n                        change: 'true'\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"Thất bại\");\r\n                })\r\n        }\r\n        this.finishUpImage = true;\r\n    }\r\n\r\n    changeName = (e) => {\r\n        this.name = e.target.value;\r\n    }\r\n\r\n    changeValue = (e, variable) =>\r\n    {\r\n        if(variable=='quantity')\r\n        {\r\n            this.quantity = e.target.value;\r\n        }\r\n    }\r\n\r\n    foundTypeInSet(typeID) {\r\n        for(var i = 0 ; i < typeSet.length; i++)\r\n        {\r\n            if(typeSet[i]==typeID._id.typeID) return true;\r\n        }\r\n        return false;\r\n    }\r\n    render() {\r\n        \r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"UPDATE GOOD\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card \r\n                            >\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            name=\"goodID\" \r\n                                            variant=\"outlined\" \r\n                                            value={this.goodID}\r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                        style={{\r\n                                            marginLeft: 0,\r\n                                            paddingLeft: 0\r\n                                        }}\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 128}}>Import Date</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\" \r\n                                            style = {{width: '68%'}} \r\n                                            fullWidth\r\n                                            name=\"importDate\"\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.importDate}\r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            name=\"goodName\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.name}\r\n                                            onChange={(e) => this.changeName(e)} \r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                        style={{padding: '0px', marginLeft: '0px'}}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\" \r\n                                            style={{width: '100px'}}\r\n                                        >\r\n                                            Quantity\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            style = {{width: '60%'}} \r\n                                            fullWidth\r\n                                            name=\"goodQuantity\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\" \r\n                                            defaultValue={this.quantity}\r\n                                            onChange={(e) => this.changeValue(e, 'quantity')}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                        style={{\r\n                                            paddingRight: 24\r\n                                        }}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                marginLeft: 0,\r\n                                                paddingLeft: 4\r\n                                            }}\r\n                                        >\r\n                                            Unit\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '100%', marginLeft: '4px'}} \r\n                                            fullWidth\r\n                                            variant=\"outlined\"\r\n                                            type=\"text\" \r\n                                            name=\"unit\" \r\n                                            defaultValue={this.unit}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 128}}>Original Price</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"originalPrice\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\"\r\n                                            defaultValue={this.importPrice}\r\n                                        />\r\n                                        đ\r\n                                    </Grid>\r\n                                    <Grid item md={6}\r\n                                        className='input-item'\r\n                                        style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{width: '96px'}}\r\n                                        >\r\n                                            Sell Price\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"sellPrice\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\" \r\n                                            defaultValue={this.sellPrice}\r\n                                        />\r\n                                        đ\r\n                                    </Grid>\r\n                                    <Grid item md={7} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            name=\"expiredDate\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.expire} \r\n                                        />\r\n                                        {/* <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"sellPrice\" \r\n                                            variant=\"outlined\"\r\n                                            value={this.expire}\r\n                                        /> */}\r\n                                    </Grid>\r\n                                    <Grid item md={10}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{width:132}}\r\n                                        >\r\n                                            Product Type\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 120 }}>\r\n                                        {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                        <Select\r\n                                            value={this.state.type}\r\n                                            onChange={(event) => {\r\n                                                this.setState({type: event.target.value});\r\n                                                if(!typeSet.includes(event.target.value))\r\n                                                {\r\n                                                    typeSet.push(event.target.value);\r\n                                                }\r\n                                            }}\r\n                                            style={{\r\n                                                height: 36,\r\n                                            }}\r\n                                        >\r\n                                            {\r\n                                                listTypeInfor.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                : listTypeInfor.map((type) =>\r\n                                                    ! this.foundTypeInSet(type) \r\n                                                    ? <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\r\n                                                    : null\r\n                                                )\r\n                                            }   \r\n                                        </Select> \r\n                                    </FormControl>\r\n                                        <Button onClick={() => this.handleAdd()}>\r\n                                            <AiFillPlusCircle\r\n                                                size={28}\r\n                                                style={{\r\n                                                    fontSize: 28,\r\n                                                    margin: 0,\r\n                                                    padding: 0,\r\n                                                    width: 28,\r\n                                                    height: 28\r\n                                                }}    \r\n                                            />\r\n                                        </Button>\r\n                                        <div className='all-type-container'>\r\n                                            {\r\n                                                Array.from(typeSet).map((type) =>\r\n                                                    <div item md={7} className='type-container'>\r\n                                                        <CancelIcon\r\n                                                            className='close-icon'\r\n                                                            size={10}\r\n                                                            onClick={() => {\r\n                                                                typeSet = typeSet.filter(function(item) {\r\n                                                                    return item != type;\r\n                                                                })\r\n                                                                console.log(typeSet);\r\n                                                                this.setState({type: 'none'});\r\n                                                            }}\r\n                                                \r\n                                                        />\r\n                                                        <span className='type-title'>\r\n                                                            {this.getTypeNamebyTypeID(type)}\r\n                                                        </span>\r\n                                                    </div>\r\n                                                    \r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                    </Grid>\r\n                                    {/* <Grid item md={10}\r\n                                        className='input-item'\r\n                                    >\r\n\r\n                                    </Grid> */}\r\n                                    <Grid item md={2}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.updateGood()}>\r\n                                            UPDATE\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                        \r\n                    {this.props.addTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <AddTypeModal></AddTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.confirmStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                            <ConfirmModal></ConfirmModal>\r\n                        </div>\r\n                    ): null}\r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        updateGoodStatus: state.updateGoodStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUpdate: state.infoUpdate,\r\n        infoUser: state.infoUser,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeUpdateGoodStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setUpdateConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_UPDATE_GOOD\",\r\n            }); \r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateGoodModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodTable.js",["641","642","643","644","645","646"],"import * as React from 'react';\r\nimport { Component } from 'react';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport GoodRow from './TableRow';\r\n\r\nfunction createData(index, id, name, quantity, originalPrice, sellPrice, importTime, productType, imgUrl, unit, expires, storeID) {\r\n    return {\r\n        storeID,\r\n        index,\r\n        id,\r\n        name,\r\n        quantity,\r\n        sellPrice,\r\n        importTime,\r\n        imgLink: imgUrl,\r\n        hidden:\r\n        {\r\n            expires: expires,\r\n            remaining: quantity,\r\n            originalPrice: originalPrice,\r\n            productType: productType,\r\n            unit: unit,\r\n        },\r\n    };\r\n}\r\n\r\n\r\nvar rows = [];\r\n\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    } \r\n})\r\n\r\n\r\nvar listProductInfor = [];\r\nvar joinTypeInfor = [];\r\nvar listTypeInfor = [];\r\n\r\nclass GoodTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            update: false\r\n        }\r\n        this.loadAllType();\r\n        this.loadAllGood();\r\n    }\r\n    removeProduct= (row) => {\r\n        // Đây là xử lý ở phía dữ liệu, có thể await gì đó.\r\n        // Xử lý ở phía giao diện(tạm)\r\n\r\n        // Đây là câu lệnh để update nhẹ\r\n        this.setState({update: this.state.update})\r\n    }\r\n    async loadAllGood() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                // alert(\"Lấy hết đc product ròi anh chai\");\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Get data và lưu các tên Type vào dữ liệU\r\n        //Get data và lưu các tên Type vào bảng\r\n        listProductInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listProductInfor.push(result[i]);\r\n        }\r\n        // Get hết từ cái productjoinType\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })  \r\n        // Lấy các cái jointype\r\n        joinTypeInfor = [];\r\n        for(var i = 0 ; i < result.length; i++)\r\n        {\r\n            joinTypeInfor.push(result[i]);\r\n        }\r\n\r\n        //createData(index, id, name, quantity, originalPrice, sellPrice, importTime, productType, imgUrl)\r\n        // Cập nhật vào cái row đi cho chắc\r\n        rows = [];\r\n        for(var i = 0; i < listProductInfor.length ; i++)\r\n        {\r\n            var obj = listProductInfor[i];\r\n\r\n            var joinType = '';\r\n            // // Lấy tất cả các type trong cái product\r\n            for(var j = 0; j < joinTypeInfor.length ; j++)\r\n            {\r\n\r\n                // console.log(\"joinTypeInfor[]\", j ,joinTypeInfor[j])\r\n                if(joinTypeInfor[j]._id.productID == obj._id.productID && joinTypeInfor[j]._id.storeID == obj._id.storeID)\r\n                {\r\n                    joinType = joinType + ' ' + this.getTypeNamebyTypeID(joinTypeInfor[j]._id.typeID);\r\n                }\r\n            }\r\n\r\n            rows.push(\r\n                createData((i+1), obj._id.productID, obj.name, obj.quantity, \r\n                    obj.importPrice, obj.sellPrice, obj._id.importDate, joinType, \r\n                    obj.imgUrl, obj.unit, obj.expires, obj._id.storeID)\r\n            );\r\n        }\r\n        \r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        listTypeInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n\r\n        this.setState({change: true});\r\n    }\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName='';\r\n        for(var i = 0; i<listTypeInfor.length;i++)\r\n        {   \r\n            if(listTypeInfor[i]._id.typeID == typeID)\r\n            {\r\n                typeName = listTypeInfor[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div style={{height: '550px', width: '100%', overflowY: 'scroll'}}>\r\n                <TableContainer component={Paper}>\r\n                    <Table className={classes.goodTable} aria-label=\"collapsible table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Index</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ID</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">GoodName</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Quantity</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Sell Price</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ImportTime</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell}/>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {rows.map((row) => (\r\n                                <GoodRow key={row.name} row={row} />\r\n                            ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        confirmStatus: state.confirmStatus\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(GoodTable));\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\BaseOptionChart.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\TableRow.js",["647","648","649","650"],"import * as React from 'react';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Image } from 'cloudinary-react';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { makeStyles } from '@material-ui/styles';\r\nimport GoodImage from './goodExample.jpg';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { useDispatch } from 'react-redux'\r\nimport axios from 'axios';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    goodTable_Cell:{\r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: 4\r\n    }\r\n}));\r\n\r\n\r\n\r\nfunction GoodRow(props) {\r\n    const { row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const deleteProduct = async () =>\r\n    {\r\n        // Xoá sản phẩm\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            products:\r\n            [\r\n                {\r\n                    productID: row.id,\r\n                    importDate: row.importTime,\r\n                    storeID: row.storeID,\r\n                }\r\n            ]\r\n            \r\n        }\r\n        axios.delete(`http://localhost:5000/api/product`,{data: data})\r\n            .then(res => {\r\n                alert(\"delete product success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        \r\n        // Get hết các cái join của sản phẩm\r\n        var allJoinMatch = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": row.storeID,\r\n                \"_id.productID\": row.id,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, \r\n        {\r\n            params: {...data1}\r\n        })\r\n            .then(res => {\r\n                allJoinMatch = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        console.log(allJoinMatch);\r\n        // Xoá các join liên quan đến sản phẩm\r\n        var allProductJoin = [];\r\n        for(var i = 0 ; i < allJoinMatch.length; i++)\r\n        {\r\n            allProductJoin.push({\r\n                productID: row.id,\r\n                typeID: allJoinMatch[i]._id.typeID,\r\n                importDate: allJoinMatch[i]._id.importDate,\r\n                storeID: row.storeID,\r\n            });\r\n        }\r\n        const dataJoin = {\r\n            token: localStorage.getItem('token'),\r\n            productJoinTypes: allProductJoin,      \r\n        }\r\n\r\n        console.log(dataJoin);\r\n\r\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\r\n            .then(res => {\r\n                console.log(\"delete join success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n\r\n        // Tạm thời\r\n        // window.location.reload();\r\n    }\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.index}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.id}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.name}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.quantity}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.sellPrice}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\r\n                    {/* {row.importTime == null ? '' : row.importTime.substring(0,row.importTime.indexOf('T'))} */}\r\n                    {row.importTime == null ? '': row.importTime.substring(0,row.importTime.indexOf('T'))}\r\n                </TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\r\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\r\n                        {open ? (<KeyboardArrowUpIcon />) : (<KeyboardArrowDownIcon />)}\r\n                    </IconButton>\r\n                </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell className={classes.goodTable_Cell} style={{ padding: 0}} colSpan={8}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Box sx={{ margin: 1 }}>\r\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                Other information\r\n                            </Typography>\r\n                            <div style={{display: 'flex'}}>\r\n                                {  \r\n                                    row.imgLink == \"none\"\r\n                                    ? <div style={{width: '100px', height: '100px', objectFit:'cover'}}><img src={GoodImage} style={{width: '100px', height: '100px', objectFit:'cover'}}/></div>\r\n                                    \r\n                                    : <div style={{width: '100px', height: '100px', objectFit:'cover'}}><Image style={{width: '100px', height: '100px', objectFit:'cover'}} cloudName=\"databaseimg\" publicId={row.imgLink}>{row.imgLink}</Image></div>\r\n                                }\r\n                                \r\n                                \r\n                                <Table>\r\n                                    <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell className={classes.goodTable_Cell}>Expired Day</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>Original Price</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>Good Remain</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>Product Type</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>Unit</TableCell>\r\n                                        </TableRow>\r\n                                    </TableHead>\r\n                                    <TableBody>\r\n                                        <TableRow>\r\n                                            <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">\r\n                                                {/* {row.hidden.expires == null ? '': row.hidden.expires.substring(0,row.hidden.expires.indexOf('T'))} */}\r\n                                                {row.hidden.expires == null ? '': row.hidden.expires.substring(0,row.hidden.expires.indexOf('T'))}\r\n                                            </TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>{row.hidden.originalPrice}</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>{row.hidden.remaining}</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>{row.hidden.productType}</TableCell>\r\n                                            <TableCell className={classes.goodTable_Cell}>{row.hidden.unit}</TableCell>\r\n                                        </TableRow>\r\n                                    </TableBody>\r\n                                </Table>\r\n                                <div className=\"button-container\">\r\n                                    <Button \r\n                                        onClick={() => {\r\n                                            // Truyền cái data vào trong hàm đây luôn\r\n                                            dispatch({type: \"UPDATE_GOOD_DATA\", \r\n                                                _id: {\r\n                                                    productID: row.id,\r\n                                                    importDate: row.importTime,\r\n                                                },\r\n                                                name: row.name,\r\n                                                imgUrl: row.imgLink,\r\n                                                quantity: row.quantity,\r\n                                                remain: row.quantity,\r\n                                                unit: row.unit,\r\n                                                importPrice: row.hidden.originalPrice,\r\n                                                sellPrice: row.sellPrice,\r\n                                                expires: row.hidden.expires,  \r\n                                                unit: row.hidden.unit\r\n                                            });\r\n                                            dispatch({ type: \"CHANGE_UPDATE_GOOD_STATUS\", });\r\n                                        }}\r\n                                        variant=\"contained\"\r\n                                    >\r\n                                        Update\r\n                                    </Button>\r\n                                    <Button \r\n                                        variant=\"contained\"\r\n                                        onClick={deleteProduct}\r\n                                    >\r\n                                        Delete\r\n                                        \r\n                                    </Button>\r\n                                </div>\r\n                            </div>  \r\n                        </Box>\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n        </React.Fragment>\r\n    );\r\n}\r\nexport default GoodRow;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\ControlReciept.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\StatusSelectAll.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\ListRecieptDelete.js",[],{"ruleId":"651","replacedBy":"652"},{"ruleId":"653","replacedBy":"654"},{"ruleId":"655","severity":1,"message":"656","line":10,"column":10,"nodeType":"657","messageId":"658","endLine":10,"endColumn":24},{"ruleId":"659","severity":1,"message":"660","line":13,"column":3,"nodeType":"661","messageId":"662","endLine":15,"endColumn":4},{"ruleId":"663","severity":1,"message":"664","line":21,"column":45,"nodeType":"665","messageId":"666","endLine":21,"endColumn":47},{"ruleId":"663","severity":1,"message":"664","line":38,"column":45,"nodeType":"665","messageId":"666","endLine":38,"endColumn":47},{"ruleId":"663","severity":1,"message":"664","line":44,"column":43,"nodeType":"665","messageId":"666","endLine":44,"endColumn":45},{"ruleId":"663","severity":1,"message":"667","line":46,"column":48,"nodeType":"665","messageId":"668","endLine":46,"endColumn":50},{"ruleId":"669","severity":1,"message":"670","line":49,"column":40,"nodeType":"671","messageId":"672","endLine":49,"endColumn":42},{"ruleId":"655","severity":1,"message":"673","line":9,"column":10,"nodeType":"657","messageId":"658","endLine":9,"endColumn":19},{"ruleId":"655","severity":1,"message":"674","line":14,"column":8,"nodeType":"657","messageId":"658","endLine":14,"endColumn":13},{"ruleId":"675","severity":1,"message":"676","line":94,"column":28,"nodeType":"677","messageId":"678","endLine":94,"endColumn":29,"suggestions":"679"},{"ruleId":"675","severity":1,"message":"676","line":94,"column":44,"nodeType":"677","messageId":"678","endLine":94,"endColumn":45,"suggestions":"680"},{"ruleId":"681","severity":1,"message":"682","line":274,"column":9,"nodeType":"683","messageId":"672","endLine":274,"endColumn":25},{"ruleId":"655","severity":1,"message":"684","line":13,"column":8,"nodeType":"657","messageId":"658","endLine":13,"endColumn":15},{"ruleId":"675","severity":1,"message":"676","line":106,"column":30,"nodeType":"677","messageId":"678","endLine":106,"endColumn":31,"suggestions":"685"},{"ruleId":"675","severity":1,"message":"676","line":106,"column":46,"nodeType":"677","messageId":"678","endLine":106,"endColumn":47,"suggestions":"686"},{"ruleId":"655","severity":1,"message":"684","line":6,"column":8,"nodeType":"657","messageId":"658","endLine":6,"endColumn":15},{"ruleId":"675","severity":1,"message":"676","line":97,"column":28,"nodeType":"677","messageId":"678","endLine":97,"endColumn":29,"suggestions":"687"},{"ruleId":"675","severity":1,"message":"676","line":97,"column":44,"nodeType":"677","messageId":"678","endLine":97,"endColumn":45,"suggestions":"688"},{"ruleId":"655","severity":1,"message":"689","line":9,"column":11,"nodeType":"657","messageId":"658","endLine":9,"endColumn":32},{"ruleId":"690","severity":1,"message":"691","line":96,"column":29,"nodeType":"692","endLine":96,"endColumn":161},{"ruleId":"669","severity":1,"message":"670","line":103,"column":58,"nodeType":"671","messageId":"672","endLine":103,"endColumn":60},{"ruleId":"693","severity":1,"message":"694","line":169,"column":25,"nodeType":"692","endLine":174,"endColumn":26},{"ruleId":"693","severity":1,"message":"695","line":178,"column":25,"nodeType":"692","endLine":178,"endColumn":136},{"ruleId":"655","severity":1,"message":"696","line":2,"column":10,"nodeType":"657","messageId":"658","endLine":2,"endColumn":18},{"ruleId":"655","severity":1,"message":"697","line":8,"column":8,"nodeType":"657","messageId":"658","endLine":8,"endColumn":19},{"ruleId":"655","severity":1,"message":"698","line":2,"column":27,"nodeType":"657","messageId":"658","endLine":2,"endColumn":33},{"ruleId":"663","severity":1,"message":"664","line":176,"column":89,"nodeType":"665","messageId":"666","endLine":176,"endColumn":91},{"ruleId":"655","severity":1,"message":"699","line":6,"column":10,"nodeType":"657","messageId":"658","endLine":6,"endColumn":20},{"ruleId":"655","severity":1,"message":"700","line":6,"column":30,"nodeType":"657","messageId":"658","endLine":6,"endColumn":35},{"ruleId":"655","severity":1,"message":"701","line":11,"column":8,"nodeType":"657","messageId":"658","endLine":11,"endColumn":17},{"ruleId":"655","severity":1,"message":"702","line":15,"column":8,"nodeType":"657","messageId":"658","endLine":15,"endColumn":22},{"ruleId":"655","severity":1,"message":"703","line":16,"column":8,"nodeType":"657","messageId":"658","endLine":16,"endColumn":22},{"ruleId":"655","severity":1,"message":"704","line":17,"column":8,"nodeType":"657","messageId":"658","endLine":17,"endColumn":28},{"ruleId":"655","severity":1,"message":"705","line":20,"column":10,"nodeType":"657","messageId":"658","endLine":20,"endColumn":29},{"ruleId":"669","severity":1,"message":"670","line":185,"column":31,"nodeType":"671","messageId":"672","endLine":185,"endColumn":33},{"ruleId":"669","severity":1,"message":"670","line":192,"column":78,"nodeType":"671","messageId":"672","endLine":192,"endColumn":80},{"ruleId":"669","severity":1,"message":"670","line":206,"column":70,"nodeType":"671","messageId":"672","endLine":206,"endColumn":72},{"ruleId":"669","severity":1,"message":"670","line":214,"column":79,"nodeType":"671","messageId":"672","endLine":214,"endColumn":81},{"ruleId":"669","severity":1,"message":"670","line":227,"column":75,"nodeType":"671","messageId":"672","endLine":227,"endColumn":77},{"ruleId":"669","severity":1,"message":"670","line":263,"column":31,"nodeType":"671","messageId":"672","endLine":263,"endColumn":33},{"ruleId":"706","severity":1,"message":"707","line":299,"column":17,"nodeType":"657","messageId":"708","endLine":299,"endColumn":18},{"ruleId":"669","severity":1,"message":"670","line":347,"column":44,"nodeType":"671","messageId":"672","endLine":347,"endColumn":46},{"ruleId":"669","severity":1,"message":"670","line":359,"column":26,"nodeType":"671","messageId":"672","endLine":359,"endColumn":28},{"ruleId":"669","severity":1,"message":"670","line":383,"column":140,"nodeType":"671","messageId":"672","endLine":383,"endColumn":142},{"ruleId":"669","severity":1,"message":"670","line":575,"column":69,"nodeType":"671","messageId":"672","endLine":575,"endColumn":71},{"ruleId":"669","severity":1,"message":"709","line":606,"column":77,"nodeType":"671","messageId":"672","endLine":606,"endColumn":79},{"ruleId":"655","severity":1,"message":"710","line":2,"column":8,"nodeType":"657","messageId":"658","endLine":2,"endColumn":12},{"ruleId":"655","severity":1,"message":"711","line":3,"column":8,"nodeType":"657","messageId":"658","endLine":3,"endColumn":13},{"ruleId":"655","severity":1,"message":"712","line":4,"column":8,"nodeType":"657","messageId":"658","endLine":4,"endColumn":17},{"ruleId":"655","severity":1,"message":"713","line":5,"column":8,"nodeType":"657","messageId":"658","endLine":5,"endColumn":22},{"ruleId":"655","severity":1,"message":"714","line":7,"column":10,"nodeType":"657","messageId":"658","endLine":7,"endColumn":22},{"ruleId":"655","severity":1,"message":"715","line":14,"column":5,"nodeType":"657","messageId":"658","endLine":14,"endColumn":11},{"ruleId":"655","severity":1,"message":"716","line":23,"column":5,"nodeType":"657","messageId":"658","endLine":23,"endColumn":20},{"ruleId":"655","severity":1,"message":"717","line":25,"column":8,"nodeType":"657","messageId":"658","endLine":25,"endColumn":23},{"ruleId":"655","severity":1,"message":"718","line":39,"column":10,"nodeType":"657","messageId":"658","endLine":39,"endColumn":21},{"ruleId":"655","severity":1,"message":"719","line":91,"column":5,"nodeType":"657","messageId":"658","endLine":91,"endColumn":15},{"ruleId":"655","severity":1,"message":"720","line":92,"column":5,"nodeType":"657","messageId":"658","endLine":92,"endColumn":18},{"ruleId":"655","severity":1,"message":"721","line":94,"column":5,"nodeType":"657","messageId":"658","endLine":94,"endColumn":9},{"ruleId":"655","severity":1,"message":"722","line":95,"column":5,"nodeType":"657","messageId":"658","endLine":95,"endColumn":16},{"ruleId":"655","severity":1,"message":"723","line":2,"column":43,"nodeType":"657","messageId":"658","endLine":2,"endColumn":52},{"ruleId":"655","severity":1,"message":"724","line":4,"column":10,"nodeType":"657","messageId":"658","endLine":4,"endColumn":23},{"ruleId":"655","severity":1,"message":"725","line":9,"column":8,"nodeType":"657","messageId":"658","endLine":9,"endColumn":20},{"ruleId":"706","severity":1,"message":"707","line":137,"column":17,"nodeType":"657","messageId":"708","endLine":137,"endColumn":18},{"ruleId":"706","severity":1,"message":"726","line":23,"column":21,"nodeType":"657","messageId":"708","endLine":23,"endColumn":29},{"ruleId":"706","severity":1,"message":"727","line":24,"column":21,"nodeType":"657","messageId":"708","endLine":24,"endColumn":28},{"ruleId":"706","severity":1,"message":"728","line":34,"column":21,"nodeType":"657","messageId":"708","endLine":34,"endColumn":27},{"ruleId":"706","severity":1,"message":"729","line":35,"column":21,"nodeType":"657","messageId":"708","endLine":35,"endColumn":26},{"ruleId":"663","severity":1,"message":"667","line":43,"column":39,"nodeType":"665","messageId":"668","endLine":43,"endColumn":41},{"ruleId":"663","severity":1,"message":"667","line":51,"column":39,"nodeType":"665","messageId":"668","endLine":51,"endColumn":41},{"ruleId":"663","severity":1,"message":"667","line":63,"column":39,"nodeType":"665","messageId":"668","endLine":63,"endColumn":41},{"ruleId":"655","severity":1,"message":"730","line":4,"column":10,"nodeType":"657","messageId":"658","endLine":4,"endColumn":14},{"ruleId":"655","severity":1,"message":"731","line":4,"column":43,"nodeType":"657","messageId":"658","endLine":4,"endColumn":54},{"ruleId":"655","severity":1,"message":"723","line":2,"column":43,"nodeType":"657","messageId":"658","endLine":2,"endColumn":52},{"ruleId":"655","severity":1,"message":"732","line":4,"column":25,"nodeType":"657","messageId":"658","endLine":4,"endColumn":31},{"ruleId":"655","severity":1,"message":"733","line":7,"column":8,"nodeType":"657","messageId":"658","endLine":7,"endColumn":13},{"ruleId":"659","severity":1,"message":"660","line":10,"column":5,"nodeType":"661","messageId":"662","endLine":12,"endColumn":6},{"ruleId":"734","severity":1,"message":"735","line":26,"column":9,"nodeType":"736","messageId":"737","endLine":32,"endColumn":10},{"ruleId":"738","severity":1,"message":"739","line":30,"column":13,"nodeType":"740","messageId":"741","endLine":31,"endColumn":67},{"ruleId":"655","severity":1,"message":"674","line":2,"column":80,"nodeType":"657","messageId":"658","endLine":2,"endColumn":85},{"ruleId":"655","severity":1,"message":"732","line":4,"column":25,"nodeType":"657","messageId":"658","endLine":4,"endColumn":31},{"ruleId":"655","severity":1,"message":"742","line":6,"column":20,"nodeType":"657","messageId":"658","endLine":6,"endColumn":33},{"ruleId":"669","severity":1,"message":"670","line":52,"column":45,"nodeType":"671","messageId":"672","endLine":52,"endColumn":47},{"ruleId":"669","severity":1,"message":"670","line":83,"column":37,"nodeType":"671","messageId":"672","endLine":83,"endColumn":39},{"ruleId":"669","severity":1,"message":"670","line":85,"column":66,"nodeType":"671","messageId":"672","endLine":85,"endColumn":68},{"ruleId":"669","severity":1,"message":"670","line":96,"column":27,"nodeType":"671","messageId":"672","endLine":96,"endColumn":29},{"ruleId":"669","severity":1,"message":"670","line":117,"column":45,"nodeType":"671","messageId":"672","endLine":117,"endColumn":47},{"ruleId":"655","severity":1,"message":"743","line":2,"column":28,"nodeType":"657","messageId":"658","endLine":2,"endColumn":35},{"ruleId":"655","severity":1,"message":"744","line":2,"column":54,"nodeType":"657","messageId":"658","endLine":2,"endColumn":57},{"ruleId":"655","severity":1,"message":"731","line":2,"column":59,"nodeType":"657","messageId":"658","endLine":2,"endColumn":70},{"ruleId":"655","severity":1,"message":"699","line":2,"column":80,"nodeType":"657","messageId":"658","endLine":2,"endColumn":90},{"ruleId":"669","severity":1,"message":"670","line":124,"column":127,"nodeType":"671","messageId":"672","endLine":124,"endColumn":129},{"ruleId":"655","severity":1,"message":"743","line":2,"column":28,"nodeType":"657","messageId":"658","endLine":2,"endColumn":35},{"ruleId":"655","severity":1,"message":"744","line":2,"column":54,"nodeType":"657","messageId":"658","endLine":2,"endColumn":57},{"ruleId":"655","severity":1,"message":"731","line":2,"column":59,"nodeType":"657","messageId":"658","endLine":2,"endColumn":70},{"ruleId":"655","severity":1,"message":"699","line":2,"column":80,"nodeType":"657","messageId":"658","endLine":2,"endColumn":90},{"ruleId":"655","severity":1,"message":"724","line":4,"column":10,"nodeType":"657","messageId":"658","endLine":4,"endColumn":23},{"ruleId":"655","severity":1,"message":"732","line":4,"column":25,"nodeType":"657","messageId":"658","endLine":4,"endColumn":31},{"ruleId":"655","severity":1,"message":"745","line":5,"column":8,"nodeType":"657","messageId":"658","endLine":5,"endColumn":13},{"ruleId":"655","severity":1,"message":"746","line":6,"column":10,"nodeType":"657","messageId":"658","endLine":6,"endColumn":18},{"ruleId":"655","severity":1,"message":"747","line":7,"column":8,"nodeType":"657","messageId":"658","endLine":7,"endColumn":14},{"ruleId":"655","severity":1,"message":"748","line":8,"column":8,"nodeType":"657","messageId":"658","endLine":8,"endColumn":16},{"ruleId":"655","severity":1,"message":"749","line":9,"column":8,"nodeType":"657","messageId":"658","endLine":9,"endColumn":19},{"ruleId":"655","severity":1,"message":"733","line":11,"column":8,"nodeType":"657","messageId":"658","endLine":11,"endColumn":13},{"ruleId":"655","severity":1,"message":"704","line":14,"column":8,"nodeType":"657","messageId":"658","endLine":14,"endColumn":28},{"ruleId":"655","severity":1,"message":"703","line":15,"column":8,"nodeType":"657","messageId":"658","endLine":15,"endColumn":22},{"ruleId":"655","severity":1,"message":"750","line":16,"column":8,"nodeType":"657","messageId":"658","endLine":16,"endColumn":18},{"ruleId":"655","severity":1,"message":"702","line":17,"column":8,"nodeType":"657","messageId":"658","endLine":17,"endColumn":22},{"ruleId":"655","severity":1,"message":"751","line":18,"column":10,"nodeType":"657","messageId":"658","endLine":18,"endColumn":26},{"ruleId":"655","severity":1,"message":"752","line":19,"column":8,"nodeType":"657","messageId":"658","endLine":19,"endColumn":18},{"ruleId":"655","severity":1,"message":"753","line":21,"column":5,"nodeType":"657","messageId":"658","endLine":21,"endColumn":17},{"ruleId":"655","severity":1,"message":"754","line":25,"column":5,"nodeType":"657","messageId":"658","endLine":25,"endColumn":12},{"ruleId":"669","severity":1,"message":"670","line":81,"column":127,"nodeType":"671","messageId":"672","endLine":81,"endColumn":129},{"ruleId":"655","severity":1,"message":"755","line":5,"column":9,"nodeType":"657","messageId":"658","endLine":5,"endColumn":19},{"ruleId":"669","severity":1,"message":"670","line":65,"column":21,"nodeType":"671","messageId":"672","endLine":65,"endColumn":23},{"ruleId":"655","severity":1,"message":"743","line":2,"column":28,"nodeType":"657","messageId":"658","endLine":2,"endColumn":35},{"ruleId":"655","severity":1,"message":"744","line":2,"column":54,"nodeType":"657","messageId":"658","endLine":2,"endColumn":57},{"ruleId":"655","severity":1,"message":"731","line":2,"column":59,"nodeType":"657","messageId":"658","endLine":2,"endColumn":70},{"ruleId":"655","severity":1,"message":"699","line":2,"column":80,"nodeType":"657","messageId":"658","endLine":2,"endColumn":90},{"ruleId":"655","severity":1,"message":"753","line":9,"column":5,"nodeType":"657","messageId":"658","endLine":9,"endColumn":17},{"ruleId":"655","severity":1,"message":"754","line":13,"column":5,"nodeType":"657","messageId":"658","endLine":13,"endColumn":12},{"ruleId":"669","severity":1,"message":"670","line":139,"column":127,"nodeType":"671","messageId":"672","endLine":139,"endColumn":129},{"ruleId":"655","severity":1,"message":"733","line":3,"column":8,"nodeType":"657","messageId":"658","endLine":3,"endColumn":13},{"ruleId":"655","severity":1,"message":"756","line":3,"column":10,"nodeType":"657","messageId":"658","endLine":3,"endColumn":24},{"ruleId":"655","severity":1,"message":"744","line":4,"column":10,"nodeType":"657","messageId":"658","endLine":4,"endColumn":13},{"ruleId":"655","severity":1,"message":"757","line":39,"column":5,"nodeType":"657","messageId":"658","endLine":39,"endColumn":10},{"ruleId":"655","severity":1,"message":"758","line":40,"column":5,"nodeType":"657","messageId":"658","endLine":40,"endColumn":12},{"ruleId":"655","severity":1,"message":"759","line":41,"column":5,"nodeType":"657","messageId":"658","endLine":41,"endColumn":13},{"ruleId":"655","severity":1,"message":"760","line":43,"column":5,"nodeType":"657","messageId":"658","endLine":43,"endColumn":16},{"ruleId":"655","severity":1,"message":"761","line":44,"column":5,"nodeType":"657","messageId":"658","endLine":44,"endColumn":18},{"ruleId":"655","severity":1,"message":"762","line":45,"column":5,"nodeType":"657","messageId":"658","endLine":45,"endColumn":21},{"ruleId":"655","severity":1,"message":"733","line":3,"column":8,"nodeType":"657","messageId":"658","endLine":3,"endColumn":13},{"ruleId":"663","severity":1,"message":"667","line":31,"column":43,"nodeType":"665","messageId":"668","endLine":31,"endColumn":45},{"ruleId":"663","severity":1,"message":"667","line":39,"column":43,"nodeType":"665","messageId":"668","endLine":39,"endColumn":45},{"ruleId":"663","severity":1,"message":"667","line":50,"column":43,"nodeType":"665","messageId":"668","endLine":50,"endColumn":45},{"ruleId":"663","severity":1,"message":"667","line":101,"column":35,"nodeType":"665","messageId":"668","endLine":101,"endColumn":37},{"ruleId":"655","severity":1,"message":"733","line":3,"column":8,"nodeType":"657","messageId":"658","endLine":3,"endColumn":13},{"ruleId":"763","severity":1,"message":"764","line":172,"column":8,"nodeType":"765","endLine":172,"endColumn":10,"suggestions":"766"},{"ruleId":"655","severity":1,"message":"733","line":18,"column":8,"nodeType":"657","messageId":"658","endLine":18,"endColumn":13},{"ruleId":"663","severity":1,"message":"667","line":50,"column":35,"nodeType":"665","messageId":"668","endLine":50,"endColumn":37},{"ruleId":"663","severity":1,"message":"664","line":351,"column":86,"nodeType":"665","messageId":"666","endLine":351,"endColumn":88},{"ruleId":"663","severity":1,"message":"664","line":370,"column":38,"nodeType":"665","messageId":"666","endLine":370,"endColumn":40},{"ruleId":"669","severity":1,"message":"670","line":374,"column":36,"nodeType":"671","messageId":"672","endLine":374,"endColumn":38},{"ruleId":"669","severity":1,"message":"670","line":374,"column":70,"nodeType":"671","messageId":"672","endLine":374,"endColumn":72},{"ruleId":"669","severity":1,"message":"670","line":374,"column":103,"nodeType":"671","messageId":"672","endLine":374,"endColumn":105},{"ruleId":"663","severity":1,"message":"664","line":381,"column":38,"nodeType":"665","messageId":"666","endLine":381,"endColumn":40},{"ruleId":"669","severity":1,"message":"670","line":385,"column":38,"nodeType":"671","messageId":"672","endLine":385,"endColumn":40},{"ruleId":"669","severity":1,"message":"670","line":385,"column":71,"nodeType":"671","messageId":"672","endLine":385,"endColumn":73},{"ruleId":"663","severity":1,"message":"664","line":392,"column":38,"nodeType":"665","messageId":"666","endLine":392,"endColumn":40},{"ruleId":"669","severity":1,"message":"670","line":396,"column":37,"nodeType":"671","messageId":"672","endLine":396,"endColumn":39},{"ruleId":"663","severity":1,"message":"667","line":402,"column":24,"nodeType":"665","messageId":"668","endLine":402,"endColumn":26},{"ruleId":"763","severity":1,"message":"767","line":415,"column":8,"nodeType":"765","endLine":415,"endColumn":63,"suggestions":"768"},{"ruleId":"655","severity":1,"message":"769","line":9,"column":19,"nodeType":"657","messageId":"658","endLine":9,"endColumn":27},{"ruleId":"655","severity":1,"message":"770","line":10,"column":12,"nodeType":"657","messageId":"658","endLine":10,"endColumn":16},{"ruleId":"655","severity":1,"message":"771","line":12,"column":11,"nodeType":"657","messageId":"658","endLine":12,"endColumn":17},{"ruleId":"763","severity":1,"message":"772","line":79,"column":7,"nodeType":"765","endLine":79,"endColumn":27,"suggestions":"773"},{"ruleId":"763","severity":1,"message":"772","line":89,"column":7,"nodeType":"765","endLine":89,"endColumn":26,"suggestions":"774"},{"ruleId":"763","severity":1,"message":"772","line":99,"column":7,"nodeType":"765","endLine":99,"endColumn":28,"suggestions":"775"},{"ruleId":"763","severity":1,"message":"772","line":129,"column":7,"nodeType":"765","endLine":129,"endColumn":78,"suggestions":"776"},{"ruleId":"655","severity":1,"message":"743","line":2,"column":28,"nodeType":"657","messageId":"658","endLine":2,"endColumn":35},{"ruleId":"655","severity":1,"message":"744","line":2,"column":54,"nodeType":"657","messageId":"658","endLine":2,"endColumn":57},{"ruleId":"655","severity":1,"message":"731","line":2,"column":59,"nodeType":"657","messageId":"658","endLine":2,"endColumn":70},{"ruleId":"655","severity":1,"message":"699","line":2,"column":80,"nodeType":"657","messageId":"658","endLine":2,"endColumn":90},{"ruleId":"655","severity":1,"message":"724","line":4,"column":10,"nodeType":"657","messageId":"658","endLine":4,"endColumn":23},{"ruleId":"655","severity":1,"message":"732","line":4,"column":25,"nodeType":"657","messageId":"658","endLine":4,"endColumn":31},{"ruleId":"655","severity":1,"message":"745","line":5,"column":8,"nodeType":"657","messageId":"658","endLine":5,"endColumn":13},{"ruleId":"655","severity":1,"message":"746","line":6,"column":10,"nodeType":"657","messageId":"658","endLine":6,"endColumn":18},{"ruleId":"655","severity":1,"message":"701","line":13,"column":8,"nodeType":"657","messageId":"658","endLine":13,"endColumn":17},{"ruleId":"655","severity":1,"message":"704","line":16,"column":8,"nodeType":"657","messageId":"658","endLine":16,"endColumn":28},{"ruleId":"655","severity":1,"message":"703","line":17,"column":8,"nodeType":"657","messageId":"658","endLine":17,"endColumn":22},{"ruleId":"655","severity":1,"message":"750","line":18,"column":8,"nodeType":"657","messageId":"658","endLine":18,"endColumn":18},{"ruleId":"655","severity":1,"message":"702","line":19,"column":8,"nodeType":"657","messageId":"658","endLine":19,"endColumn":22},{"ruleId":"706","severity":1,"message":"707","line":98,"column":17,"nodeType":"657","messageId":"708","endLine":98,"endColumn":18},{"ruleId":"669","severity":1,"message":"670","line":138,"column":44,"nodeType":"671","messageId":"672","endLine":138,"endColumn":46},{"ruleId":"669","severity":1,"message":"670","line":151,"column":31,"nodeType":"671","messageId":"672","endLine":151,"endColumn":33},{"ruleId":"669","severity":1,"message":"670","line":157,"column":78,"nodeType":"671","messageId":"672","endLine":157,"endColumn":80},{"ruleId":"669","severity":1,"message":"670","line":168,"column":70,"nodeType":"671","messageId":"672","endLine":168,"endColumn":72},{"ruleId":"669","severity":1,"message":"670","line":174,"column":79,"nodeType":"671","messageId":"672","endLine":174,"endColumn":81},{"ruleId":"669","severity":1,"message":"670","line":185,"column":75,"nodeType":"671","messageId":"672","endLine":185,"endColumn":77},{"ruleId":"669","severity":1,"message":"670","line":218,"column":31,"nodeType":"671","messageId":"672","endLine":218,"endColumn":33},{"ruleId":"706","severity":1,"message":"707","line":309,"column":17,"nodeType":"657","messageId":"708","endLine":309,"endColumn":18},{"ruleId":"669","severity":1,"message":"670","line":391,"column":20,"nodeType":"671","messageId":"672","endLine":391,"endColumn":22},{"ruleId":"669","severity":1,"message":"670","line":400,"column":26,"nodeType":"671","messageId":"672","endLine":400,"endColumn":28},{"ruleId":"669","severity":1,"message":"670","line":426,"column":127,"nodeType":"671","messageId":"672","endLine":426,"endColumn":129},{"ruleId":"669","severity":1,"message":"670","line":630,"column":69,"nodeType":"671","messageId":"672","endLine":630,"endColumn":71},{"ruleId":"669","severity":1,"message":"709","line":660,"column":81,"nodeType":"671","messageId":"672","endLine":660,"endColumn":83},{"ruleId":"655","severity":1,"message":"777","line":101,"column":15,"nodeType":"657","messageId":"658","endLine":101,"endColumn":20},{"ruleId":"706","severity":1,"message":"707","line":119,"column":17,"nodeType":"657","messageId":"708","endLine":119,"endColumn":18},{"ruleId":"706","severity":1,"message":"707","line":127,"column":17,"nodeType":"657","messageId":"708","endLine":127,"endColumn":18},{"ruleId":"669","severity":1,"message":"670","line":137,"column":51,"nodeType":"671","messageId":"672","endLine":137,"endColumn":53},{"ruleId":"669","severity":1,"message":"670","line":137,"column":104,"nodeType":"671","messageId":"672","endLine":137,"endColumn":106},{"ruleId":"669","severity":1,"message":"670","line":186,"column":44,"nodeType":"671","messageId":"672","endLine":186,"endColumn":46},{"ruleId":"655","severity":1,"message":"778","line":15,"column":8,"nodeType":"657","messageId":"658","endLine":15,"endColumn":22},{"ruleId":"669","severity":1,"message":"670","line":137,"column":49,"nodeType":"671","messageId":"672","endLine":137,"endColumn":51},{"ruleId":"690","severity":1,"message":"691","line":138,"column":105,"nodeType":"692","endLine":138,"endColumn":188},{"ruleId":"681","severity":1,"message":"779","line":184,"column":49,"nodeType":"683","messageId":"672","endLine":184,"endColumn":53},"no-native-reassign",["780"],"no-negated-in-lhs",["781"],"no-unused-vars","'FiChevronRight' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'FiXSquare' is defined but never used.","'Alert' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["782","783"],["784","785"],"no-dupe-keys","Duplicate key 'updateShiftTypes'.","ObjectExpression","'emailjs' is defined but never used.",["786","787"],["788","789"],["790","791"],["792","793"],"'statusConfirmPassword' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'DataGrid' is defined but never used.","'SplitButton' is defined but never used.","'Button' is defined but never used.","'InputLabel' is defined but never used.","'Modal' is defined but never used.","'GoodImage' is defined but never used.","'DateTimePicker' is defined but never used.","'AdapterDateFns' is defined but never used.","'LocalizationProvider' is defined but never used.","'GiConsoleController' is defined but never used.","no-redeclare","'i' is already defined.","redeclared","Expected '!==' and instead saw '!='.","'Page' is defined but never used.","'Label' is defined but never used.","'Scrollbar' is defined but never used.","'SearchNotFound' is defined but never used.","'sentenceCase' is defined but never used.","'Avatar' is defined but never used.","'TablePagination' is defined but never used.","'EmployeeToolbar' is defined but never used.","'EmployeeObj' is defined but never used.","'filterName' is assigned a value but never used.","'filteredUsers' is assigned a value but never used.","'page' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","'TextField' is defined but never used.","'BiPlusMedical' is defined but never used.","'AddTypeModal' is defined but never used.","'fromHour' is already defined.","'fromMin' is already defined.","'toHour' is already defined.","'toMin' is already defined.","'Grid' is defined but never used.","'CardContent' is defined but never used.","'BiEdit' is defined but never used.","'axios' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'GiVampireCape' is defined but never used.","'Divider' is defined but never used.","'Box' is defined but never used.","'Stack' is defined but never used.","'GiCancel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'FormControl' is defined but never used.","'DatePicker' is defined but never used.","'AiFillPlusCircle' is defined but never used.","'CancelIcon' is defined but never used.","'productTypes' is assigned a value but never used.","'typeSet' is assigned a value but never used.","'GiPayMoney' is defined but never used.","'visuallyHidden' is defined but never used.","'order' is assigned a value but never used.","'orderBy' is assigned a value but never used.","'rowCount' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'onRequestSort' is assigned a value but never used.","'onSelectAllClick' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["794"],"React Hook React.useEffect has missing dependencies: 'dispatch' and 'listMAHD'. Either include them or remove the dependency array.",["795"],"'setValue' is assigned a value but never used.","'date' is assigned a value but never used.","'value1' is assigned a value but never used.","React Hook React.useCallback has a missing dependency: 'inputProps'. Either include it or remove the dependency array.",["796"],["797"],["798"],["799"],"'data1' is assigned a value but never used.","'TableContainer' is defined but never used.","Duplicate key 'unit'.","no-global-assign","no-unsafe-negation",{"messageId":"800","fix":"801","desc":"802"},{"messageId":"803","fix":"804","desc":"805"},{"messageId":"800","fix":"806","desc":"802"},{"messageId":"803","fix":"807","desc":"805"},{"messageId":"800","fix":"808","desc":"802"},{"messageId":"803","fix":"809","desc":"805"},{"messageId":"800","fix":"810","desc":"802"},{"messageId":"803","fix":"811","desc":"805"},{"messageId":"800","fix":"812","desc":"802"},{"messageId":"803","fix":"813","desc":"805"},{"messageId":"800","fix":"814","desc":"802"},{"messageId":"803","fix":"815","desc":"805"},{"desc":"816","fix":"817"},{"desc":"818","fix":"819"},{"desc":"820","fix":"821"},{"desc":"820","fix":"822"},{"desc":"820","fix":"823"},{"desc":"824","fix":"825"},"removeEscape",{"range":"826","text":"827"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"828","text":"829"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"830","text":"827"},{"range":"831","text":"829"},{"range":"832","text":"827"},{"range":"833","text":"829"},{"range":"834","text":"827"},{"range":"835","text":"829"},{"range":"836","text":"827"},{"range":"837","text":"829"},{"range":"838","text":"827"},{"range":"839","text":"829"},"Update the dependencies array to be: [dispatch]",{"range":"840","text":"841"},"Update the dependencies array to be: [typeReciept, typeByDate, listReciept, statusSelectAll, dispatch, listMAHD]",{"range":"842","text":"843"},"Update the dependencies array to be: [inputProps]",{"range":"844","text":"845"},{"range":"846","text":"845"},{"range":"847","text":"845"},"Update the dependencies array to be: [cancelOnEscape, inputProps, handleRequestSearch, handleCancel]",{"range":"848","text":"849"},[4066,4067],"",[4066,4066],"\\",[4082,4083],[4082,4082],[3748,3749],[3748,3748],[3764,3765],[3764,3764],[3284,3285],[3284,3284],[3300,3301],[3300,3300],[5811,5813],"[dispatch]",[20235,20290],"[typeReciept, typeByDate, listReciept, statusSelectAll, dispatch, listMAHD]",[2067,2087],"[inputProps]",[2288,2307],[2525,2546],[3292,3363],"[cancelOnEscape, inputProps, handleRequestSearch, handleCancel]"]
=======
[{"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/index.js":"1","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/App.js":"2","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Store.js":"3","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DirectionURL.js":"4","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/TypeStatusReducer.js":"5","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/LoginStatusReducer.js":"6","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/DistrictReducer.js":"7","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ProvinceReducer.js":"8","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ConfirmModalReducer.js":"9","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RoleReducer.js":"10","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ListShiftReducer.js":"11","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/typeProductReducer.js":"12","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ObjectEditShiftReducer.js":"13","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ListProductReducer.js":"14","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/AlertReducer.js":"15","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/chooseTypeProduct.js":"16","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/InfoUserReducer.js":"17","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/InfoUpdateProduct.js":"18","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/TypeProductValueReducer.js":"19","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusModalConfirmPassword.js":"20","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddShiftReducer.js":"21","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusEditShiftReducer.js":"22","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusEditTypeReducer.js":"23","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusUpdateGoodReducer.js":"24","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusDarkModeReducer.js":"25","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusIsAddTypeReducer.js":"26","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddTypeReducer.js":"27","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusUpdateEmployeeReducer.js":"28","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusYesConfirmReducer.js":"29","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusConfirmReducer.js":"30","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusPayMoneyStatus.js":"31","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddEmployeeReducer.js":"32","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusDeleteConfirmReducer.js":"33","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/ShoppingBagsReducer.js":"34","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Login.js":"35","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Register.js":"36","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/LoginWithEmployee.js":"37","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Body.js":"38","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/ForgotPassword.js":"39","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DashboardURL.js":"40","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/ModalConfirmPassword.js":"41","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Partials/SideNavBar.js":"42","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeeManager.js":"43","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/Profile.js":"44","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/DashBoard.js":"45","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodManager.js":"46","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/GoodImport.js":"47","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/SellProduct.js":"48","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/PayMoneyModal.js":"49","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateEmployeeModal.js":"50","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddEmployeeModal.js":"51","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/GroupButton.js":"52","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/Statistic.js":"53","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/Print.js":"54","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/ShoppingBags.js":"55","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/EditTypeModal.js":"56","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/BaseOptionChart.js":"57","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/ComponentToPrint.js":"58","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/AddTypeModal.js":"59","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/Tabs.js":"60","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/ConfirmModal.js":"61","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/SearchBar.js":"62","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/Calendar.js":"63","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/UpdateGoodModal.js":"64","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/GoodTable.js":"65","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/Regulation.js":"66","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ChangePassword.js":"67","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ModalAdd.js":"68","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileSetting.js":"69","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ListShift.js":"70","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileDetail.js":"71","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileHeader.js":"72","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/fakeData.js":"73","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeTableHeader.js":"74","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeMoreMenu.js":"75","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeToolbar.js":"76","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Scrollbar.js":"77","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/SearchNotFound.js":"78","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Label.js":"79","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Page.js":"80","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/DarkMode.js":"81","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/TableRow.js":"82","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/employeeListReducer.js":"83","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/InfomationBillEdit.js":"84","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/ListRecieptReducer.js":"85","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/StatusShowHistoryRecieptReducer.js":"86","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/StatusEditInfomationBill.js":"87","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/employeeSackedListReducer.js":"88","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/currentEditEmployeeReducer.js":"89","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UnShiftEmployee.js":"90","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/FixedCalendar.js":"91","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/HistoryReciept.js":"92","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/FixedCalendarCell.js":"93","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/TableReciept.js":"94","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/SackedEmployeeMenu.js":"95","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/TypeReciept.js":"96","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/TypeByDate.js":"97","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/StatusSelectAll.js":"98","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/ReiceiptManager.js":"99","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/TableReciept.js":"100","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/StatusReceiptType.js":"101","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/DateReciept.js":"102","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/ControlReciept.js":"103"},{"size":295,"mtime":1633526918199,"results":"104","hashOfConfig":"105"},{"size":2967,"mtime":1636697502393,"results":"106","hashOfConfig":"105"},{"size":4407,"mtime":1636697502430,"results":"107","hashOfConfig":"105"},{"size":2136,"mtime":1633861365892,"results":"108","hashOfConfig":"105"},{"size":331,"mtime":1633861365892,"results":"109","hashOfConfig":"105"},{"size":284,"mtime":1633526918189,"results":"110","hashOfConfig":"105"},{"size":364,"mtime":1634708338277,"results":"111","hashOfConfig":"105"},{"size":372,"mtime":1634554437218,"results":"112","hashOfConfig":"105"},{"size":468,"mtime":1634555131980,"results":"113","hashOfConfig":"105"},{"size":304,"mtime":1634554437218,"results":"114","hashOfConfig":"105"},{"size":1608,"mtime":1635858815646,"results":"115","hashOfConfig":"105"},{"size":575,"mtime":1635745215660,"results":"116","hashOfConfig":"105"},{"size":330,"mtime":1634050541311,"results":"117","hashOfConfig":"105"},{"size":683,"mtime":1636527068502,"results":"118","hashOfConfig":"105"},{"size":643,"mtime":1635403823793,"results":"119","hashOfConfig":"105"},{"size":349,"mtime":1635745215659,"results":"120","hashOfConfig":"105"},{"size":2120,"mtime":1635320014349,"results":"121","hashOfConfig":"105"},{"size":1071,"mtime":1635414209098,"results":"122","hashOfConfig":"105"},{"size":643,"mtime":1634797384962,"results":"123","hashOfConfig":"105"},{"size":360,"mtime":1634554437221,"results":"124","hashOfConfig":"105"},{"size":293,"mtime":1633939930791,"results":"125","hashOfConfig":"105"},{"size":302,"mtime":1634050541312,"results":"126","hashOfConfig":"105"},{"size":299,"mtime":1634554437220,"results":"127","hashOfConfig":"105"},{"size":313,"mtime":1635414209104,"results":"128","hashOfConfig":"105"},{"size":292,"mtime":1634050541312,"results":"129","hashOfConfig":"105"},{"size":360,"mtime":1634554437221,"results":"130","hashOfConfig":"105"},{"size":294,"mtime":1634554437218,"results":"131","hashOfConfig":"105"},{"size":329,"mtime":1634651182404,"results":"132","hashOfConfig":"105"},{"size":338,"mtime":1634555131981,"results":"133","hashOfConfig":"105"},{"size":293,"mtime":1634554437219,"results":"134","hashOfConfig":"105"},{"size":314,"mtime":1634651182400,"results":"135","hashOfConfig":"105"},{"size":314,"mtime":1634651182398,"results":"136","hashOfConfig":"105"},{"size":378,"mtime":1634554437220,"results":"137","hashOfConfig":"105"},{"size":1298,"mtime":1636697502429,"results":"138","hashOfConfig":"105"},{"size":12398,"mtime":1636528396850,"results":"139","hashOfConfig":"105"},{"size":15274,"mtime":1635403823772,"results":"140","hashOfConfig":"105"},{"size":8465,"mtime":1636697502409,"results":"141","hashOfConfig":"105"},{"size":1562,"mtime":1636697502407,"results":"142","hashOfConfig":"105"},{"size":12653,"mtime":1635403823756,"results":"143","hashOfConfig":"105"},{"size":1722,"mtime":1636697502431,"results":"144","hashOfConfig":"105"},{"size":1908,"mtime":1634554437210,"results":"145","hashOfConfig":"105"},{"size":8989,"mtime":1636697502410,"results":"146","hashOfConfig":"105"},{"size":26716,"mtime":1636527623012,"results":"147","hashOfConfig":"105"},{"size":3743,"mtime":1636697502413,"results":"148","hashOfConfig":"105"},{"size":5486,"mtime":1635403823754,"results":"149","hashOfConfig":"105"},{"size":5836,"mtime":1635931904094,"results":"150","hashOfConfig":"105"},{"size":29966,"mtime":1636527068473,"results":"151","hashOfConfig":"105"},{"size":13241,"mtime":1636539496913,"results":"152","hashOfConfig":"105"},{"size":13715,"mtime":1634654085548,"results":"153","hashOfConfig":"105"},{"size":16448,"mtime":1636527068473,"results":"154","hashOfConfig":"105"},{"size":15885,"mtime":1636527623013,"results":"155","hashOfConfig":"105"},{"size":2693,"mtime":1634554437190,"results":"156","hashOfConfig":"105"},{"size":1776,"mtime":1634554437191,"results":"157","hashOfConfig":"105"},{"size":7467,"mtime":1636697502421,"results":"158","hashOfConfig":"105"},{"size":3611,"mtime":1636697502422,"results":"159","hashOfConfig":"105"},{"size":7609,"mtime":1635858815616,"results":"160","hashOfConfig":"105"},{"size":5405,"mtime":1634554437190,"results":"161","hashOfConfig":"105"},{"size":6818,"mtime":1636697502418,"results":"162","hashOfConfig":"105"},{"size":8165,"mtime":1635854817080,"results":"163","hashOfConfig":"105"},{"size":1344,"mtime":1636527068500,"results":"164","hashOfConfig":"105"},{"size":3407,"mtime":1634555131980,"results":"165","hashOfConfig":"105"},{"size":5332,"mtime":1634554437193,"results":"166","hashOfConfig":"105"},{"size":1565,"mtime":1634554437190,"results":"167","hashOfConfig":"105"},{"size":32956,"mtime":1636527068478,"results":"168","hashOfConfig":"105"},{"size":7735,"mtime":1635858815618,"results":"169","hashOfConfig":"105"},{"size":7609,"mtime":1636697502416,"results":"170","hashOfConfig":"105"},{"size":7817,"mtime":1636697502411,"results":"171","hashOfConfig":"105"},{"size":14410,"mtime":1636697502412,"results":"172","hashOfConfig":"105"},{"size":1116,"mtime":1636697502415,"results":"173","hashOfConfig":"105"},{"size":7397,"mtime":1636697502412,"results":"174","hashOfConfig":"105"},{"size":15929,"mtime":1636697502414,"results":"175","hashOfConfig":"105"},{"size":4427,"mtime":1635403823790,"results":"176","hashOfConfig":"105"},{"size":678,"mtime":1636297938177,"results":"177","hashOfConfig":"105"},{"size":2833,"mtime":1636527623015,"results":"178","hashOfConfig":"105"},{"size":4413,"mtime":1636527068469,"results":"179","hashOfConfig":"105"},{"size":2399,"mtime":1634651182377,"results":"180","hashOfConfig":"105"},{"size":1478,"mtime":1634651182382,"results":"181","hashOfConfig":"105"},{"size":0,"mtime":1634651182383,"results":"182","hashOfConfig":"105"},{"size":2373,"mtime":1634651182378,"results":"183","hashOfConfig":"105"},{"size":462,"mtime":1634651182380,"results":"184","hashOfConfig":"105"},{"size":3038,"mtime":1634554437211,"results":"185","hashOfConfig":"105"},{"size":10136,"mtime":1635858815620,"results":"186","hashOfConfig":"105"},{"size":936,"mtime":1636297938181,"results":"187","hashOfConfig":"105"},{"size":347,"mtime":1636527068502,"results":"188","hashOfConfig":"105"},{"size":1723,"mtime":1636697502428,"results":"189","hashOfConfig":"105"},{"size":331,"mtime":1636527068504,"results":"190","hashOfConfig":"105"},{"size":331,"mtime":1636527068504,"results":"191","hashOfConfig":"105"},{"size":967,"mtime":1636527068501,"results":"192","hashOfConfig":"105"},{"size":869,"mtime":1636527068501,"results":"193","hashOfConfig":"105"},{"size":3995,"mtime":1636527623018,"results":"194","hashOfConfig":"105"},{"size":4128,"mtime":1636527623015,"results":"195","hashOfConfig":"105"},{"size":1136,"mtime":1636697502419,"results":"196","hashOfConfig":"105"},{"size":3579,"mtime":1636527623016,"results":"197","hashOfConfig":"105"},{"size":16332,"mtime":1636697502423,"results":"198","hashOfConfig":"105"},{"size":3931,"mtime":1636527068471,"results":"199","hashOfConfig":"105"},{"size":527,"mtime":1636697502427,"results":"200","hashOfConfig":"105"},{"size":328,"mtime":1636697502426,"results":"201","hashOfConfig":"105"},{"size":304,"mtime":1636697502424,"results":"202","hashOfConfig":"105"},{"size":1633,"mtime":1636697502417,"results":"203","hashOfConfig":"105"},{"size":18522,"mtime":1636697502417,"results":"204","hashOfConfig":"105"},{"size":4034,"mtime":1636697502417,"results":"205","hashOfConfig":"105"},{"size":8858,"mtime":1636697502416,"results":"206","hashOfConfig":"105"},{"size":4330,"mtime":1636697502416,"results":"207","hashOfConfig":"105"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},"1evuik7",{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213"},{"filePath":"214","messages":"215","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"240","messages":"241","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"250","messages":"251","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"252","messages":"253","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"260","messages":"261","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"262","messages":"263","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"266","messages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"268","messages":"269","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"272","messages":"273","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"274","messages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"210"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"210"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"292","usedDeprecatedRules":"210"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297","usedDeprecatedRules":"210"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"300"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"210"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"210"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"311","usedDeprecatedRules":"210"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"314","usedDeprecatedRules":"210"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"320","usedDeprecatedRules":"210"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323","usedDeprecatedRules":"210"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"326","usedDeprecatedRules":"210"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"333"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"210"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"343"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"346","usedDeprecatedRules":"210"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"351","usedDeprecatedRules":"210"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"210"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"210"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"360","usedDeprecatedRules":"210"},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"363","usedDeprecatedRules":"210"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"370"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"383","usedDeprecatedRules":"210"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"386","usedDeprecatedRules":"210"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"210"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"210"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"210"},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"210"},{"filePath":"422","messages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424"},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"210"},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430"},{"filePath":"431","messages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"210"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450"},{"filePath":"451","messages":"452","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/index.js",[],["453","454"],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/App.js",["455","456"],"import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nimport DirectionURL from './Router/DirectionURL';\nimport './css/App.css'\nimport { connect } from 'react-redux'\nimport axios from 'axios';\nimport Alert from '@mui/material/Alert';\nimport { FiChevronRight, FiXSquare } from \"react-icons/fi\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  async componentWillMount() {\n    if (localStorage.getItem('token') && localStorage.getItem('token') !== \"\") {\n      axios.post(`http://localhost:5000/refresh`, {\n        token: localStorage.getItem('token'),\n      })\n        .then(res => {\n          console.log(\"Thành công\");\n          console.log(res.data);\n          if (res.status === 200) {\n            localStorage.setItem('token', res.data.token);\n            this.props.updateProfile(res.data.data);\n            this.props.updateRecieptUser(res.data.data.receipts)\n            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n            this.props.updateShiftTypes(res.data.data.shiftTypes)\n            this.props.changeLoginStatus();\n          }\n        })\n        .catch(err => {\n          console.log(\"thất bại\");\n        })\n    }\n  }\n\n  autoHideAlert = () => {\n    setTimeout(() => this.props.hideAlert(), 4000);\n  }\n\n  render() {\n    return (\n      <Router>\n        <DirectionURL></DirectionURL>\n        {this.props.alertReducer.status ? this.autoHideAlert() : null}\n        {this.props.alertReducer.status ? <Alert style={{cursor: 'pointer'}} onClick={() => this.props.hideAlert()} className=\"message-error\" severity={this.props.alertReducer.typeMessage}>{this.props.alertReducer.message} — check it out! <FiXSquare></FiXSquare></Alert> : null}\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    isLogin: state.loginStatus,\n    alertReducer: state.alert,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    changeLoginStatus: () => {\n      dispatch({\n        type: \"CHANGE_LOGIN_STATUS\",\n      });\n    },\n    updateProvince: (data) => {\n      dispatch({\n        type: \"UPDATE_DATA\",\n        data: data,\n      })\n    },\n    updateRecieptUser: (data) => {\n      dispatch({\n        type: \"UPDATE_RECIEPT_USER\",\n        listReciept: data,\n      })\n    },\n    updateProfile: (data) => {\n      dispatch({\n        type: \"UPDATA_DATA_USER\",\n        data: data,\n      })\n    },\n    updateAvatar: (avatar) => {\n      dispatch({\n        type: \"UPDATE_AVATAR\",\n        avatar: avatar,\n      })\n    },\n    updateShiftTypes: (shiftTypes) => {\n      dispatch({\n        type: \"UPDATE_DATA_SHIFT_USER\",\n        shiftTypes: shiftTypes,\n      })\n    },\n    hideAlert: () => {\n      dispatch({\n        type: \"HIDE_ALERT\",\n      })\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Store.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DirectionURL.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/TypeStatusReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/LoginStatusReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/DistrictReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ProvinceReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ConfirmModalReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RoleReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ListShiftReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/typeProductReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ObjectEditShiftReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ListProductReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/AlertReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/chooseTypeProduct.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/InfoUserReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/InfoUpdateProduct.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/TypeProductValueReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusModalConfirmPassword.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddShiftReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusEditShiftReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusEditTypeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusUpdateGoodReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusDarkModeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusIsAddTypeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddTypeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusUpdateEmployeeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusYesConfirmReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusConfirmReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusPayMoneyStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddEmployeeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusDeleteConfirmReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/ShoppingBagsReducer.js",["457"],"const shoppingBagsInitialState = [],\n    shoppingBagsReducer = (state = shoppingBagsInitialState, action) => {\n        switch (action.type) {\n            case \"ADD_NEW_PRODUCT_SHOPPING_BAGS\": \n                return [...state, action.newProduct];\n            case \"RAISE_QUANTITY_SHOPPING_BAGS\":\n                return state.map(value => {\n                    if (value.product.name === action.name) {\n                        value.quantity += 1;\n                    }\n                    return value\n                })\n            case \"REDUCE_QUANTITY_SHOPPING_BAGS\":\n                return state.map(value => {\n                    if (value.product.name === action.name) {\n                        value.quantity -= 1;\n                    }\n                    return value\n                })\n            case \"DELETE_PRODUCT_SHOPPING_BAGS\":\n                return state.filter((value) => {\n                    if (value.product.name !== action.name) {\n                        return value;\n                    }\n                })\n            case \"RESET_SHOPPING_BAGS\":\n                return state = [];\n            case \"INFO_SHOPPING_BAGS_EDIT\":\n                return action.listProduct\n            default:\n                return state\n        }\n    }\n\nexport default shoppingBagsReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Login.js",["458","459","460"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../css/Login.css'\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\nimport { FiChevronRight } from \"react-icons/fi\";\nimport { BiUser } from \"react-icons/bi\";\nimport { Avatar } from '@mui/material'\nimport { IconContext } from \"react-icons\";\nimport { GoogleLogin } from 'react-google-login';\nimport axios from 'axios';\n\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            appId: \"543752153590340\",\n            clientId: \"826925109796-mi95l41fi57bdlolpvnfdg5bpt9oc81h.apps.googleusercontent.com\",\n        }\n    }\n\n    // Login with google\n    onLoginSuccess = async (res) => {\n        this.props.setRole();\n        await axios.post(`http://localhost:5000/sign-in-with-google`, res.profileObj)\n            .then(res => {\n                console.log(\"thành công\");\n                console.log(res.data);\n                switch (res.data.status) {\n                    case 1:\n                        localStorage.setItem('token', res.data.token);\n                        this.props.updateProfile(res.data.data);\n                        this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n                        this.props.updateShiftTypes(res.data.data.shiftTypes);\n                        this.props.changeLoginStatus();\n                        this.props.hideAlert();\n                        this.props.showAlert(res.data.message, \"success\");\n                        break;\n                    case -1:\n                        this.props.hideAlert();\n                        this.props.showAlert(res.data.message, \"error\");\n                        break;\n                    default:\n                        break;\n                }\n            })\n            .catch(err => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Error, server don't active\", \"error\");\n            })\n    }\n\n    // Check để thay đổi trạng thái đã login hay chưa\n    isLoginCheck = async (e) => {\n        this.props.setRole();\n        if (this.blurEmail() && this.blurPassword()) {\n            await axios.post(`http://localhost:5000/sign-in-with-gmail-password`, {\n                email: document.querySelector('#email').value,\n                password: document.getElementById('password').value,\n            })\n                .then(res => {\n                    console.log(res.data);\n                    switch (res.data.status) {\n                        case 1:\n                            localStorage.setItem('token', res.data.token);\n                            this.props.updateProfile(res.data.data);\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n                            this.props.updateShiftTypes(res.data.data.shiftTypes);\n                            this.props.changeLoginStatus();\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"success\");\n                            break;\n                        case -1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"error\");\n                            break;\n                        default:\n                            break;\n                    }\n                })\n                .catch(err => {\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Error system\", \"error\");\n                })\n        }\n    }\n\n    // Handle user : blur , change in input\n    blurEmail = () => {\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        const event = document.querySelector('#email');\n        let elementValue = event.value;\n        const formGroup = event.parentElement.parentElement;\n        // check validate\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        let elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    componentWillMount() {\n        document.title = 'Login'\n    }\n\n    render() {\n        const enterPress = this.isLoginCheck;\n        document.onkeydown = function (e) {\n            switch (e.which) {\n                case 13:\n                    enterPress(e);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return (\n            <div className=\"Login\">\n                <div className=\"form-login\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <BiUser></BiUser>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Login</div>\n                                <NavLink to=\"/register\" className=\"auth-form__switch-btn\">Register <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight></NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"auth-form__support\">\n                                    <span className=\"auth-form__support-forget\">\n                                        <NavLink to=\"/forgot\" className=\"auth-form__switch-btn\">Forgot password</NavLink>\n                                    </span>\n                                    <span className=\"auth-form__help-separate\" />\n                                    <span className=\"auth-form__support-need-support\">Need help?</span>\n                                </div>\n                                <div className=\"auth-form__support\">\n                                    <GoogleLogin\n                                        className=\"auth-form__support-google\"\n                                        clientId={this.state.clientId}\n                                        buttonText=\"Login with Google\"\n                                        onSuccess={this.onLoginSuccess}\n                                        onFailure={this.onFailureSuccess}\n                                        cookiePolicy={'single_host_origin'}\n                                    />\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div to=\"/home\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <NavLink to=\"/employee\" id=\"navlink\" className=\"auth-form__btn-log-in auth-form__switch-btn auth-form-employee\">\n                                        Employee\n                                        <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight>\n                                    </NavLink>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        updateProfile: (data) => {\n            dispatch({\n                type: \"UPDATA_DATA_USER\",\n                data: data,\n            })\n        },\n        setRole: () => {\n            dispatch({\n                type: \"ADMIN_ROLE\"\n            });\n            localStorage.setItem('role', 'admin');\n        },\n        updateAvatar: (avatar) => {\n            dispatch({\n                type: \"UPDATE_AVATAR\",\n                avatar: avatar,\n            })\n        },\n        updateShiftTypes: (shiftTypes) => {\n            dispatch({\n                type: \"UPDATE_DATA_SHIFT_USER\",\n                shiftTypes: shiftTypes,\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        updateShiftTypes: (shiftTypes) => {\n            dispatch({\n                type: \"UPDATE_DATA_SHIFT_USER\",\n                shiftTypes: shiftTypes,\n            })\n        },\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Register.js",["461","462","463"],"import React, { Component } from 'react';\nimport '../../css/Login.css'\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport Avatar from '@mui/material/Avatar'\nimport { IconContext } from \"react-icons\";\nimport { FiChevronLeft, FiUserPlus } from \"react-icons/fi\";\nimport { BsFillEnvelopeFill, BsLockFill, BsCodeSlash } from \"react-icons/bs\";\nimport { FaPhoneSquare } from \"react-icons/fa\";\nimport axios from 'axios';\nimport emailjs from 'emailjs-com';\nvar bcrypt = require('bcryptjs');\n\n\nclass Register extends Component {\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            code: \"\",\n            statusSendCode: true,\n        }\n    }\n\n\n    // Send code tới người dùng\n    sendCode = (a = this.makeCode(6)) => {\n        this.setState({\n            code: \"123456\"\n        })\n        // this.setState({\n        //     code: a,\n        // })\n        // emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\n        // emailjs.send(\"gmail_main\", \"template_plasdgf\", {\n        //     To_mail: `${document.getElementById('email').value}`,\n        //     code: `${a}`,\n        // })\n        //     .then((response) => {\n        //         console.log('SUCCESS!', response.status, response.text);\n        //     }, (err) => {\n        //         console.log('FAILED...', err);\n        //     });\n    }\n\n    // status SignUp \n    SignUp = (e) => {\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword() && this.blurTel()) {\n            axios.post(`http://localhost:5000/register-with-email`, {\n                email: document.getElementById('email').value,\n                password: this.hash(document.getElementById('password').value),\n                tel: document.getElementById('tel').value,\n            })\n                .then(res => {\n                    console.log(res.data);\n                    switch (res.data.status) {\n                        case 1:\n                            localStorage.setItem('token', res.data.token);\n                            this.props.updateProfile(res.data.data);\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n                            this.props.changeLoginStatus();\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"success\");\n\n                            break;\n                        case -1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"error\");\n                            break;\n                        default:\n                            break;\n                    }\n                })\n                .catch(err => {\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Error system\", \"error\");\n                })\n\n        }\n    }\n\n\n    // Tạo mã code cho người dùng xác nhận\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    // Hashpassword\n    hash = (pass) => {\n        var hash = bcrypt.hashSync(pass, 12)\n        return hash;\n    }\n\n\n    // Handle user : blur, change in input\n    blurEmail = () => {\n        const regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        const e = document.getElementById('email');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            this.setState({\n                statusSendCode: false,\n            })\n            return true;\n        }\n    }\n\n    blurCode = () => {\n        const e = document.getElementById('code');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (this.state.code === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\n            return false\n        } else if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\n            return false\n        } else if (elementValue !== this.state.code) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\n            return false\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurRePassword = () => {\n        const e = document.getElementById('re-password')\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (document.getElementById('password').value !== elementValue) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true\n        }\n    }\n\n    blurTel = () => {\n        const e = document.getElementById('tel');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        const regex = /^\\d+$/;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Phone is not in the correct format\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    componentWillMount() {\n        document.title = 'Register'\n    }\n\n    render() {\n        const enterPress = this.SignUp;\n        document.onkeydown = function (e) {\n            switch (e.which) {\n                case 13:\n                    enterPress(e);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return (\n            <div className=\"Login\">\n                <div className=\"form-register\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <FiUserPlus></FiUserPlus>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Register</div>\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Login</NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/register-submit\" method=\"post\" id=\"register-form\">\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND CODE</button>\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"re-password\" id=\"re-password\" placeholder=\"Emter re-password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <FaPhoneSquare className=\"input-custom-icon\" ></FaPhoneSquare>\n                                        </span>\n                                        <input className=\"form-control\" onBlur={(e) => this.blurTel(e)} onChange={(e) => this.changeInput(e)} name=\"tel\" rules=\"required\" id=\"tel\" placeholder=\"Ex: 0303030303\" type=\"tel\" />\n\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"register-description\">Bằng cách ấn vào nút\n                                    <span className=\"register-description__keyword\">“ĐĂNG KÝ”</span>\n                                    , tôi đồng ý với\n                                    <span className=\"register-description__keyword\">Điều Khoản Sử Dụng</span> và\n                                    <div className=\"register-description__keyword\"> Chính Sách Bảo Mật</div>\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div onClick={(e) => this.SignUp(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign Up</div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div >\n            </div >\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        updateProfile: (data) => {\n            dispatch({\n                type: \"UPDATA_DATA_USER\",\n                data: data,\n            })\n        },\n        updateAvatar: (avatar) => {\n            dispatch({\n                type: \"UPDATE_AVATAR\",\n                avatar: avatar,\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/LoginWithEmployee.js",["464","465"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../css/Login.css'\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\nimport { FiXSquare, FiChevronLeft } from \"react-icons/fi\";\nimport { FaUserTie } from 'react-icons/fa'\nimport { Avatar } from '@mui/material'\nimport { IconContext } from \"react-icons\";\nimport axios from 'axios';\nimport Alert from '@mui/material/Alert';\n\nclass LoginWithEmployee extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n\n\n\n\n    // Check để thay đổi trạng thái đã login hay chưa\n    isLoginCheck = async (e) => {\n        this.props.setRole();\n        if (this.blurEmail() && this.blurPassword()) {\n            await axios.post(`http://localhost:5000/sign-in-employee`, {\n                email: document.querySelector('#username').value,\n                password: document.getElementById('password').value,\n            })\n                .then(res => {\n                    console.log(res.data);\n                    switch (res.data.status) {\n                        case 1:\n                            localStorage.setItem('token', res.data.token);\n                            this.props.changeLoginStatus();\n                            this.props.updateProfile(res.data.data);\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"success\");\n                            break;\n                        case -1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"error\");\n                            break;\n                        default:\n                            break;\n                    }\n                })\n                .catch(err => {\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Error system\", \"error\");\n                })\n        }\n    }\n\n\n    // Handle user : blur , change in input\n    blurEmail = () => {\n        const event = document.querySelector('#username');\n        let elementValue = event.value;\n        const formGroup = event.parentElement.parentElement;\n        // check validate\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        let elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    componentWillMount() {\n        document.title = 'Employee'\n    }\n\n    render() {\n        const enterPress = this.isLoginCheck;\n        document.onkeydown = function (e) {\n            switch (e.which) {\n                case 13:\n                    enterPress(e);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return (\n            <div className=\"Login\">\n                <div className=\"form-login\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <FaUserTie></FaUserTie>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Employee</div>\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Login</NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\" className=\"form-label\">Username</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"username\" id=\"username\" placeholder=\"VD: phuoc123\" type=\"text\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div to=\"/sellproduct\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        setRole: () => {\n            dispatch({\n                type: \"EMPLOYEE_ROLE\",\n            });\n            localStorage.setItem('role', 'employee');\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        updateProfile: (data) => {\n            dispatch({\n                type: \"UPDATA_DATA_USER\",\n                data: data,\n            })\n        },\n        updateAvatar: (avatar) => {\n            dispatch({\n                type: \"UPDATE_AVATAR\",\n                avatar: avatar,\n            })\n        },\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginWithEmployee);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Body.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/ForgotPassword.js",["466","467","468"],"import React, { Component } from 'react';\nimport Avatar from '@mui/material/Avatar'\nimport { IconContext } from \"react-icons\";\nimport { FiSend } from \"react-icons/fi\";\nimport { BsFillEnvelopeFill, BsLockFill, BsBoxArrowInLeft, BsCodeSlash } from \"react-icons/bs\";\nimport emailjs from 'emailjs-com';\nimport axios from 'axios';\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport { connect } from 'react-redux';\nvar bcrypt = require('bcryptjs');\n\n\nclass ForgotPassword extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            code: \"\",\n            statusSendCode: true,\n        }\n    }\n\n\n    // Send code tới người dùng\n    sendCode = (a = this.makeCode(6)) => {\n        this.setState({\n            code: \"123456\"\n        })\n        // this.setState({\n        //     code: a,\n        // })\n        // emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\n        // emailjs.send(\"gmail_main\", \"template_plasdgf\", {\n        //     To_mail: `${document.querySelector('#email').value}`,\n        //     code: `${a}`,\n        // })\n        //     .then((response) => {\n        //         console.log('SUCCESS!', response.status, response.text);\n        //     }, (err) => {\n        //         console.log('FAILED...', err);\n        //     });\n    }\n\n    // Tạo code để xác nhận\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    // Hashpassword\n    hash = (pass) => {\n        var hash = bcrypt.hashSync(pass, 12)\n        return hash;\n    }\n\n    //Check tìm lại mật khẩu\n    findPassword = (e) => {\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword()) {\n            const form = document.getElementById('findpass-form');\n            axios.post(`http://localhost:5000/find-password`, {\n                email: document.querySelector('#email').value,\n                password: this.hash(document.getElementById('password').value),\n            })\n                .then(res => {\n                    form.reset();\n                    console.log(res.data.status);\n                    switch (res.data.status) {\n                        case 1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"success\");\n                            break;\n                        case -1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"error\");\n                            break;\n                        default:\n                            break;\n                    }\n                })\n                .catch(err => {\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Error system\", \"error\");\n                })\n        }\n    }\n\n\n    // Handle user blue change in input\n    blurEmail = () => {\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        const event = document.querySelector('#email');\n        const elementValue = event.value;\n        const formGroup = event.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            this.setState({\n                statusSendCode: false,\n            })\n            return true;\n        }\n    }\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurCode = () => {\n        const e = document.getElementById('code');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (this.state.code === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\n            return false\n        } else if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\n            return false\n        } else if (elementValue !== this.state.code) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\n            return false\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurRePassword = () => {\n        const e = document.getElementById('re-password')\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (document.getElementById('password').value !== elementValue) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    componentWillMount() {\n        document.title = 'Find password'\n    }\n\n    render() {\n        const enterPress = this.findPassword;\n        document.onkeydown = function (e) {\n            switch (e.which) {\n                case 13:\n                    enterPress(e);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return (\n            <div className=\"Login\">\n                <div className=\"form-findpass\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <FiSend></FiSend>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Find password</div>\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"><BsBoxArrowInLeft className=\"arrow-return\"></BsBoxArrowInLeft></NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/findpass-submit?_method=PUT\" method=\"POST\" id=\"findpass-form\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"Ex: abc@gmail.com\" type=\"text\" />\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND</button>\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"code\" className=\"form-label\">Code</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\n\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">New password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">Re-password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"password\" rules=\"required|min:6\" id=\"re-password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div onClick={(e) => this.findPassword(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Find Password</div>\n                                </div>\n\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        }\n    }\n}\n\n\n\nexport default connect(mapDispatchToProps)(ForgotPassword);\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DashboardURL.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/ModalConfirmPassword.js",["469"],"import React from 'react';\nimport {Card,CardHeader,Divider,CardContent,Grid,TextField,Box,Button} from '@mui/material';\nimport {BiPlusMedical} from 'react-icons/bi'\nimport { GiCancel } from 'react-icons/gi'\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ModalConfirmPassword(props) {\n\n    const statusConfirmPassword = useSelector(state => state.statusConfirmPassword)\n    const dispatch = useDispatch();\n\n    const handleCancel = () => {\n        dispatch({\n            type:\"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\n        })\n    }\n\n    return (\n        <Card className=\"card-confirm-password\" style={{ minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }}>\n            <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm password\" />\n            <Divider />\n            <CardContent>\n                <Grid container spacing={2}>\n                    <Grid item md={12} xs={12}>\n                        <TextField\n                            id=\"outlined-basic\"\n                            variant=\"outlined\"\n                            fullWidth\n                            label=\"Your password\"\n                            required\n                            type=\"password\"\n                        />\n                    </Grid>\n                </Grid>\n            </CardContent>\n            <Divider />\n            <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                <Button style={{ backgroundColor: 'yellowgreen' }} variant=\"contained\" startIcon={<BiPlusMedical />}>\n                    Xác nhận\n                </Button>\n                <Button style={{ backgroundColor: 'red' }} onClick={() => handleCancel()} variant=\"contained\" startIcon={<GiCancel />}>\n                    Hủy\n                </Button>\n            </Box>\n        </Card>\n    );\n}\n\nexport default ModalConfirmPassword;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Partials/SideNavBar.js",["470","471","472","473"],"import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport {\n    AiOutlineDashboard,\n    AiFillDashboard,\n    AiOutlineContainer,\n    AiFillContainer\n} from \"react-icons/ai\";\nimport { BsInfoCircleFill } from \"react-icons/bs\";\nimport {\n    IoPeopleOutline,\n    IoPeopleSharp,\n    IoReceiptOutline,\n    IoReceiptSharp,\n} from \"react-icons/io5\";\nimport { IoIosArrowBack } from \"react-icons/io\";\nimport { RiProfileFill, RiProfileLine } from \"react-icons/ri\";\nimport { FaSignOutAlt } from \"react-icons/fa\";\nimport { GiSellCard } from 'react-icons/gi'\nimport Avatar from '../../img/avatar_default.jpg';\nimport { NavLink } from 'react-router-dom';\n\nimport '../../css/SideNavBar.css';\n\nclass SideNavBar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            change: true,\n        }\n        this.getInitialScreen();\n    }\n    active = ['active', '', '', '', '', ''];\n\n    changeIndex(index) {\n        for (var i = 0; i < this.active.length; i++) {\n            this.active[i] = '';\n        }\n        this.active[index] = 'active';\n        this.setState({ change: !this.state.change });\n    }\n\n    getInitialScreen() {\n        var link = window.location.href;\n        link = link.substring(link.lastIndexOf('/') + 1);\n\n        for (var i = 0; i < this.active.length; i++) {\n            this.active[i] = '';\n        }\n\n        switch (link) {\n            case \"profile\":\n                this.active[1] = 'active';\n                break;\n            case \"employeemanager\":\n                this.active[2] = 'active';\n                break;\n            case \"goodmanager\":\n                this.active[3] = 'active';\n                break;\n            case \"import\":\n                this.active[3] = 'active';\n                break;    \n            case \"receiptmanager\":\n                this.active[4] = 'active';\n                break;\n            case \"sellproduct\":\n                this.active[5] = 'active';\n                break;\n            default:\n                this.active[0] = 'active';\n                break;\n        }\n        this.setState({ change: !this.state.change });\n    }\n    render() {\n\n        const navbarContainer = document.querySelector('.navbar-container');\n        console.log(navbarContainer);\n        return (\n            <div\n                class=\"navbar-container\"\n                style={{\n                    width: 0,\n                }}\n            >\n                <div style={{backgroundColor: !this.props.statusDarkmode ?  '#fafafa' : '#37474f' }} class=\"navibar sidebar\">\n                    <div className=\"nav-icon\" >\n                        <IoIosArrowBack\n                            size={20}\n                        />\n                    </div>\n                    <div class=\"nav-heading\">\n                        <div style={{backgroundColor: !this.props.statusDarkmode ?  '#cfd8dc' : '#455a64'  }} class=\"navbar-heading-container\">\n                            <img src={this.props.infoUser.avatar ? this.props.infoUser.avatar : Avatar} style={{ width: 40, height: 40, borderRadius: '100%' }}></img>\n                            <span style={{color: !this.props.statusDarkmode ?  'black' : 'white', fontWeight:'700'}} class=\"user-name\">{this.props.infoUser.lastName + \" \" + this.props.infoUser.firstName}</span>\n                        </div>\n                    </div>\n                    <div class=\"nav-container\">\n                        {\n                            // this.props.role == true ?\n                            localStorage.getItem('role') == 'admin' ?\n                                (<NavLink className={\"nav-item \" + this.active[0]} to=\"/dashboard\"\n                                    onClick={() => this.changeIndex(0)}\n                                >\n                                    <AiOutlineDashboard class=\"nav-item-icon\" />\n                                    <AiFillDashboard class=\"nav-item-icon icon-activate\" />\n                                    <span className=\"nav-item-lable\">Dashboard</span>\n                                </NavLink>) : (null)\n                        }\n\n                        <NavLink to=\"/profile\" className={\"nav-item \" + this.active[1]} href=\"#\"\n                            onClick={() => this.changeIndex(1)}\n                        >\n                            <RiProfileLine class=\"nav-item-icon\" />\n                            <RiProfileFill class=\"nav-item-icon icon-activate\" />\n                            <span className=\"nav-item-lable\">Profile</span>\n                        </NavLink>\n\n                        {\n                            this.props.role === true ?\n                                (\n                                    <div>\n                                        <NavLink\n                                            to=\"/employeemanager\"\n                                            className={\"nav-item \" + this.active[2]}\n                                            href=\"#\"\n                                            onClick={() => this.changeIndex(2)}\n                                        >\n                                            <IoPeopleOutline class=\"nav-item-icon\" />\n                                            <IoPeopleSharp class=\"nav-item-icon icon-activate\" />\n                                            <span className=\"nav-item-lable\">Employee Manager</span>\n                                        </NavLink>\n                                        <NavLink\n                                            to=\"/goodmanager\"\n                                            className={\"nav-item \" + this.active[3]}\n                                            href=\"#\"\n                                            onClick={() => this.changeIndex(3)}\n                                        >\n                                            <AiOutlineContainer className=\"nav-item-icon\" />\n                                            <AiFillContainer className=\"nav-item-icon icon-activate\" />\n                                            <span className=\"nav-item-lable\">Goods Manager</span>\n                                        </NavLink>\n                                        <NavLink\n                                            to=\"/receiptmanager\"\n                                            className={\"nav-item \" + this.active[4]}\n                                            href=\"#\"\n                                            onClick={() => this.changeIndex(4)}\n                                        >\n                                            <IoReceiptOutline class=\"nav-item-icon\" />\n                                            <IoReceiptSharp class=\"nav-item-icon icon-activate\" />\n                                            <span className=\"nav-item-lable\">Receipt Manager</span>\n                                        </NavLink>\n                                    </div>\n                                ) : (null)\n                        }\n\n                        <NavLink to=\"/sellproduct\" className={\"nav-item \" + this.active[5]} href='#'\n                            onClick={() => this.changeIndex(5)}\n                        >\n                            <GiSellCard class=\"nav-item-icon\" />\n                            <GiSellCard class=\"nav-item-icon icon-activate\" />\n                            <span className=\"nav-item-lable\">Sell Product</span>\n                        </NavLink>\n                    </div>\n\n                    <div class=\"nav-footer\">\n                        <a\n                            to=\"/login\"\n                            onClick={() => this.props.changeLoginStatus()}\n                            className={\"nav-item \"}\n                            style={{ flex: 5 }}\n                        >\n                            <FaSignOutAlt class=\"nav-item-icon\" />\n                            <span className=\"nav-item-lable\">Sign out</span>\n                        </a>\n                        <a href=\"#\" className={\"nav-item \"} onClick={() => this.props.changeConfirmPasswordTest()} style={{ flex: 4 }}>\n                            <BsInfoCircleFill class=\"nav-item-icon\" />\n                            <span className=\"nav-item-lable\">About</span>\n                        </a>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n        infoUser: state.infoUser,\n        role: state.role,\n        statusDarkmode: state.statusDarkmode\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            })\n        },\n        changeConfirmPasswordTest: () => {\n            dispatch({\n                type: \"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SideNavBar);\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeeManager.js",["474","475","476","477","478","479","480","481","482","483","484","485","486"],"import React, { Component } from 'react';\nimport Page from './EmployeePartials/Page';\nimport Label from './EmployeePartials/Label';\nimport Scrollbar from './EmployeePartials/Scrollbar';\nimport SearchNotFound from './EmployeePartials/SearchNotFound';\nimport { Icon } from '@iconify/react';\nimport { sentenceCase } from 'change-case';\nimport {connect} from 'react-redux'\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport {\n    Card,\n    Table,\n    Stack,\n    Avatar,\n    Button,\n    Checkbox,\n    TableRow,\n    TableBody,\n    TableCell,\n    Container,\n    Typography,\n    TableContainer,\n    TablePagination\n} from '@mui/material';\nimport EmployeeToolbar from './EmployeePartials/EmployeeToolbar';\nimport EmployeeMoreMenu from './EmployeePartials/EmployeeMoreMenu';\nimport SackedEmployeeMenu from './EmployeePartials/SackedEmployeeMenu';\nimport EmployeeTableHeader from './EmployeePartials/EmployeeTableHeader';\nimport USERLIST from './EmployeePartials/fakeData'\nimport AddEmployeeModal from './EmployeePartials/AddEmployeeModal';\nimport UpdateEmployeeModal from './EmployeePartials/UpdateEmployeeModal';\nimport PayMoneyModal from './EmployeePartials/PayMoneyModal';\nimport FixedCalendar from './EmployeePartials/FixedCalendar';\nimport UnShiftEmployee from './EmployeePartials/UnShiftEmployee';\nimport { withStyles } from '@material-ui/styles';\n\nimport axios from 'axios';\n\nfunction EmployeeObj(employeeID, managerID, password, firstName, lastName, \n    phoneNumber, dateOfBirth, email, address, cardID, startDate, endDate) {\n    return {\n        employeeID: employeeID,\n        managerID: managerID,\n        password: password,\n        firstName: firstName,\n        lastName: lastName,\n        phoneNumber: phoneNumber,\n        dateOfBirth: dateOfBirth,\n        email: email,\n        address: address,\n        cardID: cardID,\n        startDate: startDate,\n        endDate: endDate,\n    };\n}\n\nconst TABLE_HEAD = [\n    { id: 'ID', label: 'ID', alignRight: false },\n    { id: 'firstName', label: 'Name', alignRight: false },\n    { id: 'lastName', label: 'Last Name', alignRight: false },\n    { id: 'old', label: 'Old', alignRight: false },\n    { id: 'gender', label: 'Gender', alignRight: false },\n    { id: 'province', label: 'Province', alignRight: false },\n    { id: 'phoneNumber', label: 'Phone', alignRight: false },\n    { id: 'email', label: 'Email', alignRight: false },\n    { id: 'adress', label: 'Adress', alignRight: false },\n    { id: '' }\n];\n\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '80px',\n    } \n})\n\nvar selected = [];\nvar filterName = \"\";\nvar filteredUsers = [];\nvar listUsers = [];\nvar page = 5;\nvar rowsPerPage = 5;\nclass EmployeeManager extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            change: false,\n        }; \n        //this.getAllEmployee();\n        this.getAllEmployee();\n        this.getSackedEmployee();\n    }\n\n    handleFilterByName(event){\n        filterName = event.target.value;\n    }\n\n    addEmployee () {\n        this.props.changeAddEmployeeStatus();\n    }\n\n    // Dữ liệu mà Tài sẽ trả về khi get, còn khi post, delete, put thì chỉ trả về email với token thôi\n\n    sampleData = {\n        email: \"\",\n        token: \"\",\n        employees: [\n            {\n                _id: {\n                    employeeID: \"0\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n                managerID: \"19522006@gm.uit.edu.vn\",\n                password: \"abc123\",\n                firstName: \"Antonio\",\n                lastName: \"Rudiger\",\n                phoneNumber: \"03232323232\",\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\n                email: \"1912@gmail.com\",\n                address: \"Wherever\",\n                cardID: \"2511098589\",\n                startDate: \"2021-11-02T00:00:00.000Z\",\n                endDate: \"\",\n            },\n            {\n                _id: {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n                managerID: \"19522006@gm.uit.edu.vn\",\n                password: \"abc123\",\n                firstName: \"Antonio\",\n                lastName: \"Rudiger\",\n                phoneNumber: \"03232323232\",\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\n                email: \"1911@gmail.com\",\n                address: \"Wherever\",\n                cardID: \"25110985819\",\n                startDate: \"2021-11-02T00:00:00.000Z\",\n                endDate: \"2021-11-31T00:00:00.000Z\",\n            }\n        ]\n    }\n    // Lấy danh sách các nhân viên\n    async getAllEmployee () {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/employee/`, {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                // console.log(err);\n                alert(err)\n            })\n        listUsers = [];\n        for(var i = 0; i < result.length; i++)\n        {\n            listUsers.push(result[i]);\n        }\n        // Thêm vào cái redux\n        this.props.getEmployee(listUsers);\n        console.log(\"listUsers\", listUsers);\n        this.setState({change: !this.state.change});\n    }\n    // Thêm nhân viên\n    addEmployeeToDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n                managerID: \"19522006@gm.uit.edu.vn\",\n                password: \"abc123\",\n                firstName: \"Antonio\",\n                lastName: \"Rudiger\",\n                phoneNumber: \"03232323232\",\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\n                email: \"1911@gmail.com\",\n                address: \"Wherever\",\n                cardID: \"25110985819\",\n                startDate: \"2021-11-02T00:00:00.000Z\",\n                endDate: \"2021-11-31T00:00:00.000Z\",\n            }   \n        }\n        axios.post(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Save success\");\n                alert(\"Lưu thành công\")\n            })\n            .catch(err => {\n                alert(err);\n                console.log(err);\n            })\n    }\n    // Xoá nhân viên\n    deleteEmployeeFromDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee:\n            [\n                {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\", \n                },\n            ]\n            \n        }\n        axios.delete(`http://localhost:5000/api/employee`,{data: data})\n            .then(res => {\n                alert(\"delete employee(s) success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n    }\n    // Sửa nhân viên\n    updateEmployee()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n                managerID: \"19522006@gm.uit.edu.vn\",\n                password: \"abc123\",\n                firstName: \"Antonio\",\n                lastName: \"Rudiger Christensen\",\n                phoneNumber: \"03232323232\",\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\n                email: \"1911@gmail.com\",\n                address: \"Wherever\",\n                cardID: \"25110985819\",\n                startDate: \"2021-11-02T00:00:00.000Z\",\n                endDate: \"2021-11-31T00:00:00.000Z\",\n            }\n        }\n        axios.put(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Update success\");\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }\n\n    async getSackedEmployee () {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/employee/delete`, {\n            params: {...data}\n        })\n            .then(res => {\n                // alert(\"Lấy hết đc product ròi anh chai\");\n                result = res.data.data;\n                console.log(res.data.data);\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err)\n            })\n        this.props.getSackedEmployee(result);\n        console.log(\"sacked reducer\", this.props.listSackedEmployee)\n        this.setState({change: !this.state.change});\n    }\n\n    backToWork() {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee:\n            [\n                {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\", \n                },\n            ]\n            \n        }\n        axios.patch(`http://localhost:5000/api/employee/delete`, data)\n            .then(res => {\n                alert(\"back to work success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n    }\n\n    // Xoá nhân viên hoàn toàn\n    deleteEmployeePermantlyFromDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee:\n            [\n                {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\", \n                },\n            ]\n            \n        }\n        axios.delete(`http://localhost:5000/api/employee/delete`,{data: data})\n            .then(res => {\n                alert(\"delete permantly employee(s) success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div\n                style={{display: 'block', overflowY: 'auto', height: '100vh'}}\n            >\n                <div>\n                    <Button\n                        onClick={() => {this.getAllEmployee()}}\n                        variant=\"contained\"\n                    >\n                        Get Employee\n                    </Button>\n                    {/* <Button\n                        onClick={() => this.addEmployeeToDatabase()}\n                        variant=\"contained\"\n                    >\n                        Add Employee\n                    </Button>\n                    <Button\n                        onClick={() => this.updateEmployee()}\n                        variant=\"contained\"\n                    >\n                        Update Employee\n                    </Button>\n                    <Button\n                        onClick={() => this.deleteEmployeeFromDatabase()}\n                        variant=\"contained\"\n                    >\n                        Delete Employee\n                    </Button> */}\n                    <Button\n                        onClick={() => this.getSackedEmployee()}\n                        variant=\"contained\"\n                    >\n                        Get Sacked Employee\n                    </Button>\n                    {/* <Button\n                        onClick={() => this.backToWork()}\n                        variant=\"contained\"\n                    >\n                        Back To Work\n                    </Button>\n                    <Button\n                        onClick={() => this.deleteEmployeePermantlyFromDatabase()}\n                        variant=\"contained\"\n                    >\n                        Delete Permantly\n                    </Button> */}\n                </div>\n                <Container\n                    style={{marginTop: 20, }}\n                >\n                    <span\n                        style = {{\n                            color: \"#fff\",\n                            padding: 12,\n                            border: '1px solid cyan',\n                            backgroundColor: '#222'\n                        }}\n                    >\n                        Current Employee\n                    </span>\n                    <Button\n                        variant='contained'\n                        startIcon={<Icon icon={plusFill} />}\n                        onClick={() => this.addEmployee()}\n                    >\n                        New User\n                    </Button>\n\n                    <Card>\n                    {/* <EmployeeToolbar\n                        numSelected={selected.length}\n                        filterName={filterName}\n                        // onFilterName={this.handleFilterByName(event)}\n                    /> */}\n                    <TableContainer style ={{maxHeight:'500px',overflowY: 'scroll'}}>\n                        <Table>\n                            <EmployeeTableHeader\n                                // order={order}\n                                // orderBy={orderBy}\n                                headLabel={TABLE_HEAD}\n                                rowCount={USERLIST.length}\n                                numSelected={selected.length}\n                                // onRequestSort={handleRequestSort}\n                                // onSelectAllClick={handleSelectAllClick}\n                            />\n                            <TableBody\n                                style={{height: '100%', width: '100%'}}\n                            >\n                            {\n                                this.props.listEmployee.employees.map((row) => {\n                                return (\n                                    <TableRow\n                                        hover\n                                        // key={id}\n                                        tabIndex={-1}\n                                        role=\"checkbox\"\n                                        // selected={isItemSelected}\n                                        // aria-checked={isItemSelected}\n                                    >\n                                        <TableCell padding=\"checkbox\">\n                                            <Checkbox\n                                            // checked={isItemSelected}\n                                            // onChange={(event) => handleClick(event, name)}\n                                            />\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">\n                                            {row._id.employeeID}\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} component=\"th\" scope=\"row\" padding=\"none\">\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n                                            {/* <Avatar alt={row.firstName} src={avatarUrl} /> */}\n                                            <Typography variant=\"subtitle2\" noWrap>\n                                                {row.firstName}\n                                            </Typography>\n                                            </Stack>\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.lastName}</TableCell>  \n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.dateOfBirth.substring(0,row.dateOfBirth.indexOf('T'))}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{\"gender\"}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{\"province\"}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.phoneNumber}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.email}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.address}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"right\">\n                                            <EmployeeMoreMenu\n                                                data={row._id.employeeID}    \n                                            >\n                                            </EmployeeMoreMenu>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n\n                    {/* <TablePagination\n                        rowsPerPageOptions={[5, 10, 25]}\n                        component=\"div\"\n                        count={USERLIST.length}\n                        // rowsPerPage={rowsPerPage}\n                        // page={page}\n                        // onPageChange={handleChangePage}\n                        // onRowsPerPageChange={handleChangeRowsPerPage}\n                    /> */}\n                    </Card>\n                </Container>\n                <FixedCalendar/>\n                <UnShiftEmployee/>\n                <Container\n                    style={{marginTop: 20, }}\n                >\n                    <span\n                        style = {{\n                            color: \"#fff\",\n                            padding: 12,\n                            border: '1px solid red',\n                            backgroundColor: 'red'\n                        }}\n                    >\n                        Sacked Employee\n                    </span>\n\n                    <Card>\n                    {/* <EmployeeToolbar\n                        numSelected={selected.length}\n                        filterName={filterName}\n                        // onFilterName={this.handleFilterByName(event)}\n                    /> */}\n                    <TableContainer style ={{maxHeight:'500px',overflowY: 'scroll'}}>\n                        <Table>\n                            <EmployeeTableHeader\n                                // order={order}\n                                // orderBy={orderBy}\n                                headLabel={TABLE_HEAD}\n                                rowCount={USERLIST.length}\n                                numSelected={selected.length}\n                                // onRequestSort={handleRequestSort}\n                                // onSelectAllClick={handleSelectAllClick}\n                            />\n                            <TableBody\n                                style={{height: '100%', width: '100%'}}\n                            >\n                            {\n                                this.props.listSackedEmployee.employees.map((row) => {\n                                return (\n                                    <TableRow\n                                        hover\n                                        // key={id}\n                                        tabIndex={-1}\n                                        role=\"checkbox\"\n                                        // selected={isItemSelected}\n                                        // aria-checked={isItemSelected}\n                                    >\n                                        <TableCell className = {classes.goodTable_Cell} padding=\"checkbox\">\n                                            <Checkbox\n                                            // checked={isItemSelected}\n                                            // onChange={(event) => handleClick(event, name)}\n                                            />\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">\n                                            {row._id.employeeID}\n                                        </TableCell>\n                                        <TableCell component=\"th\" scope=\"row\" padding=\"none\">\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n                                            {/* <Avatar alt={row.firstName} src={avatarUrl} /> */}\n                                            <Typography variant=\"subtitle2\" noWrap>\n                                                {row.firstName}\n                                            </Typography>\n                                            </Stack>\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.lastName}</TableCell>  \n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.dateOfBirth.substring(0,row.dateOfBirth.indexOf('T'))}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{\"gender\"}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{\"province\"}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.phoneNumber}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.email}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.address}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"right\">\n                                            <SackedEmployeeMenu\n                                                data={row._id.employeeID}    \n                                            >\n                                            </SackedEmployeeMenu>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n\n                    {/* <TablePagination\n                        rowsPerPageOptions={[5, 10, 25]}\n                        component=\"div\"\n                        count={USERLIST.length}\n                        // rowsPerPage={rowsPerPage}\n                        // page={page}\n                        // onPageChange={handleChangePage}\n                        // onRowsPerPageChange={handleChangeRowsPerPage}\n                    /> */}\n                    </Card>\n                </Container>\n                {/* Đây là phần modal */}\n                {this.props.addEmployeeStatus ? (\n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeAddEmployeeStatus();}} className=\"modal-overlay\"></div>\n                        <AddEmployeeModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </AddEmployeeModal>\n                    </div>\n                ): null}\n                {this.props.updateEmployeeStatus ? (\n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeUpdateEmployeeStatus();}} \n                            className=\"moFixedCalendar\"\n                        />\n                        <UpdateEmployeeModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </UpdateEmployeeModal>\n                    </div>\n                ): null}\n                {this.props.payEmployeeStatus ? (\n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changePayEmployeeStatus();}} className=\"modal-overlay\"></div>\n                        <PayMoneyModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </PayMoneyModal>\n                    </div>\n                ): null}\n\n            </div>\n            \n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\n        payEmployeeStatus: state.payEmployeeStatus,\n        infoUser: state.infoUser,\n        listEmployee: state.listEmployee,\n        listSackedEmployee: state.listSackedEmployee,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\n            });\n        },\n        changeUpdateEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\n            });\n        },\n        changePayEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        getSackedEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE_SACKED\",\n                employees: data,\n            });\n        }\n\n    }\n}\nexport default connect(mapStateToProps , mapDispatchToProps)((withStyles(styles, {withTheme: true}))(EmployeeManager));\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/Profile.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/DashBoard.js",["487"],"import React, { Component } from 'react';\nimport '../../css/Dashboard.css'\nimport { Container, Grid } from '@mui/material';\nimport { Typography } from '@mui/material';\nimport { DiApple } from 'react-icons/di'\nimport StaticDateRangePickerDemo from './Calendar'\nimport AppWebsiteVisits from './Statistic';\nimport SplitButton from './GroupButton';\nimport FullCalendar from '@fullcalendar/react' // must go before plugins\nimport dayGridPlugin from '@fullcalendar/daygrid' // a plugin!\nimport interactionPlugin from \"@fullcalendar/interaction\" // needed for dayClick\n\n\nclass DashBoard extends Component {\n\n    renderEventContent = (eventInfo) => {\n        return (\n            <>\n                <b>{eventInfo.timeText}</b>\n                <i>{eventInfo.event.title}</i>\n            </>\n        )\n    }\n\n    componentWillMount() {\n        document.title = 'DashBoard'\n    }\n\n    render() {\n        return (\n            <div className=\"dashboard\" style={{ overflow: 'scroll', overflowX: 'hidden', height: '100vh' }}>\n                <Container style={{ marginTop: '40px' }} maxWidth=\"xl\">\n                    <Grid container spacing={3}>\n                        <Grid className=\"dashboard-item\" item md={3} sm={12} >\n                            <div className=\"dashboard-css\">\n                                <div className=\"dashboard-item-img\" style={{ marginBottom: '30px' }}>\n                                    <DiApple className=\"dashboard-item-icon\"></DiApple>\n                                </div>\n                                <Typography style={{ marginBottom: '10px' }} variant=\"h4\">256</Typography>\n                                <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\n                                    Total money\n                                </Typography>\n                            </div>\n                        </Grid>\n                        <Grid className=\"dashboard-item\" item md={3} sm={12} >\n                            <div className=\"dashboard-css sold-good\">\n                                <div className=\"dashboard-item-img sold-good\" style={{ marginBottom: '30px' }}>\n                                    <DiApple className=\"dashboard-item-icon sold-good\"></DiApple>\n                                </div>\n                                <Typography style={{ marginBottom: '10px' }} variant=\"h4\">256</Typography>\n                                <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\n                                    Sold good\n                                </Typography>\n                            </div>\n                        </Grid>\n                        <Grid className=\"dashboard-item\" item md={3} sm={12} >\n                            <div className=\"dashboard-css imported-good\">\n                                <div className=\"dashboard-item-img imported-good\" style={{ marginBottom: '30px' }}>\n                                    <DiApple className=\"dashboard-item-icon imported-good\"></DiApple>\n                                </div>\n                                <Typography style={{ marginBottom: '10px' }} variant=\"h4\">256</Typography>\n                                <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\n                                    Imported good\n                                </Typography>\n                            </div>\n                        </Grid>\n                        <Grid className=\"dashboard-item\" item md={3} sm={12} >\n                            <div className=\"dashboard-css error-receipt\">\n                                <div className=\"dashboard-item-img error-receipt\" style={{ marginBottom: '30px' }}>\n                                    <DiApple className=\"dashboard-item-icon error-receipt\"></DiApple>\n                                </div>\n                                <Typography style={{ marginBottom: '10px' }} variant=\"h4\">256</Typography>\n                                <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\n                                    Error receipt\n                                </Typography>\n                            </div>\n                        </Grid>\n                        <Grid className=\"dashboard-item\" item md={12} sm={12} >\n                            <div style={{ borderRadius: '20px' }}>\n                                <StaticDateRangePickerDemo></StaticDateRangePickerDemo>\n                            </div>\n                        </Grid>\n                        <Grid className=\"dashboard-item\" item md={12} sm={12} >\n                            <div style={{ borderRadius: '20px' }}>\n                                <FullCalendar\n                                    plugins={[ dayGridPlugin, interactionPlugin ]}\n                                    initialView=\"dayGridMonth\"\n                                    weekends={true}\n                                    events={[\n                                        { title: 'event 1', date: '2021-10-18' },\n                                        { title: 'event 2', date: '2021-10-18' }\n                                    ]}\n                                />\n                            </div>\n                        </Grid>\n                        <Grid className=\"dashboard-item\" item md={12} sm={12} >\n                            <AppWebsiteVisits></AppWebsiteVisits>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default DashBoard;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodManager.js",["488"],"import { Component } from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport GoodTable from './GoodPartials/GoodTable';\nimport { NavLink } from 'react-router-dom';\nimport Button from '@mui/material/Button';\nimport SearchBar from './GoodPartials/SearchBar';\nimport {connect} from 'react-redux'\nimport AddTypeModal from './GoodPartials/AddTypeModal';\nimport '../css/GoodManager.css';\nimport ConfirmModal from './GoodPartials/ConfirmModal';\nimport UpdateGoodModal from './GoodPartials/UpdateGoodModal';\nimport EditTypeModal from './GoodPartials/EditTypeModal';\n\nclass GoodManager extends Component {\n    \n    handleAdd() {\n        this.props.changeAddTypeStatus();\n        this.props.setAddTypeStatus();\n    }\n    handleConfirm(){\n        this.props.changeConfirmStatus();\n        this.props.unsetDelete();\n    }\n    handleConfirmDelete(){\n        this.props.changeConfirmStatus();\n        this.props.setDeleteConfirm();\n    }\n    handleUpdateGood() {\n        this.props.changeUpdateGoodStatus();\n    }\n    handleEditType() {\n        this.props.changeEditTypeStatus();\n    }\n    render() {\n        return (\n            <div>\n                <div style={{height: '100%', width: '100%', marginTop: '40px', marginBottom: '40px', paddingBottom: '40px' }}>\n                    <div style={{display: 'flex'}}>\n                        <Button variant=\"contained\">\n                            <NavLink style={{color: '#fff', textDecoration: 'none'}} to=\"/goodmanager/import\">Import</NavLink>\n                        </Button>\n                        <SearchBar style={{height: '120px'}}/>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleAdd()} variant=\"contained\">\n                            add type\n                        </Button>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleEditType()} variant=\"contained\">\n                            edit type\n                        </Button>\n                        {/* <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleConfirmDelete()} variant=\"contained\">\n                            Delete\n                        </Button>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleConfirm()} variant=\"contained\">\n                            Edit\n                        </Button>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleUpdateGood()} variant=\"contained\">\n                            Update Good\n                        </Button> */}\n\n                     </div>\n\n                    <GoodTable />\n\n                    {/* Đây là phần modal */}\n                    {this.props.addTypeStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\n                            <AddTypeModal></AddTypeModal>\n                        </div>\n                    ): null}\n                    {this.props.confirmStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\n                            <ConfirmModal></ConfirmModal>\n                        </div>\n                    ): null}\n                    {this.props.updateGoodStatus ? (\n                        <div \n                            className=\"modal-add\"\n                        >\n                            <div onClick={() => {this.props.changeUpdateGoodStatus();}} className=\"modal-overlay\"></div>\n                            <UpdateGoodModal\n                                style={{\n                                    marginTop: 0\n                                }}\n                            >\n                            </UpdateGoodModal>\n                        </div>\n                    ): null}\n                     {this.props.editTypeStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeEditTypeStatus();}} className=\"modal-overlay\"></div>\n                            <EditTypeModal></EditTypeModal>\n                        </div>\n                    ): null}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        confirmStatus: state.confirmStatus,\n        deleteStatus: state.deleteStatus,\n        updateGoodStatus: state.updateGoodStatus,\n        editTypeStatus: state.editTypeStatus,\n        isAddTypeStatus: state.isAddTypeStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        unsetDelete: () => {\n            dispatch({\n                type: \"UNSET_DELETE_STATUS\",\n            })\n        },\n        changeUpdateGoodStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\n            })\n        },\n        changeEditTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\n            })\n        },\n        setAddTypeStatus: () => {\n            dispatch({\n                type: \"SET_ADD_TYPE_STATUS\",\n            });\n        },\n        setDeleteConfirm: () => {\n            dispatch({\n                type: \"SET_CONFIRM_DELETE_GOOD\",\n            }); \n        },\n        \n    }\n}\nexport default connect(mapStateToProps , mapDispatchToProps)(GoodManager);\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/GoodImport.js",["489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505","506","507"],"import React, { Component } from 'react';\nimport { TextField } from '@mui/material';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport { InputLabel, Button, Modal, Grid, Card, CardHeader} from '@mui/material';\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { connect } from 'react-redux';\nimport GoodImage from '../../img/good-example.jpg';\nimport AddTypeModal from './AddTypeModal';\nimport { withStyles } from '@material-ui/styles';\nimport { AiFillPlusCircle} from \"react-icons/ai\";\nimport DateTimePicker from '@mui/lab/DateTimePicker';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport ConfirmModal from './ConfirmModal';\nimport { GiConsoleController } from 'react-icons/gi';\nimport {\n    Link\n} from \"react-router-dom\";\n// Use for save type\nvar productTypes =[];\nvar listTypeInfor = [];\n\nvar listProductInfor = [];\n\n// Use for choose type:\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nclass GoodImport extends Component {\n    imgUrl= 'none';\n    dateTime= Date.now();\n    currentDateTime = '2021-01-02';\n    finishUpImage = true;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            imageSelect: \"null\",\n            type:'none',\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\n            change: false,\n        }; \n        this.loadAllType(); \n        this.loadAllGood();\n\n        this.currentDateTime = this.getCurrentDateTime();\n        console.log(\"this.currentDateTime\",this.currentDateTime);\n        typeSet = [];\n    }\n    \n    getCurrentDateTime()\n    {\n        var day = new Date().getDay().toString();\n        if(day.length<2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    handleAdd(){\n        this.props.changeAddTypeStatus();\n        this.props.setAddTypeStatus();\n    }\n    \n    async profileImageChange(fileChangeEvent) {\n        this.setState({\n            imageSelect: fileChangeEvent.target.files[0],\n        })\n        this.finishUpImage = false;\n        const file = fileChangeEvent.target.files[0];\n        const { type } = file;\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\n        } else {\n            const formData = new FormData();\n            formData.append(\"file\", fileChangeEvent.target.files[0])\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\n            await axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\n                .then(res => {\n                    this.imgUrl=res.data.url;\n                    this.setState({\n                        change: 'true'\n                    });\n                })\n                .catch(err => {\n                    console.log(\"Thất bại\");\n                })\n        }\n        this.finishUpImage = true;\n    }\n\n    async importGood(e) {\n        // Ngăn chuyển trang\n        var isContinue = this.checkConstraint();\n        if(!isContinue)\n        {\n            e.preventDefault();\n            return;\n        }\n        // Thêm hàng hoá\n        const data = {\n            token: localStorage.getItem('token'),\n            product: {\n                _id: {\n                    productID: this.generatedID,\n                    importDate: document.querySelector('input[name=\"importDate\"]').value,\n                    storeID: this.props.infoUser.email,\n                },\n                name: document.querySelector('input[name=\"goodName\"]').value,\n                quantity: document.querySelector('input[name=\"goodQuantity\"]').value,\n                remain: document.querySelector('input[name=\"goodQuantity\"]').value,\n                importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\n                sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\n                imgUrl: this.imgUrl,\n                unit: document.querySelector('input[name=\"unit\"]').value,\n            }   \n        }\n        console.log(data);\n\n        axios.post(`http://localhost:5000/api/product`, data)\n            .then(res => {\n                console.log(\"Save success\");\n                alert(\"Lưu thành công\")\n            })\n            .catch(err => {\n                alert(err);\n                console.log(err);\n            })\n\n        //Thêm vào bảng joinType nữa\n\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\n        for(var i = 0 ; i < typeSet.length ; i++)\n        {\n            const data1 = {\n                token: localStorage.getItem('token'),\n                productJoinType: {\n                    _id : {\n                        productID: this.generatedID,\n                        typeID: typeSet[i], \n                        importDate: document.querySelector('input[name=\"importDate\"]').value,\n                        storeID: this.props.infoUser.email,\n                    }\n                }\n            }\n            axios.post(`http://localhost:5000/api/product/join`, data1)\n                .then(res => {\n                    console.log(\"lưu vô bảng join thành công\");\n                })\n                .catch(err => {\n                    console.log(err);\n                })\n        }\n        \n\n        // console.log(data);\n    }\n    \n    checkConstraint = () => {\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\n        // Constraint 1: Check name\n        var productName =  document.querySelector('input[name=\"goodName\"]').value;\n        if(productName.length == 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Tên sản phẩm không được trống\",\"warning\");\n            return false;\n        }\n        // Constraint 2: Check quantity\n        if(document.querySelector('input[name=\"goodQuantity\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value) <= 0) \n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\n            alert('Số lượng sản phẩm phải lớn hơn 0');\n            return false;\n        }\n        // Constraint 3: check Unit\n        if(document.querySelector('input[name=\"unit\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\n            alert('Đơn vị của sản phẩm không được trống');\n            return false;\n        }\n        // Constraint 4: Check import Price\n        if(document.querySelector('input[name=\"originalPrice\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Giá nhập không được trống\",\"warning\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <= 0) \n        {\n            this.props.hideAlert();\n            this.props.showAlert('Giá nhập phải lớn hơn 0',\"warning\");\n            return false;\n        }\n        // Constraint 5: check sell Price\n        if(document.querySelector('input[name=\"sellPrice\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Giá bán không được trống\",\"warning\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"sellPrice\"]').value) <= 0) \n        {\n            this.props.hideAlert();\n            this.props.showAlert('Giá bán phải lớn hơn 0',\"warning\");\n            return false;\n        }\n        // Constraint 6: Ngày nhập phải nhỏ  hơn ngày hết hạn\n        if (\n            (\n                new Date(document.querySelector('input[name=\"importDate\"]').value).getTime()\n                - \n                new Date(document.querySelector('input[name=\"expiredDate\"]').value).getTime()\n            ) >= 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert('Không thể nhập hàng hết hạn',\"warning\");\n            return false;\n        }\n        // Constraint 7: Check giá gốc nhỏ hơn giá bán\n        if(\n            parseInt(document.querySelector('input[name=\"sellPrice\"]').value) \n            - \n            parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <=0\n            ) \n        {\n            this.props.hideAlert();\n            this.props.showAlert('Giá bán phải lớn hơn giá gốc',\"warning\");\n            return false;\n        }\n        // Constraint 8: check xem đã  up ảnh lên xong chưa\n        if(this.finishUpImage == false)\n        {\n            this.props.hideAlert();\n            this.props.showAlert('Ảnh chưa được upload xong',\"warning\");\n            return false;\n        }\n        return true;\n    }\n\n    async loadAllType() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        //Get data và lưu các tên Type vào bảng\n        listTypeInfor=[];\n        for(var i=0; i < result.length ; i++)\n        {\n            listTypeInfor.push(result[i]);\n        }\n        productTypes=[];\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\n        {\n            productTypes.push(listTypeInfor[i].name);\n        }\n        this.setState({change: true});\n    }\n\n    async loadAllGood() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/`, {\n            params: {...data}\n        })\n            .then(res => {\n                // alert(\"Lấy hết đc product ròi anh chai\");\n                result = res.data.data;\n                console.log(res.data.data);\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err)\n            })\n        // Get data và lưu các tên Type vào dữ liệU\n        //Get data và lưu các tên Type vào bảng\n        listProductInfor=[];\n        for(var i=0; i < result.length ; i++)\n        {\n            listProductInfor.push(result[i]);\n        }\n        if(listProductInfor.length>0)\n        {\n            this.generatedID = parseInt(listProductInfor[listProductInfor.length-1]._id.productID) + 1;\n        } \n        else this.generatedID = 0;\n        this.setState({change: false});\n    }\n\n    generatedID = 0;\n\n    getTypeNamebyTypeID (typeID) {\n        var typeName='';\n        for(var i = 0; i<listTypeInfor.length;i++)\n        {   \n            if(listTypeInfor[i]._id.typeID == typeID)\n            {\n                typeName = listTypeInfor[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    foundTypeInSet(typeID) {\n        for(var i = 0 ; i < typeSet.length; i++)\n        {\n            if(typeSet[i]==typeID._id.typeID) return true;\n        }\n        return false;\n    }\n    render() {\n        \n        return(\n            <div \n                style={{ \n                    display: 'block', height: \"900px\", overflowY: 'auto ', backgroundColor: 'rgb(221,235,255)'   \n                }}\n            >   \n                <div className=\"good-import-header\"></div>\n                <Grid className=\"import-container\" style={{height: '79vh', overflowY: 'scroll'}} container spacing={2}>\n                    <Grid item md={3}  \n                        style={{\n                            display: 'flex', \n                            justifyContent:'center', \n                            flexDirection:'column',\n                            alignItems:'center',\n                            paddingLeft: '30px'\n                        }}\n                    >   \n                        <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden', marginTop: '15px ' }}>\n                            <Image style={{width: '240px',height: '240px', padding: '10px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                        </label>\n                        {/* Ẩn đi */}\n                        <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                    </Grid>\n                    <Grid item md={9}>\n\n                        <Card \n                            style={{\n                                marginRight: '18px',\n                            }}\n                        >\n                            <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"ADD GOOD\" />\n                            <Grid container md={12}>\n                                <Grid item md={6} \n                                    className='input-item'\n                                >\n                                    <div \n                                        className=\"input-label\"\n                                        style={{\n                                            width: '130px'\n                                        }}\n                                    >\n                                        ID\n                                    </div>\n                                    <StyledTextField\n                                        classname='input-box' \n                                        type=\"text\" \n                                        // class=\"input-val\" \n                                        style = {{width: '60%'}} \n                                        fullWidth \n                                        size=\"small\" \n                                        name=\"goodID\" \n                                        variant=\"outlined\"\n                                        value={this.generatedID}\n                                        readOnly={true}\n                                        disabled={true}\n                                    />\n                                </Grid>\n                                <Grid item md={6} \n                                    className='input-item'\n                                    style={{\n                                        marginLeft: 0,\n                                        paddingLeft: 0,\n                                    }}\n                                >\n                                    <div className=\"input-label\" style={{width: 110}}>Import Date</div>\n                                    <StyledTextField\n                                        classname='input-box'   \n                                        type=\"date\" \n                                        style = {{width: '68%'}} \n                                        fullWidth\n                                        name=\"importDate\"\n                                        size=\"small\"\n                                        variant=\"outlined\"\n                                        defaultValue={this.currentDateTime}\n                                    />\n                                </Grid>\n                                \n                                <Grid item md={6} \n                                    className='input-item'\n                                >\n                                    <div className=\"input-label\"style={{width: '130px'}}>Name</div>\n                                    <StyledTextField\n                                        classname='input-box'   \n                                        type=\"text\" \n                                        // class=\"input-val\" \n                                        style = {{width: '60%'}} \n                                        fullWidth\n                                        size=\"small\"\n                                        name=\"goodName\" \n                                        variant=\"outlined\" \n                                    />\n                                </Grid>\n                                <Grid item md={4}\n                                    className='input-item'\n                                    style={{padding: '0px', marginLeft: '0px'}}\n                                >\n                                    <div \n                                        className=\"input-label\" \n                                        style={{width: '120px'}}\n                                    >\n                                        Quantity\n                                    </div>\n                                    <StyledTextField\n                                        style = {{width: '60%'}} \n                                        fullWidth\n                                        name=\"goodQuantity\" \n                                        variant=\"outlined\"\n                                        type=\"number\"\n                                    />\n                                </Grid>\n                                <Grid item md={2}\n                                    className='input-item'\n                                    style={{\n                                        paddingRight: 12\n                                    }}\n                                >\n                                    <div \n                                        className=\"input-label\"\n                                        style={{\n                                            marginLeft: 0,\n                                            paddingLeft: 4,\n                                            width: 40\n                                        }}\n                                    >\n                                        Unit\n                                    </div>\n                                    <StyledTextField\n                                        classname='input-box'\n                                        style = {{width: '100%', marginLeft: '4px'}} \n                                        fullWidth\n                                        variant=\"outlined\"\n                                        type=\"text\" \n                                        name=\"unit\" \n                                    />\n                                </Grid>\n                                <Grid item md={6}\n                                    className='input-item'\n                                >\n                                    <div className=\"input-label\" style={{width: 128}}>Original Price</div>\n                                    <StyledTextField\n                                        classname='input-box'\n                                        style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \n                                        fullWidth\n                                        name=\"originalPrice\" \n                                        variant=\"outlined\"\n                                        type=\"number\" \n                                    />\n                                    đ\n                                </Grid>\n                                <Grid item md={6}\n                                    className='input-item'\n                                    style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\n                                >\n                                    <div \n                                        className=\"input-label\"\n                                        style={{width: '130px'}}\n                                    >\n                                        Sell Price\n                                    </div>\n                                    <StyledTextField\n                                        classname='input-box'\n                                        style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \n                                        fullWidth\n                                        name=\"sellPrice\" \n                                        variant=\"outlined\"\n                                        type=\"number\" \n                                    />\n                                    đ\n                                </Grid>\n                                <Grid item md={7} \n                                    className='input-item'\n                                >\n                                    <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\n                                    <StyledTextField\n                                        classname='input-box'   \n                                        type=\"date\" \n                                        style = {{width: '70%'}} \n                                        fullWidth\n                                        size=\"small\"\n                                        name=\"expiredDate\" \n                                        variant=\"outlined\"\n                                        defaultValue={this.currentDateTime}\n                                    />\n                                </Grid>\n                                <Grid item md={10}\n                                    className='input-item'\n                                >\n                                    <div \n                                        className=\"input-label\"\n                                        style={{width:132}}\n                                    >\n                                        Product Type\n                                    </div>\n                                    <FormControl sx={{ minWidth: 120 }}>\n                                        {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                        <Select\n                                            value={this.state.type}\n                                            onChange={(event) => {\n                                                this.setState({type: event.target.value});\n                                                if(!typeSet.includes(event.target.value))\n                                                {\n                                                    typeSet.push(event.target.value);\n                                                }\n                                                this.setState({change: !this.state.change})\n                                            }}\n                                            style={{\n                                                height: 36,\n                                            }}\n                                        >\n                                            {\n                                                listTypeInfor.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\n                                                : listTypeInfor.map((type) =>\n                                                    ! this.foundTypeInSet(type) \n                                                    ? <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\n                                                    : null\n                                                )\n                                            }   \n                                        </Select> \n                                    </FormControl>\n                                    <Button onClick={() => this.handleAdd()}>\n                                        <AiFillPlusCircle\n                                            size={28}\n                                            style={{\n                                                fontSize: 28,\n                                                margin: 0,\n                                                padding: 0,\n                                                width: 28,\n                                                height: 28\n                                            }}    \n                                        />\n                                    </Button>\n                                    <div className='all-type-container'>\n                                        {\n                                            Array.from(typeSet).map((type) =>\n                                                <div className='type-container'>\n                                                    \n                                                    <CancelIcon\n                                                        className='close-icon'\n                                                        size={10}\n                                                        onClick={() => {\n                                                            typeSet = typeSet.filter(function(item) {\n                                                                return item != type;\n                                                            })\n                                                            console.log(typeSet);\n                                                            this.setState({type: 'none'});\n                                                        }}\n                                            \n                                                    />\n                                                    <span className='type-title'>\n                                                        {this.getTypeNamebyTypeID(type)}\n                                                    </span>\n                                                </div>\n                                                \n                                            )\n                                        }\n                                    </div>\n                                </Grid>\n                                {/* <Grid item md={10}\n                                    className='input-item'\n                                >\n\n                                </Grid> */}\n                                <Grid item md={2}\n                                    className='input-item'\n                                >\n                                    <Link to=\"/goodmanager\" className=\"btn btn-primary\" onClick={(e) => this.importGood(e)}>\n                                        IMPORT\n                                    </Link>\n                                </Grid>\n                            </Grid>\n                        </Card>\n                    </Grid>\n                    <Grid item sm={12} md={12} >\n                        \n                    </Grid>\n                </Grid> \n                    \n                {this.props.addTypeStatus ? (\n                    <div className=\"modal-add\">\n                        <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\n                        <AddTypeModal></AddTypeModal>\n                    </div>\n                ): null}\n                {this.props.confirmStatus ? (\n                    <div className=\"modal-add\">\n                        <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\n                        <ConfirmModal></ConfirmModal>\n                    </div>\n                ): null}\n            </div>\n        );        \n    }\n}\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        infoUser: state.infoUser,\n        isAddTypeStatus: state.isAddTypeStatus,\n        confirmStatus: state.confirmStatus\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        updateAvatar: (avatar) => {\n            dispatch({\n                type: \"UPDATE_AVATAR\",\n                avatar: avatar\n            })\n        },\n        setAddTypeStatus: () => {\n            dispatch({\n                type: \"SET_ADD_TYPE_STATUS\",\n            });\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        setConfirm: () => {\n            dispatch({\n                type: \"SET_CONFIRM_IMPORT_GOOD\",\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GoodImport);\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/SellProduct.js",["508"],"import React, { Component } from 'react';\nimport { Container, Grid, Button, CardActionArea, CardActions, CardMedia } from '@mui/material';\nimport '../../css/SellProduct.css'\nimport Tabs from './Tabs'\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport exampleImg from '../../img/good-example.jpg'\nimport { BiPlusMedical } from 'react-icons/bi';\nimport { connect } from 'react-redux'\nimport axios from 'axios';\nimport ShoppingBags from './ShoppingBags';\nimport Printf from './Print'\nimport HistoryReciept from './HistoryReciept';\n\nclass SellProduct extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            change: false,\n            test1: true,\n        }\n        this.loadAllType();\n        this.loadAllGood();\n    }\n\n    bull = (\n        <Box\n            component=\"span\"\n            sx={{ display: 'inline-block', mx: '2px', transform: 'scale(0.8)' }}\n        >\n            •\n        </Box>\n    );\n\n    AddProduct = (value) => {\n        var isCheck = false;\n        var currentQuantity;\n        var maxQuantity;\n        this.props.shoppingBags.map(value1 => {\n            if (value1.product.name === value.name) {\n                isCheck = true;\n                currentQuantity = value1.quantity\n                maxQuantity = value.quantity\n            } \n            return value;\n        })\n        if (isCheck) {\n            if (currentQuantity < maxQuantity) {\n                this.props.raiseQuantity(value.name);\n            }\n        } else {\n            const newProduct = {\n                product: value,\n                quantity: 1,\n            }\n            this.props.addNewProductToShoppingBags(newProduct);\n        }\n\n    }\n\n    async loadAllType() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }\n        }\n\n        await axios.get(`http://localhost:5000/api/product/type`,\n            {\n                params: { ...data }\n            })\n            .then(res => {\n                result = res.data.data;\n                localStorage.getItem('token', res.data.token);\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        //Get data và lưu các tên Type vào bảng\n        var listTypeInfor = [];\n        for (var i = 0; i < result.length; i++) {\n            listTypeInfor.push(result[i]);\n        }\n        this.props.getTypeToReducer(listTypeInfor);\n        this.setState({ change: !this.state.change });\n    }\n\n    async loadAllGood() {\n        var resultProduct = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }\n        }\n        await axios.get(`http://localhost:5000/api/product/`, {\n            params: { ...data }\n        })\n            .then(res => {\n                resultProduct = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err)\n            })\n        // Get hết từ cái productjoinType\n        var result = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, {\n            params: { ...data1 }\n        })\n            .then(res => {\n                result = res.data.data;\n                localStorage.getItem('token', res.data.token);\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err)\n            })\n        // Lấy các cái jointype\n        var joinTypeInfor = [];\n        for (let i = 0; i < result.length; i++) {\n            joinTypeInfor.push(result[i]);\n        }\n        console.log(\"joinTypeInfor\", joinTypeInfor);\n\n        var listProductInfor = [];\n        for (let i = 0; i < resultProduct.length; i++) {\n            var typeIDList = [];\n            for (var j = 0; j < joinTypeInfor.length; j++) {\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) {\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\n                }\n            }\n\n            listProductInfor.push(\n                {\n                    ...resultProduct[i],\n                    typeIDList: typeIDList\n                });\n        }\n\n        console.log(\"listProductInfor: \", listProductInfor);\n        this.props.getProductToReducer(listProductInfor);\n        this.setState({ change: !this.state.change });\n    }\n\n    \n\n    render() {\n        console.log(\"ĐÃ reset\");\n        return (\n            <div className=\"sell-product\" >\n                <Container maxWidth=\"xl\">\n                    <Grid container spacing={2}>\n                        <Grid item md={8} sm={12}  >\n                            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', borderRadius: '8px', marginTop: '20px', backgroundColor: '#ffffff', height: 'calc(100vh - 40px)', overflow: 'hidden' }}>\n                                <div style={{ overflow: 'hidden', marginBottom: '5px' }}>\n                                    <Tabs></Tabs>\n                                </div>\n                                <Container id=\"choses-product\" style={{ height: '94%', overflowY: 'scroll' }} maxWidth=\"xl\">\n                                    <Grid container spacing={2}>\n                                        {this.props.listProduct.state\n                                            ? this.props.listProduct.state.filter(value => {\n                                                if (this.props.chooseTypeProductID === 'all') {\n                                                    return value;\n                                                }\n                                                if (value.typeIDList.includes(this.props.chooseTypeProductID)) {\n                                                    return value;\n                                                }\n                                            }).map(value => (\n                                                <Grid item md={3} sm={3}>\n                                                    <Card onClick={() => this.AddProduct(value)}>\n                                                        <CardActionArea>\n                                                            {\n                                                                value.imgUrl === \"none\"\n                                                                    ? <CardMedia\n                                                                        component=\"img\"\n                                                                        height=\"140\"\n                                                                        image={exampleImg}\n                                                                        alt=\"green iguana\"\n                                                                    />\n\n                                                                    : <CardMedia\n                                                                        component=\"img\"\n                                                                        height=\"140\"\n                                                                        image={value.imgUrl}\n                                                                        alt=\"green iguana\"\n                                                                    />\n                                                            }\n                                                            <CardContent style={{ padding: '5px' }}>\n                                                                <Typography style={{ textAlign: 'center' }} gutterBottom variant=\"h6\" component=\"div\">\n                                                                    {value.name}\n                                                                </Typography>\n                                                            </CardContent>\n                                                        </CardActionArea>\n                                                        <CardActions style={{ justifyContent: 'center' }}>\n                                                            <Button style={{ color: 'green', fontWeight: '700' }} endIcon={<BiPlusMedical></BiPlusMedical>} size=\"medium\" color=\"primary\">\n                                                                {value.sellPrice}\n                                                            </Button>\n                                                        </CardActions>\n                                                    </Card>\n                                                </Grid>\n                                            )) : (null)}\n                                    </Grid>\n                                </Container>\n                            </div>\n                        </Grid>\n                        <Grid item md={4} lg={4} >\n                            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', borderRadius: '8px', marginTop: '20px', backgroundColor: '#ffffff', height: 'calc(100vh - 40px)', overflow: 'hidden', overflowX: 'hidden' }}>\n                                <div id=\"choses-product\" style={{ backgroundColor: '#ebebeb', height: '60%', margin: '10px', overflowY: 'scroll', overflowX: 'hidden' }} >\n                                    <Grid sty container spacing={0}>\n                                        {/* Table */}\n                                        <Grid item className=\"customizeTable\" style={{ backgroundColor: 'rgba(20,20,20,0.4)', alignContent: 'center', justifyContent: 'center', borderBottom: '2px solic black' }} md={12} sm={12}>\n                                            <Grid style={{ textAlign: 'center', alignItems: 'center', justifyItems: 'center', fontWeight: 'bold' }} container spacing={0}>\n                                                <Grid item md={1} sm={1}>\n                                                    #\n                                                </Grid>\n                                                <Grid item md={1} sm={1}>\n\n                                                </Grid>\n                                                <Grid item md={4} sm={4}>\n                                                    Name\n                                                </Grid>\n                                                <Grid item md={3} sm={3}>\n                                                    Quantity\n                                                </Grid>\n                                                <Grid style={{ fontWeight: '700' }} item md={3} sm={3}>\n                                                    Giá\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        {/* Bắt đầu hóa đơn */}\n                                        <ShoppingBags></ShoppingBags>\n                                    </Grid>\n                                </div>\n                                <div style={{ height: '40%' }}>\n                                    <Printf ></Printf>\n                                </div>\n                            </div>\n                        </Grid>\n                    </Grid>\n                </Container>\n                {this.props.statusShowHistoryReciept ? (\n                    <HistoryReciept></HistoryReciept>\n                ) : null}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        listProduct: state.listProduct,\n        chooseTypeProductID: state.chooseTypeProduct,\n        infoUser: state.infoUser,\n        shoppingBags: state.shoppingBags,\n        statusShowHistoryReciept: state.statusShowHistoryReciept,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_STATUS\",\n            });\n        },\n        getTypeToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_TYPE\",\n                data: data\n            });\n        },\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n        addNewProductToShoppingBags: (newProduct) => {\n            dispatch({\n                type: \"ADD_NEW_PRODUCT_SHOPPING_BAGS\",\n                newProduct: newProduct,\n            })\n        },\n        raiseQuantity: (name) => {\n            dispatch({\n                type: \"RAISE_QUANTITY_SHOPPING_BAGS\",\n                name: name,\n            })\n        }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SellProduct);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/PayMoneyModal.js",["509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528","529"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport DatePicker from '@mui/lab/DatePicker';\nimport DateTimePicker from '@mui/lab/DateTimePicker';\nimport { AiFillPlusCircle} from \"react-icons/ai\";\nimport CancelIcon from '@mui/icons-material/Cancel';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nclass PayEmployeeModal extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            goodID : \"\",\n            change: false,\n            imageSelect: \"null\",\n            type:'none',\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\n        }; \n    }\n    \n\n    cancel = () => {\n        this.props.changeAddEmployeeStatus();\n    }\n\n    addEmployee = () => {\n        this.props.changeAddEmployeeStatus();\n    }\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"PAY EMPLOYEE\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                marginTop: '0px'\n                            }}\n                        >   \n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            {/* Ẩn đi */}\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                        </Grid>\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            ID\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\" \n                                            readOnly={true}\n                                            disabled={true}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>Old</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Gender</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Province</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '100%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.props.changePayEmployeeStatus()}>\n                                            Pay employee\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changePayEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\n            });\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PayEmployeeModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateEmployeeModal.js",["530","531","532","533","534"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nclass UpdateEmployeeModal extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n        }; \n        this.loadInitialData();\n    }\n    \n\n    cancel = () => {\n        \n    }\n\n    updateEmployee = () => {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: this.id,\n                    storeID: this.props.infoUser.email,\n                },\n                managerID: this.props.infoUser.email,\n                password: document.querySelector('input[name=\"password\"]').value,\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\n                email: document.querySelector('input[name=\"email\"]').value,\n                address: document.querySelector('input[name=\"adress\"]').value,\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\n            }   \n        }\n        console.log(data);\n        axios.put(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Update success\");\n            })\n            .catch(err => {\n                console.log(err);\n            })\n        this.props.changeUpdateEmployeeStatus();\n    }\n\n    id = \"\";\n    password = \"\";\n    firstName = \"\";\n    lastName = \"\";\n    cardID = \"\";\n    phoneNumber = \"\";\n    address = \"\";\n    email = \"\";\n    startDate = \"\";\n    birthDay = \"\";\n\n\n    loadInitialData() {\n        var currentEmployee = this.props.currentEditEmployee.state;\n        console.log(\"currentEmployee\", currentEmployee);\n        this.id = currentEmployee._id.employeeID;\n        this.password = currentEmployee.password;\n        this.firstName = currentEmployee.firstName;\n        this.lastName = currentEmployee.lastName;\n        this.cardID = currentEmployee.cardID;\n        this.phoneNumber = currentEmployee.phoneNumber;\n        this.address = currentEmployee.address;\n        this.email = currentEmployee.email;\n        this.startDate = currentEmployee.startDate;\n        if(this.startDate!=null)\n        {\n            this.startDate = this.startDate.substring(0, this.startDate.indexOf('T'));\n        }\n        this.birthDay = currentEmployee.dateOfBirth;\n        if(this.birthDay!=null)\n        {\n            this.birthDay = this.birthDay.substring(0, this.birthDay.indexOf('T'));\n        }\n        this.setState({change: !this.state.change})\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"UPDATE EMPLOYEE\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                marginTop: '0px'\n                            }}\n                        >   \n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            {/* Ẩn đi */}\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                        </Grid>\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                               <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            ID\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            value={this.id}\n                                            readOnly={true}\n                                            disabled={true}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>Password</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"password\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.password}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"firstName\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.firstName}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"lastName\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.lastName}\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"cardID\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.cardID}\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"phoneNumber\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.phoneNumber}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Adress</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"adress\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.address}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>StartDate</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\"\n                                            name=\"startDate\"\n                                            style = {{width: '100%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.startDate}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"email\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.email}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\" \n                                            // class=\"input-val\"\n                                            name=\"birthDay\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.birthDay}\n                                        />\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.updateEmployee()}>\n                                            UPDATE\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        currentEditEmployee: state.currentEditEmployee,\n        infoUser: state.infoUser\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\n            });\n        },\n        changeUpdateEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\n            });\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateEmployeeModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddEmployeeModal.js",["535","536","537","538","539","540","541"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nvar listUsers = [];\n\nclass AddEmployeeModal extends Component {\n\n    genID = 0;\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n        };\n        listUsers = [];\n        this.getAllEmployee(); \n    }\n\n    async getAllEmployee () {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/employee/`, {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                // console.log(err);\n                alert(err)\n            })\n        listUsers = [];\n        for(var i = 0; i < result.length; i++)\n        {\n            listUsers.push(result[i]);\n        }\n        this.props.getEmployee(listUsers);\n        if(listUsers.length > 0)\n        {\n            this.genID = parseInt(listUsers[listUsers.length - 1]._id.employeeID) + 1;\n            console.log(this.genID);\n        }\n        this.setState({change: !this.state.change});\n    }\n\n    // Thêm nhân viên\n    async addEmployeeToDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: document.querySelector('input[name=\"ID\"]').value,\n                    storeID: this.props.infoUser.email,\n                },\n                managerID: this.props.infoUser.email,\n                password: document.querySelector('input[name=\"password\"]').value,\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\n                email: document.querySelector('input[name=\"email\"]').value,\n                address: document.querySelector('input[name=\"adress\"]').value,\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\n                // endDate: \"2021-11-31T00:00:00.000Z\",\n            }   \n        }\n        console.log(data);\n        await axios.post(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Save success\");\n                alert(\"Lưu thành công\")\n            })\n            .catch(err => {\n                alert(err);\n                console.log(err);\n            })\n    }\n\n    cancel = () => {\n        this.props.changeAddEmployeeStatus();\n    }\n\n    addEmployee = () => {\n        this.addEmployeeToDatabase();\n        this.props.changeAddEmployeeStatus();\n    }\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"ADD EMPLOYEE\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                marginTop: '0px'\n                            }}\n                        >   \n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            {/* Ẩn đi */}\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                        </Grid>\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            ID\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            name='ID'\n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            defaultValue={\"None\"}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>Password</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"password\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"firstName\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"lastName\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"cardID\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"phoneNumber\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Adress</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"adress\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>StartDate</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\"\n                                            name=\"startDate\"\n                                            style = {{width: '100%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"email\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\" \n                                            // class=\"input-val\"\n                                            name=\"birthDay\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.addEmployee()}>\n                                            Add\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEmployeeModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/GroupButton.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/Statistic.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/Print.js",["542","543","544"],"import React from 'react';\nimport ReactToPrint from 'react-to-print';\nimport { connect } from 'react-redux';\nimport ComponentToPrint from './ComponentToPrint';\nimport axios from 'axios';\n\n\nclass Printf extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      percentDiscount: 0,\n      infoReciept: [],\n      date: new Date(),\n      MAHD: \"HD\" + this.makeCode(6),\n    }\n  }\n\n  blurDiscount = (e) => {\n    if (e.target.value <= 100 && e.target.value >= 0) {\n      this.setState({\n        percentDiscount: e.target.value,\n      })\n    } else if (e.target.value < 0) {\n      this.setState({\n        percentDiscount: 0,\n      })\n    } else {\n      this.setState({\n        percentDiscount: 100,\n      })\n    }\n  }\n\n  changeDiscount = (e) => {\n    this.setState({\n      percentDiscount: e.target.value,\n    })\n  }\n\n  totalMoney = () => {\n    let total = 0;\n    this.props.shoppingBags.map(value => {\n      total += value.quantity * value.product.sellPrice;\n    })\n    return total.toLocaleString();\n  }\n\n  reduceMoney = () => {\n    let total = 0;\n    this.props.shoppingBags.map(value => {\n      total += value.quantity * value.product.sellPrice;\n    })\n    if (total !== 0) {\n      total = total * this.state.percentDiscount / 100\n      return total.toLocaleString();\n    }\n    return total.toLocaleString();\n  }\n\n  totalFinalMoney = () => {\n    let total = 0;\n    this.props.shoppingBags.map(value => {\n      total += value.quantity * value.product.sellPrice;\n    })\n    if (total !== 0) {\n      total -= total * this.state.percentDiscount / 100\n      return total.toLocaleString();\n    }\n    return total.toLocaleString();\n  }\n\n  makeCode = (length) => {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() *\n        charactersLength));\n    }\n    return result;\n  }\n\n  code = ''\n\n  addReciept = async () => {\n    if (this.props.shoppingBags.length === 0) {\n      this.props.hideAlert()\n      this.props.showAlert(\"Cart empty \", \"warning\")\n    } else {\n      this.code = this.makeCode(8)\n      const data = {\n        MAHD: this.code,\n        name: this.props.infoUser.lastName + \" \" + this.props.infoUser.firstName,\n        date: this.dateFunction(),\n        discount: this.state.percentDiscount,\n        totalMoney: this.totalMoney(),\n        totalFinalMoney: this.totalFinalMoney(),\n        listProduct: this.props.shoppingBags,\n        time: this.state.date.getHours() + \":\" + this.state.date.getMinutes(),\n        isEdit: false,\n        oldBill: this.props.statusEditInfoBill ? this.props.InfomationBillEdit : null,\n      }\n      axios.post('http://localhost:5000/api/sell-product/add-reciept', {\n        email: this.props.infoUser.email,\n        token: localStorage.getItem('token'),\n        data: data,\n      })\n        .then(res => {\n          console.log('Thành công!')\n        })\n        .catch(err => {\n          console.log('Thất bại!')\n        })\n      if (this.props.statusEditInfoBill) {\n        this.props.changeStatusEditRecipt()\n      }\n      this.setState({\n        infoReciept: this.props.shoppingBags,\n      })\n      this.props.hideAlert()\n      this.props.showAlert(\"In bill success\", \"success\")\n      this.props.resetShoppingBag();\n      this.props.addRecieptToHistory(data);\n    }\n\n  }\n\n  dateFunction = () => {\n    let month = this.state.date.getMonth() + 1;\n    return \"  \" + this.state.date.getDate() + \" / \" + month + \" / \" + this.state.date.getFullYear()\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{ margin: '0px' }} className=\"row\">\n          <div className=\"col-10 offset-1\">\n            <div className=\"row\">\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\n                <p style={{}}>Total</p>\n              </div>\n              <div className=\"col-5\">\n                <p style={{ textAlign: 'end', marginBottom: '0', fontSize: '1.2rem' }}>{this.totalMoney()}</p>\n              </div>\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\n                <p>Discount (%)</p>\n              </div>\n              <div style={{ marginBottom: '10px' }} className=\"col-5\">\n                <input value={this.state.percentDiscount} onChange={(e) => this.changeDiscount(e)} onBlur={(e) => this.blurDiscount(e)} style={{ fontSize: '1.2rem', border: 'none', outline: 'none', textAlign: 'end', width: '100%', borderBottom: '1px solid black' }} min={0} max={100} type=\"number\"></input>\n              </div>\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\n                <p style={{}}>Reduce</p>\n              </div>\n              <div className=\"col-5\">\n                <p style={{ textAlign: 'end', marginBottom: '0', fontSize: '1.2rem' }}>-{this.reduceMoney()}</p>\n              </div>\n              <div className=\"col-7\">\n                <p style={{ margin: '0', fontSize: '1.2rem', fontWeight: '700' }}>TOTAL FINAL</p>\n              </div>\n              <div className=\"col-5\">\n                <p style={{ margin: '0', fontSize: '1.2rem', textAlign: 'end', color: 'green', fontWeight: '700' }}>{this.totalFinalMoney()}</p>\n              </div>\n            </div>\n          </div>\n          <div onClick={() => this.addReciept()} style={{ cursor: 'pointer' }} className=\"col-12\">\n            <ReactToPrint\n              trigger={() => {\n\n                return <div style={{ marginTop: '10px', borderRadius: '4px', fontWeight: '600', backgroundColor: '#37c737', textAlign: 'center', alignContent: 'center', padding: '15px 0', fontSize: '1.4rem' }}>\n                  PAY (F9)\n                </div>;\n              }}\n              content={this.props.shoppingBags.length !== 0 ? () => this.componentRef : null}\n            />\n          </div>\n          <div className=\"col-12\">\n            <p onClick={() => this.props.changeStatusHistoryReciept()} style={{ cursor: 'pointer' }}>(*) Receipt history</p>\n          </div>\n        </div>\n\n        {/* Ẩn đi */}\n        <div style={{ display: 'none' }}>\n          <ComponentToPrint MAHD={this.code} percentDiscount={this.state.percentDiscount} infoUser={this.props.infoUser} shoppingBags={this.state.infoReciept} ref={el => (this.componentRef = el)} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    infoUser: state.infoUser,\n    shoppingBags: state.shoppingBags,\n    statusEditInfoBill: state.statusEditInfoBill,\n    InfomationBillEdit: state.InfomationBillEdit,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    changeStatusHistoryReciept: () => {\n      dispatch({\n        type: \"CHANGE_HISTORY_RECIEPT_STATUS\",\n      });\n    },\n    addRecieptToHistory: (data) => {\n      dispatch({\n        type: \"ADD_RECIEPT\",\n        newReciept: data,\n      });\n    },\n    showAlert: (message, typeMessage) => {\n      dispatch({\n        type: \"SHOW_ALERT\",\n        message: message,\n        typeMessage: typeMessage,\n      })\n    },\n    hideAlert: () => {\n      dispatch({\n        type: \"HIDE_ALERT\",\n      })\n    },\n    resetShoppingBag: () => {\n      dispatch({\n        type: \"RESET_SHOPPING_BAGS\"\n      })\n    },\n    changeStatusEditRecipt: () => {\n      dispatch({\n        type: \"CHANGE_EDIT_INFOMATION_STATUS\"\n      })\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Printf)","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/ShoppingBags.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/EditTypeModal.js",["545","546","547","548"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit} from 'react-icons/bi';\nimport { TiDelete } from \"react-icons/ti\";\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport axios from 'axios';\nimport AddTypeModal from './AddTypeModal';\n\nvar productTypes =[];\nvar listTypeInfor = [];\n\nclass EditTypeModal extends Component {\n    constructor(props) {\n        super(props);\n        this.loadAllType();\n        this.state = {\n            change: false\n        }\n    }\n    confirm = () => {\n        // Thực hiện các lệnh xử lý tại đây\n        this.props.changeConfirmStatus();\n    }\n    cancel = () => {\n        // this.props.changeConfirmStatus();\n        this.props.changeEditTypeStatus();\n    }\n    edit = (type) => {\n        this.props.changeAddTypeStatus();\n        this.props.setEditTypeStatus();\n        this.props.typeToUpdate(type);\n        this.props.changeEditTypeStatus();\n    }\n    async delete(type){\n        const data = {\n            token: localStorage.getItem('token'),\n            productTypes:\n            [\n                {\n                    typeID: type._id.typeID,\n                    storeID: type._id.storeID\n                }\n            ]\n                \n        }\n        await axios.delete(`http://localhost:5000/api/product/type`,{data: data})\n            .then(res => {\n                console.log(\"delete success\");\n            })\n            .catch(err => {\n                alert(err);\n                // alert(\"Lỗi gì cmnr\")\n            })\n        // Ở đây mình phải cập nhật join nữa\n        // Phải get tất cả cái join mà có cái type là type hiện tại\n        var allJoinMatch = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n                \"_id.typeID\": type._id.typeID,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, \n        {\n            params: {...data1}\n        })\n            .then(res => {\n                allJoinMatch = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n\n        var allProductJoin = [];\n        for(var i = 0 ; i < allJoinMatch.length; i++)\n        {\n            allProductJoin.push({\n                productID: allJoinMatch[i]._id.productID,\n                typeID: type._id.typeID,\n                importDate: allJoinMatch[i]._id.importDate,\n                storeID: this.props.infoUser.email,\n                \n            });\n        }\n        \n        const dataJoin = {\n            token: localStorage.getItem('token'),\n            productJoinTypes: allProductJoin,      \n        }\n\n        console.log(dataJoin);\n\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\n            .then(res => {\n                console.log(\"delete join success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n\n        this.loadAllType();\n        this.setState({change: !this.state.change})\n    }\n    \n\n\n    async loadAllType() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err); // 401 ở đây\n            })\n        //Get data và lưu các tên Type vào bảng\n        listTypeInfor=[];\n        for(var i=0; i < result.length ; i++)\n        {\n            listTypeInfor.push(result[i]);\n        }\n        productTypes=[];\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\n        {\n            productTypes.push(listTypeInfor[i].name);\n        }\n        this.setState({change: true});\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"All Good Type\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <Grid container item md={12} xs={12} spacing={0}>\n                                { listTypeInfor.map((type) => (\n                                    <Grid item md={3} style={{border:'1px solid #333', padding: 4}}>\n                                        <span>{type.name}</span>\n                                        <BiEdit onClick={() => this.edit(type)}/>\n                                        <TiDelete onClick={() => this.delete(type)}/>\n                                    </Grid>\n                                ))}\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <Stack spacing={3}>\n                                   \n                                </Stack>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\n                            Thoát\n                        </Button>\n                    </Box>\n                </Card>\n                {/* {this.props.addTypeStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\n                            <AddTypeModal></AddTypeModal>\n                        </div>\n                    ): null} */}\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        editTypeStatus: state.editTypeStatus,\n        addTypeStatus: state.addTypeStatus,\n        isAddTypeStatus: state.isAddTypeStatus,\n        infoUser: state.infoUser,\n        typeProductValue: state.typeProductValue,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeEditTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\n            });\n        },\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        setEditTypeStatus: () => {\n            dispatch({\n                type: \"SET_EDIT_TYPE_STATUS\",\n            })\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        typeToUpdate: (data) => {\n            dispatch({\n                type: \"UPDATE_PRODUCT_TYPE\",\n                _id: {\n                    typeID: data._id.typeID,\n                    storeID: data._id.storeID,\n                },\n                name: data.name\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTypeModal);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/BaseOptionChart.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/ComponentToPrint.js",["549","550","551"],"import React from 'react';\n\n\n\nclass ComponentToPrint extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            date: new Date(),\n        }\n    }\n\n    minute = 1000 * 60;\n    hour = this.minute * 60;\n    day = this.hour * 24;\n    year = this.day * 365;\n\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    totalMoney = () => {\n        let total = 0;\n        this.props.shoppingBags.map(value => {\n            total += value.quantity * value.product.sellPrice;\n        })\n        return total.toLocaleString();\n    }\n\n    reduceTotalMoney = () => {\n        let total = 0;\n        this.props.shoppingBags.map(value => {\n            total += value.quantity * value.product.sellPrice;\n        })\n        if (total !== 0) {\n            total = total*this.props.percentDiscount/100\n        }\n        return total.toLocaleString()\n    }\n\n    finalTotalMoney = () => {\n        let total = 0;\n        this.props.shoppingBags.map(value => {\n            total += value.quantity * value.product.sellPrice;\n        })\n        if (total !== 0 && this.props.percentDiscount !== 0) {\n            total -= total*this.props.percentDiscount/100\n        }\n        return total.toLocaleString();\n    }\n\n    dateFunction = () => {\n        let month = this.state.date.getMonth()+1;\n        return \"  \" + this.state.date.getDate() + \" / \" + month + \" / \" + this.state.date.getFullYear()\n    }\n\n    render() {\n        \n        return (\n            <div className=\"row\">\n                {this.reduceTotalMoney()}\n                <div className=\"col-12\">\n                    <h1 style={{ textAlign: 'center' }}>{this.props.infoUser.storeName}</h1>\n                </div>\n                <div style={{ borderBottom: '1px solid #00000059' }} className=\"col-12\">\n                    <p style={{ textAlign: 'center', marginBottom: '0' }}>{this.props.infoUser.address}</p>\n                    <p style={{ textAlign: 'center' }}>{this.props.infoUser.district + ' ' + this.props.infoUser.province}</p>\n                    <p style={{ textAlign: 'center' }}>{\"SĐT: \" + this.props.infoUser.tel}</p>\n                </div>\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\n                    <h4 style={{ textAlign: 'center' }}>HÓA ĐƠN THANH TOÁN</h4>\n                </div>\n                <div className=\"col-12\">\n                    <p style={{ textAlign: 'center', fontWeight: '400' }}>Số HĐ: {this.props.MAHD}</p>\n                    <div style={{ margin: '0 5px' }} className=\"row\">\n                        <div className=\"col-6\">\n                            <p style={{ fontWeight: '700' }}>Date:\n                                <span style={{ fontWeight: '400' }}>\n                                    {this.dateFunction()}\n                                </span>\n                            </p>\n                        </div>\n                        <div className=\"col-6\">\n                            <p style={{ fontWeight: '700' }}>Time:\n                                <span style={{ fontWeight: '400' }}>\n                                    {\"  \" + this.state.date.getHours() + \":\" + this.state.date.getMinutes()}\n                                </span>\n                            </p>\n                        </div>\n                    </div>\n                    <p style={{ fontWeight: '700', margin: '0 17px' }}>\n                        Cashier:\n                        <span style={{ fontWeight: '400' }}>\n                            {\"  Admin\"}\n                        </span>\n                    </p>\n                </div>\n                <table style={{ margin: '0 10px' }} class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Name</th>\n                            <th scope=\"col\">Quantity</th>\n                            <th scope=\"col\">Price</th>\n                            <th scope=\"col\">Total money</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.shoppingBags ? this.props.shoppingBags.map((value, key) => (\n                            <tr>\n                                <td>{key + 1}</td>\n                                <td>{value.product.name}</td>\n                                <td>{value.quantity}</td>\n                                <td>{value.product.sellPrice}</td>\n                                <td>{value.quantity * value.product.sellPrice}</td>\n                            </tr>\n                        ))\n                            : 'Không có gì'}\n\n                    </tbody>\n                </table>\n                <div style={{marginTop: '20px'}} className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-6\">\n                            <h6 style={{ textAlign: 'end' }}>Total :</h6>\n                        </div>\n                        <div className=\"col-6\">\n                            <h6 style={{ textAlign: 'start' }}>{this.totalMoney()}đ</h6>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-6\">\n                            <h6 style={{ textAlign: 'end' }}>Discount :</h6>\n                        </div>\n                        <div className=\"col-6\">\n                            <h6 style={{ textAlign: 'start' }}>-{this.reduceTotalMoney()}đ</h6>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-6\">\n                            <h5 style={{ textAlign: 'end' }}>TOTAL FINAL :</h5>\n                        </div>\n                        <div className=\"col-6\">\n                            <h5 style={{ textAlign: 'start' }}>{this.finalTotalMoney()}đ</h5>\n                        </div>\n                    </div>\n                </div>\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\n                    <h6 style={{ textAlign: 'center',fontStyle: 'italic ' }}>Xin cảm ơn quý khách</h6>\n                    <h6 style={{ textAlign: 'center',fontStyle: 'italic ' }}>hẹn gặp lại!</h6>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ComponentToPrint;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/AddTypeModal.js",["552","553","554","555","556","557","558","559"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Alert } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel, GiVampireCape } from 'react-icons/gi'\nimport axios from 'axios';\n\nvar listTypeInfor = [];\n\nclass AddTypeModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state= {\n            change: 'false'\n        }\n        this.loadInitialData();\n        this.getAllTypeList();\n    }\n    storeID = \"\";\n    typeList = [];\n\n    async getAllTypeList(){\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        console.log(data.token);\n        // alert(data.token);\n        console.log(data.filter);\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                alert(err);\n            })\n        //Get data và lưu các tên Type vào bảng\n        for(var i=0; i < result.length ; i++)\n        {\n            listTypeInfor.push(result[i]);\n        }\n    }\n    addType = () => {\n        var newTypeName = document.querySelector('input[name=\"typeName\"]').value.trim();\n        if(this.checkConstraint(newTypeName)==false)  return;\n        var genTypeID = 0;\n        if(listTypeInfor.length>0)\n        {\n            genTypeID = parseInt(listTypeInfor[listTypeInfor.length-1]._id.typeID) + 1;\n        } \n        const data = {\n            token: localStorage.getItem('token'),\n            productType: {\n                _id:{\n                    typeID: genTypeID,\n                    storeID: this.props.infoUser.email,\n                },\n                name: newTypeName,\n            }    \n        }\n        axios.post(`http://localhost:5000/api/product/type`, data)\n            .then(res => {\n                alert(\"Save success\");\n                //TODO: Cập nhật token ở đây nữa\n            })\n            .catch(err => {\n                alert(err);\n            })\n        this.props.changeAddTypeStatus();\n    }\n    \n    checkConstraint(typeName) {\n        //Constraint 1: Check name\n        for(var i=0;i<listTypeInfor.length;i++)\n        {\n            if(listTypeInfor[i].name==typeName)\n            {\n                if(!this.props.isAddTypeStatus && typeName.trim()==this.props.typeProductValue.name)\n                {\n                    alert(\"Không đổi tên à anh zai\");\n                    return false;\n                }\n                alert(\"Trùng tên rồi anh chai\");\n                return false;\n            }\n            \n        }        \n        // Constraint 2: Not blank\n        if(typeName.length==0)\n        {\n            alert(\"Không nhập gì à anh chai\")\n            return false;\n        }\n        return true;\n\n    }\n    cancel = () => {\n        this.props.changeAddTypeStatus();\n    }\n\n    handle = () => {\n        if (this.props.isAddTypeStatus)\n            this.addType();\n        else \n            this.editType();\n    }\n\n    editType = () => {\n        var newTypeName = this.typeName;\n        if(this.checkConstraint(newTypeName)==false) return;\n        const data = {\n            token: localStorage.getItem('token'),\n            productType: {\n                _id: {\n                    typeID: this.props.typeProductValue._id.typeID,\n                    storeID: this.props.infoUser.email,\n                }, \n                name: newTypeName,\n            }\n        }\n        // alert(data.product.name)\n        axios.put(`http://localhost:5000/api/product/type`, data)\n            .then(res => {\n                // Có khi mình sẽ cập nhật type ở dây\n                console.log(\"Update success\");\n                alert('update được rồi anh trai')\n            })\n            .catch(err => {\n                console.log(err);\n                alert(\"Lỗi gì cmnr\")\n            })\n        this.props.changeAddTypeStatus();\n        this.props.changeEditTypeStatus();\n    }\n    typeName = \"\";\n    loadInitialData = () => {\n        if (this.props.isAddTypeStatus) {\n            \n        }\n        else\n        {\n            this.typeName = this.props.typeProductValue.name;\n            this.setState({change: true});\n        } \n    }\n\n    changeTypeName(e)\n    {\n        this.typeName = e.target.value;\n    }\n    render() {\n        return (\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader \n                        style={{ color: 'blue', backgroundColor: '#efeeef', textAlign: 'center' }} \n                        title={this.props.isAddTypeStatus? \"Add Type\" : \"Edit Type\"}\n                        />\n                    <Divider />\n                    <CardContent>\n                        <Grid \n                            container \n                            spacing={2}\n                            justifyContent={'center'}\n                            alignItems={'center'}\n                        >\n                            <Grid item md={2} xs={12}>\n                                TypeName\n                            </Grid>\n                            <Grid item md={10} xs={12}>\n                                <TextField\n                                    id=\"outlined-basic\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    required\n                                    type=\"text\"\n                                    name=\"typeName\"\n                                    defaultValue={this.typeName}\n                                    onChange={(e) => this.changeTypeName(e)}\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <Stack spacing={3}>\n                                   \n                                </Stack>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        <Button \n                            style={{ backgroundColor: 'yellowgreen' }} \n                            // onClick={() => this.addShift()} \n                            onClick={() => this.handle()}\n                            variant=\"contained\" \n                            startIcon={<BiPlusMedical />}\n                        >\n                            Xác nhận\n                        </Button>\n                        <Button \n                            style={{ backgroundColor: 'red' }} \n                            // onClick={() => this.editShift()}\n                            onClick={() => this.cancel()}\n                            variant=\"contained\" \n                            startIcon={<GiCancel />}\n                        >\n                            Cancel\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        isAddTypeStatus: state.isAddTypeStatus,\n        infoUser: state.infoUser,\n        typeProductValue: state.typeProductValue\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeEditTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\n            });\n        },\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTypeModal);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/Tabs.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/ConfirmModal.js",["560","561","562","563","564","565"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport axios from 'axios';\n\nclass ConfirmModal extends Component {\n    constructor(props) {\n        super(props);\n    }\n    confirm = () => {\n        // Thực hiện các lệnh xử lý tại đây\n        this.props.changeConfirmStatus();\n        this.props.setConfirm();\n    }\n\n    cancel = () => {\n        this.props.changeConfirmStatus();\n        this.props.setQuit();\n    }\n\n    getMessage = ()  => {\n        var message = \"Cái này chưa code\";\n        switch(this.props.confirmCode)\n        {\n            case 'confirm-delete-good':\n                message = \"Are you sure to delete this product ?\";\n            case 'confirm-import-good':\n                message = \"Are you sure to import this product ?\";\n        }\n        return (\n            <div>\n                {message}\n            </div>\n        );\n    }\n    render() {\n        console.log(this.props.objectEditShift);\n        return (\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <Grid item md={12} xs={12}>\n                                {this.getMessage()}\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <Stack spacing={3}>\n                                   \n                                </Stack>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.confirm()} variant=\"contained\" startIcon={<BiPlusMedical />}>\n                            Xác nhận\n                        </Button>\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\n                            Hủy\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        confirmStatus: state.confirmStatus,\n        deleteStatus: state.deleteStatus,\n        confirmCode: state.confirmCode,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        setConfirm: () => {\n            dispatch({\n                type: \"CONFIRM\",\n            });\n        },\n        setQuit: () => {\n            dispatch({\n                type: \"QUIT\",\n            });\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmModal);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/SearchBar.js",["566","567","568","569"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Input from \"@material-ui/core/Input\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { MdClear} from \"react-icons/md\";\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport { withStyles } from '@material-ui/styles';\nimport classNames from \"classnames\";\n\nconst styles = theme => ({\n  root: {\n    // height: theme.spacing(6),\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    height: \"80px\",\n  },\n//   iconButton: {\n//     color: theme.palette.action.active,\n//     transform: \"scale(1, 1)\",\n//     transition: theme.transitions.create([\"transform\", \"color\"], {\n//       duration: theme.transitions.duration.shorter,\n//       easing: theme.transitions.easing.easeInOut,\n//     }),\n//   },\n  iconButtonHidden: {\n    transform: \"scale(0, 0)\",\n    \"& > $icon\": {\n      opacity: 0,\n    },\n  },\n  searchIconButton: {\n    // marginRight: theme.spacing(-6),\n  },\n//   icon: {\n//     transition: theme.transitions.create([\"opacity\"], {\n//       duration: theme.transitions.duration.shorter,\n//       easing: theme.transitions.easing.easeInOut,\n//     }),\n//   },\n  input: {\n    width: \"100%\",\n  },\n  searchContainer: {\n    margin: \"4px 8px 4px 8px\",\n    height: \"40px\",\n    // width: `calc(100% - ${theme.spacing(6 + 4)}px)`, // 6 button + 4 margin\n  },\n});\nconst SearchBar = React.forwardRef(\n  (\n    {\n      cancelOnEscape,\n      className,\n      classes,\n      closeIcon,\n      disabled,\n      onCancelSearch,\n      onRequestSearch,\n      searchIcon,\n      style,\n      ...inputProps\n    },\n    ref\n  ) => {\n    const inputRef = React.useRef();\n    const [value, setValue] = React.useState(inputProps.value);\n\n    React.useEffect(() => {\n      setValue(inputProps.value);\n    }, [inputProps.value]);\n\n    const handleFocus = React.useCallback(\n      (e) => {\n        if (inputProps.onFocus) {\n          inputProps.onFocus(e);\n        }\n      },\n      [inputProps.onFocus]\n    );\n\n    const handleBlur = React.useCallback(\n      (e) => {\n        setValue((v) => v.trim());\n        if (inputProps.onBlur) {\n          inputProps.onBlur(e);\n        }\n      },\n      [inputProps.onBlur]\n    );\n\n    const handleInput = React.useCallback(\n      (e) => {\n        setValue(e.target.value);\n        if (inputProps.onChange) {\n          inputProps.onChange(e.target.value);\n        }\n      },\n      [inputProps.onChange]\n    );\n\n    const handleCancel = React.useCallback(() => {\n      setValue(\"\");\n      if (onCancelSearch) {\n        onCancelSearch();\n      }\n    }, [onCancelSearch]);\n\n    const handleRequestSearch = React.useCallback(() => {\n      if (onRequestSearch) {\n        onRequestSearch(value);\n      }\n    }, [onRequestSearch, value]);\n\n    const handleKeyUp = React.useCallback(\n      (e) => {\n        if (e.charCode === 13 || e.key === \"Enter\") {\n          handleRequestSearch();\n        } else if (\n          cancelOnEscape &&\n          (e.charCode === 27 || e.key === \"Escape\")\n        ) {\n          handleCancel();\n        }\n        if (inputProps.onKeyUp) {\n          inputProps.onKeyUp(e);\n        }\n      },\n      [handleRequestSearch, cancelOnEscape, handleCancel, inputProps.onKeyUp]\n    );\n\n    React.useImperativeHandle(ref, () => ({\n      focus: () => {\n        inputRef.current.focus();\n      },\n      blur: () => {\n        inputRef.current.blur();\n      },\n    }));\n\n    return (\n      <Paper className={classNames(classes.root, className)} style={{height: '40px'}}>\n        <div className={classes.searchContainer}>\n          <Input\n            {...inputProps}\n            inputRef={inputRef}\n            onBlur={handleBlur}\n            value={value}\n            onChange={handleInput}\n            onKeyUp={handleKeyUp}\n            onFocus={handleFocus}\n            fullWidth\n            className={classes.input}\n            disableUnderline\n            disabled={disabled}\n          />\n        </div>\n        <IconButton\n          onClick={handleRequestSearch}\n          className={classNames(classes.iconButton, classes.searchIconButton, {\n            [classes.iconButtonHidden]: value !== \"\",\n          })}\n          disabled={disabled}\n        >\n          {React.cloneElement(searchIcon, {\n            classes: { root: classes.icon },\n          })}\n        </IconButton>\n        <IconButton\n          onClick={handleCancel}\n          className={classNames(classes.iconButton, {\n            [classes.iconButtonHidden]: value === \"\",\n          })}\n          disabled={disabled}\n        >\n          {React.cloneElement(closeIcon, {\n            classes: { root: classes.icon },\n          })}\n        </IconButton>\n      </Paper>\n    );\n  }\n);\n\nSearchBar.defaultProps = {\n  className: \"\",\n  closeIcon: <MdClear/>,\n  disabled: false,\n  placeholder: \"Search\",\n  searchIcon: <AiOutlineSearch />,\n  style: null,\n  value: \"\",\n};\n\nSearchBar.propTypes = {\n  cancelOnEscape: PropTypes.bool,\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  closeIcon: PropTypes.node,\n  disabled: PropTypes.bool,\n  onCancelSearch: PropTypes.func,\n  onChange: PropTypes.func,\n  onRequestSearch: PropTypes.func,\n  placeholder: PropTypes.string,\n  searchIcon: PropTypes.node,\n  style: PropTypes.object,\n  value: PropTypes.string,\n};\n\nexport default withStyles(styles)(SearchBar);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/Calendar.js",["570","571","572"],"import * as React from 'react';\nimport TextField from '@mui/material/TextField';\nimport StaticDateRangePicker from '@mui/lab/StaticDateRangePicker';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport Box from '@mui/material/Box';\n\nexport default function StaticDateRangePickerDemo() {\n    const [value, setValue] = React.useState([new Date(2021, 2, 2), new Date(2021, 2, 5)]);\n    const [date, setDate] = React.useState(new Date(2021, 4, 2))\n\n    const value1 = [\n        { date: '2021/01/11', count:2 },\n        { date: '2021/04/12', count:2 },\n        { date: '2021/05/01', count:5 },\n        { date: '2021/05/02', count:5 },\n        { date: '2021/05/03', count:1 },\n        { date: '2021/05/04', count:11 },\n        { date: '2021/05/08', count:32 },\n      ];\n\n    return (\n        <LocalizationProvider dateAdapter={AdapterDateFns}>\n            <StaticDateRangePicker\n                displayStaticWrapperAs=\"desktop\"\n                value={value}\n                onChange={(date) => {\n                    setDate(date);\n                }}\n                renderInput={(startProps, endProps) => (\n                    <React.Fragment>\n                        <TextField {...startProps} />\n                        <Box sx={{ mx: 2 }}> to </Box>\n                        <TextField {...endProps} />\n                    </React.Fragment>\n                )}\n                calendars={4}\n                disableAutoMonthSwitching={true}\n            />\n        </LocalizationProvider>\n    );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/UpdateGoodModal.js",["573","574","575","576","577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595","596","597","598","599"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport GoodImage from './goodExample.jpg';\nimport AddTypeModal from './AddTypeModal';\nimport { withStyles } from '@material-ui/styles';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport DatePicker from '@mui/lab/DatePicker';\nimport DateTimePicker from '@mui/lab/DateTimePicker';\nimport { AiFillPlusCircle} from \"react-icons/ai\";\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport ConfirmModal from './ConfirmModal';\n\nvar productTypes =[];\nvar listTypeInfor=[];\n// typeSet chứa id của các cái type\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nclass UpdateGoodModal extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            goodID : \"\",\n            change: false,\n            imageSelect: \"null\",\n            type:'none',\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\n        }; \n        typeSet = [];\n        this.loadInitialData();\n        this.loadAllType();\n        this.loadCurrentTypes();\n        \n    }\n    imgUrl='none';\n    goodID='';\n    importDate='';\n    name='';\n    imgUrl='';\n    quantity = 0;\n    remain = 0;\n    unit = \"\";\n    importPrice = \"\";\n    sellPrice = \"\";\n    expire =\"\";\n    finishUpImage = true;\n\n    async loadAllType() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        //Get data và lưu các tên Type vào bảng\n        listTypeInfor=[];\n        for(var i=0; i < result.length ; i++)\n        {\n            listTypeInfor.push(result[i]);\n        }\n        productTypes=[];\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\n        {\n            productTypes.push(listTypeInfor[i].name);\n        }\n        this.setState({change: true});\n    }\n\n    async loadCurrentTypes() {\n        // Get hết các cái join của sản phẩm\n        var allJoinMatch = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n                \"_id.productID\": this.goodID,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, \n        {\n            params: {...data1}\n        })\n            .then(res => {\n                allJoinMatch = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        console.log(\"Các join\",allJoinMatch);\n        // Thêm vào trên cái bảng typeSet\n        for(var i = 0 ; i < allJoinMatch.length ; i ++)\n        {\n            typeSet.push(allJoinMatch[i]._id.typeID);\n        }\n        this.setState({change: !this.state.change});\n    }\n    getTypeNamebyTypeID (typeID) {\n        var typeName='';\n        for(var i = 0; i<listTypeInfor.length;i++)\n        {   \n            if(listTypeInfor[i]._id.typeID == typeID)\n            {\n                typeName = listTypeInfor[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    checkConstraint = () => {\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\n        // Constraint 1: Check name\n        var productName =  document.querySelector('input[name=\"goodName\"]').value;\n        if(productName.length == 0)\n        {\n            alert(\"Tên sản phẩm không được trống\");\n            return false;\n        }\n        // Constraint 2: Check quantity\n        if(document.querySelector('input[name=\"goodQuantity\"]').value.length == 0)\n        {\n            alert(\"Số lượng sản phẩm không được trống\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value) <= 0) \n        {\n            alert('Số lượng sản phẩm phải lớn hơn 0');\n            return false;\n        }\n        // Constraint 3: check Unit\n        if(document.querySelector('input[name=\"unit\"]').value.length == 0)\n        {\n            alert('Đơn vị của sản phẩm không được trống');\n            return false;\n        }\n        // Constraint 4: Check import Price\n        if(document.querySelector('input[name=\"originalPrice\"]').value.length == 0)\n        {\n            alert(\"Giá nhập không được trống\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <= 0) \n        {\n            alert('Giá nhập phải lớn hơn 0');\n            return false;\n        }\n        // Constraint 5: check sell Price\n        if(document.querySelector('input[name=\"sellPrice\"]').value.length == 0)\n        {\n            alert(\"Giá bán không được trống\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"sellPrice\"]').value) <= 0) \n        {\n            alert('Giá bán phải lớn hơn 0');\n            return false;\n        }\n        // Constraint 6: Ngày nhập phải nhỏ  hơn ngày hết hạn và ngày hết hạn, ngày nhập phải khác null\n        if (\n            (\n                new Date(document.querySelector('input[name=\"importDate\"]').value).getTime()\n                - \n                new Date(document.querySelector('input[name=\"expiredDate\"]').value).getTime()\n            ) >= 0\n        )\n        {\n            alert('Không thể nhập hàng hết hạn');\n            return false;\n        }\n        // Constraint 7: Check giá gốc nhỏ hơn giá bán\n        if(\n            parseInt(document.querySelector('input[name=\"sellPrice\"]').value) \n            - \n            parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <=0\n            ) \n        {\n            alert('Giá bán phải lớn hơn giá gốc');\n            return false;\n        }\n        // Constraint 8: check xem đã  up ảnh lên xong chưa\n        if(this.finishUpImage == false)\n        {\n            alert('Ảnh chưa được upload xong');\n            return false;\n        }\n        alert('Constraint đã check đầy đủ');\n        return true;\n    }\n    async updateGood() {\n        var isContinue = this.checkConstraint();\n        if(!isContinue)\n        {\n            return;\n        }\n        this.props.changeUpdateGoodStatus();\n        var productInfo = this.props.infoUpdate;\n        const data = {\n            token: localStorage.getItem('token'),\n            product: {\n                _id: {\n                    productID: document.querySelector('input[name=\"goodID\"]').value,\n                    importDate: productInfo._id.importDate,\n                    storeID: this.props.infoUser.email,\n                },\n                name: this.name,\n                quantity: this.quantity,\n                // remain: document.querySelector('input[name=\"goodQuantity\"]').value,\n                importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\n                sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\n                imgUrl: this.imgUrl,\n                unit: document.querySelector('input[name=\"unit\"]').value,\n            }\n        }\n        console.log(\"Updategood\",data);\n        axios.put(`http://localhost:5000/api/product`, data)\n            .then(res => {\n                console.log(\"Update success\");\n                alert('Đã update thành công sản phẩm')\n            })\n            .catch(err => {\n                console.log(err);\n            })\n        // Get hết các cái join của sản phẩm\n        var allJoinMatch = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n                \"_id.productID\": this.goodID,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, \n        {\n            params: {...data1}\n        })\n            .then(res => {\n                allJoinMatch = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        console.log(allJoinMatch);\n        // Xoá các join liên quan đến sản phẩm\n        var allProductJoin = [];\n        for(var i = 0 ; i < allJoinMatch.length; i++)\n        {\n            allProductJoin.push({\n                productID: this.goodID,\n                typeID: allJoinMatch[i]._id.typeID,\n                importDate: allJoinMatch[i]._id.importDate,\n                storeID: this.props.infoUser.email,\n            });\n        }\n        const dataJoin = {\n            token: localStorage.getItem('token'),\n            productJoinTypes: allProductJoin,      \n        }\n\n        console.log(dataJoin);\n\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\n            .then(res => {\n                console.log(\"delete join success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n        // Thêm các cái hiện tại\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\n        for(var i = 0 ; i < typeSet.length ; i++)\n        {\n            const data1 = {\n                token: localStorage.getItem('token'),\n                productJoinType: {\n                    _id : {\n                        productID: this.goodID,\n                        typeID: typeSet[i], \n                        importDate: productInfo._id.importDate,\n                        storeID: this.props.infoUser.email,\n                    }\n                }\n            }\n            axios.post(`http://localhost:5000/api/product/join`, data1)\n                .then(res => {\n                    console.log(\"lưu vô bảng join thành công\");\n                })\n                .catch(err => {\n                    console.log(err);\n                })\n        }\n    }\n\n\n    cancel = () => {\n        this.props.changeUpdateGoodStatus();\n    }\n\n    loadInitialData = () => {\n        // Load các dữ liệu ban đầu của form ở đây để mà update nhưng mà bị lỗi 401 mẹ\n        //Xử lý sampleData\n        var productInfo = this.props.infoUpdate;\n        console.log(this.props.infoUpdate);\n\n        this.goodID = (productInfo._id.productID == null) ? '' : productInfo._id.productID;\n        this.importDate = productInfo._id.importDate;\n        this.importDate = this.importDate == null ? '' :this.importDate.substring(0, this.importDate.indexOf('T'));\n        this.name = productInfo.name == null ? '' : productInfo.name;\n        this.imgUrl = productInfo.imgUrl == null ? '' : productInfo.imgUrl;\n        this.quantity = productInfo.quantity == null ? '' : productInfo.quantity;\n        // this.remain = productInfo.remain;\n        this.unit = productInfo.unit == null ? '' : productInfo.unit;\n        this.importPrice = productInfo.importPrice == null ? '' : productInfo.importPrice;\n        this.sellPrice = productInfo.sellPrice == null ? '' : productInfo.sellPrice;\n        this.expire = productInfo.expires; //substring(0,productInfo.expire.indexOf('T'));\n        this.expire = this.expire == null ? '' :this.expire.substring(0, this.expire.indexOf('T'));\n        console.log(\"this.expire\",this.expire );\n        this.setState({change: !this.state.change});\n    }\n\n    profileImageChange = (fileChangeEvent) => {\n        this.setState({\n            imageSelect: fileChangeEvent.target.files[0],\n        })\n        this.finishUpImage = false;\n        const file = fileChangeEvent.target.files[0];\n        const { type } = file;\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\n        } else {\n            const formData = new FormData();\n            formData.append(\"file\", fileChangeEvent.target.files[0])\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\n            axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\n                .then(res => {\n                    this.imgUrl=res.data.url;\n                    this.setState({\n                        change: 'true'\n                    });\n                })\n                .catch(err => {\n                    console.log(\"Thất bại\");\n                })\n        }\n        this.finishUpImage = true;\n    }\n\n    changeName = (e) => {\n        this.name = e.target.value;\n    }\n\n    changeValue = (e, variable) =>\n    {\n        if(variable=='quantity')\n        {\n            this.quantity = e.target.value;\n        }\n    }\n\n    foundTypeInSet(typeID) {\n        for(var i = 0 ; i < typeSet.length; i++)\n        {\n            if(typeSet[i]==typeID._id.typeID) return true;\n        }\n        return false;\n    }\n    render() {\n        \n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"UPDATE GOOD\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                marginTop: '0px'\n                            }}\n                        >   \n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            {/* Ẩn đi */}\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                        </Grid>\n                        <Grid item md={12}>\n\n                            <Card \n                            >\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            ID\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '100%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            name=\"goodID\" \n                                            variant=\"outlined\" \n                                            value={this.goodID}\n                                            readOnly={true}\n                                            disabled={true}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                        style={{\n                                            marginLeft: 0,\n                                            paddingLeft: 0\n                                        }}\n                                    >\n                                        <div className=\"input-label\" style={{width: 128}}>Import Date</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\" \n                                            style = {{width: '68%'}} \n                                            fullWidth\n                                            name=\"importDate\"\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.importDate}\n                                            readOnly={true}\n                                            disabled={true}\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '100%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            name=\"goodName\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.name}\n                                            onChange={(e) => this.changeName(e)} \n                                        />\n                                    </Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                        style={{padding: '0px', marginLeft: '0px'}}\n                                    >\n                                        <div \n                                            className=\"input-label\" \n                                            style={{width: '100px'}}\n                                        >\n                                            Quantity\n                                        </div>\n                                        <StyledTextField\n                                            style = {{width: '60%'}} \n                                            fullWidth\n                                            name=\"goodQuantity\" \n                                            variant=\"outlined\"\n                                            type=\"number\" \n                                            defaultValue={this.quantity}\n                                            onChange={(e) => this.changeValue(e, 'quantity')}\n                                        />\n                                    </Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                        style={{\n                                            paddingRight: 24\n                                        }}\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                marginLeft: 0,\n                                                paddingLeft: 4\n                                            }}\n                                        >\n                                            Unit\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box'\n                                            style = {{width: '100%', marginLeft: '4px'}} \n                                            fullWidth\n                                            variant=\"outlined\"\n                                            type=\"text\" \n                                            name=\"unit\" \n                                            defaultValue={this.unit}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6}\n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: 128}}>Original Price</div>\n                                        <StyledTextField\n                                            classname='input-box'\n                                            style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \n                                            fullWidth\n                                            name=\"originalPrice\" \n                                            variant=\"outlined\"\n                                            type=\"number\"\n                                            defaultValue={this.importPrice}\n                                        />\n                                        đ\n                                    </Grid>\n                                    <Grid item md={6}\n                                        className='input-item'\n                                        style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{width: '96px'}}\n                                        >\n                                            Sell Price\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box'\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \n                                            fullWidth\n                                            name=\"sellPrice\" \n                                            variant=\"outlined\"\n                                            type=\"number\" \n                                            defaultValue={this.sellPrice}\n                                        />\n                                        đ\n                                    </Grid>\n                                    <Grid item md={7} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            name=\"expiredDate\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.expire} \n                                        />\n                                        {/* <StyledTextField\n                                            classname='input-box'\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \n                                            fullWidth\n                                            name=\"sellPrice\" \n                                            variant=\"outlined\"\n                                            value={this.expire}\n                                        /> */}\n                                    </Grid>\n                                    <Grid item md={10}\n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{width:132}}\n                                        >\n                                            Product Type\n                                        </div>\n                                        <FormControl sx={{ minWidth: 120 }}>\n                                        {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                        <Select\n                                            value={this.state.type}\n                                            onChange={(event) => {\n                                                this.setState({type: event.target.value});\n                                                if(!typeSet.includes(event.target.value))\n                                                {\n                                                    typeSet.push(event.target.value);\n                                                }\n                                            }}\n                                            style={{\n                                                height: 36,\n                                            }}\n                                        >\n                                            {\n                                                listTypeInfor.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\n                                                : listTypeInfor.map((type) =>\n                                                    ! this.foundTypeInSet(type) \n                                                    ? <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\n                                                    : null\n                                                )\n                                            }   \n                                        </Select> \n                                    </FormControl>\n                                        <Button onClick={() => this.handleAdd()}>\n                                            <AiFillPlusCircle\n                                                size={28}\n                                                style={{\n                                                    fontSize: 28,\n                                                    margin: 0,\n                                                    padding: 0,\n                                                    width: 28,\n                                                    height: 28\n                                                }}    \n                                            />\n                                        </Button>\n                                        <div className='all-type-container'>\n                                            {\n                                                Array.from(typeSet).map((type) =>\n                                                    <div item md={7} className='type-container'>\n                                                        <CancelIcon\n                                                            className='close-icon'\n                                                            size={10}\n                                                            onClick={() => {\n                                                                typeSet = typeSet.filter(function(item) {\n                                                                    return item != type;\n                                                                })\n                                                                console.log(typeSet);\n                                                                this.setState({type: 'none'});\n                                                            }}\n                                                \n                                                        />\n                                                        <span className='type-title'>\n                                                            {this.getTypeNamebyTypeID(type)}\n                                                        </span>\n                                                    </div>\n                                                    \n                                                )\n                                            }\n                                        </div>\n                                    </Grid>\n                                    {/* <Grid item md={10}\n                                        className='input-item'\n                                    >\n\n                                    </Grid> */}\n                                    <Grid item md={2}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.updateGood()}>\n                                            UPDATE\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                        \n                    {this.props.addTypeStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\n                            <AddTypeModal></AddTypeModal>\n                        </div>\n                    ): null}\n                    {this.props.confirmStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\n                            <ConfirmModal></ConfirmModal>\n                        </div>\n                    ): null}\n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        updateGoodStatus: state.updateGoodStatus,\n        confirmStatus: state.confirmStatus,\n        infoUpdate: state.infoUpdate,\n        infoUser: state.infoUser,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeUpdateGoodStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\n            });\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        setUpdateConfirm: () => {\n            dispatch({\n                type: \"SET_CONFIRM_UPDATE_GOOD\",\n            }); \n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateGoodModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/GoodTable.js",["600","601","602","603","604","605"],"import * as React from 'react';\nimport { Component } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { withStyles } from '@material-ui/styles';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport GoodRow from './TableRow';\n\nfunction createData(index, id, name, quantity, originalPrice, sellPrice, importTime, productType, imgUrl, unit, expires, storeID) {\n    return {\n        storeID,\n        index,\n        id,\n        name,\n        quantity,\n        sellPrice,\n        importTime,\n        imgLink: imgUrl,\n        hidden:\n        {\n            expires: expires,\n            remaining: quantity,\n            originalPrice: originalPrice,\n            productType: productType,\n            unit: unit,\n        },\n    };\n}\n\n\nvar rows = [];\n\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    } \n})\n\n\nvar listProductInfor = [];\nvar joinTypeInfor = [];\nvar listTypeInfor = [];\n\nclass GoodTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            update: false\n        }\n        this.loadAllType();\n        this.loadAllGood();\n    }\n    removeProduct= (row) => {\n        // Đây là xử lý ở phía dữ liệu, có thể await gì đó.\n        // Xử lý ở phía giao diện(tạm)\n\n        // Đây là câu lệnh để update nhẹ\n        this.setState({update: this.state.update})\n    }\n    async loadAllGood() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/`, {\n            params: {...data}\n        })\n            .then(res => {\n                // alert(\"Lấy hết đc product ròi anh chai\");\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err)\n            })\n        // Get data và lưu các tên Type vào dữ liệU\n        //Get data và lưu các tên Type vào bảng\n        listProductInfor=[];\n        for(var i=0; i < result.length ; i++)\n        {\n            listProductInfor.push(result[i]);\n        }\n        // Get hết từ cái productjoinType\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err)\n            })  \n        // Lấy các cái jointype\n        joinTypeInfor = [];\n        for(var i = 0 ; i < result.length; i++)\n        {\n            joinTypeInfor.push(result[i]);\n        }\n\n        //createData(index, id, name, quantity, originalPrice, sellPrice, importTime, productType, imgUrl)\n        // Cập nhật vào cái row đi cho chắc\n        rows = [];\n        for(var i = 0; i < listProductInfor.length ; i++)\n        {\n            var obj = listProductInfor[i];\n\n            var joinType = '';\n            // // Lấy tất cả các type trong cái product\n            for(var j = 0; j < joinTypeInfor.length ; j++)\n            {\n\n                // console.log(\"joinTypeInfor[]\", j ,joinTypeInfor[j])\n                if(joinTypeInfor[j]._id.productID == obj._id.productID && joinTypeInfor[j]._id.storeID == obj._id.storeID)\n                {\n                    joinType = joinType + ' ' + this.getTypeNamebyTypeID(joinTypeInfor[j]._id.typeID);\n                }\n            }\n\n            rows.push(\n                createData((i+1), obj._id.productID, obj.name, obj.quantity, \n                    obj.importPrice, obj.sellPrice, obj._id.importDate, joinType, \n                    obj.imgUrl, obj.unit, obj.expires, obj._id.storeID)\n            );\n        }\n        \n        this.setState({change: !this.state.change});\n    }\n\n    async loadAllType() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        //Get data và lưu các tên Type vào bảng\n        listTypeInfor=[];\n        for(var i=0; i < result.length ; i++)\n        {\n            listTypeInfor.push(result[i]);\n        }\n\n        this.setState({change: true});\n    }\n    getTypeNamebyTypeID (typeID) {\n        var typeName='';\n        for(var i = 0; i<listTypeInfor.length;i++)\n        {   \n            if(listTypeInfor[i]._id.typeID == typeID)\n            {\n                typeName = listTypeInfor[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div style={{height: '550px', width: '100%', overflowY: 'scroll'}}>\n                <TableContainer component={Paper}>\n                    <Table className={classes.goodTable} aria-label=\"collapsible table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Index</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ID</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">GoodName</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Quantity</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Sell Price</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ImportTime</TableCell>\n                                <TableCell className={classes.goodTable_Cell}/>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {rows.map((row) => (\n                                <GoodRow key={row.name} row={row} />\n                            ))}\n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        infoUser: state.infoUser,\n        isAddTypeStatus: state.isAddTypeStatus,\n        confirmStatus: state.confirmStatus\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(GoodTable));\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/Regulation.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ChangePassword.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ModalAdd.js",["606","607","608","609"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport TimePicker from '@mui/lab/TimePicker';\nimport { GiCancel } from 'react-icons/gi'\nimport axios from 'axios';\n\nclass ModalAdd extends Component {\n    constructor(props) {\n        super(props);\n\n        if (this.props.editShiftStatus) {\n            var _timeFrom = new Date();\n            if (this.props.objectEditShift.from.includes(\"PM\")) {\n                var fromHour =  parseInt(this.props.objectEditShift.from.slice(0, this.props.objectEditShift.from.indexOf(':')));\n                var fromMin = parseInt(this.props.objectEditShift.from.slice(this.props.objectEditShift.from.indexOf(':') + 1));\n                _timeFrom.setHours(fromHour + 12, fromMin);\n            } else {\n                var fromHour =  parseInt(this.props.objectEditShift.from.slice(0, this.props.objectEditShift.from.indexOf(':')));\n                var fromMin = parseInt(this.props.objectEditShift.from.slice(this.props.objectEditShift.from.indexOf(':') + 1));\n                _timeFrom.setHours(fromHour , fromMin);\n            }\n           \n            var _timeTo = new Date();\n            if (this.props.objectEditShift.to.includes(\"PM\")) {\n                var toHour = parseInt(this.props.objectEditShift.to.slice(0, this.props.objectEditShift.to.indexOf(':')));\n                var toMin = parseInt(this.props.objectEditShift.to.slice(this.props.objectEditShift.to.indexOf(':') + 1));\n                _timeTo.setHours(toHour + 12, toMin);\n            } else {\n                var toHour = parseInt(this.props.objectEditShift.to.slice(0, this.props.objectEditShift.to.indexOf(':')));\n                var toMin = parseInt(this.props.objectEditShift.to.slice(this.props.objectEditShift.to.indexOf(':') + 1));\n                _timeTo.setHours(toHour, toMin);\n            }\n            \n        }\n\n        this.state = {\n            timeFrom: this.props.editShiftStatus ? _timeFrom : new Date(2018, 5, 35, 0, 0, 0),\n            timeTo: this.props.editShiftStatus ? _timeTo : new Date(2018, 5, 35, 0, 0, 0),\n            isSalary: false,\n            isDescription: false,\n            isTimeTo: false,\n            valueTime: this.props.editShiftStatus ? 1 : null,\n        }\n    }\n\n    descriptionShift = this.props.editShiftStatus ? this.props.objectEditShift.description : \"Ex : abc\"\n    timeFrom = this.props.editShiftStatus ? this.props.objectEditShift.from : \"00:00 AM\"\n    timeTo = this.props.editShiftStatus ? this.props.objectEditShift.to : \"00:00 AM\"\n    salary = this.props.editShiftStatus ? this.props.objectEditShift.salary : 10000\n\n    // Handle user\n    hanhleCancel = (e) => {\n        this.props.changeAddStatus();\n        if (this.props.editShiftStatus) {\n            this.props.changeEditShiftStatus();\n        }\n    }\n\n    changeTimeFrom = (e) => {\n        var hourse = e.getHours()\n        const minutes = e.getMinutes()\n        if (hourse >= 12) {\n            hourse = hourse - 12;\n            this.timeFrom = hourse.toString() + \":\" + minutes.toString() + \" PM\"\n        } else {\n            this.timeFrom = hourse.toString() + \":\" + minutes.toString() + \" AM\"\n        }\n        console.log(this.timeFrom);\n        this.setState({\n            timeFrom: e,\n        })\n    }\n\n    changeTimeTo = (e) => {\n        var hourse = e.getHours()\n        const minutes = e.getMinutes()\n        if (hourse >= 12) {\n            hourse = hourse - 12;\n            this.timeTo = hourse.toString() + \":\" + minutes.toString() + \" PM\"\n        } else {\n            this.timeTo = hourse.toString() + \":\" + minutes.toString() + \" AM\"\n        }\n        console.log(this.timeTo);\n        this.setState({\n            timeTo: e,\n        })\n    }\n\n    blurDiscription = (e) => {\n        this.descriptionShift = e.target.value;\n        if (e.target.value === \"\") {\n            this.setState({\n                isDescription: true,\n            })\n        } else {\n            this.setState({\n                isDescription: false,\n            })\n        }\n    }\n\n\n    // Tạo code để xác nhận\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    editShift = async () => {\n        if (this.state.timeTo - this.state.timeFrom < 1) {\n            this.props.hideAlert();\n            this.props.showAlert('The time end must be greater than the time start', 'error')\n        }\n        if (!this.state.isSalary && !this.state.isDescription && (this.state.timeTo - this.state.timeFrom > 0)) {\n            var data = {\n                token: localStorage.getItem('token'),\n                idUser: this.props.infoUser.email,\n                id: this.props.objectEditShift.id,\n                salary: this.salary,\n                description: this.descriptionShift,\n                from: this.timeFrom,\n                to: this.timeTo,\n            }\n            await axios.post(`http://localhost:5000/api/profile/update-shift`, data)\n                .then(res => {\n                    if (res.data.token) {\n                        localStorage.setItem('token', res.data.token);\n                        this.props.hideAlert();\n                        this.props.showAlert(\"Edit shift success\", \"success\");\n                        this.props.updateShift(data);\n                    }\n                    this.props.changeEditShiftStatus();\n                    this.props.changeAddStatus();\n                })\n                .catch(err => {\n                    this.props.changeLoginStatus();\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n                })\n\n        }\n    }\n\n    blurSalary = (e) => {\n        if (e.target.value <= -1) {\n            this.setState({\n                isSalary: true,\n            })\n        } else {\n            this.setState({\n                isSalary: false,\n            })\n        }\n        this.salary = e.target.value;\n    }\n\n    // Call API\n    addShift = () => {\n        if (this.state.timeTo - this.state.timeFrom < 1) {\n            this.props.hideAlert();\n            this.props.showAlert('The time end must be greater than the time start', 'error')\n        }\n        if (!this.state.isSalary && !this.state.isDescription && (this.state.timeTo - this.state.timeFrom > 0)) {\n            const code = this.makeCode(6);\n            const data = {\n                idUser: this.props.infoUser.email,\n                id: code,\n                salary: this.salary,\n                description: this.descriptionShift,\n                from: this.timeFrom,\n                to: this.timeTo,\n            }\n            const data1 = {\n                name: this.descriptionShift,\n                salary: this.salary,\n                timeFrom: this.timeFrom,\n                timeEnd: this.timeTo,\n                _id: { shiftID: code }\n            }\n            if (data) {\n                axios.post(`http://localhost:5000/api/profile/add-shift`, {\n                    email: this.props.infoUser.email,\n                    token: localStorage.getItem('token'),\n                    data: data,\n                })\n                    .then(res => {\n                        if (res.data.token) {\n                            this.props.addShift(data1);\n                            localStorage.setItem('token', res.data.token);\n                            this.props.hideAlert();\n                            this.props.showAlert(\"Add shift success\", \"success\");\n                        }\n                        this.props.changeAddStatus();\n                    })\n                    .catch(err => {\n                        this.props.changeLoginStatus();\n                        this.props.hideAlert();\n                        this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n                    })\n            }\n        }\n    }\n\n    render() {\n        return (\n            <form className=\"modal-add-shift\" style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Create shift\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    id=\"outlined-basic\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    defaultValue={(this.props.editShiftStatus ? this.props.objectEditShift.description : this.descriptionShift)}\n                                    onBlur={(e) => this.blurDiscription(e)}\n                                    label=\"Shift description\"\n                                    error={this.state.isDescription}\n                                    helperText={this.state.isDescription ? \"Enter something\" : \"\"}\n                                    required\n                                    type=\"text\"\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    onBlur={(e) => this.blurSalary(e)}\n                                    label=\"Salary\"\n                                    defaultValue={this.props.editShiftStatus ? this.props.objectEditShift.salary : this.salary}\n                                    error={this.state.isSalary}\n                                    helperText={this.state.isSalary ? \"Greater than 0\" : \"\"}\n                                    type=\"number\"\n                                    id=\"outlined-error-helper-text\"\n                                    name=\"salary\"\n                                    variant=\"outlined\"\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                    <Stack spacing={3}>\n                                        <TimePicker\n                                            label=\"From\"\n                                            value={this.state.timeFrom}\n                                            onChange={(newValue) => this.changeTimeFrom(newValue)}\n                                            renderInput={(params) => <TextField {...params} />}\n                                        />\n                                        <TimePicker\n                                            label=\"To\"\n                                            value={this.state.timeTo}\n                                            onChange={(newValue) => this.changeTimeTo(newValue)}\n                                            renderInput={(params) => <TextField {...params} />}\n                                        />\n                                    </Stack>\n                                </LocalizationProvider>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        {this.props.editShiftStatus ? (\n                            <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.editShift()} variant=\"contained\" startIcon={<BiEdit />}>\n                                Save\n                            </Button>) : (\n                            <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.addShift()} variant=\"contained\" startIcon={<BiPlusMedical />}>\n                                Add\n                            </Button>\n                        )}\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.hanhleCancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\n                            Cancel\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addStatus: state.addStatus,\n        infoUser: state.infoUser,\n        editShiftStatus: state.editShiftStatus,\n        objectEditShift: state.objectEditShift,\n        statusDarkmode: state.statusDarkmode\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_STATUS\",\n            });\n        },\n        addShift: (data) => {\n            dispatch({\n                type: \"ADD_SHIFT\",\n                newShift: data,\n            })\n        },\n        changeEditShiftStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_SHIFT_STATUS\",\n            })\n        },\n        updateShift: (data) => {\n            dispatch({\n                type: \"OBJECT_UPDATE_SHIFT\",\n                data: data,\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalAdd);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileSetting.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ListShift.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileDetail.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileHeader.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/fakeData.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeTableHeader.js",["610","611","612","613","614","615","616","617"],"import PropTypes from 'prop-types';\n// material\nimport { visuallyHidden } from '@mui/utils';\nimport { Box, Checkbox, TableRow, TableCell, TableHead, TableSortLabel } from '@mui/material';\nimport { withStyles } from '@material-ui/styles';\n// ----------------------------------------------------------------------\n\nEmployeeTableHeader.propTypes = {\n  order: PropTypes.oneOf(['asc', 'desc']),\n  orderBy: PropTypes.string,\n  rowCount: PropTypes.number,\n  headLabel: PropTypes.array,\n  numSelected: PropTypes.number,\n  onRequestSort: PropTypes.func,\n  onSelectAllClick: PropTypes.func\n};\nconst styles = theme =>  ({\n  goodTable: {                                     \n      borderWidth: '1px',\n      borderColor: '#ccc',\n      borderStyle: 'solid'\n  },\n  goodTable_Cell_Header: {                                     \n      borderWidth: '1px',\n      borderColor: '#ccc',\n      borderStyle: 'solid',\n      height: '40px',\n  },\n  goodTable_Cell: {                                     \n      borderWidth: '1px',\n      borderColor: '#ccc',\n      borderStyle: 'solid',\n      height: '80px',\n  } \n})\n\nfunction EmployeeTableHeader( props){\n  const {\n    order,\n    orderBy,\n    rowCount,\n    headLabel,\n    numSelected,\n    onRequestSort,\n    onSelectAllClick} = props;\n  // const createSortHandler = (property) => (event) => {\n  //   onRequestSort(event, property);\n  // };\n  const {classes} =  props;\n  // console.log(\"headLabel\", headLabel);\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\" className = {classes.goodTable_Cell_Header}>\n          <Checkbox\n            // indeterminate={numSelected > 0 && numSelected < rowCount}\n            // checked={rowCount > 0 && numSelected === rowCount}\n            // onChange={onSelectAllClick}\n          />\n        </TableCell>\n        {headLabel.map((headCell) => (\n          <TableCell\n            className = {classes.goodTable_Cell_Header}\n            // key={headCell.id}\n            // align={headCell.alignRight ? 'right' : 'left'}\n            // sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              // hideSortIcon\n              // active={orderBy === headCell.id}\n              // direction={orderBy === headCell.id ? order : 'asc'}\n              // onClick={createSortHandler(headCell.id)}\n              style={{\n                color: '#333'\n              }}\n            >\n              {headCell.label}\n              {/* {orderBy === headCell.id ? (\n                <Box sx={{ ...visuallyHidden }}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null} */}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nexport default withStyles( styles )( EmployeeTableHeader );","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeMoreMenu.js",["618"],"import { Icon } from '@iconify/react';\nimport editFill from '@iconify/icons-eva/edit-fill';\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\nimport {GiPayMoney} from \"react-icons/gi\";\nimport {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\n// material\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nclass EmployeeMoreMenu extends Component {\n  currentEmployee = {};\n\n\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: 'false'\n    }\n    this.myRef = React.createRef();\n  }\n  setIsOpen(val) {\n    this.isOpen = val;\n    this.setState({change: val});\n    \n  }\n\n  edit() {\n    this.getEmployeeByID(this.props.data);\n    // console.log(\"send nude\", this.currentEmployee);\n    this.props.setUpdateEmployee(this.currentEmployee);\n    this.props.changeUpdateEmployeeStatus();\n  }\n\n  delete() {\n    const data = {\n      token: localStorage.getItem('token'),\n      employee:\n      [\n          {\n              employeeID: this.props.data,\n              storeID: this.props.infoUser.email, \n          },\n      ] \n    }\n    console.log(data);\n\n    axios.delete(`http://localhost:5000/api/employee`,{data: data})\n        .then(res => {\n            alert(\"delete employee(s) success\");\n        })\n        .catch(err => {\n            alert(err);\n        })\n  }\n\n  getEmployeeByID(employeeID) {\n    var listEmployee = this.props.listEmployee.employees;\n    console.log(listEmployee);\n    for(var i = 0; i < listEmployee.length ; i++)\n    {\n      if(employeeID == listEmployee[i]._id.employeeID)\n      {\n        this.currentEmployee = listEmployee[i];\n        return;\n      }\n    }\n  }\n\n  isOpen=false;\n  render() {\n    return (\n      <>\n        <IconButton ref={this.myRef} onClick={() => this.setIsOpen(true)}>\n          <Icon icon={moreVerticalFill} width={20} height={20} />\n        </IconButton>\n  \n        <Menu\n          style={{\n            position: 'absolute',\n            bottom: 0,\n            left: 0,\n          }}\n          open={this.isOpen}\n          onClose={() => this.setIsOpen(false)}\n          anchorEl={this.myRef.current}\n          // PaperProps={{\n          //   sx: { width: 200, maxWidth: '100%' }\n          // }}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        >\n          <MenuItem sx={{ color: 'text.secondary' }}\n            onClick={() => this.delete()}\n          >\n            <ListItemIcon>\n              <Icon icon={trash2Outline} width={24} height={24} />\n            </ListItemIcon>\n            <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\n          </MenuItem>\n  \n          <MenuItem sx={{ color: 'text.secondary' }}\n            onClick={() => this.edit()}\n          >\n            <ListItemIcon>\n              <Icon icon={editFill} width={24} height={24} />\n            </ListItemIcon>\n            <ListItemText primary=\"Edit\" primaryTypographyProps={{ variant: 'body2' }} />\n          </MenuItem>\n          <MenuItem sx={{ color: 'text.secondary' }}\n            onClick={()=> this.props.changePayEmployeeStatus()}\n          >\n            <ListItemIcon>\n              <GiPayMoney size={24}/> \n            </ListItemIcon>\n            <ListItemText primary=\"Pay money\" primaryTypographyProps={{ variant: 'body2' }} />\n          </MenuItem>\n        </Menu>\n      </>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    updateEmployeeStatus: state.updateEmpoyeeStatus,\n    payEmployeeStatus: state.payEmployeeStatus,\n    listEmployee: state.listEmployee,\n    infoUser: state.infoUser,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n      changeUpdateEmployeeStatus: () => {\n          dispatch({\n              type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\n          });\n      },\n      changePayEmployeeStatus: () => {\n        dispatch({\n            type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\n        });\n      },\n      setUpdateEmployee: (currentEmployee) => {\n        dispatch({\n          type: \"SET_UPDATE_EMPLOYEE\",\n          data: currentEmployee\n        });\n      }\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeToolbar.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Scrollbar.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/SearchNotFound.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Label.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Page.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/DarkMode.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/TableRow.js",["619","620","621","622"],"import * as React from 'react';\nimport Typography from '@mui/material/Typography';\nimport { Image } from 'cloudinary-react';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Collapse from '@mui/material/Collapse';\nimport IconButton from '@mui/material/IconButton';\nimport { makeStyles } from '@material-ui/styles';\nimport GoodImage from './goodExample.jpg';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport { useDispatch } from 'react-redux'\nimport axios from 'axios';\n\nconst useStyles = makeStyles(theme => ({\n    goodTable_Cell:{\n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: 4\n    }\n}));\n\n\n\nfunction GoodRow(props) {\n    const { row } = props;\n    const [open, setOpen] = React.useState(false);\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const deleteProduct = async () =>\n    {\n        // Xoá sản phẩm\n        const data = {\n            token: localStorage.getItem('token'),\n            products:\n            [\n                {\n                    productID: row.id,\n                    importDate: row.importTime,\n                    storeID: row.storeID,\n                }\n            ]\n            \n        }\n        axios.delete(`http://localhost:5000/api/product`,{data: data})\n            .then(res => {\n                alert(\"delete product success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n        \n        // Get hết các cái join của sản phẩm\n        var allJoinMatch = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": row.storeID,\n                \"_id.productID\": row.id,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, \n        {\n            params: {...data1}\n        })\n            .then(res => {\n                allJoinMatch = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        console.log(allJoinMatch);\n        // Xoá các join liên quan đến sản phẩm\n        var allProductJoin = [];\n        for(var i = 0 ; i < allJoinMatch.length; i++)\n        {\n            allProductJoin.push({\n                productID: row.id,\n                typeID: allJoinMatch[i]._id.typeID,\n                importDate: allJoinMatch[i]._id.importDate,\n                storeID: row.storeID,\n            });\n        }\n        const dataJoin = {\n            token: localStorage.getItem('token'),\n            productJoinTypes: allProductJoin,      \n        }\n\n        console.log(dataJoin);\n\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\n            .then(res => {\n                console.log(\"delete join success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n\n        // Tạm thời\n        // window.location.reload();\n    }\n    return (\n        <React.Fragment>\n            <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.index}</TableCell>\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.id}</TableCell>\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.name}</TableCell>\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.quantity}</TableCell>\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.sellPrice}</TableCell>\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\n                    {/* {row.importTime == null ? '' : row.importTime.substring(0,row.importTime.indexOf('T'))} */}\n                    {row.importTime == null ? '': row.importTime.substring(0,row.importTime.indexOf('T'))}\n                </TableCell>\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => setOpen(!open)}>\n                        {open ? (<KeyboardArrowUpIcon />) : (<KeyboardArrowDownIcon />)}\n                    </IconButton>\n                </TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell className={classes.goodTable_Cell} style={{ padding: 0}} colSpan={8}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box sx={{ margin: 1 }}>\n                            <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                Other information\n                            </Typography>\n                            <div style={{display: 'flex'}}>\n                                {  \n                                    row.imgLink == \"none\"\n                                    ? <div style={{width: '100px', height: '100px', objectFit:'cover'}}><img src={GoodImage} style={{width: '100px', height: '100px', objectFit:'cover'}}/></div>\n                                    \n                                    : <div style={{width: '100px', height: '100px', objectFit:'cover'}}><Image style={{width: '100px', height: '100px', objectFit:'cover'}} cloudName=\"databaseimg\" publicId={row.imgLink}>{row.imgLink}</Image></div>\n                                }\n                                \n                                \n                                <Table>\n                                    <TableHead>\n                                        <TableRow>\n                                            <TableCell className={classes.goodTable_Cell}>Expired Day</TableCell>\n                                            <TableCell className={classes.goodTable_Cell}>Original Price</TableCell>\n                                            <TableCell className={classes.goodTable_Cell}>Good Remain</TableCell>\n                                            <TableCell className={classes.goodTable_Cell}>Product Type</TableCell>\n                                            <TableCell className={classes.goodTable_Cell}>Unit</TableCell>\n                                        </TableRow>\n                                    </TableHead>\n                                    <TableBody>\n                                        <TableRow>\n                                            <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">\n                                                {/* {row.hidden.expires == null ? '': row.hidden.expires.substring(0,row.hidden.expires.indexOf('T'))} */}\n                                                {row.hidden.expires == null ? '': row.hidden.expires.substring(0,row.hidden.expires.indexOf('T'))}\n                                            </TableCell>\n                                            <TableCell className={classes.goodTable_Cell}>{row.hidden.originalPrice}</TableCell>\n                                            <TableCell className={classes.goodTable_Cell}>{row.hidden.remaining}</TableCell>\n                                            <TableCell className={classes.goodTable_Cell}>{row.hidden.productType}</TableCell>\n                                            <TableCell className={classes.goodTable_Cell}>{row.hidden.unit}</TableCell>\n                                        </TableRow>\n                                    </TableBody>\n                                </Table>\n                                <div className=\"button-container\">\n                                    <Button \n                                        onClick={() => {\n                                            // Truyền cái data vào trong hàm đây luôn\n                                            dispatch({type: \"UPDATE_GOOD_DATA\", \n                                                _id: {\n                                                    productID: row.id,\n                                                    importDate: row.importTime,\n                                                },\n                                                name: row.name,\n                                                imgUrl: row.imgLink,\n                                                quantity: row.quantity,\n                                                remain: row.quantity,\n                                                unit: row.unit,\n                                                importPrice: row.hidden.originalPrice,\n                                                sellPrice: row.sellPrice,\n                                                expires: row.hidden.expires,  \n                                                unit: row.hidden.unit\n                                            });\n                                            dispatch({ type: \"CHANGE_UPDATE_GOOD_STATUS\", });\n                                        }}\n                                        variant=\"contained\"\n                                    >\n                                        Update\n                                    </Button>\n                                    <Button \n                                        variant=\"contained\"\n                                        onClick={deleteProduct}\n                                    >\n                                        Delete\n                                        \n                                    </Button>\n                                </div>\n                            </div>  \n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    );\n}\nexport default GoodRow;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/employeeListReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/InfomationBillEdit.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/ListRecieptReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/StatusShowHistoryRecieptReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/StatusEditInfomationBill.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/employeeSackedListReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/currentEditEmployeeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UnShiftEmployee.js",["623"],"import {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { withStyles } from '@material-ui/styles';\n// material\nimport { Paper, TableContainer, Table, TableHead, TableCell, TableRow } from '@mui/material';\n\n// ----------------------------------------------------------------------\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    } \n})\n\nclass UnShiftEmployee extends Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: 'false'\n    }\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div style={{marginTop: 0, padding: 24}}> \n          <TableContainer component={Paper}>\n                <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='80px' rowSpan={2}>Day</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" rowSpan={2}>Shift</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" colSpan={2}>Withdraw</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" colSpan={2}>Change</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\n                            <TableCell className={classes.goodTable_Cell}></TableCell>\n                        </TableRow>\n                    </TableHead>\n                </Table>\n            </TableContainer>\n      </div>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    \n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n      \n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(UnShiftEmployee));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/FixedCalendar.js",["624"],"import {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { withStyles } from '@material-ui/styles';\n// material\nimport { Paper, TableContainer, Table, TableHead, TableCell, TableRow, Button } from '@mui/material';\nimport FixedTableCell from './FixedCalendarCell';\n\n// ----------------------------------------------------------------------\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '80px',\n    } \n})\n\nclass FixedCalendar extends Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: 'false'\n    }\n  }\n  // Lấy các ca làm và từ đó tạo các dòng của ca làm đó, đầu tiên cứ mặc định là có 3 ca làm đã\n  listShift = [\n    {\n        timeFrom: '6h',\n        timeTo: '9h',\n        name: 'Morning shift 1'\n    },\n    {\n        timeFrom: '9h',\n        timeTo: '12h',\n        name: 'Morning shift 2'\n    },\n    {\n        timeFrom: '12h',\n        timeTo: '4h',\n        name: 'Afternoon shift'\n    },\n    {\n        timeFrom: '4h',\n        timeTo: '8h',\n        name: 'Night shift'\n    }\n  ]\n  render() {\n    const { classes } = this.props;\n    return (\n      <div style={{marginTop: 10, padding: 24, maxHeight: 600, overflowY: 'auto'}}> \n          <TableContainer component={Paper}>\n              <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n                  <TableHead>\n                      <TableRow>\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='80px'>Shift</TableCell>\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Mon</TableCell>\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Tue</TableCell>\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Wed</TableCell>\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Thu</TableCell>\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Fri</TableCell>\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Sat</TableCell>\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Sun</TableCell>\n                      </TableRow>\n                      {\n                          this.listShift.map((shift) => (\n                              <TableRow>\n                                  <TableCell className={classes.goodTable_Cell}>{shift.timeFrom + '-' + shift.timeTo}</TableCell>\n                                  <FixedTableCell></FixedTableCell>\n                                  <FixedTableCell></FixedTableCell>\n                                  <FixedTableCell></FixedTableCell>\n                                  <FixedTableCell></FixedTableCell>\n                                  <FixedTableCell></FixedTableCell>\n                                  <FixedTableCell></FixedTableCell>\n                                  <FixedTableCell></FixedTableCell>\n                              </TableRow>\n                          ))\n                      }\n                  </TableHead>\n              </Table>\n          </TableContainer>\n          <Button variant=\"contained\">Save</Button>\n      </div>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    \n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n      \n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(FixedCalendar));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/HistoryReciept.js",["625","626"],"import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport CollapsibleTable from './TableReciept'\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\n\nfunction HistoryReciept(props) {\n\n    const darkmode = useSelector(state => state.statusDarkmode)\n    const dispatch = useDispatch();\n\n    return (\n        <div style={{ overflow: 'hidden' }} className=\"modal-history-reciept\">\n            <div onClick={() => { dispatch({ type: \"CHANGE_HISTORY_RECIEPT_STATUS\" }) }} className=\"modal-overlay\"></div>\n            <div className=\"history-list-receipt\">\n                <Card>\n                    <CardHeader style={{ color: !darkmode ? '#0091ea' : 'white', backgroundColor: !darkmode ? '#efeeef' : '#455a64' }} title=\"History Reciept\" />\n                    <Divider></Divider>\n                </Card>\n                <div id=\"choses-product\" style={{ margin: '30px', height: '82%', overflow: 'hidden', overflowY: 'scroll' }}>\n                    <CollapsibleTable></CollapsibleTable>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default HistoryReciept;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/FixedCalendarCell.js",["627"],"import {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { withStyles } from '@material-ui/styles';\n// material\nimport { TableCell, List, ListItem, ListItemButton, ListItemText} from '@mui/material';\nimport '../../css/EmployeeManager.css';\n\n//icon\nimport { IoIosAdd } from \"react-icons/io\";\n\n// ----------------------------------------------------------------------\nconst styles = theme =>  ({\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '80px',\n    } \n})\n\nclass FixedCalendarCell extends Component {\n  isOpen=false;\n\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: false\n    }\n  }\n\n  handleChange() {\n    this.isOpen = !this.isOpen;\n    console.log(\"this.isOpen\", this.isOpen)\n    this.setState({change : !this.state.change})\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n        <TableCell \n            className={classes.goodTable_Cell} \n            style={{\n                position: 'relative',\n                backgroundColor: '#ff6057'\n            }}    \n        >\n            <div\n                style={{\n                    position: 'absolute',\n                    right: 0,\n                    top: 0,\n                    borderRadius: '50%',\n                    backgroundColor: '#fff',\n                    width: 22,\n                    height: 22,\n                    textAlign: 'center'\n                }}\n                className='add-employee-to-shift-button'\n            >\n                <IoIosAdd \n                    size={30}\n                    style={{\n                        position: 'absolute',\n                        right: -4,\n                        top: -3,\n                    }}\n                    color='#0096FF'\n                    onClick={() => this.handleChange()}\n                >    \n                </IoIosAdd>\n                \n            </div>\n            {\n              this.isOpen \n              ? \n              <List \n                style={{\n                  position: 'absolute',\n                  right: 0,\n                  top: 20,\n                  zIndex: 10,\n                  height: 100,\n                  overflowY: 'auto',\n                  width: 140,\n                  backgroundColor: '#fff',\n                }}\n              >\n                  <ListItem disablePadding height={30} onClick={() => this.handleChange()}>\n                      <ListItemButton>\n                          <ListItemText>1-Azpili</ListItemText>\n                      </ListItemButton>\n                  </ListItem>\n                  <ListItem disablePadding onClick={() => this.handleChange()}>\n                      <ListItemButton>\n                          <ListItemText>2-Chris</ListItemText>\n                      </ListItemButton>\n                  </ListItem>\n                  <ListItem disablePadding onClick={() => this.handleChange()}>\n                      <ListItemButton>\n                          <ListItemText>3-Antonio</ListItemText>\n                      </ListItemButton>\n                  </ListItem>\n              </List>\n              : null\n            }\n            \n            \n        </TableCell>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    \n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n      \n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(FixedCalendarCell));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/TableReciept.js",["628"],"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Collapse from '@mui/material/Collapse';\nimport IconButton from '@mui/material/IconButton';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport { Grid, Box } from '@mui/material';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FiEdit } from 'react-icons/fi'\nimport axios from 'axios';\n\n\nfunction Row(props) {\n    const { row } = props;\n    const [open, setOpen] = React.useState(false);\n    const dispatch = useDispatch();\n    const listReciept = useSelector(state => state.listReciept)\n    const infoUser = useSelector(state => state.infoUser)\n    const statusEditInfoBill = useSelector(state => state.statusEditInfoBill)\n    const editReciept = (MAHD) => {\n        let objectInfoBill = [];\n        listReciept.map(value => {\n            if (value.MAHD === MAHD) {\n                objectInfoBill = value\n            }\n            return value;\n        })\n        if (!statusEditInfoBill) {\n            axios.post('http://localhost:5000/api/sell-product/edit-reciept',{\n                MAHD: MAHD,\n                token: localStorage.getItem('token'),\n                email: infoUser.email,\n            })\n            dispatch({\n                type: \"EDIT_SHOPPING_BAGS\",\n                MAHD: MAHD,\n            })\n            dispatch({\n                type: \"INFO_SHOPPING_BAGS_EDIT\",\n                listProduct: objectInfoBill.listProduct,\n            })\n            dispatch({\n                type: \"ADD_INFO_BILL_EDIT\",\n                InfoBill: objectInfoBill,\n            })\n            dispatch({\n                type: \"CHANGE_EDIT_INFOMATION_STATUS\",\n            })\n            dispatch({\n                type: \"CHANGE_HISTORY_RECIEPT_STATUS\"\n            })\n        } else {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: \"Con` don hang` cho` !\",\n                typeMessage: \"warning\"\n            })\n        }\n\n    }\n\n    const TypeReciept = (isEdit, isDelete) => {\n        if (isDelete) {\n            return 'red'\n        } else if (isEdit) {\n            return '#f4f492'\n        } else {\n            return '#a6ffa6'\n        }\n    }\n\n    const StatusTypeReciept = (isEdit, isDelete) => {\n        if (isDelete) {\n            return 'Đã xóa'\n        } else if (isEdit) {\n            return 'Đổi trả'\n        } else {\n            return 'Thành công'\n        }\n    }\n\n    const showEdit = (isEdit, isDelete) => {\n        if (isEdit || isDelete) {\n            return true;\n        }\n    }\n\n    const countQuantity = () => {\n        let count = 0;\n        row.listProduct.map(value => {\n            count += value.quantity;\n        })\n        return count;\n    }\n\n    return (\n        <React.Fragment>\n            <TableRow style={{ backgroundColor: TypeReciept(row.isEdit, row.isDelete) }} sx={{ '& > *': { borderBottom: 'unset' } }}>\n                <TableCell>\n                    <IconButton\n                        aria-label=\"expand row\"\n                        size=\"small\"\n                        onClick={() => setOpen(!open)}\n                    >\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {row.MAHD}\n                </TableCell>\n                <TableCell align=\"right\">{row.date}</TableCell>\n                <TableCell align=\"right\">{row.totalMoney}</TableCell>\n                <TableCell align=\"right\">{row.discount}</TableCell>\n                <TableCell align=\"right\">{row.totalFinalMoney}</TableCell>\n                <TableCell>\n                    {!showEdit(row.isEdit, row.isDelete) ? (\n                        <IconButton onClick={() => editReciept(row.MAHD)} color=\"secondary\" aria-label=\"fingerprint\">\n                            <FiEdit />\n                        </IconButton>\n                    ) : null}\n                </TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={12}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box sx={{ margin: 1 }}>\n                            <Typography style={{ fontWeight: '600' }} variant=\"h6\" gutterBottom component=\"div\">\n                                Detail Recipet\n                            </Typography>\n                            <Grid container spacing={3}>\n                                <Grid item md={6} xs={6}>\n                                    <Table size=\"small\" aria-label=\"purchases\">\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell>#</TableCell>\n                                                <TableCell>Name</TableCell>\n                                                <TableCell>Quantity</TableCell>\n                                                <TableCell align=\"right\">Price</TableCell>\n                                                <TableCell align=\"right\">Total Price</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {row.listProduct.map((value, key) => (\n                                                <TableRow key={value.name}>\n                                                    <TableCell>\n                                                        {key + 1}\n                                                    </TableCell>\n                                                    <TableCell>{value.product.name}</TableCell>\n                                                    <TableCell>{value.quantity}</TableCell>\n                                                    <TableCell align=\"right\">{value.product.sellPrice.toLocaleString()}</TableCell>\n                                                    <TableCell align=\"right\">\n                                                        {(value.quantity * value.product.sellPrice).toLocaleString()}\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </Grid>\n                                <Grid item md={6} xs={6}>\n                                    <Grid container spacing={3}>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Mã hóa đơn:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.MAHD}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Trạng thái:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{StatusTypeReciept(row.isEdit, row.isDelete)}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Thời gian:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.date}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Giờ:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.time}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Mã HD củ:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.oldBill ? row.oldBill.MAHD : \"Không có\"}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Người bán:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.name}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Tổng số lượng:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{countQuantity()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Tổng tiền hàng:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.totalMoney.toLocaleString()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Giảm giá (%):</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.discount}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>TỔNG:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>{row.totalFinalMoney.toLocaleString()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    );\n}\n\nRow.propTypes = {\n    row: PropTypes.shape({\n        calories: PropTypes.number.isRequired,\n        carbs: PropTypes.number.isRequired,\n        fat: PropTypes.number.isRequired,\n        history: PropTypes.arrayOf(\n            PropTypes.shape({\n                amount: PropTypes.number.isRequired,\n                customerId: PropTypes.string.isRequired,\n                date: PropTypes.string.isRequired,\n            }),\n        ).isRequired,\n        name: PropTypes.string.isRequired,\n        price: PropTypes.number.isRequired,\n        protein: PropTypes.number.isRequired,\n    }).isRequired,\n};\n\n\nexport default function CollapsibleTable() {\n\n    const listReciept = useSelector(state => state.listReciept)\n\n    return (\n        <TableContainer component={Paper}>\n            <Table aria-label=\"collapsible table\">\n                <TableHead>\n                    <TableRow style={{ backgroundColor: 'black', color: 'white' }}>\n                        <TableCell />\n                        <TableCell >Mã HĐ</TableCell>\n                        <TableCell align=\"right\">Ngày hóa đơn</TableCell>\n                        <TableCell align=\"right\">Tổng hóa đơn</TableCell>\n                        <TableCell align=\"right\">Giảm giá</TableCell>\n                        <TableCell align=\"right\">Khách hàng trả</TableCell>\n                        <TableCell />\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {console.log(listReciept)}\n                    {listReciept ?\n                        listReciept.map((row) => (\n                            <Row key={row.MAHD} row={row} />\n                        )) : null\n                    }\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/SackedEmployeeMenu.js",["629"],"import { Icon } from '@iconify/react';\nimport editFill from '@iconify/icons-eva/edit-fill';\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\nimport {GiPayMoney} from \"react-icons/gi\";\nimport {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\n// material\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nclass EmployeeMoreMenu extends Component {\n  currentEmployee = {};\n\n\n    constructor(props) {\n        super(props);\n        this.state= {\n        change: 'false'\n        }\n        this.myRef = React.createRef();\n    }\n    setIsOpen(val) {\n        this.isOpen = val;\n        this.setState({change: val});\n        \n    }\n\n    edit() {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee:\n            [\n                {\n                    employeeID: this.props.data,\n                    storeID: this.props.infoUser.email,\n                },\n            ]\n            \n        }\n        axios.patch(`http://localhost:5000/api/employee/delete`, data)\n            .then(res => {\n                alert(\"back to work success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n    }\n\n    delete() {\n        const data = {\n        token: localStorage.getItem('token'),\n        employee:\n        [\n            {\n                employeeID: this.props.data,\n                storeID: this.props.infoUser.email, \n            },\n        ] \n        }\n        console.log(data);\n\n        axios.delete(`http://localhost:5000/api/employee/delete`,{data: data})\n            .then(res => {\n                alert(\"delete permantly employee(s) success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n    }\n\n    isOpen=false;\n    render() {\n        return (\n        <>\n            <IconButton ref={this.myRef} onClick={() => this.setIsOpen(true)}>\n            <Icon icon={moreVerticalFill} width={20} height={20} />\n            </IconButton>\n    \n            <Menu\n            style={{\n                position: 'absolute',\n                bottom: 0,\n                left: 0,\n            }}\n            open={this.isOpen}\n            onClose={() => this.setIsOpen(false)}\n            anchorEl={this.myRef.current}\n            // PaperProps={{\n            //   sx: { width: 200, maxWidth: '100%' }\n            // }}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            >\n            <MenuItem sx={{ color: 'text.secondary' }}\n                onClick={() => this.delete()}\n            >\n                <ListItemIcon>\n                <Icon icon={trash2Outline} width={24} height={24} />\n                </ListItemIcon>\n                <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\n            </MenuItem>\n    \n            <MenuItem sx={{ color: 'text.secondary' }}\n                onClick={() => this.edit()}\n            >\n                <ListItemIcon>\n                <Icon icon={editFill} width={24} height={24} />\n                </ListItemIcon>\n                <ListItemText primary=\"Return\" primaryTypographyProps={{ variant: 'body2' }} />\n            </MenuItem>\n            </Menu>\n        </>\n        );\n    }\n    \n    }\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\n        payEmployeeStatus: state.payEmployeeStatus,\n        listEmployee: state.listEmployee,\n        infoUser: state.infoUser,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/TypeReciept.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/TypeByDate.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/StatusSelectAll.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/ReiceiptManager.js",["630"],"import React, { Component } from 'react';\nimport { Container, Grid, Button } from '@mui/material';\nimport CollapsibleTable from './TableReciept'\nimport StatusReceiptType from './StatusReceiptType';\nimport DateReciept from './DateReciept';\nimport ControlReciept from './ControlReciept';\nimport '../../css/RecieptManager.css'\nclass ReceiptManager extends Component {\n    render() {\n        return (\n            <div className=\"profile\" style={{ overflow: 'scroll', overflowX: 'hidden', height: '100vh' }}>\n                <Container style={{ marginBottom: '20px', marginTop: '20px' }} maxWidth=\"xl\">\n                    <Grid className=\"profile-body\" container spacing={2}>\n                        <Grid item md={3} sm={4}>\n                            <Grid container spacing={2}>\n                                <Grid item md={12} sm={12}>\n                                    <DateReciept></DateReciept>\n                                </Grid>\n                                <Grid item md={12} sm={12}>\n                                    <StatusReceiptType></StatusReceiptType>\n                                </Grid>\n                                <Grid item md={12} sm={12}>\n                                    <ControlReciept></ControlReciept>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item md={9} sm={9}  >\n                            <CollapsibleTable></CollapsibleTable>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default ReceiptManager;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/TableReciept.js",["631","632","633","634","635","636","637","638","639","640","641","642","643","644"],"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Collapse from '@mui/material/Collapse';\nimport IconButton from '@mui/material/IconButton';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport { Grid, Box, Button, Checkbox } from '@mui/material';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport { useSelector, useDispatch } from 'react-redux'\nimport axios from 'axios';\nimport { FiXSquare } from 'react-icons/fi'\n\nfunction Row(props) {\n    const { row } = props;\n    const [open, setOpen] = React.useState(false);\n    const statusSelectAll = useSelector(state => state.statusSelectAll)\n    const dispatch = useDispatch();\n    const [statusSelectReplace, setStatusSelectReplace] = React.useState(false);\n    \n    React.useEffect(() => {\n        setStatusSelectReplace(statusSelectAll)\n    },[statusSelectAll])\n\n    const countQuantity = () => {\n        let count = 0;\n        row.listProduct.map(value => {\n            count += value.quantity;\n        })\n        return count;\n    }\n\n    const DeleteReciept = (MAHD) => {\n        console.log(MAHD);\n        setOpen(!open)\n        dispatch({\n            type: \"DELETE_RECIEPT\",\n            MAHD: MAHD,\n        })\n    }\n\n    const TypeReciept = (isEdit, isDelete) => {\n        if (isDelete) {\n            return 'red'\n        } else if (isEdit) {\n            return '#f4f492'\n        } else {\n            return '#a6ffa6'\n        }\n    }\n\n    const StatusTypeReciept = (isEdit, isDelete) => {\n        if (isDelete) {\n            return 'Đã xóa'\n        } else if (isEdit) {\n            return 'Đổi trả'\n        } else {\n            return 'Thành công'\n        }\n    }\n\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } };\n\n    const ChangeCheckbox = (e, MAHD) => {\n        setStatusSelectReplace(!statusSelectReplace);\n        console.log(e.target.checked)\n        console.log(MAHD)\n    }\n\n    return (\n        <React.Fragment>\n            <TableRow style={{ backgroundColor: TypeReciept(row.isEdit, row.isDelete) }} sx={{ '& > *': { borderBottom: 'unset' } }}>\n                <TableCell>\n                    {console.log(statusSelectAll)}\n                    <Checkbox {...label}   checked={statusSelectReplace}  onChange={(e) => ChangeCheckbox(e, row.MAHD)} color=\"default\" />\n                </TableCell>\n                <TableCell>\n                    <IconButton\n                        aria-label=\"expand row\"\n                        size=\"small\"\n                        onClick={() => setOpen(!open)}\n                    >\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {row.MAHD}\n                </TableCell>\n                <TableCell align=\"right\">{row.date}</TableCell>\n                <TableCell align=\"right\">{row.totalMoney}</TableCell>\n                <TableCell align=\"right\">{row.discount}</TableCell>\n                <TableCell align=\"right\">{row.totalFinalMoney}</TableCell>\n            </TableRow>\n            <TableRow>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={12}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box sx={{ margin: 1 }}>\n                            <Typography style={{ fontWeight: '600' }} variant=\"h6\" gutterBottom component=\"div\">\n                                Detail Recipet\n                            </Typography>\n                            <Grid container spacing={3}>\n                                <Grid item md={6} xs={6}>\n                                    <Table size=\"small\" aria-label=\"purchases\">\n                                        <TableHead>\n                                            <TableRow>\n\n                                                <TableCell>#</TableCell>\n                                                <TableCell>Name</TableCell>\n                                                <TableCell>Quantity</TableCell>\n                                                <TableCell align=\"right\">Price</TableCell>\n                                                <TableCell align=\"right\">Total Price</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {row.listProduct.map((value, key) => (\n                                                <TableRow key={value.name}>\n                                                    <TableCell>\n                                                        {key + 1}\n                                                    </TableCell>\n                                                    <TableCell>{value.product.name}</TableCell>\n                                                    <TableCell>{value.quantity}</TableCell>\n                                                    <TableCell align=\"right\">{value.product.sellPrice.toLocaleString()}</TableCell>\n                                                    <TableCell align=\"right\">\n                                                        {(value.quantity * value.product.sellPrice).toLocaleString()}\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </Grid>\n                                <Grid item md={6} xs={6}>\n                                    <Grid container spacing={3}>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Mã hóa đơn:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.MAHD}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Trạng thái:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{StatusTypeReciept(row.isEdit, row.isDelete)}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Thời gian:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.date}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Giờ:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.time}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Mã HD củ:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.oldBill ? row.oldBill.MAHD : \"Không có\"}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Người bán:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.name}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Tổng số lượng:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{countQuantity()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Tổng tiền hàng:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.totalMoney.toLocaleString()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Giảm giá (%):</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.discount}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>TỔNG:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>{row.totalFinalMoney.toLocaleString()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid style={{ marginBottom: '10px' }} item md={12} xs={12}>\n                                    <Grid style={{ justifyContent: 'end' }} container>\n                                        <Grid style={{ justifyContent: 'end' }} item md={2} xs={2}>\n                                            <Button onClick={() => DeleteReciept(row.MAHD)} style={{ fontWeight: '700', fontSize: '0.6rem', backgroundColor: 'red', color: 'white' }}>\n                                                <FiXSquare style={{ marginRight: '5px', fontSize: '1rem', transform: 'translateY(-5%)' }}></FiXSquare>\n                                                Xóa bỏ\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    );\n}\n\nRow.propTypes = {\n    row: PropTypes.shape({\n        calories: PropTypes.number.isRequired,\n        carbs: PropTypes.number.isRequired,\n        fat: PropTypes.number.isRequired,\n        history: PropTypes.arrayOf(\n            PropTypes.shape({\n                amount: PropTypes.number.isRequired,\n                customerId: PropTypes.string.isRequired,\n                date: PropTypes.string.isRequired,\n            }),\n        ).isRequired,\n        name: PropTypes.string.isRequired,\n        price: PropTypes.number.isRequired,\n        protein: PropTypes.number.isRequired,\n    }).isRequired,\n};\n\n\nexport default function CollapsibleTable() {\n    const typeReciept = useSelector(state => state.typeReciept)\n    const listReciept = useSelector(state => state.listReciept)\n    const typeByDate = useSelector(state => state.typeByDate)\n    const [listRecieptReplace, setListRecieptReplace] = React.useState(listReciept);\n\n\n    React.useEffect(() => {\n        var list = typeReciept.length === 0 ? listReciept : listReciept.filter(value => {\n            for (var i = 0; i < typeReciept.length; i++) {\n                if (typeReciept[i] === 'delete') {\n                    if (value.isDelete) {\n                        return value;\n                    }\n                } else if (typeReciept[i] === 'return') {\n                    if (!value.isDelete && value.isEdit) {\n                        return value;\n                    }\n                } else {\n                    if (!value.isDelete && !value.isEdit) {\n                        return value;\n                    }\n                }\n            }\n        })\n\n        if (typeByDate.type === 'typeByDate' || typeByDate.type === 'yesterday' || typeByDate.type === 'today') {\n            list = list.filter(value => {\n                let timeMau = value.date;\n                timeMau = timeMau.replace(/\\s/g, \"\");\n                timeMau = timeMau.split(\"/\");\n                if (typeByDate.day == timeMau[0] && typeByDate.month == timeMau[1] && typeByDate.year == timeMau[2]) {\n                    return value;\n                }\n            })\n        }\n\n        if (typeByDate.type === 'lastmonth') {\n            list = list.filter(value => {\n                let timeMau = value.date;\n                timeMau = timeMau.replace(/\\s/g, \"\");\n                timeMau = timeMau.split(\"/\");\n                if (typeByDate.month == timeMau[1] && typeByDate.year == timeMau[2]) {\n                    return value;\n                }\n            })\n        }\n\n        if (typeByDate.type === 'lastyear') {\n            list = list.filter(value => {\n                let timeMau = value.date;\n                timeMau = timeMau.replace(/\\s/g, \"\");\n                timeMau = timeMau.split(\"/\");\n                if (typeByDate.year == timeMau[2]) {\n                    return value;\n                }\n            })\n        }\n\n        console.log(typeByDate)\n        setListRecieptReplace(list)\n    }, [typeReciept, typeByDate])\n\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } };\n\n    return (\n        <TableContainer component={Paper}>\n            <Table aria-label=\"collapsible table\">\n                <TableHead>\n                    <TableRow style={{ backgroundColor: 'black', color: 'white' }}>\n                        <TableCell>\n                            \n                        </TableCell>\n                        <TableCell />\n                        <TableCell >Mã HĐ</TableCell>\n                        <TableCell align=\"right\">Ngày hóa đơn</TableCell>\n                        <TableCell align=\"right\">Tổng hóa đơn</TableCell>\n                        <TableCell align=\"right\">Giảm giá</TableCell>\n                        <TableCell align=\"right\">Khách hàng trả</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {listRecieptReplace ?\n                        listRecieptReplace.map((row) => (\n                            <Row key={row.MAHD}  row={row} />\n                        )) : null\n                    }\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/StatusReceiptType.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/DateReciept.js",["645"],"import React from 'react';\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\nimport { useSelector, useDispatch } from 'react-redux'\nimport TextField from '@mui/material/TextField';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\n\n\nfunction DataReciept(props) {\n    const dispatch = useDispatch()\n    const typeByDate = useSelector(state => state.typeByDate)\n    const [value, setValue] = React.useState(new Date());\n    const [value1, setValue1] = React.useState('all');\n    const darkmode = useSelector(state => state.statusDarkmode)\n\n    const selectDate = () => {\n        const data = {\n            type: \"typeByDate\",\n            day: value.getDate(),\n            month: value.getMonth() + 1,\n            year: value.getFullYear(),\n        }\n        dispatch({\n            type: \"TYPE_BY_DATE\",\n            typeByDate: data,\n        })\n    }\n\n    const changeTime = (newValue) => {\n        if (newValue) {\n            setValue(newValue);\n        }\n        if (typeByDate.type === 'typeByDate') {\n            const data = {\n                type: \"typeByDate\",\n                day: newValue.getDate(),\n                month: newValue.getMonth() + 1,\n                year: newValue.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        }\n    }\n\n    const selectType = () => {\n        if (value1 === 'all') {\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: { type: 'all' },\n            })\n        } else if (value1 === 'yesterday') {\n            let yesterday = new Date()\n            const data = {\n                type: \"yesterday\",\n                day: yesterday.getDate() - 1,\n                month: yesterday.getMonth() + 1,\n                year: yesterday.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        } else if (value1 === 'today') {\n            let today = new Date()\n            const data = {\n                type: \"today\",\n                day: today.getDate(),\n                month: today.getMonth() + 1,\n                year: today.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        } else if (value1 === 'lastmonth') {\n            let today = new Date()\n            const data = {\n                type: \"lastmonth\",\n                month: today.getMonth(),\n                year: today.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        } else if (value1 === 'lastyear') {\n            let today = new Date()\n            const data = {\n                type: \"lastyear\",\n                year: today.getFullYear() - 1,\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        }\n    }\n\n    const changeType = (e) => {\n        setValue1(e.target.value)\n        if (typeByDate.type === 'all' || typeByDate.type === 'yesterday' || typeByDate.type === 'today' || typeByDate.type === 'lastmonth' || typeByDate.type === 'lastyear') {\n            if (e.target.value === 'all') {\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: { type: 'all' },\n                })\n            }\n            if (e.target.value === 'yesterday') {\n                let yesterday = new Date()\n                let data = {\n                    type: \"yesterday\",\n                    day: yesterday.getDate() - 1,\n                    month: yesterday.getMonth() + 1,\n                    year: yesterday.getFullYear(),\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n            if (e.target.value === 'today') {\n                let today = new Date()\n                const data = {\n                    type: \"today\",\n                    day: today.getDate(),\n                    month: today.getMonth() + 1,\n                    year: today.getFullYear(),\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n            if (e.target.value === 'lastmonth') {\n                let today = new Date()\n                const data = {\n                    type: \"lastmonth\",\n                    month: today.getMonth(),\n                    year: today.getFullYear(),\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n            if (e.target.value === 'lastyear') {\n                let today = new Date()\n                const data = {\n                    type: \"lastyear\",\n                    year: today.getFullYear() - 1,\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n        }\n    }\n\n    React.useEffect(() => {\n        dispatch({\n            type: \"TYPE_BY_DATE\",\n            typeByDate: { type: 'all' },\n        })\n    }, [])\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item md={12} sm={12}  >\n                <Card>\n                    <CardHeader style={{ color: !darkmode ? '#0091ea' :'white', backgroundColor: !darkmode ? '#efeeef' :'#455a64'}} title=\"Date\" />\n                    <Divider></Divider>\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                <Grid item md={12} sm={12}>\n                                    <div className=\"form-check\">\n                                        <input onClick={() => selectType()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault2\" defaultChecked />\n                                        <FormControl fullWidth>\n                                            <InputLabel id=\"demo-simple-select-label\">Age</InputLabel>\n                                            <Select\n                                                labelId=\"demo-simple-select-label\"\n                                                id=\"demo-simple-select\"\n                                                value={value1}\n                                                label=\"Age\"\n                                                onChange={(e) => changeType(e)}\n                                            >\n                                                <MenuItem value='all'>All</MenuItem>\n                                                <MenuItem value='today'>Today</MenuItem>\n                                                <MenuItem value='yesterday'>Yesterday</MenuItem>\n                                                <MenuItem value='lastmonth'>Last month</MenuItem>\n                                                <MenuItem value='lastyear'>Last year</MenuItem>\n                                            </Select>\n                                        </FormControl>\n                                    </div>\n                                </Grid>\n                                <Grid item md={12} sm={12}>\n                                    <div className=\"form-check\">\n                                        <input onClick={() => selectDate()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\" />\n                                        <DesktopDatePicker\n                                            label=\"Ngày\"\n                                            value={value}\n                                            minDate={new Date('2017-01-01')}\n                                            onChange={(newValue) => changeTime(newValue)}\n                                            renderInput={(params) => <TextField {...params} />}\n                                        />\n                                    </div>\n                                </Grid>\n                            </LocalizationProvider>\n                        </Grid>\n                    </CardContent>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default DataReciept;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/ControlReciept.js",[],{"ruleId":"646","replacedBy":"647"},{"ruleId":"648","replacedBy":"649"},{"ruleId":"650","severity":1,"message":"651","line":10,"column":10,"nodeType":"652","messageId":"653","endLine":10,"endColumn":24},{"ruleId":"654","severity":1,"message":"655","line":13,"column":3,"nodeType":"656","messageId":"657","endLine":15,"endColumn":4},{"ruleId":"658","severity":1,"message":"659","line":21,"column":45,"nodeType":"660","messageId":"661","endLine":21,"endColumn":47},{"ruleId":"662","severity":1,"message":"663","line":94,"column":28,"nodeType":"664","messageId":"665","endLine":94,"endColumn":29,"suggestions":"666"},{"ruleId":"662","severity":1,"message":"663","line":94,"column":44,"nodeType":"664","messageId":"665","endLine":94,"endColumn":45,"suggestions":"667"},{"ruleId":"668","severity":1,"message":"669","line":274,"column":9,"nodeType":"670","messageId":"671","endLine":274,"endColumn":25},{"ruleId":"650","severity":1,"message":"672","line":13,"column":8,"nodeType":"652","messageId":"653","endLine":13,"endColumn":15},{"ruleId":"662","severity":1,"message":"663","line":106,"column":30,"nodeType":"664","messageId":"665","endLine":106,"endColumn":31,"suggestions":"673"},{"ruleId":"662","severity":1,"message":"663","line":106,"column":46,"nodeType":"664","messageId":"665","endLine":106,"endColumn":47,"suggestions":"674"},{"ruleId":"650","severity":1,"message":"675","line":9,"column":10,"nodeType":"652","messageId":"653","endLine":9,"endColumn":19},{"ruleId":"650","severity":1,"message":"676","line":14,"column":8,"nodeType":"652","messageId":"653","endLine":14,"endColumn":13},{"ruleId":"650","severity":1,"message":"672","line":6,"column":8,"nodeType":"652","messageId":"653","endLine":6,"endColumn":15},{"ruleId":"662","severity":1,"message":"663","line":97,"column":28,"nodeType":"664","messageId":"665","endLine":97,"endColumn":29,"suggestions":"677"},{"ruleId":"662","severity":1,"message":"663","line":97,"column":44,"nodeType":"664","messageId":"665","endLine":97,"endColumn":45,"suggestions":"678"},{"ruleId":"650","severity":1,"message":"679","line":9,"column":11,"nodeType":"652","messageId":"653","endLine":9,"endColumn":32},{"ruleId":"680","severity":1,"message":"681","line":96,"column":29,"nodeType":"682","endLine":96,"endColumn":161},{"ruleId":"683","severity":1,"message":"684","line":103,"column":58,"nodeType":"685","messageId":"671","endLine":103,"endColumn":60},{"ruleId":"686","severity":1,"message":"687","line":169,"column":25,"nodeType":"682","endLine":174,"endColumn":26},{"ruleId":"686","severity":1,"message":"688","line":178,"column":25,"nodeType":"682","endLine":178,"endColumn":136},{"ruleId":"650","severity":1,"message":"689","line":2,"column":8,"nodeType":"652","messageId":"653","endLine":2,"endColumn":12},{"ruleId":"650","severity":1,"message":"690","line":3,"column":8,"nodeType":"652","messageId":"653","endLine":3,"endColumn":13},{"ruleId":"650","severity":1,"message":"691","line":4,"column":8,"nodeType":"652","messageId":"653","endLine":4,"endColumn":17},{"ruleId":"650","severity":1,"message":"692","line":5,"column":8,"nodeType":"652","messageId":"653","endLine":5,"endColumn":22},{"ruleId":"650","severity":1,"message":"693","line":7,"column":10,"nodeType":"652","messageId":"653","endLine":7,"endColumn":22},{"ruleId":"650","severity":1,"message":"694","line":14,"column":5,"nodeType":"652","messageId":"653","endLine":14,"endColumn":11},{"ruleId":"650","severity":1,"message":"695","line":23,"column":5,"nodeType":"652","messageId":"653","endLine":23,"endColumn":20},{"ruleId":"650","severity":1,"message":"696","line":25,"column":8,"nodeType":"652","messageId":"653","endLine":25,"endColumn":23},{"ruleId":"650","severity":1,"message":"697","line":39,"column":10,"nodeType":"652","messageId":"653","endLine":39,"endColumn":21},{"ruleId":"650","severity":1,"message":"698","line":91,"column":5,"nodeType":"652","messageId":"653","endLine":91,"endColumn":15},{"ruleId":"650","severity":1,"message":"699","line":92,"column":5,"nodeType":"652","messageId":"653","endLine":92,"endColumn":18},{"ruleId":"650","severity":1,"message":"700","line":94,"column":5,"nodeType":"652","messageId":"653","endLine":94,"endColumn":9},{"ruleId":"650","severity":1,"message":"701","line":95,"column":5,"nodeType":"652","messageId":"653","endLine":95,"endColumn":16},{"ruleId":"650","severity":1,"message":"702","line":8,"column":8,"nodeType":"652","messageId":"653","endLine":8,"endColumn":19},{"ruleId":"650","severity":1,"message":"703","line":2,"column":10,"nodeType":"652","messageId":"653","endLine":2,"endColumn":18},{"ruleId":"650","severity":1,"message":"704","line":6,"column":10,"nodeType":"652","messageId":"653","endLine":6,"endColumn":20},{"ruleId":"650","severity":1,"message":"705","line":6,"column":30,"nodeType":"652","messageId":"653","endLine":6,"endColumn":35},{"ruleId":"650","severity":1,"message":"706","line":11,"column":8,"nodeType":"652","messageId":"653","endLine":11,"endColumn":17},{"ruleId":"650","severity":1,"message":"707","line":15,"column":8,"nodeType":"652","messageId":"653","endLine":15,"endColumn":22},{"ruleId":"650","severity":1,"message":"708","line":16,"column":8,"nodeType":"652","messageId":"653","endLine":16,"endColumn":22},{"ruleId":"650","severity":1,"message":"709","line":17,"column":8,"nodeType":"652","messageId":"653","endLine":17,"endColumn":28},{"ruleId":"650","severity":1,"message":"710","line":20,"column":10,"nodeType":"652","messageId":"653","endLine":20,"endColumn":29},{"ruleId":"683","severity":1,"message":"684","line":185,"column":31,"nodeType":"685","messageId":"671","endLine":185,"endColumn":33},{"ruleId":"683","severity":1,"message":"684","line":192,"column":78,"nodeType":"685","messageId":"671","endLine":192,"endColumn":80},{"ruleId":"683","severity":1,"message":"684","line":206,"column":70,"nodeType":"685","messageId":"671","endLine":206,"endColumn":72},{"ruleId":"683","severity":1,"message":"684","line":214,"column":79,"nodeType":"685","messageId":"671","endLine":214,"endColumn":81},{"ruleId":"683","severity":1,"message":"684","line":227,"column":75,"nodeType":"685","messageId":"671","endLine":227,"endColumn":77},{"ruleId":"683","severity":1,"message":"684","line":263,"column":31,"nodeType":"685","messageId":"671","endLine":263,"endColumn":33},{"ruleId":"711","severity":1,"message":"712","line":299,"column":17,"nodeType":"652","messageId":"713","endLine":299,"endColumn":18},{"ruleId":"683","severity":1,"message":"684","line":347,"column":44,"nodeType":"685","messageId":"671","endLine":347,"endColumn":46},{"ruleId":"683","severity":1,"message":"684","line":359,"column":26,"nodeType":"685","messageId":"671","endLine":359,"endColumn":28},{"ruleId":"683","severity":1,"message":"684","line":383,"column":140,"nodeType":"685","messageId":"671","endLine":383,"endColumn":142},{"ruleId":"683","severity":1,"message":"684","line":575,"column":69,"nodeType":"685","messageId":"671","endLine":575,"endColumn":71},{"ruleId":"683","severity":1,"message":"714","line":606,"column":77,"nodeType":"685","messageId":"671","endLine":606,"endColumn":79},{"ruleId":"658","severity":1,"message":"659","line":176,"column":89,"nodeType":"660","messageId":"661","endLine":176,"endColumn":91},{"ruleId":"650","severity":1,"message":"715","line":2,"column":28,"nodeType":"652","messageId":"653","endLine":2,"endColumn":35},{"ruleId":"650","severity":1,"message":"716","line":2,"column":54,"nodeType":"652","messageId":"653","endLine":2,"endColumn":57},{"ruleId":"650","severity":1,"message":"717","line":2,"column":59,"nodeType":"652","messageId":"653","endLine":2,"endColumn":70},{"ruleId":"650","severity":1,"message":"704","line":2,"column":80,"nodeType":"652","messageId":"653","endLine":2,"endColumn":90},{"ruleId":"650","severity":1,"message":"718","line":4,"column":10,"nodeType":"652","messageId":"653","endLine":4,"endColumn":23},{"ruleId":"650","severity":1,"message":"719","line":4,"column":25,"nodeType":"652","messageId":"653","endLine":4,"endColumn":31},{"ruleId":"650","severity":1,"message":"720","line":5,"column":8,"nodeType":"652","messageId":"653","endLine":5,"endColumn":13},{"ruleId":"650","severity":1,"message":"721","line":6,"column":10,"nodeType":"652","messageId":"653","endLine":6,"endColumn":18},{"ruleId":"650","severity":1,"message":"722","line":7,"column":8,"nodeType":"652","messageId":"653","endLine":7,"endColumn":14},{"ruleId":"650","severity":1,"message":"723","line":8,"column":8,"nodeType":"652","messageId":"653","endLine":8,"endColumn":16},{"ruleId":"650","severity":1,"message":"724","line":9,"column":8,"nodeType":"652","messageId":"653","endLine":9,"endColumn":19},{"ruleId":"650","severity":1,"message":"725","line":11,"column":8,"nodeType":"652","messageId":"653","endLine":11,"endColumn":13},{"ruleId":"650","severity":1,"message":"709","line":14,"column":8,"nodeType":"652","messageId":"653","endLine":14,"endColumn":28},{"ruleId":"650","severity":1,"message":"708","line":15,"column":8,"nodeType":"652","messageId":"653","endLine":15,"endColumn":22},{"ruleId":"650","severity":1,"message":"726","line":16,"column":8,"nodeType":"652","messageId":"653","endLine":16,"endColumn":18},{"ruleId":"650","severity":1,"message":"707","line":17,"column":8,"nodeType":"652","messageId":"653","endLine":17,"endColumn":22},{"ruleId":"650","severity":1,"message":"727","line":18,"column":10,"nodeType":"652","messageId":"653","endLine":18,"endColumn":26},{"ruleId":"650","severity":1,"message":"728","line":19,"column":8,"nodeType":"652","messageId":"653","endLine":19,"endColumn":18},{"ruleId":"650","severity":1,"message":"729","line":21,"column":5,"nodeType":"652","messageId":"653","endLine":21,"endColumn":17},{"ruleId":"650","severity":1,"message":"730","line":25,"column":5,"nodeType":"652","messageId":"653","endLine":25,"endColumn":12},{"ruleId":"683","severity":1,"message":"684","line":81,"column":127,"nodeType":"685","messageId":"671","endLine":81,"endColumn":129},{"ruleId":"650","severity":1,"message":"715","line":2,"column":28,"nodeType":"652","messageId":"653","endLine":2,"endColumn":35},{"ruleId":"650","severity":1,"message":"716","line":2,"column":54,"nodeType":"652","messageId":"653","endLine":2,"endColumn":57},{"ruleId":"650","severity":1,"message":"717","line":2,"column":59,"nodeType":"652","messageId":"653","endLine":2,"endColumn":70},{"ruleId":"650","severity":1,"message":"704","line":2,"column":80,"nodeType":"652","messageId":"653","endLine":2,"endColumn":90},{"ruleId":"683","severity":1,"message":"684","line":124,"column":127,"nodeType":"685","messageId":"671","endLine":124,"endColumn":129},{"ruleId":"650","severity":1,"message":"715","line":2,"column":28,"nodeType":"652","messageId":"653","endLine":2,"endColumn":35},{"ruleId":"650","severity":1,"message":"716","line":2,"column":54,"nodeType":"652","messageId":"653","endLine":2,"endColumn":57},{"ruleId":"650","severity":1,"message":"717","line":2,"column":59,"nodeType":"652","messageId":"653","endLine":2,"endColumn":70},{"ruleId":"650","severity":1,"message":"704","line":2,"column":80,"nodeType":"652","messageId":"653","endLine":2,"endColumn":90},{"ruleId":"650","severity":1,"message":"729","line":9,"column":5,"nodeType":"652","messageId":"653","endLine":9,"endColumn":17},{"ruleId":"650","severity":1,"message":"730","line":13,"column":5,"nodeType":"652","messageId":"653","endLine":13,"endColumn":12},{"ruleId":"683","severity":1,"message":"684","line":139,"column":127,"nodeType":"685","messageId":"671","endLine":139,"endColumn":129},{"ruleId":"658","severity":1,"message":"731","line":43,"column":39,"nodeType":"660","messageId":"732","endLine":43,"endColumn":41},{"ruleId":"658","severity":1,"message":"731","line":51,"column":39,"nodeType":"660","messageId":"732","endLine":51,"endColumn":41},{"ruleId":"658","severity":1,"message":"731","line":63,"column":39,"nodeType":"660","messageId":"732","endLine":63,"endColumn":41},{"ruleId":"650","severity":1,"message":"733","line":2,"column":43,"nodeType":"652","messageId":"653","endLine":2,"endColumn":52},{"ruleId":"650","severity":1,"message":"718","line":4,"column":10,"nodeType":"652","messageId":"653","endLine":4,"endColumn":23},{"ruleId":"650","severity":1,"message":"734","line":9,"column":8,"nodeType":"652","messageId":"653","endLine":9,"endColumn":20},{"ruleId":"711","severity":1,"message":"712","line":137,"column":17,"nodeType":"652","messageId":"713","endLine":137,"endColumn":18},{"ruleId":"658","severity":1,"message":"731","line":31,"column":43,"nodeType":"660","messageId":"732","endLine":31,"endColumn":45},{"ruleId":"658","severity":1,"message":"731","line":39,"column":43,"nodeType":"660","messageId":"732","endLine":39,"endColumn":45},{"ruleId":"658","severity":1,"message":"731","line":50,"column":43,"nodeType":"660","messageId":"732","endLine":50,"endColumn":45},{"ruleId":"650","severity":1,"message":"676","line":2,"column":80,"nodeType":"652","messageId":"653","endLine":2,"endColumn":85},{"ruleId":"650","severity":1,"message":"719","line":4,"column":25,"nodeType":"652","messageId":"653","endLine":4,"endColumn":31},{"ruleId":"650","severity":1,"message":"735","line":6,"column":20,"nodeType":"652","messageId":"653","endLine":6,"endColumn":33},{"ruleId":"683","severity":1,"message":"684","line":52,"column":45,"nodeType":"685","messageId":"671","endLine":52,"endColumn":47},{"ruleId":"683","severity":1,"message":"684","line":83,"column":37,"nodeType":"685","messageId":"671","endLine":83,"endColumn":39},{"ruleId":"683","severity":1,"message":"684","line":85,"column":66,"nodeType":"685","messageId":"671","endLine":85,"endColumn":68},{"ruleId":"683","severity":1,"message":"684","line":96,"column":27,"nodeType":"685","messageId":"671","endLine":96,"endColumn":29},{"ruleId":"683","severity":1,"message":"684","line":117,"column":45,"nodeType":"685","messageId":"671","endLine":117,"endColumn":47},{"ruleId":"650","severity":1,"message":"733","line":2,"column":43,"nodeType":"652","messageId":"653","endLine":2,"endColumn":52},{"ruleId":"650","severity":1,"message":"719","line":4,"column":25,"nodeType":"652","messageId":"653","endLine":4,"endColumn":31},{"ruleId":"650","severity":1,"message":"725","line":7,"column":8,"nodeType":"652","messageId":"653","endLine":7,"endColumn":13},{"ruleId":"654","severity":1,"message":"655","line":10,"column":5,"nodeType":"656","messageId":"657","endLine":12,"endColumn":6},{"ruleId":"736","severity":1,"message":"737","line":26,"column":9,"nodeType":"738","messageId":"739","endLine":32,"endColumn":10},{"ruleId":"740","severity":1,"message":"741","line":30,"column":13,"nodeType":"742","messageId":"743","endLine":31,"endColumn":67},{"ruleId":"744","severity":1,"message":"745","line":79,"column":7,"nodeType":"746","endLine":79,"endColumn":27,"suggestions":"747"},{"ruleId":"744","severity":1,"message":"745","line":89,"column":7,"nodeType":"746","endLine":89,"endColumn":26,"suggestions":"748"},{"ruleId":"744","severity":1,"message":"745","line":99,"column":7,"nodeType":"746","endLine":99,"endColumn":28,"suggestions":"749"},{"ruleId":"744","severity":1,"message":"745","line":129,"column":7,"nodeType":"746","endLine":129,"endColumn":78,"suggestions":"750"},{"ruleId":"650","severity":1,"message":"751","line":9,"column":19,"nodeType":"652","messageId":"653","endLine":9,"endColumn":27},{"ruleId":"650","severity":1,"message":"752","line":10,"column":12,"nodeType":"652","messageId":"653","endLine":10,"endColumn":16},{"ruleId":"650","severity":1,"message":"753","line":12,"column":11,"nodeType":"652","messageId":"653","endLine":12,"endColumn":17},{"ruleId":"650","severity":1,"message":"715","line":2,"column":28,"nodeType":"652","messageId":"653","endLine":2,"endColumn":35},{"ruleId":"650","severity":1,"message":"716","line":2,"column":54,"nodeType":"652","messageId":"653","endLine":2,"endColumn":57},{"ruleId":"650","severity":1,"message":"717","line":2,"column":59,"nodeType":"652","messageId":"653","endLine":2,"endColumn":70},{"ruleId":"650","severity":1,"message":"704","line":2,"column":80,"nodeType":"652","messageId":"653","endLine":2,"endColumn":90},{"ruleId":"650","severity":1,"message":"718","line":4,"column":10,"nodeType":"652","messageId":"653","endLine":4,"endColumn":23},{"ruleId":"650","severity":1,"message":"719","line":4,"column":25,"nodeType":"652","messageId":"653","endLine":4,"endColumn":31},{"ruleId":"650","severity":1,"message":"720","line":5,"column":8,"nodeType":"652","messageId":"653","endLine":5,"endColumn":13},{"ruleId":"650","severity":1,"message":"721","line":6,"column":10,"nodeType":"652","messageId":"653","endLine":6,"endColumn":18},{"ruleId":"650","severity":1,"message":"706","line":13,"column":8,"nodeType":"652","messageId":"653","endLine":13,"endColumn":17},{"ruleId":"650","severity":1,"message":"709","line":16,"column":8,"nodeType":"652","messageId":"653","endLine":16,"endColumn":28},{"ruleId":"650","severity":1,"message":"708","line":17,"column":8,"nodeType":"652","messageId":"653","endLine":17,"endColumn":22},{"ruleId":"650","severity":1,"message":"726","line":18,"column":8,"nodeType":"652","messageId":"653","endLine":18,"endColumn":18},{"ruleId":"650","severity":1,"message":"707","line":19,"column":8,"nodeType":"652","messageId":"653","endLine":19,"endColumn":22},{"ruleId":"711","severity":1,"message":"712","line":98,"column":17,"nodeType":"652","messageId":"713","endLine":98,"endColumn":18},{"ruleId":"683","severity":1,"message":"684","line":138,"column":44,"nodeType":"685","messageId":"671","endLine":138,"endColumn":46},{"ruleId":"683","severity":1,"message":"684","line":151,"column":31,"nodeType":"685","messageId":"671","endLine":151,"endColumn":33},{"ruleId":"683","severity":1,"message":"684","line":157,"column":78,"nodeType":"685","messageId":"671","endLine":157,"endColumn":80},{"ruleId":"683","severity":1,"message":"684","line":168,"column":70,"nodeType":"685","messageId":"671","endLine":168,"endColumn":72},{"ruleId":"683","severity":1,"message":"684","line":174,"column":79,"nodeType":"685","messageId":"671","endLine":174,"endColumn":81},{"ruleId":"683","severity":1,"message":"684","line":185,"column":75,"nodeType":"685","messageId":"671","endLine":185,"endColumn":77},{"ruleId":"683","severity":1,"message":"684","line":218,"column":31,"nodeType":"685","messageId":"671","endLine":218,"endColumn":33},{"ruleId":"711","severity":1,"message":"712","line":309,"column":17,"nodeType":"652","messageId":"713","endLine":309,"endColumn":18},{"ruleId":"683","severity":1,"message":"684","line":391,"column":20,"nodeType":"685","messageId":"671","endLine":391,"endColumn":22},{"ruleId":"683","severity":1,"message":"684","line":400,"column":26,"nodeType":"685","messageId":"671","endLine":400,"endColumn":28},{"ruleId":"683","severity":1,"message":"684","line":426,"column":127,"nodeType":"685","messageId":"671","endLine":426,"endColumn":129},{"ruleId":"683","severity":1,"message":"684","line":630,"column":69,"nodeType":"685","messageId":"671","endLine":630,"endColumn":71},{"ruleId":"683","severity":1,"message":"714","line":660,"column":81,"nodeType":"685","messageId":"671","endLine":660,"endColumn":83},{"ruleId":"650","severity":1,"message":"754","line":101,"column":15,"nodeType":"652","messageId":"653","endLine":101,"endColumn":20},{"ruleId":"711","severity":1,"message":"712","line":119,"column":17,"nodeType":"652","messageId":"713","endLine":119,"endColumn":18},{"ruleId":"711","severity":1,"message":"712","line":127,"column":17,"nodeType":"652","messageId":"713","endLine":127,"endColumn":18},{"ruleId":"683","severity":1,"message":"684","line":137,"column":51,"nodeType":"685","messageId":"671","endLine":137,"endColumn":53},{"ruleId":"683","severity":1,"message":"684","line":137,"column":104,"nodeType":"685","messageId":"671","endLine":137,"endColumn":106},{"ruleId":"683","severity":1,"message":"684","line":186,"column":44,"nodeType":"685","messageId":"671","endLine":186,"endColumn":46},{"ruleId":"711","severity":1,"message":"755","line":23,"column":21,"nodeType":"652","messageId":"713","endLine":23,"endColumn":29},{"ruleId":"711","severity":1,"message":"756","line":24,"column":21,"nodeType":"652","messageId":"713","endLine":24,"endColumn":28},{"ruleId":"711","severity":1,"message":"757","line":34,"column":21,"nodeType":"652","messageId":"713","endLine":34,"endColumn":27},{"ruleId":"711","severity":1,"message":"758","line":35,"column":21,"nodeType":"652","messageId":"713","endLine":35,"endColumn":26},{"ruleId":"650","severity":1,"message":"759","line":3,"column":10,"nodeType":"652","messageId":"653","endLine":3,"endColumn":24},{"ruleId":"650","severity":1,"message":"716","line":4,"column":10,"nodeType":"652","messageId":"653","endLine":4,"endColumn":13},{"ruleId":"650","severity":1,"message":"760","line":39,"column":5,"nodeType":"652","messageId":"653","endLine":39,"endColumn":10},{"ruleId":"650","severity":1,"message":"761","line":40,"column":5,"nodeType":"652","messageId":"653","endLine":40,"endColumn":12},{"ruleId":"650","severity":1,"message":"762","line":41,"column":5,"nodeType":"652","messageId":"653","endLine":41,"endColumn":13},{"ruleId":"650","severity":1,"message":"763","line":43,"column":5,"nodeType":"652","messageId":"653","endLine":43,"endColumn":16},{"ruleId":"650","severity":1,"message":"764","line":44,"column":5,"nodeType":"652","messageId":"653","endLine":44,"endColumn":18},{"ruleId":"650","severity":1,"message":"765","line":45,"column":5,"nodeType":"652","messageId":"653","endLine":45,"endColumn":21},{"ruleId":"683","severity":1,"message":"684","line":65,"column":21,"nodeType":"685","messageId":"671","endLine":65,"endColumn":23},{"ruleId":"650","severity":1,"message":"766","line":15,"column":8,"nodeType":"652","messageId":"653","endLine":15,"endColumn":22},{"ruleId":"683","severity":1,"message":"684","line":137,"column":49,"nodeType":"685","messageId":"671","endLine":137,"endColumn":51},{"ruleId":"680","severity":1,"message":"681","line":138,"column":105,"nodeType":"682","endLine":138,"endColumn":188},{"ruleId":"668","severity":1,"message":"767","line":184,"column":49,"nodeType":"670","messageId":"671","endLine":184,"endColumn":53},{"ruleId":"650","severity":1,"message":"725","line":3,"column":8,"nodeType":"652","messageId":"653","endLine":3,"endColumn":13},{"ruleId":"650","severity":1,"message":"725","line":3,"column":8,"nodeType":"652","messageId":"653","endLine":3,"endColumn":13},{"ruleId":"650","severity":1,"message":"768","line":4,"column":10,"nodeType":"652","messageId":"653","endLine":4,"endColumn":14},{"ruleId":"650","severity":1,"message":"717","line":4,"column":43,"nodeType":"652","messageId":"653","endLine":4,"endColumn":54},{"ruleId":"650","severity":1,"message":"725","line":3,"column":8,"nodeType":"652","messageId":"653","endLine":3,"endColumn":13},{"ruleId":"658","severity":1,"message":"731","line":101,"column":35,"nodeType":"660","messageId":"732","endLine":101,"endColumn":37},{"ruleId":"650","severity":1,"message":"769","line":5,"column":9,"nodeType":"652","messageId":"653","endLine":5,"endColumn":19},{"ruleId":"650","severity":1,"message":"770","line":2,"column":27,"nodeType":"652","messageId":"653","endLine":2,"endColumn":33},{"ruleId":"650","severity":1,"message":"725","line":17,"column":8,"nodeType":"652","messageId":"653","endLine":17,"endColumn":13},{"ruleId":"658","severity":1,"message":"731","line":33,"column":35,"nodeType":"660","messageId":"732","endLine":33,"endColumn":37},{"ruleId":"658","severity":1,"message":"659","line":287,"column":86,"nodeType":"660","messageId":"661","endLine":287,"endColumn":88},{"ruleId":"658","severity":1,"message":"659","line":306,"column":38,"nodeType":"660","messageId":"661","endLine":306,"endColumn":40},{"ruleId":"683","severity":1,"message":"684","line":310,"column":36,"nodeType":"685","messageId":"671","endLine":310,"endColumn":38},{"ruleId":"683","severity":1,"message":"684","line":310,"column":70,"nodeType":"685","messageId":"671","endLine":310,"endColumn":72},{"ruleId":"683","severity":1,"message":"684","line":310,"column":103,"nodeType":"685","messageId":"671","endLine":310,"endColumn":105},{"ruleId":"658","severity":1,"message":"659","line":317,"column":38,"nodeType":"660","messageId":"661","endLine":317,"endColumn":40},{"ruleId":"683","severity":1,"message":"684","line":321,"column":38,"nodeType":"685","messageId":"671","endLine":321,"endColumn":40},{"ruleId":"683","severity":1,"message":"684","line":321,"column":71,"nodeType":"685","messageId":"671","endLine":321,"endColumn":73},{"ruleId":"658","severity":1,"message":"659","line":328,"column":38,"nodeType":"660","messageId":"661","endLine":328,"endColumn":40},{"ruleId":"683","severity":1,"message":"684","line":332,"column":37,"nodeType":"685","messageId":"671","endLine":332,"endColumn":39},{"ruleId":"744","severity":1,"message":"771","line":340,"column":8,"nodeType":"746","endLine":340,"endColumn":33,"suggestions":"772"},{"ruleId":"650","severity":1,"message":"773","line":342,"column":11,"nodeType":"652","messageId":"653","endLine":342,"endColumn":16},{"ruleId":"744","severity":1,"message":"774","line":172,"column":8,"nodeType":"746","endLine":172,"endColumn":10,"suggestions":"775"},"no-native-reassign",["776"],"no-negated-in-lhs",["777"],"no-unused-vars","'FiChevronRight' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["778","779"],["780","781"],"no-dupe-keys","Duplicate key 'updateShiftTypes'.","ObjectExpression","unexpected","'emailjs' is defined but never used.",["782","783"],["784","785"],"'FiXSquare' is defined but never used.","'Alert' is defined but never used.",["786","787"],["788","789"],"'statusConfirmPassword' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Page' is defined but never used.","'Label' is defined but never used.","'Scrollbar' is defined but never used.","'SearchNotFound' is defined but never used.","'sentenceCase' is defined but never used.","'Avatar' is defined but never used.","'TablePagination' is defined but never used.","'EmployeeToolbar' is defined but never used.","'EmployeeObj' is defined but never used.","'filterName' is assigned a value but never used.","'filteredUsers' is assigned a value but never used.","'page' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","'SplitButton' is defined but never used.","'DataGrid' is defined but never used.","'InputLabel' is defined but never used.","'Modal' is defined but never used.","'GoodImage' is defined but never used.","'DateTimePicker' is defined but never used.","'AdapterDateFns' is defined but never used.","'LocalizationProvider' is defined but never used.","'GiConsoleController' is defined but never used.","no-redeclare","'i' is already defined.","redeclared","Expected '!==' and instead saw '!='.","'Divider' is defined but never used.","'Box' is defined but never used.","'CardContent' is defined but never used.","'BiPlusMedical' is defined but never used.","'BiEdit' is defined but never used.","'Stack' is defined but never used.","'GiCancel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'FormControl' is defined but never used.","'axios' is defined but never used.","'DatePicker' is defined but never used.","'AiFillPlusCircle' is defined but never used.","'CancelIcon' is defined but never used.","'productTypes' is assigned a value but never used.","'typeSet' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'TextField' is defined but never used.","'AddTypeModal' is defined but never used.","'GiVampireCape' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","react-hooks/exhaustive-deps","React Hook React.useCallback has a missing dependency: 'inputProps'. Either include it or remove the dependency array.","ArrayExpression",["790"],["791"],["792"],["793"],"'setValue' is assigned a value but never used.","'date' is assigned a value but never used.","'value1' is assigned a value but never used.","'data1' is assigned a value but never used.","'fromHour' is already defined.","'fromMin' is already defined.","'toHour' is already defined.","'toMin' is already defined.","'visuallyHidden' is defined but never used.","'order' is assigned a value but never used.","'orderBy' is assigned a value but never used.","'rowCount' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'onRequestSort' is assigned a value but never used.","'onSelectAllClick' is assigned a value but never used.","'TableContainer' is defined but never used.","Duplicate key 'unit'.","'Grid' is defined but never used.","'GiPayMoney' is defined but never used.","'Button' is defined but never used.","React Hook React.useEffect has a missing dependency: 'listReciept'. Either include it or remove the dependency array.",["794"],"'label' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["795"],"no-global-assign","no-unsafe-negation",{"messageId":"796","fix":"797","desc":"798"},{"messageId":"799","fix":"800","desc":"801"},{"messageId":"796","fix":"802","desc":"798"},{"messageId":"799","fix":"803","desc":"801"},{"messageId":"796","fix":"804","desc":"798"},{"messageId":"799","fix":"805","desc":"801"},{"messageId":"796","fix":"806","desc":"798"},{"messageId":"799","fix":"807","desc":"801"},{"messageId":"796","fix":"808","desc":"798"},{"messageId":"799","fix":"809","desc":"801"},{"messageId":"796","fix":"810","desc":"798"},{"messageId":"799","fix":"811","desc":"801"},{"desc":"812","fix":"813"},{"desc":"812","fix":"814"},{"desc":"812","fix":"815"},{"desc":"816","fix":"817"},{"desc":"818","fix":"819"},{"desc":"820","fix":"821"},"removeEscape",{"range":"822","text":"823"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"824","text":"825"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"826","text":"823"},{"range":"827","text":"825"},{"range":"828","text":"823"},{"range":"829","text":"825"},{"range":"830","text":"823"},{"range":"831","text":"825"},{"range":"832","text":"823"},{"range":"833","text":"825"},{"range":"834","text":"823"},{"range":"835","text":"825"},"Update the dependencies array to be: [inputProps]",{"range":"836","text":"837"},{"range":"838","text":"837"},{"range":"839","text":"837"},"Update the dependencies array to be: [cancelOnEscape, inputProps, handleRequestSearch, handleCancel]",{"range":"840","text":"841"},"Update the dependencies array to be: [typeReciept, typeByDate, listReciept]",{"range":"842","text":"843"},"Update the dependencies array to be: [dispatch]",{"range":"844","text":"845"},[3973,3974],"",[3973,3973],"\\",[3989,3990],[3989,3989],[3643,3644],[3643,3643],[3659,3660],[3659,3659],[3188,3189],[3188,3188],[3204,3205],[3204,3204],[1989,2009],"[inputProps]",[2200,2219],[2427,2448],[3164,3235],"[cancelOnEscape, inputProps, handleRequestSearch, handleCancel]",[17257,17282],"[typeReciept, typeByDate, listReciept]",[5640,5642],"[dispatch]"]
>>>>>>> origin/backend-tai
