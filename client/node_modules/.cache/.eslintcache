[{"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/index.js":"1","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/App.js":"2","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Store.js":"3","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/LoginStatusReducer.js":"4","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DirectionURL.js":"5","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/TypeStatusReducer.js":"6","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ProvinceReducer.js":"7","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/DistrictReducer.js":"8","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RoleReducer.js":"9","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ObjectEditShiftReducer.js":"10","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/chooseTypeProduct.js":"11","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ListProductReducer.js":"12","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ConfirmModalReducer.js":"13","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/typeProductReducer.js":"14","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/InfoUpdateProduct.js":"15","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/TypeProductValueReducer.js":"16","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/AlertReducer.js":"17","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddShiftReducer.js":"18","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusModalConfirmPassword.js":"19","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusEditShiftReducer.js":"20","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusDarkModeReducer.js":"21","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusDeleteConfirmReducer.js":"22","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddTypeReducer.js":"23","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusConfirmReducer.js":"24","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusEditTypeReducer.js":"25","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusUpdateGoodReducer.js":"26","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusIsAddTypeReducer.js":"27","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusUpdateEmployeeReducer.js":"28","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusYesConfirmReducer.js":"29","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusPayMoneyStatus.js":"30","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddEmployeeReducer.js":"31","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/ShoppingBagsReducer.js":"32","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/ListRecieptReducer.js":"33","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/StatusEditInfomationBill.js":"34","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/currentEditEmployeeReducer.js":"35","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/StatusShowHistoryRecieptReducer.js":"36","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/InfomationBillEdit.js":"37","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/employeeSackedListReducer.js":"38","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/employeeListReducer.js":"39","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateNextWeekTimeKeepingStatus.js":"40","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/listTimeKeepingReducer.js":"41","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/listShiftAssignReducer.js":"42","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/addTimeKeepingStatus.js":"43","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateNextWeekTimeKeepingValue.js":"44","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/addNextWeekTimeKeepingStatus.js":"45","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/nextWeekTimeKeepingReducer.js":"46","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateTimeKeepingStatus.js":"47","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateTimeKeeperValue.js":"48","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/StatusSelectAll.js":"49","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/ListRecieptDelete.js":"50","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/SearchReducer.js":"51","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/TypeByDate.js":"52","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/TypeReciept.js":"53","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/InfoUserReducer.js":"54","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ListShiftReducer.js":"55","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Body.js":"56","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/ForgotPassword.js":"57","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Register.js":"58","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Login.js":"59","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/LoginWithEmployee.js":"60","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DashboardURL.js":"61","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/ModalConfirmPassword.js":"62","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Partials/SideNavBar.js":"63","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeeManager.js":"64","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodManager.js":"65","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/GoodImport.js":"66","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/SellProduct.js":"67","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/ReiceiptManager.js":"68","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/DashBoard.js":"69","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/Profile.js":"70","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/EditTypeModal.js":"71","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateTimeKeepingModal.js":"72","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/SearchReceipt.js":"73","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/ControlReciept.js":"74","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/DateReciept.js":"75","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ModalAdd.js":"76","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/Regulation.js":"77","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileSetting.js":"78","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ListShift.js":"79","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ChangePassword.js":"80","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileDetail.js":"81","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/AddTypeModal.js":"82","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/DarkMode.js":"83","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileHeader.js":"84","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/Statistic.js":"85","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/StatusReceiptType.js":"86","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/HistoryReciept.js":"87","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/Print.js":"88","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/ShoppingBags.js":"89","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/TableReciept.js":"90","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/Tabs.js":"91","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/ConfirmModal.js":"92","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/UpdateGoodModal.js":"93","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/SearchBar.js":"94","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/GoodTable.js":"95","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddTimeKeeperModal.js":"96","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/TimekeepingTable.js":"97","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/NoJobEmployee.js":"98","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateNextWeekTimeKeeping.js":"99","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddNextWeekTimeKeeping.js":"100","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UnShiftEmployee.js":"101","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/FixedCalendar.js":"102","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddEmployeeModal.js":"103","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/PayMoneyModal.js":"104","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/SackedEmployeeMenu.js":"105","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/fakeData.js":"106","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateEmployeeModal.js":"107","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeTableHeader.js":"108","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/SearchNotFound.js":"109","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Label.js":"110","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Scrollbar.js":"111","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Page.js":"112","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeMoreMenu.js":"113","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeToolbar.js":"114","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/GroupButton.js":"115","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/TableReciept.js":"116","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/ComponentToPrint.js":"117","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/TableRow.js":"118","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/FixedCalendarCell.js":"119","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/BaseOptionChart.js":"120"},{"size":295,"mtime":1633526918199,"results":"121","hashOfConfig":"122"},{"size":3295,"mtime":1637134171100,"results":"123","hashOfConfig":"122"},{"size":5981,"mtime":1637134171181,"results":"124","hashOfConfig":"122"},{"size":284,"mtime":1633526918189,"results":"125","hashOfConfig":"122"},{"size":2136,"mtime":1633861365892,"results":"126","hashOfConfig":"122"},{"size":331,"mtime":1633861365892,"results":"127","hashOfConfig":"122"},{"size":372,"mtime":1634554437218,"results":"128","hashOfConfig":"122"},{"size":364,"mtime":1634708338277,"results":"129","hashOfConfig":"122"},{"size":304,"mtime":1634554437218,"results":"130","hashOfConfig":"122"},{"size":330,"mtime":1634050541311,"results":"131","hashOfConfig":"122"},{"size":349,"mtime":1635745215659,"results":"132","hashOfConfig":"122"},{"size":684,"mtime":1637134171179,"results":"133","hashOfConfig":"122"},{"size":468,"mtime":1634555131980,"results":"134","hashOfConfig":"122"},{"size":698,"mtime":1637134171185,"results":"135","hashOfConfig":"122"},{"size":533,"mtime":1637134171174,"results":"136","hashOfConfig":"122"},{"size":643,"mtime":1634797384962,"results":"137","hashOfConfig":"122"},{"size":643,"mtime":1635403823793,"results":"138","hashOfConfig":"122"},{"size":293,"mtime":1633939930791,"results":"139","hashOfConfig":"122"},{"size":360,"mtime":1634554437221,"results":"140","hashOfConfig":"122"},{"size":302,"mtime":1634050541312,"results":"141","hashOfConfig":"122"},{"size":292,"mtime":1634050541312,"results":"142","hashOfConfig":"122"},{"size":378,"mtime":1634554437220,"results":"143","hashOfConfig":"122"},{"size":294,"mtime":1634554437218,"results":"144","hashOfConfig":"122"},{"size":293,"mtime":1634554437219,"results":"145","hashOfConfig":"122"},{"size":299,"mtime":1634554437220,"results":"146","hashOfConfig":"122"},{"size":313,"mtime":1635414209104,"results":"147","hashOfConfig":"122"},{"size":360,"mtime":1634554437221,"results":"148","hashOfConfig":"122"},{"size":329,"mtime":1634651182404,"results":"149","hashOfConfig":"122"},{"size":338,"mtime":1634555131981,"results":"150","hashOfConfig":"122"},{"size":314,"mtime":1634651182400,"results":"151","hashOfConfig":"122"},{"size":314,"mtime":1634651182398,"results":"152","hashOfConfig":"122"},{"size":1299,"mtime":1636911108353,"results":"153","hashOfConfig":"122"},{"size":3186,"mtime":1637134171180,"results":"154","hashOfConfig":"122"},{"size":331,"mtime":1636527068504,"results":"155","hashOfConfig":"122"},{"size":869,"mtime":1636527068501,"results":"156","hashOfConfig":"122"},{"size":331,"mtime":1636527068504,"results":"157","hashOfConfig":"122"},{"size":347,"mtime":1636527068502,"results":"158","hashOfConfig":"122"},{"size":1741,"mtime":1637134171170,"results":"159","hashOfConfig":"122"},{"size":2511,"mtime":1637134171169,"results":"160","hashOfConfig":"122"},{"size":385,"mtime":1637134171171,"results":"161","hashOfConfig":"122"},{"size":2985,"mtime":1637134171170,"results":"162","hashOfConfig":"122"},{"size":2295,"mtime":1637134171170,"results":"163","hashOfConfig":"122"},{"size":329,"mtime":1637134171164,"results":"164","hashOfConfig":"122"},{"size":960,"mtime":1637134171171,"results":"165","hashOfConfig":"122"},{"size":370,"mtime":1637134171162,"results":"166","hashOfConfig":"122"},{"size":2247,"mtime":1637134171171,"results":"167","hashOfConfig":"122"},{"size":344,"mtime":1637134171172,"results":"168","hashOfConfig":"122"},{"size":887,"mtime":1637134171172,"results":"169","hashOfConfig":"122"},{"size":370,"mtime":1637134171180,"results":"170","hashOfConfig":"122"},{"size":613,"mtime":1636911108350,"results":"171","hashOfConfig":"122"},{"size":360,"mtime":1636911108351,"results":"172","hashOfConfig":"122"},{"size":328,"mtime":1636697502426,"results":"173","hashOfConfig":"122"},{"size":527,"mtime":1636697502427,"results":"174","hashOfConfig":"122"},{"size":3099,"mtime":1637646892564,"results":"175","hashOfConfig":"122"},{"size":1143,"mtime":1637646892565,"results":"176","hashOfConfig":"122"},{"size":1562,"mtime":1636697502407,"results":"177","hashOfConfig":"122"},{"size":12653,"mtime":1635403823756,"results":"178","hashOfConfig":"122"},{"size":15274,"mtime":1635403823772,"results":"179","hashOfConfig":"122"},{"size":12908,"mtime":1637134171148,"results":"180","hashOfConfig":"122"},{"size":8799,"mtime":1637646892561,"results":"181","hashOfConfig":"122"},{"size":1722,"mtime":1636697502431,"results":"182","hashOfConfig":"122"},{"size":1908,"mtime":1634554437210,"results":"183","hashOfConfig":"122"},{"size":11625,"mtime":1637646892561,"results":"184","hashOfConfig":"122"},{"size":30620,"mtime":1637134171129,"results":"185","hashOfConfig":"122"},{"size":5836,"mtime":1635931904094,"results":"186","hashOfConfig":"122"},{"size":30502,"mtime":1637134171146,"results":"187","hashOfConfig":"122"},{"size":15303,"mtime":1637134171157,"results":"188","hashOfConfig":"122"},{"size":1936,"mtime":1636911108345,"results":"189","hashOfConfig":"122"},{"size":4134,"mtime":1637646892559,"results":"190","hashOfConfig":"122"},{"size":3906,"mtime":1637646892562,"results":"191","hashOfConfig":"122"},{"size":7609,"mtime":1635858815616,"results":"192","hashOfConfig":"122"},{"size":18190,"mtime":1637134171139,"results":"193","hashOfConfig":"122"},{"size":944,"mtime":1636911108345,"results":"194","hashOfConfig":"122"},{"size":12339,"mtime":1637134171154,"results":"195","hashOfConfig":"122"},{"size":8866,"mtime":1637134171154,"results":"196","hashOfConfig":"122"},{"size":14410,"mtime":1636697502412,"results":"197","hashOfConfig":"122"},{"size":7609,"mtime":1636697502416,"results":"198","hashOfConfig":"122"},{"size":1116,"mtime":1636697502415,"results":"199","hashOfConfig":"122"},{"size":7397,"mtime":1636697502412,"results":"200","hashOfConfig":"122"},{"size":9603,"mtime":1637646892562,"results":"201","hashOfConfig":"122"},{"size":19926,"mtime":1637646892563,"results":"202","hashOfConfig":"122"},{"size":8315,"mtime":1637134171144,"results":"203","hashOfConfig":"122"},{"size":3038,"mtime":1634554437211,"results":"204","hashOfConfig":"122"},{"size":4427,"mtime":1635403823790,"results":"205","hashOfConfig":"122"},{"size":1776,"mtime":1634554437191,"results":"206","hashOfConfig":"122"},{"size":4034,"mtime":1636697502417,"results":"207","hashOfConfig":"122"},{"size":1136,"mtime":1636697502419,"results":"208","hashOfConfig":"122"},{"size":8056,"mtime":1637134171156,"results":"209","hashOfConfig":"122"},{"size":3571,"mtime":1636911108349,"results":"210","hashOfConfig":"122"},{"size":26318,"mtime":1637134171155,"results":"211","hashOfConfig":"122"},{"size":1313,"mtime":1637134171161,"results":"212","hashOfConfig":"122"},{"size":3407,"mtime":1634555131980,"results":"213","hashOfConfig":"122"},{"size":32956,"mtime":1636527068478,"results":"214","hashOfConfig":"122"},{"size":5332,"mtime":1634554437193,"results":"215","hashOfConfig":"122"},{"size":7438,"mtime":1637134171147,"results":"216","hashOfConfig":"122"},{"size":15952,"mtime":1637134171130,"results":"217","hashOfConfig":"122"},{"size":8161,"mtime":1637134171137,"results":"218","hashOfConfig":"122"},{"size":4090,"mtime":1637134171134,"results":"219","hashOfConfig":"122"},{"size":19580,"mtime":1637134171138,"results":"220","hashOfConfig":"122"},{"size":19699,"mtime":1637134171130,"results":"221","hashOfConfig":"122"},{"size":10075,"mtime":1637134171137,"results":"222","hashOfConfig":"122"},{"size":4846,"mtime":1637134171132,"results":"223","hashOfConfig":"122"},{"size":20932,"mtime":1637134171129,"results":"224","hashOfConfig":"122"},{"size":9835,"mtime":1637134171135,"results":"225","hashOfConfig":"122"},{"size":4857,"mtime":1637134171136,"results":"226","hashOfConfig":"122"},{"size":678,"mtime":1636297938177,"results":"227","hashOfConfig":"122"},{"size":20613,"mtime":1637134171138,"results":"228","hashOfConfig":"122"},{"size":2833,"mtime":1636527623015,"results":"229","hashOfConfig":"122"},{"size":0,"mtime":1634651182383,"results":"230","hashOfConfig":"122"},{"size":2373,"mtime":1634651182378,"results":"231","hashOfConfig":"122"},{"size":1478,"mtime":1634651182382,"results":"232","hashOfConfig":"122"},{"size":462,"mtime":1634651182380,"results":"233","hashOfConfig":"122"},{"size":4869,"mtime":1637134171131,"results":"234","hashOfConfig":"122"},{"size":2399,"mtime":1634651182377,"results":"235","hashOfConfig":"122"},{"size":2693,"mtime":1634554437190,"results":"236","hashOfConfig":"122"},{"size":17344,"mtime":1637134171161,"results":"237","hashOfConfig":"122"},{"size":6801,"mtime":1637134171156,"results":"238","hashOfConfig":"122"},{"size":11157,"mtime":1637134171147,"results":"239","hashOfConfig":"122"},{"size":9250,"mtime":1637134171133,"results":"240","hashOfConfig":"122"},{"size":5405,"mtime":1634554437190,"results":"241","hashOfConfig":"122"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1evuik7",{"filePath":"244","messages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246"},{"filePath":"247","messages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"307"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"310"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"323"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"328"},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368"},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"379"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"382"},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"388"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"394"},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404"},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"412"},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424"},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429"},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"440"},{"filePath":"441","messages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"443"},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448"},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"451","messages":"452","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"453"},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"456"},{"filePath":"457","messages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"459"},{"filePath":"460","messages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462"},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468"},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"471"},{"filePath":"472","messages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"474"},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"477"},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"480"},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"483"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486"},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"489"},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492"},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"497"},{"filePath":"498","messages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"500"},{"filePath":"501","messages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"503","messages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"507","messages":"508","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"509","messages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511"},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518"},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521"},{"filePath":"522","messages":"523","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524"},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"527"},{"filePath":"528","messages":"529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/index.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/App.js",["530","531"],"import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nimport DirectionURL from './Router/DirectionURL';\nimport './css/App.css'\nimport { connect } from 'react-redux'\nimport axios from 'axios';\nimport Alert from '@mui/material/Alert';\nimport { FiChevronRight, FiXSquare } from \"react-icons/fi\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  async componentWillMount() {\n    if (localStorage.getItem('token') && localStorage.getItem('token') !== \"\") {\n      axios.post(`http://localhost:5000/refresh`, {\n        token: localStorage.getItem('token'),\n      })\n        .then(res => {\n          console.log(\"Thành công\");\n          console.log(res.data);\n          if (res.status === 200) {\n            this.props.setRole()\n            localStorage.setItem('token', res.data.token);\n            this.props.updateProfile(res.data.data);\n            this.props.updateRecieptUser(res.data.data.receipts)\n            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n            this.props.updateShiftTypes(res.data.data.shiftTypes)\n            this.props.changeLoginStatus();\n            this.props.getEmployee(res.data.data.employees);\n          }\n        })\n        .catch(err => {\n          console.log(\"thất bại\");\n          console.log(err)\n        })\n    }\n  }\n\n  autoHideAlert = () => {\n    setTimeout(() => this.props.hideAlert(), 4000);\n  }\n\n  render() {\n    return (\n      <Router>\n        <DirectionURL></DirectionURL>\n        {this.props.alertReducer.status ? this.autoHideAlert() : null}\n        {this.props.alertReducer.status ? <Alert style={{ cursor: 'pointer' }} onClick={() => this.props.hideAlert()} className=\"message-error\" severity={this.props.alertReducer.typeMessage}>{this.props.alertReducer.message} — check it out! <FiXSquare></FiXSquare></Alert> : null}\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    isLogin: state.loginStatus,\n    alertReducer: state.alert,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    changeLoginStatus: () => {\n      dispatch({\n        type: \"CHANGE_LOGIN_STATUS\",\n      });\n    },\n    updateProvince: (data) => {\n      dispatch({\n        type: \"UPDATE_DATA\",\n        data: data,\n      })\n    },\n    updateRecieptUser: (data) => {\n      dispatch({\n        type: \"UPDATE_RECIEPT_USER\",\n        listReciept: data,\n      })\n    },\n    updateProfile: (data) => {\n      dispatch({\n        type: \"UPDATA_DATA_USER\",\n        data: data,\n      })\n    },\n    updateAvatar: (avatar) => {\n      dispatch({\n        type: \"UPDATE_AVATAR\",\n        avatar: avatar,\n      })\n    },\n    updateShiftTypes: (shiftTypes) => {\n      dispatch({\n        type: \"UPDATE_DATA_SHIFT_USER\",\n        shiftTypes: shiftTypes,\n      })\n    },\n    hideAlert: () => {\n      dispatch({\n        type: \"HIDE_ALERT\",\n      })\n    },\n    getEmployee: (data) => {\n      dispatch({\n          type: \"GET_EMPLOYEE\",\n          employees: data,\n      });\n    },\n    setRole: () => {\n      dispatch({\n          type: \"ADMIN_ROLE\"\n      });\n  },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Store.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/LoginStatusReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DirectionURL.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/TypeStatusReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ProvinceReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/DistrictReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RoleReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ObjectEditShiftReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/chooseTypeProduct.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ListProductReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ConfirmModalReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/typeProductReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/InfoUpdateProduct.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/TypeProductValueReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/AlertReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddShiftReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusModalConfirmPassword.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusEditShiftReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusDarkModeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusDeleteConfirmReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddTypeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusConfirmReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusEditTypeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusUpdateGoodReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusIsAddTypeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusUpdateEmployeeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusYesConfirmReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusPayMoneyStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddEmployeeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/ShoppingBagsReducer.js",["532"],"const shoppingBagsInitialState = [],\n    shoppingBagsReducer = (state = shoppingBagsInitialState, action) => {\n        switch (action.type) {\n            case \"ADD_NEW_PRODUCT_SHOPPING_BAGS\": \n                return [...state, action.newProduct];\n            case \"RAISE_QUANTITY_SHOPPING_BAGS\":\n                return state.map(value => {\n                    if (value.product.name === action.name) {\n                        value.quantity += 1;\n                    }\n                    return value\n                })\n            case \"REDUCE_QUANTITY_SHOPPING_BAGS\":\n                return state.map(value => {\n                    if (value.product.name === action.name) {\n                        value.quantity -= 1;\n                    }\n                    return value\n                })\n            case \"DELETE_PRODUCT_SHOPPING_BAGS\":\n                return state.filter((value) => {\n                    if (value.product.name !== action.name) {\n                        return value;\n                    } \n                })\n            case \"RESET_SHOPPING_BAGS\":\n                return state = [];\n            case \"INFO_SHOPPING_BAGS_EDIT\":\n                return action.listProduct\n            default:\n                return state\n        }\n    }\n\nexport default shoppingBagsReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/ListRecieptReducer.js",["533","534","535"],"const listRecieptInitialState = [],\n    listRecieptReducer = (state = listRecieptInitialState, action) => {\n        switch (action.type) {\n            case \"UPDATE_RECIEPT_USER\":\n                action.listReciept.map(value => {\n                    let data = {\n                        MAHD: value._id.receiptID,\n                        name:  value.employeeID.name,\n                        idUser: value.employeeID._id.employeeID ? value.employeeID._id.employeeID : '',\n                        date: value.createAt,\n                        discount: value.discount,\n                        totalMoney: value.totalMoney,\n                        totalFinalMoney: value.totalFinalMoney,\n                        listProduct: value.listItem,\n                        time: value.timeCreate,\n                        isEdit: value.isEdit,\n                        oldBill: value.oldBill,\n                        deleted: value.deleted ? value.deleted : false,\n                    }\n                    state.push(data)\n                })\n                return state;\n            case \"ADD_RECIEPT\":\n                return [...state, action.newReciept]\n            case \"EDIT_SHOPPING_BAGS\":\n                return state.filter((value) => {\n                    if (value.MAHD === action.MAHD) {\n                        value.isEdit = true\n                    }\n                    return value;\n                })\n            case \"DELETE_RECIEPT\":\n                return state.filter((value) => {\n                    if (value.MAHD === action.MAHD) {\n                        value.deleted = true\n                    }\n                    return value;\n                })\n            case \"DELETE_ONE_RECIEPT\":\n                return state.filter((value) => {\n                    if (value.MAHD !== action.MAHD) {\n                        return value\n                    }\n                })\n            case \"DELETE_MAHD_SELECTED_RECIEPT\":\n                return state.filter(value => {\n                    action.listMAHD.map(value1 => {\n                        if (value.MAHD === value1) {\n                            value.deleted = true\n                        }\n                    })\n                    return value\n                })\n            case \"DELETE_MAHD_INVOICE_RECIEPT\":\n                return state.filter(value => {\n                    return !value.deleted\n                })\n            case \"RESTONE_ONE_RECIEPT\":\n                return state.filter(value => {\n                    if (value.MAHD === action.MAHD) {\n                        value.deleted = false;\n                    }\n                    return value\n                })\n            case \"RESTONE_ALL_RECIEPT\":\n                return state.filter(value => {\n                    value.deleted = false;\n                    return value\n                })\n            case \"DELETE_ALL_RECIEPT\":\n                return state.filter(value => {\n                    value.deleted = true\n                    return value;\n                })\n            case \"RESET_ALL_RECIEPT_USER\":\n                return [];\n            default:\n                return state\n        }\n    }\n\nexport default listRecieptReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/StatusEditInfomationBill.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/currentEditEmployeeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/StatusShowHistoryRecieptReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/InfomationBillEdit.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/employeeSackedListReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/employeeListReducer.js",["536","537","538"],"const listEmployeeInitialState = {\n    employees: [\n        // {\n        //     _id: { \n        //         employeeID: '3', \n        //         storeID: '19522006@gm.uit.edu.vn' \n        //     },\n        //     managerID: '19522006@gm.uit.edu.vn',\n        //     password: '1212',\n        //     firstName: '1212',\n        //     lastName: '1212',\n        //     phoneNumber: '1212',\n        //     dateOfBirth: \"2021-11-20T00:00:00.000Z\",\n        //     email: '12121',\n        //     address: '1212',\n        //     cardID: '1212',\n        //     startDate: \"2021-11-26T00:00:00.000Z\",\n        //     deleted: false,\n        //     __v: 0\n        // },\n    ]\n}\n\nconst  listEmployeeReducer = (state = listEmployeeInitialState, action) => {\n        switch (action.type) {\n            case \"GET_EMPLOYEE\":\n                state.employees = action.employees;\n                return state;\n            case \"ADD_EMPLOYEE\":\n                return {\n                    employees : [...state.employees, action.employees ]\n                }\n            case \"UPDATE_EMPLOYEE\":\n                {\n                    var newState = [];\n                    for(var i = 0 ; i < state.employees.length ; i ++)\n                    {\n                        if(i != action.index)\n                        {\n                            newState.push(state.employees[i]);\n                        }\n                        else \n                        {\n                            newState.push(action.data);\n                        }\n                    }\n                    console.log(\"newState\", newState);\n                    return {\n                        employees : newState\n                    }\n\n                }\n                case \"DELETE_EMPLOYEE\":\n                {\n                    console.log(\"action\", action);\n                    var newState = [];\n                    for(var i = 0 ; i < state.employees.length ; i ++)\n                    {\n                        if(state.employees[i]._id.employeeID !== action.id)\n                        {\n                            newState.push(state.employees[i]);\n                        }\n                        else {\n                            console.log(\"Kiếm đc cái xoá rồi\")\n                        }\n                    }\n                    return {\n                        employees : newState\n                    }\n\n                }\n            default:\n                return state\n        }\n    }\n\nexport default listEmployeeReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateNextWeekTimeKeepingStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/listTimeKeepingReducer.js",["539","540","541"],"const listTimeKeepingInitialState =   \n[\n    // {\n    //     _id: {\n    //         dateInWeek: 'T7',\n    //         storeID: '19522006@gm.uit.edu.vn',\n    //         shiftType: {\n    //             _id: {\n    //                 shiftID: 'v908tB',\n    //                 storeID: '19522006@gm.uit.edu.vn',\n    //             },\n    //         },\n    //         employee: {\n    //             _id: {\n    //                 employeeID: '1',\n    //                 storeID: '19522006@gm.uit.edu.vn',\n    //             },\n    //         },\n    //     },\n    //     realDate: '2021-11-11',\n    //     isPaidSalary: false,\n    //     createdAt: '2021-01-02',\n    // }\n    \n];\n\nconst listTimeKeepingReducer = (state = listTimeKeepingInitialState, action) => {\n        switch (action.type) {\n            // case \"SET_NEXT_WEEK_TIMEKEEPER\":\n            //     return{\n            //         state: action.data\n            //     }\n            case \"ADD_NEW_TIME_KEEPER\":\n                return [...state, action.data]\n            case \"UPDATE_TIMEKEEPER\":\n                {\n                    var newState = [];\n                    for(var i = 0 ; i < state.length ; i ++)\n                    {\n                        if(i != action.index)\n                        {\n                            newState.push(state[i]);\n                        }\n                        else \n                        {\n                            newState.push(action.data);\n                        }\n                    }\n                    return newState;\n                }\n            case \"DELETE_TIMEKEEPER\":\n                {\n                    console.log(\"action\", action);\n                    var newState = [];\n                    for(var i = 0 ; i < state.length ; i ++)\n                    {\n                        if(state[i]._id.dateInWeek !== action.data._id.dateInWeek \n                            || state[i]._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \n                            || state[i]._id.employee._id.employeeID !== action.data._id.employee._id.employeeID)\n                        {\n                            newState.push(state[i]);\n                        }\n                        else {\n                            console.log(\"Kiếm đc cái xoá rồi\")\n                        }\n                    }\n                    return newState;\n\n                    // return state.filter((value, key) => \n                    //     (\n                    //         value._id.dateInWeek !== action.data._id.dateInWeek \n                    //         || value._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \n                    //         || value._id.employee._id.employeeID !== action.data._id.employee._id.employeeID \n                    //     )\n                    // );\n                }\n               \n                \n            default:\n                return state\n        }\n    }\n\nexport default listTimeKeepingReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/listShiftAssignReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/addTimeKeepingStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateNextWeekTimeKeepingValue.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/addNextWeekTimeKeepingStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/nextWeekTimeKeepingReducer.js",["542"],"const nextWeekTimeKeepingInitialState =\n    \n[\n    {\n        _id: {\n            dateInWeek: \"T6\",\n            storeID: \"19522006@gm.uit.edu.vn\",\n            shiftType: {\n                _id: {\n                    shiftID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n            },\n            employee: {\n                _id: {\n                    employeeID: \"2\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n            },\n        },\n        alternativeEmployee: {\n            _id: {\n                employeeID: \"3\",\n                storeID: \"19522006@gm.uit.edu.vn\",\n            },\n        },\n        realDate: \"2021-12-04\",\n    }\n];\n\nconst nextWeekTimeKeepingReducer = (state = nextWeekTimeKeepingInitialState, action) => {\n        switch (action.type) {\n            case \"SET_NEXT_WEEK_TIMEKEEPER\":\n                return action.data;\n            case \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\":\n                return [...state, action.data]\n            case \"UPDATE_NEXT_WEEK_TIMEKEEPER\":\n                {\n                    var newState = [];\n                    for(var i = 0 ; i < state.length ; i ++)\n                    {\n                        if(i != action.index)\n                        {\n                            newState.push(state[i]);\n                        }\n                        else \n                        {\n                            newState.push(action.data);\n                        }\n                    }\n                    return newState;\n                }\n            case \"DELETE_NEXT_WEEK_TIMEKEEPER\":\n            {\n                console.log(action.data._id.dateInWeek);\n                return state.filter((value, key) => \n                (\n                    value._id.dateInWeek !== action.data._id.dateInWeek \n                    || value._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \n                    || value._id.employee._id.employeeID !== action.data._id.employee._id.employeeID\n                    || value._id.realDate !== action.data._id.realDate\n                ));\n            }\n                \n            default:\n                return state\n        }\n    }\n\nexport default nextWeekTimeKeepingReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateTimeKeepingStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateTimeKeeperValue.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/StatusSelectAll.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/ListRecieptDelete.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/SearchReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/TypeByDate.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/TypeReciept.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/InfoUserReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ListShiftReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Body.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/ForgotPassword.js",["543","544","545"],"import React, { Component } from 'react';\nimport Avatar from '@mui/material/Avatar'\nimport { IconContext } from \"react-icons\";\nimport { FiSend } from \"react-icons/fi\";\nimport { BsFillEnvelopeFill, BsLockFill, BsBoxArrowInLeft, BsCodeSlash } from \"react-icons/bs\";\nimport emailjs from 'emailjs-com';\nimport axios from 'axios';\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport { connect } from 'react-redux';\nvar bcrypt = require('bcryptjs');\n\n\nclass ForgotPassword extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            code: \"\",\n            statusSendCode: true,\n        }\n    }\n\n\n    // Send code tới người dùng\n    sendCode = (a = this.makeCode(6)) => {\n        this.setState({\n            code: \"123456\"\n        })\n        // this.setState({\n        //     code: a,\n        // })\n        // emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\n        // emailjs.send(\"gmail_main\", \"template_plasdgf\", {\n        //     To_mail: `${document.querySelector('#email').value}`,\n        //     code: `${a}`,\n        // })\n        //     .then((response) => {\n        //         console.log('SUCCESS!', response.status, response.text);\n        //     }, (err) => {\n        //         console.log('FAILED...', err);\n        //     });\n    }\n\n    // Tạo code để xác nhận\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    // Hashpassword\n    hash = (pass) => {\n        var hash = bcrypt.hashSync(pass, 12)\n        return hash;\n    }\n\n    //Check tìm lại mật khẩu\n    findPassword = (e) => {\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword()) {\n            const form = document.getElementById('findpass-form');\n            axios.post(`http://localhost:5000/find-password`, {\n                email: document.querySelector('#email').value,\n                password: this.hash(document.getElementById('password').value),\n            })\n                .then(res => {\n                    form.reset();\n                    console.log(res.data.status);\n                    switch (res.data.status) {\n                        case 1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"success\");\n                            break;\n                        case -1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"error\");\n                            break;\n                        default:\n                            break;\n                    }\n                })\n                .catch(err => {\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Error system\", \"error\");\n                })\n        }\n    }\n\n\n    // Handle user blue change in input\n    blurEmail = () => {\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        const event = document.querySelector('#email');\n        const elementValue = event.value;\n        const formGroup = event.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            this.setState({\n                statusSendCode: false,\n            })\n            return true;\n        }\n    }\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurCode = () => {\n        const e = document.getElementById('code');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (this.state.code === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\n            return false\n        } else if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\n            return false\n        } else if (elementValue !== this.state.code) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\n            return false\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurRePassword = () => {\n        const e = document.getElementById('re-password')\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (document.getElementById('password').value !== elementValue) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    componentWillMount() {\n        document.title = 'Find password'\n    }\n\n    render() {\n        const enterPress = this.findPassword;\n        document.onkeydown = function (e) {\n            switch (e.which) {\n                case 13:\n                    enterPress(e);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return (\n            <div className=\"Login\">\n                <div className=\"form-findpass\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <FiSend></FiSend>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Find password</div>\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"><BsBoxArrowInLeft className=\"arrow-return\"></BsBoxArrowInLeft></NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/findpass-submit?_method=PUT\" method=\"POST\" id=\"findpass-form\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"Ex: abc@gmail.com\" type=\"text\" />\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND</button>\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"code\" className=\"form-label\">Code</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\n\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">New password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">Re-password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"password\" rules=\"required|min:6\" id=\"re-password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div onClick={(e) => this.findPassword(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Find Password</div>\n                                </div>\n\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        }\n    }\n}\n\n\n\nexport default connect(mapDispatchToProps)(ForgotPassword);\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Register.js",["546","547","548"],"import React, { Component } from 'react';\nimport '../../css/Login.css'\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport Avatar from '@mui/material/Avatar'\nimport { IconContext } from \"react-icons\";\nimport { FiChevronLeft, FiUserPlus } from \"react-icons/fi\";\nimport { BsFillEnvelopeFill, BsLockFill, BsCodeSlash } from \"react-icons/bs\";\nimport { FaPhoneSquare } from \"react-icons/fa\";\nimport axios from 'axios';\nimport emailjs from 'emailjs-com';\nvar bcrypt = require('bcryptjs');\n\n\nclass Register extends Component {\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            code: \"\",\n            statusSendCode: true,\n        }\n    }\n\n\n    // Send code tới người dùng\n    sendCode = (a = this.makeCode(6)) => {\n        this.setState({\n            code: \"123456\"\n        })\n        // this.setState({\n        //     code: a,\n        // })\n        // emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\n        // emailjs.send(\"gmail_main\", \"template_plasdgf\", {\n        //     To_mail: `${document.getElementById('email').value}`,\n        //     code: `${a}`,\n        // })\n        //     .then((response) => {\n        //         console.log('SUCCESS!', response.status, response.text);\n        //     }, (err) => {\n        //         console.log('FAILED...', err);\n        //     });\n    }\n\n    // status SignUp \n    SignUp = (e) => {\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword() && this.blurTel()) {\n            axios.post(`http://localhost:5000/register-with-email`, {\n                email: document.getElementById('email').value,\n                password: this.hash(document.getElementById('password').value),\n                tel: document.getElementById('tel').value,\n            })\n                .then(res => {\n                    console.log(res.data);\n                    switch (res.data.status) {\n                        case 1:\n                            localStorage.setItem('token', res.data.token);\n                            this.props.updateProfile(res.data.data);\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n                            this.props.changeLoginStatus();\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"success\");\n\n                            break;\n                        case -1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"error\");\n                            break;\n                        default:\n                            break;\n                    }\n                })\n                .catch(err => {\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Error system\", \"error\");\n                })\n\n        }\n    }\n\n\n    // Tạo mã code cho người dùng xác nhận\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    // Hashpassword\n    hash = (pass) => {\n        var hash = bcrypt.hashSync(pass, 12)\n        return hash;\n    }\n\n\n    // Handle user : blur, change in input\n    blurEmail = () => {\n        const regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        const e = document.getElementById('email');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            this.setState({\n                statusSendCode: false,\n            })\n            return true;\n        }\n    }\n\n    blurCode = () => {\n        const e = document.getElementById('code');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (this.state.code === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\n            return false\n        } else if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\n            return false\n        } else if (elementValue !== this.state.code) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\n            return false\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurRePassword = () => {\n        const e = document.getElementById('re-password')\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (document.getElementById('password').value !== elementValue) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true\n        }\n    }\n\n    blurTel = () => {\n        const e = document.getElementById('tel');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        const regex = /^\\d+$/;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Phone is not in the correct format\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    componentWillMount() {\n        document.title = 'Register'\n    }\n\n    render() {\n        const enterPress = this.SignUp;\n        document.onkeydown = function (e) {\n            switch (e.which) {\n                case 13:\n                    enterPress(e);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return (\n            <div className=\"Login\">\n                <div className=\"form-register\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <FiUserPlus></FiUserPlus>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Register</div>\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Login</NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/register-submit\" method=\"post\" id=\"register-form\">\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND CODE</button>\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"re-password\" id=\"re-password\" placeholder=\"Emter re-password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <FaPhoneSquare className=\"input-custom-icon\" ></FaPhoneSquare>\n                                        </span>\n                                        <input className=\"form-control\" onBlur={(e) => this.blurTel(e)} onChange={(e) => this.changeInput(e)} name=\"tel\" rules=\"required\" id=\"tel\" placeholder=\"Ex: 0303030303\" type=\"tel\" />\n\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"register-description\">Bằng cách ấn vào nút\n                                    <span className=\"register-description__keyword\">“ĐĂNG KÝ”</span>\n                                    , tôi đồng ý với\n                                    <span className=\"register-description__keyword\">Điều Khoản Sử Dụng</span> và\n                                    <div className=\"register-description__keyword\"> Chính Sách Bảo Mật</div>\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div onClick={(e) => this.SignUp(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign Up</div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div >\n            </div >\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        updateProfile: (data) => {\n            dispatch({\n                type: \"UPDATA_DATA_USER\",\n                data: data,\n            })\n        },\n        updateAvatar: (avatar) => {\n            dispatch({\n                type: \"UPDATE_AVATAR\",\n                avatar: avatar,\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Login.js",["549","550","551"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../css/Login.css'\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\nimport { FiChevronRight } from \"react-icons/fi\";\nimport { BiUser } from \"react-icons/bi\";\nimport { Avatar } from '@mui/material'\nimport { IconContext } from \"react-icons\";\nimport { GoogleLogin } from 'react-google-login';\nimport axios from 'axios';\n\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            appId: \"543752153590340\",\n            clientId: \"826925109796-mi95l41fi57bdlolpvnfdg5bpt9oc81h.apps.googleusercontent.com\",\n        }\n    }\n\n    // Login with google\n    onLoginSuccess = async (res) => {\n        this.props.setRole();\n        await axios.post(`http://localhost:5000/sign-in-with-google`, res.profileObj)\n            .then(res => {\n                console.log(\"thành công\");\n                console.log(res.data);\n                switch (res.data.status) {\n                    case 1:\n                        localStorage.setItem('token', res.data.token);\n                        this.props.updateProfile(res.data.data);\n                        this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n                        this.props.updateShiftTypes(res.data.data.shiftTypes);\n                        this.props.updateRecieptUser(res.data.data.receipts);\n                        this.props.changeLoginStatus();\n                        this.props.hideAlert();\n                        this.props.showAlert(res.data.message, \"success\");\n                        break;\n                    case -1:\n                        this.props.hideAlert();\n                        this.props.showAlert(res.data.message, \"error\");\n                        break;\n                    default:\n                        break;\n                }\n            })\n            .catch(err => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Error, server don't active\", \"error\");\n            })\n    }\n\n    // Check để thay đổi trạng thái đã login hay chưa\n    isLoginCheck = async (e) => {\n        this.props.setRole();\n        if (this.blurEmail() && this.blurPassword()) {\n            await axios.post(`http://localhost:5000/sign-in-with-gmail-password`, {\n                email: document.querySelector('#email').value,\n                password: document.getElementById('password').value,\n            })\n                .then(res => {\n                    console.log(res.data);\n                    switch (res.data.status) {\n                        case 1:\n                            localStorage.setItem('token', res.data.token);\n                            this.props.updateProfile(res.data.data);\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n                            this.props.updateShiftTypes(res.data.data.shiftTypes);\n                            this.props.updateRecieptUser(res.data.data.receipts);\n                            this.props.changeLoginStatus();\n                            this.props.getEmployee(res.data.data.employees);\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"success\");\n                            break;\n                        case -1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"error\");\n                            break;\n                        default:\n                            break;\n                    }\n                })\n                .catch(err => {\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Error system\", \"error\");\n                })\n        }\n    }\n\n    // Handle user : blur , change in input\n    blurEmail = () => {\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        const event = document.querySelector('#email');\n        let elementValue = event.value;\n        const formGroup = event.parentElement.parentElement;\n        // check validate\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        let elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    componentWillMount() {\n        document.title = 'Login'\n    }\n\n    render() {\n        const enterPress = this.isLoginCheck;\n        document.onkeydown = function (e) {\n            switch (e.which) {\n                case 13:\n                    enterPress(e);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return (\n            <div className=\"Login\">\n                <div className=\"form-login\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <BiUser></BiUser>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Login</div>\n                                <NavLink to=\"/register\" className=\"auth-form__switch-btn\">Register <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight></NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"auth-form__support\">\n                                    <span className=\"auth-form__support-forget\">\n                                        <NavLink to=\"/forgot\" className=\"auth-form__switch-btn\">Forgot password</NavLink>\n                                    </span>\n                                    <span className=\"auth-form__help-separate\" />\n                                    <span className=\"auth-form__support-need-support\">Need help?</span>\n                                </div>\n                                <div className=\"auth-form__support\">\n                                    <GoogleLogin\n                                        className=\"auth-form__support-google\"\n                                        clientId={this.state.clientId}\n                                        buttonText=\"Login with Google\"\n                                        onSuccess={this.onLoginSuccess}\n                                        onFailure={this.onFailureSuccess}\n                                        cookiePolicy={'single_host_origin'}\n                                    />\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div to=\"/home\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <NavLink to=\"/employee\" id=\"navlink\" className=\"auth-form__btn-log-in auth-form__switch-btn auth-form-employee\">\n                                        Employee\n                                        <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight>\n                                    </NavLink>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        updateProfile: (data) => {\n            dispatch({\n                type: \"UPDATA_DATA_USER\",\n                data: data,\n            })\n        },\n        setRole: () => {\n            dispatch({\n                type: \"ADMIN_ROLE\"\n            });\n        },\n        updateAvatar: (avatar) => {\n            dispatch({\n                type: \"UPDATE_AVATAR\",\n                avatar: avatar,\n            })\n        },\n        updateShiftTypes: (shiftTypes) => {\n            dispatch({\n                type: \"UPDATE_DATA_SHIFT_USER\",\n                shiftTypes: shiftTypes,\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n          },\n        updateShiftTypes: (shiftTypes) => {\n            dispatch({\n                type: \"UPDATE_DATA_SHIFT_USER\",\n                shiftTypes: shiftTypes,\n            })\n        },\n        updateRecieptUser: (data) => {\n            dispatch({\n                type: \"UPDATE_RECIEPT_USER\",\n                listReciept: data,\n            })\n        },\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/LoginWithEmployee.js",["552","553"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../css/Login.css'\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\nimport { FiXSquare, FiChevronLeft } from \"react-icons/fi\";\nimport { FaUserTie } from 'react-icons/fa'\nimport { Avatar } from '@mui/material'\nimport { IconContext } from \"react-icons\";\nimport axios from 'axios';\nimport Alert from '@mui/material/Alert';\n\nclass LoginWithEmployee extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n\n\n\n\n    // Check để thay đổi trạng thái đã login hay chưa\n    isLoginCheck = async (e) => {\n        this.props.setRole();\n        if (this.blurEmail() && this.blurPassword()) {\n            await axios.post(`http://localhost:5000/sign-in-employee`, {\n                email: document.querySelector('#username').value,\n                password: document.getElementById('password').value,\n            })\n                .then(res => {\n                    console.log(res);\n                    if (res.status === 200) {\n                        localStorage.setItem('token', res.data.token);\n                        this.props.updateProfile(res.data.data.employee[0], res.data.data.manager[0], res.data.data.store[0].storeName);\n                        this.props.updateAvatar(res.data.data.employee[0].imgUrl ? res.data.data.employee[0].imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n                        this.props.updateRecieptUser(res.data.data.receipts);\n                        this.props.changeLoginStatus();\n                        this.props.hideAlert();\n                        this.props.showAlert(res.data.message, \"success\");\n                    }\n                })\n                .catch(err => {\n                    console.log(err)\n                    this.props.hideAlert();\n                    this.props.showAlert(\"The email IS NOT registered or you entered the WRONG password.\", \"error\");\n                    return;\n                })\n            // Get các thông tin để thêm vào redux\n            \n        }\n    }\n\n\n    // Handle user : blur , change in input\n    blurEmail = () => {\n        const event = document.querySelector('#username');\n        let elementValue = event.value;\n        const formGroup = event.parentElement.parentElement;\n        // check validate\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        let elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    componentWillMount() {\n        document.title = 'Employee'\n    }\n\n    render() {\n        const enterPress = this.isLoginCheck;\n        document.onkeydown = function (e) {\n            switch (e.which) {\n                case 13:\n                    enterPress(e);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return (\n            <div className=\"Login\">\n                <div className=\"form-login\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <FaUserTie></FaUserTie>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Employee</div>\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Login</NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\" className=\"form-label\">Username</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"username\" id=\"username\" placeholder=\"VD: phuoc123\" type=\"text\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div to=\"/sellproduct\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        setRole: () => {\n            dispatch({\n                type: \"EMPLOYEE_ROLE\",\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        updateProfile: (data, data1, storeName) => {\n            dispatch({\n                type: \"UPDATA_DATA_EMPLOYEE\",\n                data: data,\n                data1: data1,\n                storeName: storeName,\n            })\n        },\n        setProfile: (data) => {\n            dispatch({\n                type: \"SET_DATA_USER\",\n                data: data,\n            })\n        },\n        updateAvatar: (avatar) => {\n            dispatch({\n                type: \"UPDATE_AVATAR\",\n                avatar: avatar,\n            })\n        },\n        updateRecieptUser: (data) => {\n            dispatch({\n                type: \"UPDATE_RECIEPT_USER\",\n                listReciept: data,\n            })\n        },\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginWithEmployee);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DashboardURL.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/ModalConfirmPassword.js",["554"],"import React from 'react';\nimport {Card,CardHeader,Divider,CardContent,Grid,TextField,Box,Button} from '@mui/material';\nimport {BiPlusMedical} from 'react-icons/bi'\nimport { GiCancel } from 'react-icons/gi'\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ModalConfirmPassword(props) {\n\n    const statusConfirmPassword = useSelector(state => state.statusConfirmPassword)\n    const dispatch = useDispatch();\n\n    const handleCancel = () => {\n        dispatch({\n            type:\"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\n        })\n    }\n\n    return (\n        <Card className=\"card-confirm-password\" style={{ minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }}>\n            <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm password\" />\n            <Divider />\n            <CardContent>\n                <Grid container spacing={2}>\n                    <Grid item md={12} xs={12}>\n                        <TextField\n                            id=\"outlined-basic\"\n                            variant=\"outlined\"\n                            fullWidth\n                            label=\"Your password\"\n                            required\n                            type=\"password\"\n                        />\n                    </Grid>\n                </Grid>\n            </CardContent>\n            <Divider />\n            <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                <Button style={{ backgroundColor: 'yellowgreen' }} variant=\"contained\" startIcon={<BiPlusMedical />}>\n                    Xác nhận\n                </Button>\n                <Button style={{ backgroundColor: 'red' }} onClick={() => handleCancel()} variant=\"contained\" startIcon={<GiCancel />}>\n                    Hủy\n                </Button>\n            </Box>\n        </Card>\n    );\n}\n\nexport default ModalConfirmPassword;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Partials/SideNavBar.js",["555","556","557","558","559","560","561"],"import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport {\n    AiOutlineDashboard,\n    AiFillDashboard,\n    AiOutlineContainer,\n    AiFillContainer\n} from \"react-icons/ai\";\nimport { Button } from '@mui/material';\nimport { BsInfoCircleFill } from \"react-icons/bs\";\nimport {\n    IoPeopleOutline,\n    IoPeopleSharp,\n    IoReceiptOutline,\n    IoReceiptSharp,\n} from \"react-icons/io5\";\nimport { ImCheckboxUnchecked, ImCheckboxChecked } from \"react-icons/im\"\nimport { IoIosArrowBack } from \"react-icons/io\";\nimport { RiProfileFill, RiProfileLine } from \"react-icons/ri\";\nimport { FaSignOutAlt } from \"react-icons/fa\";\nimport { GiSellCard } from 'react-icons/gi'\nimport Avatar from '../../img/avatar_default.jpg';\nimport { NavLink } from 'react-router-dom';\nimport '../../css/SideNavBar.css';\nimport axios from 'axios';\n\nclass SideNavBar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            change: true,\n            attendance: false,\n        }\n        this.getInitialScreen();\n    }\n    active = ['active', '', '', '', '', ''];\n\n    changeIndex(index) {\n        for (var i = 0; i < this.active.length; i++) {\n            this.active[i] = '';\n        }\n        this.active[index] = 'active';\n        this.setState({ change: !this.state.change });\n    }\n\n    getInitialScreen() {\n        var link = window.location.href;\n        link = link.substring(link.lastIndexOf('/') + 1);\n\n        for (var i = 0; i < this.active.length; i++) {\n            this.active[i] = '';\n        }\n\n        switch (link) {\n            case \"profile\":\n                this.active[1] = 'active';\n                break;\n            case \"employeemanager\":\n                this.active[2] = 'active';\n                break;\n            case \"goodmanager\":\n                this.active[3] = 'active';\n                break;\n            case \"import\":\n                this.active[3] = 'active';\n                break;\n            case \"receiptmanager\":\n                this.active[4] = 'active';\n                break;\n            case \"sellproduct\":\n                this.active[5] = 'active';\n                break;\n            default:\n                this.active[0] = 'active';\n                break;\n        }\n        this.setState({ change: !this.state.change });\n    }\n\n    attendance = () => {\n        this.setState({\n            attendance: true,\n        })\n        this.props.hideAlert()\n        this.props.showAlert('Attendanced success', 'success')\n    }\n\n    logOut = () => {\n        localStorage.setItem('token', null)\n        this.props.resetInfoUser()\n        this.props.resetRecieptUser()\n        this.props.resetShiftUser()\n        this.props.changeLoginStatus()\n    }\n\n    attendance = () => {\n        var time = new Date();\n        let a = ((time.getHours() > 12) ? time.getHours() - 12 : time.getHours()) + \":\" + time.getMinutes() +\" \"+ ((time.getHours() > 12) ? \"PM\" : \"AM\");\n        let b = \"5:30 PM\"\n        axios.post('http://localhost:5000/api/employee/time-keeping',{\n            token: localStorage.getItem('token'),\n            data: {\n                email: this.props.infoUser.employeeID,\n                time: a,\n            }\n        })\n        this.setState({\n            attendance: true\n        })\n    }\n\n    render() {\n\n        const navbarContainer = document.querySelector('.navbar-container');\n        return (\n            <div\n                class=\"navbar-container\"\n                style={{\n                    width: 0,\n                }}\n            >\n                <div style={{ backgroundColor: !this.props.statusDarkmode ? '#fafafa' : '#37474f' }} class=\"navibar sidebar\">\n                    <div className=\"nav-icon\" >\n                        <IoIosArrowBack\n                            size={20}\n                        />\n                    </div>\n                    <div class=\"nav-heading\">\n                        <div style={{ backgroundColor: !this.props.statusDarkmode ? '#cfd8dc' : '#455a64' }} class=\"navbar-heading-container\">\n                            <img src={this.props.infoUser.avatar ? this.props.infoUser.avatar : Avatar} style={{ width: 40, height: 40, borderRadius: '100%' }}></img>\n                            <span style={{ color: !this.props.statusDarkmode ? 'black' : 'white', fontWeight: '700' }} class=\"user-name\">{this.props.infoUser.lastName + \" \" + this.props.infoUser.firstName}</span>\n                        </div>\n                    </div>\n                    <div class=\"nav-container\">\n                        {\n                            this.props.role == true ? (null)\n                                : (<div style={{ justifyContent: 'center', display: 'flex', marginBottom: '10px' }}>\n                                    <Button onClick={() => this.attendance()} style={{ backgroundColor: this.state.attendance ? '#b9f6ca' : '#e0e0e0', color: '#424242' }}>\n                                        {!this.state.attendance ? (<ImCheckboxUnchecked style={{ marginRight: '10px' }}></ImCheckboxUnchecked>)\n                                            : (<ImCheckboxChecked style={{ marginRight: '10px', color: '#1b5e20' }}></ImCheckboxChecked>)\n                                        }\n\n                                        {this.state.attendance ? 'attendanced' : 'attendance'}\n                                    </Button>\n                                </div>\n                                )\n                        }\n                        {\n                            this.props.role == true ?\n                                (<NavLink className={\"nav-item \" + this.active[0]} to=\"/dashboard\"\n                                    onClick={() => this.changeIndex(0)}\n                                >\n                                    <AiOutlineDashboard class=\"nav-item-icon\" />\n                                    <AiFillDashboard class=\"nav-item-icon icon-activate\" />\n                                    <span className=\"nav-item-lable\">Dashboard</span>\n                                </NavLink>) : (null)\n                        }\n\n                        <NavLink to=\"/profile\" className={\"nav-item \" + this.active[1]} href=\"#\"\n                            onClick={() => this.changeIndex(1)}\n                        >\n                            <RiProfileLine class=\"nav-item-icon\" />\n                            <RiProfileFill class=\"nav-item-icon icon-activate\" />\n                            <span className=\"nav-item-lable\">Profile</span>\n                        </NavLink>\n\n                        {\n                            this.props.role === true ?\n                                (\n                                    <div>\n                                        <NavLink\n                                            to=\"/employeemanager\"\n                                            className={\"nav-item \" + this.active[2]}\n                                            href=\"#\"\n                                            onClick={() => this.changeIndex(2)}\n                                        >\n                                            <IoPeopleOutline class=\"nav-item-icon\" />\n                                            <IoPeopleSharp class=\"nav-item-icon icon-activate\" />\n                                            <span className=\"nav-item-lable\">Employee Manager</span>\n                                        </NavLink>\n                                        <NavLink\n                                            to=\"/goodmanager\"\n                                            className={\"nav-item \" + this.active[3]}\n                                            href=\"#\"\n                                            onClick={() => this.changeIndex(3)}\n                                        >\n                                            <AiOutlineContainer className=\"nav-item-icon\" />\n                                            <AiFillContainer className=\"nav-item-icon icon-activate\" />\n                                            <span className=\"nav-item-lable\">Goods Manager</span>\n                                        </NavLink>\n                                        <NavLink\n                                            to=\"/receiptmanager\"\n                                            className={\"nav-item \" + this.active[4]}\n                                            href=\"#\"\n                                            onClick={() => this.changeIndex(4)}\n                                        >\n                                            <IoReceiptOutline class=\"nav-item-icon\" />\n                                            <IoReceiptSharp class=\"nav-item-icon icon-activate\" />\n                                            <span className=\"nav-item-lable\">Receipt Manager</span>\n                                        </NavLink>\n                                    </div>\n                                ) : (null)\n                        }\n\n                        <NavLink to=\"/sellproduct\" className={\"nav-item \" + this.active[5]} href='#'\n                            onClick={() => this.changeIndex(5)}\n                        >\n                            <GiSellCard class=\"nav-item-icon\" />\n                            <GiSellCard class=\"nav-item-icon icon-activate\" />\n                            <span className=\"nav-item-lable\">Sell Product</span>\n                        </NavLink>\n                    </div>\n\n                    <div class=\"nav-footer\">\n                        <a\n                            to=\"/login\"\n                            onClick={() => this.logOut()}\n                            className={\"nav-item \"}\n                            style={{ flex: 5 }}\n                        >\n                            <FaSignOutAlt class=\"nav-item-icon\" />\n                            <span className=\"nav-item-lable\">Sign out</span>\n                        </a>\n                        <a href=\"#\" className={\"nav-item \"} onClick={() => this.props.changeConfirmPasswordTest()} style={{ flex: 4 }}>\n                            <BsInfoCircleFill class=\"nav-item-icon\" />\n                            <span className=\"nav-item-lable\">About</span>\n                        </a>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n        infoUser: state.infoUser,\n        role: state.role,\n        statusDarkmode: state.statusDarkmode\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            })\n        },\n        resetShiftUser: () => {\n            dispatch({\n                type:\"RESET_SHIFT_USER\"\n            })\n        },\n        resetRecieptUser: () => {\n            dispatch({\n                type: \"RESET_ALL_RECIEPT_USER\",\n            })\n        },\n        changeConfirmPasswordTest: () => {\n            dispatch({\n                type: \"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        resetInfoUser: () => {\n            dispatch({\n                type: \"RESET_INFO_USER\"\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SideNavBar);\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeeManager.js",["562","563","564","565","566","567","568","569","570","571","572","573","574","575"],"import React, { Component } from 'react';\nimport Page from './EmployeePartials/Page';\nimport Label from './EmployeePartials/Label';\nimport Scrollbar from './EmployeePartials/Scrollbar';\nimport SearchNotFound from './EmployeePartials/SearchNotFound';\nimport { Icon } from '@iconify/react';\nimport { sentenceCase } from 'change-case';\nimport {connect} from 'react-redux'\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport {\n    Card,\n    Table,\n    Stack,\n    Avatar,\n    Button,\n    Checkbox,\n    TableRow,\n    TableBody,\n    TableCell,\n    Container,\n    Typography,\n    TableContainer,\n    TablePagination\n} from '@mui/material';\nimport EmployeeToolbar from './EmployeePartials/EmployeeToolbar';\nimport EmployeeMoreMenu from './EmployeePartials/EmployeeMoreMenu';\nimport SackedEmployeeMenu from './EmployeePartials/SackedEmployeeMenu';\nimport EmployeeTableHeader from './EmployeePartials/EmployeeTableHeader';\nimport USERLIST from './EmployeePartials/fakeData'\nimport AddEmployeeModal from './EmployeePartials/AddEmployeeModal';\nimport UpdateEmployeeModal from './EmployeePartials/UpdateEmployeeModal';\nimport PayMoneyModal from './EmployeePartials/PayMoneyModal';\nimport FixedCalendar from './EmployeePartials/FixedCalendar';\nimport UnShiftEmployee from './EmployeePartials/UnShiftEmployee';\nimport AddNextWeekTimeKeepingModal from './EmployeePartials/AddNextWeekTimeKeeping';\nimport UpdateNextWeekTimeKeepingModal from './EmployeePartials/UpdateNextWeekTimeKeeping';\nimport NoJobEmployee from './EmployeePartials/NoJobEmployee';\nimport { withStyles } from '@material-ui/styles';\nimport TimekeepingTable from './EmployeePartials/TimekeepingTable';\nimport AddTimeKeepingModal from './EmployeePartials/AddTimeKeeperModal';\nimport UpdateTimeKeepingModal from './EmployeePartials/UpdateTimeKeepingModal';\n\nimport axios from 'axios';\n\nfunction EmployeeObj(employeeID, managerID, password, firstName, lastName, \n    phoneNumber, dateOfBirth, email, address, cardID, startDate, endDate) {\n    return {\n        employeeID: employeeID,\n        managerID: managerID,\n        password: password,\n        firstName: firstName,\n        lastName: lastName,\n        phoneNumber: phoneNumber,\n        dateOfBirth: dateOfBirth,\n        email: email,\n        address: address,\n        cardID: cardID,\n        startDate: startDate,\n        endDate: endDate,\n    };\n}\n\nconst TABLE_HEAD = [\n    { id: 'ID', label: 'ID', alignRight: false },\n    { id: 'firstName', label: 'Name', alignRight: false },\n    { id: 'lastName', label: 'Last Name', alignRight: false },\n    { id: 'old', label: 'Old', alignRight: false },\n    { id: 'gender', label: 'Gender', alignRight: false },\n    { id: 'province', label: 'Province', alignRight: false },\n    { id: 'phoneNumber', label: 'Phone', alignRight: false },\n    { id: 'email', label: 'Email', alignRight: false },\n    { id: 'adress', label: 'Adress', alignRight: false },\n    { id: '' }\n];\n\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '80px',\n    } \n})\n\nvar selected = [];\nvar filterName = \"\";\nvar filteredUsers = [];\nvar listUsers = [];\nvar page = 5;\nvar rowsPerPage = 5;\nclass EmployeeManager extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            change: false,\n        }; \n        //this.getAllEmployee();\n        // this.getAllEmployee();\n        this.getSackedEmployee();\n    }\n\n    handleFilterByName(event){\n        filterName = event.target.value;\n    }\n\n    addEmployee () {\n        this.props.changeAddEmployeeStatus();\n    }\n\n    // Dữ liệu mà Tài sẽ trả về khi get, còn khi post, delete, put thì chỉ trả về email với token thôi\n\n    sampleData = {\n        email: \"\",\n        token: \"\",\n        employees: [\n            {\n                _id: {\n                    employeeID: \"0\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n                managerID: \"19522006@gm.uit.edu.vn\",\n                password: \"abc123\",\n                firstName: \"Antonio\",\n                lastName: \"Rudiger\",\n                phoneNumber: \"03232323232\",\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\n                email: \"1912@gmail.com\",\n                address: \"Wherever\",\n                cardID: \"2511098589\",\n                startDate: \"2021-11-02T00:00:00.000Z\",\n                endDate: \"\",\n            },\n            {\n                _id: {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n                managerID: \"19522006@gm.uit.edu.vn\",\n                password: \"abc123\",\n                firstName: \"Antonio\",\n                lastName: \"Rudiger\",\n                phoneNumber: \"03232323232\",\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\n                email: \"1911@gmail.com\",\n                address: \"Wherever\",\n                cardID: \"25110985819\",\n                startDate: \"2021-11-02T00:00:00.000Z\",\n                endDate: \"2021-11-31T00:00:00.000Z\",\n            }\n        ]\n    }\n    // Lấy danh sách các nhân viên\n    async getAllEmployee () {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/employee/`, {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                alert(err)\n            })\n        listUsers = [];\n        for(var i = 0; i < result.length; i++)\n        {\n            listUsers.push(result[i]);\n        }\n        // Thêm vào cái redux\n        this.props.getEmployee(listUsers);\n        this.setState({change: !this.state.change});\n    }\n    // Thêm nhân viên\n    addEmployeeToDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n                managerID: \"19522006@gm.uit.edu.vn\",\n                password: \"abc123\",\n                firstName: \"Antonio\",\n                lastName: \"Rudiger\",\n                phoneNumber: \"03232323232\",\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\n                email: \"1911@gmail.com\",\n                address: \"Wherever\",\n                cardID: \"25110985819\",\n                startDate: \"2021-11-02T00:00:00.000Z\",\n                endDate: \"2021-11-31T00:00:00.000Z\",\n            }   \n        }\n        axios.post(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Save success\");\n                alert(\"Lưu thành công\")\n            })\n            .catch(err => {\n                alert(err);\n                console.log(err);\n            })\n    }\n    // Xoá nhân viên\n    deleteEmployeeFromDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee:\n            [\n                {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\", \n                },\n            ]\n            \n        }\n        axios.delete(`http://localhost:5000/api/employee`,{data: data})\n            .then(res => {\n                alert(\"delete employee(s) success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n    }\n    // Sửa nhân viên\n    updateEmployee()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n                managerID: \"19522006@gm.uit.edu.vn\",\n                password: \"abc123\",\n                firstName: \"Antonio\",\n                lastName: \"Rudiger Christensen\",\n                phoneNumber: \"03232323232\",\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\n                email: \"1911@gmail.com\",\n                address: \"Wherever\",\n                cardID: \"25110985819\",\n                startDate: \"2021-11-02T00:00:00.000Z\",\n                endDate: \"2021-11-31T00:00:00.000Z\",\n            }\n        }\n        axios.put(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Update success\");\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }\n\n    async getSackedEmployee () {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/employee/delete`, {\n            params: {...data}\n        })\n            .then(res => {\n                // alert(\"Lấy hết đc product ròi anh chai\");\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err)\n            })\n        this.props.getSackedEmployee(result);\n        this.setState({change: !this.state.change});\n    }\n\n    backToWork() {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee:\n            [\n                {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\", \n                },\n            ]\n            \n        }\n        axios.patch(`http://localhost:5000/api/employee/delete`, data)\n            .then(res => {\n                alert(\"back to work success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n    }\n\n    // Xoá nhân viên hoàn toàn\n    deleteEmployeePermantlyFromDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee:\n            [\n                {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\", \n                },\n            ]\n            \n        }\n        axios.delete(`http://localhost:5000/api/employee/delete`,{data: data})\n            .then(res => {\n                alert(\"delete permantly employee(s) success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div\n                style={{display: 'block', overflowY: 'auto', height: '100vh'}}\n            >\n                <div>\n                    <Button\n                        onClick={() => {this.getAllEmployee()}}\n                        variant=\"contained\"\n                    >\n                        Get Employee\n                    </Button>\n                    {/* <Button\n                        onClick={() => this.addEmployeeToDatabase()}\n                        variant=\"contained\"\n                    >\n                        Add Employee\n                    </Button>\n                    <Button\n                        onClick={() => this.updateEmployee()}\n                        variant=\"contained\"\n                    >\n                        Update Employee\n                    </Button>\n                    <Button\n                        onClick={() => this.deleteEmployeeFromDatabase()}\n                        variant=\"contained\"\n                    >\n                        Delete Employee\n                    </Button> */}\n                    <Button\n                        onClick={() => this.getSackedEmployee()}\n                        variant=\"contained\"\n                    >\n                        Get Sacked Employee\n                    </Button>\n                    {/* <Button\n                        onClick={() => this.backToWork()}\n                        variant=\"contained\"\n                    >\n                        Back To Work\n                    </Button>\n                    <Button\n                        onClick={() => this.deleteEmployeePermantlyFromDatabase()}\n                        variant=\"contained\"\n                    >\n                        Delete Permantly\n                    </Button> */}\n                </div>\n                <Container\n                    style={{marginTop: 20, }}\n                >\n                    <span\n                        style = {{\n                            color: \"#fff\",\n                            padding: 12,\n                            border: '1px solid cyan',\n                            backgroundColor: '#222'\n                        }}\n                    >\n                        Current Employee\n                    </span>\n                    <Button\n                        variant='contained'\n                        startIcon={<Icon icon={plusFill} />}\n                        onClick={() => this.addEmployee()}\n                    >\n                        New User\n                    </Button>\n\n                    <Card>\n                    {/* <EmployeeToolbar\n                        numSelected={selected.length}\n                        filterName={filterName}\n                        // onFilterName={this.handleFilterByName(event)}\n                    /> */}\n                    <TableContainer style ={{maxHeight:'500px',overflowY: 'scroll'}}>\n                        <Table>\n                            <EmployeeTableHeader\n                                // order={order}\n                                // orderBy={orderBy}\n                                headLabel={TABLE_HEAD}\n                                rowCount={USERLIST.length}\n                                numSelected={selected.length}\n                                // onRequestSort={handleRequestSort}\n                                // onSelectAllClick={handleSelectAllClick}\n                            />\n                            <TableBody\n                                style={{height: '100%', width: '100%'}}\n                            >\n                            {\n                                this.props.listEmployee.employees.map((row) => {\n                                return (\n                                    <TableRow\n                                        hover\n                                        // key={id}\n                                        tabIndex={-1}\n                                        role=\"checkbox\"\n                                        // selected={isItemSelected}\n                                        // aria-checked={isItemSelected}\n                                    >\n                                        <TableCell padding=\"checkbox\">\n                                            <Checkbox\n                                            // checked={isItemSelected}\n                                            // onChange={(event) => handleClick(event, name)}\n                                            />\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">\n                                            {row._id.employeeID}\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} component=\"th\" scope=\"row\" padding=\"none\">\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n                                            {/* <Avatar alt={row.firstName} src={avatarUrl} /> */}\n                                            <Typography variant=\"subtitle2\" noWrap>\n                                                {row.firstName}\n                                            </Typography>\n                                            </Stack>\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.lastName}</TableCell>  \n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">\n                                            {row.dateOfBirth.indexOf('T') != -1 ? row.dateOfBirth.substring(0,row.dateOfBirth.indexOf('T')): row.dateOfBirth}\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{\"gender\"}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{\"province\"}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.phoneNumber}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.email}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.address}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"right\">\n                                            <EmployeeMoreMenu\n                                                data={row._id.employeeID}    \n                                            >\n                                            </EmployeeMoreMenu>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n\n                    {/* <TablePagination\n                        rowsPerPageOptions={[5, 10, 25]}\n                        component=\"div\"\n                        count={USERLIST.length}\n                        // rowsPerPage={rowsPerPage}\n                        // page={page}\n                        // onPageChange={handleChangePage}\n                        // onRowsPerPageChange={handleChangeRowsPerPage}\n                    /> */}\n                    </Card>\n                </Container>\n                <FixedCalendar/>\n                <NoJobEmployee></NoJobEmployee>\n                <UnShiftEmployee/>\n                <TimekeepingTable></TimekeepingTable> \n                \n\n                {/* Sacked EMployee */}\n                <Container\n                    style={{marginTop: 20, }}\n                >\n                    <span\n                        style = {{\n                            color: \"#fff\",\n                            padding: 12,\n                            border: '1px solid red',\n                            backgroundColor: 'red'\n                        }}\n                    >\n                        Sacked Employee\n                    </span>\n\n                    <Card>\n                    {/* <EmployeeToolbar\n                        numSelected={selected.length}\n                        filterName={filterName}\n                        // onFilterName={this.handleFilterByName(event)}\n                    /> */}\n                    <TableContainer style ={{maxHeight:'500px',overflowY: 'scroll'}}>\n                        <Table>\n                            <EmployeeTableHeader\n                                // order={order}\n                                // orderBy={orderBy}\n                                headLabel={TABLE_HEAD}\n                                rowCount={USERLIST.length}\n                                numSelected={selected.length}\n                                // onRequestSort={handleRequestSort}\n                                // onSelectAllClick={handleSelectAllClick}\n                            />\n                            <TableBody\n                                style={{height: '100%', width: '100%'}}\n                            >\n                            {\n                                this.props.listSackedEmployee.employees.map((row) => {\n                                return (\n                                    <TableRow\n                                        hover\n                                        // key={id}\n                                        tabIndex={-1}\n                                        role=\"checkbox\"\n                                        // selected={isItemSelected}\n                                        // aria-checked={isItemSelected}\n                                    >\n                                        <TableCell className = {classes.goodTable_Cell} padding=\"checkbox\">\n                                            <Checkbox\n                                            // checked={isItemSelected}\n                                            // onChange={(event) => handleClick(event, name)}\n                                            />\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">\n                                            {row._id.employeeID}\n                                        </TableCell>\n                                        <TableCell component=\"th\" scope=\"row\" padding=\"none\">\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n                                            {/* <Avatar alt={row.firstName} src={avatarUrl} /> */}\n                                            <Typography variant=\"subtitle2\" noWrap>\n                                                {row.firstName}\n                                            </Typography>\n                                            </Stack>\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.lastName}</TableCell>  \n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.dateOfBirth.substring(0,row.dateOfBirth.indexOf('T'))}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{\"gender\"}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{\"province\"}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.phoneNumber}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.email}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.address}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"right\">\n                                            <SackedEmployeeMenu\n                                                data={row._id.employeeID}    \n                                            >\n                                            </SackedEmployeeMenu>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n\n                    {/* <TablePagination\n                        rowsPerPageOptions={[5, 10, 25]}\n                        component=\"div\"\n                        count={USERLIST.length}\n                        // rowsPerPage={rowsPerPage}\n                        // page={page}\n                        // onPageChange={handleChangePage}\n                        // onRowsPerPageChange={handleChangeRowsPerPage}\n                    /> */}\n                    </Card>\n                </Container>\n\n\n                {/* Đây là phần modal */}\n                {this.props.addEmployeeStatus ? (\n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeAddEmployeeStatus();}} className=\"modal-overlay\"></div>\n                        <AddEmployeeModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </AddEmployeeModal>\n                    </div>\n                ): null}\n                {this.props.updateEmployeeStatus ? (\n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeUpdateEmployeeStatus();}} \n                            className=\"modal-overlay\"\n                        />\n                        <UpdateEmployeeModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </UpdateEmployeeModal>\n                    </div>\n                ): null}\n                {this.props.payEmployeeStatus ? (\n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changePayEmployeeStatus();}} className=\"modal-overlay\"></div>\n                        <PayMoneyModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </PayMoneyModal>\n                    </div>\n                ): null}\n                {this.props.statusAddNextWeekTimeKeeping \n                ? \n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeAddNextWeekTimeKeepingStatus();}} className=\"modal-overlay\"></div>\n                        <AddNextWeekTimeKeepingModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </AddNextWeekTimeKeepingModal>\n                    </div>\n                : null\n                }\n                {this.props.statusUpdateNextWeekTimeKeeping \n                ? \n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeUpdateNextWeekTimeKeepingStatus();}} className=\"modal-overlay\"></div>\n                        <UpdateNextWeekTimeKeepingModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </UpdateNextWeekTimeKeepingModal>\n                    </div>\n                : null\n                }\n                {this.props.statusAddTimeKeeping \n                ? \n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeAddTimeKeepingStatus()}} className=\"modal-overlay\"></div>\n                        <AddTimeKeepingModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </AddTimeKeepingModal>\n                    </div>\n                : null\n                }\n                {this.props.statusUpdateTimeKeeping \n                ? \n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeUpdateTimeKeepingStatus();}} className=\"modal-overlay\"></div>\n                        <UpdateTimeKeepingModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </UpdateTimeKeepingModal>\n                    </div>\n                : null\n                }\n            </div>\n            \n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\n        payEmployeeStatus: state.payEmployeeStatus,\n        infoUser: state.infoUser,\n        listEmployee: state.listEmployee,\n        listSackedEmployee: state.listSackedEmployee,\n        statusAddNextWeekTimeKeeping: state.statusAddNextWeekTimeKeeping,\n        statusUpdateNextWeekTimeKeeping: state.statusUpdateNextWeekTimeKeeping,\n        statusAddTimeKeeping: state.statusAddTimeKeeping,\n        statusUpdateTimeKeeping: state.statusUpdateTimeKeeping,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\n            });\n        },\n        changeUpdateEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\n            });\n        },\n        changePayEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        getSackedEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE_SACKED\",\n                employees: data,\n            });\n        },\n        changeAddNextWeekTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\n            });\n        },\n        changeUpdateNextWeekTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\n            });\n        },\n        changeAddTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\n            });\n        },\n        changeUpdateTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\n            });\n        },\n    }\n}\nexport default connect(mapStateToProps , mapDispatchToProps)((withStyles(styles, {withTheme: true}))(EmployeeManager));\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodManager.js",["576"],"import { Component } from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport GoodTable from './GoodPartials/GoodTable';\nimport { NavLink } from 'react-router-dom';\nimport Button from '@mui/material/Button';\nimport SearchBar from './GoodPartials/SearchBar';\nimport {connect} from 'react-redux'\nimport AddTypeModal from './GoodPartials/AddTypeModal';\nimport '../css/GoodManager.css';\nimport ConfirmModal from './GoodPartials/ConfirmModal';\nimport UpdateGoodModal from './GoodPartials/UpdateGoodModal';\nimport EditTypeModal from './GoodPartials/EditTypeModal';\n\nclass GoodManager extends Component {\n    \n    handleAdd() {\n        this.props.changeAddTypeStatus();\n        this.props.setAddTypeStatus();\n    }\n    handleConfirm(){\n        this.props.changeConfirmStatus();\n        this.props.unsetDelete();\n    }\n    handleConfirmDelete(){\n        this.props.changeConfirmStatus();\n        this.props.setDeleteConfirm();\n    }\n    handleUpdateGood() {\n        this.props.changeUpdateGoodStatus();\n    }\n    handleEditType() {\n        this.props.changeEditTypeStatus();\n    }\n    render() {\n        return (\n            <div>\n                <div style={{height: '100%', width: '100%', marginTop: '40px', marginBottom: '40px', paddingBottom: '40px' }}>\n                    <div style={{display: 'flex'}}>\n                        <Button variant=\"contained\">\n                            <NavLink style={{color: '#fff', textDecoration: 'none'}} to=\"/goodmanager/import\">Import</NavLink>\n                        </Button>\n                        <SearchBar style={{height: '120px'}}/>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleAdd()} variant=\"contained\">\n                            add type\n                        </Button>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleEditType()} variant=\"contained\">\n                            edit type\n                        </Button>\n                        {/* <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleConfirmDelete()} variant=\"contained\">\n                            Delete\n                        </Button>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleConfirm()} variant=\"contained\">\n                            Edit\n                        </Button>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleUpdateGood()} variant=\"contained\">\n                            Update Good\n                        </Button> */}\n\n                     </div>\n\n                    <GoodTable />\n\n                    {/* Đây là phần modal */}\n                    {this.props.addTypeStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\n                            <AddTypeModal></AddTypeModal>\n                        </div>\n                    ): null}\n                    {this.props.confirmStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\n                            <ConfirmModal></ConfirmModal>\n                        </div>\n                    ): null}\n                    {this.props.updateGoodStatus ? (\n                        <div \n                            className=\"modal-add\"\n                        >\n                            <div onClick={() => {this.props.changeUpdateGoodStatus();}} className=\"modal-overlay\"></div>\n                            <UpdateGoodModal\n                                style={{\n                                    marginTop: 0\n                                }}\n                            >\n                            </UpdateGoodModal>\n                        </div>\n                    ): null}\n                     {this.props.editTypeStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeEditTypeStatus();}} className=\"modal-overlay\"></div>\n                            <EditTypeModal></EditTypeModal>\n                        </div>\n                    ): null}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        confirmStatus: state.confirmStatus,\n        deleteStatus: state.deleteStatus,\n        updateGoodStatus: state.updateGoodStatus,\n        editTypeStatus: state.editTypeStatus,\n        isAddTypeStatus: state.isAddTypeStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        unsetDelete: () => {\n            dispatch({\n                type: \"UNSET_DELETE_STATUS\",\n            })\n        },\n        changeUpdateGoodStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\n            })\n        },\n        changeEditTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\n            })\n        },\n        setAddTypeStatus: () => {\n            dispatch({\n                type: \"SET_ADD_TYPE_STATUS\",\n            });\n        },\n        setDeleteConfirm: () => {\n            dispatch({\n                type: \"SET_CONFIRM_DELETE_GOOD\",\n            }); \n        },\n        \n    }\n}\nexport default connect(mapStateToProps , mapDispatchToProps)(GoodManager);\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/GoodImport.js",["577","578","579","580","581","582","583","584","585","586","587","588","589","590","591","592","593","594","595"],"import React, { Component } from 'react';\nimport { TextField } from '@mui/material';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport { InputLabel, Button, Modal, Grid, Card, CardHeader} from '@mui/material';\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { connect } from 'react-redux';\nimport GoodImage from '../../img/good-example.jpg';\nimport AddTypeModal from './AddTypeModal';\nimport { withStyles } from '@material-ui/styles';\nimport { AiFillPlusCircle} from \"react-icons/ai\";\nimport DateTimePicker from '@mui/lab/DateTimePicker';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport ConfirmModal from './ConfirmModal';\nimport { GiConsoleController } from 'react-icons/gi';\nimport {\n    Link\n} from \"react-router-dom\";\n// Use for save type\nvar productTypes =[];\nvar listTypeInfor = [];\n\nvar listProductInfor = [];\n\n// Use for choose type:\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nclass GoodImport extends Component {\n    imgUrl= 'none';\n    dateTime= Date.now();\n    currentDateTime = '2021-01-02';\n    finishUpImage = true;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            imageSelect: \"null\",\n            type:'none',\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\n            change: false,\n        }; \n        this.loadAllType(); \n        this.loadAllGood();\n\n        this.currentDateTime = this.getCurrentDateTime();\n        typeSet = [];\n    }\n    \n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    handleAdd(){\n        this.props.changeAddTypeStatus();\n        this.props.setAddTypeStatus();\n    }\n    \n    async profileImageChange(fileChangeEvent) {\n        this.setState({\n            imageSelect: fileChangeEvent.target.files[0],\n        })\n        this.finishUpImage = false;\n        const file = fileChangeEvent.target.files[0];\n        const { type } = file;\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\n        } else {\n            const formData = new FormData();\n            formData.append(\"file\", fileChangeEvent.target.files[0])\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\n            await axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\n                .then(res => {\n                    this.imgUrl=res.data.url;\n                    this.setState({\n                        change: 'true'\n                    });\n                })\n                .catch(err => {\n                    console.log(\"Thất bại\");\n                })\n        }\n        this.finishUpImage = true;\n    }\n\n    async importGood(e) {\n        // Ngăn chuyển trang\n        var isContinue = this.checkConstraint();\n        if(!isContinue)\n        {\n            e.preventDefault();\n            return;\n        }\n        // Thêm hàng hoá\n        const data = {\n            token: localStorage.getItem('token'),\n            product: {\n                _id: {\n                    productID: this.generatedID,\n                    importDate: document.querySelector('input[name=\"importDate\"]').value,\n                    storeID: this.props.infoUser.email,\n                },\n                name: document.querySelector('input[name=\"goodName\"]').value,\n                quantity: document.querySelector('input[name=\"goodQuantity\"]').value,\n                remain: document.querySelector('input[name=\"goodQuantity\"]').value,\n                importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\n                sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\n                imgUrl: this.imgUrl,\n                unit: document.querySelector('input[name=\"unit\"]').value,\n            }   \n        }\n        console.log(data);\n\n        axios.post(`http://localhost:5000/api/product`, data)\n            .then(res => {\n                console.log(\"Save success\");\n                alert(\"Lưu thành công\")\n            })\n            .catch(err => {\n                alert(err);\n                console.log(err);\n            })\n\n        //Thêm vào bảng joinType nữa\n\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\n        for(var i = 0 ; i < typeSet.length ; i++)\n        {\n            const data1 = {\n                token: localStorage.getItem('token'),\n                productJoinType: {\n                    _id : {\n                        productID: this.generatedID,\n                        typeID: typeSet[i], \n                        importDate: document.querySelector('input[name=\"importDate\"]').value,\n                        storeID: this.props.infoUser.email,\n                    }\n                }\n            }\n            axios.post(`http://localhost:5000/api/product/join`, data1)\n                .then(res => {\n                    console.log(\"lưu vô bảng join thành công\");\n                })\n                .catch(err => {\n                    console.log(err);\n                })\n        }\n        \n\n        // console.log(data);\n    }\n    \n    checkConstraint = () => {\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\n        // Constraint 1: Check name\n        var productName =  document.querySelector('input[name=\"goodName\"]').value;\n        if(productName.length == 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Tên sản phẩm không được trống\",\"warning\");\n            return false;\n        }\n        // Constraint 2: Check quantity\n        if(document.querySelector('input[name=\"goodQuantity\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value) <= 0) \n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\n            alert('Số lượng sản phẩm phải lớn hơn 0');\n            return false;\n        }\n        // Constraint 3: check Unit\n        if(document.querySelector('input[name=\"unit\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\n            alert('Đơn vị của sản phẩm không được trống');\n            return false;\n        }\n        // Constraint 4: Check import Price\n        if(document.querySelector('input[name=\"originalPrice\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Giá nhập không được trống\",\"warning\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <= 0) \n        {\n            this.props.hideAlert();\n            this.props.showAlert('Giá nhập phải lớn hơn 0',\"warning\");\n            return false;\n        }\n        // Constraint 5: check sell Price\n        if(document.querySelector('input[name=\"sellPrice\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Giá bán không được trống\",\"warning\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"sellPrice\"]').value) <= 0) \n        {\n            this.props.hideAlert();\n            this.props.showAlert('Giá bán phải lớn hơn 0',\"warning\");\n            return false;\n        }\n        // Constraint 6: Ngày nhập phải nhỏ  hơn ngày hết hạn\n        if (\n            (\n                new Date(document.querySelector('input[name=\"importDate\"]').value).getTime()\n                - \n                new Date(document.querySelector('input[name=\"expiredDate\"]').value).getTime()\n            ) >= 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert('Không thể nhập hàng hết hạn',\"warning\");\n            return false;\n        }\n        // Constraint 7: Check giá gốc nhỏ hơn giá bán\n        if(\n            parseInt(document.querySelector('input[name=\"sellPrice\"]').value) \n            - \n            parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <=0\n            ) \n        {\n            this.props.hideAlert();\n            this.props.showAlert('Giá bán phải lớn hơn giá gốc',\"warning\");\n            return false;\n        }\n        // Constraint 8: check xem đã  up ảnh lên xong chưa\n        if(this.finishUpImage == false)\n        {\n            this.props.hideAlert();\n            this.props.showAlert('Ảnh chưa được upload xong',\"warning\");\n            return false;\n        }\n        return true;\n    }\n\n    async loadAllType() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        //Get data và lưu các tên Type vào bảng\n        listTypeInfor=[];\n        for(var i=0; i < result.length ; i++)\n        {\n            listTypeInfor.push(result[i]);\n        }\n        productTypes=[];\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\n        {\n            productTypes.push(listTypeInfor[i].name);\n        }\n\n        this.props.getProductType(result);\n        console.log(\"listType\", this.props.typeProduct.state);\n        this.setState({change: true});\n    }\n\n    async loadAllGood() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/`, {\n            params: {...data}\n        })\n            .then(res => {\n                // alert(\"Lấy hết đc product ròi anh chai\");\n                result = res.data.data;\n                console.log(res.data.data);\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err)\n            })\n        // Get data và lưu các tên Type vào dữ liệU\n        //Get data và lưu các tên Type vào bảng\n        listProductInfor=[];\n        for(var i=0; i < result.length ; i++)\n        {\n            listProductInfor.push(result[i]);\n        }\n        if(listProductInfor.length>0)\n        {\n            this.generatedID = parseInt(listProductInfor[listProductInfor.length-1]._id.productID) + 1;\n        } \n        else this.generatedID = 0;\n        this.props.getProductToReducer(listProductInfor);\n        this.setState({change: false});\n    }\n\n    generatedID = 0;\n\n    getTypeNamebyTypeID (typeID) {\n        var typeName='';\n        for(var i = 0; i<listTypeInfor.length;i++)\n        {   \n            if(listTypeInfor[i]._id.typeID == typeID)\n            {\n                typeName = listTypeInfor[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    foundTypeInSet(typeID) {\n        for(var i = 0 ; i < typeSet.length; i++)\n        {\n            if(typeSet[i]==typeID._id.typeID) return true;\n        }\n        return false;\n    }\n    render() {\n        \n        return(\n            <div \n                style={{ \n                    display: 'block', height: \"900px\", overflowY: 'auto ', backgroundColor: 'rgb(221,235,255)'   \n                }}\n            >   \n                <div className=\"good-import-header\"></div>\n                <Grid className=\"import-container\" style={{height: '79vh', overflowY: 'scroll'}} container spacing={2}>\n                    <Grid item md={3}  \n                        style={{\n                            display: 'flex', \n                            justifyContent:'center', \n                            flexDirection:'column',\n                            alignItems:'center',\n                            paddingLeft: '30px'\n                        }}\n                    >   \n                        <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden', marginTop: '15px ' }}>\n                            <Image style={{width: '240px',height: '240px', padding: '10px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                        </label>\n                        {/* Ẩn đi */}\n                        <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                    </Grid>\n                    <Grid item md={9}>\n\n                        <Card \n                            style={{\n                                marginRight: '18px',\n                            }}\n                        >\n                            <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"ADD GOOD\" />\n                            <Grid container md={12}>\n                                <Grid item md={6} \n                                    className='input-item'\n                                >\n                                    <div \n                                        className=\"input-label\"\n                                        style={{\n                                            width: '130px'\n                                        }}\n                                    >\n                                        ID\n                                    </div>\n                                    <StyledTextField\n                                        classname='input-box' \n                                        type=\"text\" \n                                        // class=\"input-val\" \n                                        style = {{width: '60%'}} \n                                        fullWidth \n                                        size=\"small\" \n                                        name=\"goodID\" \n                                        variant=\"outlined\"\n                                        value={this.generatedID}\n                                        readOnly={true}\n                                        disabled={true}\n                                    />\n                                </Grid>\n                                <Grid item md={6} \n                                    className='input-item'\n                                    style={{\n                                        marginLeft: 0,\n                                        paddingLeft: 0,\n                                    }}\n                                >\n                                    <div className=\"input-label\" style={{width: 110}}>Import Date</div>\n                                    <StyledTextField\n                                        classname='input-box'   \n                                        type=\"date\" \n                                        style = {{width: '68%'}} \n                                        fullWidth\n                                        name=\"importDate\"\n                                        size=\"small\"\n                                        variant=\"outlined\"\n                                        defaultValue={this.currentDateTime}\n                                    />\n                                </Grid>\n                                \n                                <Grid item md={6} \n                                    className='input-item'\n                                >\n                                    <div className=\"input-label\"style={{width: '130px'}}>Name</div>\n                                    <StyledTextField\n                                        classname='input-box'   \n                                        type=\"text\" \n                                        // class=\"input-val\" \n                                        style = {{width: '60%'}} \n                                        fullWidth\n                                        size=\"small\"\n                                        name=\"goodName\" \n                                        variant=\"outlined\" \n                                    />\n                                </Grid>\n                                <Grid item md={4}\n                                    className='input-item'\n                                    style={{padding: '0px', marginLeft: '0px'}}\n                                >\n                                    <div \n                                        className=\"input-label\" \n                                        style={{width: '120px'}}\n                                    >\n                                        Quantity\n                                    </div>\n                                    <StyledTextField\n                                        style = {{width: '60%'}} \n                                        fullWidth\n                                        name=\"goodQuantity\" \n                                        variant=\"outlined\"\n                                        type=\"number\"\n                                    />\n                                </Grid>\n                                <Grid item md={2}\n                                    className='input-item'\n                                    style={{\n                                        paddingRight: 12\n                                    }}\n                                >\n                                    <div \n                                        className=\"input-label\"\n                                        style={{\n                                            marginLeft: 0,\n                                            paddingLeft: 4,\n                                            width: 40\n                                        }}\n                                    >\n                                        Unit\n                                    </div>\n                                    <StyledTextField\n                                        classname='input-box'\n                                        style = {{width: '100%', marginLeft: '4px'}} \n                                        fullWidth\n                                        variant=\"outlined\"\n                                        type=\"text\" \n                                        name=\"unit\" \n                                    />\n                                </Grid>\n                                <Grid item md={6}\n                                    className='input-item'\n                                >\n                                    <div className=\"input-label\" style={{width: 128}}>Original Price</div>\n                                    <StyledTextField\n                                        classname='input-box'\n                                        style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \n                                        fullWidth\n                                        name=\"originalPrice\" \n                                        variant=\"outlined\"\n                                        type=\"number\" \n                                    />\n                                    đ\n                                </Grid>\n                                <Grid item md={6}\n                                    className='input-item'\n                                    style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\n                                >\n                                    <div \n                                        className=\"input-label\"\n                                        style={{width: '130px'}}\n                                    >\n                                        Sell Price\n                                    </div>\n                                    <StyledTextField\n                                        classname='input-box'\n                                        style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \n                                        fullWidth\n                                        name=\"sellPrice\" \n                                        variant=\"outlined\"\n                                        type=\"number\" \n                                    />\n                                    đ\n                                </Grid>\n                                <Grid item md={7} \n                                    className='input-item'\n                                >\n                                    <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\n                                    <StyledTextField\n                                        classname='input-box'   \n                                        type=\"date\" \n                                        style = {{width: '70%'}} \n                                        fullWidth\n                                        size=\"small\"\n                                        name=\"expiredDate\" \n                                        variant=\"outlined\"\n                                        defaultValue={this.currentDateTime}\n                                    />\n                                </Grid>\n                                <Grid item md={10}\n                                    className='input-item'\n                                >\n                                    <div \n                                        className=\"input-label\"\n                                        style={{width:132}}\n                                    >\n                                        Product Type\n                                    </div>\n                                    <FormControl sx={{ minWidth: 120 }}>\n                                        {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                        <Select\n                                            value={this.state.type}\n                                            onChange={(event) => {\n                                                this.setState({type: event.target.value});\n                                                if(!typeSet.includes(event.target.value))\n                                                {\n                                                    typeSet.push(event.target.value);\n                                                }\n                                                this.setState({change: !this.state.change})\n                                            }}\n                                            style={{\n                                                height: 36,\n                                            }}\n                                        >\n                                            {\n                                                this.props.typeProduct.state.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\n                                                : this.props.typeProduct.state.map((type) =>\n                                                    ! this.foundTypeInSet(type) \n                                                    ? <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\n                                                    : null\n                                                )\n                                            }   \n                                        </Select> \n                                    </FormControl>\n                                    <Button onClick={() => this.handleAdd()}>\n                                        <AiFillPlusCircle\n                                            size={28}\n                                            style={{\n                                                fontSize: 28,\n                                                margin: 0,\n                                                padding: 0,\n                                                width: 28,\n                                                height: 28\n                                            }}    \n                                        />\n                                    </Button>\n                                    <div className='all-type-container'>\n                                        {\n                                            Array.from(typeSet).map((type) =>\n                                                <div className='type-container'>\n                                                    \n                                                    <CancelIcon\n                                                        className='close-icon'\n                                                        size={10}\n                                                        onClick={() => {\n                                                            typeSet = typeSet.filter(function(item) {\n                                                                return item != type;\n                                                            })\n                                                            console.log(typeSet);\n                                                            this.setState({type: 'none'});\n                                                        }}\n                                            \n                                                    />\n                                                    <span className='type-title'>\n                                                        {this.getTypeNamebyTypeID(type)}\n                                                    </span>\n                                                </div>\n                                                \n                                            )\n                                        }\n                                    </div>\n                                </Grid>\n                                {/* <Grid item md={10}\n                                    className='input-item'\n                                >\n\n                                </Grid> */}\n                                <Grid item md={2}\n                                    className='input-item'\n                                >\n                                    <Link to=\"/goodmanager\" className=\"btn btn-primary\" onClick={(e) => this.importGood(e)}>\n                                        IMPORT\n                                    </Link>\n                                </Grid>\n                            </Grid>\n                        </Card>\n                    </Grid>\n                    <Grid item sm={12} md={12} >\n                        \n                    </Grid>\n                </Grid> \n                    \n                {this.props.addTypeStatus ? (\n                    <div className=\"modal-add\">\n                        <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\n                        <AddTypeModal></AddTypeModal>\n                    </div>\n                ): null}\n                {this.props.confirmStatus ? (\n                    <div className=\"modal-add\">\n                        <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\n                        <ConfirmModal></ConfirmModal>\n                    </div>\n                ): null}\n            </div>\n        );        \n    }\n}\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        infoUser: state.infoUser,\n        isAddTypeStatus: state.isAddTypeStatus,\n        confirmStatus: state.confirmStatus,\n        typeProduct: state.typeProduct\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        updateAvatar: (avatar) => {\n            dispatch({\n                type: \"UPDATE_AVATAR\",\n                avatar: avatar\n            })\n        },\n        setAddTypeStatus: () => {\n            dispatch({\n                type: \"SET_ADD_TYPE_STATUS\",\n            });\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        setConfirm: () => {\n            dispatch({\n                type: \"SET_CONFIRM_IMPORT_GOOD\",\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n        getProductType: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_TYPE\",\n                data: data\n            });\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GoodImport);\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/SellProduct.js",["596"],"import React, { Component } from 'react';\nimport { Container, Grid, Button, CardActionArea, CardActions, CardMedia } from '@mui/material';\nimport '../../css/SellProduct.css'\nimport Tabs from './Tabs'\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport exampleImg from '../../img/good-example.jpg'\nimport { BiPlusMedical } from 'react-icons/bi';\nimport { connect } from 'react-redux'\nimport axios from 'axios';\nimport ShoppingBags from './ShoppingBags';\nimport Printf from './Print'\nimport HistoryReciept from './HistoryReciept';\n\nclass SellProduct extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            change: false,\n            test1: true,\n        }\n        this.storeID = this.props.infoUser.managerID ? this.props.infoUser.managerID : this.props.infoUser.email;\n        this.loadAllType();\n        this.loadAllGood();\n\n    }\n    storeID = \"\";\n    bull = (\n        <Box\n            component=\"span\"\n            sx={{ display: 'inline-block', mx: '2px', transform: 'scale(0.8)' }}\n        >\n            •\n        </Box>\n    );\n\n    AddProduct = (value) => {\n        console.log(value)\n        if (value.quantity === 0) {\n            this.props.showAlert('Shout out !', 'warning')\n        } else {\n            var isCheck = false;\n            var currentQuantity;\n            var maxQuantity;\n            this.props.shoppingBags.map(value1 => {\n                if (value1.product.name === value.name) {\n                    isCheck = true;\n                    currentQuantity = value1.quantity\n                    maxQuantity = value.quantity\n                }\n                return value;\n            })\n            if (isCheck) {\n                if (currentQuantity < maxQuantity) {\n                    this.props.raiseQuantity(value.name);\n                }\n            } else {\n                const newProduct = {\n                    product: value,\n                    quantity: 1,\n                }\n                this.props.addNewProductToShoppingBags(newProduct);\n            }\n        }\n    }\n\n    async loadAllType() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.storeID,\n            }\n        }\n\n        await axios.get(`http://localhost:5000/api/product/type`,\n            {\n                params: { ...data }\n            })\n            .then(res => {\n                result = res.data.data;\n                localStorage.getItem('token', res.data.token);\n            })\n            .catch(err => {\n                alert(err);\n            })\n        //Get data và lưu các tên Type vào bảng\n        var listTypeInfor = [];\n        for (var i = 0; i < result.length; i++) {\n            listTypeInfor.push(result[i]);\n        }\n        this.props.getTypeToReducer(listTypeInfor);\n        this.setState({ change: !this.state.change });\n    }\n\n    async loadAllGood() {\n        var resultProduct = [];\n        console.log(\"infoUser\", this.props.infoUser);\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.storeID,\n            }\n        }\n        await axios.get(`http://localhost:5000/api/product/`, {\n            params: { ...data }\n        })\n            .then(res => {\n                resultProduct = res.data.data;\n            })\n            .catch(err => {\n                alert(err)\n            })\n        // Get hết từ cái productjoinType\n        var result = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.storeID,\n            }\n        }\n        await axios.get(`http://localhost:5000/api/product/join`, {\n            params: { ...data1 }\n        })\n            .then(res => {\n                result = res.data.data;\n                localStorage.getItem('token', res.data.token);\n            })\n            .catch(err => {\n                alert(err)\n            })\n        // Lấy các cái jointype\n        var joinTypeInfor = [];\n        for (let i = 0; i < result.length; i++) {\n            joinTypeInfor.push(result[i]);\n        }\n\n        var listProductInfor = [];\n        for (let i = 0; i < resultProduct.length; i++) {\n            var typeIDList = [];\n            for (var j = 0; j < joinTypeInfor.length; j++) {\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) {\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\n                }\n            }\n\n            listProductInfor.push(\n                {\n                    ...resultProduct[i],\n                    typeIDList: typeIDList\n                });\n        }\n        this.props.getProductToReducer(listProductInfor);\n        this.setState({ change: !this.state.change });\n    }\n\n\n\n    render() {\n        return (\n            <div className=\"sell-product\" >\n                <Container style={{ marginBottom: '20px' }} maxWidth=\"xl\">\n                    <Grid container spacing={2}>\n                        <Grid item lg={8} md={12} sm={12}>\n                            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', borderRadius: '8px', marginTop: '20px', backgroundColor: '#ffffff', height: 'calc(100vh - 40px)', overflow: 'hidden' }}>\n                                <div style={{ overflow: 'hidden', marginBottom: '5px' }}>\n                                    <Tabs></Tabs>\n                                </div>\n                                <Container id=\"choses-product\" style={{ height: '94%', overflowY: 'scroll' }} maxWidth=\"xl\">\n                                    <Grid container spacing={2}>\n                                        {this.props.listProduct.state\n                                            ? this.props.listProduct.state.filter(value => {\n                                                if (this.props.chooseTypeProductID === 'all') {\n                                                    return value;\n                                                }\n                                                if (value.typeIDList.includes(this.props.chooseTypeProductID)) {\n                                                    return value;\n                                                }\n                                            }).map(value => (\n                                                <Grid item lg={3} md={4} sm={4} xs={4}>\n                                                    <Card onClick={() => this.AddProduct(value)}>\n                                                        <CardActionArea>\n                                                            <CardMedia\n                                                                style={{ display: (value.quantity === 0) ? 'block' : 'none' }}\n                                                                component=\"img\"\n                                                                height=\"140\"\n                                                                image='https://res.cloudinary.com/databaseimg/image/upload/v1637083732/aqd37xtgxukcq3x9eb4q.png'\n                                                                alt=\"green iguana\"\n                                                            />\n\n                                                            <div  style={{ display: (value.quantity !== 0) ? 'block' : 'none' }}>\n                                                                {\n                                                                    value.imgUrl === \"none\"\n                                                                        ? <CardMedia\n                                                                            component=\"img\"\n                                                                            height=\"140\"\n                                                                            image={exampleImg}\n                                                                            alt=\"green iguana\"\n                                                                        />\n                                                                        : <CardMedia\n                                                                            component=\"img\"\n                                                                            height=\"140\"\n                                                                            image={value.imgUrl}\n                                                                            alt=\"green iguana\"\n                                                                        />\n                                                                }\n                                                            </div>\n                                                            \n                                                            <CardContent style={{ padding: '5px' }}>\n                                                                <Typography style={{ textAlign: 'center' }} gutterBottom variant=\"h6\" component=\"div\">\n                                                                    {value.name}\n                                                                </Typography>\n                                                            </CardContent>\n                                                            <CardContent  style={{ textAlign: 'center', margin:'0', padding: '0'}}>\n                                                                <Typography style={{ textAlign: 'center', margin:'0', padding: '0', fontSize:'0.7rem', fontWeight: '700', color: '#00000080'}} gutterBottom variant=\"h6\" component=\"div\">\n                                                                Quantity: {value.quantity}\n                                                                </Typography>\n                                                            </CardContent>\n                                                        </CardActionArea>\n                                                        <CardActions style={{ justifyContent: 'center' }}>\n                                                            <Button style={{ color: 'green', fontWeight: '700' }} endIcon={<BiPlusMedical></BiPlusMedical>} size=\"medium\" color=\"primary\">\n                                                                {value.sellPrice}\n                                                            </Button>\n                                                        </CardActions>\n                                                    </Card>\n                                                </Grid>\n                                            )) : (null)}\n                                    </Grid>\n                                </Container>\n                            </div>\n                        </Grid>\n                        <Grid item lg={4} md={12}>\n                            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', borderRadius: '8px', marginTop: '20px', backgroundColor: '#ffffff', height: 'calc(100vh - 40px)', overflow: 'hidden', overflowX: 'hidden' }}>\n                                <div id=\"choses-product\" style={{ backgroundColor: '#ebebeb', height: '60%', margin: '10px', overflowY: 'scroll', overflowX: 'hidden' }} >\n                                    <Grid sty container spacing={0}>\n                                        {/* Table */}\n                                        <Grid item className=\"customizeTable\" style={{ backgroundColor: 'rgba(20,20,20,0.4)', alignContent: 'center', justifyContent: 'center', borderBottom: '2px solic black' }} md={12} sm={12}>\n                                            <Grid style={{ textAlign: 'center', alignItems: 'center', justifyItems: 'center', fontWeight: 'bold' }} container spacing={0}>\n                                                <Grid item md={1} sm={1}>\n                                                    #\n                                                </Grid>\n                                                <Grid item md={1} sm={1}>\n\n                                                </Grid>\n                                                <Grid item md={4} sm={4}>\n                                                    Name\n                                                </Grid>\n                                                <Grid item md={3} sm={3}>\n                                                    Quantity\n                                                </Grid>\n                                                <Grid style={{ fontWeight: '700' }} item md={3} sm={3}>\n                                                    Giá\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        {/* Bắt đầu hóa đơn */}\n                                        <ShoppingBags></ShoppingBags>\n                                    </Grid>\n                                </div>\n                                <div style={{ height: '40%' }}>\n                                    <Printf ></Printf>\n                                </div>\n                            </div>\n                        </Grid>\n                    </Grid>\n                </Container>\n                {this.props.statusShowHistoryReciept ? (\n                    <HistoryReciept></HistoryReciept>\n                ) : null}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        listProduct: state.listProduct,\n        chooseTypeProductID: state.chooseTypeProduct,\n        infoUser: state.infoUser,\n        shoppingBags: state.shoppingBags,\n        statusShowHistoryReciept: state.statusShowHistoryReciept,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_STATUS\",\n            });\n        },\n        getTypeToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_TYPE\",\n                data: data\n            });\n        },\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n        addNewProductToShoppingBags: (newProduct) => {\n            dispatch({\n                type: \"ADD_NEW_PRODUCT_SHOPPING_BAGS\",\n                newProduct: newProduct,\n            })\n        },\n        raiseQuantity: (name) => {\n            dispatch({\n                type: \"RAISE_QUANTITY_SHOPPING_BAGS\",\n                name: name,\n            })\n        },\n        showAlert: (message, typeMessage) => {\n          dispatch({\n            type: \"SHOW_ALERT\",\n            message: message,\n            typeMessage: typeMessage,\n          })\n        },\n        hideAlert: () => {\n          dispatch({\n            type: \"HIDE_ALERT\",\n          })\n        }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SellProduct);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/ReiceiptManager.js",["597"],"import React, { Component } from 'react';\nimport { Container, Grid, Button } from '@mui/material';\nimport CollapsibleTable from './TableReciept'\nimport StatusReceiptType from './StatusReceiptType';\nimport DateReciept from './DateReciept';\nimport ControlReciept from './ControlReciept';\nimport '../../css/RecieptManager.css'\nimport SearchReceipt from './SearchReceipt';\n\nclass ReceiptManager extends Component {\n    render() {\n        return (\n            <div className=\"profile\" style={{ overflow: 'scroll', overflowX: 'hidden', height: '100vh' }}>\n                <Container style={{ marginBottom: '20px', marginTop: '20px' }} maxWidth=\"xl\">\n                    <Grid className=\"profile-body\" container spacing={2}>\n                        <Grid item  lg={3} md={12} sm={12}>\n                            <Grid container spacing={2}>\n                                <Grid item md={12} sm={12}>\n                                    <DateReciept></DateReciept>\n                                </Grid>\n                                <Grid item md={12} sm={12}>\n                                    <StatusReceiptType></StatusReceiptType>\n                                </Grid>\n                                <Grid item md={12} sm={12}>\n                                    <ControlReciept></ControlReciept>\n                                </Grid>\n                            </Grid>\n                        </Grid>\n                        <Grid item  lg={9} md={12} sm={12}>\n                            <Grid>\n                                <Grid item md={12} sm={12}>\n                                    <SearchReceipt></SearchReceipt>\n                                </Grid>\n                            </Grid>\n                            <CollapsibleTable></CollapsibleTable>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default ReceiptManager;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/DashBoard.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/Profile.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/EditTypeModal.js",["598","599","600","601"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit} from 'react-icons/bi';\nimport { TiDelete } from \"react-icons/ti\";\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport axios from 'axios';\nimport AddTypeModal from './AddTypeModal';\n\nvar productTypes =[];\nvar listTypeInfor = [];\n\nclass EditTypeModal extends Component {\n    constructor(props) {\n        super(props);\n        this.loadAllType();\n        this.state = {\n            change: false\n        }\n    }\n    confirm = () => {\n        // Thực hiện các lệnh xử lý tại đây\n        this.props.changeConfirmStatus();\n    }\n    cancel = () => {\n        // this.props.changeConfirmStatus();\n        this.props.changeEditTypeStatus();\n    }\n    edit = (type) => {\n        this.props.changeAddTypeStatus();\n        this.props.setEditTypeStatus();\n        this.props.typeToUpdate(type);\n        this.props.changeEditTypeStatus();\n    }\n    async delete(type){\n        const data = {\n            token: localStorage.getItem('token'),\n            productTypes:\n            [\n                {\n                    typeID: type._id.typeID,\n                    storeID: type._id.storeID\n                }\n            ]\n                \n        }\n        await axios.delete(`http://localhost:5000/api/product/type`,{data: data})\n            .then(res => {\n                console.log(\"delete success\");\n            })\n            .catch(err => {\n                alert(err);\n                // alert(\"Lỗi gì cmnr\")\n            })\n        // Ở đây mình phải cập nhật join nữa\n        // Phải get tất cả cái join mà có cái type là type hiện tại\n        var allJoinMatch = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n                \"_id.typeID\": type._id.typeID,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, \n        {\n            params: {...data1}\n        })\n            .then(res => {\n                allJoinMatch = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n\n        var allProductJoin = [];\n        for(var i = 0 ; i < allJoinMatch.length; i++)\n        {\n            allProductJoin.push({\n                productID: allJoinMatch[i]._id.productID,\n                typeID: type._id.typeID,\n                importDate: allJoinMatch[i]._id.importDate,\n                storeID: this.props.infoUser.email,\n                \n            });\n        }\n        \n        const dataJoin = {\n            token: localStorage.getItem('token'),\n            productJoinTypes: allProductJoin,      \n        }\n\n        console.log(dataJoin);\n\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\n            .then(res => {\n                console.log(\"delete join success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n\n        this.loadAllType();\n        this.setState({change: !this.state.change})\n    }\n    \n\n\n    async loadAllType() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err); // 401 ở đây\n            })\n        //Get data và lưu các tên Type vào bảng\n        listTypeInfor=[];\n        for(var i=0; i < result.length ; i++)\n        {\n            listTypeInfor.push(result[i]);\n        }\n        productTypes=[];\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\n        {\n            productTypes.push(listTypeInfor[i].name);\n        }\n        this.setState({change: true});\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"All Good Type\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <Grid container item md={12} xs={12} spacing={0}>\n                                { listTypeInfor.map((type) => (\n                                    <Grid item md={3} style={{border:'1px solid #333', padding: 4}}>\n                                        <span>{type.name}</span>\n                                        <BiEdit onClick={() => this.edit(type)}/>\n                                        <TiDelete onClick={() => this.delete(type)}/>\n                                    </Grid>\n                                ))}\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <Stack spacing={3}>\n                                   \n                                </Stack>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\n                            Thoát\n                        </Button>\n                    </Box>\n                </Card>\n                {/* {this.props.addTypeStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\n                            <AddTypeModal></AddTypeModal>\n                        </div>\n                    ): null} */}\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        editTypeStatus: state.editTypeStatus,\n        addTypeStatus: state.addTypeStatus,\n        isAddTypeStatus: state.isAddTypeStatus,\n        infoUser: state.infoUser,\n        typeProductValue: state.typeProductValue,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeEditTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\n            });\n        },\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        setEditTypeStatus: () => {\n            dispatch({\n                type: \"SET_EDIT_TYPE_STATUS\",\n            })\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        typeToUpdate: (data) => {\n            dispatch({\n                type: \"UPDATE_PRODUCT_TYPE\",\n                _id: {\n                    typeID: data._id.typeID,\n                    storeID: data._id.storeID,\n                },\n                name: data.name\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTypeModal);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateTimeKeepingModal.js",["602","603","604","605","606","607","608","609","610","611","612","613","614","615","616","617","618"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, \n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nvar listDayInWeek = [\n    {ID:'T2',name:'Thứ hai'}, \n    {ID:'T3',name:'Thứ ba'}, \n    {ID:'T4',name:'Thứ tư'}, \n    {ID:'T5',name:'Thứ năm'}, \n    {ID:'T6',name:'Thứ sáu'}, \n    {ID:'T7',name:'Thứ bảy'}, \n    {ID:'CN',name:'Chủ nhật'}\n];\n\nclass UpdateTimeKeepingModal extends Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n            timeKeepingID: '',\n            dayChosed: '',\n            shiftID: '',\n        };\n        this.loadInitialData()\n    }\n\n    // Thêm nhân viên\n    async addEmployeeToDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: document.querySelector('input[name=\"ID\"]').value,\n                    storeID: this.props.infoUser.email,\n                },\n                managerID: this.props.infoUser.email,\n                password: document.querySelector('input[name=\"password\"]').value,\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\n                email: document.querySelector('input[name=\"email\"]').value,\n                address: document.querySelector('input[name=\"adress\"]').value,\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\n                // endDate: \"2021-11-31T00:00:00.000Z\",\n            }   \n        }\n        console.log(data);\n        await axios.post(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Save success\");\n                alert(\"Lưu thành công\")\n            })\n            .catch(err => {\n                alert(err);\n                console.log(err);\n            })\n    }\n\n    // cancel = () => {\n    //     this.props.changeAddNextWeekTimeKeepingStatus();\n    // }\n\n    // addEmployee = () => {\n    //     this.addEmployeeToDatabase();\n    //     this.props.changeAddEmployeeStatus();\n    // }\n    realDate = '';\n    shiftID = '';\n    dayChosed = '';\n    timeKeepingID = '';\n    loadInitialData()\n    {\n        console.log(this.props.updateTimeKeepingValue.state);\n        this.realDate = this.props.updateTimeKeepingValue.state.realDate;\n        this.shiftID = this.props.updateTimeKeepingValue.state._id.shiftType._id.shiftID;\n        this.timeKeepingID = this.props.updateTimeKeepingValue.state._id.employee._id.employeeID;\n        this.dayChosed= this.props.updateTimeKeepingValue.state._id.dateInWeek;\n        this.setState({\n            shiftID : this.props.updateTimeKeepingValue.state._id.shiftType._id.shiftID,\n            dayChosed: this.props.updateTimeKeepingValue.state._id.dateInWeek,\n            timeKeepingID: this.props.updateTimeKeepingValue.state._id.employee._id.employeeID,\n        });\n    }\n\n    findIndexCurrentKeepingInRedux(id)\n    {\n        //Đụng đến nếu sửa bảng\n        var listToSearch = this.props.listTimeKeeper;\n        for(var i = 0 ; i < listToSearch.length ; i ++)\n        {\n            if(listToSearch[i]._id.dateInWeek == id.dateInWeek && \n                listToSearch[i]._id.shiftType._id.shiftID == id.shiftType._id.shiftID&& \n                listToSearch[i]._id.employee._id.employeeID == id.employee._id.employeeID)\n            {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    checkContraint() {\n        if(this.dayChosed.length == 0)\n        {\n            alert(\"Chưa chọn ngày nào trong tuần\");\n            return false;\n        }\n        if(this.shiftID.length == 0)\n        {\n            alert(\"Chưa chọn ca nào\");\n            return false;\n        }\n        // console.log(this.state.timeKeepingID );\n        if( this.timeKeepingID == undefined || this.timeKeepingID.length == 0)\n        {\n            alert(\"Chưa chọn nhân viên nào để chấm công\"); \n            return false;\n        }\n        // Có CSDL thì báo xem có trùng với cái cũ ko nữa\n        \n        alert(\"Đã check hết constraint\");\n        return true;\n    }\n\n\n    UpdateChange() {\n        if(this.checkContraint()==false) return;\n        const data = {\n            _id: {\n                dateInWeek: this.dayChosed,\n                storeID: this.props.infoUser.email,\n                shiftType: {\n                    _id: {\n                        shiftID: this.shiftID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n                employee: {\n                    _id: {\n                        employeeID: this.timeKeepingID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n            },\n            realDate: document.querySelector('input[name=\"realDate\"]').value,\n        };\n        // axios.put(`http://localhost:5000/api/????`, data)\n        //     .then(res => {\n        //         console.log(\"Update success\");\n        //         alert('Đã update thành công sản phẩm')\n        //     })\n        //     .catch(err => {\n        //         console.log(err);\n        //     })\n        this.props.updateTimeKeeper(data, this.findIndexCurrentKeepingInRedux(data._id));\n        console.log(data);\n        this.props.changeUpdateTimeKeepingStatus();\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \n                    title=\"Update TimeKeeper\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            Real Date\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"date\" \n                                            name='realDate'\n                                            readOnly={true}\n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.realDate}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Choose Day in week\n                                        </div>\n                                        <FormControl sx={{ minWidth: 120 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                readOnly={true}\n                                                value = {this.dayChosed}\n                                                onChange={(event) => {\n                                                    this.dayChosed = event.target.value;\n                                                    this.setState({dayChosed: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    listDayInWeek.map((item) =>\n                                                        <MenuItem value={item.ID}>\n                                                            {item.name}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n\n                                    <Grid item md={8} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>\n                                            Choose Shift\n                                        </div>\n                                        <FormControl sx={{ minWidth: 220 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                readOnly={true}\n                                                value={this.shiftID}\n                                                onChange={(event) => {\n                                                    this.shiftID = event.target.value;\n                                                    this.setState({shiftID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\n                                                    : this.props.listShift.map((shift) =>\n                                                        <MenuItem value={shift._id.shiftID}>\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            TimeKeeping Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                readOnly={true}\n                                                value={this.timeKeepingID}\n                                                onChange={(event) => {\n                                                    this.timeKeepingID = event.target.value;\n                                                    this.setState({timeKeepingID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        !(this.state.alterID == item._id.employeeID) ?\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                        : null\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.UpdateChange()}>\n                                            Update Change\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        listTimeKeeper: state.listTimeKeeping,\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listShift: state.listShift,\n        listEmployee: state.listEmployee,\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\n        updateTimeKeepingValue: state.updateTimeKeepingValue,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeUpdateTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        addNewTimeKeeper: (data) => {\n            dispatch({\n                type: \"ADD_NEW_TIME_KEEPER\",\n                data: data,\n            });\n        }, \n        updateTimeKeeper: (data, indexOfVal) => {\n            dispatch({\n                type: \"UPDATE_TIMEKEEPER\",\n                data: data,\n                index: indexOfVal\n            });\n        }, \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateTimeKeepingModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/SearchReceipt.js",["619","620","621"],"import React, { useState } from 'react';\nimport { BiSearchAlt } from 'react-icons/bi'\nimport { useDispatch , useSelector } from 'react-redux'\n\nfunction SearchReceipt(props) {\n    const search = useSelector(state => state.search)\n    const dispatch = useDispatch();\n\n\n    React.useEffect(() => {\n        dispatch({\n            type: \"RESET_SEARCH\",\n        })\n    }, [])\n\n    return (\n        <div className=\"search-customize\" style={{ borderRadius: '6px', backgroundColor: 'white', justifyContent: 'center', display: 'flex', marginBottom: '10px', padding: '10px' }}>\n            <BiSearchAlt style={{ fontSize: '1.6rem', marginRight: '10px', marginLeft: '10px' }}></BiSearchAlt>\n            <input onChange={(e) => {dispatch({type:\"CHANGE_SEARCH\", object: e.target.value })}} type=\"text\" style={{ width: '100%', outline: 'none', border: 'none' }} placeholder=\"Theo mã hóa đơn\"></input>\n        </div>\n    );\n}\n\nexport default SearchReceipt;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/ControlReciept.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/DateReciept.js",["622"],"import React from 'react';\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\nimport { useSelector, useDispatch } from 'react-redux'\nimport TextField from '@mui/material/TextField';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\n\n\nfunction DataReciept(props) {\n    const dispatch = useDispatch()\n    const typeByDate = useSelector(state => state.typeByDate)\n    const [value, setValue] = React.useState(new Date());\n    const [value1, setValue1] = React.useState('all');\n    const darkmode = useSelector(state => state.statusDarkmode)\n\n    const selectDate = () => {\n        const data = {\n            type: \"typeByDate\",\n            day: value.getDate(),\n            month: value.getMonth() + 1,\n            year: value.getFullYear(),\n        }\n        dispatch({\n            type: \"TYPE_BY_DATE\",\n            typeByDate: data,\n        })\n    }\n\n    const changeTime = (newValue) => {\n        if (newValue) {\n            setValue(newValue);\n        }\n        if (typeByDate.type === 'typeByDate') {\n            const data = {\n                type: \"typeByDate\",\n                day: newValue.getDate(),\n                month: newValue.getMonth() + 1,\n                year: newValue.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        }\n    }\n\n    const selectType = () => {\n        if (value1 === 'all') {\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: { type: 'all' },\n            })\n        } else if (value1 === 'yesterday') {\n            let yesterday = new Date()\n            const data = {\n                type: \"yesterday\",\n                day: yesterday.getDate() - 1,\n                month: yesterday.getMonth() + 1,\n                year: yesterday.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        } else if (value1 === 'today') {\n            let today = new Date()\n            const data = {\n                type: \"today\",\n                day: today.getDate(),\n                month: today.getMonth() + 1,\n                year: today.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        } else if (value1 === 'lastmonth') {\n            let today = new Date()\n            const data = {\n                type: \"lastmonth\",\n                month: today.getMonth(),\n                year: today.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        } else if (value1 === 'lastyear') {\n            let today = new Date()\n            const data = {\n                type: \"lastyear\",\n                year: today.getFullYear() - 1,\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        }\n    }\n\n    const changeType = (e) => {\n        setValue1(e.target.value)\n        if (typeByDate.type === 'all' || typeByDate.type === 'yesterday' || typeByDate.type === 'today' || typeByDate.type === 'lastmonth' || typeByDate.type === 'lastyear') {\n            if (e.target.value === 'all') {\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: { type: 'all' },\n                })\n            }\n            if (e.target.value === 'yesterday') {\n                let yesterday = new Date()\n                let data = {\n                    type: \"yesterday\",\n                    day: yesterday.getDate() - 1,\n                    month: yesterday.getMonth() + 1,\n                    year: yesterday.getFullYear(),\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n            if (e.target.value === 'today') {\n                let today = new Date()\n                const data = {\n                    type: \"today\",\n                    day: today.getDate(),\n                    month: today.getMonth() + 1,\n                    year: today.getFullYear(),\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n            if (e.target.value === 'lastmonth') {\n                let today = new Date()\n                const data = {\n                    type: \"lastmonth\",\n                    month: today.getMonth(),\n                    year: today.getFullYear(),\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n            if (e.target.value === 'lastyear') {\n                let today = new Date()\n                const data = {\n                    type: \"lastyear\",\n                    year: today.getFullYear() - 1,\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n        }\n    }\n\n    React.useEffect(() => {\n        dispatch({\n            type: \"TYPE_BY_DATE\",\n            typeByDate: { type: 'all' },\n        })\n    }, [])\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item md={12} sm={12}  >\n                <Card>\n                    <CardHeader style={{ color: !darkmode ? '#0091ea' :'white', backgroundColor: !darkmode ? '#efeeef' :'#455a64'}} title=\"Date\" />\n                    <Divider></Divider>\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                <Grid item md={12} sm={12}>\n                                    <div className=\"form-check\">\n                                        <input onClick={() => selectType()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault2\" defaultChecked />\n                                        <FormControl fullWidth>\n                                            <InputLabel id=\"demo-simple-select-label\">Group by</InputLabel>\n                                            <Select\n                                                labelId=\"demo-simple-select-label\"\n                                                id=\"demo-simple-select\"\n                                                value={value1}\n                                                label=\"Option\"\n                                                onChange={(e) => changeType(e)}\n                                            >\n                                                <MenuItem value='all'>All</MenuItem>\n                                                <MenuItem value='today'>Today</MenuItem>\n                                                <MenuItem value='yesterday'>Yesterday</MenuItem>\n                                                <MenuItem value='lastmonth'>Last month</MenuItem>\n                                                <MenuItem value='lastyear'>Last year</MenuItem>\n                                            </Select>\n                                        </FormControl>\n                                    </div>\n                                </Grid>\n                                <Grid item md={12} sm={12}>\n                                    <div className=\"form-check\">\n                                        <input onClick={() => selectDate()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\" />\n                                        <DesktopDatePicker\n                                            label=\"Ngày\"\n                                            value={value}\n                                            minDate={new Date('2017-01-01')}\n                                            onChange={(newValue) => changeTime(newValue)}\n                                            renderInput={(params) => <TextField {...params} />}\n                                        />\n                                    </div>\n                                </Grid>\n                            </LocalizationProvider>\n                        </Grid>\n                    </CardContent>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default DataReciept;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ModalAdd.js",["623","624","625","626"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport TimePicker from '@mui/lab/TimePicker';\nimport { GiCancel } from 'react-icons/gi'\nimport axios from 'axios';\n\nclass ModalAdd extends Component {\n    constructor(props) {\n        super(props);\n\n        if (this.props.editShiftStatus) {\n            var _timeFrom = new Date();\n            if (this.props.objectEditShift.from.includes(\"PM\")) {\n                var fromHour =  parseInt(this.props.objectEditShift.from.slice(0, this.props.objectEditShift.from.indexOf(':')));\n                var fromMin = parseInt(this.props.objectEditShift.from.slice(this.props.objectEditShift.from.indexOf(':') + 1));\n                _timeFrom.setHours(fromHour + 12, fromMin);\n            } else {\n                var fromHour =  parseInt(this.props.objectEditShift.from.slice(0, this.props.objectEditShift.from.indexOf(':')));\n                var fromMin = parseInt(this.props.objectEditShift.from.slice(this.props.objectEditShift.from.indexOf(':') + 1));\n                _timeFrom.setHours(fromHour , fromMin);\n            }\n           \n            var _timeTo = new Date();\n            if (this.props.objectEditShift.to.includes(\"PM\")) {\n                var toHour = parseInt(this.props.objectEditShift.to.slice(0, this.props.objectEditShift.to.indexOf(':')));\n                var toMin = parseInt(this.props.objectEditShift.to.slice(this.props.objectEditShift.to.indexOf(':') + 1));\n                _timeTo.setHours(toHour + 12, toMin);\n            } else {\n                var toHour = parseInt(this.props.objectEditShift.to.slice(0, this.props.objectEditShift.to.indexOf(':')));\n                var toMin = parseInt(this.props.objectEditShift.to.slice(this.props.objectEditShift.to.indexOf(':') + 1));\n                _timeTo.setHours(toHour, toMin);\n            }\n            \n        }\n\n        this.state = {\n            timeFrom: this.props.editShiftStatus ? _timeFrom : new Date(2018, 5, 35, 0, 0, 0),\n            timeTo: this.props.editShiftStatus ? _timeTo : new Date(2018, 5, 35, 0, 0, 0),\n            isSalary: false,\n            isDescription: false,\n            isTimeTo: false,\n            valueTime: this.props.editShiftStatus ? 1 : null,\n        }\n    }\n\n    descriptionShift = this.props.editShiftStatus ? this.props.objectEditShift.description : \"Ex : abc\"\n    timeFrom = this.props.editShiftStatus ? this.props.objectEditShift.from : \"00:00 AM\"\n    timeTo = this.props.editShiftStatus ? this.props.objectEditShift.to : \"00:00 AM\"\n    salary = this.props.editShiftStatus ? this.props.objectEditShift.salary : 10000\n\n    // Handle user\n    hanhleCancel = (e) => {\n        this.props.changeAddStatus();\n        if (this.props.editShiftStatus) {\n            this.props.changeEditShiftStatus();\n        }\n    }\n\n    changeTimeFrom = (e) => {\n        var hourse = e.getHours()\n        const minutes = e.getMinutes()\n        if (hourse >= 12) {\n            hourse = hourse - 12;\n            this.timeFrom = hourse.toString() + \":\" + minutes.toString() + \" PM\"\n        } else {\n            this.timeFrom = hourse.toString() + \":\" + minutes.toString() + \" AM\"\n        }\n        console.log(this.timeFrom);\n        this.setState({\n            timeFrom: e,\n        })\n    }\n\n    changeTimeTo = (e) => {\n        var hourse = e.getHours()\n        const minutes = e.getMinutes()\n        if (hourse >= 12) {\n            hourse = hourse - 12;\n            this.timeTo = hourse.toString() + \":\" + minutes.toString() + \" PM\"\n        } else {\n            this.timeTo = hourse.toString() + \":\" + minutes.toString() + \" AM\"\n        }\n        console.log(this.timeTo);\n        this.setState({\n            timeTo: e,\n        })\n    }\n\n    blurDiscription = (e) => {\n        this.descriptionShift = e.target.value;\n        if (e.target.value === \"\") {\n            this.setState({\n                isDescription: true,\n            })\n        } else {\n            this.setState({\n                isDescription: false,\n            })\n        }\n    }\n\n\n    // Tạo code để xác nhận\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    editShift = async () => {\n        if (this.state.timeTo - this.state.timeFrom < 1) {\n            this.props.hideAlert();\n            this.props.showAlert('The time end must be greater than the time start', 'error')\n        }\n        if (!this.state.isSalary && !this.state.isDescription && (this.state.timeTo - this.state.timeFrom > 0)) {\n            var data = {\n                token: localStorage.getItem('token'),\n                idUser: this.props.infoUser.email,\n                id: this.props.objectEditShift.id,\n                salary: this.salary,\n                description: this.descriptionShift,\n                from: this.timeFrom,\n                to: this.timeTo,\n            }\n            await axios.post(`http://localhost:5000/api/profile/update-shift`, data)\n                .then(res => {\n                    if (res.data.token) {\n                        localStorage.setItem('token', res.data.token);\n                        this.props.hideAlert();\n                        this.props.showAlert(\"Edit shift success\", \"success\");\n                        this.props.updateShift(data);\n                    }\n                    this.props.changeEditShiftStatus();\n                    this.props.changeAddStatus();\n                })\n                .catch(err => {\n                    this.props.changeLoginStatus();\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n                })\n\n        }\n    }\n\n    blurSalary = (e) => {\n        if (e.target.value <= -1) {\n            this.setState({\n                isSalary: true,\n            })\n        } else {\n            this.setState({\n                isSalary: false,\n            })\n        }\n        this.salary = e.target.value;\n    }\n\n    // Call API\n    addShift = () => {\n        if (this.state.timeTo - this.state.timeFrom < 1) {\n            this.props.hideAlert();\n            this.props.showAlert('The time end must be greater than the time start', 'error')\n        }\n        if (!this.state.isSalary && !this.state.isDescription && (this.state.timeTo - this.state.timeFrom > 0)) {\n            const code = this.makeCode(6);\n            const data = {\n                idUser: this.props.infoUser.email,\n                id: code,\n                salary: this.salary,\n                description: this.descriptionShift,\n                from: this.timeFrom,\n                to: this.timeTo,\n            }\n            const data1 = {\n                name: this.descriptionShift,\n                salary: this.salary,\n                timeFrom: this.timeFrom,\n                timeEnd: this.timeTo,\n                _id: { shiftID: code }\n            }\n            if (data) {\n                axios.post(`http://localhost:5000/api/profile/add-shift`, {\n                    email: this.props.infoUser.email,\n                    token: localStorage.getItem('token'),\n                    data: data,\n                })\n                    .then(res => {\n                        if (res.data.token) {\n                            this.props.addShift(data1);\n                            localStorage.setItem('token', res.data.token);\n                            this.props.hideAlert();\n                            this.props.showAlert(\"Add shift success\", \"success\");\n                        }\n                        this.props.changeAddStatus();\n                    })\n                    .catch(err => {\n                        this.props.changeLoginStatus();\n                        this.props.hideAlert();\n                        this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n                    })\n            }\n        }\n    }\n\n    render() {\n        return (\n            <form className=\"modal-add-shift\" style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Create shift\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    id=\"outlined-basic\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    defaultValue={(this.props.editShiftStatus ? this.props.objectEditShift.description : this.descriptionShift)}\n                                    onBlur={(e) => this.blurDiscription(e)}\n                                    label=\"Shift description\"\n                                    error={this.state.isDescription}\n                                    helperText={this.state.isDescription ? \"Enter something\" : \"\"}\n                                    required\n                                    type=\"text\"\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    onBlur={(e) => this.blurSalary(e)}\n                                    label=\"Salary\"\n                                    defaultValue={this.props.editShiftStatus ? this.props.objectEditShift.salary : this.salary}\n                                    error={this.state.isSalary}\n                                    helperText={this.state.isSalary ? \"Greater than 0\" : \"\"}\n                                    type=\"number\"\n                                    id=\"outlined-error-helper-text\"\n                                    name=\"salary\"\n                                    variant=\"outlined\"\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                    <Stack spacing={3}>\n                                        <TimePicker\n                                            label=\"From\"\n                                            value={this.state.timeFrom}\n                                            onChange={(newValue) => this.changeTimeFrom(newValue)}\n                                            renderInput={(params) => <TextField {...params} />}\n                                        />\n                                        <TimePicker\n                                            label=\"To\"\n                                            value={this.state.timeTo}\n                                            onChange={(newValue) => this.changeTimeTo(newValue)}\n                                            renderInput={(params) => <TextField {...params} />}\n                                        />\n                                    </Stack>\n                                </LocalizationProvider>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        {this.props.editShiftStatus ? (\n                            <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.editShift()} variant=\"contained\" startIcon={<BiEdit />}>\n                                Save\n                            </Button>) : (\n                            <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.addShift()} variant=\"contained\" startIcon={<BiPlusMedical />}>\n                                Add\n                            </Button>\n                        )}\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.hanhleCancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\n                            Cancel\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addStatus: state.addStatus,\n        infoUser: state.infoUser,\n        editShiftStatus: state.editShiftStatus,\n        objectEditShift: state.objectEditShift,\n        statusDarkmode: state.statusDarkmode\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_STATUS\",\n            });\n        },\n        addShift: (data) => {\n            dispatch({\n                type: \"ADD_SHIFT\",\n                newShift: data,\n            })\n        },\n        changeEditShiftStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_SHIFT_STATUS\",\n            })\n        },\n        updateShift: (data) => {\n            dispatch({\n                type: \"OBJECT_UPDATE_SHIFT\",\n                data: data,\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalAdd);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/Regulation.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileSetting.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ListShift.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ChangePassword.js",["627","628","629"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, Button, CardContent } from '@mui/material';\nimport axios from 'axios';\nimport {connect} from 'react-redux'\nimport { FaCommentsDollar } from 'react-icons/fa';\nvar bcrypt = require('bcryptjs');\n\nclass ChangePassword extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isCurPass: false,\n            isNewPass: false,\n            isRePass: false,\n            isChangePass: false,\n        }\n    }\n\n    messCurPass = \"\"\n    messNewPass = \"\"\n    messRePass = \"\"\n    curPass = \"\"\n    newPass = \"\"\n    rePass = \"\"\n\n    // Gọi api change password\n    changePassword = async () => {\n        if(this.props.role == false){ \n            if(this.curPass != this.props.infoUser.password)\n            {\n                this.props.hideAlert();\n                this.props.showAlert(\"Not a correct pass\", \"error\");\n                return;\n            }\n            const data = {\n                token: localStorage.getItem('token'),\n                employee: {\n                    _id: {\n                        employeeID: this.props.infoUser.employeeID,\n                        storeID: this.props.infoUser.managerID,\n                    },\n                    managerID: this.props.infoUser.managerID,\n                    password: this.newPass,\n                    firstName: this.props.infoUser.firstName,\n                    lastName: this.props.infoUser.lastName,\n                    phoneNumber: this.props.infoUser.tel,\n                    email: this.props.infoUser.email,\n                    address: this.props.infoUser.address,\n                    cardID: this.props.infoUser.cardID,\n                }   \n            }\n            axios.put(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Change password success\", \"success\");\n                this.props.setEmployeePass(this.newPass);\n            })\n            .catch(err => {\n                console.log(err);\n            })\n        }\n        else {\n            const form = document.getElementById('form-change-password');\n            const data = {\n                token: localStorage.getItem('token'),\n                email: this.props.infoUser.email,\n                curPass: this.curPass,\n                newPass: this.hash(this.newPass),\n            }\n            await axios.post(`http://localhost:5000/api/profile/change-password`,data)\n            .then(res => {\n                if (res.data.status === -1) {\n                    this.props.hideAlert();\n                    this.props.showAlert(res.data.message, \"error\");\n                } else {\n                    form.reset();\n                    localStorage.setItem('token', res.data.token);\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Change password success\", \"success\");\n                }\n            })\n            .catch(err => {\n                this.props.changeLoginStatus();\n                this.props.hideAlert();\n                this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n            })\n        }\n        \n    }\n\n    // hash\n    hash = (pass) => {\n        var hash = bcrypt.hashSync(pass, 12)\n        return hash;\n    }\n\n    // Handele : blur, change\n    blurCurPassword = (e) => {\n        this.curPass= e.target.value;\n        if (e.target.value === \"\") {\n            this.setState({\n                isCurPass: false,\n                isChangePass: false,\n            })\n            return;\n        } else if (e.target.value.length < 6) {\n            this.messCurPass = \"Enter at least 6 characters\";\n            this.setState({\n                isCurPass: true,\n                isChangePass: false,\n            })\n        } else {\n            this.messCurPass = \"\";\n            this.setState({\n                isCurPass: false,\n            })\n            if(this.newPass.length>5 && this.newPass === this.rePass){\n                this.setState({\n                    isChangePass: true,\n                })\n            }\n        }\n    }\n\n    blurNewPassword = (e) => {\n        this.blurRePassword(e);\n        this.newPass = e.target.value;\n        if (e.target.value === \"\") {\n            this.setState({\n                isNewPass: false,\n                isChangePass: false,\n            })\n            return;\n        } else if (e.target.value.length < 6) {\n            this.messNewPass = \"Enter at least 6 characters\";\n            this.setState({\n                isNewPass: true,\n            })\n        } else {\n            this.messCurPass = \"\";\n            this.setState({\n                isNewPass: false,\n            })\n            this.blurRePassword(e);\n            if (this.rePass === this.newPass && this.curPass.length > 5){\n                this.setState({\n                    isChangePass: true,\n                })\n            }\n        }\n    }\n\n    blurRePassword = (e) => {\n        this.rePass = document.querySelector('input[name=\"re-password\"]').value\n        if (this.rePass !== this.newPass) {\n            this.messRePass = \"Re-password not correct\";\n            this.setState({\n                isRePass: true,\n                isChangePass: false,\n            })\n        } else {\n            this.messRePass = \"\";\n            this.setState({\n                isRePass: false,\n            })\n            if (this.rePass === this.newPass && this.curPass.length > 5){\n                this.setState({\n                    isChangePass: true,\n                })\n            }\n        }\n    }\n\n    render() {\n        return (\n            <form id=\"form-change-password\" style={{marginBottom: '15px', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Change Password\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    variant=\"standard\"\n                                    fullWidth\n                                    name=\"cur-password\"\n                                    label=\"Current password\"\n                                    onBlur={(e) => this.blurCurPassword(e)}\n                                    error={this.state.isCurPass}\n                                    helperText={this.messCurPass}\n                                    type=\"password\"\n                                    required\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    fullWidth\n                                    label=\"New password\"\n                                    name=\"new-password\"\n                                    required\n                                    onBlur={(e) => this.blurNewPassword(e)}\n                                    error={this.state.isNewPass}\n                                    helperText={this.messNewPass}\n                                    type=\"password\"\n                                    variant=\"standard\"\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    fullWidth\n                                    label=\"New password again\"\n                                    onBlur={(e) => this.blurRePassword(e)}\n                                    error={this.state.isRePass}\n                                    helperText={this.messRePass}\n                                    name=\"re-password\"\n                                    required\n                                    type=\"password\"\n                                    variant=\"standard\"\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', p: 2 }}>\n                        <Button color=\"primary\" disabled={!this.state.isChangePass} onClick={() => this.changePassword()} variant=\"contained\">Change</Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        infoUser: state.infoUser,\n        statusDarkmode: state.statusDarkmode,\n        role: state.role,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        setEmployeePass: (password) => {\n            dispatch({\n                type: \"SET_EMPLOYEE_PASS\",\n                password: password\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangePassword);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileDetail.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/AddTypeModal.js",["630","631","632","633","634","635","636","637"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Alert } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel, GiVampireCape } from 'react-icons/gi'\nimport axios from 'axios';\n\nvar listTypeInfor = [];\n\nclass AddTypeModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state= {\n            change: 'false'\n        }\n        this.loadInitialData();\n        this.getAllTypeList();\n    }\n    storeID = \"\";\n    typeList = [];\n\n    async getAllTypeList(){\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        console.log(data.token);\n        // alert(data.token);\n        console.log(data.filter);\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                alert(err);\n            })\n        //Get data và lưu các tên Type vào bảng\n        for(var i=0; i < result.length ; i++)\n        {\n            listTypeInfor.push(result[i]);\n        }\n    }\n    addType = () => {\n        var newTypeName = document.querySelector('input[name=\"typeName\"]').value.trim();\n        if(this.checkConstraint(newTypeName)==false)  return;\n        var genTypeID = 0;\n        if(listTypeInfor.length>0)\n        {\n            genTypeID = parseInt(listTypeInfor[listTypeInfor.length-1]._id.typeID) + 1;\n        } \n        const data = {\n            token: localStorage.getItem('token'),\n            productType: {\n                _id:{\n                    typeID: genTypeID,\n                    storeID: this.props.infoUser.email,\n                },\n                name: newTypeName,\n            }    \n        }\n        axios.post(`http://localhost:5000/api/product/type`, data)\n            .then(res => {\n                alert(\"Save success\");\n                //TODO: Cập nhật token ở đây nữa\n            })\n            .catch(err => {\n                alert(err);\n            })\n        this.props.changeAddTypeStatus();\n    }\n    \n    checkConstraint(typeName) {\n        //Constraint 1: Check name\n        for(var i=0;i<listTypeInfor.length;i++)\n        {\n            if(listTypeInfor[i].name==typeName)\n            {\n                if(!this.props.isAddTypeStatus && typeName.trim()==this.props.typeProductValue.name)\n                {\n                    alert(\"Không đổi tên à anh zai\");\n                    return false;\n                }\n                alert(\"Trùng tên rồi anh chai\");\n                return false;\n            }\n            \n        }        \n        // Constraint 2: Not blank\n        if(typeName.length==0)\n        {\n            alert(\"Không nhập gì à anh chai\")\n            return false;\n        }\n        return true;\n\n    }\n    cancel = () => {\n        this.props.changeAddTypeStatus();\n    }\n\n    handle = () => {\n        if (this.props.isAddTypeStatus)\n            this.addType();\n        else \n            this.editType();\n    }\n\n    editType = () => {\n        var newTypeName = this.typeName;\n        if(this.checkConstraint(newTypeName)==false) return;\n        const data = {\n            token: localStorage.getItem('token'),\n            productType: {\n                _id: {\n                    typeID: this.props.typeProductValue._id.typeID,\n                    storeID: this.props.infoUser.email,\n                }, \n                name: newTypeName,\n            }\n        }\n        // alert(data.product.name)\n        axios.put(`http://localhost:5000/api/product/type`, data)\n            .then(res => {\n                // Có khi mình sẽ cập nhật type ở dây\n                console.log(\"Update success\");\n                alert('update được rồi anh trai')\n            })\n            .catch(err => {\n                console.log(err);\n                alert(\"Lỗi gì cmnr\")\n            })\n        this.props.changeAddTypeStatus();\n        this.props.changeEditTypeStatus();\n    }\n    typeName = \"\";\n    loadInitialData = () => {\n        if (this.props.isAddTypeStatus) {\n            \n        }\n        else\n        {\n            this.typeName = this.props.typeProductValue.name;\n            this.setState({change: true});\n        } \n    }\n\n    changeTypeName(e)\n    {\n        this.typeName = e.target.value;\n    }\n    render() {\n        return (\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader \n                        style={{ color: 'blue', backgroundColor: '#efeeef', textAlign: 'center' }} \n                        title={this.props.isAddTypeStatus? \"Add Type\" : \"Edit Type\"}\n                        />\n                    <Divider />\n                    <CardContent>\n                        <Grid \n                            container \n                            spacing={2}\n                            justifyContent={'center'}\n                            alignItems={'center'}\n                        >\n                            <Grid item md={2} xs={12}>\n                                TypeName\n                            </Grid>\n                            <Grid item md={10} xs={12}>\n                                <TextField\n                                    id=\"outlined-basic\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    required\n                                    type=\"text\"\n                                    name=\"typeName\"\n                                    defaultValue={this.typeName}\n                                    onChange={(e) => this.changeTypeName(e)}\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <Stack spacing={3}>\n                                   \n                                </Stack>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        <Button \n                            style={{ backgroundColor: 'yellowgreen' }} \n                            // onClick={() => this.addShift()} \n                            onClick={() => this.handle()}\n                            variant=\"contained\" \n                            startIcon={<BiPlusMedical />}\n                        >\n                            Xác nhận\n                        </Button>\n                        <Button \n                            style={{ backgroundColor: 'red' }} \n                            // onClick={() => this.editShift()}\n                            onClick={() => this.cancel()}\n                            variant=\"contained\" \n                            startIcon={<GiCancel />}\n                        >\n                            Cancel\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        isAddTypeStatus: state.isAddTypeStatus,\n        infoUser: state.infoUser,\n        typeProductValue: state.typeProductValue\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeEditTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\n            });\n        },\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        addTypeToReducer: (data) => {\n            dispatch({\n                type: \"ADD_TYPE\",\n                data: data,\n            });\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTypeModal);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/DarkMode.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileHeader.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/Statistic.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/StatusReceiptType.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/HistoryReciept.js",["638","639"],"import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport CollapsibleTable from './TableReciept'\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\n\nfunction HistoryReciept(props) {\n\n    const darkmode = useSelector(state => state.statusDarkmode)\n    const dispatch = useDispatch();\n\n    return (\n        <div style={{ overflow: 'hidden' }} className=\"modal-history-reciept\">\n            <div onClick={() => { dispatch({ type: \"CHANGE_HISTORY_RECIEPT_STATUS\" }) }} className=\"modal-overlay\"></div>\n            <div className=\"history-list-receipt\">\n                <Card>\n                    <CardHeader style={{ color: !darkmode ? '#0091ea' : 'white', backgroundColor: !darkmode ? '#efeeef' : '#455a64' }} title=\"History Reciept\" />\n                    <Divider></Divider>\n                </Card>\n                <div id=\"choses-product\" style={{ margin: '30px', height: '82%', overflow: 'hidden', overflowY: 'scroll' }}>\n                    <CollapsibleTable></CollapsibleTable>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default HistoryReciept;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/Print.js",["640","641","642"],"import React from 'react';\nimport ReactToPrint from 'react-to-print';\nimport { connect } from 'react-redux';\nimport ComponentToPrint from './ComponentToPrint';\nimport axios from 'axios';\n\n\nclass Printf extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      percentDiscount: 0,\n      infoReciept: [],\n      code: '', \n      date: new Date(),\n      MAHD: \"HD\" + this.makeCode(6),\n    }\n  }\n\n  blurDiscount = (e) => {\n    if (e.target.value <= 100 && e.target.value >= 0) {\n      this.setState({\n        percentDiscount: e.target.value,\n      })\n    } else if (e.target.value < 0) {\n      this.setState({\n        percentDiscount: 0,\n      })\n    } else {\n      this.setState({\n        percentDiscount: 100,\n      })\n    }\n  }\n\n  changeDiscount = (e) => {\n    this.setState({\n      percentDiscount: e.target.value,\n    })\n  }\n\n  totalMoney = () => {\n    let total = 0;\n    this.props.shoppingBags.map(value => {\n      total += value.quantity * value.product.sellPrice;\n    })\n    return total;\n  }\n\n  reduceMoney = () => {\n    let total = 0;\n    this.props.shoppingBags.map(value => {\n      total += value.quantity * value.product.sellPrice;\n    })\n    if (total !== 0) {\n      total = total * this.state.percentDiscount / 100\n      return total;\n    }\n    return total;\n  }\n\n  totalFinalMoney = () => {\n    let total = 0;\n    this.props.shoppingBags.map(value => {\n      total += value.quantity * value.product.sellPrice;\n    })\n    if (total !== 0) {\n      total -= total * this.state.percentDiscount / 100\n      return total;\n    }\n    return total;\n  }\n\n  makeCode = (length) => {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() *\n        charactersLength));\n    }\n    return result;\n  }\n\n\n  addReciept = async () => {\n    if (this.props.shoppingBags.length === 0) {\n      this.props.hideAlert()\n      this.props.showAlert(\"Cart empty \", \"warning\")\n    } else {\n      let code = this.makeCode(8)\n      this.setState({\n        code: code\n      })\n      const data = {\n        MAHD: code,\n        idUser: this.props.infoUser.employeeID ? this.props.infoUser.employeeID : this.props.infoUser._id,\n        name: this.props.infoUser.lastName + \" \" + this.props.infoUser.firstName,\n        date: this.dateFunction(),\n        discount: this.state.percentDiscount,\n        totalMoney: this.totalMoney(),\n        totalFinalMoney: this.totalFinalMoney(),\n        listProduct: this.props.shoppingBags,\n        time: this.state.date.getHours() + \":\" + this.state.date.getMinutes(),\n        isEdit: false,\n        oldBill: this.props.statusEditInfoBill ? this.props.InfomationBillEdit : null,\n      }\n      axios.post('http://localhost:5000/api/sell-product/add-reciept', {\n        email: this.props.infoUser.managerID? this.props.infoUser.managerID : this.props.infoUser.email,\n        token: localStorage.getItem('token'),\n        data: data,\n      })\n        .then(res => {\n          if (res.status === 200) {\n            localStorage.setItem('token', res.data.token)\n            if (this.props.statusEditInfoBill) {\n              this.props.changeStatusEditRecipt()\n            }\n            this.setState({\n              infoReciept: this.props.shoppingBags,\n            })\n            this.props.hideAlert()\n            this.props.showAlert(\"Print bill success\", \"success\")\n            this.props.resetShoppingBag();\n            this.props.addRecieptToHistory(data);\n          }\n        })\n        .catch(err => {\n          this.props.changeLoginStatus();\n          this.props.hideAlert();\n          this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n        })\n\n    }\n\n  }\n\n  dateFunction = () => {\n    let month = this.state.date.getMonth() + 1;\n    return \"  \" + this.state.date.getDate() + \" / \" + month + \" / \" + this.state.date.getFullYear()\n  }\n\n  render() {\n    return (\n      <div>\n        <div style={{ margin: '0px' }} className=\"row\">\n          <div className=\"col-10 offset-1\">\n            <div className=\"row\">\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\n                <p style={{}}>Total</p>\n              </div>\n              <div className=\"col-5\">\n                <p style={{ textAlign: 'end', marginBottom: '0', fontSize: '1.2rem' }}>{this.totalMoney().toLocaleString()}</p>\n              </div>\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\n                <p>Discount (%)</p>\n              </div>\n              <div style={{ marginBottom: '10px' }} className=\"col-5\">\n                <input value={this.state.percentDiscount} onChange={(e) => this.changeDiscount(e)} onBlur={(e) => this.blurDiscount(e)} style={{ fontSize: '1.2rem', border: 'none', outline: 'none', textAlign: 'end', width: '100%', borderBottom: '1px solid black' }} min={0} max={100} type=\"number\"></input>\n              </div>\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\n                <p style={{}}>Reduce</p>\n              </div>\n              <div className=\"col-5\">\n                <p style={{ textAlign: 'end', marginBottom: '0', fontSize: '1.2rem' }}>-{this.reduceMoney().toLocaleString()}</p>\n              </div>\n              <div className=\"col-7\">\n                <p style={{ margin: '0', fontSize: '1.2rem', fontWeight: '700' }}>TOTAL FINAL</p>\n              </div>\n              <div className=\"col-5\">\n                <p style={{ margin: '0', fontSize: '1.2rem', textAlign: 'end', color: 'green', fontWeight: '700' }}>{this.totalFinalMoney().toLocaleString()}</p>\n              </div>\n            </div>\n          </div>\n          <div onClick={() => this.addReciept()} style={{ cursor: 'pointer' }} className=\"col-12\">\n            <ReactToPrint\n              trigger={() => {\n\n                return <div style={{ marginTop: '10px', borderRadius: '4px', fontWeight: '600', backgroundColor: '#37c737', textAlign: 'center', alignContent: 'center', padding: '15px 0', fontSize: '1.4rem' }}>\n                  PAY (F9)\n                </div>;\n              }}\n              content={this.props.shoppingBags.length !== 0 ? () => this.componentRef : null}\n            />\n          </div>\n          <div className=\"col-12\">\n            <p onClick={() => this.props.changeStatusHistoryReciept()} style={{ cursor: 'pointer' }}>(*) Receipt history</p>\n          </div>\n        </div>\n              {console.log(this.props.shoppingBags)}\n        {/* Ẩn đi */}\n        <div style={{ display: 'none' }}>\n          <ComponentToPrint MAHD={this.state.code} percentDiscount={this.state.percentDiscount} infoUser={this.props.infoUser} shoppingBags={this.props.shoppingBags} ref={el => (this.componentRef = el)} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    infoUser: state.infoUser,\n    shoppingBags: state.shoppingBags,\n    statusEditInfoBill: state.statusEditInfoBill,\n    InfomationBillEdit: state.InfomationBillEdit,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    changeStatusHistoryReciept: () => {\n      dispatch({\n        type: \"CHANGE_HISTORY_RECIEPT_STATUS\",\n      });\n    },\n    addRecieptToHistory: (data) => {\n      dispatch({\n        type: \"ADD_RECIEPT\",\n        newReciept: data,\n      });\n    },\n    showAlert: (message, typeMessage) => {\n      dispatch({\n        type: \"SHOW_ALERT\",\n        message: message,\n        typeMessage: typeMessage,\n      })\n    },\n    hideAlert: () => {\n      dispatch({\n        type: \"HIDE_ALERT\",\n      })\n    },\n    resetShoppingBag: () => {\n      dispatch({\n        type: \"RESET_SHOPPING_BAGS\"\n      })\n    },\n    changeStatusEditRecipt: () => {\n      dispatch({\n        type: \"CHANGE_EDIT_INFOMATION_STATUS\"\n      })\n    },\n    changeLoginStatus: () => {\n      dispatch({\n          type: \"CHANGE_LOGIN_STATUS\",\n      });\n  },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Printf)","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/ShoppingBags.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/TableReciept.js",["643","644","645","646","647","648","649","650","651","652","653","654","655","656"],"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Collapse from '@mui/material/Collapse';\nimport IconButton from '@mui/material/IconButton';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport { Grid, Box, Button, Checkbox, Modal } from '@mui/material';\nimport { red, lightBlue } from '@mui/material/colors';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport { useSelector, useDispatch } from 'react-redux'\nimport axios from 'axios';\nimport { FiXSquare } from 'react-icons/fi'\nimport { TiArrowBack } from 'react-icons/ti'\n\nfunction Row(props) {\n    const { row } = props;\n    const [open, setOpen] = React.useState(false);\n    const [openModal, setOpenModal] = React.useState(false);\n    const statusSelectAll = useSelector(state => state.statusSelectAll)\n    const infoUser = useSelector(state => state.infoUser)\n    const dispatch = useDispatch();\n    const [statusSelectReplace, setStatusSelectReplace] = React.useState(false);\n\n    const style = {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: 400,\n        bgcolor: 'background.paper',\n        border: '1px solid #000',\n        borderRadius: '5px',\n        boxShadow: 24,\n        pt: 2,\n        px: 4,\n        pb: 3,\n    };\n\n    React.useEffect(() => {\n        setStatusSelectReplace(statusSelectAll)\n    }, [statusSelectAll])\n\n    const countQuantity = () => {\n        let count = 0;\n        row.listProduct.map(value => {\n            count += value.quantity;\n        })\n        return count;\n    }\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    //Xoa mềm\n    const DeleteReciept = (MAHD, isDelete) => {\n        if (isDelete) {\n            setOpenModal(true)\n        } else {\n            axios.post('http://localhost:5000/api/sell-product/soft-delete', {\n                token: localStorage.getItem('token'),\n                email: infoUser.email,\n                MAHD: MAHD\n            })\n                .then(res => {\n                    if (res.data.status === 1) {\n                        localStorage.setItem('token', res.data.token)\n                        dispatch({\n                            type: \"DELETE_RECIEPT\",\n                            MAHD: MAHD,\n                        })\n                        dispatch({\n                            type: \"HIDE_ALERT\",\n                        })\n                        dispatch({\n                            type: \"SHOW_ALERT\",\n                            message: 'Delete success',\n                            typeMessage: 'success',\n                        })\n                    }\n                })\n                .catch(err => {\n                    dispatch({\n                        type: \"CHANGE_LOGIN_STATUS\",\n                    });\n                    dispatch({\n                        type: \"HIDE_ALERT\",\n                    })\n                    dispatch({\n                        type: \"SHOW_ALERT\",\n                        message: 'Login timeout, signin again',\n                        typeMessage: 'warning',\n                    })\n                })\n            setOpen(!open)\n        }\n    }\n\n    // Xóa vĩnh viễn\n    const PermanentlyDelete = async (MAHD) => {\n        axios.post('http://localhost:5000/api/sell-product/permanently-delete', {\n            token: localStorage.getItem('token'),\n            email: infoUser.email,\n            MAHD: MAHD\n        })\n            .then(res => {\n                if (res.data.status === 1) {\n                    localStorage.setItem('token', res.data.token)\n                    dispatch({\n                        type: \"DELETE_ONE_RECIEPT\",\n                        MAHD: MAHD,\n                    })\n                    dispatch({\n                        type: \"HIDE_ALERT\",\n                    })\n                    dispatch({\n                        type: \"SHOW_ALERT\",\n                        message: 'Delete success',\n                        typeMessage: 'success',\n                    })\n                }\n            })\n            .catch(err => {\n                dispatch({\n                    type: \"CHANGE_LOGIN_STATUS\",\n                });\n                dispatch({\n                    type: \"HIDE_ALERT\",\n                })\n                dispatch({\n                    type: \"SHOW_ALERT\",\n                    message: 'Login timeout, signin again',\n                    typeMessage: 'warning',\n                })\n            })\n        setOpenModal(false)\n    }\n\n    const TypeReciept = (isEdit, isDelete, oldBill) => {\n        if (isDelete) {\n            return red[400]\n        } else if (isEdit) {\n            return '#f4f492'\n        } else if (oldBill){\n            return '#00897b'\n        } else {\n            return '#a6ffa6'\n        }\n    }\n\n    const StatusTypeReciept = (isEdit, isDelete) => {\n        if (isDelete) {\n            return 'Đã xóa'\n        } else if (isEdit) {\n            return 'Đổi trả'\n        } else {\n            return 'Thành công'\n        }\n    }\n\n    const RestoneReciept =  async (MAHD) => {\n        await axios.post('http://localhost:5000/api/sell-product/restone-receipt', {\n            token: localStorage.getItem('token'),\n            email: infoUser.email,\n            MAHD: MAHD\n        })\n            .then(res => {\n                localStorage.setItem('token', res.data.token)\n                if(res.data.status === 1) {\n                    dispatch({\n                        type: 'RESTONE_ONE_RECIEPT',\n                        MAHD: MAHD\n                    })\n                    dispatch({\n                        type: \"HIDE_ALERT\",\n                    })\n                    dispatch({\n                        type: \"SHOW_ALERT\",\n                        message: 'Restone success',\n                        typeMessage: 'success',\n                    })\n                }\n            })\n            .catch(err => {\n                dispatch({\n                    type: \"CHANGE_LOGIN_STATUS\",\n                });\n                dispatch({\n                    type: \"HIDE_ALERT\",\n                })\n                dispatch({\n                    type: \"SHOW_ALERT\",\n                    message: 'Login timeout, signin again',\n                    typeMessage: 'warning',\n                })\n            })\n        setOpen(false);\n    }\n\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } };\n\n    const ChangeCheckbox = (e, MAHD) => {\n        setStatusSelectReplace(!statusSelectReplace);\n        if (e.target.checked) {\n            dispatch({\n                type: \"ADD_MAHD_RECIEPT\",\n                MAHD: MAHD,\n            })\n        } else {\n            dispatch({\n                type: \"DELETE_MAHD_RECIEPT\",\n                MAHD: MAHD,\n            })\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <TableRow style={{ backgroundColor: TypeReciept(row.isEdit, row.deleted, row.oldBill), borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: '#90a4ae #90a4ae transparent #90a4ae' }} sx={{ '& > *': { borderBottom: 'unset' } }}>\n                <TableCell>\n                    <Checkbox {...label} checked={statusSelectReplace} onChange={(e) => ChangeCheckbox(e, row.MAHD)} color=\"default\" />\n                </TableCell>\n                <TableCell>\n                    <IconButton\n                        aria-label=\"expand row\"\n                        size=\"small\"\n                        onClick={() => setOpen(!open)}\n                    >\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {row.MAHD}\n                </TableCell>\n                <TableCell align=\"right\">{row.date}</TableCell>\n                <TableCell align=\"right\">{row.totalMoney.toLocaleString()}</TableCell>\n                <TableCell align=\"right\">{row.discount}</TableCell>\n                <TableCell align=\"right\">{row.totalFinalMoney.toLocaleString()}</TableCell>\n            </TableRow>\n            <TableRow style={{ borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: 'transparent #90a4ae #90a4ae #90a4ae' }}>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={12}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box sx={{ margin: 1 }}>\n                            <Typography style={{ fontWeight: '600' }} variant=\"h6\" gutterBottom component=\"div\">\n                                Detail Recipet\n                            </Typography>\n                            <Grid container spacing={3}>\n                                <Grid item lg={6} md={12} sm={12} xs={12}>\n                                    <Table size=\"small\" aria-label=\"purchases\">\n                                        <TableHead>\n                                            <TableRow>\n\n                                                <TableCell>#</TableCell>\n                                                <TableCell>Name</TableCell>\n                                                <TableCell>Quantity</TableCell>\n                                                <TableCell align=\"right\">Price</TableCell>\n                                                <TableCell align=\"right\">Total Price</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {row.listProduct.map((value, key) => (\n                                                <TableRow key={value.name}>\n                                                    <TableCell>\n                                                        {key + 1}\n                                                    </TableCell>\n                                                    <TableCell>{value.product.name}</TableCell>\n                                                    <TableCell>{value.quantity}</TableCell>\n                                                    <TableCell align=\"right\">{value.product.sellPrice.toLocaleString()}</TableCell>\n                                                    <TableCell align=\"right\">\n                                                        {(value.quantity * value.product.sellPrice).toLocaleString()}\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </Grid>\n                                <Grid style={{ borderLeft: '1px solid black', marginTop: '15px' }} item lg={6} md={12} sm={12} xs={12}>\n                                    <Grid container spacing={3}>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Mã hóa đơn:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.MAHD}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Trạng thái:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{StatusTypeReciept(row.isEdit, row.deleted)}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Thời gian:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.date}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Giờ:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.time}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Mã HD củ:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.oldBill ? row.oldBill.MAHD : \"Không có\"}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Người bán:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.name}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Tổng số lượng:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{countQuantity()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Tổng tiền hàng:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.totalMoney.toLocaleString()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Giảm giá (%):</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.discount}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>TỔNG:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>{row.totalFinalMoney.toLocaleString()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid style={{ marginBottom: '10px' }} item md={12} xs={12}>\n                                    <Grid style={{ justifyContent: 'end' }} container>\n                                        {row.deleted ? (\n                                            <Grid style={{ justifyContent: 'end' }} item md={2} xs={2}>\n                                                <Button onClick={() => RestoneReciept(row.MAHD)} style={{ fontWeight: '700', fontSize: '0.6rem', backgroundColor: '#00bfa5', color: 'white' }}>\n                                                    <TiArrowBack style={{ marginRight: '5px', fontSize: '1rem', transform: 'translateY(-5%)' }}></TiArrowBack>\n                                                    Restone\n                                                </Button>\n                                            </Grid>\n                                        ) : null}\n                                        <Grid style={{ justifyContent: 'end' }} item md={2} xs={2}>\n                                            <Button onClick={() => DeleteReciept(row.MAHD, row.deleted)} style={{ fontWeight: '700', fontSize: '0.6rem', backgroundColor: red[400], color: 'white' }}>\n                                                <FiXSquare style={{ marginRight: '5px', fontSize: '1rem', transform: 'translateY(-5%)' }}></FiXSquare>\n                                                Xóa bỏ\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n            <Modal\n                open={openModal}\n                onClose={handleClose}\n                aria-labelledby=\"parent-modal-title\"\n                aria-describedby=\"parent-modal-description\"\n            >\n                <Box sx={{ ...style, width: 400 }}>\n                    <h2 style={{ textAlign: 'center' }} id=\"parent-modal-title\">Are you sure to delete?</h2>\n                    <Grid container spacing={2}>\n                        <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\n                            <Button onClick={() => PermanentlyDelete(row.MAHD)} style={{ color: 'white', backgroundColor: red[500] }}>DELETE</Button>\n                        </Grid>\n                        <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\n                            <Button onClick={() => setOpenModal(false)} style={{ backgroundColor: lightBlue[100] }}>CANCEL</Button>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Modal>\n        </React.Fragment>\n    );\n}\n\nRow.propTypes = {\n    row: PropTypes.shape({\n        calories: PropTypes.number.isRequired,\n        carbs: PropTypes.number.isRequired,\n        fat: PropTypes.number.isRequired,\n        history: PropTypes.arrayOf(\n            PropTypes.shape({\n                amount: PropTypes.number.isRequired,\n                customerId: PropTypes.string.isRequired,\n                date: PropTypes.string.isRequired,\n            }),\n        ).isRequired,\n        name: PropTypes.string.isRequired,\n        price: PropTypes.number.isRequired,\n        protein: PropTypes.number.isRequired,\n    }).isRequired,\n};\n\n\nexport default function CollapsibleTable() {\n    const typeReciept = useSelector(state => state.typeReciept)\n    const listReciept = useSelector(state => state.listReciept)\n    const typeByDate = useSelector(state => state.typeByDate)\n    const [listRecieptReplace, setListRecieptReplace] = React.useState(listReciept);\n    const statusSelectAll = useSelector(state => state.statusSelectAll)\n    const search = useSelector(state => state.search)\n    const dispatch = useDispatch()\n    let listMAHD = []\n    React.useEffect(() => {\n        var list = typeReciept.length === 0 ? listReciept : listReciept.filter(value => {\n            for (var i = 0; i < typeReciept.length; i++) {\n                if (typeReciept[i] === 'delete') {\n                    if (value.deleted) {\n                        return value;\n                    }\n                } else if (typeReciept[i] === 'return') {\n                    if (!value.deleted && value.isEdit) {\n                        return value;\n                    }\n                } else {\n                    if (!value.deleted && !value.isEdit) {\n                        return value;\n                    }\n                }\n            }\n        })\n\n        if (typeByDate.type === 'typeByDate' || typeByDate.type === 'yesterday' || typeByDate.type === 'today') {\n            list = list.filter(value => {\n                let timeMau = value.date;\n                timeMau = timeMau.replace(/\\s/g, \"\");\n                timeMau = timeMau.split(\"/\");\n                if (typeByDate.day == timeMau[0] && typeByDate.month == timeMau[1] && typeByDate.year == timeMau[2]) {\n                    return value;\n                }\n            })\n        }\n\n        if (typeByDate.type === 'lastmonth') {\n            list = list.filter(value => {\n                let timeMau = value.date;\n                timeMau = timeMau.replace(/\\s/g, \"\");\n                timeMau = timeMau.split(\"/\");\n                if (typeByDate.month == timeMau[1] && typeByDate.year == timeMau[2]) {\n                    return value;\n                }\n            })\n        }\n\n        if (typeByDate.type === 'lastyear') {\n            list = list.filter(value => {\n                let timeMau = value.date;\n                timeMau = timeMau.replace(/\\s/g, \"\");\n                timeMau = timeMau.split(\"/\");\n                if (typeByDate.year == timeMau[2]) {\n                    return value;\n                }\n            })\n        }\n\n        if (search.length !== 0) {\n            list = list.filter(value => {\n                let isCheck = true\n                for (let i = 0; i < search.length; i++) {\n                    if (search[0] !== value.MAHD[0]) {\n                        isCheck = false;\n                        break;\n                    }\n                }\n                if (isCheck) {\n                    return value;\n                }\n            })\n        }\n\n\n        list.map(value => {\n            listMAHD.push(value.MAHD)\n        })\n\n        statusSelectAll ? dispatch({\n            type: \"SELECTED_ALL_RECIEPT\",\n            listMAHD: listMAHD,\n        }) : dispatch({\n            type: \"RESET_MAHD_RECIEPT\"\n        })\n\n\n        setListRecieptReplace(list)\n    }, [typeReciept, typeByDate, listReciept, statusSelectAll, search])\n\n    return (\n        <TableContainer component={Paper}>\n            <Table aria-label=\"collapsible table\">\n                <TableHead>\n                    <TableRow style={{ backgroundColor: 'black', color: 'white' }}>\n                        <TableCell>\n                        </TableCell>\n                        <TableCell />\n                        <TableCell >Mã HĐ</TableCell>\n                        <TableCell align=\"right\">Ngày hóa đơn</TableCell>\n                        <TableCell align=\"right\">Tổng hóa đơn</TableCell>\n                        <TableCell align=\"right\">Giảm giá</TableCell>\n                        <TableCell align=\"right\">Khách hàng trả</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {listRecieptReplace ?\n                        listRecieptReplace.map((row) => (\n                            <Row key={row.MAHD} row={row} />\n                        )) : null\n                    }\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/Tabs.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/ConfirmModal.js",["657","658","659","660","661","662"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport axios from 'axios';\n\nclass ConfirmModal extends Component {\n    constructor(props) {\n        super(props);\n    }\n    confirm = () => {\n        // Thực hiện các lệnh xử lý tại đây\n        this.props.changeConfirmStatus();\n        this.props.setConfirm();\n    }\n\n    cancel = () => {\n        this.props.changeConfirmStatus();\n        this.props.setQuit();\n    }\n\n    getMessage = ()  => {\n        var message = \"Cái này chưa code\";\n        switch(this.props.confirmCode)\n        {\n            case 'confirm-delete-good':\n                message = \"Are you sure to delete this product ?\";\n            case 'confirm-import-good':\n                message = \"Are you sure to import this product ?\";\n        }\n        return (\n            <div>\n                {message}\n            </div>\n        );\n    }\n    render() {\n        console.log(this.props.objectEditShift);\n        return (\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <Grid item md={12} xs={12}>\n                                {this.getMessage()}\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <Stack spacing={3}>\n                                   \n                                </Stack>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.confirm()} variant=\"contained\" startIcon={<BiPlusMedical />}>\n                            Xác nhận\n                        </Button>\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\n                            Hủy\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        confirmStatus: state.confirmStatus,\n        deleteStatus: state.deleteStatus,\n        confirmCode: state.confirmCode,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        setConfirm: () => {\n            dispatch({\n                type: \"CONFIRM\",\n            });\n        },\n        setQuit: () => {\n            dispatch({\n                type: \"QUIT\",\n            });\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmModal);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/UpdateGoodModal.js",["663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678","679","680","681","682","683","684","685","686","687","688","689"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport GoodImage from './goodExample.jpg';\nimport AddTypeModal from './AddTypeModal';\nimport { withStyles } from '@material-ui/styles';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport DatePicker from '@mui/lab/DatePicker';\nimport DateTimePicker from '@mui/lab/DateTimePicker';\nimport { AiFillPlusCircle} from \"react-icons/ai\";\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport ConfirmModal from './ConfirmModal';\n\nvar productTypes =[];\nvar listTypeInfor=[];\n// typeSet chứa id của các cái type\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nclass UpdateGoodModal extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            goodID : \"\",\n            change: false,\n            imageSelect: \"null\",\n            type:'none',\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\n        }; \n        typeSet = [];\n        this.loadInitialData();\n        this.loadAllType();\n        this.loadCurrentTypes();\n        \n    }\n    imgUrl='none';\n    goodID='';\n    importDate='';\n    name='';\n    imgUrl='';\n    quantity = 0;\n    remain = 0;\n    unit = \"\";\n    importPrice = \"\";\n    sellPrice = \"\";\n    expire =\"\";\n    finishUpImage = true;\n\n    async loadAllType() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        //Get data và lưu các tên Type vào bảng\n        listTypeInfor=[];\n        for(var i=0; i < result.length ; i++)\n        {\n            listTypeInfor.push(result[i]);\n        }\n        productTypes=[];\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\n        {\n            productTypes.push(listTypeInfor[i].name);\n        }\n        this.setState({change: true});\n    }\n\n    async loadCurrentTypes() {\n        // Get hết các cái join của sản phẩm\n        var allJoinMatch = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n                \"_id.productID\": this.goodID,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, \n        {\n            params: {...data1}\n        })\n            .then(res => {\n                allJoinMatch = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        console.log(\"Các join\",allJoinMatch);\n        // Thêm vào trên cái bảng typeSet\n        for(var i = 0 ; i < allJoinMatch.length ; i ++)\n        {\n            typeSet.push(allJoinMatch[i]._id.typeID);\n        }\n        this.setState({change: !this.state.change});\n    }\n    getTypeNamebyTypeID (typeID) {\n        var typeName='';\n        for(var i = 0; i<listTypeInfor.length;i++)\n        {   \n            if(listTypeInfor[i]._id.typeID == typeID)\n            {\n                typeName = listTypeInfor[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    checkConstraint = () => {\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\n        // Constraint 1: Check name\n        var productName =  document.querySelector('input[name=\"goodName\"]').value;\n        if(productName.length == 0)\n        {\n            alert(\"Tên sản phẩm không được trống\");\n            return false;\n        }\n        // Constraint 2: Check quantity\n        if(document.querySelector('input[name=\"goodQuantity\"]').value.length == 0)\n        {\n            alert(\"Số lượng sản phẩm không được trống\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value) <= 0) \n        {\n            alert('Số lượng sản phẩm phải lớn hơn 0');\n            return false;\n        }\n        // Constraint 3: check Unit\n        if(document.querySelector('input[name=\"unit\"]').value.length == 0)\n        {\n            alert('Đơn vị của sản phẩm không được trống');\n            return false;\n        }\n        // Constraint 4: Check import Price\n        if(document.querySelector('input[name=\"originalPrice\"]').value.length == 0)\n        {\n            alert(\"Giá nhập không được trống\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <= 0) \n        {\n            alert('Giá nhập phải lớn hơn 0');\n            return false;\n        }\n        // Constraint 5: check sell Price\n        if(document.querySelector('input[name=\"sellPrice\"]').value.length == 0)\n        {\n            alert(\"Giá bán không được trống\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"sellPrice\"]').value) <= 0) \n        {\n            alert('Giá bán phải lớn hơn 0');\n            return false;\n        }\n        // Constraint 6: Ngày nhập phải nhỏ  hơn ngày hết hạn và ngày hết hạn, ngày nhập phải khác null\n        if (\n            (\n                new Date(document.querySelector('input[name=\"importDate\"]').value).getTime()\n                - \n                new Date(document.querySelector('input[name=\"expiredDate\"]').value).getTime()\n            ) >= 0\n        )\n        {\n            alert('Không thể nhập hàng hết hạn');\n            return false;\n        }\n        // Constraint 7: Check giá gốc nhỏ hơn giá bán\n        if(\n            parseInt(document.querySelector('input[name=\"sellPrice\"]').value) \n            - \n            parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <=0\n            ) \n        {\n            alert('Giá bán phải lớn hơn giá gốc');\n            return false;\n        }\n        // Constraint 8: check xem đã  up ảnh lên xong chưa\n        if(this.finishUpImage == false)\n        {\n            alert('Ảnh chưa được upload xong');\n            return false;\n        }\n        alert('Constraint đã check đầy đủ');\n        return true;\n    }\n    async updateGood() {\n        var isContinue = this.checkConstraint();\n        if(!isContinue)\n        {\n            return;\n        }\n        this.props.changeUpdateGoodStatus();\n        var productInfo = this.props.infoUpdate;\n        const data = {\n            token: localStorage.getItem('token'),\n            product: {\n                _id: {\n                    productID: document.querySelector('input[name=\"goodID\"]').value,\n                    importDate: productInfo._id.importDate,\n                    storeID: this.props.infoUser.email,\n                },\n                name: this.name,\n                quantity: this.quantity,\n                // remain: document.querySelector('input[name=\"goodQuantity\"]').value,\n                importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\n                sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\n                imgUrl: this.imgUrl,\n                unit: document.querySelector('input[name=\"unit\"]').value,\n            }\n        }\n        console.log(\"Updategood\",data);\n        axios.put(`http://localhost:5000/api/product`, data)\n            .then(res => {\n                console.log(\"Update success\");\n                alert('Đã update thành công sản phẩm')\n            })\n            .catch(err => {\n                console.log(err);\n            })\n        // Get hết các cái join của sản phẩm\n        var allJoinMatch = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n                \"_id.productID\": this.goodID,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, \n        {\n            params: {...data1}\n        })\n            .then(res => {\n                allJoinMatch = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        console.log(allJoinMatch);\n        // Xoá các join liên quan đến sản phẩm\n        var allProductJoin = [];\n        for(var i = 0 ; i < allJoinMatch.length; i++)\n        {\n            allProductJoin.push({\n                productID: this.goodID,\n                typeID: allJoinMatch[i]._id.typeID,\n                importDate: allJoinMatch[i]._id.importDate,\n                storeID: this.props.infoUser.email,\n            });\n        }\n        const dataJoin = {\n            token: localStorage.getItem('token'),\n            productJoinTypes: allProductJoin,      \n        }\n\n        console.log(dataJoin);\n\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\n            .then(res => {\n                console.log(\"delete join success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n        // Thêm các cái hiện tại\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\n        for(var i = 0 ; i < typeSet.length ; i++)\n        {\n            const data1 = {\n                token: localStorage.getItem('token'),\n                productJoinType: {\n                    _id : {\n                        productID: this.goodID,\n                        typeID: typeSet[i], \n                        importDate: productInfo._id.importDate,\n                        storeID: this.props.infoUser.email,\n                    }\n                }\n            }\n            axios.post(`http://localhost:5000/api/product/join`, data1)\n                .then(res => {\n                    console.log(\"lưu vô bảng join thành công\");\n                })\n                .catch(err => {\n                    console.log(err);\n                })\n        }\n    }\n\n\n    cancel = () => {\n        this.props.changeUpdateGoodStatus();\n    }\n\n    loadInitialData = () => {\n        // Load các dữ liệu ban đầu của form ở đây để mà update nhưng mà bị lỗi 401 mẹ\n        //Xử lý sampleData\n        var productInfo = this.props.infoUpdate;\n        console.log(this.props.infoUpdate);\n\n        this.goodID = (productInfo._id.productID == null) ? '' : productInfo._id.productID;\n        this.importDate = productInfo._id.importDate;\n        this.importDate = this.importDate == null ? '' :this.importDate.substring(0, this.importDate.indexOf('T'));\n        this.name = productInfo.name == null ? '' : productInfo.name;\n        this.imgUrl = productInfo.imgUrl == null ? '' : productInfo.imgUrl;\n        this.quantity = productInfo.quantity == null ? '' : productInfo.quantity;\n        // this.remain = productInfo.remain;\n        this.unit = productInfo.unit == null ? '' : productInfo.unit;\n        this.importPrice = productInfo.importPrice == null ? '' : productInfo.importPrice;\n        this.sellPrice = productInfo.sellPrice == null ? '' : productInfo.sellPrice;\n        this.expire = productInfo.expires; //substring(0,productInfo.expire.indexOf('T'));\n        this.expire = this.expire == null ? '' :this.expire.substring(0, this.expire.indexOf('T'));\n        console.log(\"this.expire\",this.expire );\n        this.setState({change: !this.state.change});\n    }\n\n    profileImageChange = (fileChangeEvent) => {\n        this.setState({\n            imageSelect: fileChangeEvent.target.files[0],\n        })\n        this.finishUpImage = false;\n        const file = fileChangeEvent.target.files[0];\n        const { type } = file;\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\n        } else {\n            const formData = new FormData();\n            formData.append(\"file\", fileChangeEvent.target.files[0])\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\n            axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\n                .then(res => {\n                    this.imgUrl=res.data.url;\n                    this.setState({\n                        change: 'true'\n                    });\n                })\n                .catch(err => {\n                    console.log(\"Thất bại\");\n                })\n        }\n        this.finishUpImage = true;\n    }\n\n    changeName = (e) => {\n        this.name = e.target.value;\n    }\n\n    changeValue = (e, variable) =>\n    {\n        if(variable=='quantity')\n        {\n            this.quantity = e.target.value;\n        }\n    }\n\n    foundTypeInSet(typeID) {\n        for(var i = 0 ; i < typeSet.length; i++)\n        {\n            if(typeSet[i]==typeID._id.typeID) return true;\n        }\n        return false;\n    }\n    render() {\n        \n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"UPDATE GOOD\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                marginTop: '0px'\n                            }}\n                        >   \n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            {/* Ẩn đi */}\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                        </Grid>\n                        <Grid item md={12}>\n\n                            <Card \n                            >\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            ID\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '100%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            name=\"goodID\" \n                                            variant=\"outlined\" \n                                            value={this.goodID}\n                                            readOnly={true}\n                                            disabled={true}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                        style={{\n                                            marginLeft: 0,\n                                            paddingLeft: 0\n                                        }}\n                                    >\n                                        <div className=\"input-label\" style={{width: 128}}>Import Date</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\" \n                                            style = {{width: '68%'}} \n                                            fullWidth\n                                            name=\"importDate\"\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.importDate}\n                                            readOnly={true}\n                                            disabled={true}\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '100%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            name=\"goodName\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.name}\n                                            onChange={(e) => this.changeName(e)} \n                                        />\n                                    </Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                        style={{padding: '0px', marginLeft: '0px'}}\n                                    >\n                                        <div \n                                            className=\"input-label\" \n                                            style={{width: '100px'}}\n                                        >\n                                            Quantity\n                                        </div>\n                                        <StyledTextField\n                                            style = {{width: '60%'}} \n                                            fullWidth\n                                            name=\"goodQuantity\" \n                                            variant=\"outlined\"\n                                            type=\"number\" \n                                            defaultValue={this.quantity}\n                                            onChange={(e) => this.changeValue(e, 'quantity')}\n                                        />\n                                    </Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                        style={{\n                                            paddingRight: 24\n                                        }}\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                marginLeft: 0,\n                                                paddingLeft: 4\n                                            }}\n                                        >\n                                            Unit\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box'\n                                            style = {{width: '100%', marginLeft: '4px'}} \n                                            fullWidth\n                                            variant=\"outlined\"\n                                            type=\"text\" \n                                            name=\"unit\" \n                                            defaultValue={this.unit}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6}\n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: 128}}>Original Price</div>\n                                        <StyledTextField\n                                            classname='input-box'\n                                            style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \n                                            fullWidth\n                                            name=\"originalPrice\" \n                                            variant=\"outlined\"\n                                            type=\"number\"\n                                            defaultValue={this.importPrice}\n                                        />\n                                        đ\n                                    </Grid>\n                                    <Grid item md={6}\n                                        className='input-item'\n                                        style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{width: '96px'}}\n                                        >\n                                            Sell Price\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box'\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \n                                            fullWidth\n                                            name=\"sellPrice\" \n                                            variant=\"outlined\"\n                                            type=\"number\" \n                                            defaultValue={this.sellPrice}\n                                        />\n                                        đ\n                                    </Grid>\n                                    <Grid item md={7} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            name=\"expiredDate\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.expire} \n                                        />\n                                        {/* <StyledTextField\n                                            classname='input-box'\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \n                                            fullWidth\n                                            name=\"sellPrice\" \n                                            variant=\"outlined\"\n                                            value={this.expire}\n                                        /> */}\n                                    </Grid>\n                                    <Grid item md={10}\n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{width:132}}\n                                        >\n                                            Product Type\n                                        </div>\n                                        <FormControl sx={{ minWidth: 120 }}>\n                                        {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                        <Select\n                                            value={this.state.type}\n                                            onChange={(event) => {\n                                                this.setState({type: event.target.value});\n                                                if(!typeSet.includes(event.target.value))\n                                                {\n                                                    typeSet.push(event.target.value);\n                                                }\n                                            }}\n                                            style={{\n                                                height: 36,\n                                            }}\n                                        >\n                                            {\n                                                listTypeInfor.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\n                                                : listTypeInfor.map((type) =>\n                                                    ! this.foundTypeInSet(type) \n                                                    ? <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\n                                                    : null\n                                                )\n                                            }   \n                                        </Select> \n                                    </FormControl>\n                                        <Button onClick={() => this.handleAdd()}>\n                                            <AiFillPlusCircle\n                                                size={28}\n                                                style={{\n                                                    fontSize: 28,\n                                                    margin: 0,\n                                                    padding: 0,\n                                                    width: 28,\n                                                    height: 28\n                                                }}    \n                                            />\n                                        </Button>\n                                        <div className='all-type-container'>\n                                            {\n                                                Array.from(typeSet).map((type) =>\n                                                    <div item md={7} className='type-container'>\n                                                        <CancelIcon\n                                                            className='close-icon'\n                                                            size={10}\n                                                            onClick={() => {\n                                                                typeSet = typeSet.filter(function(item) {\n                                                                    return item != type;\n                                                                })\n                                                                console.log(typeSet);\n                                                                this.setState({type: 'none'});\n                                                            }}\n                                                \n                                                        />\n                                                        <span className='type-title'>\n                                                            {this.getTypeNamebyTypeID(type)}\n                                                        </span>\n                                                    </div>\n                                                    \n                                                )\n                                            }\n                                        </div>\n                                    </Grid>\n                                    {/* <Grid item md={10}\n                                        className='input-item'\n                                    >\n\n                                    </Grid> */}\n                                    <Grid item md={2}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.updateGood()}>\n                                            UPDATE\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                        \n                    {this.props.addTypeStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\n                            <AddTypeModal></AddTypeModal>\n                        </div>\n                    ): null}\n                    {this.props.confirmStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\n                            <ConfirmModal></ConfirmModal>\n                        </div>\n                    ): null}\n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        updateGoodStatus: state.updateGoodStatus,\n        confirmStatus: state.confirmStatus,\n        infoUpdate: state.infoUpdate,\n        infoUser: state.infoUser,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeUpdateGoodStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\n            });\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        setUpdateConfirm: () => {\n            dispatch({\n                type: \"SET_CONFIRM_UPDATE_GOOD\",\n            }); \n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateGoodModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/SearchBar.js",["690","691","692","693"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Input from \"@material-ui/core/Input\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { MdClear} from \"react-icons/md\";\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport { withStyles } from '@material-ui/styles';\nimport classNames from \"classnames\";\n\nconst styles = theme => ({\n  root: {\n    // height: theme.spacing(6),\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    height: \"80px\",\n  },\n//   iconButton: {\n//     color: theme.palette.action.active,\n//     transform: \"scale(1, 1)\",\n//     transition: theme.transitions.create([\"transform\", \"color\"], {\n//       duration: theme.transitions.duration.shorter,\n//       easing: theme.transitions.easing.easeInOut,\n//     }),\n//   },\n  iconButtonHidden: {\n    transform: \"scale(0, 0)\",\n    \"& > $icon\": {\n      opacity: 0,\n    },\n  },\n  searchIconButton: {\n    // marginRight: theme.spacing(-6),\n  },\n//   icon: {\n//     transition: theme.transitions.create([\"opacity\"], {\n//       duration: theme.transitions.duration.shorter,\n//       easing: theme.transitions.easing.easeInOut,\n//     }),\n//   },\n  input: {\n    width: \"100%\",\n  },\n  searchContainer: {\n    margin: \"4px 8px 4px 8px\",\n    height: \"40px\",\n    // width: `calc(100% - ${theme.spacing(6 + 4)}px)`, // 6 button + 4 margin\n  },\n});\nconst SearchBar = React.forwardRef(\n  (\n    {\n      cancelOnEscape,\n      className,\n      classes,\n      closeIcon,\n      disabled,\n      onCancelSearch,\n      onRequestSearch,\n      searchIcon,\n      style,\n      ...inputProps\n    },\n    ref\n  ) => {\n    const inputRef = React.useRef();\n    const [value, setValue] = React.useState(inputProps.value);\n\n    React.useEffect(() => {\n      setValue(inputProps.value);\n    }, [inputProps.value]);\n\n    const handleFocus = React.useCallback(\n      (e) => {\n        if (inputProps.onFocus) {\n          inputProps.onFocus(e);\n        }\n      },\n      [inputProps.onFocus]\n    );\n\n    const handleBlur = React.useCallback(\n      (e) => {\n        setValue((v) => v.trim());\n        if (inputProps.onBlur) {\n          inputProps.onBlur(e);\n        }\n      },\n      [inputProps.onBlur]\n    );\n\n    const handleInput = React.useCallback(\n      (e) => {\n        setValue(e.target.value);\n        if (inputProps.onChange) {\n          inputProps.onChange(e.target.value);\n        }\n      },\n      [inputProps.onChange]\n    );\n\n    const handleCancel = React.useCallback(() => {\n      setValue(\"\");\n      if (onCancelSearch) {\n        onCancelSearch();\n      }\n    }, [onCancelSearch]);\n\n    const handleRequestSearch = React.useCallback(() => {\n      if (onRequestSearch) {\n        onRequestSearch(value);\n      }\n    }, [onRequestSearch, value]);\n\n    const handleKeyUp = React.useCallback(\n      (e) => {\n        if (e.charCode === 13 || e.key === \"Enter\") {\n          handleRequestSearch();\n        } else if (\n          cancelOnEscape &&\n          (e.charCode === 27 || e.key === \"Escape\")\n        ) {\n          handleCancel();\n        }\n        if (inputProps.onKeyUp) {\n          inputProps.onKeyUp(e);\n        }\n      },\n      [handleRequestSearch, cancelOnEscape, handleCancel, inputProps.onKeyUp]\n    );\n\n    React.useImperativeHandle(ref, () => ({\n      focus: () => {\n        inputRef.current.focus();\n      },\n      blur: () => {\n        inputRef.current.blur();\n      },\n    }));\n\n    return (\n      <Paper className={classNames(classes.root, className)} style={{height: '40px'}}>\n        <div className={classes.searchContainer}>\n          <Input\n            {...inputProps}\n            inputRef={inputRef}\n            onBlur={handleBlur}\n            value={value}\n            onChange={handleInput}\n            onKeyUp={handleKeyUp}\n            onFocus={handleFocus}\n            fullWidth\n            className={classes.input}\n            disableUnderline\n            disabled={disabled}\n          />\n        </div>\n        <IconButton\n          onClick={handleRequestSearch}\n          className={classNames(classes.iconButton, classes.searchIconButton, {\n            [classes.iconButtonHidden]: value !== \"\",\n          })}\n          disabled={disabled}\n        >\n          {React.cloneElement(searchIcon, {\n            classes: { root: classes.icon },\n          })}\n        </IconButton>\n        <IconButton\n          onClick={handleCancel}\n          className={classNames(classes.iconButton, {\n            [classes.iconButtonHidden]: value === \"\",\n          })}\n          disabled={disabled}\n        >\n          {React.cloneElement(closeIcon, {\n            classes: { root: classes.icon },\n          })}\n        </IconButton>\n      </Paper>\n    );\n  }\n);\n\nSearchBar.defaultProps = {\n  className: \"\",\n  closeIcon: <MdClear/>,\n  disabled: false,\n  placeholder: \"Search\",\n  searchIcon: <AiOutlineSearch />,\n  style: null,\n  value: \"\",\n};\n\nSearchBar.propTypes = {\n  cancelOnEscape: PropTypes.bool,\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  closeIcon: PropTypes.node,\n  disabled: PropTypes.bool,\n  onCancelSearch: PropTypes.func,\n  onChange: PropTypes.func,\n  onRequestSearch: PropTypes.func,\n  placeholder: PropTypes.string,\n  searchIcon: PropTypes.node,\n  style: PropTypes.object,\n  value: PropTypes.string,\n};\n\nexport default withStyles(styles)(SearchBar);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/GoodTable.js",["694","695","696","697"],"import * as React from 'react';\nimport { Component } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { withStyles } from '@material-ui/styles';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport GoodRow from './TableRow';\n\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    } \n})\n\n\nvar listProductInfor = [];\nvar joinTypeInfor = [];\nvar listTypeInfor = [];\n\nclass GoodTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            update: false\n        }\n        this.loadAllType();\n        this.loadAllGood();\n        console.log(this.props.listProduct.state);\n    }\n    removeProduct= (row) => {\n        // Đây là xử lý ở phía dữ liệu, có thể await gì đó.\n        // Xử lý ở phía giao diện(tạm)\n\n        // Đây là câu lệnh để update nhẹ\n        this.setState({update: this.state.update})\n    }\n    async loadAllGood() {\n        var resultProduct = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }\n        }\n        await axios.get(`http://localhost:5000/api/product/`, {\n            params: { ...data }\n        })\n            .then(res => {\n                resultProduct = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err)\n            })\n        // Get hết từ cái productjoinType\n        var result = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, {\n            params: { ...data1 }\n        })\n            .then(res => {\n                result = res.data.data;\n                localStorage.getItem('token', res.data.token);\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err)\n            })\n        // Lấy các cái jointype\n        var joinTypeInfor = [];\n        for (let i = 0; i < result.length; i++) {\n            joinTypeInfor.push(result[i]);\n        }\n        console.log(\"joinTypeInfor\", joinTypeInfor);\n\n        var listProductInfor = [];\n        for (let i = 0; i < resultProduct.length; i++) {\n            var typeIDList = [];\n            var joinType = '';\n            for (var j = 0; j < joinTypeInfor.length; j++) {\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) \n                {\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\n                    joinType = joinType + ' ' + this.getTypeNamebyTypeID(joinTypeInfor[j]._id.typeID);\n                }\n            }\n\n            listProductInfor.push(\n                {\n                    ...resultProduct[i],\n                    typeIDList: typeIDList,\n                    joinType: joinType\n                });\n\n            // rows.push(\n            //     createData((i+1), obj._id.productID, obj.name, obj.quantity, \n            //         obj.importPrice, obj.sellPrice, obj._id.importDate, joinType, \n            //         obj.imgUrl, obj.unit, obj.expires, obj._id.storeID)\n            // );\n            \n        }\n        this.props.getProductToReducer(listProductInfor);\n        this.setState({ change: !this.state.change });\n    }\n    async loadAllType() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        //Get data và lưu các tên Type vào bảng\n        listTypeInfor=[];\n        for(var i=0; i < result.length ; i++)\n        {\n            listTypeInfor.push(result[i]);\n        }\n\n        this.setState({change: true});\n    }\n    getTypeNamebyTypeID (typeID) {\n        var typeName='';\n        for(var i = 0; i<listTypeInfor.length;i++)\n        {   \n            if(listTypeInfor[i]._id.typeID == typeID)\n            {\n                typeName = listTypeInfor[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div style={{height: '550px', width: '100%', overflowY: 'scroll'}}>\n                <TableContainer component={Paper}>\n                    <Table className={classes.goodTable} aria-label=\"collapsible table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ID</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">GoodName</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Quantity</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Sell Price</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ImportTime</TableCell>\n                                <TableCell className={classes.goodTable_Cell}/>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {\n                                this.props.listProduct.state == undefined ? (null):\n                                this.props.listProduct.state.map((product) => (\n                                    <GoodRow data={product} />\n                                ))\n                            }   \n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        infoUser: state.infoUser,\n        isAddTypeStatus: state.isAddTypeStatus,\n        confirmStatus: state.confirmStatus,\n        listProduct: state.listProduct,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(GoodTable));\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddTimeKeeperModal.js",["698","699","700","701","702","703","704","705","706","707","708","709","710","711"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, \n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nvar listDayInWeek = [\n    {ID:'T2',name:'Thứ hai'}, \n    {ID:'T3',name:'Thứ ba'}, \n    {ID:'T4',name:'Thứ tư'}, \n    {ID:'T5',name:'Thứ năm'}, \n    {ID:'T6',name:'Thứ sáu'}, \n    {ID:'T7',name:'Thứ bảy'}, \n    {ID:'CN',name:'Chủ nhật'}\n];\nclass AddTimeKeepingModal extends Component {\n\n    genID = 0;\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n            timeKeepingID: '',\n            alterID: '',\n            dayChosed: '',\n            shiftID: '',\n        };\n    }\n\n    // Thêm nhân viên\n    async addEmployeeToDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: document.querySelector('input[name=\"ID\"]').value,\n                    storeID: this.props.infoUser.email,\n                },\n                managerID: this.props.infoUser.email,\n                password: document.querySelector('input[name=\"password\"]').value,\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\n                email: document.querySelector('input[name=\"email\"]').value,\n                address: document.querySelector('input[name=\"adress\"]').value,\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\n                // endDate: \"2021-11-31T00:00:00.000Z\",\n            }   \n        }\n        console.log(data);\n        await axios.post(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Save success\");\n                alert(\"Lưu thành công\")\n            })\n            .catch(err => {\n                alert(err);\n                console.log(err);\n            })\n    }\n\n    // cancel = () => {\n    //     this.props.changeAddNextWeekTimeKeepingStatus();\n    // }\n\n    // addEmployee = () => {\n    //     this.addEmployeeToDatabase();\n    //     this.props.changeAddEmployeeStatus();\n    // }\n\n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    checkContraint() {\n        if(this.state.dayChosed.length == 0)\n        {\n            alert(\"Chưa chọn ngày nào trong tuần\");\n            return false;\n        }\n        if(this.state.shiftID.length == 0)\n        {\n            alert(\"Chưa chọn ca nào\");\n            return false;\n        }\n        console.log(this.state.timeKeepingID );\n        if( this.state.timeKeepingID == undefined || this.state.timeKeepingID.length == 0)\n        {\n            alert(\"Chưa chọn nhân viên nào để chấm công\"); \n            return false;\n        }\n        // Có CSDL thì báo xem có trùng với cái cũ ko nữa\n        \n        alert(\"Đã check hết constraint\");\n        return true;\n    }\n\n\n    addChange() {\n        if(this.checkContraint()==false);\n        const data = {\n            _id: {\n                dateInWeek: this.state.dayChosed,\n                storeID: this.props.infoUser.email,\n                shiftType: {\n                    _id: {\n                        shiftID: this.state.shiftID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n                employee: {\n                    _id: {\n                        employeeID: this.state.timeKeepingID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n            },\n            realDate: document.querySelector('input[name=\"realDate\"]').value,\n        };\n        // await axios.post(`http://localhost:5000/api/????``, data)\n        //   .then(res => {\n        //       console.log(\"Save success\");\n        //       alert(\"Lưu thành công\")\n        //   })\n        //   .catch(err => {\n        //       alert(err);\n        //       console.log(err);\n        //   })\n        this.props.addNewTimeKeeper(data);\n        this.props.changeAddTimeKeepingStatus();\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \n                    title=\"Change TimeKeeper\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            Real Date\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"date\" \n                                            name='realDate'\n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.getCurrentDateTime()}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Choose Day in week\n                                        </div>\n                                        <FormControl sx={{ minWidth: 120 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({dayChosed: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    listDayInWeek.map((item) =>\n                                                        <MenuItem value={item.ID}>\n                                                            {item.name}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n\n                                    <Grid item md={8} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>\n                                            Choose Shift\n                                        </div>\n                                        <FormControl sx={{ minWidth: 220 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({shiftID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\n                                                    : this.props.listShift.map((shift) =>\n                                                        <MenuItem value={shift._id.shiftID}>\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            TimeKeeping Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({timeKeepingID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        !(this.state.alterID == item._id.employeeID) ?\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                        : null\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.addChange()}>\n                                            Add Change\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listShift: state.listShift,\n        listEmployee: state.listEmployee,\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        addNewTimeKeeper: (data) => {\n            dispatch({\n                type: \"ADD_NEW_TIME_KEEPER\",\n                data: data,\n            });\n        } \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTimeKeepingModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/TimekeepingTable.js",["712","713","714","715","716","717","718"],"import {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { withStyles } from '@material-ui/styles';\n// material\nimport { Paper, TableContainer, Table, TableHead, TableCell, TableRow, Button} from '@mui/material';\nimport { AiOutlineEdit, AiFillDelete } from \"react-icons/ai\";\n// ----------------------------------------------------------------------\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    } \n})\n\nclass TimeKeepingTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: 'false'\n    }\n    this.getAllTimeKeeping()\n  }\n\n  getAllTimeKeeping()\n  {\n    const data = {\n      token: localStorage.getItem('token'),\n      filter: {\n          \"_id.storeID\": this.props.infoUser.email,\n      }   \n    }\n    // await axios.get(`http://localhost:5000/api/????`, {\n    //     params: {...data}\n    // })\n    //     .then(res => {\n    //         // alert(\"Lấy hết đc product ròi anh chai\");\n    //         result = res.data.data;\n    //         console.log(res.data.data);\n    //     })\n    //     .catch(err => {\n    //         console.log(err);\n    //         alert(err)\n    //     })\n  }\n\n  getShiftInforByID(shiftID)\n  {\n      var listShift = this.props.listShift;\n      for(var i = 0 ; i < listShift.length; i++)\n      {\n        if(listShift[i]._id.shiftID == shiftID)\n        {\n            return listShift[i].name + ' (' + listShift[i].timeFrom + '-' + listShift[i].timeEnd + ')';\n        }\n      }\n      return \"Can't get shift\";\n  }\n\n  getEmployeeFullNameByID(employeeID)\n  {\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n      {\n          var currentEmployee = this.props.listEmployee.employees[i];\n          if(currentEmployee._id.employeeID==employeeID)\n          {\n            return currentEmployee.lastName + ' ' + currentEmployee.firstName;\n          }\n      }\n      return \"Can't get name\";\n  }\n  render() {\n    const { classes } = this.props;\n    return ( \n      <div style={{marginTop: 0, padding: 24}}> \n          <span\n              style={{\n                  color: '#fff',\n                  backgroundColor: 'blue',\n                  padding: 10,\n              }}\n          >ALL TIMEKEEPING</span>\n          <TableContainer component={Paper}>\n                <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='180px'>Day</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='80px'>Date Of Week</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" >Shift</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\n                            {/* <TableCell className={classes.goodTable_Cell_Header} align=\"center\"></TableCell> */}\n                        </TableRow>\n                        {\n                            this.props.listTimeKeeper.map((timeKeeper)=>\n                                (\n                                  <TableRow>\n                                    <TableCell className={classes.goodTable_Cell}>{timeKeeper.realDate}</TableCell>\n                                    <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.dateInWeek}</TableCell>\n                                    <TableCell className={classes.goodTable_Cell}>{this.getShiftInforByID(timeKeeper._id.shiftType._id.shiftID)}</TableCell>\n                                    <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.employee._id.employeeID}</TableCell>\n                                    <TableCell className={classes.goodTable_Cell}>\n                                        {this.getEmployeeFullNameByID(timeKeeper._id.employee._id.employeeID)}\n                                    </TableCell>\n                                    {/* <TableCell className={classes.goodTable_Cell}>\n                                      <div style={{display: 'flex'}}>\n                                        <AiOutlineEdit size={20} \n                                            onClick={() =>\n                                              {\n                                                this.props.changeUpdateTimeKeepingStatus();\n                                                this.props.changeUpdateTimeKeepingValue(timeKeeper);\n                                              }\n                                            }\n                                          />\n                                          <AiFillDelete size={20} \n                                            onClick={() => \n                                                {\n                                                    // axios.delete(`http://localhost:5000/api/????`,{data: data})\n                                                    //   .then(res => {\n                                                    //       alert(\"success\");\n                                                    //   })\n                                                    //   .catch(err => {\n                                                    //       alert(err);\n                                                    //   })\n                                                    this.props.deleteTimeKeeping(timeKeeper);\n                                                    console.log(this.props.listTimeKeeper);\n                                                }\n                                                \n                                              // this.props.changeUpdateNextWeekTimeKeepingStatus();\n                                              \n                                              // this.props.changeUpdateNextWeekTimeKeepingValue(item);\n                                            }\n                                        />\n                                      </div>\n                                    </TableCell> */}\n                                </TableRow>\n                                )\n                            )\n                        }\n                    </TableHead>\n                </Table>\n          </TableContainer>\n            {/* <Button \n                variant=\"contained\"\n                onClick={() => this.props.changeAddTimeKeepingStatus()}\n            >\n              Add\n            </Button> */}\n      </div>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n      listTimeKeeper: state.listTimeKeeping,\n      listShift: state.listShift,\n      listEmployee: state.listEmployee,\n      infoUser: state.infoUser\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    changeAddTimeKeepingStatus: () => {\n      dispatch({\n          type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\n      });\n    },\n    changeUpdateTimeKeepingStatus: () => {\n      dispatch({\n          type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\n      });\n    },\n    changeUpdateTimeKeepingValue: (data) => {\n      dispatch({\n        type: \"SET_UPDATE_TIMEKEEPER_VALUE\",\n        data: data\n      });\n    },\n    deleteTimeKeeping: (data) => {\n      console.log(\"data\", data)\n      dispatch({\n        type: \"DELETE_TIMEKEEPER\",\n        data: data\n      });\n      \n    },\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(TimeKeepingTable));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/NoJobEmployee.js",["719","720","721","722","723","724"],"import React, { Component } from 'react';\nimport { Table, TableCell, TableContainer, TableRow, TableHead, Paper} from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nvar listUsers = [];\n\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '20px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '80px',\n    } \n})\n\nclass NoJobEmployee extends Component {\n\n    genID = 0;\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n        };\n        listUsers = [];\n    }\n\n    cancel = () => {\n        this.props.changeAddEmployeeStatus();\n    }\n\n    addEmployee = () => {\n        this.addEmployeeToDatabase();\n        this.props.changeAddEmployeeStatus();\n    }\n\n    findEmployeeInAssign(employeeID)\n    {\n        var shiftAssign = this.props.listShiftAssign;\n        for(var i = 0 ; i < shiftAssign.length; i++)\n        {\n            if(shiftAssign[i]._id.employee._id.employeeID == employeeID)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div style={{padding: 24}}>\n                <span style={{backgroundColor: 'blue', color: '#fff', padding: 10}}>\n                    NOJOB EMPLOYEE\n                </span>\n               \n                <TableContainer component={Paper} style={{width: 400}} >\n                    <Table>\n                        <TableHead>\n                                <TableRow>\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\" style={{height: 30}}>ID</TableCell>\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Employee</TableCell>\n                                </TableRow>\n                        </TableHead>\n                        {\n\n                            this.props.listEmployee.employees.map((item) => \n                                !this.findEmployeeInAssign(item._id.employeeID)\n                                ?<TableRow>\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\" style={{height: 30}}>{item._id.employeeID}</TableCell>\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\">{item.firstName + ' ' + item.lastName}</TableCell>\n                                </TableRow>\n                                :(null)\n                            )\n                        }\n                        \n                    </Table>\n                </TableContainer>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listEmployee: state.listEmployee,\n        listShiftAssign: state.listShiftAssign,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles, {withTheme: true})(NoJobEmployee));\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateNextWeekTimeKeeping.js",["725","726","727","728","729","730","731","732","733","734","735","736","737"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, \n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nvar listDayInWeek = [\n    {ID:'Monday',name:'Thứ hai'}, \n    {ID:'Tuesday',name:'Thứ ba'}, \n    {ID:'Wednesday',name:'Thứ tư'}, \n    {ID:'Thursday',name:'Thứ năm'}, \n    {ID:'Friday',name:'Thứ sáu'}, \n    {ID:'Saturday',name:'Thứ bảy'}, \n    {ID:'Sunday',name:'Chủ nhật'}\n];\n\nclass UpdateNextWeekTimeKeepingModal extends Component {\n\n    genID = 0;\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n            withdrawID: '',\n            alterID: '',\n            dayChosed: '',\n            shiftID: '',\n        };\n        this.loadInitialData();\n    }\n\n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    async updateChange() {\n        console.log(\"Vô được hàm cập nhập rồi\")\n        console.log(\"id giá trị hiện tại\", )\n        // Xoá cái hiện tại đi cái đã\n        const data = {\n            token: localStorage.getItem('token'),   \n            offDay: {\n                _id: this.props.updateNextWeekTimeKeepingValue._id\n            }\n        }\n\n        await axios.delete(`http://localhost:5000/api/employee/off-day`,{data: data})\n          .then(res => {\n              alert(\"success\");\n          })\n          .catch(err => {\n              alert(err);\n          })\n        this.props.deleteNextWeekTimeKeeping(this.props.updateNextWeekTimeKeepingValue);\n        console.log(\"Xoá được rồi\");\n        const dataUpdate = {\n            token: localStorage.getItem('token'),\n            offDay: {\n                _id: {\n                    dateInWeek: this.currentdayChosed,\n                    storeID: this.props.infoUser.email,\n                    shiftType: {\n                        _id: {\n                            shiftID: this.currentShipChosed,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    employee: {\n                        _id: {\n                            employeeID: this.currentWidrawID,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\n                },\n                alternativeEmployee: {\n                    _id: {\n                        employeeID: this.currentAlterID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n            }    \n        };\n        console.log(\"dataUpdate\", dataUpdate);\n        await axios.post(`http://localhost:5000/api/employee/off-day`, dataUpdate)\n          .then(res => {\n                console.log(\"Save success\");\n                alert(\"Lưu thành công\"); \n                this.props.addNewChange(dataUpdate.offDay);\n                console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\n        })\n        .catch(err => {\n            alert(err);\n            console.log(err);\n            if(err.response.data.message)\n            {\n                alert(err.response.data.message);\n            }\n            // Nếu lỗi thì thêm lại\n            this.props.addNewChange(this.props.updateNextWeekTimeKeepingValue);\n            axios.post(`http://localhost:5000/api/employee/off-day`, {\n                token: localStorage.getItem('token'),\n                offDay: this.props.updateNextWeekTimeKeepingValue,\n            })\n            .then(res => {\n                  console.log(\"Save success\");\n                  alert(\"Lưu lại thành công\"); \n                })\n                .catch(err => {\n                    // alert(err);\n                    if(err.response.data.message)\n                    {\n                        alert(err.response.data.message);\n                    }\n                });\n        })\n        // var indexOfData = this.findIndexCurrentNextTimeKeepingInRedux(data._id)\n        // this.props.changeUpdateNextWeekTimeKeeping(data, indexOfData);\n\n        this.props.changeUpdateNextWeekTimeKeepingStatus();\n    }\n\n    findIndexCurrentNextTimeKeepingInRedux(id)\n    {\n        //Đụng đến nếu sửa bảng\n        var listToSearch = this.props.nextWeekTimeKeeping;\n        for(var i = 0 ; i < listToSearch.length ; i ++)\n        {\n            if(listToSearch[i]._id.dateInWeek == id.dateInWeek && \n                listToSearch[i]._id.shiftType._id.shiftID == id.shiftType._id.shiftID&& \n                listToSearch[i]._id.employee._id.employeeID == id.employee._id.employeeID)\n            {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    realDate = '';\n    currentdayChosed = '';\n    currentShipChosed = '';\n    currentWidrawID = '';\n    loadInitialData() {\n        var val = this.props.updateNextWeekTimeKeepingValue;\n        this.realDate = val._id.realDate;\n        if(this.realDate.indexOf('T')!=-1) this.realDate = this.realDate.substring(0, this.realDate.indexOf('T'));\n        this.currentdayChosed = val._id.dateInWeek;\n        this.currentShipChosed = val._id.shiftType._id.shiftID;\n        this.currentWidrawID = val._id.employee._id.employeeID;\n        this.currentAlterID = val.alternativeEmployee._id.employeeID;\n        this.setState({\n            change : !this.state.change,\n            shiftID: this.currentShipChosed,\n            dayChosed: this.currentdayChosed,\n            withdrawID: this.currentWidrawID,\n            alterID: this.currentAlterID,\n        });\n    }\n\n    getDayInWeek(date) {\n        const d = new Date(date);\n    \n        const weekday = new Array(7);\n        weekday[0] = \"Sunday\";\n        weekday[1] = \"Monday\";\n        weekday[2] = \"Tuesday\";\n        weekday[3] = \"Wednesday\";\n        weekday[4] = \"Thursday\";\n        weekday[5] = \"Friday\";\n        weekday[6] = \"Saturday\";\n    \n        return weekday[d.getDay()];\n    }\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \n                    title=\"Update Change TimeKeeper\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            Real Date\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"date\" \n                                            name='realDate'\n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.realDate}\n                                            onChange={(event) => {\n                                                console.log(\"new Date\",event.target.value)\n                                                this.currentdayChosed = this.getDayInWeek(event.target.value);\n                                                this.setState({dayChosed: this.getDayInWeek(event.target.value)});\n                                            }}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Choose Day in week\n                                        </div>\n                                        <FormControl sx={{ minWidth: 120 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                value={this.currentdayChosed}\n                                                onChange={(event) => {\n                                                    this.currentdayChosed = event.target.value;\n                                                    this.setState({dayChosed: event.target.value});\n                                                }}\n                                                readOnly = {true}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    listDayInWeek.map((item) =>\n                                                        <MenuItem value={item.ID}>\n                                                            {item.name}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n\n                                    <Grid item md={8} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>\n                                            Choose Shift\n                                        </div>\n                                        <FormControl sx={{ minWidth: 220 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                value={this.currentShipChosed}\n                                                onChange={(event) => {\n                                                    this.currentShipChosed = event.target.value;\n                                                    this.setState({shiftID: event.target.value});\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\n                                                    : this.props.listShift.map((shift) =>\n                                                        <MenuItem value={shift._id.shiftID}>\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Widraw Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                value={this.currentWidrawID}\n                                                onChange={(event) => {\n                                                    this.currentWidrawID = event.target.value;\n                                                    this.setState({withdrawID: event.target.value});\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Alter Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                value={this.currentAlterID}\n                                                onChange={(event) => {\n                                                    this.currentAlterID = event.target.value;\n                                                    this.setState({alterID: event.target.value});\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        !(this.currentWidrawID == item._id.employeeID) ?\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                        : null\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.updateChange()}>\n                                            Add Change\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listShift: state.listShift,\n        listEmployee: state.listEmployee,\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\n        updateNextWeekTimeKeepingValue: state.updateNextWeekTimeKeepingValue,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeUpdateNextWeekTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        addNewChange: (data) => {\n            dispatch({\n                type: \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\",\n                data: data,\n            });\n        },\n        \n        changeUpdateNextWeekTimeKeeping: (data, indexOfData) => {\n            dispatch({\n                type: \"UPDATE_NEXT_WEEK_TIMEKEEPER\",\n                data: data,\n                index: indexOfData,\n            });\n        },\n        deleteNextWeekTimeKeeping: (data) => {\n            dispatch({\n              type: \"DELETE_NEXT_WEEK_TIMEKEEPER\",\n              data: data\n            });\n            console.log(\"data\", data)\n          },\n        \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateNextWeekTimeKeepingModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddNextWeekTimeKeeping.js",["738","739","740","741","742","743","744","745","746","747","748","749","750","751","752","753","754"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, \n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nvar listDayInWeek = [\n    {ID:'Monday',name:'Thứ hai'}, \n    {ID:'Tuesday',name:'Thứ ba'}, \n    {ID:'Wednesday',name:'Thứ tư'}, \n    {ID:'Thursday',name:'Thứ năm'}, \n    {ID:'Friday',name:'Thứ sáu'}, \n    {ID:'Saturday',name:'Thứ bảy'}, \n    {ID:'Sunday',name:'Chủ nhật'}\n];\nclass AddNextWeekTimeKeepingModal extends Component {\n\n    genID = 0;\n    dayChosed = '';\n    constructor(props) {\n        super(props);\n        this.dayChosed = this.getDayInWeek(this.getCurrentDateTime());\n        this.state = {\n            change: false,\n            withdrawID: '',\n            alterID: '',\n            dayChosed: this.getDayInWeek(this.getCurrentDateTime()),\n            shiftID: '',\n        };\n        \n    }\n\n    cancel = () => {\n        this.props.changeAddNextWeekTimeKeepingStatus();\n    }\n\n    addEmployee = () => {\n        this.addEmployeeToDatabase();\n        this.props.changeAddEmployeeStatus();\n    }\n\n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    isGreater(dateString1, dateString2){\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\n    }\n\n    checkContraint() {\n        if(this.state.dayChosed.length == 0)\n        {\n            alert(\"Chưa chọn ngày nào trong tuần\");\n            return false;\n        }\n        if(this.state.shiftID.length == 0)\n        {\n            alert(\"Chưa chọn ca nào\");\n            return false;\n        }\n        console.log(this.state.withdrawID );\n        if( this.state.withdrawID == undefined || this.state.withdrawID.length == 0)\n        {\n            alert(\"Chưa chọn nhân viên nào nghỉ\"); \n            return false;\n        }\n        if(this.state.alterID== undefined || this.state.alterID.length == 0)\n        {\n            alert(\"Chưa chọn nhân viên nào thay thế\");\n            return false;\n        }\n        if(!this.isGreater(document.querySelector('input[name=\"realDate\"]').value, this.getCurrentDateTime() ))\n        {\n            alert(\"Ngày nhập phải nhỏ hơn ngày báo nghỉ\");\n            return false;\n        }   \n\n        // Có CSDL thì báo xem có trùng với cái cũ ko nữa\n        \n        alert(\"Đã check hết constraint\");\n        return true;\n    }\n    getDayInWeek(date) {\n        const d = new Date(date);\n    \n        const weekday = new Array(7);\n        weekday[0] = \"Sunday\";\n        weekday[1] = \"Monday\";\n        weekday[2] = \"Tuesday\";\n        weekday[3] = \"Wednesday\";\n        weekday[4] = \"Thursday\";\n        weekday[5] = \"Friday\";\n        weekday[6] = \"Saturday\";\n    \n        return weekday[d.getDay()];\n    }\n\n    async addChange() {\n        if(this.checkContraint()==false) return ;\n        const data1 = {\n            token: localStorage.getItem('token'),\n            offDay: {\n                _id: {\n                    dateInWeek: this.state.dayChosed,\n                    storeID: this.props.infoUser.email,\n                    shiftType: {\n                        _id: {\n                            shiftID: this.state.shiftID,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    employee: {\n                        _id: {\n                            employeeID: this.state.withdrawID,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\n                },\n                alternativeEmployee: {\n                    _id: {\n                        employeeID: this.state.alterID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n                \n            }\n        };\n        await axios.post(`http://localhost:5000/api/employee/off-day`, data1)\n          .then(res => {\n              console.log(\"Save success\");\n              alert(\"Lưu thành công\")\n              const data = {\n                _id: {\n                    dateInWeek: this.state.dayChosed,\n                    storeID: this.props.infoUser.email,\n                    shiftType: {\n                        _id: {\n                            shiftID: this.state.shiftID,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    employee: {\n                        _id: {\n                            employeeID: this.state.withdrawID,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\n                },\n                alternativeEmployee: {\n                    _id: {\n                        employeeID: this.state.alterID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n                \n            };\n            \n            this.props.addNewChange(data);\n            console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\n            this.props.changeAddNextWeekTimeKeepingStatus();\n          })\n          .catch(err => {\n                console.log(\"err.response.data.message\", err.response.data.message);\n                if(err.response.data.message)\n                {\n                    alert(err.response.data.message);\n                }\n                console.log(err);\n          })\n        \n        // console.log(this.props.nextWeekTimeKeeping)\n\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \n                    title=\"Change NextWEEK TimeKeeper\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            Real Date\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"date\" \n                                            name='realDate'\n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.getCurrentDateTime()}\n                                            onChange={(event) => {\n                                                this.dayChosed = this.getDayInWeek(event.target.value);\n                                                this.setState({dayChosed: this.getDayInWeek(event.target.value)});\n                                            }}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Choose Day in week\n                                        </div>\n                                        <FormControl sx={{ minWidth: 120 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                value={this.dayChosed}\n                                                onChange={(event) => {\n                                                    this.dayChosed = event.target.value;\n                                                    this.setState({dayChosed: event.target.value});\n\n                                                }}\n                                                readOnly={true}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    listDayInWeek.map((item) =>\n                                                        <MenuItem value={item.ID}>\n                                                            {item.name}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n\n                                    <Grid item md={8} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>\n                                            Choose Shift\n                                        </div>\n                                        <FormControl sx={{ minWidth: 220 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({shiftID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\n                                                    : this.props.listShift.map((shift) =>\n                                                        <MenuItem value={shift._id.shiftID}>\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Widraw Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({withdrawID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        !(this.state.alterID == item._id.employeeID) ?\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                        : null\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Alter Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({alterID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        !(this.state.withdrawID == item._id.employeeID) ?\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                        : null\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.addChange()}>\n                                            Add Change\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listShift: state.listShift,\n        listEmployee: state.listEmployee,\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddNextWeekTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        addNewChange: (data) => {\n            dispatch({\n                type: \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\",\n                data: data,\n            });\n        } \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNextWeekTimeKeepingModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UnShiftEmployee.js",["755","756","757","758","759","760","761","762"],"import {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Icon } from '@iconify/react';\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\nimport { withStyles } from '@material-ui/styles';\nimport '../../css/EmployeeManager.css'\n// material\nimport { Paper, TableContainer, Table, \n  TableHead, TableCell, TableRow, Button,\n  Menu, MenuItem, Grid\n} from '@mui/material';\nimport { AiOutlineEdit, AiFillDelete } from \"react-icons/ai\";\n// ----------------------------------------------------------------------\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    } \n})\n\nclass UnShiftEmployee extends Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: false\n    }\n    this.getAllNextWeekTimeKeeping();\n    console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\n  }\n\n  async getAllNextWeekTimeKeeping()\n  {\n    var result = [];\n    const data = {\n      token: localStorage.getItem('token'),\n      filter: {\n          \"_id.storeID\": this.props.infoUser.email,\n      }   \n    }\n    await axios.get(`http://localhost:5000/api/employee/off-day`, {\n        params: {...data}\n    })\n        .then(res => {\n            result = res.data.data;\n            console.log(\"Báo nghỉ\", res.data.data);\n            this.props.getEmployeeDayOff(result);\n        })\n        .catch(err => {\n            console.log(err);\n            alert(err)\n        })\n  }\n\n  getShiftNameAndTime(shiftID)\n  {\n      var shifts= this.props.listShift;\n      for(var i = 0 ; i < shifts.length ; i++)\n      {\n          if(shifts[i]._id.shiftID == shiftID)\n          {\n              return shifts[i].name + ' (' + shifts[i].timeFrom + ' - ' + shifts[i].timeEnd +') ';\n          }\n      }\n      return \"Can't get shift\";\n  }\n\n  getEmployeeNameByID(employeeID)\n  {\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n      {\n          var currentEmployee = this.props.listEmployee.employees[i];\n          if(currentEmployee._id.employeeID==employeeID)\n          {\n            return currentEmployee.firstName;\n          }\n      }\n      return \"Can't get name\";\n  }\n\n  reload()\n  {\n    this.setState({change: !this.state.change})\n  }\n\n  openOption = false;\n\n  handleClose ()\n  {\n      this.openOption = false;\n      this.setState({change: !this.state.change});\n  }\n\n  handleOpen()\n  {\n      this.openOption = true;\n      alert(\"Ấn vào mở rồi\")\n      this.setState({change: !this.state.change});\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div style={{marginTop: 0, padding: 24}}>\n          <span\n              style={{\n                  color: '#fff',\n                  backgroundColor: 'blue',\n                  padding: 10,\n              }}\n          >CHANGE TIMEKEEPING</span> \n          <TableContainer component={Paper} >\n                <Table className={classes.goodTable} size=\"small\" aria-label=\"a dense table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='80px' rowSpan={2}>Day</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" rowSpan={2}>Shift</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" rowSpan={2}>Real Date</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" colSpan={2}>Withdraw</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" colSpan={2}>Change</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\n                        </TableRow>\n                        {\n                          this.props.nextWeekTimeKeeping.map((item) => \n                          <TableRow\n                              style={{\n                                position: 'relative',\n                              }}\n                          >\n                              <TableCell className={classes.goodTable_Cell}>{item._id.dateInWeek}</TableCell>\n                              <TableCell className={classes.goodTable_Cell}>{this.getShiftNameAndTime(item._id.shiftType._id.shiftID)}</TableCell>\n                              <TableCell className={classes.goodTable_Cell}>\n                                  {item._id.realDate ? item._id.realDate.indexOf('T') !=-1 ? item._id.realDate.substring(0,item._id.realDate.indexOf('T') ) : item._id.realDate : \"Loading...\"}\n                              </TableCell>\n                              <TableCell className={classes.goodTable_Cell}>{item._id.employee._id.employeeID}</TableCell>\n                              <TableCell className={classes.goodTable_Cell}>{this.getEmployeeNameByID(item._id.employee._id.employeeID)}</TableCell>\n                              <TableCell className={classes.goodTable_Cell}>{item.alternativeEmployee._id.employeeID}</TableCell>\n                              <TableCell className={classes.goodTable_Cell}>{this.getEmployeeNameByID(item.alternativeEmployee._id.employeeID)}</TableCell>\n                              <TableCell width={60} className={classes.goodTable_Cell} >\n                                  <div style={{display: 'flex'}}>\n                                      <AiOutlineEdit size={20} \n                                        onClick={() =>\n                                          {\n                                            this.props.changeUpdateNextWeekTimeKeepingStatus();\n                                            this.props.changeUpdateNextWeekTimeKeepingValue(item);\n                                          }\n                                        }\n                                      />\n                                      <AiFillDelete size={20} \n                                          onClick={() => \n                                              {\n                                                  const data = {\n                                                      token: localStorage.getItem('token'),   \n                                                      offDay: {\n                                                          _id: item._id\n                                                      }\n                                                  }\n                                                  console.log(\"data.offDay._id\", data.offDay._id)\n                                                  axios.delete(`http://localhost:5000/api/employee/off-day`,{data: data})\n                                                    .then(res => {\n                                                        alert(\"success\");\n                                                    })\n                                                    .catch(err => {\n                                                        alert(err);\n                                                    })\n                                                  this.props.deleteNextWeekTimeKeeping(item);\n                                              }\n                                            // this.props.changeUpdateNextWeekTimeKeepingStatus();\n                                            \n                                            // this.props.changeUpdateNextWeekTimeKeepingValue(item);\n                                          }\n                                      />\n                                    </div>      \n                              </TableCell> \n                          </TableRow> \n                          )\n                        }\n                    </TableHead>\n                    \n                </Table>\n            </TableContainer>\n              \n            <Button \n              variant=\"contained\"\n              onClick={() => this.props.changeAddNextWeekTimeKeepingStatus()}\n            >\n              Add</Button>\n      </div>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    nextWeekTimeKeeping: state.nextWeekTimeKeeping,\n    listEmployee: state.listEmployee,\n    listShift: state.listShift,\n    infoUser: state.infoUser,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    changeAddNextWeekTimeKeepingStatus: () => {\n      dispatch({\n          type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\n      });\n    },\n    changeUpdateNextWeekTimeKeepingStatus: () => {\n      dispatch({\n          type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\n      });\n    },\n    changeUpdateNextWeekTimeKeepingValue: (data) => {\n      dispatch({\n        type: \"SET_UPDATE_NEXT_WEEK_TIMEKEEPER_VALUE\",\n        data: data\n      });\n    },\n    deleteNextWeekTimeKeeping: (data) => {\n      dispatch({\n        type: \"DELETE_NEXT_WEEK_TIMEKEEPER\",\n        data: data\n      });\n      console.log(\"data\", data)\n    },\n    getEmployeeDayOff: (data) => {\n      dispatch({\n        type: \"SET_NEXT_WEEK_TIMEKEEPER\",\n        data: data\n      });\n    }\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(UnShiftEmployee));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/FixedCalendar.js",["763"],"import {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { withStyles } from '@material-ui/styles';\n// material\nimport { Paper, TableContainer, Table, TableHead, TableCell, TableRow, Button } from '@mui/material';\nimport FixedTableCell from './FixedCalendarCell';\n\n// ----------------------------------------------------------------------\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '80px',\n    } \n})\n\nclass FixedCalendar extends Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: 'false'\n    }\n    this.getAllShiftAssign();\n  }\n  async getAllShiftAssign()\n  {\n    var result = [];\n    const data = {\n      token: localStorage.getItem('token'),\n      filter: {\n          \"_id.storeID\": this.props.infoUser.email,\n      }   \n    }\n    await axios.get(`http://localhost:5000/api/employee/shift-assign`, {\n        params: {...data}\n    })\n        .then(res => {\n            result = res.data.data;\n            this.props.setShiftAssign(result);\n        })\n        .catch(err => {\n            console.log(err);\n            alert(err)\n        })\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n      <div style={{marginTop: 10, padding: 24, maxHeight: 600}}> \n          <TableContainer component={Paper}>\n              <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n                  <TableHead>\n                      <TableRow>\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Shift</TableCell>\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Mon</TableCell>\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Tue</TableCell>\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Wed</TableCell>\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Thu</TableCell>\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Fri</TableCell>\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Sat</TableCell>\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Sun</TableCell>\n                      </TableRow>\n                  </TableHead>\n                      {\n                          this.props.listShift.map((shift) => \n                          (\n                              <TableRow>\n                                  <TableCell className={classes.goodTable_Cell} width={100}>{shift.timeFrom + '-' + shift.timeEnd}</TableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Monday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Tuesday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Wednesday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Thursday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Friday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Saturday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Sunday'}></FixedTableCell>\n                              </TableRow>\n                          ))\n                      }\n              </Table>\n          </TableContainer>\n      </div>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        listShift: state.listShift,\n        infoUser: state.infoUser,\n        listShiftAssign: state.listShiftAssign,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n      setShiftAssign: (data) => {\n          dispatch({\n              type: \"SET_SHIFT_ASSIGN\",\n              data: data,\n          });\n      }\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(FixedCalendar));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddEmployeeModal.js",["764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782","783","784","785"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nvar listUsers = [];\n\nclass AddEmployeeModal extends Component {\n\n    genID = 0;\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n        };\n        listUsers = [];\n        this.getAllEmployee(); \n    }\n\n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    async getAllEmployee () {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/employee/`, {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                // console.log(err);\n                alert(err)\n            })\n        listUsers = [];\n        for(var i = 0; i < result.length; i++)\n        {\n            listUsers.push(result[i]);\n        }\n        this.props.getEmployee(listUsers);\n        if(listUsers.length > 0)\n        {\n            this.genID = parseInt(listUsers[listUsers.length - 1]._id.employeeID) + 1;\n            console.log(this.genID);\n        }\n        this.setState({change: !this.state.change});\n    }\n\n    isGreater(dateString1, dateString2){\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\n    }\n\n    checkConstraint() {\n        // Constraint 1: ID trống hoặc bị trùng\n        var id  = document.querySelector('input[name=\"ID\"]').value;\n        if( id.length == 0)\n        {\n            alert(\"Không thể nhập id rỗng\");\n            return false;\n        }\n        for(var i = 0; i < this.props.listEmployee.employees.length ; i++)\n        {\n            if(this.props.listEmployee.employees[i]._id.employeeID == id)\n            {\n                alert(\"ID đã bị trùng\");\n                return false;\n            }\n        }\n        // Trùng ID sa thải\n        for(var i = 0; i < this.props.listSackedEmployee.employees.length ; i++)\n        {\n            if(this.props.listSackedEmployee.employees[i]._id.employeeID == id)\n            {\n                alert(\"ID đã bị trùng với nhân viên đã sai thải\");\n                return false;\n            }\n        }\n\n        //Constraint 2: Password không được có dưới 6 ký tự\n        var password = document.querySelector('input[name=\"password\"]').value.trim();\n        if(password.length == 0)\n        {\n            alert(\"Password không được rỗng\");\n            return false;\n        }\n        if(password.length < 6)\n        {\n            alert(\"Password không được có dưới 6 ký tự\");\n            return false;\n        }\n        // Constraint 3: FirstName không được trống\n        var firstName =  document.querySelector('input[name=\"firstName\"]').value.trim();\n        if(firstName.length == 0)\n        {\n            alert('Tên riêng không được rỗng');\n            return false;\n        }\n        // Constraint 4: lastName không được trống\n        var lastName =  document.querySelector('input[name=\"lastName\"]').value.trim();\n        if(lastName.length == 0)\n        {\n            alert('Họ không được trống');\n            return false;\n        }\n        // Constraint 5: Số ID card không được để trống\n        var cardID= document.querySelector('input[name=\"cardID\"]').value.trim();\n        if(cardID.length == 0)\n        {\n            alert(\"Số id card không được để trống\");\n            return false;\n        }\n        // Constrain 6:Số điện thoại không được để trống và phải lớn hơn 6 ký tự\n        var phoneNumber= document.querySelector('input[name=\"phoneNumber\"]').value;\n        if(phoneNumber.length == 0)\n        {\n            alert(\"Số điện thoại không được để trống\");\n            return false;\n        }\n        if(phoneNumber.length < 6)\n        {\n            alert(\"Số điện thoại không được dưới 6 ký tự\");\n            return false;\n        }\n        // Constrain 7:Địa chỉ không được để trống\n        var address = document.querySelector('input[name=\"adress\"]').value;\n        if(address.length==0)\n        {\n            alert(\"Địa chỉ không được để trống\");\n            return false;\n        }\n        // Constraint 8: Ngày sinh không được để trống\n        var birthDay = document.querySelector('input[name=\"birthDay\"]').value;\n        if(birthDay.length == 0)\n        {\n            alert(\"Ngày sinh không được để trống\");\n            return false;\n        }\n        // Constraint 9: Email không được để trống\n        var email = document.querySelector('input[name=\"email\"]').value.trim();\n        if(email.length == 0)\n        {\n            alert(\"Email không dược để trống\");\n            return false;\n        }\n        if(email.indexOf('@')==-1 || email.indexOf('@')==email.length-1)\n        {\n            alert(\"Email không hợp lệ\");\n            return false;\n        }\n        // Constraint 10: Ngày sinh không thể lớn hơn ngày bất đầu làm\n        var startDate = document.querySelector('input[name=\"startDate\"]').value;\n        if(!this.isGreater(startDate, birthDay))\n        {\n            alert(\"Ngày sinh không thể lớn hơn ngày bất đầu làm\");\n            return false;\n        }\n\n\n        alert(\"Đã check hết các constraint\")\n        return true;\n    }\n    // Thêm nhân viên\n    async addEmployeeToDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: document.querySelector('input[name=\"ID\"]').value,\n                    storeID: this.props.infoUser.email,\n                },\n                managerID: this.props.infoUser.email,\n                password: document.querySelector('input[name=\"password\"]').value,\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\n                email: document.querySelector('input[name=\"email\"]').value,\n                address: document.querySelector('input[name=\"adress\"]').value,\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\n                // endDate: \"2021-11-31T00:00:00.000Z\",\n            }   \n        }\n        console.log(data);\n        await axios.post(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Save success\");\n                alert(\"Lưu thành công\")\n            })\n            .catch(err => {\n                alert(err);\n                console.log(err);\n            })\n        // Thêm vào redux\n        this.props.addEmployee(data.employee);\n        \n    }\n\n    cancel = () => {\n        this.props.changeAddEmployeeStatus();\n    }\n\n    addEmployee = () => {\n        if(this.checkConstraint()==false) return;\n        this.addEmployeeToDatabase();\n        this.props.changeAddEmployeeStatus();\n    }\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"ADD EMPLOYEE\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        {/* <Grid item md={12}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                marginTop: '0px'\n                            }}\n                        >   \n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                        </Grid> */}\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            ID\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            name='ID'\n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"  \n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>Password</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"password\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"firstName\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"lastName\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"number\" \n                                            name=\"cardID\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"number\" \n                                            name=\"phoneNumber\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Adress</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"adress\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>StartDate</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\"\n                                            name=\"startDate\"\n                                            defaultValue={this.getCurrentDateTime()}\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"email\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\" \n                                            // class=\"input-val\"\n                                            name=\"birthDay\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.addEmployee()}>\n                                            Add\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listEmployee: state.listEmployee,\n        listSackedEmployee: state.listSackedEmployee,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        addEmployee: (data) => {\n            dispatch({\n                type: \"ADD_EMPLOYEE\",\n                employees: data,\n            });\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEmployeeModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/PayMoneyModal.js",["786","787","788","789","790","791","792","793","794","795","796","797","798","799","800","801","802","803","804","805","806"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Table, Grid, TextField, \n    TableCell, TableContainer, Button, InputLabel,\n    Paper, TableRow, TableHead } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport DatePicker from '@mui/lab/DatePicker';\nimport DateTimePicker from '@mui/lab/DateTimePicker';\nimport { AiFillPlusCircle} from \"react-icons/ai\";\nimport CancelIcon from '@mui/icons-material/Cancel';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    } \n})\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\n\nclass PayEmployeeModal extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            goodID : \"\",\n            change: false,\n            imageSelect: \"null\",\n            type:'none',\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\n        }; \n        console.log(\"listTimeKeeper\", this.props.listTimeKeeper);\n    }\n\n    getShiftInforByID(shiftID)\n    {\n        var listShift = this.props.listShift;\n        for(var i = 0 ; i < listShift.length; i++)\n        {\n            if(listShift[i]._id.shiftID == shiftID)\n            {\n                return listShift[i].name + ' (' + listShift[i].timeFrom + '-' + listShift[i].timeEnd + ')';\n            }\n        }\n        return \"Can't get shift\";\n    }\n\n    getEmployeeFullNameByID(employeeID)\n    {\n            for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n            {\n                var currentEmployee = this.props.listEmployee.employees[i];\n                if(currentEmployee._id.employeeID==employeeID)\n                {\n                        return currentEmployee.lastName + ' ' + currentEmployee.firstName;\n                }\n            }\n        return \"Can't get name\";\n    }\n\n    payEmployee(){\n        alert(\"Confirm password\");\n        // viết api để trả lương ở đây\n        this.props.changePayEmployeeStatus();\n    }\n    \n    render() {\n        const { classes } = this.props;\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"PAY EMPLOYEE\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                marginTop: '0px'\n                            }}\n                        >   \n                            {/* <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input> */}\n                        </Grid>\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                     <TableContainer component={Paper}>\n                                            <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n                                                <TableHead>\n                                                    <TableRow>\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='180px'>Day</TableCell>\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='80px'>Date Of Week</TableCell>\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\" >Shift</TableCell>\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Salary</TableCell>\n                                                        {/* <TableCell className={classes.goodTable_Cell_Header} align=\"center\"></TableCell> */}\n                                                    </TableRow>\n                                                    {\n                                                        this.props.listTimeKeeper.map((timeKeeper)=>\n                                                            (\n                                                            <TableRow>\n                                                                <TableCell className={classes.goodTable_Cell}>{timeKeeper.realDate}</TableCell>\n                                                                <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.dateInWeek}</TableCell>\n                                                                <TableCell className={classes.goodTable_Cell}>{this.getShiftInforByID(timeKeeper._id.shiftType._id.shiftID)}</TableCell>\n                                                                <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.employee._id.employeeID}</TableCell>\n                                                                <TableCell className={classes.goodTable_Cell}>\n                                                                    {this.getEmployeeFullNameByID(timeKeeper._id.employee._id.employeeID)}\n                                                                </TableCell>\n                                                                <TableCell className={classes.goodTable_Cell}>\n                                                                    Salary\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            )\n                                                        )\n                                                    }\n                                                </TableHead>\n                                            </Table>\n                                    </TableContainer>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.payEmployee()}>\n                                            Pay employee\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        listTimeKeeper: state.listTimeKeeping,\n        listShift: state.listShift,\n        listEmployee: state.listEmployee,\n        infoUser: state.infoUser\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changePayEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\n            });\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(PayEmployeeModal));\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/SackedEmployeeMenu.js",["807","808"],"import { Icon } from '@iconify/react';\nimport editFill from '@iconify/icons-eva/edit-fill';\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\nimport {GiPayMoney} from \"react-icons/gi\";\nimport {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\n// material\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nclass EmployeeMoreMenu extends Component {\n  currentEmployee = {};\n\n\n    constructor(props) {\n        super(props);\n        this.state= {\n        change: 'false'\n        }\n        this.myRef = React.createRef();\n    }\n    setIsOpen(val) {\n        this.isOpen = val;\n        this.setState({change: val});\n        \n    }\n\n    getSackedEmployeeByID(employeeID) {\n        var listEmployee = this.props.listSackedEmployee.employees;\n        console.log(listEmployee);\n        for(var i = 0; i < listEmployee.length ; i++)\n        {\n          if(employeeID == listEmployee[i]._id.employeeID)\n          {\n            return listEmployee[i];\n          }\n        }\n    }\n\n    backToWork() {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee:\n            [\n                {\n                    employeeID: this.props.data,\n                    storeID: this.props.infoUser.email,\n                },\n            ]\n            \n        }\n        axios.patch(`http://localhost:5000/api/employee/delete`, data)\n            .then(res => {\n                alert(\"back to work success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n\n        // Xoá khỏi redux sacked\n        this.props.backToWorkSackedEmployee(this.props.data);\n\n        // Thêm vào redux ko sacked\n        this.props.addEmployee(this.getSackedEmployeeByID(this.props.data));\n    }\n\n    delete() {\n        const data = {\n        token: localStorage.getItem('token'),\n        employee:\n        [\n            {\n                employeeID: this.props.data,\n                storeID: this.props.infoUser.email, \n            },\n        ] \n        }\n        console.log(data);\n\n        axios.delete(`http://localhost:5000/api/employee/delete`,{data: data})\n            .then(res => {\n                alert(\"delete permantly employee(s) success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n    }\n\n    isOpen=false;\n    render() {\n        return (\n        <>\n            <IconButton ref={this.myRef} onClick={() => this.setIsOpen(true)}>\n            <Icon icon={moreVerticalFill} width={20} height={20} />\n            </IconButton>\n    \n            <Menu\n            style={{\n                position: 'absolute',\n                bottom: 0,\n                left: 0,\n            }}\n            open={this.isOpen}\n            onClose={() => this.setIsOpen(false)}\n            anchorEl={this.myRef.current}\n            // PaperProps={{\n            //   sx: { width: 200, maxWidth: '100%' }\n            // }}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            >\n            <MenuItem sx={{ color: 'text.secondary' }}\n                onClick={() => this.delete()}\n            >\n                <ListItemIcon>\n                <Icon icon={trash2Outline} width={24} height={24} />\n                </ListItemIcon>\n                <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\n            </MenuItem>\n    \n            <MenuItem sx={{ color: 'text.secondary' }}\n                onClick={() => this.backToWork()}\n            >\n                <ListItemIcon>\n                <Icon icon={editFill} width={24} height={24} />\n                </ListItemIcon>\n                <ListItemText primary=\"Return\" primaryTypographyProps={{ variant: 'body2' }} />\n            </MenuItem>\n            </Menu>\n        </>\n        );\n    }\n    \n    }\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\n        payEmployeeStatus: state.payEmployeeStatus,\n        listEmployee: state.listEmployee,\n        infoUser: state.infoUser,\n        listSackedEmployee: state.listSackedEmployee,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        backToWorkSackedEmployee: (id) => {\n            dispatch({\n                type: \"RETURN_TO_WORK\",\n                id: id\n            });\n        },\n        addEmployee: (data) => {\n            dispatch({\n                type: \"ADD_EMPLOYEE\",\n                employees: data,\n            });\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/fakeData.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateEmployeeModal.js",["809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nclass UpdateEmployeeModal extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n        }; \n        this.loadInitialData();\n    }\n    \n\n    cancel = () => {\n        \n    }\n\n    findIndexInListEmployee(employeeID) {\n        for(var i = 0; i < this.props.listEmployee.employees.length ; i++)\n        {\n            if(this.props.listEmployee.employees[i]._id.employeeID == employeeID)\n            {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    checkConstraint() {\n        //Constraint 2: Password không được có dưới 6 ký tự\n        var password = document.querySelector('input[name=\"password\"]').value.trim();\n        if(password.length == 0)\n        {\n            alert(\"Password không được rỗng\");\n            return false;\n        }\n        if(password.length < 6)\n        {\n            alert(\"Password không được có dưới 6 ký tự\");\n            return false;\n        }\n        // Constraint 3: FirstName không được trống\n        var firstName =  document.querySelector('input[name=\"firstName\"]').value.trim();\n        if(firstName.length == 0)\n        {\n            alert('Tên riêng không được rỗng');\n            return false;\n        }\n        // Constraint 4: lastName không được trống\n        var lastName =  document.querySelector('input[name=\"lastName\"]').value.trim();\n        if(lastName.length == 0)\n        {\n            alert('Họ không được trống');\n            return false;\n        }\n        // Constraint 5: Số ID card không được để trống\n        var cardID= document.querySelector('input[name=\"cardID\"]').value.trim();\n        if(cardID.length == 0)\n        {\n            alert(\"Số id card không được để trống\");\n            return false;\n        }\n        // Constrain 6:Số điện thoại không được để trống và phải lớn hơn 6 ký tự\n        var phoneNumber= document.querySelector('input[name=\"phoneNumber\"]').value;\n        if(phoneNumber.length == 0)\n        {\n            alert(\"Số điện thoại không được để trống\");\n            return false;\n        }\n        if(phoneNumber.length < 6)\n        {\n            alert(\"Số điện thoại không được dưới 6 ký tự\");\n            return false;\n        }\n        // Constrain 7:Địa chỉ không được để trống\n        var address = document.querySelector('input[name=\"adress\"]').value;\n        if(address.length==0)\n        {\n            alert(\"Địa chỉ không được để trống\");\n            return false;\n        }\n        // Constraint 8: Ngày sinh không được để trống\n        var birthDay = document.querySelector('input[name=\"birthDay\"]').value;\n        if(birthDay.length == 0)\n        {\n            alert(\"Ngày sinh không được để trống\");\n            return false;\n        }\n        // Constraint 9: Email không được để trống\n        var email = document.querySelector('input[name=\"email\"]').value.trim();\n        if(email.length == 0)\n        {\n            alert(\"Email không dược để trống\");\n            return false;\n        }\n        if(email.indexOf('@')==-1 || email.indexOf('@')==email.length-1)\n        {\n            alert(\"Email không hợp lệ\");\n            return false;\n        }\n        // Constraint 10: Ngày sinh không thể lớn hơn ngày bất đầu làm\n        var startDate = document.querySelector('input[name=\"startDate\"]').value;\n        if(!this.isGreater(startDate, birthDay))\n        {\n            alert(\"Ngày sinh không thể lớn hơn ngày bất đầu làm\");\n            return false;\n        }\n\n\n        alert(\"Đã check hết các constraint\")\n        return true;\n    }\n\n    isGreater(dateString1, dateString2){\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\n    }\n\n    async updateEmployee(){\n        if(this.checkConstraint() == false) return;\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: this.id,\n                    storeID: this.props.infoUser.email,\n                },\n                managerID: this.props.infoUser.email,\n                password: document.querySelector('input[name=\"password\"]').value,\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\n                email: document.querySelector('input[name=\"email\"]').value,\n                address: document.querySelector('input[name=\"adress\"]').value,\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\n            }   \n        }\n        console.log(\"index\", this.findIndexInListEmployee(this.id));\n        console.log(data);\n        await axios.put(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Update success\");\n                \n            })\n            .catch(err => {\n                console.log(err);\n            })\n        this.props.updateEmployeeRedux(data.employee, this.findIndexInListEmployee(this.id))\n        this.props.changeUpdateEmployeeStatus();\n    }\n\n    id = \"\";\n    password = \"\";\n    firstName = \"\";\n    lastName = \"\";\n    cardID = \"\";\n    phoneNumber = \"\";\n    address = \"\";\n    email = \"\";\n    startDate = \"\";\n    birthDay = \"\";\n\n\n    loadInitialData() {\n        var currentEmployee = this.props.currentEditEmployee.state;\n        console.log(\"currentEmployee\", currentEmployee);\n        this.id = currentEmployee._id.employeeID;\n        this.password = currentEmployee.password;\n        this.firstName = currentEmployee.firstName;\n        this.lastName = currentEmployee.lastName;\n        this.cardID = currentEmployee.cardID;\n        this.phoneNumber = currentEmployee.phoneNumber;\n        this.address = currentEmployee.address;\n        this.email = currentEmployee.email;\n        this.startDate = currentEmployee.startDate;\n        if(this.startDate!=null)\n        {\n            this.startDate = this.startDate.substring(0, this.startDate.indexOf('T'));\n        }\n        this.birthDay = currentEmployee.dateOfBirth;\n        if(this.birthDay!=null)\n        {\n            this.birthDay = this.birthDay.substring(0, this.birthDay.indexOf('T'));\n        }\n        this.setState({change: !this.state.change})\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"UPDATE EMPLOYEE\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                marginTop: '0px'\n                            }}\n                        >   \n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            {/* Ẩn đi */}\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                        </Grid>\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                               <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            ID\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            value={this.id}\n                                            readOnly={true}\n                                            disabled={true}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>Password</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"password\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.password}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"firstName\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.firstName}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"lastName\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.lastName}\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"number\" \n                                            name=\"cardID\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.cardID}\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"number\" \n                                            name=\"phoneNumber\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.phoneNumber}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Adress</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"adress\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.address}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>StartDate</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\"\n                                            name=\"startDate\"\n                                            style = {{width: '100%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.startDate}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"email\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.email}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\" \n                                            // class=\"input-val\"\n                                            name=\"birthDay\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.birthDay}\n                                        />\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.updateEmployee()}>\n                                            UPDATE\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        currentEditEmployee: state.currentEditEmployee,\n        infoUser: state.infoUser,\n        listEmployee: state.listEmployee,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\n            });\n        },\n        changeUpdateEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\n            });\n        },\n        updateEmployeeRedux: (data, index) => {\n            dispatch({\n                type: \"UPDATE_EMPLOYEE\",\n                data: data,\n                index: index,\n            });\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateEmployeeModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeTableHeader.js",["826","827","828","829","830","831","832","833"],"import PropTypes from 'prop-types';\n// material\nimport { visuallyHidden } from '@mui/utils';\nimport { Box, Checkbox, TableRow, TableCell, TableHead, TableSortLabel } from '@mui/material';\nimport { withStyles } from '@material-ui/styles';\n// ----------------------------------------------------------------------\n\nEmployeeTableHeader.propTypes = {\n  order: PropTypes.oneOf(['asc', 'desc']),\n  orderBy: PropTypes.string,\n  rowCount: PropTypes.number,\n  headLabel: PropTypes.array,\n  numSelected: PropTypes.number,\n  onRequestSort: PropTypes.func,\n  onSelectAllClick: PropTypes.func\n};\nconst styles = theme =>  ({\n  goodTable: {                                     \n      borderWidth: '1px',\n      borderColor: '#ccc',\n      borderStyle: 'solid'\n  },\n  goodTable_Cell_Header: {                                     \n      borderWidth: '1px',\n      borderColor: '#ccc',\n      borderStyle: 'solid',\n      height: '40px',\n  },\n  goodTable_Cell: {                                     \n      borderWidth: '1px',\n      borderColor: '#ccc',\n      borderStyle: 'solid',\n      height: '80px',\n  } \n})\n\nfunction EmployeeTableHeader( props){\n  const {\n    order,\n    orderBy,\n    rowCount,\n    headLabel,\n    numSelected,\n    onRequestSort,\n    onSelectAllClick} = props;\n  // const createSortHandler = (property) => (event) => {\n  //   onRequestSort(event, property);\n  // };\n  const {classes} =  props;\n  // console.log(\"headLabel\", headLabel);\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\" className = {classes.goodTable_Cell_Header}>\n          <Checkbox\n            // indeterminate={numSelected > 0 && numSelected < rowCount}\n            // checked={rowCount > 0 && numSelected === rowCount}\n            // onChange={onSelectAllClick}\n          />\n        </TableCell>\n        {headLabel.map((headCell) => (\n          <TableCell\n            className = {classes.goodTable_Cell_Header}\n            // key={headCell.id}\n            // align={headCell.alignRight ? 'right' : 'left'}\n            // sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              // hideSortIcon\n              // active={orderBy === headCell.id}\n              // direction={orderBy === headCell.id ? order : 'asc'}\n              // onClick={createSortHandler(headCell.id)}\n              style={{\n                color: '#333'\n              }}\n            >\n              {headCell.label}\n              {/* {orderBy === headCell.id ? (\n                <Box sx={{ ...visuallyHidden }}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null} */}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nexport default withStyles( styles )( EmployeeTableHeader );","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/SearchNotFound.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Label.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Scrollbar.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Page.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeMoreMenu.js",["834"],"import { Icon } from '@iconify/react';\nimport editFill from '@iconify/icons-eva/edit-fill';\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\nimport {GiPayMoney} from \"react-icons/gi\";\nimport {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\n// material\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nclass EmployeeMoreMenu extends Component {\n  currentEmployee = {};\n\n\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: 'false'\n    }\n    this.myRef = React.createRef();\n  }\n  setIsOpen(val) {\n    this.isOpen = val;\n    this.setState({change: val});\n    \n  }\n\n  edit() {\n    this.getEmployeeByID(this.props.data);\n    // console.log(\"send nude\", this.currentEmployee);\n    this.props.setUpdateEmployee(this.currentEmployee);\n    this.props.changeUpdateEmployeeStatus();\n  }\n\n  delete() {\n    const data = {\n      token: localStorage.getItem('token'),\n      employee:\n      [\n          {\n              employeeID: this.props.data,\n              storeID: this.props.infoUser.email, \n          },\n      ] \n    }\n    console.log(data);\n\n    axios.delete(`http://localhost:5000/api/employee`,{data: data})\n        .then(res => {\n            alert(\"delete employee(s) success\");\n        })\n        .catch(err => {\n            alert(err);\n        })\n    \n    // Delete redux\n    this.props.deleteEmployeeRedux(this.props.data);\n    //Move to sacked\n    this.props.deleteEmployeeToSackRedux(this.currentEmployee)\n  }\n\n  getEmployeeByID(employeeID) {\n    var listEmployee = this.props.listEmployee.employees;\n    console.log(listEmployee);\n    for(var i = 0; i < listEmployee.length ; i++)\n    {\n      if(employeeID == listEmployee[i]._id.employeeID)\n      {\n        this.currentEmployee = listEmployee[i];\n        return listEmployee[i];\n      }\n    }\n  }\n\n  isOpen=false;\n  render() {\n    return (\n      <>\n        <IconButton ref={this.myRef} onClick={() => this.setIsOpen(true)}>\n          <Icon icon={moreVerticalFill} width={20} height={20} />\n        </IconButton>\n  \n        <Menu\n          style={{\n            position: 'absolute',\n            bottom: 0,\n            left: 0,\n          }}\n          open={this.isOpen}\n          onClose={() => this.setIsOpen(false)}\n          anchorEl={this.myRef.current}\n          // PaperProps={{\n          //   sx: { width: 200, maxWidth: '100%' }\n          // }}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        >\n          <MenuItem sx={{ color: 'text.secondary' }}\n            onClick={() => this.delete()}\n          >\n            <ListItemIcon>\n              <Icon icon={trash2Outline} width={24} height={24} />\n            </ListItemIcon>\n            <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\n          </MenuItem>\n  \n          <MenuItem sx={{ color: 'text.secondary' }}\n            onClick={() => this.edit()}\n          >\n            <ListItemIcon>\n              <Icon icon={editFill} width={24} height={24} />\n            </ListItemIcon>\n            <ListItemText primary=\"Edit\" primaryTypographyProps={{ variant: 'body2' }} />\n          </MenuItem>\n          <MenuItem sx={{ color: 'text.secondary' }}\n            onClick={()=> this.props.changePayEmployeeStatus()}\n          >\n            <ListItemIcon>\n              <GiPayMoney size={24}/> \n            </ListItemIcon>\n            <ListItemText primary=\"Pay money\" primaryTypographyProps={{ variant: 'body2' }} />\n          </MenuItem>\n        </Menu>\n      </>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    updateEmployeeStatus: state.updateEmpoyeeStatus,\n    payEmployeeStatus: state.payEmployeeStatus,\n    listEmployee: state.listEmployee,\n    infoUser: state.infoUser,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n      changeUpdateEmployeeStatus: () => {\n          dispatch({\n              type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\n          });\n      },\n      changePayEmployeeStatus: () => {\n        dispatch({\n            type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\n        });\n      },\n      setUpdateEmployee: (currentEmployee) => {\n        dispatch({\n          type: \"SET_UPDATE_EMPLOYEE\",\n          data: currentEmployee\n        });\n      }, \n      deleteEmployeeRedux: (id) => {\n        dispatch({\n          type: \"DELETE_EMPLOYEE\",\n          id: id\n        });\n      },\n      deleteEmployeeToSackRedux: (data) => {\n        dispatch({\n          type: \"DELETE_EMPLOYEE_SACKED\",\n          data: data\n        });\n      }\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeToolbar.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/GroupButton.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/TableReciept.js",["835"],"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Collapse from '@mui/material/Collapse';\nimport IconButton from '@mui/material/IconButton';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport { Grid, Box } from '@mui/material';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport {red} from '@mui/material/colors'\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FiEdit } from 'react-icons/fi'\nimport axios from 'axios';\n\n\nfunction Row(props) {\n    const { row } = props;\n    const [open, setOpen] = React.useState(false);\n    const dispatch = useDispatch();\n    const listReciept = useSelector(state => state.listReciept)\n    const infoUser = useSelector(state => state.infoUser)\n    const statusEditInfoBill = useSelector(state => state.statusEditInfoBill)\n    const editReciept = (MAHD) => {\n        let objectInfoBill = [];\n        listReciept.map(value => {\n            if (value.MAHD === MAHD) {\n                objectInfoBill = value\n            }\n            return value;\n        })\n        if (!statusEditInfoBill) {\n            axios.post('http://localhost:5000/api/sell-product/edit-reciept',{\n                MAHD: MAHD,\n                token: localStorage.getItem('token'),\n                email: infoUser.email,\n            }).then(res => {\n                if (res.status === 200) {\n                    localStorage.setItem('token', res.data.token)\n                    dispatch({\n                        type: \"EDIT_SHOPPING_BAGS\",\n                        MAHD: MAHD,\n                    })\n                    dispatch({\n                        type: \"INFO_SHOPPING_BAGS_EDIT\",\n                        listProduct: objectInfoBill.listProduct,\n                    })\n                    dispatch({\n                        type: \"ADD_INFO_BILL_EDIT\",\n                        InfoBill: objectInfoBill,\n                    })\n                    dispatch({\n                        type: \"CHANGE_EDIT_INFOMATION_STATUS\",\n                    })\n                    dispatch({\n                        type: \"CHANGE_HISTORY_RECIEPT_STATUS\"\n                    })\n                }\n            }).catch(err => {\n                dispatch({\n                    type: \"CHANGE_LOGIN_STATUS\",\n                })\n                dispatch({\n                    type: \"HIDE_ALERT\",\n                })\n                dispatch({\n                    type: \"SHOW_ALERT\",\n                    message: 'Login timeout, signin again',\n                    typeMessage: 'warning',\n                })\n            })\n            \n        } else {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: \"Con` don hang` cho` !\",\n                typeMessage: \"warning\"\n            })\n        }\n\n    }\n\n    const TypeReciept = (isEdit, isDelete) => {\n        if (isDelete) {\n            return red[400]\n        } else if (isEdit) {\n            return '#f4f492'\n        } else {\n            return '#a6ffa6'\n        }\n    }\n\n    const StatusTypeReciept = (isEdit, isDelete) => {\n        if (isDelete) {\n            return 'Đã xóa'\n        } else if (isEdit) {\n            return 'Đổi trả'\n        } else {\n            return 'Thành công'\n        }\n    }\n\n    const showEdit = (isEdit, isDelete) => {\n        if (isEdit || isDelete) {\n            return true;\n        }\n    }\n\n    const countQuantity = () => {\n        let count = 0;\n        row.listProduct.map(value => {\n            count += value.quantity;\n        })\n        return count;\n    }\n\n    return (\n        <React.Fragment>\n            <TableRow style={{ backgroundColor: TypeReciept(row.isEdit, row.deleted), borderWidth: open ? '2px' : null, borderStyle:'solid', borderColor: '#90a4ae #90a4ae transparent #90a4ae'  }} sx={{ '& > *': { borderBottom: 'unset' } }}>\n                <TableCell>\n                    <IconButton\n                        aria-label=\"expand row\"\n                        size=\"small\"\n                        onClick={() => setOpen(!open)}\n                    >\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {row.MAHD}\n                </TableCell>\n                <TableCell align=\"right\">{row.date}</TableCell>\n                <TableCell align=\"right\">{row.totalMoney}</TableCell>\n                <TableCell align=\"right\">{row.discount}</TableCell>\n                <TableCell align=\"right\">{row.totalFinalMoney}</TableCell>\n                <TableCell>\n                    {!showEdit(row.isEdit, row.deleted) ? (\n                        <IconButton onClick={() => editReciept(row.MAHD)} color=\"secondary\" aria-label=\"fingerprint\">\n                            <FiEdit />\n                        </IconButton>\n                    ) : null}\n                </TableCell>\n            </TableRow>\n            <TableRow style={{borderWidth: open ? '2px' : null, borderStyle:'solid', borderColor: 'transparent #90a4ae #90a4ae #90a4ae'  }}>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={12}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box sx={{ margin: 1 }}>\n                            <Typography style={{ fontWeight: '600' }} variant=\"h6\" gutterBottom component=\"div\">\n                                Detail Recipet\n                            </Typography>\n                            <Grid container spacing={3}>\n                                <Grid item  lg={6} md={12} xs={12}>\n                                    <Table size=\"small\" aria-label=\"purchases\">\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell>#</TableCell>\n                                                <TableCell>Name</TableCell>\n                                                <TableCell>Quantity</TableCell>\n                                                <TableCell align=\"right\">Price</TableCell>\n                                                <TableCell align=\"right\">Total Price</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {row.listProduct.map((value, key) => (\n                                                <TableRow key={value.name}>\n                                                    <TableCell>\n                                                        {key + 1}\n                                                    </TableCell>\n                                                    <TableCell>{value.product.name}</TableCell>\n                                                    <TableCell>{value.quantity}</TableCell>\n                                                    <TableCell align=\"right\">{value.product.sellPrice.toLocaleString()}</TableCell>\n                                                    <TableCell align=\"right\">\n                                                        {(value.quantity * value.product.sellPrice).toLocaleString()}\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </Grid>\n                                <Grid style={{borderLeft: '1px solid black', marginTop: '15px'}} item lg={6} md={12} xs={12}>\n                                    <Grid container spacing={3}>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Mã hóa đơn:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.MAHD}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Trạng thái:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{StatusTypeReciept(row.isEdit, row.isDelete)}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Thời gian:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.date}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Giờ:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.time}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Mã HD củ:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.oldBill ? row.oldBill.MAHD : \"Không có\"}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Người bán:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.name}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Tổng số lượng:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{countQuantity()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Tổng tiền hàng:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.totalMoney.toLocaleString()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Giảm giá (%):</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.discount}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>TỔNG:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>{row.totalFinalMoney.toLocaleString()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    );\n}\n\nRow.propTypes = {\n    row: PropTypes.shape({\n        calories: PropTypes.number.isRequired,\n        carbs: PropTypes.number.isRequired,\n        fat: PropTypes.number.isRequired,\n        history: PropTypes.arrayOf(\n            PropTypes.shape({\n                amount: PropTypes.number.isRequired,\n                customerId: PropTypes.string.isRequired,\n                date: PropTypes.string.isRequired,\n            }),\n        ).isRequired,\n        name: PropTypes.string.isRequired,\n        price: PropTypes.number.isRequired,\n        protein: PropTypes.number.isRequired,\n    }).isRequired,\n};\n\n\nexport default function CollapsibleTable() {\n\n    const listReciept = useSelector(state => state.listReciept)\n\n    return (\n        <TableContainer component={Paper}>\n            <Table aria-label=\"collapsible table\">\n                <TableHead>\n                    <TableRow style={{ backgroundColor: 'black', color: 'white' }}>\n                        <TableCell />\n                        <TableCell >Mã HĐ</TableCell>\n                        <TableCell align=\"right\">Ngày hóa đơn</TableCell>\n                        <TableCell align=\"right\">Tổng hóa đơn</TableCell>\n                        <TableCell align=\"right\">Giảm giá</TableCell>\n                        <TableCell align=\"right\">Khách hàng trả</TableCell>\n                        <TableCell />\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {listReciept ?\n                        listReciept.map((row) => (\n                            <Row key={row.MAHD} row={row} />\n                        )) : null\n                    }\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/ComponentToPrint.js",["836","837","838"],"import React from 'react';\n\n\n\nclass ComponentToPrint extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            date: new Date(),\n        }\n    }\n\n    minute = 1000 * 60;\n    hour = this.minute * 60;\n    day = this.hour * 24;\n    year = this.day * 365;\n\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    totalMoney = () => {\n        let total = 0;\n        this.props.shoppingBags.map(value => {\n            total += value.quantity * value.product.sellPrice;\n        })\n        return total.toLocaleString();\n    }\n\n    reduceTotalMoney = () => {\n        let total = 0;\n        this.props.shoppingBags.map(value => {\n            total += value.quantity * value.product.sellPrice;\n        })\n        if (total !== 0) {\n            total = total*this.props.percentDiscount/100\n        }\n        return total.toLocaleString()\n    }\n\n    finalTotalMoney = () => {\n        let total = 0;\n        this.props.shoppingBags.map(value => {\n            total += value.quantity * value.product.sellPrice;\n        })\n        if (total !== 0 && this.props.percentDiscount !== 0) {\n            total -= total*this.props.percentDiscount/100\n        }\n        return total.toLocaleString();\n    }\n\n    dateFunction = () => {\n        let month = this.state.date.getMonth()+1;\n        return \"  \" + this.state.date.getDate() + \" / \" + month + \" / \" + this.state.date.getFullYear()\n    }\n\n    render() {\n        \n        return (\n            <div className=\"row\">\n                {this.reduceTotalMoney()}\n                <div className=\"col-12\">\n                    <h1 style={{ textAlign: 'center' }}>{this.props.infoUser.storeName}</h1>\n                </div>\n                <div style={{ borderBottom: '1px solid #00000059' }} className=\"col-12\">\n                    <p style={{ textAlign: 'center', marginBottom: '0' }}>{this.props.infoUser.address}</p>\n                    <p style={{ textAlign: 'center' }}>{this.props.infoUser.district + ' ' + this.props.infoUser.province}</p>\n                    <p style={{ textAlign: 'center' }}>{\"SĐT: \" + this.props.infoUser.tel}</p>\n                </div>\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\n                    <h4 style={{ textAlign: 'center' }}>HÓA ĐƠN THANH TOÁN</h4>\n                </div>\n                <div className=\"col-12\">\n                    <p style={{ textAlign: 'center', fontWeight: '400' }}>Số HĐ: {this.props.MAHD}</p>\n                    <div style={{ margin: '0 5px' }} className=\"row\">\n                        <div className=\"col-6\">\n                            <p style={{ fontWeight: '700' }}>Date:\n                                <span style={{ fontWeight: '400' }}>\n                                    {this.dateFunction()}\n                                </span>\n                            </p>\n                        </div>\n                        <div className=\"col-6\">\n                            <p style={{ fontWeight: '700' }}>Time:\n                                <span style={{ fontWeight: '400' }}>\n                                    {\"  \" + this.state.date.getHours() + \":\" + this.state.date.getMinutes()}\n                                </span>\n                            </p>\n                        </div>\n                    </div>\n                    <p style={{ fontWeight: '700', margin: '0 17px' }}>\n                        Cashier:\n                        <span style={{ fontWeight: '400' }}>\n                            {\"  Admin\"}\n                        </span>\n                    </p>\n                </div>\n                <table style={{ margin: '0 10px' }} class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Name</th>\n                            <th scope=\"col\">Quantity</th>\n                            <th scope=\"col\">Price</th>\n                            <th scope=\"col\">Total money</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.shoppingBags ? this.props.shoppingBags.map((value, key) => (\n                            <tr>\n                                <td>{key + 1}</td>\n                                <td>{value.product.name}</td>\n                                <td>{value.quantity}</td>\n                                <td>{value.product.sellPrice}</td>\n                                <td>{value.quantity * value.product.sellPrice}</td>\n                            </tr>\n                        ))\n                        : null}\n                    </tbody>\n                </table>\n                <div style={{marginTop: '20px'}} className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-6\">\n                            <h6 style={{ textAlign: 'end' }}>Total :</h6>\n                        </div>\n                        <div className=\"col-6\">\n                            <h6 style={{ textAlign: 'start' }}>{this.totalMoney()}đ</h6>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-6\">\n                            <h6 style={{ textAlign: 'end' }}>Discount :</h6>\n                        </div>\n                        <div className=\"col-6\">\n                            <h6 style={{ textAlign: 'start' }}>-{this.reduceTotalMoney()}đ</h6>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-6\">\n                            <h5 style={{ textAlign: 'end' }}>TOTAL FINAL :</h5>\n                        </div>\n                        <div className=\"col-6\">\n                            <h5 style={{ textAlign: 'start' }}>{this.finalTotalMoney()}đ</h5>\n                        </div>\n                    </div>\n                </div>\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\n                    <h6 style={{ textAlign: 'center',fontStyle: 'italic ' }}>Xin cảm ơn quý khách</h6>\n                    <h6 style={{ textAlign: 'center',fontStyle: 'italic ' }}>hẹn gặp lại!</h6>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ComponentToPrint;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/TableRow.js",["839","840","841","842","843"],"import * as React from 'react';\nimport Typography from '@mui/material/Typography';\nimport { Image } from 'cloudinary-react';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Collapse from '@mui/material/Collapse';\nimport IconButton from '@mui/material/IconButton';\nimport { withStyles } from '@material-ui/styles';\nimport GoodImage from './goodExample.jpg';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport { useDispatch } from 'react-redux'\nimport axios from 'axios';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\n\nconst styles = theme =>  ({\n    goodTable_Cell:{\n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: 4,\n        color: '#333'\n    }\n});\n\n\n\nclass GoodRow extends Component{\n    constructor(props) {\n        super(props);\n        this.state ={\n            update: false,\n            change: false,\n        }\n        \n    }\n    isOpen = false;\n    row = {};\n    setOpen(value) {\n        this.isOpen = value;\n        this.setState({change: !this.state.change});\n        console.log(\"this.isOpen\",this.isOpen)\n    }\n\n    async deleteProduct() {\n        // Xoá sản phẩm\n        // const data = {\n        //     token: localStorage.getItem('token'),\n        //     products:\n        //     [\n        //         {\n        //             productID: row.id,\n        //             importDate: row.importTime,\n        //             storeID: row.storeID,\n        //         }\n        //     ]\n            \n        // }\n        // axios.delete(`http://localhost:5000/api/product`,{data: data})\n        //     .then(res => {\n        //         alert(\"delete product success\");\n        //     })\n        //     .catch(err => {\n        //         alert(err);\n        //     })\n        \n        // // Get hết các cái join của sản phẩm\n        // var allJoinMatch = [];\n        // const data1 = {\n        //     token: localStorage.getItem('token'),\n        //     filter: {\n        //         \"_id.storeID\": row.storeID,\n        //         \"_id.productID\": row.id,\n        //     }   \n        // }\n        // await axios.get(`http://localhost:5000/api/product/join`, \n        // {\n        //     params: {...data1}\n        // })\n        //     .then(res => {\n        //         allJoinMatch = res.data.data;\n        //     })\n        //     .catch(err => {\n        //         console.log(err);\n        //         alert(err);\n        //     })\n        // console.log(allJoinMatch);\n        // // Xoá các join liên quan đến sản phẩm\n        // var allProductJoin = [];\n        // for(var i = 0 ; i < allJoinMatch.length; i++)\n        // {\n        //     allProductJoin.push({\n        //         productID: row.id,\n        //         typeID: allJoinMatch[i]._id.typeID,\n        //         importDate: allJoinMatch[i]._id.importDate,\n        //         storeID: row.storeID,\n        //     });\n        // }\n        // const dataJoin = {\n        //     token: localStorage.getItem('token'),\n        //     productJoinTypes: allProductJoin,      \n        // }\n\n        // console.log(dataJoin);\n\n        // await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\n        //     .then(res => {\n        //         console.log(\"delete join success\");\n        //     })\n        //     .catch(err => {\n        //         alert(err);\n        //     })\n\n        // Tạm thời\n        // window.location.reload();\n    }\n    render () {\n        const { classes } = this.props;\n        const row = this.props.data;\n        console.log(row);\n        return (\n            <React.Fragment>\n            <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row._id.productID}</TableCell>\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.name}</TableCell>\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.quantity}</TableCell>\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.sellPrice}</TableCell>\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\n                    {/* {row.importTime == null ? '' : row.importTime.substring(0,row.importTime.indexOf('T'))} */}\n                    {row._id.importDate == null ? '': row._id.importDate.substring(0,row._id.importDate.indexOf('T'))}\n                </TableCell>\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => this.setOpen(!this.isOpen)}>\n                        {this.isOpen ? (<KeyboardArrowUpIcon />) : (<KeyboardArrowDownIcon />)}\n                    </IconButton>\n                </TableCell>\n            </TableRow>\n            {\n                // this.isOpen ?\n                true ?\n                <TableRow>\n                    <TableCell className={classes.goodTable_Cell} style={{ padding: 0, height: 100}} colSpan={8}>\n                        {/* <Collapse in={open} timeout=\"auto\" unmountOnExit> */}\n                        <Collapse in={true} timeout=\"auto\" unmountOnExit>\n                            <Box sx={{ margin: 1 }}>\n                                <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                    Other information\n                                </Typography>\n                                <div style={{display: 'flex'}}>\n                                    {  \n                                        row.imgUrl == \"none\"\n                                        ? <div style={{width: '100px', height: '100px', objectFit:'cover'}}><img src={GoodImage} style={{width: '100px', height: '100px', objectFit:'cover'}}/></div>\n                                        \n                                        : <div style={{width: '100px', height: '100px', objectFit:'cover'}}><Image style={{width: '100px', height: '100px', objectFit:'cover'}} cloudName=\"databaseimg\" publicId={row.imgUrl}>{row.imgUrl}</Image></div>\n                                    }\n                                    <Table>\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell className={classes.goodTable_Cell}><div style={{color: '#333'}}>Expired Day</div></TableCell>\n                                                <TableCell className={classes.goodTable_Cell}><div  style={{color: '#333'}}>Original Price</div></TableCell>\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div  style={{color: '#333'}}>Good Remain</div></TableCell>\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div  style={{color: '#333'}}>Product Type</div></TableCell>\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div style={{color: '#333'}}>Unit</div></TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            <TableRow>\n                                                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">\n                                                    {/* {row.hidden.expires == null ? '': row.hidden.expires.substring(0,row.hidden.expires.indexOf('T'))} */}\n                                                    {row.expires == null ? '': row.expires.substring(0,row.expires.indexOf('T'))}\n                                                </TableCell>\n                                                <TableCell className={classes.goodTable_Cell}>{row.importPrice}</TableCell>\n                                                <TableCell className={classes.goodTable_Cell}>{row.remain}</TableCell>\n                                                <TableCell className={classes.goodTable_Cell}>{row.joinType}</TableCell>\n                                                <TableCell className={classes.goodTable_Cell}>{row.unit}</TableCell>\n                                            </TableRow>\n                                        </TableBody>\n                                    </Table>\n                                    <div className=\"button-container\">\n                                        <Button \n                                            onClick={() => {\n                                                // Truyền cái data vào trong hàm đây luôn\n                                                const data = row;\n                                                this.props.updateProduct(data);\n                                                this.props.openUpdateModal();\n                                            }}\n                                            variant=\"contained\"\n                                        >\n                                            Update\n                                        </Button>\n                                        <Button \n                                            variant=\"contained\"\n                                            onClick={() => this.deleteProduct()}\n                                        >\n                                            Delete\n                                            \n                                        </Button>\n                                    </div>\n                                </div>  \n                            </Box>\n                        </Collapse>\n                    </TableCell>\n                </TableRow>\n                : null\n            }\n            \n            </React.Fragment>\n        ); \n    }\n}\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        infoUser: state.infoUser,\n        isAddTypeStatus: state.isAddTypeStatus,\n        confirmStatus: state.confirmStatus,\n        listProduct: state.listProduct,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n        updateProduct: (data) => {\n            dispatch({type: \"UPDATE_GOOD_DATA\", data});\n        },\n        openUpdateModal: (data) => {\n            dispatch({ type: \"CHANGE_UPDATE_GOOD_STATUS\", });\n        }\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(GoodRow));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/FixedCalendarCell.js",["844","845","846","847","848","849","850","851"],"import {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { withStyles } from '@material-ui/styles';\n// material\nimport { TableCell, List, ListItem, ListItemButton, ListItemText} from '@mui/material';\nimport '../../css/EmployeeManager.css';\n\n//icon\nimport { IoIosAdd,} from \"react-icons/io\";\nimport {  AiFillCloseCircle} from \"react-icons/ai\";\n// ----------------------------------------------------------------------\nconst styles = theme =>  ({\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '80px',\n    } \n})\n\nclass FixedCalendarCell extends Component {\n  isOpen=false;\n\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: false\n    }\n    \n  }\n\n \n\n  handleChange() {\n    this.isOpen = !this.isOpen;\n    this.setState({change : !this.state.change})\n  }\n\n  getEmployeeNameByID(employeeID)\n  {\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n      {\n          var currentEmployee = this.props.listEmployee.employees[i];\n          if(currentEmployee._id.employeeID==employeeID)\n          {\n            return currentEmployee.firstName;\n          }\n      }\n      return \"Can't get name\";\n  }\n\n  getCurrentDateTime()\n  {\n      var currentDate = new Date();\n      var day = (currentDate.toString().split(' '))[2];\n      if(day.length < 2)\n      {\n          day = '0' + day;\n      }\n      var month = (new Date().getMonth() + 1).toString();\n      if(month.length<2)\n      {\n          month = '0' + month;\n      }\n      return new Date().getFullYear() + '-' + month + '-' + day;\n  }\n\n  async addThisShiftAssign(employeeID)\n  {\n      const data = {\n          token: localStorage.getItem('token'),\n          shiftAssign: {\n            _id: {\n              dateInWeek: this.props.dayIndex,\n              storeID: this.props.infoUser.email,\n              shiftType: {\n                  _id: {\n                      shiftID: this.props.shiftID,\n                      storeID: this.props.infoUser.email,\n                  },\n              },\n              employee: {\n                  _id: {\n                      employeeID: employeeID,\n                      storeID: this.props.infoUser.email,\n                  },\n              },\n            },\n          }\n          \n      }\n      await axios.post(`http://localhost:5000/api/employee/shift-assign`, data)\n        .then(res => {\n            alert(\"Lưu thành công\")\n        })\n        .catch(err => {\n            alert(err);\n            console.log(err);\n        })\n      this.handleChange();\n      this.props.AddShiftAssign(data.shiftAssign);\n  }\n\n  removeShift(employeeID)\n  {\n    const data1 = {\n        token: localStorage.getItem('token'),\n        shiftAssign: {\n          _id: {\n            dateInWeek: this.props.dayIndex,\n            storeID: this.props.infoUser.email,\n            shiftType: {\n                _id: {\n                    shiftID: this.props.shiftID,\n                    storeID: this.props.infoUser.email,\n                },\n            },\n            employee: {\n                _id: {\n                    employeeID: employeeID,\n                    storeID: this.props.infoUser.email,\n                },\n            },\n          }\n      },\n    }\n      axios.delete(`http://localhost:5000/api/employee/shift-assign`,{data: data1})\n      .then(res => {\n          alert(\"success\");\n      })\n      .catch(err => {\n          alert(err);\n      })\n      const data = {\n          _id: {\n            dateInWeek: this.props.dayIndex,\n            storeID: this.props.infoUser.email,\n            shiftType: {\n                _id: {\n                    shiftID: this.props.shiftID,\n                    storeID: this.props.infoUser.email,\n                },\n            },\n            employee: {\n                _id: {\n                    employeeID: employeeID,\n                    storeID: this.props.infoUser.email,\n                },\n            },\n        },\n      }\n      \n      console.log(\"data\", data);\n      this.props.RemoveShiftAssign(data);\n      \n  }\n\n  findShiftInShiftAssign()\n  {\n      var listShiftAssign = this.props.listShiftAssign;\n      for(var i = 0 ; i < listShiftAssign.length ; i++)\n      {\n          if(this.props.shiftID == listShiftAssign[i]._id.shiftType._id.shiftID && \n            this.props.dayIndex == listShiftAssign[i]._id.dateInWeek)\n            { \n                return true;\n            }\n      }\n      return false;\n  }\n\n  findEmployeeInShift(employeeID)\n  {\n      var listShiftAssign = this.props.listShiftAssign;\n      for(var i = 0 ; i < listShiftAssign.length; i++)\n      {\n          if(this.props.shiftID == listShiftAssign[i]._id.shiftType._id.shiftID \n            && this.props.dayIndex == listShiftAssign[i]._id.dateInWeek\n            && listShiftAssign[i]._id.employee._id.employeeID == employeeID)\n          return true;\n      }\n      return false;\n  }\n  render() {\n    const { classes } = this.props;\n    return (\n        <TableCell \n            className={classes.goodTable_Cell} \n            style={{\n                position: 'relative',\n                backgroundColor: !this.findShiftInShiftAssign() ?'#ff6057': '#b3cde0',\n                height: '80px',\n            }}\n            // ref={this.myRef}    \n        >\n            <div\n                style={{\n                    position: 'absolute',\n                    right: 0,\n                    top: 0,\n                    borderRadius: '50%',\n                    backgroundColor: '#fff',\n                    width: 22,\n                    height: 22,\n                    textAlign: 'center'\n                }}\n                className='add-employee-to-shift-button'\n            >\n                <IoIosAdd \n                    size={30}\n                    style={{\n                        position: 'absolute',\n                        right: -4,\n                        top: -3,\n                    }}\n                    color='#0096FF'\n                    onClick={() => this.handleChange()}\n                >    \n                </IoIosAdd>\n                \n            </div>\n            {\n              this.props.listShiftAssign.map((item) => \n                (\n                  ( this.props.shiftID == item._id.shiftType._id.shiftID && this.props.dayIndex == item._id.dateInWeek )\n                  ? <div style={{\n                            backgroundColor: \"#fff\", \n                            padding: 10, \n                            maxWidth: 100,\n                            position: 'relative',\n                            marginBottom: 4\n                            }}\n                    >\n                      <span>\n                          {item._id.employee._id.employeeID + ' - ' \n                          + this.getEmployeeNameByID(item._id.employee._id.employeeID)}\n                      </span>\n                      <AiFillCloseCircle\n                          style={{\n                            color: 'red',\n                            position: 'absolute',\n                            right: 0, \n                            top: 0,\n                          }} \n                          size={20}\n                          onClick={() => this.removeShift(item._id.employee._id.employeeID)}\n                      ></AiFillCloseCircle>\n                    </div>\n                  : null\n                )\n              )\n            }\n            {\n              this.isOpen \n              ? \n              // Đây là cái bảng chọn nhân viên\n              <List \n                style={{\n                  position: 'absolute',\n                  right: 0,\n                  top: 20,\n                  zIndex: 10,\n                  maxHeight: 100,\n                  overflowY: 'auto',\n                  width: 140,\n                  backgroundColor: '#fff',\n                }}\n              >\n                {\n                  this.props.listEmployee.employees.map((item) =>\n                    this.findEmployeeInShift(item._id.employeeID) ? null :\n                    <ListItem disablePadding height={30} onClick={() => this.addThisShiftAssign(item._id.employeeID)}>\n                        <ListItemButton>\n                            <ListItemText>\n                                {item._id.employeeID + ' - ' + item.firstName}\n                            </ListItemText>\n                        </ListItemButton>\n                    </ListItem>\n                  )\n                }\n              </List>\n              : null\n            }\n\n        </TableCell>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n      listEmployee: state.listEmployee,\n      listShiftAssign: state.listShiftAssign,\n      infoUser: state.infoUser,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    AddShiftAssign: (data) => {\n      dispatch({\n          type: \"ADD_NEW_SHIFT_ASSIGN\",\n          data: data,\n      });\n    },\n    RemoveShiftAssign: (data) => {\n      dispatch({\n          type: \"DELETE_SHIFT_ASSIGN\",\n          data: data,\n      });\n    }\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(FixedCalendarCell));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/BaseOptionChart.js",[],{"ruleId":"852","severity":1,"message":"853","line":10,"column":10,"nodeType":"854","messageId":"855","endLine":10,"endColumn":24},{"ruleId":"856","severity":1,"message":"857","line":13,"column":3,"nodeType":"858","messageId":"859","endLine":15,"endColumn":4},{"ruleId":"860","severity":1,"message":"861","line":21,"column":45,"nodeType":"862","messageId":"863","endLine":21,"endColumn":47},{"ruleId":"860","severity":1,"message":"864","line":5,"column":46,"nodeType":"862","messageId":"865","endLine":5,"endColumn":48},{"ruleId":"860","severity":1,"message":"861","line":40,"column":45,"nodeType":"862","messageId":"863","endLine":40,"endColumn":47},{"ruleId":"860","severity":1,"message":"864","line":47,"column":48,"nodeType":"862","messageId":"865","endLine":47,"endColumn":50},{"ruleId":"866","severity":1,"message":"867","line":38,"column":30,"nodeType":"868","messageId":"869","endLine":38,"endColumn":32},{"ruleId":"870","severity":1,"message":"871","line":56,"column":25,"nodeType":"854","messageId":"872","endLine":56,"endColumn":33},{"ruleId":"870","severity":1,"message":"873","line":57,"column":29,"nodeType":"854","messageId":"872","endLine":57,"endColumn":30},{"ruleId":"866","severity":1,"message":"867","line":40,"column":30,"nodeType":"868","messageId":"869","endLine":40,"endColumn":32},{"ruleId":"870","severity":1,"message":"871","line":54,"column":25,"nodeType":"854","messageId":"872","endLine":54,"endColumn":33},{"ruleId":"870","severity":1,"message":"873","line":55,"column":29,"nodeType":"854","messageId":"872","endLine":55,"endColumn":30},{"ruleId":"866","severity":1,"message":"867","line":42,"column":30,"nodeType":"868","messageId":"869","endLine":42,"endColumn":32},{"ruleId":"852","severity":1,"message":"874","line":6,"column":8,"nodeType":"854","messageId":"855","endLine":6,"endColumn":15},{"ruleId":"875","severity":1,"message":"876","line":97,"column":28,"nodeType":"877","messageId":"878","endLine":97,"endColumn":29,"suggestions":"879"},{"ruleId":"875","severity":1,"message":"876","line":97,"column":44,"nodeType":"877","messageId":"878","endLine":97,"endColumn":45,"suggestions":"880"},{"ruleId":"852","severity":1,"message":"874","line":13,"column":8,"nodeType":"854","messageId":"855","endLine":13,"endColumn":15},{"ruleId":"875","severity":1,"message":"876","line":106,"column":30,"nodeType":"877","messageId":"878","endLine":106,"endColumn":31,"suggestions":"881"},{"ruleId":"875","severity":1,"message":"876","line":106,"column":46,"nodeType":"877","messageId":"878","endLine":106,"endColumn":47,"suggestions":"882"},{"ruleId":"875","severity":1,"message":"876","line":97,"column":28,"nodeType":"877","messageId":"878","endLine":97,"endColumn":29,"suggestions":"883"},{"ruleId":"875","severity":1,"message":"876","line":97,"column":44,"nodeType":"877","messageId":"878","endLine":97,"endColumn":45,"suggestions":"884"},{"ruleId":"885","severity":1,"message":"886","line":282,"column":9,"nodeType":"887","messageId":"869","endLine":282,"endColumn":25},{"ruleId":"852","severity":1,"message":"888","line":9,"column":10,"nodeType":"854","messageId":"855","endLine":9,"endColumn":19},{"ruleId":"852","severity":1,"message":"889","line":14,"column":8,"nodeType":"854","messageId":"855","endLine":14,"endColumn":13},{"ruleId":"852","severity":1,"message":"890","line":9,"column":11,"nodeType":"854","messageId":"855","endLine":9,"endColumn":32},{"ruleId":"852","severity":1,"message":"891","line":100,"column":13,"nodeType":"854","messageId":"855","endLine":100,"endColumn":14},{"ruleId":"852","severity":1,"message":"892","line":115,"column":15,"nodeType":"854","messageId":"855","endLine":115,"endColumn":30},{"ruleId":"893","severity":1,"message":"894","line":131,"column":29,"nodeType":"895","endLine":131,"endColumn":161},{"ruleId":"866","severity":1,"message":"896","line":137,"column":45,"nodeType":"868","messageId":"869","endLine":137,"endColumn":47},{"ruleId":"866","severity":1,"message":"896","line":150,"column":45,"nodeType":"868","messageId":"869","endLine":150,"endColumn":47},{"ruleId":"897","severity":1,"message":"898","line":216,"column":25,"nodeType":"895","endLine":221,"endColumn":26},{"ruleId":"897","severity":1,"message":"899","line":225,"column":25,"nodeType":"895","endLine":225,"endColumn":136},{"ruleId":"852","severity":1,"message":"900","line":2,"column":8,"nodeType":"854","messageId":"855","endLine":2,"endColumn":12},{"ruleId":"852","severity":1,"message":"901","line":3,"column":8,"nodeType":"854","messageId":"855","endLine":3,"endColumn":13},{"ruleId":"852","severity":1,"message":"902","line":4,"column":8,"nodeType":"854","messageId":"855","endLine":4,"endColumn":17},{"ruleId":"852","severity":1,"message":"903","line":5,"column":8,"nodeType":"854","messageId":"855","endLine":5,"endColumn":22},{"ruleId":"852","severity":1,"message":"904","line":7,"column":10,"nodeType":"854","messageId":"855","endLine":7,"endColumn":22},{"ruleId":"852","severity":1,"message":"905","line":14,"column":5,"nodeType":"854","messageId":"855","endLine":14,"endColumn":11},{"ruleId":"852","severity":1,"message":"906","line":23,"column":5,"nodeType":"854","messageId":"855","endLine":23,"endColumn":20},{"ruleId":"852","severity":1,"message":"907","line":25,"column":8,"nodeType":"854","messageId":"855","endLine":25,"endColumn":23},{"ruleId":"852","severity":1,"message":"908","line":45,"column":10,"nodeType":"854","messageId":"855","endLine":45,"endColumn":21},{"ruleId":"852","severity":1,"message":"909","line":97,"column":5,"nodeType":"854","messageId":"855","endLine":97,"endColumn":15},{"ruleId":"852","severity":1,"message":"910","line":98,"column":5,"nodeType":"854","messageId":"855","endLine":98,"endColumn":18},{"ruleId":"852","severity":1,"message":"911","line":100,"column":5,"nodeType":"854","messageId":"855","endLine":100,"endColumn":9},{"ruleId":"852","severity":1,"message":"912","line":101,"column":5,"nodeType":"854","messageId":"855","endLine":101,"endColumn":16},{"ruleId":"866","severity":1,"message":"867","line":466,"column":75,"nodeType":"868","messageId":"869","endLine":466,"endColumn":77},{"ruleId":"852","severity":1,"message":"913","line":2,"column":10,"nodeType":"854","messageId":"855","endLine":2,"endColumn":18},{"ruleId":"852","severity":1,"message":"914","line":6,"column":10,"nodeType":"854","messageId":"855","endLine":6,"endColumn":20},{"ruleId":"852","severity":1,"message":"915","line":6,"column":30,"nodeType":"854","messageId":"855","endLine":6,"endColumn":35},{"ruleId":"852","severity":1,"message":"916","line":11,"column":8,"nodeType":"854","messageId":"855","endLine":11,"endColumn":17},{"ruleId":"852","severity":1,"message":"917","line":15,"column":8,"nodeType":"854","messageId":"855","endLine":15,"endColumn":22},{"ruleId":"852","severity":1,"message":"918","line":16,"column":8,"nodeType":"854","messageId":"855","endLine":16,"endColumn":22},{"ruleId":"852","severity":1,"message":"919","line":17,"column":8,"nodeType":"854","messageId":"855","endLine":17,"endColumn":28},{"ruleId":"852","severity":1,"message":"920","line":20,"column":10,"nodeType":"854","messageId":"855","endLine":20,"endColumn":29},{"ruleId":"866","severity":1,"message":"896","line":185,"column":31,"nodeType":"868","messageId":"869","endLine":185,"endColumn":33},{"ruleId":"866","severity":1,"message":"896","line":192,"column":78,"nodeType":"868","messageId":"869","endLine":192,"endColumn":80},{"ruleId":"866","severity":1,"message":"896","line":206,"column":70,"nodeType":"868","messageId":"869","endLine":206,"endColumn":72},{"ruleId":"866","severity":1,"message":"896","line":214,"column":79,"nodeType":"868","messageId":"869","endLine":214,"endColumn":81},{"ruleId":"866","severity":1,"message":"896","line":227,"column":75,"nodeType":"868","messageId":"869","endLine":227,"endColumn":77},{"ruleId":"866","severity":1,"message":"896","line":263,"column":31,"nodeType":"868","messageId":"869","endLine":263,"endColumn":33},{"ruleId":"870","severity":1,"message":"873","line":299,"column":17,"nodeType":"854","messageId":"872","endLine":299,"endColumn":18},{"ruleId":"866","severity":1,"message":"896","line":351,"column":44,"nodeType":"868","messageId":"869","endLine":351,"endColumn":46},{"ruleId":"866","severity":1,"message":"896","line":363,"column":26,"nodeType":"868","messageId":"869","endLine":363,"endColumn":28},{"ruleId":"866","severity":1,"message":"896","line":387,"column":140,"nodeType":"868","messageId":"869","endLine":387,"endColumn":142},{"ruleId":"866","severity":1,"message":"896","line":579,"column":84,"nodeType":"868","messageId":"869","endLine":579,"endColumn":86},{"ruleId":"866","severity":1,"message":"867","line":610,"column":77,"nodeType":"868","messageId":"869","endLine":610,"endColumn":79},{"ruleId":"860","severity":1,"message":"861","line":176,"column":89,"nodeType":"862","messageId":"863","endLine":176,"endColumn":91},{"ruleId":"852","severity":1,"message":"921","line":2,"column":27,"nodeType":"854","messageId":"855","endLine":2,"endColumn":33},{"ruleId":"852","severity":1,"message":"922","line":2,"column":43,"nodeType":"854","messageId":"855","endLine":2,"endColumn":52},{"ruleId":"852","severity":1,"message":"923","line":4,"column":10,"nodeType":"854","messageId":"855","endLine":4,"endColumn":23},{"ruleId":"852","severity":1,"message":"924","line":9,"column":8,"nodeType":"854","messageId":"855","endLine":9,"endColumn":20},{"ruleId":"870","severity":1,"message":"873","line":137,"column":17,"nodeType":"854","messageId":"872","endLine":137,"endColumn":18},{"ruleId":"852","severity":1,"message":"925","line":2,"column":28,"nodeType":"854","messageId":"855","endLine":2,"endColumn":35},{"ruleId":"852","severity":1,"message":"926","line":3,"column":9,"nodeType":"854","messageId":"855","endLine":3,"endColumn":12},{"ruleId":"852","severity":1,"message":"927","line":3,"column":14,"nodeType":"854","messageId":"855","endLine":3,"endColumn":25},{"ruleId":"852","severity":1,"message":"914","line":3,"column":35,"nodeType":"854","messageId":"855","endLine":3,"endColumn":45},{"ruleId":"852","severity":1,"message":"928","line":5,"column":10,"nodeType":"854","messageId":"855","endLine":5,"endColumn":15},{"ruleId":"852","severity":1,"message":"929","line":10,"column":5,"nodeType":"854","messageId":"855","endLine":10,"endColumn":17},{"ruleId":"852","severity":1,"message":"930","line":14,"column":5,"nodeType":"854","messageId":"855","endLine":14,"endColumn":12},{"ruleId":"866","severity":1,"message":"896","line":119,"column":47,"nodeType":"868","messageId":"869","endLine":119,"endColumn":49},{"ruleId":"866","severity":1,"message":"896","line":120,"column":59,"nodeType":"868","messageId":"869","endLine":120,"endColumn":61},{"ruleId":"866","severity":1,"message":"896","line":121,"column":61,"nodeType":"868","messageId":"869","endLine":121,"endColumn":63},{"ruleId":"866","severity":1,"message":"896","line":146,"column":34,"nodeType":"868","messageId":"869","endLine":146,"endColumn":36},{"ruleId":"866","severity":1,"message":"896","line":151,"column":32,"nodeType":"868","messageId":"869","endLine":151,"endColumn":34},{"ruleId":"866","severity":1,"message":"896","line":157,"column":32,"nodeType":"868","messageId":"869","endLine":157,"endColumn":34},{"ruleId":"866","severity":1,"message":"896","line":157,"column":74,"nodeType":"868","messageId":"869","endLine":157,"endColumn":76},{"ruleId":"866","severity":1,"message":"896","line":170,"column":33,"nodeType":"868","messageId":"869","endLine":170,"endColumn":35},{"ruleId":"866","severity":1,"message":"896","line":303,"column":80,"nodeType":"868","messageId":"869","endLine":303,"endColumn":82},{"ruleId":"866","severity":1,"message":"896","line":340,"column":78,"nodeType":"868","messageId":"869","endLine":340,"endColumn":80},{"ruleId":"852","severity":1,"message":"931","line":1,"column":17,"nodeType":"854","messageId":"855","endLine":1,"endColumn":25},{"ruleId":"852","severity":1,"message":"932","line":6,"column":11,"nodeType":"854","messageId":"855","endLine":6,"endColumn":17},{"ruleId":"933","severity":1,"message":"934","line":14,"column":8,"nodeType":"935","endLine":14,"endColumn":10,"suggestions":"936"},{"ruleId":"933","severity":1,"message":"934","line":172,"column":8,"nodeType":"935","endLine":172,"endColumn":10,"suggestions":"937"},{"ruleId":"870","severity":1,"message":"938","line":23,"column":21,"nodeType":"854","messageId":"872","endLine":23,"endColumn":29},{"ruleId":"870","severity":1,"message":"939","line":24,"column":21,"nodeType":"854","messageId":"872","endLine":24,"endColumn":28},{"ruleId":"870","severity":1,"message":"940","line":34,"column":21,"nodeType":"854","messageId":"872","endLine":34,"endColumn":27},{"ruleId":"870","severity":1,"message":"941","line":35,"column":21,"nodeType":"854","messageId":"872","endLine":35,"endColumn":26},{"ruleId":"852","severity":1,"message":"942","line":5,"column":10,"nodeType":"854","messageId":"855","endLine":5,"endColumn":26},{"ruleId":"866","severity":1,"message":"896","line":28,"column":28,"nodeType":"868","messageId":"869","endLine":28,"endColumn":30},{"ruleId":"866","severity":1,"message":"867","line":29,"column":29,"nodeType":"868","messageId":"869","endLine":29,"endColumn":31},{"ruleId":"852","severity":1,"message":"889","line":2,"column":80,"nodeType":"854","messageId":"855","endLine":2,"endColumn":85},{"ruleId":"852","severity":1,"message":"943","line":4,"column":25,"nodeType":"854","messageId":"855","endLine":4,"endColumn":31},{"ruleId":"852","severity":1,"message":"944","line":6,"column":20,"nodeType":"854","messageId":"855","endLine":6,"endColumn":33},{"ruleId":"866","severity":1,"message":"896","line":52,"column":45,"nodeType":"868","messageId":"869","endLine":52,"endColumn":47},{"ruleId":"866","severity":1,"message":"896","line":83,"column":37,"nodeType":"868","messageId":"869","endLine":83,"endColumn":39},{"ruleId":"866","severity":1,"message":"896","line":85,"column":66,"nodeType":"868","messageId":"869","endLine":85,"endColumn":68},{"ruleId":"866","severity":1,"message":"896","line":96,"column":27,"nodeType":"868","messageId":"869","endLine":96,"endColumn":29},{"ruleId":"866","severity":1,"message":"896","line":117,"column":45,"nodeType":"868","messageId":"869","endLine":117,"endColumn":47},{"ruleId":"852","severity":1,"message":"945","line":4,"column":10,"nodeType":"854","messageId":"855","endLine":4,"endColumn":14},{"ruleId":"852","severity":1,"message":"927","line":4,"column":43,"nodeType":"854","messageId":"855","endLine":4,"endColumn":54},{"ruleId":"860","severity":1,"message":"864","line":44,"column":39,"nodeType":"862","messageId":"865","endLine":44,"endColumn":41},{"ruleId":"860","severity":1,"message":"864","line":52,"column":39,"nodeType":"862","messageId":"865","endLine":52,"endColumn":41},{"ruleId":"860","severity":1,"message":"864","line":64,"column":39,"nodeType":"862","messageId":"865","endLine":64,"endColumn":41},{"ruleId":"860","severity":1,"message":"864","line":52,"column":35,"nodeType":"862","messageId":"865","endLine":52,"endColumn":37},{"ruleId":"860","severity":1,"message":"861","line":462,"column":86,"nodeType":"862","messageId":"863","endLine":462,"endColumn":88},{"ruleId":"860","severity":1,"message":"861","line":481,"column":38,"nodeType":"862","messageId":"863","endLine":481,"endColumn":40},{"ruleId":"866","severity":1,"message":"896","line":485,"column":36,"nodeType":"868","messageId":"869","endLine":485,"endColumn":38},{"ruleId":"866","severity":1,"message":"896","line":485,"column":70,"nodeType":"868","messageId":"869","endLine":485,"endColumn":72},{"ruleId":"866","severity":1,"message":"896","line":485,"column":103,"nodeType":"868","messageId":"869","endLine":485,"endColumn":105},{"ruleId":"860","severity":1,"message":"861","line":492,"column":38,"nodeType":"862","messageId":"863","endLine":492,"endColumn":40},{"ruleId":"866","severity":1,"message":"896","line":496,"column":38,"nodeType":"868","messageId":"869","endLine":496,"endColumn":40},{"ruleId":"866","severity":1,"message":"896","line":496,"column":71,"nodeType":"868","messageId":"869","endLine":496,"endColumn":73},{"ruleId":"860","severity":1,"message":"861","line":503,"column":38,"nodeType":"862","messageId":"863","endLine":503,"endColumn":40},{"ruleId":"866","severity":1,"message":"896","line":507,"column":37,"nodeType":"868","messageId":"869","endLine":507,"endColumn":39},{"ruleId":"860","severity":1,"message":"861","line":514,"column":38,"nodeType":"862","messageId":"863","endLine":514,"endColumn":40},{"ruleId":"860","severity":1,"message":"864","line":529,"column":24,"nodeType":"862","messageId":"865","endLine":529,"endColumn":26},{"ruleId":"933","severity":1,"message":"946","line":542,"column":8,"nodeType":"935","endLine":542,"endColumn":71,"suggestions":"947"},{"ruleId":"852","severity":1,"message":"922","line":2,"column":43,"nodeType":"854","messageId":"855","endLine":2,"endColumn":52},{"ruleId":"852","severity":1,"message":"943","line":4,"column":25,"nodeType":"854","messageId":"855","endLine":4,"endColumn":31},{"ruleId":"852","severity":1,"message":"948","line":7,"column":8,"nodeType":"854","messageId":"855","endLine":7,"endColumn":13},{"ruleId":"856","severity":1,"message":"857","line":10,"column":5,"nodeType":"858","messageId":"859","endLine":12,"endColumn":6},{"ruleId":"949","severity":1,"message":"950","line":26,"column":9,"nodeType":"951","messageId":"952","endLine":32,"endColumn":10},{"ruleId":"953","severity":1,"message":"954","line":30,"column":13,"nodeType":"955","messageId":"956","endLine":31,"endColumn":67},{"ruleId":"852","severity":1,"message":"925","line":2,"column":28,"nodeType":"854","messageId":"855","endLine":2,"endColumn":35},{"ruleId":"852","severity":1,"message":"926","line":2,"column":54,"nodeType":"854","messageId":"855","endLine":2,"endColumn":57},{"ruleId":"852","severity":1,"message":"927","line":2,"column":59,"nodeType":"854","messageId":"855","endLine":2,"endColumn":70},{"ruleId":"852","severity":1,"message":"914","line":2,"column":80,"nodeType":"854","messageId":"855","endLine":2,"endColumn":90},{"ruleId":"852","severity":1,"message":"923","line":4,"column":10,"nodeType":"854","messageId":"855","endLine":4,"endColumn":23},{"ruleId":"852","severity":1,"message":"943","line":4,"column":25,"nodeType":"854","messageId":"855","endLine":4,"endColumn":31},{"ruleId":"852","severity":1,"message":"957","line":5,"column":8,"nodeType":"854","messageId":"855","endLine":5,"endColumn":13},{"ruleId":"852","severity":1,"message":"958","line":6,"column":10,"nodeType":"854","messageId":"855","endLine":6,"endColumn":18},{"ruleId":"852","severity":1,"message":"916","line":13,"column":8,"nodeType":"854","messageId":"855","endLine":13,"endColumn":17},{"ruleId":"852","severity":1,"message":"919","line":16,"column":8,"nodeType":"854","messageId":"855","endLine":16,"endColumn":28},{"ruleId":"852","severity":1,"message":"918","line":17,"column":8,"nodeType":"854","messageId":"855","endLine":17,"endColumn":22},{"ruleId":"852","severity":1,"message":"959","line":18,"column":8,"nodeType":"854","messageId":"855","endLine":18,"endColumn":18},{"ruleId":"852","severity":1,"message":"917","line":19,"column":8,"nodeType":"854","messageId":"855","endLine":19,"endColumn":22},{"ruleId":"870","severity":1,"message":"873","line":98,"column":17,"nodeType":"854","messageId":"872","endLine":98,"endColumn":18},{"ruleId":"866","severity":1,"message":"896","line":138,"column":44,"nodeType":"868","messageId":"869","endLine":138,"endColumn":46},{"ruleId":"866","severity":1,"message":"896","line":151,"column":31,"nodeType":"868","messageId":"869","endLine":151,"endColumn":33},{"ruleId":"866","severity":1,"message":"896","line":157,"column":78,"nodeType":"868","messageId":"869","endLine":157,"endColumn":80},{"ruleId":"866","severity":1,"message":"896","line":168,"column":70,"nodeType":"868","messageId":"869","endLine":168,"endColumn":72},{"ruleId":"866","severity":1,"message":"896","line":174,"column":79,"nodeType":"868","messageId":"869","endLine":174,"endColumn":81},{"ruleId":"866","severity":1,"message":"896","line":185,"column":75,"nodeType":"868","messageId":"869","endLine":185,"endColumn":77},{"ruleId":"866","severity":1,"message":"896","line":218,"column":31,"nodeType":"868","messageId":"869","endLine":218,"endColumn":33},{"ruleId":"870","severity":1,"message":"873","line":309,"column":17,"nodeType":"854","messageId":"872","endLine":309,"endColumn":18},{"ruleId":"866","severity":1,"message":"896","line":391,"column":20,"nodeType":"868","messageId":"869","endLine":391,"endColumn":22},{"ruleId":"866","severity":1,"message":"896","line":400,"column":26,"nodeType":"868","messageId":"869","endLine":400,"endColumn":28},{"ruleId":"866","severity":1,"message":"896","line":426,"column":127,"nodeType":"868","messageId":"869","endLine":426,"endColumn":129},{"ruleId":"866","severity":1,"message":"896","line":630,"column":69,"nodeType":"868","messageId":"869","endLine":630,"endColumn":71},{"ruleId":"866","severity":1,"message":"867","line":660,"column":81,"nodeType":"868","messageId":"869","endLine":660,"endColumn":83},{"ruleId":"933","severity":1,"message":"960","line":79,"column":7,"nodeType":"935","endLine":79,"endColumn":27,"suggestions":"961"},{"ruleId":"933","severity":1,"message":"960","line":89,"column":7,"nodeType":"935","endLine":89,"endColumn":26,"suggestions":"962"},{"ruleId":"933","severity":1,"message":"960","line":99,"column":7,"nodeType":"935","endLine":99,"endColumn":28,"suggestions":"963"},{"ruleId":"933","severity":1,"message":"960","line":129,"column":7,"nodeType":"935","endLine":129,"endColumn":78,"suggestions":"964"},{"ruleId":"852","severity":1,"message":"965","line":30,"column":5,"nodeType":"854","messageId":"855","endLine":30,"endColumn":21},{"ruleId":"852","severity":1,"message":"966","line":31,"column":5,"nodeType":"854","messageId":"855","endLine":31,"endColumn":18},{"ruleId":"866","severity":1,"message":"896","line":158,"column":44,"nodeType":"868","messageId":"869","endLine":158,"endColumn":46},{"ruleId":"866","severity":1,"message":"896","line":185,"column":62,"nodeType":"868","messageId":"869","endLine":185,"endColumn":64},{"ruleId":"852","severity":1,"message":"925","line":2,"column":28,"nodeType":"854","messageId":"855","endLine":2,"endColumn":35},{"ruleId":"852","severity":1,"message":"926","line":3,"column":9,"nodeType":"854","messageId":"855","endLine":3,"endColumn":12},{"ruleId":"852","severity":1,"message":"927","line":3,"column":14,"nodeType":"854","messageId":"855","endLine":3,"endColumn":25},{"ruleId":"852","severity":1,"message":"914","line":3,"column":35,"nodeType":"854","messageId":"855","endLine":3,"endColumn":45},{"ruleId":"852","severity":1,"message":"928","line":5,"column":10,"nodeType":"854","messageId":"855","endLine":5,"endColumn":15},{"ruleId":"852","severity":1,"message":"929","line":10,"column":5,"nodeType":"854","messageId":"855","endLine":10,"endColumn":17},{"ruleId":"852","severity":1,"message":"930","line":14,"column":5,"nodeType":"854","messageId":"855","endLine":14,"endColumn":12},{"ruleId":"866","severity":1,"message":"896","line":114,"column":40,"nodeType":"868","messageId":"869","endLine":114,"endColumn":42},{"ruleId":"866","severity":1,"message":"896","line":119,"column":38,"nodeType":"868","messageId":"869","endLine":119,"endColumn":40},{"ruleId":"866","severity":1,"message":"896","line":125,"column":38,"nodeType":"868","messageId":"869","endLine":125,"endColumn":40},{"ruleId":"866","severity":1,"message":"896","line":125,"column":86,"nodeType":"868","messageId":"869","endLine":125,"endColumn":88},{"ruleId":"866","severity":1,"message":"896","line":138,"column":33,"nodeType":"868","messageId":"869","endLine":138,"endColumn":35},{"ruleId":"866","severity":1,"message":"896","line":266,"column":80,"nodeType":"868","messageId":"869","endLine":266,"endColumn":82},{"ruleId":"866","severity":1,"message":"896","line":301,"column":78,"nodeType":"868","messageId":"869","endLine":301,"endColumn":80},{"ruleId":"852","severity":1,"message":"948","line":3,"column":8,"nodeType":"854","messageId":"855","endLine":3,"endColumn":13},{"ruleId":"852","severity":1,"message":"921","line":6,"column":72,"nodeType":"854","messageId":"855","endLine":6,"endColumn":78},{"ruleId":"852","severity":1,"message":"967","line":7,"column":10,"nodeType":"854","messageId":"855","endLine":7,"endColumn":23},{"ruleId":"852","severity":1,"message":"968","line":7,"column":25,"nodeType":"854","messageId":"855","endLine":7,"endColumn":37},{"ruleId":"852","severity":1,"message":"969","line":40,"column":11,"nodeType":"854","messageId":"855","endLine":40,"endColumn":15},{"ruleId":"866","severity":1,"message":"896","line":65,"column":37,"nodeType":"868","messageId":"869","endLine":65,"endColumn":39},{"ruleId":"866","severity":1,"message":"896","line":78,"column":44,"nodeType":"868","messageId":"869","endLine":78,"endColumn":46},{"ruleId":"852","severity":1,"message":"928","line":4,"column":10,"nodeType":"854","messageId":"855","endLine":4,"endColumn":15},{"ruleId":"852","severity":1,"message":"948","line":5,"column":8,"nodeType":"854","messageId":"855","endLine":5,"endColumn":13},{"ruleId":"852","severity":1,"message":"929","line":9,"column":5,"nodeType":"854","messageId":"855","endLine":9,"endColumn":17},{"ruleId":"852","severity":1,"message":"930","line":13,"column":5,"nodeType":"854","messageId":"855","endLine":13,"endColumn":12},{"ruleId":"852","severity":1,"message":"970","line":15,"column":5,"nodeType":"854","messageId":"855","endLine":15,"endColumn":14},{"ruleId":"866","severity":1,"message":"896","line":64,"column":59,"nodeType":"868","messageId":"869","endLine":64,"endColumn":61},{"ruleId":"852","severity":1,"message":"925","line":2,"column":28,"nodeType":"854","messageId":"855","endLine":2,"endColumn":35},{"ruleId":"852","severity":1,"message":"926","line":3,"column":9,"nodeType":"854","messageId":"855","endLine":3,"endColumn":12},{"ruleId":"852","severity":1,"message":"927","line":3,"column":14,"nodeType":"854","messageId":"855","endLine":3,"endColumn":25},{"ruleId":"852","severity":1,"message":"914","line":3,"column":35,"nodeType":"854","messageId":"855","endLine":3,"endColumn":45},{"ruleId":"852","severity":1,"message":"928","line":5,"column":10,"nodeType":"854","messageId":"855","endLine":5,"endColumn":15},{"ruleId":"852","severity":1,"message":"929","line":10,"column":5,"nodeType":"854","messageId":"855","endLine":10,"endColumn":17},{"ruleId":"852","severity":1,"message":"930","line":14,"column":5,"nodeType":"854","messageId":"855","endLine":14,"endColumn":12},{"ruleId":"866","severity":1,"message":"896","line":164,"column":47,"nodeType":"868","messageId":"869","endLine":164,"endColumn":49},{"ruleId":"866","severity":1,"message":"896","line":165,"column":59,"nodeType":"868","messageId":"869","endLine":165,"endColumn":61},{"ruleId":"866","severity":1,"message":"896","line":166,"column":61,"nodeType":"868","messageId":"869","endLine":166,"endColumn":63},{"ruleId":"866","severity":1,"message":"867","line":181,"column":38,"nodeType":"868","messageId":"869","endLine":181,"endColumn":40},{"ruleId":"866","severity":1,"message":"896","line":302,"column":80,"nodeType":"868","messageId":"869","endLine":302,"endColumn":82},{"ruleId":"866","severity":1,"message":"896","line":361,"column":80,"nodeType":"868","messageId":"869","endLine":361,"endColumn":82},{"ruleId":"852","severity":1,"message":"925","line":2,"column":28,"nodeType":"854","messageId":"855","endLine":2,"endColumn":35},{"ruleId":"852","severity":1,"message":"926","line":3,"column":9,"nodeType":"854","messageId":"855","endLine":3,"endColumn":12},{"ruleId":"852","severity":1,"message":"927","line":3,"column":14,"nodeType":"854","messageId":"855","endLine":3,"endColumn":25},{"ruleId":"852","severity":1,"message":"914","line":3,"column":35,"nodeType":"854","messageId":"855","endLine":3,"endColumn":45},{"ruleId":"852","severity":1,"message":"928","line":5,"column":10,"nodeType":"854","messageId":"855","endLine":5,"endColumn":15},{"ruleId":"852","severity":1,"message":"929","line":10,"column":5,"nodeType":"854","messageId":"855","endLine":10,"endColumn":17},{"ruleId":"852","severity":1,"message":"930","line":14,"column":5,"nodeType":"854","messageId":"855","endLine":14,"endColumn":12},{"ruleId":"866","severity":1,"message":"896","line":84,"column":40,"nodeType":"868","messageId":"869","endLine":84,"endColumn":42},{"ruleId":"866","severity":1,"message":"896","line":89,"column":38,"nodeType":"868","messageId":"869","endLine":89,"endColumn":40},{"ruleId":"866","severity":1,"message":"896","line":95,"column":35,"nodeType":"868","messageId":"869","endLine":95,"endColumn":37},{"ruleId":"866","severity":1,"message":"896","line":95,"column":80,"nodeType":"868","messageId":"869","endLine":95,"endColumn":82},{"ruleId":"866","severity":1,"message":"896","line":100,"column":30,"nodeType":"868","messageId":"869","endLine":100,"endColumn":32},{"ruleId":"866","severity":1,"message":"896","line":100,"column":72,"nodeType":"868","messageId":"869","endLine":100,"endColumn":74},{"ruleId":"866","severity":1,"message":"896","line":132,"column":33,"nodeType":"868","messageId":"869","endLine":132,"endColumn":35},{"ruleId":"866","severity":1,"message":"896","line":307,"column":80,"nodeType":"868","messageId":"869","endLine":307,"endColumn":82},{"ruleId":"866","severity":1,"message":"896","line":342,"column":78,"nodeType":"868","messageId":"869","endLine":342,"endColumn":80},{"ruleId":"866","severity":1,"message":"896","line":376,"column":81,"nodeType":"868","messageId":"869","endLine":376,"endColumn":83},{"ruleId":"852","severity":1,"message":"971","line":4,"column":10,"nodeType":"854","messageId":"855","endLine":4,"endColumn":14},{"ruleId":"852","severity":1,"message":"972","line":5,"column":8,"nodeType":"854","messageId":"855","endLine":5,"endColumn":24},{"ruleId":"852","severity":1,"message":"973","line":11,"column":3,"nodeType":"854","messageId":"855","endLine":11,"endColumn":7},{"ruleId":"852","severity":1,"message":"974","line":11,"column":9,"nodeType":"854","messageId":"855","endLine":11,"endColumn":17},{"ruleId":"852","severity":1,"message":"945","line":11,"column":19,"nodeType":"854","messageId":"855","endLine":11,"endColumn":23},{"ruleId":"866","severity":1,"message":"896","line":73,"column":36,"nodeType":"868","messageId":"869","endLine":73,"endColumn":38},{"ruleId":"866","severity":1,"message":"896","line":86,"column":44,"nodeType":"868","messageId":"869","endLine":86,"endColumn":46},{"ruleId":"866","severity":1,"message":"867","line":151,"column":87,"nodeType":"868","messageId":"869","endLine":151,"endColumn":89},{"ruleId":"852","severity":1,"message":"921","line":6,"column":72,"nodeType":"854","messageId":"855","endLine":6,"endColumn":78},{"ruleId":"852","severity":1,"message":"925","line":2,"column":28,"nodeType":"854","messageId":"855","endLine":2,"endColumn":35},{"ruleId":"852","severity":1,"message":"926","line":2,"column":54,"nodeType":"854","messageId":"855","endLine":2,"endColumn":57},{"ruleId":"852","severity":1,"message":"927","line":2,"column":59,"nodeType":"854","messageId":"855","endLine":2,"endColumn":70},{"ruleId":"852","severity":1,"message":"914","line":2,"column":80,"nodeType":"854","messageId":"855","endLine":2,"endColumn":90},{"ruleId":"852","severity":1,"message":"928","line":4,"column":10,"nodeType":"854","messageId":"855","endLine":4,"endColumn":15},{"ruleId":"852","severity":1,"message":"929","line":9,"column":5,"nodeType":"854","messageId":"855","endLine":9,"endColumn":17},{"ruleId":"852","severity":1,"message":"930","line":13,"column":5,"nodeType":"854","messageId":"855","endLine":13,"endColumn":12},{"ruleId":"866","severity":1,"message":"896","line":98,"column":23,"nodeType":"868","messageId":"869","endLine":98,"endColumn":25},{"ruleId":"866","severity":1,"message":"896","line":105,"column":68,"nodeType":"868","messageId":"869","endLine":105,"endColumn":70},{"ruleId":"870","severity":1,"message":"873","line":112,"column":17,"nodeType":"854","messageId":"872","endLine":112,"endColumn":18},{"ruleId":"866","severity":1,"message":"896","line":114,"column":74,"nodeType":"868","messageId":"869","endLine":114,"endColumn":76},{"ruleId":"866","severity":1,"message":"896","line":123,"column":28,"nodeType":"868","messageId":"869","endLine":123,"endColumn":30},{"ruleId":"866","severity":1,"message":"896","line":135,"column":29,"nodeType":"868","messageId":"869","endLine":135,"endColumn":31},{"ruleId":"866","severity":1,"message":"896","line":142,"column":28,"nodeType":"868","messageId":"869","endLine":142,"endColumn":30},{"ruleId":"866","severity":1,"message":"896","line":149,"column":26,"nodeType":"868","messageId":"869","endLine":149,"endColumn":28},{"ruleId":"866","severity":1,"message":"896","line":156,"column":31,"nodeType":"868","messageId":"869","endLine":156,"endColumn":33},{"ruleId":"866","severity":1,"message":"896","line":168,"column":26,"nodeType":"868","messageId":"869","endLine":168,"endColumn":28},{"ruleId":"866","severity":1,"message":"896","line":175,"column":28,"nodeType":"868","messageId":"869","endLine":175,"endColumn":30},{"ruleId":"866","severity":1,"message":"896","line":182,"column":25,"nodeType":"868","messageId":"869","endLine":182,"endColumn":27},{"ruleId":"866","severity":1,"message":"896","line":187,"column":30,"nodeType":"868","messageId":"869","endLine":187,"endColumn":32},{"ruleId":"866","severity":1,"message":"896","line":187,"column":56,"nodeType":"868","messageId":"869","endLine":187,"endColumn":58},{"ruleId":"866","severity":1,"message":"896","line":247,"column":34,"nodeType":"868","messageId":"869","endLine":247,"endColumn":36},{"ruleId":"852","severity":1,"message":"914","line":3,"column":40,"nodeType":"854","messageId":"855","endLine":3,"endColumn":50},{"ruleId":"852","severity":1,"message":"923","line":6,"column":10,"nodeType":"854","messageId":"855","endLine":6,"endColumn":23},{"ruleId":"852","severity":1,"message":"943","line":6,"column":25,"nodeType":"854","messageId":"855","endLine":6,"endColumn":31},{"ruleId":"852","severity":1,"message":"957","line":7,"column":8,"nodeType":"854","messageId":"855","endLine":7,"endColumn":13},{"ruleId":"852","severity":1,"message":"958","line":8,"column":10,"nodeType":"854","messageId":"855","endLine":8,"endColumn":18},{"ruleId":"852","severity":1,"message":"975","line":9,"column":8,"nodeType":"854","messageId":"855","endLine":9,"endColumn":14},{"ruleId":"852","severity":1,"message":"974","line":10,"column":8,"nodeType":"854","messageId":"855","endLine":10,"endColumn":16},{"ruleId":"852","severity":1,"message":"976","line":11,"column":8,"nodeType":"854","messageId":"855","endLine":11,"endColumn":19},{"ruleId":"852","severity":1,"message":"928","line":12,"column":10,"nodeType":"854","messageId":"855","endLine":12,"endColumn":15},{"ruleId":"852","severity":1,"message":"948","line":13,"column":8,"nodeType":"854","messageId":"855","endLine":13,"endColumn":13},{"ruleId":"852","severity":1,"message":"919","line":16,"column":8,"nodeType":"854","messageId":"855","endLine":16,"endColumn":28},{"ruleId":"852","severity":1,"message":"918","line":17,"column":8,"nodeType":"854","messageId":"855","endLine":17,"endColumn":22},{"ruleId":"852","severity":1,"message":"959","line":18,"column":8,"nodeType":"854","messageId":"855","endLine":18,"endColumn":18},{"ruleId":"852","severity":1,"message":"917","line":19,"column":8,"nodeType":"854","messageId":"855","endLine":19,"endColumn":22},{"ruleId":"852","severity":1,"message":"977","line":20,"column":10,"nodeType":"854","messageId":"855","endLine":20,"endColumn":26},{"ruleId":"852","severity":1,"message":"978","line":21,"column":8,"nodeType":"854","messageId":"855","endLine":21,"endColumn":18},{"ruleId":"852","severity":1,"message":"929","line":23,"column":5,"nodeType":"854","messageId":"855","endLine":23,"endColumn":17},{"ruleId":"852","severity":1,"message":"930","line":27,"column":5,"nodeType":"854","messageId":"855","endLine":27,"endColumn":12},{"ruleId":"852","severity":1,"message":"979","line":47,"column":7,"nodeType":"854","messageId":"855","endLine":47,"endColumn":22},{"ruleId":"866","severity":1,"message":"896","line":79,"column":41,"nodeType":"868","messageId":"869","endLine":79,"endColumn":43},{"ruleId":"866","severity":1,"message":"896","line":92,"column":50,"nodeType":"868","messageId":"869","endLine":92,"endColumn":52},{"ruleId":"852","severity":1,"message":"980","line":5,"column":9,"nodeType":"854","messageId":"855","endLine":5,"endColumn":19},{"ruleId":"866","severity":1,"message":"896","line":36,"column":25,"nodeType":"868","messageId":"869","endLine":36,"endColumn":27},{"ruleId":"852","severity":1,"message":"925","line":2,"column":28,"nodeType":"854","messageId":"855","endLine":2,"endColumn":35},{"ruleId":"852","severity":1,"message":"926","line":2,"column":54,"nodeType":"854","messageId":"855","endLine":2,"endColumn":57},{"ruleId":"852","severity":1,"message":"927","line":2,"column":59,"nodeType":"854","messageId":"855","endLine":2,"endColumn":70},{"ruleId":"852","severity":1,"message":"914","line":2,"column":80,"nodeType":"854","messageId":"855","endLine":2,"endColumn":90},{"ruleId":"866","severity":1,"message":"896","line":39,"column":68,"nodeType":"868","messageId":"869","endLine":39,"endColumn":70},{"ruleId":"866","severity":1,"message":"896","line":50,"column":28,"nodeType":"868","messageId":"869","endLine":50,"endColumn":30},{"ruleId":"866","severity":1,"message":"896","line":62,"column":29,"nodeType":"868","messageId":"869","endLine":62,"endColumn":31},{"ruleId":"866","severity":1,"message":"896","line":69,"column":28,"nodeType":"868","messageId":"869","endLine":69,"endColumn":30},{"ruleId":"866","severity":1,"message":"896","line":76,"column":26,"nodeType":"868","messageId":"869","endLine":76,"endColumn":28},{"ruleId":"866","severity":1,"message":"896","line":83,"column":31,"nodeType":"868","messageId":"869","endLine":83,"endColumn":33},{"ruleId":"866","severity":1,"message":"896","line":95,"column":26,"nodeType":"868","messageId":"869","endLine":95,"endColumn":28},{"ruleId":"866","severity":1,"message":"896","line":102,"column":28,"nodeType":"868","messageId":"869","endLine":102,"endColumn":30},{"ruleId":"866","severity":1,"message":"896","line":109,"column":25,"nodeType":"868","messageId":"869","endLine":109,"endColumn":27},{"ruleId":"866","severity":1,"message":"896","line":114,"column":30,"nodeType":"868","messageId":"869","endLine":114,"endColumn":32},{"ruleId":"866","severity":1,"message":"896","line":114,"column":56,"nodeType":"868","messageId":"869","endLine":114,"endColumn":58},{"ruleId":"866","severity":1,"message":"896","line":137,"column":35,"nodeType":"868","messageId":"869","endLine":137,"endColumn":37},{"ruleId":"866","severity":1,"message":"896","line":228,"column":127,"nodeType":"868","messageId":"869","endLine":228,"endColumn":129},{"ruleId":"852","severity":1,"message":"981","line":3,"column":10,"nodeType":"854","messageId":"855","endLine":3,"endColumn":24},{"ruleId":"852","severity":1,"message":"926","line":4,"column":10,"nodeType":"854","messageId":"855","endLine":4,"endColumn":13},{"ruleId":"852","severity":1,"message":"982","line":39,"column":5,"nodeType":"854","messageId":"855","endLine":39,"endColumn":10},{"ruleId":"852","severity":1,"message":"983","line":40,"column":5,"nodeType":"854","messageId":"855","endLine":40,"endColumn":12},{"ruleId":"852","severity":1,"message":"984","line":41,"column":5,"nodeType":"854","messageId":"855","endLine":41,"endColumn":13},{"ruleId":"852","severity":1,"message":"985","line":43,"column":5,"nodeType":"854","messageId":"855","endLine":43,"endColumn":16},{"ruleId":"852","severity":1,"message":"986","line":44,"column":5,"nodeType":"854","messageId":"855","endLine":44,"endColumn":18},{"ruleId":"852","severity":1,"message":"987","line":45,"column":5,"nodeType":"854","messageId":"855","endLine":45,"endColumn":21},{"ruleId":"866","severity":1,"message":"896","line":70,"column":21,"nodeType":"868","messageId":"869","endLine":70,"endColumn":23},{"ruleId":"860","severity":1,"message":"864","line":119,"column":35,"nodeType":"862","messageId":"865","endLine":119,"endColumn":37},{"ruleId":"860","severity":1,"message":"864","line":31,"column":43,"nodeType":"862","messageId":"865","endLine":31,"endColumn":45},{"ruleId":"860","severity":1,"message":"864","line":39,"column":43,"nodeType":"862","messageId":"865","endLine":39,"endColumn":45},{"ruleId":"860","severity":1,"message":"864","line":50,"column":43,"nodeType":"862","messageId":"865","endLine":50,"endColumn":45},{"ruleId":"852","severity":1,"message":"988","line":15,"column":8,"nodeType":"854","messageId":"855","endLine":15,"endColumn":22},{"ruleId":"852","severity":1,"message":"989","line":18,"column":10,"nodeType":"854","messageId":"855","endLine":18,"endColumn":21},{"ruleId":"852","severity":1,"message":"948","line":19,"column":8,"nodeType":"854","messageId":"855","endLine":19,"endColumn":13},{"ruleId":"866","severity":1,"message":"896","line":158,"column":52,"nodeType":"868","messageId":"869","endLine":158,"endColumn":54},{"ruleId":"893","severity":1,"message":"894","line":159,"column":109,"nodeType":"895","endLine":159,"endColumn":192},{"ruleId":"866","severity":1,"message":"896","line":45,"column":44,"nodeType":"868","messageId":"869","endLine":45,"endColumn":46},{"ruleId":"866","severity":1,"message":"896","line":164,"column":33,"nodeType":"868","messageId":"869","endLine":164,"endColumn":35},{"ruleId":"866","severity":1,"message":"896","line":165,"column":33,"nodeType":"868","messageId":"869","endLine":165,"endColumn":35},{"ruleId":"866","severity":1,"message":"896","line":178,"column":33,"nodeType":"868","messageId":"869","endLine":178,"endColumn":35},{"ruleId":"866","severity":1,"message":"896","line":179,"column":36,"nodeType":"868","messageId":"869","endLine":179,"endColumn":38},{"ruleId":"866","severity":1,"message":"896","line":180,"column":63,"nodeType":"868","messageId":"869","endLine":180,"endColumn":65},{"ruleId":"866","severity":1,"message":"896","line":226,"column":40,"nodeType":"868","messageId":"869","endLine":226,"endColumn":42},{"ruleId":"866","severity":1,"message":"896","line":226,"column":97,"nodeType":"868","messageId":"869","endLine":226,"endColumn":99},"no-unused-vars","'FiChevronRight' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-redeclare","'newState' is already defined.","redeclared","'i' is already defined.","'emailjs' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["990","991"],["992","993"],["994","995"],["996","997"],["998","999"],["1000","1001"],"no-dupe-keys","Duplicate key 'updateShiftTypes'.","ObjectExpression","'FiXSquare' is defined but never used.","'Alert' is defined but never used.","'statusConfirmPassword' is assigned a value but never used.","'b' is assigned a value but never used.","'navbarContainer' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Expected '===' and instead saw '=='.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Page' is defined but never used.","'Label' is defined but never used.","'Scrollbar' is defined but never used.","'SearchNotFound' is defined but never used.","'sentenceCase' is defined but never used.","'Avatar' is defined but never used.","'TablePagination' is defined but never used.","'EmployeeToolbar' is defined but never used.","'EmployeeObj' is defined but never used.","'filterName' is assigned a value but never used.","'filteredUsers' is assigned a value but never used.","'page' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","'DataGrid' is defined but never used.","'InputLabel' is defined but never used.","'Modal' is defined but never used.","'GoodImage' is defined but never used.","'DateTimePicker' is defined but never used.","'AdapterDateFns' is defined but never used.","'LocalizationProvider' is defined but never used.","'GiConsoleController' is defined but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","'BiPlusMedical' is defined but never used.","'AddTypeModal' is defined but never used.","'Divider' is defined but never used.","'Box' is defined but never used.","'CardContent' is defined but never used.","'Image' is defined but never used.","'productTypes' is assigned a value but never used.","'typeSet' is assigned a value but never used.","'useState' is defined but never used.","'search' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["1002"],["1003"],"'fromHour' is already defined.","'fromMin' is already defined.","'toHour' is already defined.","'toMin' is already defined.","'FaCommentsDollar' is defined but never used.","'BiEdit' is defined but never used.","'GiVampireCape' is defined but never used.","'Grid' is defined but never used.","React Hook React.useEffect has missing dependencies: 'dispatch' and 'listMAHD'. Either include them or remove the dependency array.",["1004"],"'axios' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'Stack' is defined but never used.","'GiCancel' is defined but never used.","'DatePicker' is defined but never used.","React Hook React.useCallback has a missing dependency: 'inputProps'. Either include it or remove the dependency array.",["1005"],["1006"],["1007"],["1008"],"'listProductInfor' is assigned a value but never used.","'joinTypeInfor' is assigned a value but never used.","'AiOutlineEdit' is defined but never used.","'AiFillDelete' is defined but never used.","'data' is assigned a value but never used.","'listUsers' is assigned a value but never used.","'Icon' is defined but never used.","'moreVerticalFill' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'Select' is defined but never used.","'FormControl' is defined but never used.","'AiFillPlusCircle' is defined but never used.","'CancelIcon' is defined but never used.","'StyledTextField' is assigned a value but never used.","'GiPayMoney' is defined but never used.","'visuallyHidden' is defined but never used.","'order' is assigned a value but never used.","'orderBy' is assigned a value but never used.","'rowCount' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'onRequestSort' is assigned a value but never used.","'onSelectAllClick' is assigned a value but never used.","'TableContainer' is defined but never used.","'useDispatch' is defined but never used.",{"messageId":"1009","fix":"1010","desc":"1011"},{"messageId":"1012","fix":"1013","desc":"1014"},{"messageId":"1009","fix":"1015","desc":"1011"},{"messageId":"1012","fix":"1016","desc":"1014"},{"messageId":"1009","fix":"1017","desc":"1011"},{"messageId":"1012","fix":"1018","desc":"1014"},{"messageId":"1009","fix":"1019","desc":"1011"},{"messageId":"1012","fix":"1020","desc":"1014"},{"messageId":"1009","fix":"1021","desc":"1011"},{"messageId":"1012","fix":"1022","desc":"1014"},{"messageId":"1009","fix":"1023","desc":"1011"},{"messageId":"1012","fix":"1024","desc":"1014"},{"desc":"1025","fix":"1026"},{"desc":"1025","fix":"1027"},{"desc":"1028","fix":"1029"},{"desc":"1030","fix":"1031"},{"desc":"1030","fix":"1032"},{"desc":"1030","fix":"1033"},{"desc":"1034","fix":"1035"},"removeEscape",{"range":"1036","text":"1037"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1038","text":"1039"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1040","text":"1037"},{"range":"1041","text":"1039"},{"range":"1042","text":"1037"},{"range":"1043","text":"1039"},{"range":"1044","text":"1037"},{"range":"1045","text":"1039"},{"range":"1046","text":"1037"},{"range":"1047","text":"1039"},{"range":"1048","text":"1037"},{"range":"1049","text":"1039"},"Update the dependencies array to be: [dispatch]",{"range":"1050","text":"1051"},{"range":"1052","text":"1051"},"Update the dependencies array to be: [typeReciept, typeByDate, listReciept, statusSelectAll, search, dispatch, listMAHD]",{"range":"1053","text":"1054"},"Update the dependencies array to be: [inputProps]",{"range":"1055","text":"1056"},{"range":"1057","text":"1056"},{"range":"1058","text":"1056"},"Update the dependencies array to be: [cancelOnEscape, inputProps, handleRequestSearch, handleCancel]",{"range":"1059","text":"1060"},[3188,3189],"",[3188,3188],"\\",[3204,3205],[3204,3204],[3643,3644],[3643,3643],[3659,3660],[3659,3659],[4210,4211],[4210,4210],[4226,4227],[4226,4226],[366,368],"[dispatch]",[5640,5642],[25109,25172],"[typeReciept, typeByDate, listReciept, statusSelectAll, search, dispatch, listMAHD]",[1989,2009],"[inputProps]",[2200,2219],[2427,2448],[3164,3235],"[cancelOnEscape, inputProps, handleRequestSearch, handleCancel]"]