[{"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\index.js":"1","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\App.js":"2","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Store.js":"3","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeStatusReducer.js":"4","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\DistrictReducer.js":"5","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\LoginStatusReducer.js":"6","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ProvinceReducer.js":"7","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListShiftReducer.js":"8","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RoleReducer.js":"9","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ConfirmModalReducer.js":"10","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUserReducer.js":"11","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ObjectEditShiftReducer.js":"12","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeProductValueReducer.js":"13","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUpdateProduct.js":"14","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\chooseTypeProduct.js":"15","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\AlertReducer.js":"16","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditShiftReducer.js":"17","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DirectionURL.js":"18","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDarkModeReducer.js":"19","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddShiftReducer.js":"20","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusConfirmReducer.js":"21","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDeleteConfirmReducer.js":"22","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusModalConfirmPassword.js":"23","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusPayMoneyStatus.js":"24","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditTypeReducer.js":"25","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddTypeReducer.js":"26","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateEmployeeReducer.js":"27","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateGoodReducer.js":"28","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddEmployeeReducer.js":"29","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusYesConfirmReducer.js":"30","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\ShoppingBagsReducer.js":"31","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\employeeListReducer.js":"32","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\nextWeekTimeKeepingReducer.js":"33","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\ListRecieptReducer.js":"34","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\StatusShowHistoryRecieptReducer.js":"35","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\StatusEditInfomationBill.js":"36","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\InfomationBillEdit.js":"37","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\addNextWeekTimeKeepingStatus.js":"38","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\currentEditEmployeeReducer.js":"39","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\addTimeKeepingStatus.js":"40","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\updateNextWeekTimeKeepingValue.js":"41","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\updateNextWeekTimeKeepingStatus.js":"42","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\updateTimeKeeperValue.js":"43","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\listShiftAssignReducer.js":"44","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\updateTimeKeepingStatus.js":"45","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\StatusSelectAll.js":"46","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\ListRecieptDelete.js":"47","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\SearchReducer.js":"48","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\TypeReciept.js":"49","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\TypeByDate.js":"50","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Dashboard\\TypeTimeDashboard.js":"51","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Dashboard\\YearSelectReducer.js":"52","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Dashboard\\MonthSelectReducer.js":"53","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Profile\\StatusModalAddCoupon.js":"54","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Profile\\ListCoupon.js":"55","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Profile\\ObjectEditCoupon.js":"56","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Profile\\StatusEditCoupon.js":"57","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Dashboard\\TypeHeaderDashboard.js":"58","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\typeProductReducer.js":"59","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListProductReducer.js":"60","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\GoodManager\\UpdateTypeStatus.js":"61","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\GoodManager\\AddGoodStatus.js":"62","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\employeeSackedListReducer.js":"63","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\listTimeKeepingReducer.js":"64","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\currentEmployeeViewValue.js":"65","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Body.js":"66","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Register.js":"67","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\LoginWithEmployee.js":"68","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\ForgotPassword.js":"69","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Login.js":"70","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\ModalConfirmPassword.js":"71","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Partials\\SideNavBar.js":"72","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DashboardURL.js":"73","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Profile.js":"74","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\ReiceiptManager.js":"75","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodManager.js":"76","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeeManager.js":"77","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\DashBoard.js":"78","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\SellProduct.js":"79","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\HistoryReciept.js":"80","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ShoppingBags.js":"81","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateTimeKeepingModal.js":"82","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Print.js":"83","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\TableReciept.js":"84","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ComponentToPrint.js":"85","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\CouponManager.js":"86","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\ErrorReceipt.js":"87","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Tabs.js":"88","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\SalaryStats.js":"89","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\ProductStatis.js":"90","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\DaiLyMoneyTracking.js":"91","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\Statistic.js":"92","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddTimeKeeperModal.js":"93","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\NoJobEmployee.js":"94","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\TotalMoney.js":"95","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButtonDashboard.js":"96","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateNextWeekTimeKeeping.js":"97","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddNextWeekTimeKeeping.js":"98","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\fakeData.js":"99","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeTableHeader.js":"100","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeToolbar.js":"101","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\SearchNotFound.js":"102","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Scrollbar.js":"103","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\TimekeepingTable.js":"104","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\FixedCalendar.js":"105","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UnShiftEmployee.js":"106","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\PayMoneyModal.js":"107","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Label.js":"108","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Page.js":"109","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeMoreMenu.js":"110","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\SackedEmployeeMenu.js":"111","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateEmployeeModal.js":"112","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddEmployeeModal.js":"113","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\ConfirmModal.js":"114","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\SearchBar.js":"115","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\SearchReceipt.js":"116","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\EditTypeModal.js":"117","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\UpdateGoodModal.js":"118","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\AddGoodModal.js":"119","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\UpdateTypeModal.js":"120","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\ControlReciept.js":"121","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\StatusReceiptType.js":"122","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\DateReciept.js":"123","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\TableReciept.js":"124","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ModalAddCoupon.js":"125","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\AddTypeModal.js":"126","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileCoupon.js":"127","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ModalAdd.js":"128","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileSetting.js":"129","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ListShift.js":"130","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodTable.js":"131","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ChangePassword.js":"132","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileDetail.js":"133","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileHeader.js":"134","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Regulation.js":"135","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\OptionMonth.js":"136","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\OptionYear.js":"137","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\BaseOptionChart.js":"138","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButton.js":"139","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\FixedCalendarCell.js":"140","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\DarkMode.js":"141","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\TableRow.js":"142","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\ComponentToPrint.js":"143"},{"size":307,"mtime":1638277609911,"results":"144","hashOfConfig":"145"},{"size":5545,"mtime":1638364871277,"results":"146","hashOfConfig":"145"},{"size":7305,"mtime":1638364871307,"results":"147","hashOfConfig":"145"},{"size":343,"mtime":1634653035200,"results":"148","hashOfConfig":"145"},{"size":376,"mtime":1634661219450,"results":"149","hashOfConfig":"145"},{"size":295,"mtime":1634653035195,"results":"150","hashOfConfig":"145"},{"size":384,"mtime":1634653035196,"results":"151","hashOfConfig":"145"},{"size":1166,"mtime":1637933212521,"results":"152","hashOfConfig":"145"},{"size":316,"mtime":1634653035196,"results":"153","hashOfConfig":"145"},{"size":482,"mtime":1634653035193,"results":"154","hashOfConfig":"145"},{"size":3180,"mtime":1637150093400,"results":"155","hashOfConfig":"145"},{"size":340,"mtime":1634653035196,"results":"156","hashOfConfig":"145"},{"size":668,"mtime":1635260224145,"results":"157","hashOfConfig":"145"},{"size":558,"mtime":1637075276217,"results":"158","hashOfConfig":"145"},{"size":360,"mtime":1635428539250,"results":"159","hashOfConfig":"145"},{"size":670,"mtime":1635349470393,"results":"160","hashOfConfig":"145"},{"size":312,"mtime":1634653035198,"results":"161","hashOfConfig":"145"},{"size":2219,"mtime":1634653035202,"results":"162","hashOfConfig":"145"},{"size":302,"mtime":1634653035197,"results":"163","hashOfConfig":"145"},{"size":303,"mtime":1634653035196,"results":"164","hashOfConfig":"145"},{"size":303,"mtime":1634653035197,"results":"165","hashOfConfig":"145"},{"size":390,"mtime":1634653035198,"results":"166","hashOfConfig":"145"},{"size":370,"mtime":1634653035199,"results":"167","hashOfConfig":"145"},{"size":324,"mtime":1634653035199,"results":"168","hashOfConfig":"145"},{"size":309,"mtime":1634653035198,"results":"169","hashOfConfig":"145"},{"size":304,"mtime":1634653035197,"results":"170","hashOfConfig":"145"},{"size":339,"mtime":1634653035199,"results":"171","hashOfConfig":"145"},{"size":323,"mtime":1635428539248,"results":"172","hashOfConfig":"145"},{"size":324,"mtime":1634653035196,"results":"173","hashOfConfig":"145"},{"size":350,"mtime":1634653035200,"results":"174","hashOfConfig":"145"},{"size":1333,"mtime":1636811971103,"results":"175","hashOfConfig":"145"},{"size":2587,"mtime":1637075276212,"results":"176","hashOfConfig":"145"},{"size":2316,"mtime":1637075276214,"results":"177","hashOfConfig":"145"},{"size":3334,"mtime":1638017463983,"results":"178","hashOfConfig":"145"},{"size":341,"mtime":1636018498899,"results":"179","hashOfConfig":"145"},{"size":341,"mtime":1636272406917,"results":"180","hashOfConfig":"145"},{"size":357,"mtime":1636272916157,"results":"181","hashOfConfig":"145"},{"size":380,"mtime":1637075276210,"results":"182","hashOfConfig":"145"},{"size":901,"mtime":1636472317541,"results":"183","hashOfConfig":"145"},{"size":339,"mtime":1637075276211,"results":"184","hashOfConfig":"145"},{"size":996,"mtime":1637075276215,"results":"185","hashOfConfig":"145"},{"size":395,"mtime":1637075276215,"results":"186","hashOfConfig":"145"},{"size":921,"mtime":1637075276216,"results":"187","hashOfConfig":"145"},{"size":2361,"mtime":1637075276213,"results":"188","hashOfConfig":"145"},{"size":354,"mtime":1637075276216,"results":"189","hashOfConfig":"145"},{"size":382,"mtime":1637048575528,"results":"190","hashOfConfig":"145"},{"size":629,"mtime":1636694738193,"results":"191","hashOfConfig":"145"},{"size":372,"mtime":1636795594837,"results":"192","hashOfConfig":"145"},{"size":541,"mtime":1636615262019,"results":"193","hashOfConfig":"145"},{"size":340,"mtime":1636611050856,"results":"194","hashOfConfig":"145"},{"size":425,"mtime":1637681541930,"results":"195","hashOfConfig":"145"},{"size":498,"mtime":1637680694709,"results":"196","hashOfConfig":"145"},{"size":429,"mtime":1637682175616,"results":"197","hashOfConfig":"145"},{"size":334,"mtime":1637933418678,"results":"198","hashOfConfig":"145"},{"size":1316,"mtime":1638335591018,"results":"199","hashOfConfig":"145"},{"size":327,"mtime":1637940261231,"results":"200","hashOfConfig":"145"},{"size":387,"mtime":1637941244837,"results":"201","hashOfConfig":"145"},{"size":433,"mtime":1637654129162,"results":"202","hashOfConfig":"145"},{"size":1623,"mtime":1638364871308,"results":"203","hashOfConfig":"145"},{"size":2684,"mtime":1638364871306,"results":"204","hashOfConfig":"145"},{"size":323,"mtime":1638364871305,"results":"205","hashOfConfig":"145"},{"size":308,"mtime":1638364871304,"results":"206","hashOfConfig":"145"},{"size":2407,"mtime":1638364871303,"results":"207","hashOfConfig":"145"},{"size":3000,"mtime":1638364871304,"results":"208","hashOfConfig":"145"},{"size":397,"mtime":1638364871302,"results":"209","hashOfConfig":"145"},{"size":1613,"mtime":1637241667533,"results":"210","hashOfConfig":"145"},{"size":15584,"mtime":1637652811159,"results":"211","hashOfConfig":"145"},{"size":8950,"mtime":1637652820348,"results":"212","hashOfConfig":"145"},{"size":12897,"mtime":1637652831849,"results":"213","hashOfConfig":"145"},{"size":14883,"mtime":1638364871298,"results":"214","hashOfConfig":"145"},{"size":1956,"mtime":1634653035172,"results":"215","hashOfConfig":"145"},{"size":12168,"mtime":1637239780710,"results":"216","hashOfConfig":"145"},{"size":1572,"mtime":1638364871309,"results":"217","hashOfConfig":"145"},{"size":5155,"mtime":1637940035994,"results":"218","hashOfConfig":"145"},{"size":2070,"mtime":1637326283272,"results":"219","hashOfConfig":"145"},{"size":12813,"mtime":1638364871289,"results":"220","hashOfConfig":"145"},{"size":28406,"mtime":1638364871282,"results":"221","hashOfConfig":"145"},{"size":3776,"mtime":1638451923768,"results":"222","hashOfConfig":"145"},{"size":16317,"mtime":1638364871301,"results":"223","hashOfConfig":"145"},{"size":1162,"mtime":1636640740329,"results":"224","hashOfConfig":"145"},{"size":3648,"mtime":1637212737043,"results":"225","hashOfConfig":"145"},{"size":18605,"mtime":1637075276205,"results":"226","hashOfConfig":"145"},{"size":13702,"mtime":1638369335157,"results":"227","hashOfConfig":"145"},{"size":18534,"mtime":1638371458631,"results":"228","hashOfConfig":"145"},{"size":6914,"mtime":1637945921824,"results":"229","hashOfConfig":"145"},{"size":11382,"mtime":1638369547173,"results":"230","hashOfConfig":"145"},{"size":3272,"mtime":1637674772592,"results":"231","hashOfConfig":"145"},{"size":1341,"mtime":1638364871301,"results":"232","hashOfConfig":"145"},{"size":5605,"mtime":1638364871280,"results":"233","hashOfConfig":"145"},{"size":8269,"mtime":1638364871279,"results":"234","hashOfConfig":"145"},{"size":6262,"mtime":1638368770745,"results":"235","hashOfConfig":"145"},{"size":18629,"mtime":1638448521526,"results":"236","hashOfConfig":"145"},{"size":16319,"mtime":1637075276198,"results":"237","hashOfConfig":"145"},{"size":4224,"mtime":1637075276201,"results":"238","hashOfConfig":"145"},{"size":3677,"mtime":1638364871281,"results":"239","hashOfConfig":"145"},{"size":3912,"mtime":1638364871279,"results":"240","hashOfConfig":"145"},{"size":20024,"mtime":1637075276204,"results":"241","hashOfConfig":"145"},{"size":20141,"mtime":1637075276197,"results":"242","hashOfConfig":"145"},{"size":698,"mtime":1636472317531,"results":"243","hashOfConfig":"145"},{"size":2923,"mtime":1636602355360,"results":"244","hashOfConfig":"145"},{"size":2489,"mtime":1634653035159,"results":"245","hashOfConfig":"145"},{"size":0,"mtime":1634653035161,"results":"246","hashOfConfig":"145"},{"size":1541,"mtime":1634653035161,"results":"247","hashOfConfig":"145"},{"size":9244,"mtime":1638364871287,"results":"248","hashOfConfig":"145"},{"size":5050,"mtime":1638364871284,"results":"249","hashOfConfig":"145"},{"size":11468,"mtime":1638364871288,"results":"250","hashOfConfig":"145"},{"size":12310,"mtime":1638364871285,"results":"251","hashOfConfig":"145"},{"size":2458,"mtime":1634653035160,"results":"252","hashOfConfig":"145"},{"size":482,"mtime":1634653035160,"results":"253","hashOfConfig":"145"},{"size":6325,"mtime":1638364871283,"results":"254","hashOfConfig":"145"},{"size":5341,"mtime":1638364871286,"results":"255","hashOfConfig":"145"},{"size":22703,"mtime":1638364871289,"results":"256","hashOfConfig":"145"},{"size":23014,"mtime":1638364871283,"results":"257","hashOfConfig":"145"},{"size":3507,"mtime":1634653035163,"results":"258","hashOfConfig":"145"},{"size":5541,"mtime":1634653035165,"results":"259","hashOfConfig":"145"},{"size":907,"mtime":1638371011796,"results":"260","hashOfConfig":"145"},{"size":6804,"mtime":1638364871293,"results":"261","hashOfConfig":"145"},{"size":35024,"mtime":1638364871296,"results":"262","hashOfConfig":"145"},{"size":32244,"mtime":1638364871291,"results":"263","hashOfConfig":"145"},{"size":11705,"mtime":1638364871297,"results":"264","hashOfConfig":"145"},{"size":12643,"mtime":1637069218116,"results":"265","hashOfConfig":"145"},{"size":4121,"mtime":1638370971200,"results":"266","hashOfConfig":"145"},{"size":9089,"mtime":1638370934840,"results":"267","hashOfConfig":"145"},{"size":28511,"mtime":1638371295028,"results":"268","hashOfConfig":"145"},{"size":12388,"mtime":1638336520055,"results":"269","hashOfConfig":"145"},{"size":6907,"mtime":1638364871292,"results":"270","hashOfConfig":"145"},{"size":6276,"mtime":1638369790065,"results":"271","hashOfConfig":"145"},{"size":14683,"mtime":1637652783500,"results":"272","hashOfConfig":"145"},{"size":1157,"mtime":1636638477062,"results":"273","hashOfConfig":"145"},{"size":7821,"mtime":1638369819051,"results":"274","hashOfConfig":"145"},{"size":4123,"mtime":1638364871294,"results":"275","hashOfConfig":"145"},{"size":9836,"mtime":1637652793570,"results":"276","hashOfConfig":"145"},{"size":20228,"mtime":1637652771658,"results":"277","hashOfConfig":"145"},{"size":4445,"mtime":1637652754872,"results":"278","hashOfConfig":"145"},{"size":10814,"mtime":1638364871299,"results":"279","hashOfConfig":"145"},{"size":4476,"mtime":1637682029536,"results":"280","hashOfConfig":"145"},{"size":3250,"mtime":1637681464441,"results":"281","hashOfConfig":"145"},{"size":5647,"mtime":1637248290597,"results":"282","hashOfConfig":"145"},{"size":3095,"mtime":1637685312104,"results":"283","hashOfConfig":"145"},{"size":10113,"mtime":1638364871285,"results":"284","hashOfConfig":"145"},{"size":3134,"mtime":1634653035174,"results":"285","hashOfConfig":"145"},{"size":12104,"mtime":1638364871295,"results":"286","hashOfConfig":"145"},{"size":399,"mtime":1638449043774,"results":"287","hashOfConfig":"145"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},"1ieljoc",{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293","usedDeprecatedRules":"290"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"352","usedDeprecatedRules":"290"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"290"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"358","usedDeprecatedRules":"290"},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"290"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"290"},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"290"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"290"},{"filePath":"417","messages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"290"},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"426","usedDeprecatedRules":"290"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"431","messages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"433","usedDeprecatedRules":"290"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"436","usedDeprecatedRules":"290"},{"filePath":"437","messages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"439","usedDeprecatedRules":"290"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"290"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"290"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"290"},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"451","messages":"452","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"453","messages":"454","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"455","messages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"457","usedDeprecatedRules":"290"},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460","usedDeprecatedRules":"290"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"465","usedDeprecatedRules":"290"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"468","usedDeprecatedRules":"290"},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"473","usedDeprecatedRules":"290"},{"filePath":"474","messages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"290"},{"filePath":"477","messages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"479","usedDeprecatedRules":"290"},{"filePath":"480","messages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"290"},{"filePath":"483","messages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"290"},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"290"},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"493","usedDeprecatedRules":"290"},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496","usedDeprecatedRules":"290"},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499","usedDeprecatedRules":"290"},{"filePath":"500","messages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":87,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"504","usedDeprecatedRules":"290"},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"507","usedDeprecatedRules":"290"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"510","usedDeprecatedRules":"290"},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"290"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"290"},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"290"},{"filePath":"520","messages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"522","messages":"523","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524","usedDeprecatedRules":"290"},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533","usedDeprecatedRules":"290"},{"filePath":"534","messages":"535","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"536","usedDeprecatedRules":"290"},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"539","usedDeprecatedRules":"290"},{"filePath":"540","messages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542","usedDeprecatedRules":"290"},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"290"},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"290"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"555","usedDeprecatedRules":"290"},{"filePath":"556","messages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"558","usedDeprecatedRules":"290"},{"filePath":"559","messages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"561","usedDeprecatedRules":"290"},{"filePath":"562","messages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"564","usedDeprecatedRules":"290"},{"filePath":"565","messages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"567","usedDeprecatedRules":"290"},{"filePath":"568","messages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"290"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"290"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"290"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"579","usedDeprecatedRules":"290"},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"584","messages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"586","usedDeprecatedRules":"290"},{"filePath":"587","messages":"588","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"589","usedDeprecatedRules":"290"},{"filePath":"590","messages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"592","usedDeprecatedRules":"290"},{"filePath":"593","messages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"595","usedDeprecatedRules":"290"},{"filePath":"596","messages":"597","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"598","usedDeprecatedRules":"290"},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"601","usedDeprecatedRules":"290"},{"filePath":"602","messages":"603","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"604","messages":"605","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"606","messages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608","usedDeprecatedRules":"290"},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"611","usedDeprecatedRules":"290"},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"614","messages":"615","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"616","messages":"617","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"618","usedDeprecatedRules":"290"},{"filePath":"619","messages":"620","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621","usedDeprecatedRules":"290"},{"filePath":"622","messages":"623","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624","usedDeprecatedRules":"290"},{"filePath":"625","messages":"626","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"627","messages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"629","usedDeprecatedRules":"290"},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"632","usedDeprecatedRules":"290"},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"290"},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"290"},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\index.js",[],["640","641"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\App.js",["642","643","644"],"import React, { Component } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n} from \"react-router-dom\";\r\nimport DirectionURL from './Router/DirectionURL';\r\nimport './css/App.css'\r\nimport { connect } from 'react-redux'\r\nimport axios from 'axios';\r\nimport Alert from '@mui/material/Alert';\r\nimport { FiChevronRight, FiXSquare } from \"react-icons/fi\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  loadAllGood(dataProduct, dataJoin) {\r\n    var resultProduct = dataProduct;\r\n    var joinTypeInfor = dataJoin;\r\n \r\n    var listProductInfor = [];\r\n    for (let i = 0; i < resultProduct.length; i++) {\r\n        var typeIDList = [];\r\n        var joinType = '';\r\n        for (var j = 0; j < joinTypeInfor.length; j++) {\r\n            if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\r\n                resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) \r\n            {\r\n                typeIDList.push(joinTypeInfor[j]._id.typeID);\r\n            }\r\n        }\r\n\r\n        listProductInfor.push(\r\n            {\r\n                ...resultProduct[i],\r\n                typeIDList: typeIDList,\r\n            });\r\n    }\r\n    this.props.getProductToReducer(listProductInfor);\r\n  }\r\n\r\n  async componentWillMount() {\r\n    if (localStorage.getItem('token') && localStorage.getItem('token') !== \"\") {\r\n      axios.post(`http://localhost:5000/refresh`, {\r\n        token: localStorage.getItem('token'),\r\n      })\r\n        .then(res => {\r\n          if (res.status === 200) {\r\n            if (res.data.data.isEmployee === false) {\r\n              this.props.setRole()\r\n              localStorage.setItem('token', res.data.token);\r\n              this.props.updateProfile(res.data.data);\r\n              this.props.updateRecieptUser(res.data.data.receipts)\r\n              this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n              this.props.updateShiftTypes(res.data.data.shiftTypes)\r\n              this.props.changeLoginStatus();\r\n              this.props.getEmployee(res.data.data.employees);\r\n              // Phi\r\n              this.props.getTimeKeeping(res.data.data.timeKeeping);\r\n              this.loadAllGood(res.data.data.products, res.data.data.productJoinTypes);\r\n            } else {\r\n              this.props.setRoleEmployee()\r\n              localStorage.setItem('token', res.data.token);\r\n              this.props.updateProfileEployee(res.data.data.employee[0], res.data.data.manager[0], res.data.data.store[0].storeName);\r\n              this.props.updateAvatar(res.data.data.employee[0].imgUrl ? res.data.data.employee[0].imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n              this.props.updateRecieptUser(res.data.data.receipts);\r\n              this.props.changeLoginStatus();\r\n              this.props.showAlert(res.data.message, \"success\");\r\n            }\r\n\r\n          }\r\n        })\r\n        .catch(err => {\r\n        })\r\n    }\r\n  }\r\n\r\n  autoHideAlert = () => {\r\n    setTimeout(() => this.props.hideAlert(), 4000);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <DirectionURL></DirectionURL>\r\n        {this.props.alertReducer.status ? this.autoHideAlert() : null}\r\n        {this.props.alertReducer.status ? <Alert style={{ cursor: 'pointer' }} onClick={() => this.props.hideAlert()} className=\"message-error\" severity={this.props.alertReducer.typeMessage}>{this.props.alertReducer.message} — check it out! <FiXSquare></FiXSquare></Alert> : null}\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    isLogin: state.loginStatus,\r\n    alertReducer: state.alert,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    changeLoginStatus: () => {\r\n      dispatch({\r\n        type: \"CHANGE_LOGIN_STATUS\",\r\n      });\r\n    },\r\n    updateProvince: (data) => {\r\n      dispatch({\r\n        type: \"UPDATE_DATA\",\r\n        data: data,\r\n      })\r\n    },\r\n    updateRecieptUser: (data) => {\r\n      dispatch({\r\n        type: \"UPDATE_RECIEPT_USER\",\r\n        listReciept: data,\r\n      })\r\n    },\r\n    updateProfile: (data) => {\r\n      dispatch({\r\n        type: \"UPDATA_DATA_USER\",\r\n        data: data,\r\n      })\r\n    },\r\n    updateAvatar: (avatar) => {\r\n      dispatch({\r\n        type: \"UPDATE_AVATAR\",\r\n        avatar: avatar,\r\n      })\r\n    },\r\n    updateShiftTypes: (shiftTypes) => {\r\n      dispatch({\r\n        type: \"UPDATE_DATA_SHIFT_USER\",\r\n        shiftTypes: shiftTypes,\r\n      })\r\n    },\r\n    hideAlert: () => {\r\n      dispatch({\r\n        type: \"HIDE_ALERT\",\r\n      })\r\n    },\r\n    getEmployee: (data) => {\r\n      dispatch({\r\n        type: \"GET_EMPLOYEE\",\r\n        employees: data,\r\n      });\r\n    },\r\n    setRole: () => {\r\n      dispatch({\r\n        type: \"ADMIN_ROLE\"\r\n      });\r\n    },\r\n    updateProfileEployee: (data, data1, storeName) => {\r\n      dispatch({\r\n        type: \"UPDATA_DATA_EMPLOYEE\",\r\n        data: data,\r\n        data1: data1,\r\n        storeName: storeName,\r\n      })\r\n    },\r\n    setRoleEmployee: () => {\r\n      dispatch({\r\n        type: \"EMPLOYEE_ROLE\",\r\n      });\r\n    },\r\n    getTimeKeeping: (data) => {\r\n      dispatch({\r\n        type: \"GET_TIMEKEEPER\",\r\n        data: data\r\n      });  \r\n    },\r\n    getProductToReducer: (data) => {\r\n      dispatch({\r\n          type: \"GET_PRODUCT_AND_TYPE\",\r\n          data: data\r\n      });\r\n  },\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Store.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeStatusReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\DistrictReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\LoginStatusReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ProvinceReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RoleReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ConfirmModalReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUserReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ObjectEditShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeProductValueReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUpdateProduct.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\chooseTypeProduct.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\AlertReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DirectionURL.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDarkModeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusConfirmReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDeleteConfirmReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusModalConfirmPassword.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusPayMoneyStatus.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditTypeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddTypeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateEmployeeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateGoodReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddEmployeeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusYesConfirmReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\ShoppingBagsReducer.js",["645"],"const shoppingBagsInitialState = [],\r\n    shoppingBagsReducer = (state = shoppingBagsInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"ADD_NEW_PRODUCT_SHOPPING_BAGS\": \r\n                return [...state, action.newProduct];\r\n            case \"RAISE_QUANTITY_SHOPPING_BAGS\":\r\n                return state.map(value => {\r\n                    if (value.product.name === action.name) {\r\n                        value.quantity += 1;\r\n                    }\r\n                    return value\r\n                })\r\n            case \"REDUCE_QUANTITY_SHOPPING_BAGS\":\r\n                return state.map(value => {\r\n                    if (value.product.name === action.name) {\r\n                        value.quantity -= 1;\r\n                    }\r\n                    return value\r\n                })\r\n            case \"DELETE_PRODUCT_SHOPPING_BAGS\":\r\n                return state.filter((value) => {\r\n                    if (value.product.name !== action.name) {\r\n                        return value;\r\n                    } \r\n                })\r\n            case \"RESET_SHOPPING_BAGS\":\r\n                return state = [];\r\n            case \"INFO_SHOPPING_BAGS_EDIT\":\r\n                return action.listProduct\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default shoppingBagsReducer;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\employeeListReducer.js",["646","647","648"],"const listEmployeeInitialState = {\r\n    employees: [\r\n        // {\r\n        //     _id: { \r\n        //         employeeID: '3', \r\n        //         storeID: '19522006@gm.uit.edu.vn' \r\n        //     },\r\n        //     managerID: '19522006@gm.uit.edu.vn',\r\n        //     password: '1212',\r\n        //     firstName: '1212',\r\n        //     lastName: '1212',\r\n        //     phoneNumber: '1212',\r\n        //     dateOfBirth: \"2021-11-20T00:00:00.000Z\",\r\n        //     email: '12121',\r\n        //     address: '1212',\r\n        //     cardID: '1212',\r\n        //     startDate: \"2021-11-26T00:00:00.000Z\",\r\n        //     deleted: false,\r\n        //     __v: 0\r\n        // },\r\n    ]\r\n}\r\n\r\nconst  listEmployeeReducer = (state = listEmployeeInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"GET_EMPLOYEE\":\r\n                state.employees = action.employees;\r\n                return state;\r\n            case \"ADD_EMPLOYEE\":\r\n                return {\r\n                    employees : [...state.employees, action.employees ]\r\n                }\r\n            case \"UPDATE_EMPLOYEE\":\r\n                {\r\n                    var newState = [];\r\n                    for(var i = 0 ; i < state.employees.length ; i ++)\r\n                    {\r\n                        if(i != action.index)\r\n                        {\r\n                            newState.push(state.employees[i]);\r\n                        }\r\n                        else \r\n                        {\r\n                            newState.push(action.data);\r\n                        }\r\n                    }\r\n                    console.log(\"newState\", newState);\r\n                    return {\r\n                        employees : newState\r\n                    }\r\n\r\n                }\r\n                case \"DELETE_EMPLOYEE\":\r\n                {\r\n                    console.log(\"action\", action);\r\n                    var newState = [];\r\n                    for(var i = 0 ; i < state.employees.length ; i ++)\r\n                    {\r\n                        if(state.employees[i]._id.employeeID !== action.id)\r\n                        {\r\n                            newState.push(state.employees[i]);\r\n                        }\r\n                        else {\r\n                            console.log(\"Kiếm đc cái xoá rồi\")\r\n                        }\r\n                    }\r\n                    return {\r\n                        employees : newState\r\n                    }\r\n\r\n                }\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default listEmployeeReducer;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\nextWeekTimeKeepingReducer.js",["649"],"const nextWeekTimeKeepingInitialState =\r\n    \r\n[\r\n    {\r\n        _id: {\r\n            dateInWeek: \"T6\",\r\n            storeID: \"19522006@gm.uit.edu.vn\",\r\n            shiftType: {\r\n                _id: {\r\n                    shiftID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n            },\r\n            employee: {\r\n                _id: {\r\n                    employeeID: \"2\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n            },\r\n        },\r\n        alternativeEmployee: {\r\n            _id: {\r\n                employeeID: \"3\",\r\n                storeID: \"19522006@gm.uit.edu.vn\",\r\n            },\r\n        },\r\n        realDate: \"2021-12-04\",\r\n    }\r\n];\r\n\r\nconst nextWeekTimeKeepingReducer = (state = nextWeekTimeKeepingInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"SET_NEXT_WEEK_TIMEKEEPER\":\r\n                return action.data;\r\n            case \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\":\r\n                return [...state, action.data]\r\n            case \"UPDATE_NEXT_WEEK_TIMEKEEPER\":\r\n                {\r\n                    var newState = [];\r\n                    for(var i = 0 ; i < state.length ; i ++)\r\n                    {\r\n                        if(i != action.index)\r\n                        {\r\n                            newState.push(state[i]);\r\n                        }\r\n                        else \r\n                        {\r\n                            newState.push(action.data);\r\n                        }\r\n                    }\r\n                    return newState;\r\n                }\r\n            case \"DELETE_NEXT_WEEK_TIMEKEEPER\":\r\n            {\r\n                console.log(action.data._id.dateInWeek);\r\n                return state.filter((value, key) => \r\n                (\r\n                    value._id.dateInWeek !== action.data._id.dateInWeek \r\n                    || value._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \r\n                    || value._id.employee._id.employeeID !== action.data._id.employee._id.employeeID\r\n                    || value._id.realDate !== action.data._id.realDate\r\n                ));\r\n            }\r\n                \r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default nextWeekTimeKeepingReducer;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\ListRecieptReducer.js",["650","651","652"],"const listRecieptInitialState = [],\r\n    listRecieptReducer = (state = listRecieptInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"UPDATE_RECIEPT_USER\":\r\n                action.listReciept.map(value => {\r\n                    let data = {\r\n                        MAHD: value._id.receiptID,\r\n                        name: value.employeeID.name,\r\n                        idUser: value.employeeID._id.employeeID ? value.employeeID._id.employeeID : '',\r\n                        date: value.createAt,\r\n                        discount: value.discount,\r\n                        totalMoney: value.totalMoney,\r\n                        totalFinalMoney: value.totalFinalMoney,\r\n                        listProduct: value.listItem,\r\n                        time: value.timeCreate,\r\n                        isEdit: value.isEdit,\r\n                        oldBill: value.oldBill,\r\n                        deleted: value.deleted ? value.deleted : false,\r\n                        coupon: value.coupon ? value.coupon : null\r\n                    }\r\n                    state.push(data)\r\n                })\r\n                return state;\r\n            case \"ADD_RECIEPT\":\r\n                return [...state, action.newReciept]\r\n            case \"EDIT_SHOPPING_BAGS\":\r\n                return state.filter((value) => {\r\n                    if (value.MAHD === action.MAHD) {\r\n                        value.isEdit = true\r\n                    }\r\n                    return value;\r\n                })\r\n            case \"DELETE_RECIEPT\":\r\n                return state.filter((value) => {\r\n                    if (value.MAHD === action.MAHD) {\r\n                        value.deleted = true\r\n                    }\r\n                    return value;\r\n                })\r\n            case \"DELETE_ONE_RECIEPT\":\r\n                return state.filter((value) => {\r\n                    if (value.MAHD !== action.MAHD) {\r\n                        return value\r\n                    }\r\n                })\r\n            case \"DELETE_MAHD_SELECTED_RECIEPT\":\r\n                return state.filter(value => {\r\n                    action.listMAHD.map(value1 => {\r\n                        if (value.MAHD === value1) {\r\n                            value.deleted = true\r\n                        }\r\n                    })\r\n                    return value\r\n                })\r\n            case \"DELETE_MAHD_INVOICE_RECIEPT\":\r\n                return state.filter(value => {\r\n                    return !value.deleted\r\n                })\r\n            case \"RESTONE_ONE_RECIEPT\":\r\n                return state.filter(value => {\r\n                    if (value.MAHD === action.MAHD) {\r\n                        value.deleted = false;\r\n                    }\r\n                    return value\r\n                })\r\n            case \"RESTONE_ALL_RECIEPT\":\r\n                return state.filter(value => {\r\n                    value.deleted = false;\r\n                    return value\r\n                })\r\n            case \"DELETE_ALL_RECIEPT\":\r\n                return state.filter(value => {\r\n                    value.deleted = true\r\n                    return value;\r\n                })\r\n            case \"RESET_ALL_RECIEPT_USER\":\r\n                return [];\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default listRecieptReducer;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\StatusShowHistoryRecieptReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\StatusEditInfomationBill.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\InfomationBillEdit.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\addNextWeekTimeKeepingStatus.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\currentEditEmployeeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\addTimeKeepingStatus.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\updateNextWeekTimeKeepingValue.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\updateNextWeekTimeKeepingStatus.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\updateTimeKeeperValue.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\listShiftAssignReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\updateTimeKeepingStatus.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\StatusSelectAll.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\ListRecieptDelete.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\SearchReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\TypeReciept.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\TypeByDate.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Dashboard\\TypeTimeDashboard.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Dashboard\\YearSelectReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Dashboard\\MonthSelectReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Profile\\StatusModalAddCoupon.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Profile\\ListCoupon.js",["653"],"\r\nconst listCouponInitialState = [],\r\n    listCouponReducer = (state = listCouponInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"DELETE_COUPON\":\r\n                return state.filter((value, key) => (value.idCoupon !== action.idCoupon));\r\n            case \"ADD_COUPON\":\r\n                return [...state, action.data]\r\n            case \"EDIT_COUPON\":\r\n                return state.map(value => {\r\n                    if (value.idCoupon == action.data.idCoupon) {\r\n                        value.name = action.data.name\r\n                        value.percent = action.data.percent\r\n                        value.minTotal = action.data.minTotal\r\n                        value.timeFrom = action.data.timeFrom\r\n                        value.timeEnd = action.data.timeEnd\r\n                        value.quantity = action.data.quantity\r\n                    }\r\n                    return value\r\n                })\r\n            case \"UPDATE_QUANTITY_COUPON\":\r\n                return state.map(value => {\r\n                    if (value.idCoupon === action.idCoupon) {\r\n                        value.quantity--\r\n                    }\r\n                    return value\r\n                })\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n    \r\nexport default listCouponReducer;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Profile\\ObjectEditCoupon.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Profile\\StatusEditCoupon.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Dashboard\\TypeHeaderDashboard.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\typeProductReducer.js",["654","655","656","657"],"\r\nconst typeProductInitialState = [\r\n    {\r\n        _id: {\r\n            typeID: \"\",\r\n            storeID: \"\",\r\n        },\r\n        name: \"\",\r\n    },\r\n],\r\n\r\n    typeProductReducer = (state = typeProductInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"GET_PRODUCT_TYPE\":\r\n                return action.data;\r\n            case \"ADD_TYPE\":\r\n                return [...state, action.data];\r\n            case \"UPDATE_TYPE\":\r\n            {\r\n                var newState = [];\r\n                for(var i = 0 ; i < state.length ; i ++)\r\n                {\r\n                    if(state[i]._id.typeID != action.data._id.typeID)\r\n                    {\r\n                        newState.push(state[i]);\r\n                    }\r\n                    else \r\n                    {\r\n                        newState.push(action.data);\r\n                    }\r\n                }\r\n                return newState;\r\n            }\r\n            case \"DELETE_TYPE\":\r\n            {\r\n                console.log(\"action.data\", action.data);\r\n                var newState = [];\r\n                for(var i = 0 ; i < state.length ; i ++)\r\n                {\r\n                    if(state[i]._id.typeID != action.data.typeID)\r\n                    {\r\n                        newState.push(state[i]);\r\n                    }\r\n                    else \r\n                    {\r\n                        console.log(\"Xoá được \")\r\n                    }\r\n                }\r\n                return newState;\r\n            }\r\n\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default typeProductReducer;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListProductReducer.js",["658","659","660","661","662","663","664"],"\r\nconst listProductInitialState = [\r\n    {\r\n        _id: {\r\n            productID: \"\", \r\n            importDate: \"\", \r\n            storeID: \"\",\r\n        },\r\n        name: \"\", \r\n        imgUrl: \"\", \r\n        quantity: \"\", \r\n        remain: \"\", \r\n        unit: \"\",\r\n        importPrice: \"\", \r\n        sellPrice: \"\", \r\n        expires: \"\",\r\n        typeIDList: [],\r\n    },\r\n],\r\n\r\n    listProductReducer = (state = listProductInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"GET_PRODUCT_AND_TYPE\":\r\n                return {\r\n                    state: action.data\r\n                }\r\n            case \"ADD_PRODUCT\":\r\n                return {\r\n                    state: [...state.state, action.data]\r\n                }\r\n            case \"UPDATE_PRODUCT\":\r\n                var newState = [];\r\n                for(var i = 0 ; i < state.state.length; i++)\r\n                {\r\n                    if(state.state[i]._id.productID != action.data._id.productID)\r\n                    {\r\n                        newState.push(state.state[i]);\r\n                    }\r\n                    else \r\n                    {\r\n                        newState.push(action.data);\r\n                    }\r\n                }\r\n                return {\r\n                    state: newState\r\n                }\r\n            case \"DELETE_PRODUCT\":\r\n                var newState = [];\r\n                for(var i = 0 ; i < state.state.length; i++)\r\n                {\r\n                    if(state.state[i]._id.productID != action.data._id.productID)\r\n                    {\r\n                        newState.push(state.state[i]);\r\n                    }\r\n                    else \r\n                    {\r\n                        \r\n                    }\r\n                }\r\n                return {\r\n                    state: newState\r\n                }\r\n            case \"DECREASE_REMAIN_PRODUCT\": \r\n            {\r\n                var newState = [];\r\n                for(var i = 0 ; i < state.state.length; i++)\r\n                {\r\n                    if(state.state[i]._id.productID != action.data._id.productID)\r\n                    {\r\n                        newState.push(state.state[i]);\r\n                    }\r\n                    else \r\n                    {\r\n                        var decreaseVal = state.state[i];\r\n                        decreaseVal.remain = action.data.remain;\r\n                        newState.push(decreaseVal);\r\n                    }\r\n                }\r\n                return {\r\n                    state: newState\r\n                }\r\n            }\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default listProductReducer;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\GoodManager\\UpdateTypeStatus.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\GoodManager\\AddGoodStatus.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\employeeSackedListReducer.js",["665","666"],"const listSackedEmployeeInitialState = {\r\n    employees: [\r\n        {\r\n            _id: { \r\n                employeeID: '3', \r\n                storeID: '19522006@gm.uit.edu.vn' \r\n            },\r\n            managerID: '19522006@gm.uit.edu.vn',\r\n            password: '1212',\r\n            firstName: '1212',\r\n            lastName: '1212',\r\n            phoneNumber: '1212',\r\n            dateOfBirth: \"2021-11-20T00:00:00.000Z\",\r\n            email: '12121',\r\n            address: '1212',\r\n            cardID: '1212',\r\n            startDate: \"2021-11-26T00:00:00.000Z\",\r\n            deleted: false,\r\n            __v: 0\r\n        },\r\n    ]\r\n}\r\n\r\nconst  listSackedEmployeeReducer = (state = listSackedEmployeeInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"GET_EMPLOYEE_SACKED\":\r\n                state.employees = action.employees;\r\n                return state;\r\n            case \"DELETE_EMPLOYEE_SACKED\":\r\n                console.log(\"action\", action);\r\n                return {\r\n                    employees: [...state.employees, action.data]\r\n                };\r\n            case \"RETURN_TO_WORK\":\r\n            {\r\n                var newState = [];\r\n                for(var i = 0 ; i < state.employees.length ; i ++)\r\n                {\r\n                    if(state.employees[i]._id.employeeID !== action.id)\r\n                    {\r\n                        newState.push(state.employees[i]);\r\n                    }\r\n                    else {\r\n                        console.log(\"Kiếm đc cái xoá rồi\")\r\n                    }\r\n                }\r\n                return {\r\n                    employees : newState\r\n                }\r\n            }\r\n            case \"DELETE_PERMANTLY_EMPLOYEE\":\r\n            {\r\n                var newState = [];\r\n                for(var i = 0 ; i < state.employees.length ; i ++)\r\n                {\r\n                    if(state.employees[i]._id.employeeID !== action.employeeID)\r\n                    {\r\n                        newState.push(state.employees[i]);\r\n                    }\r\n                    else {\r\n                        console.log(\"Kiếm đc cái xoá rồi\")\r\n                    }\r\n                }\r\n                return {\r\n                    employees : newState\r\n                }\r\n            }\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default listSackedEmployeeReducer;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\listTimeKeepingReducer.js",["667","668","669"],"const listTimeKeepingInitialState =   \r\n[\r\n    // {\r\n    //     _id: {\r\n    //         dateInWeek: 'T7',\r\n    //         storeID: '19522006@gm.uit.edu.vn',\r\n    //         shiftType: {\r\n    //             _id: {\r\n    //                 shiftID: 'v908tB',\r\n    //                 storeID: '19522006@gm.uit.edu.vn',\r\n    //             },\r\n    //         },\r\n    //         employee: {\r\n    //             _id: {\r\n    //                 employeeID: '1',\r\n    //                 storeID: '19522006@gm.uit.edu.vn',\r\n    //             },\r\n    //         },\r\n    //     },\r\n    //     realDate: '2021-11-11',\r\n    //     isPaidSalary: false,\r\n    //     createdAt: '2021-01-02',\r\n    // }\r\n    \r\n];\r\n\r\nconst listTimeKeepingReducer = (state = listTimeKeepingInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"GET_TIMEKEEPER\":\r\n                return action.data;\r\n            case \"ADD_NEW_TIME_KEEPER\":\r\n                return [...state, action.data];\r\n            case \"UPDATE_TIMEKEEPER\":\r\n                {\r\n                    var newState = [];\r\n                    for(var i = 0 ; i < state.length ; i ++)\r\n                    {\r\n                        if(i != action.index)\r\n                        {\r\n                            newState.push(state[i]);\r\n                        }\r\n                        else \r\n                        {\r\n                            newState.push(action.data);\r\n                        }\r\n                    }\r\n                    return newState;\r\n                }\r\n            case \"DELETE_TIMEKEEPER\":\r\n                {\r\n                    console.log(\"action\", action);\r\n                    var newState = [];\r\n                    for(var i = 0 ; i < state.length ; i ++)\r\n                    {\r\n                        if(state[i]._id.dateInWeek !== action.data._id.dateInWeek \r\n                            || state[i]._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \r\n                            || state[i]._id.employee._id.employeeID !== action.data._id.employee._id.employeeID)\r\n                        {\r\n                            newState.push(state[i]);\r\n                        }\r\n                        else {\r\n                            console.log(\"Kiếm đc cái xoá rồi\")\r\n                        }\r\n                    }\r\n                    return newState;\r\n\r\n                    // return state.filter((value, key) => \r\n                    //     (\r\n                    //         value._id.dateInWeek !== action.data._id.dateInWeek \r\n                    //         || value._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \r\n                    //         || value._id.employee._id.employeeID !== action.data._id.employee._id.employeeID \r\n                    //     )\r\n                    // );\r\n                }\r\n               \r\n                \r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default listTimeKeepingReducer;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\currentEmployeeViewValue.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Body.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Register.js",["670","671","672"],"import React, { Component } from 'react';\r\nimport '../../css/Login.css'\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport Avatar from '@mui/material/Avatar'\r\nimport { IconContext } from \"react-icons\";\r\nimport { FiChevronLeft, FiUserPlus } from \"react-icons/fi\";\r\nimport { BsFillEnvelopeFill, BsLockFill, BsCodeSlash } from \"react-icons/bs\";\r\nimport { FaPhoneSquare } from \"react-icons/fa\";\r\nimport axios from 'axios';\r\nimport emailjs from 'emailjs-com';\r\nvar bcrypt = require('bcryptjs');\r\n\r\n\r\nclass Register extends Component {\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.state = {\r\n            code: \"\",\r\n            statusSendCode: true,\r\n        }\r\n    }\r\n\r\n\r\n    // Send code tới người dùng\r\n    sendCode = (a = this.makeCode(6)) => {\r\n        this.setState({\r\n            code: \"123456\"\r\n        })\r\n        // this.setState({\r\n        //     code: a,\r\n        // })\r\n        // emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\r\n        // emailjs.send(\"gmail_main\", \"template_plasdgf\", {\r\n        //     To_mail: `${document.getElementById('email').value}`,\r\n        //     code: `${a}`,\r\n        // })\r\n        //     .then((response) => {\r\n        //         console.log('SUCCESS!', response.status, response.text);\r\n        //     }, (err) => {\r\n        //         console.log('FAILED...', err);\r\n        //     });\r\n    }\r\n\r\n    // status SignUp \r\n    SignUp = (e) => {\r\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword() && this.blurTel()) {\r\n            axios.post(`http://localhost:5000/register-with-email`, {\r\n                email: document.getElementById('email').value,\r\n                password: this.hash(document.getElementById('password').value),\r\n                tel: document.getElementById('tel').value,\r\n            })\r\n                .then(res => {\r\n                    switch (res.data.status) {\r\n                        case 1:\r\n                            localStorage.setItem('token', res.data.token);\r\n                            this.props.updateProfile(res.data.data);\r\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n                            this.props.changeLoginStatus();\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"success\");\r\n\r\n                            break;\r\n                        case -1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"error\");\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Error system\", \"error\");\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n\r\n    // Tạo mã code cho người dùng xác nhận\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Hashpassword\r\n    hash = (pass) => {\r\n        var hash = bcrypt.hashSync(pass, 12)\r\n        return hash;\r\n    }\r\n\r\n\r\n    // Handle user : blur, change in input\r\n    blurEmail = () => {\r\n        const regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        const e = document.getElementById('email');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            this.setState({\r\n                statusSendCode: true,\r\n            })\r\n            return false;\r\n        } else if (!regex.test(elementValue)) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\r\n            this.setState({\r\n                statusSendCode: true,\r\n            })\r\n            return false\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            this.setState({\r\n                statusSendCode: false,\r\n            })\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurCode = () => {\r\n        const e = document.getElementById('code');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (this.state.code === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\r\n            return false\r\n        } else if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\r\n            return false\r\n        } else if (elementValue !== this.state.code) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\r\n            return false\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurRePassword = () => {\r\n        const e = document.getElementById('re-password')\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else if (document.getElementById('password').value !== elementValue) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true\r\n        }\r\n    }\r\n\r\n    blurTel = () => {\r\n        const e = document.getElementById('tel');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        const regex = /^\\d+$/;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else if (!regex.test(elementValue)) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Phone is not in the correct format\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Register'\r\n    }\r\n\r\n    render() {\r\n        const enterPress = this.SignUp;\r\n        document.onkeydown = function (e) {\r\n            switch (e.which) {\r\n                case 13:\r\n                    enterPress(e);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-register\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <FiUserPlus></FiUserPlus>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Register</div>\r\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Login</NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/register-submit\" method=\"post\" id=\"register-form\">\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\r\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND CODE</button>\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"re-password\" id=\"re-password\" placeholder=\"Emter re-password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <FaPhoneSquare className=\"input-custom-icon\" ></FaPhoneSquare>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onBlur={(e) => this.blurTel(e)} onChange={(e) => this.changeInput(e)} name=\"tel\" rules=\"required\" id=\"tel\" placeholder=\"Ex: 0303030303\" type=\"tel\" />\r\n\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"register-description\">Bằng cách ấn vào nút\r\n                                    <span className=\"register-description__keyword\">“ĐĂNG KÝ”</span>\r\n                                    , tôi đồng ý với\r\n                                    <span className=\"register-description__keyword\">Điều Khoản Sử Dụng</span> và\r\n                                    <div className=\"register-description__keyword\"> Chính Sách Bảo Mật</div>\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div onClick={(e) => this.SignUp(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign Up</div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        updateProfile: (data) => {\r\n            dispatch({\r\n                type: \"UPDATA_DATA_USER\",\r\n                data: data,\r\n            })\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar,\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\LoginWithEmployee.js",["673","674"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../css/Login.css'\r\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\r\nimport { FiXSquare, FiChevronLeft } from \"react-icons/fi\";\r\nimport { FaUserTie } from 'react-icons/fa'\r\nimport { Avatar } from '@mui/material'\r\nimport { IconContext } from \"react-icons\";\r\nimport axios from 'axios';\r\nimport Alert from '@mui/material/Alert';\r\n\r\nclass LoginWithEmployee extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    // Check để thay đổi trạng thái đã login hay chưa\r\n    isLoginCheck = async (e) => {\r\n        this.props.setRole();\r\n        if (this.blurEmail() && this.blurPassword()) {\r\n            await axios.post(`http://localhost:5000/sign-in-employee`, {\r\n                email: document.querySelector('#username').value,\r\n                password: document.getElementById('password').value,\r\n            })\r\n                .then(res => {\r\n                    if (res.status === 200) {\r\n                        localStorage.setItem('token', res.data.token);\r\n                        this.props.updateProfile(res.data.data.employee[0], res.data.data.manager[0], res.data.data.store[0].storeName);\r\n                        this.props.updateAvatar(res.data.data.employee[0].imgUrl ? res.data.data.employee[0].imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n                        this.props.updateRecieptUser(res.data.data.receipts);\r\n                        this.props.changeLoginStatus();\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(\"Login successfully\", \"success\");\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"The email IS NOT registered or you entered the WRONG password.\", \"error\");\r\n                    return;\r\n                })\r\n            // Get các thông tin để thêm vào redux\r\n            \r\n        }\r\n    }\r\n\r\n\r\n    // Handle user : blur , change in input\r\n    blurEmail = () => {\r\n        const event = document.querySelector('#username');\r\n        let elementValue = event.value;\r\n        const formGroup = event.parentElement.parentElement;\r\n        // check validate\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        let elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Employee'\r\n    }\r\n\r\n    render() {\r\n        const enterPress = this.isLoginCheck;\r\n        document.onkeydown = function (e) {\r\n            switch (e.which) {\r\n                case 13:\r\n                    enterPress(e);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-login\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <FaUserTie></FaUserTie>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Employee</div>\r\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Login</NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">Username</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"username\" id=\"username\" placeholder=\"VD: phuoc123\" type=\"text\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div to=\"/sellproduct\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        setRole: () => {\r\n            dispatch({\r\n                type: \"EMPLOYEE_ROLE\",\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        updateProfile: (data, data1, storeName) => {\r\n            dispatch({\r\n                type: \"UPDATA_DATA_EMPLOYEE\",\r\n                data: data,\r\n                data1: data1,\r\n                storeName: storeName,\r\n            })\r\n        },\r\n        setProfile: (data) => {\r\n            dispatch({\r\n                type: \"SET_DATA_USER\",\r\n                data: data,\r\n            })\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar,\r\n            })\r\n        },\r\n        updateRecieptUser: (data) => {\r\n            dispatch({\r\n                type: \"UPDATE_RECIEPT_USER\",\r\n                listReciept: data,\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginWithEmployee);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\ForgotPassword.js",["675","676","677"],"import React, { Component } from 'react';\r\nimport Avatar from '@mui/material/Avatar'\r\nimport { IconContext } from \"react-icons\";\r\nimport { FiSend } from \"react-icons/fi\";\r\nimport { BsFillEnvelopeFill, BsLockFill, BsBoxArrowInLeft, BsCodeSlash } from \"react-icons/bs\";\r\nimport emailjs from 'emailjs-com';\r\nimport axios from 'axios';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nvar bcrypt = require('bcryptjs');\r\n\r\n\r\nclass ForgotPassword extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            code: \"\",\r\n            statusSendCode: true,\r\n        }\r\n    }\r\n\r\n\r\n    // Send code tới người dùng\r\n    sendCode = (a = this.makeCode(6)) => {\r\n        this.setState({\r\n            code: \"123456\"\r\n        })\r\n        // this.setState({\r\n        //     code: a,\r\n        // })\r\n        // emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\r\n        // emailjs.send(\"gmail_main\", \"template_plasdgf\", {\r\n        //     To_mail: `${document.querySelector('#email').value}`,\r\n        //     code: `${a}`,\r\n        // })\r\n        //     .then((response) => {\r\n        //         console.log('SUCCESS!', response.status, response.text);\r\n        //     }, (err) => {\r\n        //         console.log('FAILED...', err);\r\n        //     });\r\n    }\r\n\r\n    // Tạo code để xác nhận\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Hashpassword\r\n    hash = (pass) => {\r\n        var hash = bcrypt.hashSync(pass, 12)\r\n        return hash;\r\n    }\r\n\r\n    //Check tìm lại mật khẩu\r\n    findPassword = (e) => {\r\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword()) {\r\n            const form = document.getElementById('findpass-form');\r\n            axios.post(`http://localhost:5000/find-password`, {\r\n                email: document.querySelector('#email').value,\r\n                password: this.hash(document.getElementById('password').value),\r\n            })\r\n                .then(res => {\r\n                    form.reset();\r\n                    switch (res.data.status) {\r\n                        case 1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"success\");\r\n                            break;\r\n                        case -1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"error\");\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Error system\", \"error\");\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    // Handle user blue change in input\r\n    blurEmail = () => {\r\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        const event = document.querySelector('#email');\r\n        const elementValue = event.value;\r\n        const formGroup = event.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            this.setState({\r\n                statusSendCode: true,\r\n            })\r\n            return false;\r\n        } else if (!regex.test(elementValue)) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\r\n            this.setState({\r\n                statusSendCode: true,\r\n            })\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            this.setState({\r\n                statusSendCode: false,\r\n            })\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurCode = () => {\r\n        const e = document.getElementById('code');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (this.state.code === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\r\n            return false\r\n        } else if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\r\n            return false\r\n        } else if (elementValue !== this.state.code) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\r\n            return false\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurRePassword = () => {\r\n        const e = document.getElementById('re-password')\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else if (document.getElementById('password').value !== elementValue) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Find password'\r\n    }\r\n\r\n    render() {\r\n        const enterPress = this.findPassword;\r\n        document.onkeydown = function (e) {\r\n            switch (e.which) {\r\n                case 13:\r\n                    enterPress(e);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-findpass\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <FiSend></FiSend>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Find password</div>\r\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"><BsBoxArrowInLeft className=\"arrow-return\"></BsBoxArrowInLeft></NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/findpass-submit?_method=PUT\" method=\"POST\" id=\"findpass-form\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"Ex: abc@gmail.com\" type=\"text\" />\r\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND</button>\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"code\" className=\"form-label\">Code</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\r\n\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">New password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">Re-password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"password\" rules=\"required|min:6\" id=\"re-password\" placeholder=\"Emter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div onClick={(e) => this.findPassword(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Find Password</div>\r\n                                </div>\r\n\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapDispatchToProps)(ForgotPassword);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Login.js",["678","679","680","681"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../css/Login.css'\r\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\r\nimport { FiChevronRight } from \"react-icons/fi\";\r\nimport { BiUser } from \"react-icons/bi\";\r\nimport { Avatar } from '@mui/material'\r\nimport { IconContext } from \"react-icons\";\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport axios from 'axios';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            appId: \"543752153590340\",\r\n            clientId: \"826925109796-mi95l41fi57bdlolpvnfdg5bpt9oc81h.apps.googleusercontent.com\",\r\n        }\r\n    }\r\n\r\n    loadAllGood(dataProduct, dataJoin) {\r\n        var resultProduct = dataProduct;\r\n        var joinTypeInfor = dataJoin;\r\n     \r\n        var listProductInfor = [];\r\n        for (let i = 0; i < resultProduct.length; i++) {\r\n            var typeIDList = [];\r\n            var joinType = '';\r\n            for (var j = 0; j < joinTypeInfor.length; j++) {\r\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\r\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) \r\n                {\r\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\r\n                }\r\n            }\r\n    \r\n            listProductInfor.push(\r\n                {\r\n                    ...resultProduct[i],\r\n                    typeIDList: typeIDList,\r\n                });\r\n        }\r\n        this.props.getProductToReducer(listProductInfor);\r\n      }\r\n\r\n    // Login with google\r\n    onLoginSuccess = async (res) => {\r\n        this.props.setRole();\r\n        await axios.post(`http://localhost:5000/sign-in-with-google`, res.profileObj)\r\n            .then(res => {\r\n                switch (res.data.status) {\r\n                    case 1:\r\n                        localStorage.setItem('token', res.data.token);\r\n                        this.props.updateProfile(res.data.data);\r\n                        this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n                        this.props.updateShiftTypes(res.data.data.shiftTypes);\r\n                        this.props.updateRecieptUser(res.data.data.receipts);\r\n                        this.props.changeLoginStatus();\r\n                        this.props.getTimeKeeping(res.data.data.timeKeeping);\r\n                        this.loadAllGood(res.data.data.products, res.data.data.productJoinTypes);\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(res.data.message, \"success\");\r\n                        break;\r\n                    case -1:\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(res.data.message, \"error\");\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Error, server don't active\", \"error\");\r\n            })\r\n    }\r\n\r\n    // Check để thay đổi trạng thái đã login hay chưa\r\n    isLoginCheck = async (e) => {\r\n        this.props.setRole();\r\n        if (this.blurEmail() && this.blurPassword()) {\r\n            await axios.post(`http://localhost:5000/sign-in-with-gmail-password`, {\r\n                email: document.querySelector('#email').value,\r\n                password: document.getElementById('password').value,\r\n            })\r\n                .then(res => {\r\n                    switch (res.data.status) {\r\n                        case 1:\r\n                            localStorage.setItem('token', res.data.token);\r\n                            this.props.updateProfile(res.data.data);\r\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n                            this.props.updateShiftTypes(res.data.data.shiftTypes);\r\n                            this.props.updateRecieptUser(res.data.data.receipts);\r\n                            this.props.changeLoginStatus();\r\n                            this.props.getEmployee(res.data.data.employees);\r\n                            this.props.getTimeKeeping(res.data.data.timeKeeping);\r\n                            this.loadAllGood(res.data.data.products, res.data.data.productJoinTypes);\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"success\");\r\n                            break;\r\n                        case -1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"error\");\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Error system\", \"error\");\r\n                })\r\n        }\r\n    }\r\n\r\n    // Handle user : blur , change in input\r\n    blurEmail = () => {\r\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        const event = document.querySelector('#email');\r\n        let elementValue = event.value;\r\n        const formGroup = event.parentElement.parentElement;\r\n        // check validate\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else if (!regex.test(elementValue)) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        let elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Login'\r\n    }\r\n\r\n    render() {\r\n        const enterPress = this.isLoginCheck;\r\n        document.onkeydown = function (e) {\r\n            switch (e.which) {\r\n                case 13:\r\n                    try\r\n                    {\r\n                        enterPress(e);\r\n                    }\r\n                    catch(err) \r\n                    {\r\n                        console.log(\"Alo lỗi mẹ rồi\")\r\n                    }\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-login\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <BiUser></BiUser>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Login</div>\r\n                                <NavLink to=\"/register\" className=\"auth-form__switch-btn\">Register <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight></NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"auth-form__support\">\r\n                                    <span className=\"auth-form__support-forget\">\r\n                                        <NavLink to=\"/forgot\" className=\"auth-form__switch-btn\">Forgot password</NavLink>\r\n                                    </span>\r\n                                    <span className=\"auth-form__help-separate\" />\r\n                                    <span className=\"auth-form__support-need-support\">Need help?</span>\r\n                                </div>\r\n                                <div className=\"auth-form__support\">\r\n                                    <GoogleLogin\r\n                                        className=\"auth-form__support-google\"\r\n                                        clientId={this.state.clientId}\r\n                                        buttonText=\"Login with Google\"\r\n                                        onSuccess={this.onLoginSuccess}\r\n                                        onFailure={this.onFailureSuccess}\r\n                                        cookiePolicy={'single_host_origin'}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div to=\"/home\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <NavLink to=\"/employee\" id=\"navlink\" className=\"auth-form__btn-log-in auth-form__switch-btn auth-form-employee\">\r\n                                        Employee\r\n                                        <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight>\r\n                                    </NavLink>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        updateProfile: (data) => {\r\n            dispatch({\r\n                type: \"UPDATA_DATA_USER\",\r\n                data: data,\r\n            })\r\n        },\r\n        setRole: () => {\r\n            dispatch({\r\n                type: \"ADMIN_ROLE\"\r\n            });\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar,\r\n            })\r\n        },\r\n        updateShiftTypes: (shiftTypes) => {\r\n            dispatch({\r\n                type: \"UPDATE_DATA_SHIFT_USER\",\r\n                shiftTypes: shiftTypes,\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n          },\r\n        updateShiftTypes: (shiftTypes) => {\r\n            dispatch({\r\n                type: \"UPDATE_DATA_SHIFT_USER\",\r\n                shiftTypes: shiftTypes,\r\n            })\r\n        },\r\n        updateRecieptUser: (data) => {\r\n            dispatch({\r\n                type: \"UPDATE_RECIEPT_USER\",\r\n                listReciept: data,\r\n            })\r\n        },\r\n        getTimeKeeping: (data) => {\r\n            dispatch({\r\n              type: \"GET_TIMEKEEPER\",\r\n              data: data\r\n            });  \r\n          },\r\n        getProductToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_AND_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\ModalConfirmPassword.js",["682"],"import React from 'react';\r\nimport {Card,CardHeader,Divider,CardContent,Grid,TextField,Box,Button} from '@mui/material';\r\nimport {BiPlusMedical} from 'react-icons/bi'\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction ModalConfirmPassword(props) {\r\n\r\n    const statusConfirmPassword = useSelector(state => state.statusConfirmPassword)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleCancel = () => {\r\n        dispatch({\r\n            type:\"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Card className=\"card-confirm-password\" style={{ minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }}>\r\n            <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm password\" />\r\n            <Divider />\r\n            <CardContent>\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={12} xs={12}>\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            label=\"Your password\"\r\n                            required\r\n                            type=\"password\"\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n            <Divider />\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                <Button style={{ backgroundColor: 'yellowgreen' }} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                    Xác nhận\r\n                </Button>\r\n                <Button style={{ backgroundColor: 'red' }} onClick={() => handleCancel()} variant=\"contained\" startIcon={<GiCancel />}>\r\n                    Hủy\r\n                </Button>\r\n            </Box>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default ModalConfirmPassword;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Partials\\SideNavBar.js",["683","684","685","686","687","688"],"import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    AiOutlineDashboard,\r\n    AiFillDashboard,\r\n    AiOutlineContainer,\r\n    AiFillContainer\r\n} from \"react-icons/ai\";\r\nimport { Button } from '@mui/material';\r\nimport { BsInfoCircleFill } from \"react-icons/bs\";\r\nimport {\r\n    IoPeopleOutline,\r\n    IoPeopleSharp,\r\n    IoReceiptOutline,\r\n    IoReceiptSharp,\r\n} from \"react-icons/io5\";\r\nimport { ImCheckboxUnchecked, ImCheckboxChecked } from \"react-icons/im\"\r\nimport { IoIosArrowBack } from \"react-icons/io\";\r\nimport { RiProfileFill, RiProfileLine } from \"react-icons/ri\";\r\nimport { FaSignOutAlt } from \"react-icons/fa\";\r\nimport { GiSellCard } from 'react-icons/gi'\r\nimport Avatar from '../../img/avatar_default.jpg';\r\nimport { NavLink } from 'react-router-dom';\r\nimport '../../css/SideNavBar.css';\r\nimport axios from 'axios';\r\n\r\nclass SideNavBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            change: true,\r\n            attendance: false,\r\n        }\r\n        this.getInitialScreen();\r\n    }\r\n    active = ['active', '', '', '', '', ''];\r\n\r\n    changeIndex(index) {\r\n        for (var i = 0; i < this.active.length; i++) {\r\n            this.active[i] = '';\r\n        }\r\n        this.active[index] = 'active';\r\n        this.setState({ change: !this.state.change });\r\n    }\r\n\r\n    getInitialScreen() {\r\n        var link = window.location.href;\r\n        link = link.substring(link.lastIndexOf('/') + 1);\r\n\r\n        for (var i = 0; i < this.active.length; i++) {\r\n            this.active[i] = '';\r\n        }\r\n\r\n        switch (link) {\r\n            case \"profile\":\r\n                this.active[1] = 'active';\r\n                break;\r\n            case \"employeemanager\":\r\n                this.active[2] = 'active';\r\n                break;\r\n            case \"goodmanager\":\r\n                this.active[3] = 'active';\r\n                break;\r\n            case \"import\":\r\n                this.active[3] = 'active';\r\n                break;\r\n            case \"receiptmanager\":\r\n                this.active[4] = 'active';\r\n                break;\r\n            case \"sellproduct\":\r\n                this.active[5] = 'active';\r\n                break;\r\n            default:\r\n                this.active[0] = 'active';\r\n                break;\r\n        }\r\n        this.setState({ change: !this.state.change });\r\n    }\r\n\r\n    attendance = () => {\r\n        this.setState({\r\n            attendance: true,\r\n        })\r\n        this.props.hideAlert()\r\n        this.props.showAlert('Attendanced success', 'success')\r\n    }\r\n\r\n    logOut = () => {\r\n        localStorage.setItem('token', null)\r\n        this.props.resetInfoUser()\r\n        this.props.resetRecieptUser()\r\n        this.props.resetShiftUser()\r\n        this.props.changeLoginStatus()\r\n    }\r\n\r\n    attendance = () => {\r\n        var time = new Date();\r\n        let a = ((time.getHours() > 12) ? time.getHours() - 12 : time.getHours()) + \":\" + time.getMinutes() +\" \"+ ((time.getHours() > 12) ? \"PM\" : \"AM\");\r\n        axios.post('http://localhost:5000/api/employee/time-keeping',{\r\n            token: localStorage.getItem('token'),\r\n            data: {\r\n                email: this.props.infoUser.employeeID,\r\n                time: a,\r\n            }\r\n        }).then(res => {\r\n            console.log(res)\r\n            localStorage.setItem('token', res.data.token)\r\n            this.props.showAlert(res.data.message, 'success')\r\n            this.setState({\r\n                attendance: true\r\n            })\r\n        }).catch(err => {\r\n            this.props.showAlert(err.response.data.message, 'error')\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const navbarContainer = document.querySelector('.navbar-container');\r\n        return (\r\n            <div\r\n                class=\"navbar-container\"\r\n                style={{\r\n                    width: 0,\r\n                }}\r\n            >\r\n                <div style={{ backgroundColor: !this.props.statusDarkmode ? '#fafafa' : '#37474f' }} class=\"navibar sidebar\">\r\n                    <div className=\"nav-icon\" >\r\n                        <IoIosArrowBack\r\n                            size={20}\r\n                        />\r\n                    </div>\r\n                    <div class=\"nav-heading\">\r\n                        <div style={{ backgroundColor: !this.props.statusDarkmode ? '#cfd8dc' : '#455a64' }} class=\"navbar-heading-container\">\r\n                            <img src={this.props.infoUser.avatar ? this.props.infoUser.avatar : Avatar} style={{ width: 40, height: 40, borderRadius: '100%' }}></img>\r\n                            <span style={{ color: !this.props.statusDarkmode ? 'black' : 'white', fontWeight: '700' }} class=\"user-name\">{this.props.infoUser.lastName + \" \" + this.props.infoUser.firstName}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"nav-container\">\r\n                        {\r\n                            this.props.role == true ? (null)\r\n                                : (<div style={{ justifyContent: 'center', display: 'flex', marginBottom: '10px' }}>\r\n                                    <Button onClick={() => this.attendance()} style={{ backgroundColor: this.state.attendance ? '#b9f6ca' : '#e0e0e0', color: '#424242' }}>\r\n                                        {!this.state.attendance ? (<ImCheckboxUnchecked style={{ marginRight: '10px' }}></ImCheckboxUnchecked>)\r\n                                            : (<ImCheckboxChecked style={{ marginRight: '10px', color: '#1b5e20' }}></ImCheckboxChecked>)\r\n                                        }\r\n\r\n                                        {this.state.attendance ? 'attendanced' : 'attendance'}\r\n                                    </Button>\r\n                                </div>\r\n                                )\r\n                        }\r\n                        {\r\n                            this.props.role == true ?\r\n                                (<NavLink className={\"nav-item \" + this.active[0]} to=\"/dashboard\"\r\n                                    onClick={() => this.changeIndex(0)}\r\n                                >\r\n                                    <AiOutlineDashboard class=\"nav-item-icon\" />\r\n                                    <AiFillDashboard class=\"nav-item-icon icon-activate\" />\r\n                                    <span className=\"nav-item-lable\">Dashboard</span>\r\n                                </NavLink>) : (null)\r\n                        }\r\n                        <NavLink to=\"/profile\" className={\"nav-item \" + this.active[1]} href=\"#\"\r\n                            onClick={() => this.changeIndex(1)}\r\n                        >\r\n                            <RiProfileLine class=\"nav-item-icon\" />\r\n                            <RiProfileFill class=\"nav-item-icon icon-activate\" />\r\n                            <span className=\"nav-item-lable\">Profile</span>\r\n                        </NavLink>\r\n\r\n                        {\r\n                            this.props.role === true ?\r\n                                (\r\n                                    <div>\r\n                                        <NavLink\r\n                                            to=\"/employeemanager\"\r\n                                            className={\"nav-item \" + this.active[2]}\r\n                                            href=\"#\"\r\n                                            onClick={() => this.changeIndex(2)}\r\n                                        >\r\n                                            <IoPeopleOutline class=\"nav-item-icon\" />\r\n                                            <IoPeopleSharp class=\"nav-item-icon icon-activate\" />\r\n                                            <span className=\"nav-item-lable\">Employee Manager</span>\r\n                                        </NavLink>\r\n                                        <NavLink\r\n                                            to=\"/goodmanager\"\r\n                                            className={\"nav-item \" + this.active[3]}\r\n                                            href=\"#\"\r\n                                            onClick={() => this.changeIndex(3)}\r\n                                        >\r\n                                            <AiOutlineContainer className=\"nav-item-icon\" />\r\n                                            <AiFillContainer className=\"nav-item-icon icon-activate\" />\r\n                                            <span className=\"nav-item-lable\">Goods Manager</span>\r\n                                        </NavLink>\r\n                                        <NavLink\r\n                                            to=\"/receiptmanager\"\r\n                                            className={\"nav-item \" + this.active[4]}\r\n                                            href=\"#\"\r\n                                            onClick={() => this.changeIndex(4)}\r\n                                        >\r\n                                            <IoReceiptOutline class=\"nav-item-icon\" />\r\n                                            <IoReceiptSharp class=\"nav-item-icon icon-activate\" />\r\n                                            <span className=\"nav-item-lable\">Receipt Manager</span>\r\n                                        </NavLink>\r\n                                    </div>\r\n                                ) : (null)\r\n                        }\r\n\r\n                        <NavLink to=\"/sellproduct\" className={\"nav-item \" + this.active[5]} href='#'\r\n                            onClick={() => this.changeIndex(5)}\r\n                        >\r\n                            <GiSellCard class=\"nav-item-icon\" />\r\n                            <GiSellCard class=\"nav-item-icon icon-activate\" />\r\n                            <span className=\"nav-item-lable\">Sell Product</span>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                    <div class=\"nav-footer\">\r\n                        <a\r\n                            to=\"/login\"\r\n                            onClick={() => this.logOut()}\r\n                            className={\"nav-item \"}\r\n                            style={{ flex: 5 }}\r\n                        >\r\n                            <FaSignOutAlt class=\"nav-item-icon\" />\r\n                            <span className=\"nav-item-lable\">Sign out</span>\r\n                        </a>\r\n                        <a href=\"#\" className={\"nav-item \"} onClick={() => this.props.changeConfirmPasswordTest()} style={{ flex: 4 }}>\r\n                            <BsInfoCircleFill class=\"nav-item-icon\" />\r\n                            <span className=\"nav-item-lable\">About</span>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n        infoUser: state.infoUser,\r\n        role: state.role,\r\n        statusDarkmode: state.statusDarkmode\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            })\r\n        },\r\n        resetShiftUser: () => {\r\n            dispatch({\r\n                type:\"RESET_SHIFT_USER\"\r\n            })\r\n        },\r\n        resetRecieptUser: () => {\r\n            dispatch({\r\n                type: \"RESET_ALL_RECIEPT_USER\",\r\n            })\r\n        },\r\n        changeConfirmPasswordTest: () => {\r\n            dispatch({\r\n                type: \"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        resetInfoUser: () => {\r\n            dispatch({\r\n                type: \"RESET_INFO_USER\"\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SideNavBar);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DashboardURL.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Profile.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\ReiceiptManager.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodManager.js",["689","690","691","692"],"import { Component } from 'react';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport GoodTable from './GoodPartials/GoodTable';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Button from '@mui/material/Button';\r\nimport SearchBar from './GoodPartials/SearchBar';\r\nimport {connect} from 'react-redux'\r\nimport AddTypeModal from './GoodPartials/AddTypeModal';\r\nimport '../css/GoodManager.css';\r\nimport ConfirmModal from './GoodPartials/ConfirmModal';\r\nimport UpdateGoodModal from './GoodPartials/UpdateGoodModal';\r\nimport EditTypeModal from './GoodPartials/EditTypeModal';\r\nimport AddGoodModal from './GoodPartials/AddGoodModal';\r\nimport axios from 'axios';\r\nimport UpdateTypeModal from './GoodPartials/UpdateTypeModal';\r\nimport XLSX from 'xlsx';\r\n\r\nclass GoodManager extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.loadAllType(); \r\n        this.loadAllGood();\r\n    }\r\n\r\n    async loadAllGood() {\r\n        var resultProduct = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }\r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/`, {\r\n            params: { ...data }\r\n        })\r\n            .then(res => {\r\n                resultProduct = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Get hết từ cái productjoinType\r\n        var result = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, {\r\n            params: { ...data1 }\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n                localStorage.getItem('token', res.data.token);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Lấy các cái jointype\r\n        var joinTypeInfor = [];\r\n        for (let i = 0; i < result.length; i++) {\r\n            joinTypeInfor.push(result[i]);\r\n        }\r\n        console.log(\"joinTypeInfor\", joinTypeInfor);\r\n\r\n        var listProductInfor = [];\r\n        for (let i = 0; i < resultProduct.length; i++) {\r\n            var typeIDList = [];\r\n            var joinType = '';\r\n            for (var j = 0; j < joinTypeInfor.length; j++) {\r\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\r\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) \r\n                {\r\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\r\n                    joinType = joinType + ' ' + this.getTypeNamebyTypeID(joinTypeInfor[j]._id.typeID);\r\n                }\r\n            }\r\n\r\n            listProductInfor.push(\r\n                {\r\n                    ...resultProduct[i],\r\n                    typeIDList: typeIDList,\r\n                    joinType: joinType\r\n                });\r\n        }\r\n        this.props.getProductToReducer(listProductInfor);\r\n    }\r\n\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName=\"Null\";\r\n        console.log(\"typeList\", this.props.typeProduct);\r\n        for(var i = 0; i < this.props.typeProduct.length;i++)\r\n        {   \r\n            if(this.props.typeProduct[i]._id.typeID == typeID)\r\n            {\r\n                typeName = this.props.typeProduct[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        this.props.getProductType(result);\r\n    }\r\n    handleAdd() {\r\n        this.props.changeAddTypeStatus();\r\n        this.props.setAddTypeStatus();\r\n    }\r\n    handleConfirm(){\r\n        this.props.changeConfirmStatus();\r\n        this.props.unsetDelete();\r\n    }\r\n    handleConfirmDelete(){\r\n        this.props.changeConfirmStatus();\r\n        this.props.setDeleteConfirm();\r\n    }\r\n    handleUpdateGood() {\r\n        this.props.changeUpdateGoodStatus();\r\n    }\r\n    handleEditType() {\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Product Manager'\r\n    }   \r\n\r\n    uploadExcel(e){\r\n        e.preventDefault();\r\n        var f;\r\n        try {\r\n            // console.log(\"e\", e.target.files[0]);\r\n            f = e.target.files[0];\r\n        }\r\n        catch(e) {\r\n            console.log(e);\r\n            return;\r\n        }   \r\n        var name = f.name;\r\n        const reader = new FileReader();\r\n        reader.onload = (evt) => { // evt = on_file_select event\r\n            /* Parse data */\r\n            const bstr = evt.target.result;\r\n            const wb = XLSX.read(bstr, {type:'binary'});\r\n            /* Get first worksheet */\r\n            const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            /* Convert array of arrays */\r\n            const data = XLSX.utils.sheet_to_csv(ws, {header:1});\r\n            /* Update state */\r\n            console.log(\"Data>>>\"+data);\r\n        };\r\n        reader.readAsBinaryString(f);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div style={{height: '100%', width: '100%', marginTop: '40px', marginBottom: '40px', paddingBottom: '40px' }}>\r\n                    <div style={{display: 'flex'}}>\r\n                        <Button variant=\"contained\">\r\n                            <Button style={{color: '#fff', textDecoration: 'none'}} onClick={() => this.props.changeStatusAddGood()}>Import</Button>\r\n                        </Button>\r\n                        <SearchBar style={{height: '120px'}}/>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleAdd()} variant=\"contained\">\r\n                            add type\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleEditType()} variant=\"contained\">\r\n                            edit type\r\n                        </Button>\r\n                        <label for=\"upload-excel\">\r\n                            Load Excel\r\n                        </label>\r\n                        <input id=\"upload-excel\" type=\"file\" style={{display: 'none'}} accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" onChange={(e) => this.uploadExcel(e)}></input>\r\n                        {/* <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleConfirmDelete()} variant=\"contained\">\r\n                            Delete\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleConfirm()} variant=\"contained\">\r\n                            Edit\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleUpdateGood()} variant=\"contained\">\r\n                            Update Good\r\n                        </Button> */}\r\n\r\n                     </div>\r\n\r\n                    <GoodTable />\r\n\r\n                    {/* Đây là phần modal */}\r\n\r\n                    {this.props.addTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <AddTypeModal></AddTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.confirmStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                            <ConfirmModal></ConfirmModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.updateGoodStatus ? (\r\n                        <div \r\n                            className=\"modal-add\"\r\n                        >\r\n                            <div onClick={() => {this.props.changeUpdateGoodStatus();}} className=\"modal-overlay\"></div>\r\n                            <UpdateGoodModal\r\n                                style={{\r\n                                    marginTop: 0\r\n                                }}\r\n                            >\r\n                            </UpdateGoodModal>\r\n                        </div>\r\n                    ): null}\r\n                     {this.props.editTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeEditTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <EditTypeModal></EditTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.editTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeEditTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <EditTypeModal></EditTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.statusAddGood ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeStatusAddGood();}} className=\"modal-overlay\"></div>\r\n                            <AddGoodModal></AddGoodModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.statusUpdateType ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeStatusUpdateType();}} className=\"modal-overlay\"></div>\r\n                            <UpdateTypeModal></UpdateTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        deleteStatus: state.deleteStatus,\r\n        updateGoodStatus: state.updateGoodStatus,\r\n        editTypeStatus: state.editTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        statusAddGood: state.statusAddGood,\r\n        infoUser: state.infoUser,\r\n        statusUpdateType: state.statusUpdateType,\r\n        typeProduct: state.typeProduct,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        unsetDelete: () => {\r\n            dispatch({\r\n                type: \"UNSET_DELETE_STATUS\",\r\n            })\r\n        },\r\n        changeUpdateGoodStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\r\n            })\r\n        },\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            })\r\n        },\r\n        setAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        setDeleteConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_DELETE_GOOD\",\r\n            }); \r\n        },\r\n        changeStatusAddGood: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_GOOD_STATUS\",\r\n            }); \r\n        },\r\n        getProductType: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        changeStatusUpdateType: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_TYPE_STATUS\",\r\n            }); \r\n        },\r\n        getProductToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_AND_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n    }\r\n}\r\nexport default connect(mapStateToProps , mapDispatchToProps)(GoodManager);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeeManager.js",["693","694","695","696","697","698","699","700","701","702","703","704","705","706"],"import React, { Component } from 'react';\r\nimport Page from './EmployeePartials/Page';\r\nimport Label from './EmployeePartials/Label';\r\nimport Scrollbar from './EmployeePartials/Scrollbar';\r\nimport SearchNotFound from './EmployeePartials/SearchNotFound';\r\nimport { Icon } from '@iconify/react';\r\nimport { sentenceCase } from 'change-case';\r\nimport {connect} from 'react-redux'\r\nimport plusFill from '@iconify/icons-eva/plus-fill';\r\nimport {\r\n    Card,\r\n    Table,\r\n    Stack,\r\n    Avatar,\r\n    Button,\r\n    Checkbox,\r\n    TableRow,\r\n    TableBody,\r\n    TableCell,\r\n    Container,\r\n    Typography,\r\n    TableContainer,\r\n    TablePagination\r\n} from '@mui/material';\r\nimport EmployeeToolbar from './EmployeePartials/EmployeeToolbar';\r\nimport EmployeeMoreMenu from './EmployeePartials/EmployeeMoreMenu';\r\nimport SackedEmployeeMenu from './EmployeePartials/SackedEmployeeMenu';\r\nimport EmployeeTableHeader from './EmployeePartials/EmployeeTableHeader';\r\nimport USERLIST from './EmployeePartials/fakeData'\r\nimport AddEmployeeModal from './EmployeePartials/AddEmployeeModal';\r\nimport UpdateEmployeeModal from './EmployeePartials/UpdateEmployeeModal';\r\nimport PayMoneyModal from './EmployeePartials/PayMoneyModal';\r\nimport FixedCalendar from './EmployeePartials/FixedCalendar';\r\nimport UnShiftEmployee from './EmployeePartials/UnShiftEmployee';\r\nimport AddNextWeekTimeKeepingModal from './EmployeePartials/AddNextWeekTimeKeeping';\r\nimport UpdateNextWeekTimeKeepingModal from './EmployeePartials/UpdateNextWeekTimeKeeping';\r\nimport NoJobEmployee from './EmployeePartials/NoJobEmployee';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport TimekeepingTable from './EmployeePartials/TimekeepingTable';\r\nimport AddTimeKeepingModal from './EmployeePartials/AddTimeKeeperModal';\r\nimport UpdateTimeKeepingModal from './EmployeePartials/UpdateTimeKeepingModal';\r\n\r\nimport axios from 'axios';\r\n\r\nfunction EmployeeObj(employeeID, managerID, password, firstName, lastName, \r\n    phoneNumber, dateOfBirth, email, address, cardID, startDate, endDate) {\r\n    return {\r\n        employeeID: employeeID,\r\n        managerID: managerID,\r\n        password: password,\r\n        firstName: firstName,\r\n        lastName: lastName,\r\n        phoneNumber: phoneNumber,\r\n        dateOfBirth: dateOfBirth,\r\n        email: email,\r\n        address: address,\r\n        cardID: cardID,\r\n        startDate: startDate,\r\n        endDate: endDate,\r\n    };\r\n}\r\n\r\nconst TABLE_HEAD = [\r\n    { id: 'ID', label: 'ID', alignRight: false },\r\n    { id: 'firstName', label: 'Name', alignRight: false },\r\n    { id: 'lastName', label: 'Last Name', alignRight: false },\r\n    { id: 'old', label: 'Old', alignRight: false },\r\n    { id: 'gender', label: 'Gender', alignRight: false },\r\n    { id: 'province', label: 'Province', alignRight: false },\r\n    { id: 'phoneNumber', label: 'Phone', alignRight: false },\r\n    { id: 'email', label: 'Email', alignRight: false },\r\n    { id: 'adress', label: 'Adress', alignRight: false },\r\n    { id: '' }\r\n];\r\n\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '80px',\r\n    } \r\n})\r\n\r\nvar selected = [];\r\nvar filterName = \"\";\r\nvar filteredUsers = [];\r\nvar listUsers = [];\r\nvar page = 5;\r\nvar rowsPerPage = 5;\r\nclass EmployeeManager extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            change: false,\r\n        }; \r\n        //this.getAllEmployee();\r\n        // this.getAllEmployee();\r\n        this.getSackedEmployee();\r\n    }\r\n\r\n    handleFilterByName(event){\r\n        filterName = event.target.value;\r\n    }\r\n\r\n    addEmployee () {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n    // Lấy danh sách các nhân viên\r\n    async getAllEmployee () {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/employee/`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                alert(err)\r\n            })\r\n        listUsers = [];\r\n        for(var i = 0; i < result.length; i++)\r\n        {\r\n            listUsers.push(result[i]);\r\n        }\r\n        // Thêm vào cái redux\r\n        this.props.getEmployee(listUsers);\r\n        this.setState({change: !this.state.change});\r\n    }\r\n    // Thêm nhân viên\r\n    addEmployeeToDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n                managerID: \"19522006@gm.uit.edu.vn\",\r\n                password: \"abc123\",\r\n                firstName: \"Antonio\",\r\n                lastName: \"Rudiger\",\r\n                phoneNumber: \"03232323232\",\r\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\r\n                email: \"1911@gmail.com\",\r\n                address: \"Wherever\",\r\n                cardID: \"25110985819\",\r\n                startDate: \"2021-11-02T00:00:00.000Z\",\r\n                endDate: \"2021-11-31T00:00:00.000Z\",\r\n            }   \r\n        }\r\n        axios.post(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu thành công\")\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                console.log(err);\r\n            })\r\n    }\r\n    // Xoá nhân viên\r\n    deleteEmployeeFromDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee:\r\n            [\r\n                {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\", \r\n                },\r\n            ]\r\n            \r\n        }\r\n        axios.delete(`http://localhost:5000/api/employee`,{data: data})\r\n            .then(res => {\r\n                alert(\"delete employee(s) success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n    }\r\n    // Sửa nhân viên\r\n    updateEmployee()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n                managerID: \"19522006@gm.uit.edu.vn\",\r\n                password: \"abc123\",\r\n                firstName: \"Antonio\",\r\n                lastName: \"Rudiger Christensen\",\r\n                phoneNumber: \"03232323232\",\r\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\r\n                email: \"1911@gmail.com\",\r\n                address: \"Wherever\",\r\n                cardID: \"25110985819\",\r\n                startDate: \"2021-11-02T00:00:00.000Z\",\r\n                endDate: \"2021-11-31T00:00:00.000Z\",\r\n            }\r\n        }\r\n        axios.put(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Update success\");\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    async getSackedEmployee () {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/employee/delete`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                // alert(\"Lấy hết đc product ròi anh chai\");\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        this.props.getSackedEmployee(result);\r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    backToWork() {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee:\r\n            [\r\n                {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\", \r\n                },\r\n            ]\r\n            \r\n        }\r\n        axios.patch(`http://localhost:5000/api/employee/delete`, data)\r\n            .then(res => {\r\n                alert(\"back to work success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n    }\r\n\r\n    // Xoá nhân viên hoàn toàn\r\n    deleteEmployeePermantlyFromDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee:\r\n            [\r\n                {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\", \r\n                },\r\n            ]\r\n            \r\n        }\r\n        axios.delete(`http://localhost:5000/api/employee/delete`,{data: data})\r\n            .then(res => {\r\n                alert(\"delete permantly employee(s) success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Employee Manager'\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div\r\n                style={{display: 'block', overflowY: 'auto', height: '100vh'}}\r\n            >\r\n                <Container\r\n                    style={{marginTop: 20, }}\r\n                >\r\n                    <span\r\n                        style = {{\r\n                            color: \"#fff\",\r\n                            padding: 12,\r\n                            border: '1px solid cyan',\r\n                            backgroundColor: '#222'\r\n                        }}\r\n                    >\r\n                        Current Employee\r\n                    </span>\r\n                    <Button\r\n                        variant='contained'\r\n                        startIcon={<Icon icon={plusFill} />}\r\n                        onClick={() => this.addEmployee()}\r\n                    >\r\n                        New User\r\n                    </Button>\r\n\r\n                    <Card>\r\n                    {/* <EmployeeToolbar\r\n                        numSelected={selected.length}\r\n                        filterName={filterName}\r\n                        // onFilterName={this.handleFilterByName(event)}\r\n                    /> */}\r\n                    <TableContainer style ={{maxHeight:'500px',overflowY: 'scroll'}}>\r\n                        <Table>\r\n                            <EmployeeTableHeader\r\n                                // order={order}\r\n                                // orderBy={orderBy}\r\n                                headLabel={TABLE_HEAD}\r\n                                rowCount={USERLIST.length}\r\n                                numSelected={selected.length}\r\n                                // onRequestSort={handleRequestSort}\r\n                                // onSelectAllClick={handleSelectAllClick}\r\n                            />\r\n                            <TableBody\r\n                                style={{height: '100%', width: '100%'}}\r\n                            >\r\n                            {\r\n                                this.props.listEmployee.employees.map((row) => {\r\n                                return (\r\n                                    <TableRow\r\n                                        hover\r\n                                        // key={id}\r\n                                        tabIndex={-1}\r\n                                        role=\"checkbox\"\r\n                                        // selected={isItemSelected}\r\n                                        // aria-checked={isItemSelected}\r\n                                    >\r\n                                        <TableCell padding=\"checkbox\">\r\n                                            <Checkbox\r\n                                            // checked={isItemSelected}\r\n                                            // onChange={(event) => handleClick(event, name)}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">\r\n                                            {row._id.employeeID}\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} component=\"th\" scope=\"row\" padding=\"none\">\r\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n                                            {/* <Avatar alt={row.firstName} src={avatarUrl} /> */}\r\n                                            <Typography variant=\"subtitle2\" noWrap>\r\n                                                {row.firstName}\r\n                                            </Typography>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.lastName}</TableCell>  \r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">\r\n                                            {row.dateOfBirth.indexOf('T') != -1 ? row.dateOfBirth.substring(0,row.dateOfBirth.indexOf('T')): row.dateOfBirth}\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{\"gender\"}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{\"province\"}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.phoneNumber}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.email}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.address}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"right\">\r\n                                            <EmployeeMoreMenu\r\n                                                data={row._id.employeeID}    \r\n                                            >\r\n                                            </EmployeeMoreMenu>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n\r\n                    {/* <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={USERLIST.length}\r\n                        // rowsPerPage={rowsPerPage}\r\n                        // page={page}\r\n                        // onPageChange={handleChangePage}\r\n                        // onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    /> */}\r\n                    </Card>\r\n                </Container>\r\n                <FixedCalendar/>\r\n                <NoJobEmployee></NoJobEmployee>\r\n                <UnShiftEmployee/>\r\n                <TimekeepingTable></TimekeepingTable> \r\n                \r\n\r\n                {/* Sacked EMployee */}\r\n                <Container\r\n                    style={{marginTop: 20, }}\r\n                >\r\n                    <span\r\n                        style = {{\r\n                            color: \"#fff\",\r\n                            padding: 12,\r\n                            border: '1px solid red',\r\n                            backgroundColor: 'red'\r\n                        }}\r\n                    >\r\n                        Sacked Employee\r\n                    </span>\r\n\r\n                    <Card>\r\n                    {/* <EmployeeToolbar\r\n                        numSelected={selected.length}\r\n                        filterName={filterName}\r\n                        // onFilterName={this.handleFilterByName(event)}\r\n                    /> */}\r\n                    <TableContainer style ={{maxHeight:'500px',overflowY: 'scroll'}}>\r\n                        <Table>\r\n                            <EmployeeTableHeader\r\n                                // order={order}\r\n                                // orderBy={orderBy}\r\n                                headLabel={TABLE_HEAD}\r\n                                // rowCount={USERLIST.length}\r\n                                // numSelected={selected.length}\r\n                                // onRequestSort={handleRequestSort}\r\n                                // onSelectAllClick={handleSelectAllClick}\r\n                            />\r\n                            <TableBody\r\n                                style={{height: '100%', width: '100%'}}\r\n                            >\r\n                            {\r\n                                this.props.listSackedEmployee.employees.map((row) => {\r\n                                    \r\n                                    // console.log(\"row\", row);\r\n                                    // if(row == {} || row == null) return (<div></div>);\r\n                                return (\r\n                                    <TableRow\r\n                                        hover\r\n                                        // key={id}\r\n                                        tabIndex={-1}\r\n                                        role=\"checkbox\"\r\n                                        // selected={isItemSelected}\r\n                                        // aria-checked={isItemSelected}\r\n                                    >\r\n                                        <TableCell className = {classes.goodTable_Cell} padding=\"checkbox\">\r\n                                            <Checkbox\r\n                                            // checked={isItemSelected}\r\n                                            // onChange={(event) => handleClick(event, name)}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">\r\n                                            {row._id.employeeID}\r\n                                        </TableCell>\r\n                                        <TableCell component=\"th\" scope=\"row\" padding=\"none\">\r\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n                                            {/* <Avatar alt={row.firstName} src={avatarUrl} /> */}\r\n                                            <Typography variant=\"subtitle2\" noWrap>\r\n                                                {row.firstName}\r\n                                            </Typography>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.lastName}</TableCell>  \r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.dateOfBirth.substring(0,row.dateOfBirth.indexOf('T'))}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{\"gender\"}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{\"province\"}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.phoneNumber}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.email}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.address}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"right\">\r\n                                            <SackedEmployeeMenu\r\n                                                data={row._id.employeeID}    \r\n                                            >\r\n                                            </SackedEmployeeMenu>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n\r\n                    {/* <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={USERLIST.length}\r\n                        // rowsPerPage={rowsPerPage}\r\n                        // page={page}\r\n                        // onPageChange={handleChangePage}\r\n                        // onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    /> */}\r\n                    </Card>\r\n                </Container>\r\n\r\n\r\n                {/* Đây là phần modal */}\r\n                {this.props.addEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeAddEmployeeStatus();}} className=\"modal-overlay\"></div>\r\n                        <AddEmployeeModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </AddEmployeeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.updateEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeUpdateEmployeeStatus();}} \r\n                            className=\"modal-overlay\"\r\n                        />\r\n                        <UpdateEmployeeModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </UpdateEmployeeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.payEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changePayEmployeeStatus();}} className=\"modal-overlay\"></div>\r\n                        <PayMoneyModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </PayMoneyModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.statusAddNextWeekTimeKeeping \r\n                ? \r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeAddNextWeekTimeKeepingStatus();}} className=\"modal-overlay\"></div>\r\n                        <AddNextWeekTimeKeepingModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </AddNextWeekTimeKeepingModal>\r\n                    </div>\r\n                : null\r\n                }\r\n                {this.props.statusUpdateNextWeekTimeKeeping \r\n                ? \r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeUpdateNextWeekTimeKeepingStatus();}} className=\"modal-overlay\"></div>\r\n                        <UpdateNextWeekTimeKeepingModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </UpdateNextWeekTimeKeepingModal>\r\n                    </div>\r\n                : null\r\n                }\r\n                {this.props.statusAddTimeKeeping \r\n                ? \r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeAddTimeKeepingStatus()}} className=\"modal-overlay\"></div>\r\n                        <AddTimeKeepingModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </AddTimeKeepingModal>\r\n                    </div>\r\n                : null\r\n                }\r\n                {this.props.statusUpdateTimeKeeping \r\n                ? \r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeUpdateTimeKeepingStatus();}} className=\"modal-overlay\"></div>\r\n                        <UpdateTimeKeepingModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </UpdateTimeKeepingModal>\r\n                    </div>\r\n                : null\r\n                }\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\r\n        payEmployeeStatus: state.payEmployeeStatus,\r\n        infoUser: state.infoUser,\r\n        listEmployee: state.listEmployee,\r\n        listSackedEmployee: state.listSackedEmployee,\r\n        statusAddNextWeekTimeKeeping: state.statusAddNextWeekTimeKeeping,\r\n        statusUpdateNextWeekTimeKeeping: state.statusUpdateNextWeekTimeKeeping,\r\n        statusAddTimeKeeping: state.statusAddTimeKeeping,\r\n        statusUpdateTimeKeeping: state.statusUpdateTimeKeeping,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changePayEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        getSackedEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE_SACKED\",\r\n                employees: data,\r\n            });\r\n        },\r\n        changeAddNextWeekTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateNextWeekTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        changeAddTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n    }\r\n}\r\nexport default connect(mapStateToProps , mapDispatchToProps)((withStyles(styles, {withTheme: true}))(EmployeeManager));\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\DashBoard.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\SellProduct.js",["707"],"import React, { Component } from 'react';\r\nimport { Container, Grid, Button, CardActionArea, CardActions, CardMedia } from '@mui/material';\r\nimport '../../css/SellProduct.css'\r\nimport Tabs from './Tabs'\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Typography from '@mui/material/Typography';\r\nimport exampleImg from '../../img/good-example.jpg'\r\nimport { BiPlusMedical } from 'react-icons/bi';\r\nimport { connect } from 'react-redux'\r\nimport axios from 'axios';\r\nimport ShoppingBags from './ShoppingBags';\r\nimport Printf from './Print'\r\nimport HistoryReciept from './HistoryReciept';\r\n\r\nclass SellProduct extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            change: false,\r\n            test1: true,\r\n        }\r\n        this.storeID = this.props.infoUser.managerID ? this.props.infoUser.managerID : this.props.infoUser.email;\r\n        this.loadAllType();\r\n        this.loadAllGood();\r\n\r\n    }\r\n    storeID = \"\";\r\n    bull = (\r\n        <Box\r\n            component=\"span\"\r\n            sx={{ display: 'inline-block', mx: '2px', transform: 'scale(0.8)' }}\r\n        >\r\n            •\r\n        </Box>\r\n    );\r\n\r\n    AddProduct = (value) => {\r\n        if (value.remain === 0) {\r\n            this.props.showAlert('Shout out !', 'warning')\r\n        } else {\r\n            var isCheck = false;\r\n            var currentQuantity;\r\n            var maxQuantity;\r\n            this.props.shoppingBags.map(value1 => {\r\n                if (value1.product.name === value.name) {\r\n                    isCheck = true;\r\n                    currentQuantity = value1.quantity\r\n                    maxQuantity = value.remain\r\n                }\r\n                return value;\r\n            })\r\n            if (isCheck) {\r\n                if (currentQuantity < maxQuantity) {\r\n                    this.props.raiseQuantity(value.name);\r\n                }\r\n            } else {\r\n                const newProduct = {\r\n                    product: value,\r\n                    quantity: 1,\r\n                }\r\n                this.props.addNewProductToShoppingBags(newProduct);\r\n            }\r\n        }\r\n    }\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.storeID,\r\n            }\r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`,\r\n            {\r\n                params: { ...data }\r\n            })\r\n            .then(res => {\r\n                result = res.data.data;\r\n                localStorage.getItem('token', res.data.token);\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        var listTypeInfor = [];\r\n        for (var i = 0; i < result.length; i++) {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n        this.props.getTypeToReducer(listTypeInfor);\r\n        this.setState({ change: !this.state.change });\r\n    }\r\n\r\n    async loadAllGood() {\r\n        var resultProduct = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.storeID,\r\n            }\r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/`, {\r\n            params: { ...data }\r\n        })\r\n            .then(res => {\r\n                resultProduct = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                alert(err)\r\n            })\r\n        // Get hết từ cái productjoinType\r\n        var result = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.storeID,\r\n            }\r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, {\r\n            params: { ...data1 }\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n                localStorage.getItem('token', res.data.token);\r\n            })\r\n            .catch(err => {\r\n                alert(err)\r\n            })\r\n        // Lấy các cái jointype\r\n        var joinTypeInfor = [];\r\n        for (let i = 0; i < result.length; i++) {\r\n            joinTypeInfor.push(result[i]);\r\n        }\r\n\r\n        var listProductInfor = [];\r\n        for (let i = 0; i < resultProduct.length; i++) {\r\n            var typeIDList = [];\r\n            for (var j = 0; j < joinTypeInfor.length; j++) {\r\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\r\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) {\r\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\r\n                }\r\n            }\r\n            listProductInfor.push(\r\n                {\r\n                    ...resultProduct[i],\r\n                    typeIDList: typeIDList\r\n                });\r\n        }\r\n        this.props.getProductToReducer(listProductInfor);\r\n        this.setState({ change: !this.state.change });\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'SellProduct'\r\n    }\r\n\r\n    render() {\r\n        const hideHistory = this.props.hideHistoryReceipt\r\n        document.onkeydown = function (e) {\r\n            switch (e.key.charCodeAt()) {\r\n                case 69:\r\n                    hideHistory()\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n        return (\r\n            <div id=\"scroll-bar\" className=\"sell-product\" >\r\n                <Container style={{ marginBottom: '20px' }} maxWidth=\"xl\">\r\n                    <Grid container spacing={2}>\r\n                        <Grid item lg={8} md={12} sm={12}>\r\n                            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', borderRadius: '8px', marginTop: '20px', backgroundColor: '#ffffff', height: 'calc(100vh - 40px)', overflow: 'hidden' }}>\r\n                                <div style={{ overflow: 'hidden', marginBottom: '5px' }}>\r\n                                    <Tabs></Tabs>\r\n                                </div>\r\n                                <Container id=\"choses-product\" style={{ height: '94%', overflowY: 'scroll' }} maxWidth=\"xl\">\r\n                                    <Grid container spacing={2}>\r\n                                        {(this.props.listProduct.state !== undefined && this.props.listProduct.state.length !== 0)\r\n                                            ? this.props.listProduct.state.filter(value => {\r\n                                                if (this.props.chooseTypeProductID === 'all') {\r\n                                                    return value;\r\n                                                }\r\n                                                if (value.typeIDList.includes(this.props.chooseTypeProductID)) {\r\n                                                    return value;\r\n                                                }\r\n                                            }).map(value => (\r\n                                                <Grid item lg={3} md={4} sm={4} xs={4}>\r\n                                                    <Card onClick={() => this.AddProduct(value)}>\r\n                                                        <CardActionArea>\r\n                                                            <CardMedia\r\n                                                                style={{ display: (value.remain === 0) ? 'block' : 'none' }}\r\n                                                                component=\"img\"\r\n                                                                height=\"140\"\r\n                                                                image='https://res.cloudinary.com/databaseimg/image/upload/v1637083732/aqd37xtgxukcq3x9eb4q.png'\r\n                                                                alt=\"green iguana\"\r\n                                                            />\r\n                                                            <div style={{ display: (value.remain !== 0) ? 'block' : 'none' }}>\r\n                                                                {\r\n                                                                    value.imgUrl === \"none\"\r\n                                                                        ? <CardMedia\r\n                                                                            component=\"img\"\r\n                                                                            height=\"140\"\r\n                                                                            image={exampleImg}\r\n                                                                            alt=\"green iguana\"\r\n                                                                        />\r\n                                                                        : <CardMedia\r\n                                                                            component=\"img\"\r\n                                                                            height=\"140\"\r\n                                                                            image={value.imgUrl}\r\n                                                                            alt=\"green iguana\"\r\n                                                                        />\r\n                                                                }\r\n                                                            </div>\r\n\r\n                                                            <CardContent style={{ padding: '5px' }}>\r\n                                                                <Typography style={{ textAlign: 'center' }} gutterBottom variant=\"h6\" component=\"div\">\r\n                                                                    {value.name}\r\n                                                                </Typography>\r\n                                                            </CardContent>\r\n                                                            <CardContent style={{ textAlign: 'center', margin: '0', padding: '0' }}>\r\n                                                                <Typography style={{ textAlign: 'center', margin: '0', padding: '0', fontSize: '0.7rem', fontWeight: '700', color: '#00000080' }} gutterBottom variant=\"h6\" component=\"div\">\r\n                                                                    Quantity: {value.remain}\r\n                                                                </Typography>\r\n                                                            </CardContent>\r\n                                                        </CardActionArea>\r\n                                                        <CardActions style={{ justifyContent: 'center' }}>\r\n                                                            <Button style={{ color: 'green', fontWeight: '700' }} endIcon={<BiPlusMedical></BiPlusMedical>} size=\"medium\" color=\"primary\">\r\n                                                                {value.sellPrice}\r\n                                                            </Button>\r\n                                                        </CardActions>\r\n                                                    </Card>\r\n                                                </Grid>\r\n                                            )) : (<div style={{ width: '100%', height: '100%', textAlign: 'center', marginTop: '100px' }}>\r\n                                                <h3>Không có gì</h3>\r\n                                            </div>)}\r\n                                    </Grid>\r\n                                </Container>\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item lg={4} md={12}>\r\n                            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', borderRadius: '8px', marginTop: '20px', backgroundColor: '#ffffff', height: 'calc(100vh - 40px)', overflow: 'hidden', overflowX: 'hidden' }}>\r\n                                <div id=\"choses-product\" style={{ backgroundColor: '#e0e0e0', height: '60%', margin: '10px', overflowY: 'scroll', overflowX: 'hidden' }} >\r\n                                    <Grid sty container spacing={0}>\r\n                                        {/* Table */}\r\n                                        <Grid item className=\"customizeTable\" style={{ backgroundColor: '#bdbdbd', alignContent: 'center', justifyContent: 'center', borderBottom: '2px solic black' }} md={12} sm={12}>\r\n                                            <Grid style={{ textAlign: 'center', alignItems: 'center', justifyItems: 'center', fontWeight: 'bold' }} container spacing={0}>\r\n                                                <Grid item md={1} sm={1}>\r\n                                                    #\r\n                                                </Grid>\r\n                                                <Grid item md={1} sm={1}>\r\n                                                </Grid>\r\n                                                <Grid item md={4} sm={4}>\r\n                                                    Name\r\n                                                </Grid>\r\n                                                <Grid item md={3} sm={3}>\r\n                                                    Quantity\r\n                                                </Grid>\r\n                                                <Grid style={{ fontWeight: '700' }} item md={3} sm={3}>\r\n                                                    Giá\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        {/* Bắt đầu hóa đơn */}\r\n                                        <ShoppingBags></ShoppingBags>\r\n                                    </Grid>\r\n                                </div>\r\n                                <div style={{ height: '40%' }}>\r\n                                    <Printf ></Printf>\r\n                                </div>\r\n                            </div>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Container>\r\n                {this.props.statusShowHistoryReciept ? (\r\n                    <HistoryReciept></HistoryReciept>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        listProduct: state.listProduct,\r\n        chooseTypeProductID: state.chooseTypeProduct,\r\n        infoUser: state.infoUser,\r\n        shoppingBags: state.shoppingBags,\r\n        statusShowHistoryReciept: state.statusShowHistoryReciept,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_STATUS\",\r\n            });\r\n        },\r\n        getTypeToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        getProductToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_AND_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        addNewProductToShoppingBags: (newProduct) => {\r\n            dispatch({\r\n                type: \"ADD_NEW_PRODUCT_SHOPPING_BAGS\",\r\n                newProduct: newProduct,\r\n            })\r\n        },\r\n        raiseQuantity: (name) => {\r\n            dispatch({\r\n                type: \"RAISE_QUANTITY_SHOPPING_BAGS\",\r\n                name: name,\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        hideHistoryReceipt:() => {\r\n            dispatch({\r\n                type: \"CHANGE_HISTORY_RECIEPT_STATUS\"\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SellProduct);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\HistoryReciept.js",["708","709"],"import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport CollapsibleTable from './TableReciept'\r\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\r\n\r\nfunction HistoryReciept(props) {\r\n\r\n    const darkmode = useSelector(state => state.statusDarkmode)\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div style={{ overflow: 'hidden' }} className=\"modal-history-reciept\">\r\n            <div onClick={() => { dispatch({ type: \"CHANGE_HISTORY_RECIEPT_STATUS\" }) }} className=\"modal-overlay\"></div>\r\n            <div className=\"history-list-receipt\">\r\n                <Card>\r\n                    <CardHeader style={{ color: !darkmode ? '#0091ea' : 'white', backgroundColor: !darkmode ? '#efeeef' : '#455a64' }} title=\"History Reciept\" />\r\n                    <Divider></Divider>\r\n                </Card>\r\n                <div id=\"choses-product\" style={{ margin: '30px', height: '82%', overflow: 'hidden', overflowY: 'scroll' }}>\r\n                    <CollapsibleTable></CollapsibleTable>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HistoryReciept;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ShoppingBags.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateTimeKeepingModal.js",["710","711","712","713","714","715","716","717","718","719","720","721","722","723","724","725","726"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, \r\n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nvar listDayInWeek = [\r\n    {ID:'T2',name:'Thứ hai'}, \r\n    {ID:'T3',name:'Thứ ba'}, \r\n    {ID:'T4',name:'Thứ tư'}, \r\n    {ID:'T5',name:'Thứ năm'}, \r\n    {ID:'T6',name:'Thứ sáu'}, \r\n    {ID:'T7',name:'Thứ bảy'}, \r\n    {ID:'CN',name:'Chủ nhật'}\r\n];\r\n\r\nclass UpdateTimeKeepingModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n            timeKeepingID: '',\r\n            dayChosed: '',\r\n            shiftID: '',\r\n        };\r\n        this.loadInitialData()\r\n    }\r\n\r\n    // Thêm nhân viên\r\n    async addEmployeeToDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: document.querySelector('input[name=\"ID\"]').value,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                managerID: this.props.infoUser.email,\r\n                password: document.querySelector('input[name=\"password\"]').value,\r\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\r\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\r\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\r\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\r\n                email: document.querySelector('input[name=\"email\"]').value,\r\n                address: document.querySelector('input[name=\"adress\"]').value,\r\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\r\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\r\n                // endDate: \"2021-11-31T00:00:00.000Z\",\r\n            }   \r\n        }\r\n        console.log(data);\r\n        await axios.post(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu thành công\")\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    // cancel = () => {\r\n    //     this.props.changeAddNextWeekTimeKeepingStatus();\r\n    // }\r\n\r\n    // addEmployee = () => {\r\n    //     this.addEmployeeToDatabase();\r\n    //     this.props.changeAddEmployeeStatus();\r\n    // }\r\n    realDate = '';\r\n    shiftID = '';\r\n    dayChosed = '';\r\n    timeKeepingID = '';\r\n    loadInitialData()\r\n    {\r\n        console.log(this.props.updateTimeKeepingValue.state);\r\n        this.realDate = this.props.updateTimeKeepingValue.state.realDate;\r\n        this.shiftID = this.props.updateTimeKeepingValue.state._id.shiftType._id.shiftID;\r\n        this.timeKeepingID = this.props.updateTimeKeepingValue.state._id.employee._id.employeeID;\r\n        this.dayChosed= this.props.updateTimeKeepingValue.state._id.dateInWeek;\r\n        this.setState({\r\n            shiftID : this.props.updateTimeKeepingValue.state._id.shiftType._id.shiftID,\r\n            dayChosed: this.props.updateTimeKeepingValue.state._id.dateInWeek,\r\n            timeKeepingID: this.props.updateTimeKeepingValue.state._id.employee._id.employeeID,\r\n        });\r\n    }\r\n\r\n    findIndexCurrentKeepingInRedux(id)\r\n    {\r\n        //Đụng đến nếu sửa bảng\r\n        var listToSearch = this.props.listTimeKeeper;\r\n        for(var i = 0 ; i < listToSearch.length ; i ++)\r\n        {\r\n            if(listToSearch[i]._id.dateInWeek == id.dateInWeek && \r\n                listToSearch[i]._id.shiftType._id.shiftID == id.shiftType._id.shiftID&& \r\n                listToSearch[i]._id.employee._id.employeeID == id.employee._id.employeeID)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    checkContraint() {\r\n        if(this.dayChosed.length == 0)\r\n        {\r\n            alert(\"Chưa chọn ngày nào trong tuần\");\r\n            return false;\r\n        }\r\n        if(this.shiftID.length == 0)\r\n        {\r\n            alert(\"Chưa chọn ca nào\");\r\n            return false;\r\n        }\r\n        // console.log(this.state.timeKeepingID );\r\n        if( this.timeKeepingID == undefined || this.timeKeepingID.length == 0)\r\n        {\r\n            alert(\"Chưa chọn nhân viên nào để chấm công\"); \r\n            return false;\r\n        }\r\n        // Có CSDL thì báo xem có trùng với cái cũ ko nữa\r\n        \r\n        alert(\"Đã check hết constraint\");\r\n        return true;\r\n    }\r\n\r\n\r\n    UpdateChange() {\r\n        if(this.checkContraint()==false) return;\r\n        const data = {\r\n            _id: {\r\n                dateInWeek: this.dayChosed,\r\n                storeID: this.props.infoUser.email,\r\n                shiftType: {\r\n                    _id: {\r\n                        shiftID: this.shiftID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n                employee: {\r\n                    _id: {\r\n                        employeeID: this.timeKeepingID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n            },\r\n            realDate: document.querySelector('input[name=\"realDate\"]').value,\r\n        };\r\n        // axios.put(`http://localhost:5000/api/????`, data)\r\n        //     .then(res => {\r\n        //         console.log(\"Update success\");\r\n        //         alert('Đã update thành công sản phẩm')\r\n        //     })\r\n        //     .catch(err => {\r\n        //         console.log(err);\r\n        //     })\r\n        this.props.updateTimeKeeper(data, this.findIndexCurrentKeepingInRedux(data._id));\r\n        console.log(data);\r\n        this.props.changeUpdateTimeKeepingStatus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \r\n                    title=\"Update TimeKeeper\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            Real Date\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"date\" \r\n                                            name='realDate'\r\n                                            readOnly={true}\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.realDate}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Choose Day in week\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 120 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                readOnly={true}\r\n                                                value = {this.dayChosed}\r\n                                                onChange={(event) => {\r\n                                                    this.dayChosed = event.target.value;\r\n                                                    this.setState({dayChosed: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    listDayInWeek.map((item) =>\r\n                                                        <MenuItem value={item.ID}>\r\n                                                            {item.name}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n\r\n                                    <Grid item md={8} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>\r\n                                            Choose Shift\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 220 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                readOnly={true}\r\n                                                value={this.shiftID}\r\n                                                onChange={(event) => {\r\n                                                    this.shiftID = event.target.value;\r\n                                                    this.setState({shiftID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                    : this.props.listShift.map((shift) =>\r\n                                                        <MenuItem value={shift._id.shiftID}>\r\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            TimeKeeping Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                readOnly={true}\r\n                                                value={this.timeKeepingID}\r\n                                                onChange={(event) => {\r\n                                                    this.timeKeepingID = event.target.value;\r\n                                                    this.setState({timeKeepingID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        !(this.state.alterID == item._id.employeeID) ?\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                        : null\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.UpdateChange()}>\r\n                                            Update Change\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        listTimeKeeper: state.listTimeKeeping,\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listShift: state.listShift,\r\n        listEmployee: state.listEmployee,\r\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\r\n        updateTimeKeepingValue: state.updateTimeKeepingValue,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeUpdateTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        addNewTimeKeeper: (data) => {\r\n            dispatch({\r\n                type: \"ADD_NEW_TIME_KEEPER\",\r\n                data: data,\r\n            });\r\n        }, \r\n        updateTimeKeeper: (data, indexOfVal) => {\r\n            dispatch({\r\n                type: \"UPDATE_TIMEKEEPER\",\r\n                data: data,\r\n                index: indexOfVal\r\n            });\r\n        }, \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateTimeKeepingModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Print.js",["727","728","729","730","731","732","733"],"import React from 'react';\r\nimport ReactToPrint from 'react-to-print';\r\nimport { connect } from 'react-redux';\r\nimport ComponentToPrint from './ComponentToPrint';\r\nimport axios from 'axios';\r\n\r\n\r\nclass Printf extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      percentDiscount: 0,\r\n      infoReciept: [],\r\n      code: '',\r\n      date: new Date(),\r\n      MAHD: \"HD\" + this.makeCode(6),\r\n      moneyReduce: 0,\r\n      coupon: null,\r\n    }\r\n  }\r\n\r\n\r\n  totalMoney = () => {\r\n    let total = 0;\r\n    this.props.shoppingBags.map(value => {\r\n      total += value.quantity * value.product.sellPrice;\r\n    })\r\n    return total;\r\n  }\r\n\r\n  reduceMoney = () => {\r\n    let total = 0;\r\n    this.props.shoppingBags.map(value => {\r\n      total += value.quantity * value.product.sellPrice;\r\n    })\r\n    if (total !== 0) {\r\n      total = total * this.state.percentDiscount / 100\r\n      return total;\r\n    }\r\n    return total;\r\n  }\r\n\r\n  totalFinalMoney = () => {\r\n    let total = 0;\r\n    this.props.shoppingBags.map(value => {\r\n      total += value.quantity * value.product.sellPrice;\r\n    })\r\n    if (total !== 0) {\r\n      total -= total * this.state.percentDiscount / 100\r\n      return total;\r\n    }\r\n    return total;\r\n  }\r\n\r\n  makeCode = (length) => {\r\n    var result = '';\r\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    var charactersLength = characters.length;\r\n    for (var i = 0; i < length; i++) {\r\n      result += characters.charAt(Math.floor(Math.random() *\r\n        charactersLength));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  getProductByID() {\r\n\r\n  }\r\n\r\n  addReciept = async () => {\r\n    if (this.props.shoppingBags.length === 0) {\r\n      this.props.hideAlert()\r\n      this.props.showAlert(\"Cart empty \", \"warning\")\r\n    } else {\r\n      let code = this.makeCode(8);\r\n      var isContinue = true;\r\n      this.setState({\r\n        code: code\r\n      })\r\n      const data = {\r\n        MAHD: code,\r\n        idUser: this.props.infoUser.employeeID ? this.props.infoUser.employeeID : this.props.infoUser._id,\r\n        name: this.props.infoUser.lastName + \" \" + this.props.infoUser.firstName,\r\n        date: this.dateFunction(),\r\n        discount: this.state.percentDiscount,\r\n        totalMoney: this.totalMoney(),\r\n        totalFinalMoney: this.totalFinalMoney(),\r\n        listProduct: this.props.shoppingBags,\r\n        time: this.state.date.getHours() + \":\" + this.state.date.getMinutes(),\r\n        isEdit: false,\r\n        oldBill: this.props.statusEditInfoBill ? this.props.InfomationBillEdit : null,\r\n        coupon: this.state.coupon\r\n      }\r\n      await axios.post('http://localhost:5000/api/sell-product/add-reciept', {\r\n        email: this.props.infoUser.managerID ? this.props.infoUser.managerID : this.props.infoUser.email,\r\n        token: localStorage.getItem('token'),\r\n        data: data,\r\n      })\r\n        .then(res => {\r\n          if (res.status === 200) {\r\n            localStorage.setItem('token', res.data.token)\r\n            if (this.props.statusEditInfoBill) {\r\n              axios.post('http://localhost:5000/api/sell-product/edit-reciept', {\r\n                MAHD: this.props.InfomationBillEdit.MAHD,\r\n                token: localStorage.getItem('token'),\r\n                email: this.props.infoUser.email,\r\n              })\r\n                .then(res => {\r\n                  this.props.changeStatusEditRecipt()\r\n                  this.props.editShoppingBar(this.props.InfomationBillEdit.MAHD)\r\n                })\r\n                .catch(err => {\r\n                  this.props.changeLoginStatus();\r\n                  this.props.hideAlert();\r\n                  this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n                })\r\n\r\n            }\r\n\r\n            if (this.state.coupon) {\r\n              this.props.updateQuantityCoupon(this.state.coupon.idCoupon)\r\n            }\r\n\r\n            this.setState({\r\n              infoReciept: this.props.shoppingBags,\r\n            })\r\n            this.props.hideAlert()\r\n            this.props.showAlert(\"Print bill success\", \"success\")\r\n            this.props.addRecieptToHistory(data);\r\n            this.setState({\r\n              coupon: null,\r\n            })\r\n          }\r\n        })\r\n        .catch(err => {\r\n          this.props.changeLoginStatus();\r\n          this.props.hideAlert();\r\n          this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n          isContinue = false;\r\n        })\r\n      if (isContinue) {\r\n        console.log(\"Chạy thành công rồi\")\r\n        // Update số lượng sản phẩm ở đây\r\n        console.log(\"this.props.shoppingBags\", this.props.shoppingBags)\r\n        for (var i = 0; i < this.props.shoppingBags.length; i++) {\r\n          const data = {\r\n            token: localStorage.getItem('token'),\r\n            product: {\r\n              _id:\r\n              {\r\n                productID: this.props.shoppingBags[i].product._id.productID,\r\n                importDate: this.props.shoppingBags[i].product._id.importDate,\r\n                storeID: this.props.shoppingBags[i].product._id.storeID,\r\n              },\r\n              remain: this.props.shoppingBags[i].product.remain - this.props.shoppingBags[i].quantity,\r\n            }\r\n          }\r\n          axios.put(`http://localhost:5000/api/product`, data)\r\n            .then(res => {\r\n              console.log(\"Update success\", i);\r\n              // Xử lý ở redux\r\n              const dataRedux = data.product;\r\n              this.props.decreaseRemainProduct(dataRedux);\r\n            })\r\n            .catch(err => {\r\n              console.log(err);\r\n            })\r\n        }\r\n\r\n\r\n        this.props.resetShoppingBag();\r\n      }\r\n\r\n\r\n\r\n    }\r\n  }\r\n\r\n  CancelEditReiept = () => {\r\n    this.props.changeStatusEditRecipt()\r\n    this.props.resetShoppingBag()\r\n  }\r\n\r\n  dateFunction = () => {\r\n    let month = this.state.date.getMonth() + 1;\r\n    return \"  \" + this.state.date.getDate() + \" / \" + month + \" / \" + this.state.date.getFullYear()\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    let now = new Date()\r\n    let money = this.totalMoney();\r\n    let percent = 0;\r\n    let reduceMoney = 0;\r\n    this.props.listCoupon.map(value => {\r\n      let start = new Date(value.timeFrom)\r\n      let end = new Date(value.timeEnd)\r\n      if (value.quantity > 0) {\r\n        if (now - start >= 0 && end - now >= 0) {\r\n          if (money >= Number(value.minTotal)) {\r\n            let index = money * Number(value.percent) / 100;\r\n            if (index >= reduceMoney) {\r\n              percent = Number(value.percent);\r\n              reduceMoney = index;\r\n              this.setState({\r\n                coupon: value,\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    this.setState({\r\n      percentDiscount: Number(percent)\r\n    })\r\n  }\r\n\r\n\r\n  componentWillMount() {\r\n    console.log(this.props.listCoupon)\r\n    let now = new Date()\r\n    let money = this.totalMoney();\r\n    let percent = 0;\r\n    let reduceMoney = 0;\r\n    this.props.listCoupon.map(value => {\r\n      let start = new Date(value.timeFrom)\r\n      let end = new Date(value.timeEnd)\r\n      if (value.quantity > 0) {\r\n        if (now - start >= 0 && end - now >= 0) {\r\n          if (money >= Number(value.minTotal)) {\r\n            let index = money * Number(value.percent) / 100;\r\n            if (index >= reduceMoney) {\r\n              percent = Number(value.percent);\r\n              reduceMoney = index;\r\n              this.setState({\r\n                coupon: value,\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    this.setState({\r\n      percentDiscount: Number(percent)\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const PrintBill = this.addReciept\r\n    document.onkeydown = function (e) {\r\n      switch (e.key.charCodeAt()) {\r\n        case 70:\r\n          PrintBill()\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    return (\r\n      <div>\r\n        <div style={{ margin: '0px' }} className=\"row\">\r\n          <div className=\"col-10 offset-1\">\r\n            <div className=\"row\">\r\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\r\n                <p style={{}}>Total</p>\r\n              </div>\r\n              <div className=\"col-5\">\r\n                <p style={{ textAlign: 'end', marginBottom: '0', fontSize: '1.2rem' }}>{this.totalMoney().toLocaleString()}</p>\r\n              </div>\r\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\r\n                <p>Discount (%)</p>\r\n              </div>\r\n              <div style={{ marginBottom: '10px' }} className=\"col-5\">\r\n                <input disabled value={this.state.percentDiscount} style={{ fontSize: '1.2rem', border: 'none', outline: 'none', textAlign: 'end', width: '100%', borderBottom: '1px solid black' }} min={0} max={100} type=\"number\"></input>\r\n              </div>\r\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\r\n                <p style={{}}>Reduce</p>\r\n              </div>\r\n              <div className=\"col-5\">\r\n                <p style={{ textAlign: 'end', marginBottom: '0', fontSize: '1.2rem' }}>-{this.reduceMoney().toLocaleString()}</p>\r\n              </div>\r\n              <div className=\"col-7\">\r\n                <p style={{ margin: '0', fontSize: '1.2rem', fontWeight: '700' }}>TOTAL FINAL</p>\r\n              </div>\r\n              <div className=\"col-5\">\r\n                <p style={{ margin: '0', fontSize: '1.2rem', textAlign: 'end', color: 'green', fontWeight: '700' }}>{this.totalFinalMoney().toLocaleString()}</p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {this.props.statusEditInfoBill ? (\r\n            <div className=\"col-12\">\r\n              <div className=\"row\">\r\n                <div onClick={() => this.addReciept()} style={{ cursor: 'pointer' }} className=\"col-8\">\r\n                  <ReactToPrint\r\n                    trigger={() => {\r\n\r\n                      return <div style={{ marginTop: '10px', borderRadius: '4px', fontWeight: '600', backgroundColor: '#37c737', textAlign: 'center', alignContent: 'center', padding: '15px 0', fontSize: '1.4rem' }}>\r\n                        SAVE (F9)\r\n                      </div>;\r\n                    }}\r\n                    content={this.props.shoppingBags.length !== 0 ? () => this.componentRef : null}\r\n                  />\r\n                </div>\r\n                <div className=\"col-4\">\r\n                  <div onClick={() => this.CancelEditReiept()} style={{ width: '100%', marginTop: '10px', borderRadius: '4px', fontWeight: '600', backgroundColor: '#757575', textAlign: 'center', alignContent: 'center', padding: '15px 0', fontSize: '1.4rem', cursor: 'pointer' }} className=\"col-4\">\r\n                    CANCEL\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div onClick={() => this.addReciept()} style={{ cursor: 'pointer' }} className=\"col-12\">\r\n              <ReactToPrint\r\n                trigger={() => {\r\n\r\n                  return <div style={{ marginTop: '10px', borderRadius: '4px', fontWeight: '600', backgroundColor: '#37c737', textAlign: 'center', alignContent: 'center', padding: '15px 0', fontSize: '1.4rem' }}>\r\n                    PAY (F9)\r\n                  </div>;\r\n                }}\r\n                content={this.props.shoppingBags.length !== 0 ? () => this.componentRef : null}\r\n              />\r\n            </div>\r\n          )}\r\n          <div className=\"col-12\">\r\n            <p onClick={() => this.props.changeStatusHistoryReciept()} style={{ cursor: 'pointer' }}>(*) Receipt history</p>\r\n          </div>\r\n        </div>\r\n        {/* Ẩn đi */}\r\n        <div style={{ display: 'none' }}>\r\n          <ComponentToPrint MAHD={this.state.code} percentDiscount={this.state.percentDiscount} infoUser={this.props.infoUser} shoppingBags={this.props.shoppingBags} ref={el => (this.componentRef = el)} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    infoUser: state.infoUser,\r\n    shoppingBags: state.shoppingBags,\r\n    statusEditInfoBill: state.statusEditInfoBill,\r\n    InfomationBillEdit: state.InfomationBillEdit,\r\n    listCoupon: state.listCoupon,\r\n    InfomationBillEdit: state.InfomationBillEdit,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    changeStatusHistoryReciept: () => {\r\n      dispatch({\r\n        type: \"CHANGE_HISTORY_RECIEPT_STATUS\",\r\n      });\r\n    },\r\n    addRecieptToHistory: (data) => {\r\n      dispatch({\r\n        type: \"ADD_RECIEPT\",\r\n        newReciept: data,\r\n      });\r\n    },\r\n    showAlert: (message, typeMessage) => {\r\n      dispatch({\r\n        type: \"SHOW_ALERT\",\r\n        message: message,\r\n        typeMessage: typeMessage,\r\n      })\r\n    },\r\n    hideAlert: () => {\r\n      dispatch({\r\n        type: \"HIDE_ALERT\",\r\n      })\r\n    },\r\n    resetShoppingBag: () => {\r\n      dispatch({\r\n        type: \"RESET_SHOPPING_BAGS\"\r\n      })\r\n    },\r\n    changeStatusEditRecipt: () => {\r\n      dispatch({\r\n        type: \"CHANGE_EDIT_INFOMATION_STATUS\"\r\n      })\r\n    },\r\n    changeLoginStatus: () => {\r\n      dispatch({\r\n        type: \"CHANGE_LOGIN_STATUS\",\r\n      });\r\n    },\r\n    editShoppingBar: (MAHD) => {\r\n      dispatch({\r\n        type: \"EDIT_SHOPPING_BAGS\",\r\n        MAHD: MAHD,\r\n      })\r\n    },\r\n    updateQuantityCoupon: (idCoupon) => {\r\n      dispatch({\r\n        type: \"UPDATE_QUANTITY_COUPON\",\r\n        idCoupon: idCoupon,\r\n      })\r\n    },\r\n    decreaseRemainProduct: (data) => {\r\n      dispatch({\r\n        type: \"DECREASE_REMAIN_PRODUCT\",\r\n        data: data,\r\n      });\r\n    },\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Printf)","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\TableReciept.js",["734","735","736"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport { Grid, Box } from '@mui/material';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport { red } from '@mui/material/colors'\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { FiEdit } from 'react-icons/fi'\r\nimport axios from 'axios';\r\n\r\n\r\nfunction Row(props) {\r\n    const { row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const dispatch = useDispatch();\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const infoUser = useSelector(state => state.infoUser)\r\n    const statusEditInfoBill = useSelector(state => state.statusEditInfoBill)\r\n    const editReciept = (MAHD, coupon) => {\r\n        if(coupon) {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: \"This bill has used to discount!\",\r\n                typeMessage: \"warning\"\r\n            })\r\n        } else {\r\n            let objectInfoBill = [];\r\n            listReciept.map(value => {\r\n                if (value.MAHD === MAHD) {\r\n                    objectInfoBill = value\r\n                }\r\n                return value;\r\n            })\r\n            if (!statusEditInfoBill) {\r\n                dispatch({\r\n                    type: \"INFO_SHOPPING_BAGS_EDIT\",\r\n                    listProduct: objectInfoBill.listProduct,\r\n                })\r\n                dispatch({\r\n                    type: \"ADD_INFO_BILL_EDIT\",\r\n                    InfoBill: objectInfoBill,\r\n                })\r\n                dispatch({\r\n                    type: \"CHANGE_EDIT_INFOMATION_STATUS\",\r\n                })\r\n                dispatch({\r\n                    type: \"CHANGE_HISTORY_RECIEPT_STATUS\"\r\n                })\r\n            } else {\r\n                dispatch({\r\n                    type: \"HIDE_ALERT\",\r\n                })\r\n                dispatch({\r\n                    type: \"SHOW_ALERT\",\r\n                    message: \"You are editing another bill!\",\r\n                    typeMessage: \"warning\"\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const TypeReciept = (isEdit, isDelete) => {\r\n        if (isDelete) {\r\n            return red[400]\r\n        } else if (isEdit) {\r\n            return '#f4f492'\r\n        } else {\r\n            return '#a6ffa6'\r\n        }\r\n    }\r\n\r\n\r\n    const StatusTypeReciept = (isEdit, isDelete) => {\r\n        if (isDelete) {\r\n            return 'Đã xóa'\r\n        } else if (isEdit) {\r\n            return 'Đổi trả'\r\n        } else {\r\n            return 'Thành công'\r\n        }\r\n    }\r\n\r\n    const showEdit = (isEdit, isDelete) => {\r\n        if (isEdit || isDelete) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const countQuantity = () => {\r\n        let count = 0;\r\n        row.listProduct.map(value => {\r\n            count += value.quantity;\r\n        })\r\n        return count;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow style={{ backgroundColor: TypeReciept(row.isEdit, row.deleted), borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: '#90a4ae #90a4ae transparent #90a4ae' }} sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n                <TableCell>\r\n                    <IconButton\r\n                        aria-label=\"expand row\"\r\n                        size=\"small\"\r\n                        onClick={() => setOpen(!open)}\r\n                    >\r\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                    </IconButton>\r\n                </TableCell>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                    {row.MAHD}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.date}</TableCell>\r\n                <TableCell align=\"right\">{row.totalMoney}</TableCell>\r\n                <TableCell align=\"right\">{row.discount}</TableCell>\r\n                <TableCell align=\"right\">{row.totalFinalMoney}</TableCell>\r\n                <TableCell>\r\n                    {!showEdit(row.isEdit, row.deleted) ? (\r\n                        <IconButton onClick={() => editReciept(row.MAHD, row.coupon)} color=\"secondary\" aria-label=\"fingerprint\">\r\n                            <FiEdit />\r\n                        </IconButton>\r\n                    ) : null}\r\n                </TableCell>\r\n            </TableRow>\r\n            <TableRow style={{ borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: 'transparent #90a4ae #90a4ae #90a4ae' }}>\r\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={12}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Box sx={{ margin: 1 }}>\r\n                            <Typography style={{ fontWeight: '600' }} variant=\"h6\" gutterBottom component=\"div\">\r\n                                Detail Recipet\r\n                            </Typography>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item lg={6} md={12} xs={12}>\r\n                                    <Table size=\"small\" aria-label=\"purchases\">\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                <TableCell>#</TableCell>\r\n                                                <TableCell>Name</TableCell>\r\n                                                <TableCell>Quantity</TableCell>\r\n                                                <TableCell align=\"right\">Price</TableCell>\r\n                                                <TableCell align=\"right\">Total Price</TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {row.listProduct.map((value, key) => (\r\n                                                <TableRow key={value.name}>\r\n                                                    <TableCell>\r\n                                                        {key + 1}\r\n                                                    </TableCell>\r\n                                                    <TableCell>{value.product.name}</TableCell>\r\n                                                    <TableCell>{value.quantity}</TableCell>\r\n                                                    <TableCell align=\"right\">{value.product.sellPrice.toLocaleString()}</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        {(value.quantity * value.product.sellPrice).toLocaleString()}\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            ))}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Grid>\r\n                                <Grid style={{ borderLeft: '1px solid black', marginTop: '15px' }} item lg={6} md={12} xs={12}>\r\n                                    <Grid container spacing={3}>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Id Receipt:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.MAHD}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Status:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{StatusTypeReciept(row.isEdit, row.isDelete)}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Date:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.date}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Time:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.time}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Old bill:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.oldBill ? row.oldBill.MAHD : \"Không có\"}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Seller:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.name}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Total quanitty:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{countQuantity()}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Total money:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.totalMoney.toLocaleString()}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Coupon:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.coupon? row.coupon.idCoupon : \"Không áp dụng\"}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Reduce money:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{(row.totalFinalMoney - row.totalMoney).toLocaleString()}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Discount (%):</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.discount}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>TOTAL:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>{row.totalFinalMoney.toLocaleString()}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nRow.propTypes = {\r\n    row: PropTypes.shape({\r\n        calories: PropTypes.number.isRequired,\r\n        carbs: PropTypes.number.isRequired,\r\n        fat: PropTypes.number.isRequired,\r\n        history: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                amount: PropTypes.number.isRequired,\r\n                customerId: PropTypes.string.isRequired,\r\n                date: PropTypes.string.isRequired,\r\n            }),\r\n        ).isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        price: PropTypes.number.isRequired,\r\n        protein: PropTypes.number.isRequired,\r\n    }).isRequired,\r\n};\r\n\r\n\r\nexport default function CollapsibleTable() {\r\n\r\n    const listReciept = useSelector(state => state.listReciept)\r\n\r\n    return (\r\n        <TableContainer style={{ overflowX: 'hidden' }} component={Paper}>\r\n            <Table aria-label=\"collapsible table\">\r\n                <TableHead>\r\n                    <TableRow style={{ backgroundColor: 'black', color: 'white' }}>\r\n                        <TableCell />\r\n                        <TableCell >Id Receipt</TableCell>\r\n                        <TableCell align=\"right\">Date</TableCell>\r\n                        <TableCell align=\"right\">Total</TableCell>\r\n                        <TableCell align=\"right\">Discount</TableCell>\r\n                        <TableCell align=\"right\">Total final</TableCell>\r\n                        <TableCell />\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {listReciept ?\r\n                        listReciept.map((row) => (\r\n                            <Row key={row.MAHD} row={row} />\r\n                        )) : null\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ComponentToPrint.js",["737","738","739"],"import React from 'react';\r\n\r\n\r\n\r\nclass ComponentToPrint extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date(),\r\n        }\r\n    }\r\n\r\n    minute = 1000 * 60;\r\n    hour = this.minute * 60;\r\n    day = this.hour * 24;\r\n    year = this.day * 365;\r\n\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    totalMoney = () => {\r\n        let total = 0;\r\n        this.props.shoppingBags.map(value => {\r\n            total += value.quantity * value.product.sellPrice;\r\n        })\r\n        return total.toLocaleString();\r\n    }\r\n\r\n    reduceTotalMoney = () => {\r\n        let total = 0;\r\n        this.props.shoppingBags.map(value => {\r\n            total += value.quantity * value.product.sellPrice;\r\n        })\r\n        if (total !== 0) {\r\n            total = total*this.props.percentDiscount/100\r\n        }\r\n        return total.toLocaleString()\r\n    }\r\n\r\n    finalTotalMoney = () => {\r\n        let total = 0;\r\n        this.props.shoppingBags.map(value => {\r\n            total += value.quantity * value.product.sellPrice;\r\n        })\r\n        if (total !== 0 && this.props.percentDiscount !== 0) {\r\n            total -= total*this.props.percentDiscount/100\r\n        }\r\n        return total.toLocaleString();\r\n    }\r\n\r\n    dateFunction = () => {\r\n        let month = this.state.date.getMonth()+1;\r\n        return \"  \" + this.state.date.getDate() + \" / \" + month + \" / \" + this.state.date.getFullYear()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <h1 style={{ textAlign: 'center' }}>{this.props.infoUser.storeName}</h1>\r\n                </div>\r\n                <div style={{ borderBottom: '1px solid #00000059' }} className=\"col-12\">\r\n                    <p style={{ textAlign: 'center', marginBottom: '0' }}>{this.props.infoUser.address}</p>\r\n                    <p style={{ textAlign: 'center' }}>{this.props.infoUser.district + ' ' + this.props.infoUser.province}</p>\r\n                    <p style={{ textAlign: 'center' }}>{\"SĐT: \" + this.props.infoUser.tel}</p>\r\n                </div>\r\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\r\n                    <h4 style={{ textAlign: 'center' }}>HÓA ĐƠN THANH TOÁN</h4>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <p style={{ textAlign: 'center', fontWeight: '400' }}>Số HĐ: {this.props.MAHD}</p>\r\n                    <div style={{ margin: '0 5px' }} className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <p style={{ fontWeight: '700' }}>Date:\r\n                                <span style={{ fontWeight: '400' }}>\r\n                                    {this.dateFunction()}\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <p style={{ fontWeight: '700' }}>Time:\r\n                                <span style={{ fontWeight: '400' }}>\r\n                                    {\"  \" + this.state.date.getHours() + \":\" + this.state.date.getMinutes()}\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <p style={{ fontWeight: '700', margin: '0 17px' }}>\r\n                        Cashier:\r\n                        <span style={{ fontWeight: '400' }}>\r\n                            {\"  Admin\"}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <table style={{ margin: '0 10px' }} class=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Quantity</th>\r\n                            <th scope=\"col\">Price</th>\r\n                            <th scope=\"col\">Total money</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.props.shoppingBags ? this.props.shoppingBags.map((value, key) => (\r\n                            <tr>\r\n                                <td>{key + 1}</td>\r\n                                <td>{value.product.name}</td>\r\n                                <td>{value.quantity}</td>\r\n                                <td>{value.product.sellPrice}</td>\r\n                                <td>{value.quantity * value.product.sellPrice}</td>\r\n                            </tr>\r\n                        ))\r\n                        : null}\r\n                    </tbody>\r\n                </table>\r\n                <div style={{marginTop: '20px'}} className=\"col-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'end' }}>Total :</h6>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'start' }}>{this.totalMoney()}đ</h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'end' }}>Discount :</h6>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'start' }}>-{this.reduceTotalMoney()}đ</h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <h5 style={{ textAlign: 'end' }}>TOTAL FINAL :</h5>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h5 style={{ textAlign: 'start' }}>{this.finalTotalMoney()}đ</h5>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\r\n                    <h6 style={{ textAlign: 'center',fontStyle: 'italic ' }}>Xin cảm ơn quý khách</h6>\r\n                    <h6 style={{ textAlign: 'center',fontStyle: 'italic ' }}>hẹn gặp lại!</h6>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ComponentToPrint;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\CouponManager.js",["740","741","742","743","744","745","746","747","748","749","750","751","752","753","754","755","756"],"import React from 'react';\r\nimport { Card, CardHeader, Divider, TableBody, TableHead, TableRow, Paper, Grid, Button, CardContent, Table, TableCell, TableContainer } from '@mui/material';\r\nimport { BiPlusMedical } from 'react-icons/bi';\r\nimport { IconButton } from '@mui/material'\r\nimport { styled } from '@mui/material/styles';\r\nimport { FiEdit, FiTrash2 } from 'react-icons/fi'\r\nimport { tableCellClasses } from '@mui/material/TableCell';\r\nimport axios from 'axios';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\n\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n    },\r\n}));\r\n\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n    '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n    },\r\n    // hide last border\r\n    '&:last-child td, &:last-child th': {\r\n        border: 0,\r\n    },\r\n}));\r\n\r\n\r\n\r\nfunction CouponManager(props) {\r\n    const statusDarkmode = useSelector(state => state.statusDarkmode)\r\n    const [value, setValue] = React.useState(new Date())\r\n    const [value1, setValue1] = React.useState('all')\r\n    const [typeCheck, setTypeCheck] = React.useState('groupBy')\r\n    const listCoupon = useSelector(state => state.listCoupon)\r\n    const listReceipt = useSelector(state => state.listReciept)\r\n    const [listReceiptHaveCoupon, setListReceiptHaveCoupon] = React.useState([]);\r\n    const [totalDiscount, setTotalDiscount] = React.useState(0);\r\n    const selectType = (e) => {\r\n        setTypeCheck(e.target.value);\r\n    }\r\n\r\n    const changeType = (e) => {\r\n        setValue1(e.target.value)\r\n    }\r\n\r\n    const changeTime = (newValue) => {\r\n        setValue(newValue);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        let list = listReceipt.filter(item => {\r\n            if (item.coupon) {\r\n                return item\r\n            }\r\n        })\r\n        if (typeCheck === 'groupBy') {\r\n            if (value1 == 'all') {\r\n                setListReceiptHaveCoupon(list)\r\n            } else {\r\n                list = list.filter(item=> {\r\n                    if(value1 == item.coupon.idCoupon){\r\n                        return item\r\n                    }\r\n                })\r\n                setListReceiptHaveCoupon(list)\r\n            }\r\n        } else {\r\n            list = list.filter(item => {\r\n                let timeMau = item.date;\r\n                timeMau = timeMau.replace(/\\s/g, \"\");\r\n                timeMau = timeMau.split(\"/\");\r\n                if(value.getDate() == timeMau[0] && value.getMonth() + 1 == timeMau[1] && value.getFullYear() == timeMau[2]) {\r\n                    return item\r\n                }\r\n            })\r\n            setListReceiptHaveCoupon(list)\r\n        }\r\n        let money = 0\r\n        list.map(item => {\r\n            money += item.totalFinalMoney - item.totalMoney;\r\n        })\r\n        setTotalDiscount(money)\r\n    }, [typeCheck, value1, value])\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', marginBottom: '30px' }}>\r\n            <Card style={{ position: \"relative\", marginTop: '15px' }}>\r\n                <CardHeader style={{ color: !statusDarkmode ? '#0091ea' : 'white', backgroundColor: !statusDarkmode ? '#efeeef' : '#455a64' }} title=\"Coupon Manager\" />\r\n                <Divider />\r\n                <CardContent>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item md={3} sm={3}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item md={12} sm={12}  >\r\n                                    <Card>\r\n                                        <CardHeader style={{ color: !statusDarkmode ? '#0091ea' : 'white', backgroundColor: !statusDarkmode ? '#efeeef' : '#455a64' }} title=\"Date\" />\r\n                                        <Divider></Divider>\r\n                                        <CardContent>\r\n                                            <Grid container spacing={2}>\r\n                                                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                                    <Grid item md={12} sm={12}>\r\n                                                        <div className=\"form-check\">\r\n                                                            <input onClick={(e) => selectType(e)} style={{ transform: 'translateY(70%)' }} value=\"groupBy\" className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault2\" defaultChecked />\r\n                                                            <FormControl fullWidth>\r\n                                                                <InputLabel id=\"demo-simple-select-label\">Group by</InputLabel>\r\n                                                                <Select\r\n                                                                    labelId=\"demo-simple-select-label\"\r\n                                                                    id=\"demo-simple-select\"\r\n                                                                    value={value1}\r\n                                                                    label=\"Option\"\r\n                                                                    onChange={(e) => changeType(e)}\r\n                                                                >\r\n                                                                    <MenuItem value='all'>All</MenuItem>\r\n                                                                    {listCoupon.map(value => (\r\n                                                                        <MenuItem value={value.idCoupon}>{value.name}</MenuItem>\r\n                                                                    ))}\r\n                                                                </Select>\r\n                                                            </FormControl>\r\n                                                        </div>\r\n                                                    </Grid>\r\n                                                    <Grid item md={12} sm={12}>\r\n                                                        <div className=\"form-check\">\r\n                                                            <input onClick={(e) => selectType(e)} style={{ transform: 'translateY(70%)' }} value=\"date\" className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\" />\r\n                                                            <DesktopDatePicker\r\n                                                                label=\"Ngày\"\r\n                                                                value={value}\r\n                                                                minDate={new Date('2017-01-01')}\r\n                                                                onChange={(newValue) => changeTime(newValue)}\r\n                                                                renderInput={(params) => <TextField {...params} />}\r\n                                                            />\r\n                                                        </div>\r\n                                                    </Grid>\r\n                                                </LocalizationProvider>\r\n                                            </Grid>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid style={{ height: '500px' }} item md={9} sm={9}>\r\n                            <Grid container spacing={3}>\r\n                                <Grid id=\"choses-product\" style={{ overflowX: 'hidden', overflowY: 'auto', height: '430px', marginTop: '20px' }} item md={12} sm={12}  >\r\n                                    <TableContainer id=\"choses-product\" component={Paper}>\r\n                                        <Table  sx={{ minWidth: 700 }} aria-label=\"customized table\">\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <StyledTableCell>Name coupon</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">Id Reciept</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">Date</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">Dicount(%)</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">Reduce Money</StyledTableCell>\r\n                                                </TableRow>\r\n                                            </TableHead >\r\n                                            {listReceiptHaveCoupon.map(item => {\r\n                                                return (\r\n                                                    <TableBody>\r\n                                                        <StyledTableRow key=\"abc\">\r\n                                                            <StyledTableCell component=\"th\" scope=\"row\">{item.coupon.name}</StyledTableCell>\r\n                                                            <StyledTableCell align=\"center\">{item.MAHD}</StyledTableCell>\r\n                                                            <StyledTableCell align=\"center\">{item.date}</StyledTableCell>\r\n                                                            <StyledTableCell align=\"center\">{item.coupon.percent}</StyledTableCell>\r\n                                                            <StyledTableCell align=\"center\">{(item.totalFinalMoney - item.totalMoney).toLocaleString()}</StyledTableCell>\r\n                                                        </StyledTableRow>\r\n                                                    </TableBody>\r\n                                                )\r\n                                            })}\r\n                                        </Table>\r\n                                    </TableContainer>\r\n                                </Grid>\r\n                                <Grid item md={12} sm={12}  >\r\n                                    <h5 style={{ textAlign: 'end', paddingRight: '20px', borderTop: '2px solid black' }}>Discount:\r\n                                        <span style={{ color: 'red' }}>     {totalDiscount} VNĐ</span>\r\n                                    </h5>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n                <Divider />\r\n\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CouponManager;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\ErrorReceipt.js",["757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776"],"import React from 'react';\r\nimport { Typography } from '@mui/material';\r\nimport { FaReceipt } from 'react-icons/fa'\r\nimport { useSelector } from 'react-redux'\r\nimport moment from 'moment'\r\n\r\n\r\nfunction ErrorReceipt(props) {\r\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const [index, setIndex] = React.useState(0)\r\n    let nowTime = new Date()\r\n\r\n    React.useEffect(() => {\r\n        let errorReciept = 0;\r\n        let currentMonth = nowTime.getMonth() + 1;\r\n        let lastMonth = new Date(moment().subtract(1, 'months'))\r\n        let yesterdayTime = new Date(moment().subtract(1, 'days'))\r\n\r\n        if (typeHeaderDashboard == 'Today') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[0] == nowTime.getDate() && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\r\n                    if (value.deleted) {\r\n                        errorReciept++\r\n                    }\r\n                }\r\n            })\r\n            setIndex(errorReciept)\r\n        } else if (typeHeaderDashboard == 'Yesterday') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[0] == yesterdayTime.getDate() - 1 && date[1] == yesterdayTime.getMonth() + 1 && date[2] == yesterdayTime.getFullYear()) {\r\n                    if (value.deleted) errorReciept++\r\n                }\r\n            })\r\n            setIndex(errorReciept)\r\n        } else if (typeHeaderDashboard == 'Month') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[1] == lastMonth.getMonth() && date[2] == lastMonth.getFullYear()) {\r\n                    if (value.deleted) errorReciept++\r\n                }\r\n            })\r\n            setIndex(errorReciept)\r\n        } else if (typeHeaderDashboard == 'Year') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[2] == nowTime.getFullYear()) {\r\n                    if (value.deleted) errorReciept++\r\n                }\r\n            })\r\n            setIndex(errorReciept)\r\n        } else if (typeHeaderDashboard == 'All') {\r\n            listReciept.map(value => {\r\n                if (value.deleted) {\r\n                    errorReciept++\r\n                }\r\n            })\r\n            setIndex(errorReciept)\r\n        }\r\n    }, [typeHeaderDashboard])\r\n\r\n    return (\r\n        <div className=\"dashboard-css error-receipt\">\r\n            <div className=\"dashboard-item-img error-receipt\" style={{ marginBottom: '30px' }}>\r\n                <FaReceipt className=\"dashboard-item-icon error-receipt\"></FaReceipt>\r\n            </div>\r\n            <Typography style={{ marginBottom: '10px' }} variant=\"h4\">{index}</Typography>\r\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                Error receipt\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorReceipt;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Tabs.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\SalaryStats.js",["777","778","779","780","781","782","783","784","785","786","787","788","789","790","791","792","793","794","795","796","797","798","799","800","801","802","803","804","805","806","807","808","809","810"],"import React from 'react';\r\nimport { Typography } from '@mui/material';\r\nimport { RiMoneyDollarCircleFill } from 'react-icons/ri'\r\nimport { useSelector } from 'react-redux'\r\nimport { BsCashCoin } from \"react-icons/bs\";\r\nimport { IoCashSharp } from \"react-icons/io5\";\r\n\r\nfunction calculateTime(timeFrom, timeEnd)\r\n{\r\n    var realTimeFrom, realTimeEnd;\r\n\r\n    realTimeFrom = parseInt(timeFrom.substring(0, timeFrom.indexOf(':')));\r\n    if(timeFrom.indexOf('PM')!=-1) realTimeFrom += 12;\r\n    var minuteFrom= parseInt(timeFrom.substring(timeFrom.indexOf(':')+1, timeFrom.indexOf(':') + 3));\r\n\r\n    realTimeEnd = parseInt(timeEnd.substring(0, timeEnd.indexOf(':')));\r\n    if(timeEnd.indexOf('PM')!=-1) realTimeEnd += 12;\r\n    var minuteEnd= parseInt(timeEnd.substring(timeEnd.indexOf(':')+1, timeEnd.indexOf(':') + 3));\r\n\r\n    var timeDiff = realTimeEnd - realTimeFrom;\r\n    \r\n    if(minuteEnd - minuteFrom < 0)\r\n    {\r\n        timeDiff --;\r\n        minuteEnd += 60;\r\n    }\r\n\r\n    return Math.round(timeDiff + (minuteEnd - minuteFrom) / 60.0);\r\n}\r\n\r\nfunction calculateSalary(shift){\r\n    var salary = 0;\r\n    // Tính thời gian của ca làm\r\n    return shift._id.shiftType.salary * (calculateTime(shift._id.shiftType.timeFrom,shift._id.shiftType.timeEnd));\r\n}\r\n\r\n\r\nfunction SalaryStats(props) {\r\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const listTimeKeeping = useSelector(state => state.listTimeKeeping)\r\n    const [totalSalary, setTotalSalary] = React.useState('')\r\n    const [totalMoney, setTotalMoney] = React.useState('')\r\n\r\n    let nowTime = new Date();\r\n\r\n    React.useEffect(() => {\r\n        \r\n        let money = 0;\r\n        let currentMonth = nowTime.getMonth() + 1;\r\n\r\n        console.log(\"listTimeKeeping\",listTimeKeeping )\r\n        // if(listTimeKeeping.length>0)\r\n        //     console.log(calculateSalary(listTimeKeeping[0]));\r\n\r\n        if (typeHeaderDashboard == 'Today') {\r\n            let salary = 0;\r\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\r\n            {\r\n                var realDate = listTimeKeeping[i]._id.realDate.substring(0,listTimeKeeping[i]._id.realDate.indexOf('T'));\r\n                var date = realDate.split('-');\r\n                console.log(date);\r\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\r\n                if (date[2] == nowTime.getDate() - 1 && date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\r\n                    salary += calculateSalary(listTimeKeeping[i])\r\n                }\r\n            }\r\n            setTotalSalary(salary);\r\n        } else if (typeHeaderDashboard == 'Yesterday') {\r\n            let salary = 0;\r\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\r\n            {\r\n                var realDate = listTimeKeeping[i]._id.realDate.substring(0,listTimeKeeping[i]._id.realDate.indexOf('T'));\r\n                var date = realDate.split('-');\r\n                console.log(date);\r\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\r\n                if (date[2] == nowTime.getDate() - 2 && date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\r\n                    salary += calculateSalary(listTimeKeeping[i])\r\n                }\r\n            }\r\n            setTotalSalary(salary);\r\n\r\n        } else if (typeHeaderDashboard == 'Month') {\r\n            let salary = 0;\r\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\r\n            {\r\n                var realDate = listTimeKeeping[i]._id.realDate.substring(0,listTimeKeeping[i]._id.realDate.indexOf('T'));\r\n                var date = realDate.split('-');\r\n                console.log(date);\r\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\r\n                if (date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\r\n                    salary += calculateSalary(listTimeKeeping[i])\r\n                }\r\n            }\r\n            setTotalSalary(salary);\r\n        } else if (typeHeaderDashboard == 'Year') {\r\n            let salary = 0;\r\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\r\n            {\r\n                var realDate = listTimeKeeping[i]._id.realDate.substring(0,listTimeKeeping[i]._id.realDate.indexOf('T'));\r\n                var date = realDate.split('-');\r\n                console.log(date);\r\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\r\n                if (date[0] == nowTime.getFullYear()) {\r\n                    salary += calculateSalary(listTimeKeeping[i])\r\n                }\r\n            }\r\n            setTotalSalary(salary);\r\n        } else if (typeHeaderDashboard == 'All') {\r\n            let salary = 0;\r\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\r\n            {\r\n                salary += calculateSalary(listTimeKeeping[i])\r\n            }\r\n            setTotalSalary(salary);\r\n        }\r\n    }, [typeHeaderDashboard])\r\n\r\n    return (\r\n        <div className=\"dashboard-css sold-good\">\r\n            <div className=\"dashboard-item-img sold-good\" style={{ marginBottom: '30px'}}>\r\n                <IoCashSharp className=\"dashboard-item-icon sold-good\"></IoCashSharp>\r\n            </div>\r\n            <Typography style={{ marginBottom: '10px' }} variant=\"h6\">{totalSalary.toLocaleString()} VNĐ  \r\n            </Typography>\r\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                Total salary\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SalaryStats;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\ProductStatis.js",["811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841","842","843","844","845","846","847","848","849","850","851","852","853","854","855","856","857","858","859","860","861"],"import React from 'react';\r\nimport { Typography } from '@mui/material';\r\nimport { RiMoneyDollarCircleFill } from 'react-icons/ri'\r\nimport { useSelector } from 'react-redux'\r\nimport { MdImportExport } from \"react-icons/md\";\r\n\r\nfunction ProductStatis(props) {\r\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const [totalExport, setTotalExport] = React.useState('')\r\n    const listProduct = useSelector(state => state.listProduct.state)\r\n    const [totalImport, setTotalImport] = React.useState('');\r\n    // console.log(\"listProduct\", listProduct);\r\n    let nowTime = new Date()\r\n\r\n    React.useEffect(() => {\r\n        let money = 0;\r\n        let currentMonth = nowTime.getMonth() + 1;\r\n\r\n        if (typeHeaderDashboard == 'Today') {\r\n            var importProduct = 0;\r\n            for(var i = 0; i < listProduct.length; i++)\r\n            {\r\n                var realDate = listProduct[i]._id.importDate.substring(0,listProduct[i]._id.importDate.indexOf('T'));\r\n                var date = realDate.split('-');\r\n                // console.log(date);\r\n                // console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\r\n                if (date[2] == nowTime.getDate() && date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\r\n                    importProduct += parseInt(listProduct[i].quantity);\r\n                }\r\n            }\r\n            setTotalImport(importProduct);\r\n            var exportProduct = 0;\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                console.log(\"val\", value);\r\n                if (date[0] == nowTime.getDate() && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\r\n                    // Tính tổng số lượng sản phẩm\r\n                    var allExport = 0;\r\n                    for(var j = 0; j < value.listProduct.length; j++)\r\n                    {\r\n                        allExport += parseInt(value.listProduct[j].quantity);\r\n                    }\r\n                    if(!value.deleted) {\r\n                        exportProduct += allExport;\r\n                    }\r\n                }\r\n            })\r\n            setTotalExport(exportProduct)\r\n        } else if (typeHeaderDashboard == 'Yesterday') {\r\n            var importProduct = 0;\r\n            for(var i = 0; i < listProduct.length; i++)\r\n            {\r\n                var realDate = listProduct[i]._id.importDate.substring(0,listProduct[i]._id.importDate.indexOf('T'));\r\n                var date = realDate.split('-');\r\n                // console.log(date);\r\n                // console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\r\n                if (date[2] == nowTime.getDate() - 1 && date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\r\n                    importProduct += parseInt(listProduct[i].quantity);\r\n                }\r\n            }\r\n            setTotalImport(importProduct);\r\n\r\n            var exportProduct =0;\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                console.log(\"val\", value);\r\n                if (date[0] == nowTime.getDate() - 1 && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\r\n                    // Tính tổng số lượng sản phẩm\r\n                    var allExport = 0;\r\n                    for(var j = 0; j < value.listProduct.length; j++)\r\n                    {\r\n                        allExport += parseInt(value.listProduct[j].quantity);\r\n                    }\r\n                    if(!value.deleted) {\r\n                        exportProduct += allExport;\r\n                    }\r\n                }\r\n            })\r\n            setTotalExport(exportProduct)\r\n        } else if (typeHeaderDashboard == 'Month') {\r\n            var importProduct = 0;\r\n            for(var i = 0; i < listProduct.length; i++)\r\n            {\r\n                var realDate = listProduct[i]._id.importDate.substring(0,listProduct[i]._id.importDate.indexOf('T'));\r\n                var date = realDate.split('-');\r\n                console.log(date);\r\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\r\n                if (date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\r\n                    importProduct += parseInt(listProduct[i].quantity);\r\n                }\r\n            }\r\n            setTotalImport(importProduct);\r\n\r\n            var exportProduct =0;\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\r\n                    var allExport = 0;\r\n                    for(var j = 0; j < value.listProduct.length; j++)\r\n                    {\r\n                        allExport += parseInt(value.listProduct[j].quantity);\r\n                    }\r\n                    if(!value.deleted) {\r\n                        exportProduct += allExport;\r\n                    }\r\n                }\r\n            })\r\n            setTotalExport(exportProduct)\r\n        } else if (typeHeaderDashboard == 'Year') {\r\n            var importProduct = 0;\r\n            for(var i = 0; i < listProduct.length; i++)\r\n            {\r\n                var realDate = listProduct[i]._id.importDate.substring(0,listProduct[i]._id.importDate.indexOf('T'));\r\n                var date = realDate.split('-');\r\n                console.log(date);\r\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\r\n                if (date[0] == nowTime.getFullYear()) {\r\n                    importProduct += parseInt(listProduct[i].quantity);\r\n                }\r\n            }\r\n            setTotalImport(importProduct);\r\n\r\n            var exportProduct =0;\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[2] == nowTime.getFullYear()) {\r\n                    var allExport = 0;\r\n                    for(var j = 0; j < value.listProduct.length; j++)\r\n                    {\r\n                        allExport += parseInt(value.listProduct[j].quantity);\r\n                    }\r\n                    if(!value.deleted) {\r\n                        exportProduct += allExport;\r\n                    }\r\n                }\r\n            })\r\n            setTotalExport(exportProduct)\r\n        } else if (typeHeaderDashboard == 'All') {\r\n            var importProduct = 0;\r\n            if(listProduct!=undefined && listProduct.length != undefined)\r\n                for(var i = 0; i < listProduct.length; i++)\r\n                {\r\n                    importProduct += parseInt(listProduct[i].quantity);\r\n                }\r\n            setTotalImport(importProduct);\r\n            \r\n            var exportProduct =0;\r\n            listReciept.map(value => {\r\n                if(!value.deleted) {\r\n                    var allExport = 0;\r\n                    for(var j = 0; j < value.listProduct.length; j++)\r\n                    {\r\n                        allExport += parseInt(value.listProduct[j].quantity);\r\n                    }\r\n                    if(!value.deleted) {\r\n                        exportProduct += allExport;\r\n                    }\r\n                }\r\n            })\r\n            setTotalExport(exportProduct)\r\n        }\r\n    }, [typeHeaderDashboard])\r\n\r\n    return (\r\n        <div className=\"dashboard-css imported-good\">\r\n            <div className=\"dashboard-item-img imported-good\" style={{ marginBottom: '30px' }}>\r\n                <MdImportExport className=\"dashboard-item-icon imported-good\"></MdImportExport>\r\n            </div>\r\n            <Typography style={{ marginBottom: '10px' }} variant=\"h6\">\r\n                {totalImport.toLocaleString() + '/' + totalExport.toLocaleString()}\r\n            </Typography>\r\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                Import Product / Sell Product\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProductStatis;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\DaiLyMoneyTracking.js",["862","863","864","865","866","867"],"import React from 'react';\r\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\r\nimport { Grid, TextField } from '@mui/material';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport { useSelector } from 'react-redux'\r\n\r\n\r\nfunction DaiLyMoneyTracking(props) {\r\n    const [value, setValue] = React.useState(new Date());\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const [dailyListReciept, setDailiListReciept] = React.useState([]);\r\n    const changeTime = (newValue) => {\r\n        if (newValue) {\r\n            setValue(newValue);\r\n        }\r\n    }\r\n\r\n    const totalMoneyDaily = () => {\r\n        let money = 0\r\n        dailyListReciept.map(value => {\r\n            if(!value.isEdit) {\r\n                if (!value.deleted) {\r\n                    money += value.totalFinalMoney\r\n                } else {\r\n                    money -= value.totalFinalMoney\r\n                }\r\n            }\r\n        })\r\n        return money\r\n    }\r\n\r\n    const renderMoney = (item) => {\r\n        if (item.deleted && item.isEdit) {\r\n            return 0\r\n        } else if (item.deleted) {\r\n            return \"-\" + item.totalFinalMoney\r\n        } else if (item.isEdit) {\r\n            return 0\r\n        } else {\r\n            return \"+\" + item.totalFinalMoney\r\n        }\r\n    }\r\n\r\n    const renderStatus = (item) => {\r\n        if (item.deleted && item.isEdit) {\r\n            return \"Exchange\"\r\n        } else if (item.deleted) {\r\n            return \"Deleted\"\r\n        } else if (item.isEdit) {\r\n            return \"Exchange\"\r\n        } else {\r\n            return \"Success\"\r\n        }\r\n    }\r\n\r\n    const renderColor = (item) => {\r\n        if (item.deleted && item.isEdit) {\r\n            return \"#c1c103\"\r\n        } else if (item.deleted) {\r\n            return \"red\"\r\n        } else if (item.isEdit) {\r\n            return \"#c1c103\"\r\n        } else {\r\n            return \"green\"\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        let day = value.getDate()\r\n        let month = value.getMonth() + 1;\r\n        let year = value.getFullYear()\r\n        let arrListReciept\r\n        arrListReciept = listReciept.filter(value => {\r\n            let data = value.date;\r\n            data = data.replace(/\\s/g, \"\");\r\n            data = data.split(\"/\");\r\n            if (data[0] == day && data[1] == month && data[2] == year) {\r\n                return value\r\n            }\r\n        })\r\n        setDailiListReciept(arrListReciept)\r\n    }, [value])\r\n\r\n    return (\r\n        <div style={{ backgroundColor: 'white', borderRadius: '4px', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', overflow: 'hidden', marginBottom: '30px' }}>\r\n            <div style={{ height: 'auto', width: '90%', margin: 'auto', paddingTop: '20px' }}>\r\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                    <DesktopDatePicker\r\n                        label=\"Date\"\r\n                        value={value}\r\n                        minDate={new Date('2017-01-01')}\r\n                        onChange={(newValue) => changeTime(newValue)}\r\n                        renderInput={(params) => <TextField style={{ width: '100%' }} {...params} />}\r\n                    />\r\n                </LocalizationProvider>\r\n            </div>\r\n            <div id=\"choses-product\" style={{ backgroundColor: 'white', height: '500px', width: '80%', overflow: 'hidden', margin: 'auto', overflowY: 'auto', marginTop: '20px', marginBottom: '20px' }}>\r\n                <ul style={{ textDecoration: 'none', listStyle: 'none', paddingLeft: '0' }}>\r\n                    {\r\n                        dailyListReciept.length !== 0 ? dailyListReciept.map(value => (\r\n                            <li style={{ borderBottom: '1px #0000004d solid', marginBottom: '5px', paddingBottom: '5px' }}>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item sm={6} md={6}>\r\n                                        <div>{renderStatus(value)}</div>\r\n                                        <div style={{ fontWeight: '700', color: renderColor(value) }}>{renderMoney(value)}</div>\r\n                                    </Grid>\r\n                                    <Grid style={{ display: 'flex', justifyContent: 'center' }} item sm={6} md={3}>\r\n                                        <div style={{ color: '#00000075', paddingLeft: '10px', fontSize: '1rem' }}>{value.name}</div>\r\n                                    </Grid>\r\n                                    <Grid style={{ display: 'flex', justifyContent: 'center' }} item sm={6} md={3}>\r\n                                        <div style={{ color: '#00000075', paddingLeft: '10px', fontSize: '1rem' }}>{value.time}</div>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </li>\r\n                        )) : (\r\n                            <div style={{ justifyContent: 'center', display: 'flex', marginTop: '100px', color: 'rgba(0,0,0,0.5)' }}>\r\n                                <h2>\r\n                                    You have not sold any invoices today\r\n                                </h2>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </ul>\r\n            </div>\r\n            <div style={{ height: 'auto', width: '100%', paddingTop: '20px', paddingBottom: '20px', borderTop: '3px solid black' }}>\r\n                <Grid container spacing={2}>\r\n                    <Grid style={{ display: 'flex', justifyContent: 'end' }} item md={2}>\r\n                        <h5 style={{ fontWeight: '800' }}>TOTAL : </h5>\r\n                    </Grid>\r\n                    <Grid style={{ display: 'flex', justifyContent: 'start' }} item md={5}>\r\n                        {totalMoneyDaily() >= 0 ? (\r\n                            <h5 style={{ color: 'green', fontWeight: 'bold' }}>{totalMoneyDaily()} VNĐ</h5>\r\n                        ) : (\r\n                            <h5 style={{ color: 'red', fontWeight: 'bold' }}>{totalMoneyDaily()} VNĐ</h5>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DaiLyMoneyTracking;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\Statistic.js",["868","869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889","890","891","892","893","894","895","896","897","898","899","900","901","902","903","904","905","906","907","908","909","910","911","912","913","914","915","916","917","918","919","920","921","922","923","924","925","926","927","928","929","930","931","932","933","934","935","936","937","938","939","940","941","942","943","944","945","946","947","948","949","950","951","952","953","954"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddTimeKeeperModal.js",["955","956","957","958","959","960","961","962","963","964","965","966","967","968"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, \r\n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nvar listDayInWeek = [\r\n    {ID:'T2',name:'Thứ hai'}, \r\n    {ID:'T3',name:'Thứ ba'}, \r\n    {ID:'T4',name:'Thứ tư'}, \r\n    {ID:'T5',name:'Thứ năm'}, \r\n    {ID:'T6',name:'Thứ sáu'}, \r\n    {ID:'T7',name:'Thứ bảy'}, \r\n    {ID:'CN',name:'Chủ nhật'}\r\n];\r\nclass AddTimeKeepingModal extends Component {\r\n\r\n    genID = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n            timeKeepingID: '',\r\n            alterID: '',\r\n            dayChosed: '',\r\n            shiftID: '',\r\n        };\r\n    }\r\n\r\n    // Thêm nhân viên\r\n    async addEmployeeToDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: document.querySelector('input[name=\"ID\"]').value,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                managerID: this.props.infoUser.email,\r\n                password: document.querySelector('input[name=\"password\"]').value,\r\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\r\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\r\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\r\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\r\n                email: document.querySelector('input[name=\"email\"]').value,\r\n                address: document.querySelector('input[name=\"adress\"]').value,\r\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\r\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\r\n                // endDate: \"2021-11-31T00:00:00.000Z\",\r\n            }   \r\n        }\r\n        console.log(data);\r\n        await axios.post(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu thành công\")\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    // cancel = () => {\r\n    //     this.props.changeAddNextWeekTimeKeepingStatus();\r\n    // }\r\n\r\n    // addEmployee = () => {\r\n    //     this.addEmployeeToDatabase();\r\n    //     this.props.changeAddEmployeeStatus();\r\n    // }\r\n\r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    checkContraint() {\r\n        if(this.state.dayChosed.length == 0)\r\n        {\r\n            alert(\"Chưa chọn ngày nào trong tuần\");\r\n            return false;\r\n        }\r\n        if(this.state.shiftID.length == 0)\r\n        {\r\n            alert(\"Chưa chọn ca nào\");\r\n            return false;\r\n        }\r\n        console.log(this.state.timeKeepingID );\r\n        if( this.state.timeKeepingID == undefined || this.state.timeKeepingID.length == 0)\r\n        {\r\n            alert(\"Chưa chọn nhân viên nào để chấm công\"); \r\n            return false;\r\n        }\r\n        // Có CSDL thì báo xem có trùng với cái cũ ko nữa\r\n        \r\n        alert(\"Đã check hết constraint\");\r\n        return true;\r\n    }\r\n\r\n\r\n    addChange() {\r\n        if(this.checkContraint()==false);\r\n        const data = {\r\n            _id: {\r\n                dateInWeek: this.state.dayChosed,\r\n                storeID: this.props.infoUser.email,\r\n                shiftType: {\r\n                    _id: {\r\n                        shiftID: this.state.shiftID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n                employee: {\r\n                    _id: {\r\n                        employeeID: this.state.timeKeepingID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n            },\r\n            realDate: document.querySelector('input[name=\"realDate\"]').value,\r\n        };\r\n        // await axios.post(`http://localhost:5000/api/????``, data)\r\n        //   .then(res => {\r\n        //       console.log(\"Save success\");\r\n        //       alert(\"Lưu thành công\")\r\n        //   })\r\n        //   .catch(err => {\r\n        //       alert(err);\r\n        //       console.log(err);\r\n        //   })\r\n        this.props.addNewTimeKeeper(data);\r\n        this.props.changeAddTimeKeepingStatus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \r\n                    title=\"Change TimeKeeper\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            Real Date\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"date\" \r\n                                            name='realDate'\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.getCurrentDateTime()}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Choose Day in week\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 120 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({dayChosed: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    listDayInWeek.map((item) =>\r\n                                                        <MenuItem value={item.ID}>\r\n                                                            {item.name}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n\r\n                                    <Grid item md={8} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>\r\n                                            Choose Shift\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 220 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({shiftID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                    : this.props.listShift.map((shift) =>\r\n                                                        <MenuItem value={shift._id.shiftID}>\r\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            TimeKeeping Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({timeKeepingID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        !(this.state.alterID == item._id.employeeID) ?\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                        : null\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.addChange()}>\r\n                                            Add Change\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listShift: state.listShift,\r\n        listEmployee: state.listEmployee,\r\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        addNewTimeKeeper: (data) => {\r\n            dispatch({\r\n                type: \"ADD_NEW_TIME_KEEPER\",\r\n                data: data,\r\n            });\r\n        } \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTimeKeepingModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\NoJobEmployee.js",["969","970","971","972","973","974"],"import React, { Component } from 'react';\r\nimport { Table, TableCell, TableContainer, TableRow, TableHead, Paper} from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nvar listUsers = [];\r\n\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '20px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '80px',\r\n    } \r\n})\r\n\r\nclass NoJobEmployee extends Component {\r\n\r\n    genID = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n        };\r\n        listUsers = [];\r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        this.addEmployeeToDatabase();\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    findEmployeeInAssign(employeeID)\r\n    {\r\n        var shiftAssign = this.props.listShiftAssign;\r\n        for(var i = 0 ; i < shiftAssign.length; i++)\r\n        {\r\n            if(shiftAssign[i]._id.employee._id.employeeID == employeeID)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div style={{padding: 24}}>\r\n                <span style={{backgroundColor: 'blue', color: '#fff', padding: 10}}>\r\n                    NOJOB EMPLOYEE\r\n                </span>\r\n               \r\n                <TableContainer component={Paper} style={{width: 400}} >\r\n                    <Table>\r\n                        <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\" style={{height: 30}}>ID</TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Employee</TableCell>\r\n                                </TableRow>\r\n                        </TableHead>\r\n                        {\r\n\r\n                            this.props.listEmployee.employees.map((item) => \r\n                                !this.findEmployeeInAssign(item._id.employeeID)\r\n                                ?<TableRow>\r\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\" style={{height: 30}}>{item._id.employeeID}</TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\">{item.firstName + ' ' + item.lastName}</TableCell>\r\n                                </TableRow>\r\n                                :(null)\r\n                            )\r\n                        }\r\n                        \r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listEmployee: state.listEmployee,\r\n        listShiftAssign: state.listShiftAssign,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles, {withTheme: true})(NoJobEmployee));\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\TotalMoney.js",["975","976","977","978","979","980","981","982","983","984","985","986","987","988","989","990","991","992","993","994"],"import React from 'react';\r\nimport { Typography } from '@mui/material';\r\nimport { RiMoneyDollarCircleFill } from 'react-icons/ri'\r\nimport { useSelector } from 'react-redux'\r\nimport moment from 'moment';\r\n\r\n\r\nfunction TotalMoney(props) {\r\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const [totalMoney, setTotalMoney] = React.useState('')\r\n\r\n    // console.log(\"ListReceipt\", listReciept);\r\n    let nowTime = new Date();\r\n\r\n    console.log(\"nowTime.getMonth\",moment().subtract(24, 'days').format('l'));\r\n\r\n    React.useEffect(() => {\r\n        let money = 0;\r\n        let currentMonth = nowTime.getMonth() + 1;\r\n        let lastMonth = new Date(moment().subtract(1, 'months'))\r\n        \r\n        if (typeHeaderDashboard == 'Today') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[0] == nowTime.getDate() && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\r\n                    if(!value.deleted) {\r\n                        money += value.totalFinalMoney\r\n                    }\r\n                }\r\n            })\r\n            setTotalMoney(money)\r\n        } else if (typeHeaderDashboard == 'Yesterday') {\r\n            let yesterdayTime = new Date(moment().subtract(1, 'days'))\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[0] == yesterdayTime.getDate() && date[1] == yesterdayTime.getMonth()+1 && date[2] == yesterdayTime.getFullYear()) {\r\n                    if(!value.deleted){\r\n                        money += value.totalFinalMoney\r\n                    }\r\n                }\r\n            })\r\n            setTotalMoney(money)\r\n        } else if (typeHeaderDashboard == 'Month') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[1] == lastMonth.getMonth() + 1 && date[2] == lastMonth.getFullYear()) {\r\n                    if(!value.deleted) {\r\n                        money += value.totalFinalMoney\r\n                    }\r\n                }\r\n            })\r\n            setTotalMoney(money)\r\n        } else if (typeHeaderDashboard == 'Year') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[2] == nowTime.getFullYear()) {\r\n                    if(!value.deleted) {\r\n                        money += value.totalFinalMoney\r\n                    }\r\n                }\r\n            })\r\n            setTotalMoney(money)\r\n        } else if (typeHeaderDashboard == 'All') {\r\n            listReciept.map(value => {\r\n                if(!value.deleted) {\r\n                    money += value.totalFinalMoney\r\n                }\r\n            })\r\n            setTotalMoney(money)\r\n        }\r\n    }, [typeHeaderDashboard])\r\n\r\n    return (\r\n        <div className=\"dashboard-css\">\r\n            <div className=\"dashboard-item-img\" style={{ marginBottom: '30px' }}>\r\n                <RiMoneyDollarCircleFill className=\"dashboard-item-icon\"></RiMoneyDollarCircleFill>\r\n            </div>\r\n            <Typography style={{ marginBottom: '10px' }} variant=\"h6\">{totalMoney.toLocaleString()} VNĐ  \r\n            </Typography>\r\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                Total money\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TotalMoney;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButtonDashboard.js",["995"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport Grow from '@mui/material/Grow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Popper from '@mui/material/Popper';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuList from '@mui/material/MenuList';\r\nimport { BiCaretDown } from 'react-icons/bi'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst options = ['All', 'Today', 'Yesterday', 'Month', 'Year'];\r\n\r\nexport default function SplitButton() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef(null);\r\n    const dispatch = useDispatch()\r\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n\r\n    const handleClick = () => {\r\n        console.info(`You clicked ${options[selectedIndex]}`);\r\n    };\r\n\r\n    const handleMenuItemClick = (event, index, option) => {\r\n        dispatch({\r\n            type: \"TYPE_HEADER_DASHBOARD\",\r\n            typeDashboard: option\r\n        })\r\n        setSelectedIndex(index);\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        dispatch({\r\n            type: \"RESET_TYPE_HEADER_DASHBOARD\"\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ButtonGroup variant=\"contained\" className=\"button-group-customize\" ref={anchorRef} aria-label=\"split button\">\r\n                <Button onClick={handleClick}>{options[selectedIndex]}</Button>\r\n                <Button\r\n                    size=\"small\"\r\n                    aria-controls={open ? 'split-button-menu' : undefined}\r\n                    aria-expanded={open ? 'true' : undefined}\r\n                    aria-label=\"select merge strategy\"\r\n                    aria-haspopup=\"menu\"\r\n                    onClick={handleToggle}\r\n                >\r\n                    <BiCaretDown />\r\n                </Button>\r\n            </ButtonGroup>\r\n            <Popper\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                style={{zIndex: 20}}\r\n            >\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin:\r\n                                placement === 'bottom' ? 'center top' : 'center bottom',\r\n                        }}\r\n                    >\r\n                        <Paper>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList id=\"split-button-menu\" style={{zIndex: 500}}>\r\n                                    {options.map((option, index) => (\r\n                                        <MenuItem\r\n                                            key={option}\r\n                                            selected={index === selectedIndex}\r\n                                            onClick={(event) => handleMenuItemClick(event, index, option)}\r\n                                            style={{zIndex: 500}}\r\n                                        >\r\n                                            {option}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateNextWeekTimeKeeping.js",["996","997","998","999","1000","1001","1002","1003","1004","1005","1006","1007","1008"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, \r\n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nvar listDayInWeek = [\r\n    {ID:'Monday',name:'Thứ hai'}, \r\n    {ID:'Tuesday',name:'Thứ ba'}, \r\n    {ID:'Wednesday',name:'Thứ tư'}, \r\n    {ID:'Thursday',name:'Thứ năm'}, \r\n    {ID:'Friday',name:'Thứ sáu'}, \r\n    {ID:'Saturday',name:'Thứ bảy'}, \r\n    {ID:'Sunday',name:'Chủ nhật'}\r\n];\r\n\r\nclass UpdateNextWeekTimeKeepingModal extends Component {\r\n\r\n    genID = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n            withdrawID: '',\r\n            alterID: '',\r\n            dayChosed: '',\r\n            shiftID: '',\r\n        };\r\n        this.loadInitialData();\r\n    }\r\n\r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    async updateChange() {\r\n        console.log(\"Vô được hàm cập nhập rồi\")\r\n        console.log(\"id giá trị hiện tại\", )\r\n        // Xoá cái hiện tại đi cái đã\r\n        const data = {\r\n            token: localStorage.getItem('token'),   \r\n            offDay: {\r\n                _id: this.props.updateNextWeekTimeKeepingValue._id\r\n            }\r\n        }\r\n\r\n        await axios.delete(`http://localhost:5000/api/employee/off-day`,{data: data})\r\n          .then(res => {\r\n              alert(\"success\");\r\n          })\r\n          .catch(err => {\r\n              alert(err);\r\n          })\r\n        this.props.deleteNextWeekTimeKeeping(this.props.updateNextWeekTimeKeepingValue);\r\n        console.log(\"Xoá được rồi\");\r\n        const dataUpdate = {\r\n            token: localStorage.getItem('token'),\r\n            offDay: {\r\n                _id: {\r\n                    dateInWeek: this.currentdayChosed,\r\n                    storeID: this.props.infoUser.email,\r\n                    shiftType: {\r\n                        _id: {\r\n                            shiftID: this.currentShipChosed,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    employee: {\r\n                        _id: {\r\n                            employeeID: this.currentWidrawID,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\r\n                },\r\n                alternativeEmployee: {\r\n                    _id: {\r\n                        employeeID: this.currentAlterID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n            }    \r\n        };\r\n        console.log(\"dataUpdate\", dataUpdate);\r\n        await axios.post(`http://localhost:5000/api/employee/off-day`, dataUpdate)\r\n          .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu thành công\"); \r\n                this.props.addNewChange(dataUpdate.offDay);\r\n                console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\r\n        })\r\n        .catch(err => {\r\n            alert(err);\r\n            console.log(err);\r\n            if(err.response.data.message)\r\n            {\r\n                alert(err.response.data.message);\r\n            }\r\n            // Nếu lỗi thì thêm lại\r\n            this.props.addNewChange(this.props.updateNextWeekTimeKeepingValue);\r\n            axios.post(`http://localhost:5000/api/employee/off-day`, {\r\n                token: localStorage.getItem('token'),\r\n                offDay: this.props.updateNextWeekTimeKeepingValue,\r\n            })\r\n            .then(res => {\r\n                  console.log(\"Save success\");\r\n                  alert(\"Lưu lại thành công\"); \r\n                })\r\n                .catch(err => {\r\n                    // alert(err);\r\n                    if(err.response.data.message)\r\n                    {\r\n                        alert(err.response.data.message);\r\n                    }\r\n                });\r\n        })\r\n        // var indexOfData = this.findIndexCurrentNextTimeKeepingInRedux(data._id)\r\n        // this.props.changeUpdateNextWeekTimeKeeping(data, indexOfData);\r\n\r\n        this.props.changeUpdateNextWeekTimeKeepingStatus();\r\n    }\r\n\r\n    findIndexCurrentNextTimeKeepingInRedux(id)\r\n    {\r\n        //Đụng đến nếu sửa bảng\r\n        var listToSearch = this.props.nextWeekTimeKeeping;\r\n        for(var i = 0 ; i < listToSearch.length ; i ++)\r\n        {\r\n            if(listToSearch[i]._id.dateInWeek == id.dateInWeek && \r\n                listToSearch[i]._id.shiftType._id.shiftID == id.shiftType._id.shiftID&& \r\n                listToSearch[i]._id.employee._id.employeeID == id.employee._id.employeeID)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    realDate = '';\r\n    currentdayChosed = '';\r\n    currentShipChosed = '';\r\n    currentWidrawID = '';\r\n    loadInitialData() {\r\n        var val = this.props.updateNextWeekTimeKeepingValue;\r\n        this.realDate = val._id.realDate;\r\n        if(this.realDate.indexOf('T')!=-1) this.realDate = this.realDate.substring(0, this.realDate.indexOf('T'));\r\n        this.currentdayChosed = val._id.dateInWeek;\r\n        this.currentShipChosed = val._id.shiftType._id.shiftID;\r\n        this.currentWidrawID = val._id.employee._id.employeeID;\r\n        this.currentAlterID = val.alternativeEmployee._id.employeeID;\r\n        this.setState({\r\n            change : !this.state.change,\r\n            shiftID: this.currentShipChosed,\r\n            dayChosed: this.currentdayChosed,\r\n            withdrawID: this.currentWidrawID,\r\n            alterID: this.currentAlterID,\r\n        });\r\n    }\r\n\r\n    getDayInWeek(date) {\r\n        const d = new Date(date);\r\n    \r\n        const weekday = new Array(7);\r\n        weekday[0] = \"Sunday\";\r\n        weekday[1] = \"Monday\";\r\n        weekday[2] = \"Tuesday\";\r\n        weekday[3] = \"Wednesday\";\r\n        weekday[4] = \"Thursday\";\r\n        weekday[5] = \"Friday\";\r\n        weekday[6] = \"Saturday\";\r\n    \r\n        return weekday[d.getDay()];\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \r\n                    title=\"Update Change TimeKeeper\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            Real Date\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"date\" \r\n                                            name='realDate'\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.realDate}\r\n                                            onChange={(event) => {\r\n                                                console.log(\"new Date\",event.target.value)\r\n                                                this.currentdayChosed = this.getDayInWeek(event.target.value);\r\n                                                this.setState({dayChosed: this.getDayInWeek(event.target.value)});\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Choose Day in week\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 120 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                value={this.currentdayChosed}\r\n                                                onChange={(event) => {\r\n                                                    this.currentdayChosed = event.target.value;\r\n                                                    this.setState({dayChosed: event.target.value});\r\n                                                }}\r\n                                                readOnly = {true}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    listDayInWeek.map((item) =>\r\n                                                        <MenuItem value={item.ID}>\r\n                                                            {item.name}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n\r\n                                    <Grid item md={8} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>\r\n                                            Choose Shift\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 220 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                value={this.currentShipChosed}\r\n                                                onChange={(event) => {\r\n                                                    this.currentShipChosed = event.target.value;\r\n                                                    this.setState({shiftID: event.target.value});\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                    : this.props.listShift.map((shift) =>\r\n                                                        <MenuItem value={shift._id.shiftID}>\r\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Widraw Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                value={this.currentWidrawID}\r\n                                                onChange={(event) => {\r\n                                                    this.currentWidrawID = event.target.value;\r\n                                                    this.setState({withdrawID: event.target.value});\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Alter Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                value={this.currentAlterID}\r\n                                                onChange={(event) => {\r\n                                                    this.currentAlterID = event.target.value;\r\n                                                    this.setState({alterID: event.target.value});\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        !(this.currentWidrawID == item._id.employeeID) ?\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                        : null\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.updateChange()}>\r\n                                            Add Change\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listShift: state.listShift,\r\n        listEmployee: state.listEmployee,\r\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\r\n        updateNextWeekTimeKeepingValue: state.updateNextWeekTimeKeepingValue,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeUpdateNextWeekTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        addNewChange: (data) => {\r\n            dispatch({\r\n                type: \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\",\r\n                data: data,\r\n            });\r\n        },\r\n        \r\n        changeUpdateNextWeekTimeKeeping: (data, indexOfData) => {\r\n            dispatch({\r\n                type: \"UPDATE_NEXT_WEEK_TIMEKEEPER\",\r\n                data: data,\r\n                index: indexOfData,\r\n            });\r\n        },\r\n        deleteNextWeekTimeKeeping: (data) => {\r\n            dispatch({\r\n              type: \"DELETE_NEXT_WEEK_TIMEKEEPER\",\r\n              data: data\r\n            });\r\n            console.log(\"data\", data)\r\n          },\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateNextWeekTimeKeepingModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddNextWeekTimeKeeping.js",["1009","1010","1011","1012","1013","1014","1015","1016","1017","1018","1019","1020","1021","1022","1023","1024","1025"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, \r\n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nvar listDayInWeek = [\r\n    {ID:'Monday',name:'Thứ hai'}, \r\n    {ID:'Tuesday',name:'Thứ ba'}, \r\n    {ID:'Wednesday',name:'Thứ tư'}, \r\n    {ID:'Thursday',name:'Thứ năm'}, \r\n    {ID:'Friday',name:'Thứ sáu'}, \r\n    {ID:'Saturday',name:'Thứ bảy'}, \r\n    {ID:'Sunday',name:'Chủ nhật'}\r\n];\r\nclass AddNextWeekTimeKeepingModal extends Component {\r\n\r\n    genID = 0;\r\n    dayChosed = '';\r\n    constructor(props) {\r\n        super(props);\r\n        this.dayChosed = this.getDayInWeek(this.getCurrentDateTime());\r\n        this.state = {\r\n            change: false,\r\n            withdrawID: '',\r\n            alterID: '',\r\n            dayChosed: this.getDayInWeek(this.getCurrentDateTime()),\r\n            shiftID: '',\r\n        };\r\n        \r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeAddNextWeekTimeKeepingStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        this.addEmployeeToDatabase();\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    isGreater(dateString1, dateString2){\r\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\r\n    }\r\n\r\n    checkContraint() {\r\n        if(this.state.dayChosed.length == 0)\r\n        {\r\n            alert(\"Chưa chọn ngày nào trong tuần\");\r\n            return false;\r\n        }\r\n        if(this.state.shiftID.length == 0)\r\n        {\r\n            alert(\"Chưa chọn ca nào\");\r\n            return false;\r\n        }\r\n        console.log(this.state.withdrawID );\r\n        if( this.state.withdrawID == undefined || this.state.withdrawID.length == 0)\r\n        {\r\n            alert(\"Chưa chọn nhân viên nào nghỉ\"); \r\n            return false;\r\n        }\r\n        if(this.state.alterID== undefined || this.state.alterID.length == 0)\r\n        {\r\n            alert(\"Chưa chọn nhân viên nào thay thế\");\r\n            return false;\r\n        }\r\n        if(!this.isGreater(document.querySelector('input[name=\"realDate\"]').value, this.getCurrentDateTime() ))\r\n        {\r\n            alert(\"Ngày nhập phải nhỏ hơn ngày báo nghỉ\");\r\n            return false;\r\n        }   \r\n\r\n        // Có CSDL thì báo xem có trùng với cái cũ ko nữa\r\n        \r\n        alert(\"Đã check hết constraint\");\r\n        return true;\r\n    }\r\n    getDayInWeek(date) {\r\n        const d = new Date(date);\r\n    \r\n        const weekday = new Array(7);\r\n        weekday[0] = \"Sunday\";\r\n        weekday[1] = \"Monday\";\r\n        weekday[2] = \"Tuesday\";\r\n        weekday[3] = \"Wednesday\";\r\n        weekday[4] = \"Thursday\";\r\n        weekday[5] = \"Friday\";\r\n        weekday[6] = \"Saturday\";\r\n    \r\n        return weekday[d.getDay()];\r\n    }\r\n\r\n    async addChange() {\r\n        if(this.checkContraint()==false) return ;\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            offDay: {\r\n                _id: {\r\n                    dateInWeek: this.state.dayChosed,\r\n                    storeID: this.props.infoUser.email,\r\n                    shiftType: {\r\n                        _id: {\r\n                            shiftID: this.state.shiftID,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    employee: {\r\n                        _id: {\r\n                            employeeID: this.state.withdrawID,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\r\n                },\r\n                alternativeEmployee: {\r\n                    _id: {\r\n                        employeeID: this.state.alterID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n                \r\n            }\r\n        };\r\n        await axios.post(`http://localhost:5000/api/employee/off-day`, data1)\r\n          .then(res => {\r\n              console.log(\"Save success\");\r\n              alert(\"Lưu thành công\")\r\n              const data = {\r\n                _id: {\r\n                    dateInWeek: this.state.dayChosed,\r\n                    storeID: this.props.infoUser.email,\r\n                    shiftType: {\r\n                        _id: {\r\n                            shiftID: this.state.shiftID,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    employee: {\r\n                        _id: {\r\n                            employeeID: this.state.withdrawID,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\r\n                },\r\n                alternativeEmployee: {\r\n                    _id: {\r\n                        employeeID: this.state.alterID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n                \r\n            };\r\n            \r\n            this.props.addNewChange(data);\r\n            console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\r\n            this.props.changeAddNextWeekTimeKeepingStatus();\r\n          })\r\n          .catch(err => {\r\n                console.log(\"err.response.data.message\", err.response.data.message);\r\n                if(err.response.data.message)\r\n                {\r\n                    alert(err.response.data.message);\r\n                }\r\n                console.log(err);\r\n          })\r\n        \r\n        // console.log(this.props.nextWeekTimeKeeping)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \r\n                    title=\"Change NextWEEK TimeKeeper\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            Real Date\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"date\" \r\n                                            name='realDate'\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.getCurrentDateTime()}\r\n                                            onChange={(event) => {\r\n                                                this.dayChosed = this.getDayInWeek(event.target.value);\r\n                                                this.setState({dayChosed: this.getDayInWeek(event.target.value)});\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Choose Day in week\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 120 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                value={this.dayChosed}\r\n                                                onChange={(event) => {\r\n                                                    this.dayChosed = event.target.value;\r\n                                                    this.setState({dayChosed: event.target.value});\r\n\r\n                                                }}\r\n                                                readOnly={true}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    listDayInWeek.map((item) =>\r\n                                                        <MenuItem value={item.ID}>\r\n                                                            {item.name}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n\r\n                                    <Grid item md={8} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>\r\n                                            Choose Shift\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 220 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({shiftID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                    : this.props.listShift.map((shift) =>\r\n                                                        <MenuItem value={shift._id.shiftID}>\r\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Widraw Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({withdrawID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        !(this.state.alterID == item._id.employeeID) ?\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                        : null\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Alter Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({alterID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        !(this.state.withdrawID == item._id.employeeID) ?\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                        : null\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.addChange()}>\r\n                                            Add Change\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listShift: state.listShift,\r\n        listEmployee: state.listEmployee,\r\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddNextWeekTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        addNewChange: (data) => {\r\n            dispatch({\r\n                type: \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\",\r\n                data: data,\r\n            });\r\n        } \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNextWeekTimeKeepingModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\fakeData.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeTableHeader.js",["1026","1027","1028","1029","1030","1031","1032","1033"],"import PropTypes from 'prop-types';\r\n// material\r\nimport { visuallyHidden } from '@mui/utils';\r\nimport { Box, Checkbox, TableRow, TableCell, TableHead, TableSortLabel } from '@mui/material';\r\nimport { withStyles } from '@material-ui/styles';\r\n// ----------------------------------------------------------------------\r\n\r\nEmployeeTableHeader.propTypes = {\r\n  order: PropTypes.oneOf(['asc', 'desc']),\r\n  orderBy: PropTypes.string,\r\n  rowCount: PropTypes.number,\r\n  headLabel: PropTypes.array,\r\n  numSelected: PropTypes.number,\r\n  onRequestSort: PropTypes.func,\r\n  onSelectAllClick: PropTypes.func\r\n};\r\nconst styles = theme =>  ({\r\n  goodTable: {                                     \r\n      borderWidth: '1px',\r\n      borderColor: '#ccc',\r\n      borderStyle: 'solid'\r\n  },\r\n  goodTable_Cell_Header: {                                     \r\n      borderWidth: '1px',\r\n      borderColor: '#ccc',\r\n      borderStyle: 'solid',\r\n      height: '40px',\r\n  },\r\n  goodTable_Cell: {                                     \r\n      borderWidth: '1px',\r\n      borderColor: '#ccc',\r\n      borderStyle: 'solid',\r\n      height: '80px',\r\n  } \r\n})\r\n\r\nfunction EmployeeTableHeader( props){\r\n  const {\r\n    order,\r\n    orderBy,\r\n    rowCount,\r\n    headLabel,\r\n    numSelected,\r\n    onRequestSort,\r\n    onSelectAllClick} = props;\r\n  // const createSortHandler = (property) => (event) => {\r\n  //   onRequestSort(event, property);\r\n  // };\r\n  const {classes} =  props;\r\n  // console.log(\"headLabel\", headLabel);\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\" className = {classes.goodTable_Cell_Header}>\r\n          <Checkbox\r\n            // indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            // checked={rowCount > 0 && numSelected === rowCount}\r\n            // onChange={onSelectAllClick}\r\n          />\r\n        </TableCell>\r\n        {headLabel.map((headCell) => (\r\n          <TableCell\r\n            className = {classes.goodTable_Cell_Header}\r\n            // key={headCell.id}\r\n            // align={headCell.alignRight ? 'right' : 'left'}\r\n            // sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              // hideSortIcon\r\n              // active={orderBy === headCell.id}\r\n              // direction={orderBy === headCell.id ? order : 'asc'}\r\n              // onClick={createSortHandler(headCell.id)}\r\n              style={{\r\n                color: '#333'\r\n              }}\r\n            >\r\n              {headCell.label}\r\n              {/* {orderBy === headCell.id ? (\r\n                <Box sx={{ ...visuallyHidden }}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null} */}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nexport default withStyles( styles )( EmployeeTableHeader );","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeToolbar.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\SearchNotFound.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Scrollbar.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\TimekeepingTable.js",["1034","1035","1036","1037","1038"],"import {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { withStyles } from '@material-ui/styles';\r\n// material\r\nimport { Paper, TableContainer, Table, TableHead, TableCell, TableRow, Button} from '@mui/material';\r\nimport { AiOutlineEdit, AiFillDelete } from \"react-icons/ai\";\r\n// ----------------------------------------------------------------------\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    } \r\n})\r\n\r\nclass TimeKeepingTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: 'false'\r\n    }\r\n    this.getAllTimeKeeping()\r\n  }\r\n\r\n    async getAllTimeKeeping()\r\n    {\r\n        var result = [];\r\n        const data = {\r\n          token: localStorage.getItem('token'),\r\n          filter: {\r\n              \"_id.storeID\": this.props.infoUser.email,\r\n          }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/employee/time-keeping`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n                // console.log(\"điểm danh\", res.data.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // To redux\r\n        this.props.getTimeKeeping(result);\r\n    }\r\n\r\n  getShiftInforByID(shiftID)\r\n  {\r\n      var listShift = this.props.listShift;\r\n      for(var i = 0 ; i < listShift.length; i++)\r\n      {\r\n        if(listShift[i]._id.shiftID == shiftID)\r\n        {\r\n            return listShift[i].name + ' (' + listShift[i].timeFrom + '-' + listShift[i].timeEnd + ')';\r\n        }\r\n      }\r\n      return \"Can't get shift\";\r\n  }\r\n\r\n  getEmployeeFullNameByID(employeeID)\r\n  {\r\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n      {\r\n          var currentEmployee = this.props.listEmployee.employees[i];\r\n          if(currentEmployee._id.employeeID==employeeID)\r\n          {\r\n            return currentEmployee.lastName + ' ' + currentEmployee.firstName;\r\n          }\r\n      }\r\n      return \"Can't get name\";\r\n  }\r\n  render() {\r\n    const { classes } = this.props;\r\n    return ( \r\n      <div style={{marginTop: 0, padding: 24}}> \r\n          <span\r\n              style={{\r\n                  color: '#fff',\r\n                  backgroundColor: 'blue',\r\n                  padding: 10,\r\n              }}\r\n          >ALL TIMEKEEPING</span>\r\n          <TableContainer component={Paper}>\r\n                <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='180px'>Day</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='80px'>Date Of Week</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" >Shift</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Paid</TableCell>\r\n                            {/* <TableCell className={classes.goodTable_Cell_Header} align=\"center\"></TableCell> */}\r\n                        </TableRow>\r\n                        {\r\n                            this.props.listTimeKeeper.map((timeKeeper)=>\r\n                                (\r\n                                  <TableRow>\r\n                                    <TableCell className={classes.goodTable_Cell}>\r\n                                        {timeKeeper._id.realDate.substring(0,timeKeeper._id.realDate.indexOf('T') )}\r\n                                    </TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.dateInWeek}</TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell}>\r\n                                        {timeKeeper._id.shiftType.name + \" (\"+ timeKeeper._id.shiftType.timeFrom + \r\n                                          ' - '+  timeKeeper._id.shiftType.timeEnd +')'}\r\n                                      </TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.employee._id.employeeID}</TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell}>\r\n                                        {timeKeeper._id.employee.firstName + \" \" + timeKeeper._id.employee.lastName}\r\n                                    </TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell}>\r\n                                        {timeKeeper.isPaidSalary.toString()}\r\n                                    </TableCell>\r\n                                    {/* <TableCell className={classes.goodTable_Cell}>\r\n                                      <div style={{display: 'flex'}}>\r\n                                        <AiOutlineEdit size={20} \r\n                                            onClick={() =>\r\n                                              {\r\n                                                this.props.changeUpdateTimeKeepingStatus();\r\n                                                this.props.changeUpdateTimeKeepingValue(timeKeeper);\r\n                                              }\r\n                                            }\r\n                                          />\r\n                                          <AiFillDelete size={20} \r\n                                            onClick={() => \r\n                                                {\r\n                                                    // axios.delete(`http://localhost:5000/api/????`,{data: data})\r\n                                                    //   .then(res => {\r\n                                                    //       alert(\"success\");\r\n                                                    //   })\r\n                                                    //   .catch(err => {\r\n                                                    //       alert(err);\r\n                                                    //   })\r\n                                                    this.props.deleteTimeKeeping(timeKeeper);\r\n                                                    console.log(this.props.listTimeKeeper);\r\n                                                }\r\n                                                \r\n                                              // this.props.changeUpdateNextWeekTimeKeepingStatus();\r\n                                              \r\n                                              // this.props.changeUpdateNextWeekTimeKeepingValue(item);\r\n                                            }\r\n                                        />\r\n                                      </div>\r\n                                    </TableCell> */}\r\n                                </TableRow>\r\n                                )\r\n                            )\r\n                        }\r\n                    </TableHead>\r\n                </Table>\r\n          </TableContainer>\r\n            {/* <Button \r\n                variant=\"contained\"\r\n                onClick={() => this.props.changeAddTimeKeepingStatus()}\r\n            >\r\n              Add\r\n            </Button> */}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n      listTimeKeeper: state.listTimeKeeping,\r\n      listShift: state.listShift,\r\n      listEmployee: state.listEmployee,\r\n      infoUser: state.infoUser\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    changeAddTimeKeepingStatus: () => {\r\n      dispatch({\r\n          type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\r\n      });\r\n    },\r\n    changeUpdateTimeKeepingStatus: () => {\r\n      dispatch({\r\n          type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\r\n      });\r\n    },\r\n    changeUpdateTimeKeepingValue: (data) => {\r\n      dispatch({\r\n        type: \"SET_UPDATE_TIMEKEEPER_VALUE\",\r\n        data: data\r\n      });\r\n    },\r\n    deleteTimeKeeping: (data) => {\r\n      console.log(\"data\", data)\r\n      dispatch({\r\n        type: \"DELETE_TIMEKEEPER\",\r\n        data: data\r\n      });  \r\n    },\r\n    getTimeKeeping: (data) => {\r\n      dispatch({\r\n        type: \"GET_TIMEKEEPER\",\r\n        data: data\r\n      });  \r\n    },\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(TimeKeepingTable));","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\FixedCalendar.js",["1039"],"import {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { withStyles } from '@material-ui/styles';\r\n// material\r\nimport { Paper, TableContainer, Table, TableHead, TableCell, TableRow, Button } from '@mui/material';\r\nimport FixedTableCell from './FixedCalendarCell';\r\n\r\n// ----------------------------------------------------------------------\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '80px',\r\n    } \r\n})\r\n\r\nclass FixedCalendar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: 'false'\r\n    }\r\n    this.getAllShiftAssign();\r\n  }\r\n  async getAllShiftAssign()\r\n  {\r\n    var result = [];\r\n    const data = {\r\n      token: localStorage.getItem('token'),\r\n      filter: {\r\n          \"_id.storeID\": this.props.infoUser.email,\r\n      }   \r\n    }\r\n    await axios.get(`http://localhost:5000/api/employee/shift-assign`, {\r\n        params: {...data}\r\n    })\r\n        .then(res => {\r\n            result = res.data.data;\r\n            this.props.setShiftAssign(result);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            alert(err)\r\n        })\r\n  }\r\n  \r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div style={{marginTop: 10, padding: 24, maxHeight: 600}}> \r\n          <TableContainer component={Paper}>\r\n              <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                  <TableHead>\r\n                      <TableRow>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>\r\n                                Shift\r\n                            </TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Mon</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Tue</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Wed</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Thu</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Fri</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Sat</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Sun</TableCell>\r\n                      </TableRow>\r\n                  </TableHead>\r\n                      {\r\n                          this.props.listShift.map((shift) => \r\n                          (\r\n                              <TableRow>\r\n                                  <TableCell className={classes.goodTable_Cell} width={100}>{shift.timeFrom + '-' + shift.timeEnd}</TableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Monday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Tuesday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Wednesday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Thursday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Friday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Saturday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Sunday'}></FixedTableCell>\r\n                              </TableRow>\r\n                          ))\r\n                      }\r\n              </Table>\r\n          </TableContainer>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        listShift: state.listShift,\r\n        infoUser: state.infoUser,\r\n        listShiftAssign: state.listShiftAssign,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n      setShiftAssign: (data) => {\r\n          dispatch({\r\n              type: \"SET_SHIFT_ASSIGN\",\r\n              data: data,\r\n          });\r\n      }\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(FixedCalendar));","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UnShiftEmployee.js",["1040","1041","1042","1043","1044","1045","1046","1047","1048","1049","1050"],"import {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Icon } from '@iconify/react';\r\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport '../../css/EmployeeManager.css'\r\n// material\r\nimport { Paper, TableContainer, Table, \r\n  TableHead, TableCell, TableRow, Button,\r\n  Menu, MenuItem, Grid\r\n} from '@mui/material';\r\nimport { AiOutlineEdit, AiFillDelete } from \"react-icons/ai\";\r\n// ----------------------------------------------------------------------\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    } \r\n})\r\n\r\nclass UnShiftEmployee extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: false\r\n    }\r\n    this.getAllNextWeekTimeKeeping();\r\n    console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\r\n  }\r\n\r\n  async getAllNextWeekTimeKeeping()\r\n  {\r\n    var result = [];\r\n    const data = {\r\n      token: localStorage.getItem('token'),\r\n      filter: {\r\n          \"_id.storeID\": this.props.infoUser.email,\r\n      }   \r\n    }\r\n    await axios.get(`http://localhost:5000/api/employee/off-day`, {\r\n        params: {...data}\r\n    })\r\n        .then(res => {\r\n            result = res.data.data;\r\n            console.log(\"Báo nghỉ\", res.data.data);\r\n            this.props.getEmployeeDayOff(result);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            alert(err)\r\n        })\r\n  }\r\n\r\n  findShift(shiftID) {\r\n      var shifts= this.props.listShift;\r\n        for(var i = 0 ; i < shifts.length ; i++)\r\n        {\r\n            if(shifts[i]._id.shiftID == shiftID)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n  }\r\n\r\n  getShiftNameAndTime(shiftID)\r\n  {\r\n      var shifts= this.props.listShift;\r\n      for(var i = 0 ; i < shifts.length ; i++)\r\n      {\r\n          if(shifts[i]._id.shiftID == shiftID)\r\n          {\r\n              return shifts[i].name + ' (' + shifts[i].timeFrom + ' - ' + shifts[i].timeEnd +') ';\r\n          }\r\n      }\r\n      return \"Can't get shift\";\r\n  }\r\n\r\n  getEmployeeNameByID(employeeID)\r\n  {\r\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n      {\r\n          var currentEmployee = this.props.listEmployee.employees[i];\r\n          if(currentEmployee._id.employeeID==employeeID)\r\n          {\r\n            return currentEmployee.firstName;\r\n          }\r\n      }\r\n      return \"This employee was sacked\";\r\n  }\r\n\r\n  reload()\r\n  {\r\n    this.setState({change: !this.state.change})\r\n  }\r\n\r\n  openOption = false;\r\n\r\n  handleClose ()\r\n  {\r\n      this.openOption = false;\r\n      this.setState({change: !this.state.change});\r\n  }\r\n\r\n  handleOpen()\r\n  {\r\n      this.openOption = true;\r\n      alert(\"Ấn vào mở rồi\")\r\n      this.setState({change: !this.state.change});\r\n  }\r\n\r\n  findEmployeeNameByID(employeeID)\r\n  {\r\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n      {\r\n          var currentEmployee = this.props.listEmployee.employees[i];\r\n          if(currentEmployee._id.employeeID==employeeID)\r\n          {\r\n            return true;\r\n          }\r\n      }\r\n      return false;\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div style={{marginTop: 0, padding: 24}}>\r\n          <span\r\n              style={{\r\n                  color: '#fff',\r\n                  backgroundColor: 'blue',\r\n                  padding: 10,\r\n              }}\r\n          >CHANGE TIMEKEEPING</span> \r\n          <TableContainer component={Paper} >\r\n                <Table className={classes.goodTable} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='80px' rowSpan={2}>Day</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" rowSpan={2}>Shift</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" rowSpan={2}>Real Date</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" colSpan={2}>Withdraw</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" colSpan={2}>Change</TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\r\n                        </TableRow>\r\n                        {\r\n                          this.props.nextWeekTimeKeeping.map((item) =>\r\n                          // this.findEmployeeNameByID(item._id.employee._id.employeeID) == false \r\n                          // || this.findEmployeeNameByID(item.alternativeEmployee._id.employeeID) == false\r\n                          this.findShift(item._id.shiftType._id.shiftID) == false\r\n                          ? (null) :\r\n                          <TableRow\r\n                              style={{\r\n                                position: 'relative',\r\n                              }}\r\n                          >\r\n                              <TableCell className={classes.goodTable_Cell}>{item._id.dateInWeek}</TableCell>\r\n                              <TableCell className={classes.goodTable_Cell}>{this.getShiftNameAndTime(item._id.shiftType._id.shiftID)}</TableCell>\r\n                              <TableCell className={classes.goodTable_Cell}>\r\n                                  {item._id.realDate ? item._id.realDate.indexOf('T') !=-1 ? item._id.realDate.substring(0,item._id.realDate.indexOf('T') ) : item._id.realDate : \"Loading...\"}\r\n                              </TableCell>\r\n                              <TableCell className={classes.goodTable_Cell}>{item._id.employee._id.employeeID}</TableCell>\r\n                              <TableCell className={classes.goodTable_Cell}>{this.getEmployeeNameByID(item._id.employee._id.employeeID)}</TableCell>\r\n                              <TableCell className={classes.goodTable_Cell}>{item.alternativeEmployee._id.employeeID}</TableCell>\r\n                              <TableCell className={classes.goodTable_Cell} style={{\r\n                                backgroundColor: this.findEmployeeNameByID(item.alternativeEmployee._id.employeeID) ? '#fff' :'#ff6057' \r\n                              }}>{this.getEmployeeNameByID(item.alternativeEmployee._id.employeeID)}</TableCell>\r\n                              <TableCell width={60} className={classes.goodTable_Cell} >\r\n                                  <div style={{display: 'flex'}}>\r\n                                      <AiOutlineEdit size={20} \r\n                                        onClick={() =>\r\n                                          {\r\n                                            this.props.changeUpdateNextWeekTimeKeepingStatus();\r\n                                            this.props.changeUpdateNextWeekTimeKeepingValue(item);\r\n                                          }\r\n                                        }\r\n                                      />\r\n                                      <AiFillDelete size={20} \r\n                                          onClick={() => \r\n                                              {\r\n                                                  const data = {\r\n                                                      token: localStorage.getItem('token'),   \r\n                                                      offDay: {\r\n                                                          _id: item._id\r\n                                                      }\r\n                                                  }\r\n                                                  console.log(\"data.offDay._id\", data.offDay._id)\r\n                                                  axios.delete(`http://localhost:5000/api/employee/off-day`,{data: data})\r\n                                                    .then(res => {\r\n                                                        alert(\"success\");\r\n                                                    })\r\n                                                    .catch(err => {\r\n                                                        alert(err);\r\n                                                    })\r\n                                                  this.props.deleteNextWeekTimeKeeping(item);\r\n                                              }\r\n                                            // this.props.changeUpdateNextWeekTimeKeepingStatus();\r\n                                            \r\n                                            // this.props.changeUpdateNextWeekTimeKeepingValue(item);\r\n                                          }\r\n                                      />\r\n                                    </div>      \r\n                              </TableCell> \r\n                          </TableRow> \r\n                          )\r\n                        }\r\n                    </TableHead>\r\n                    \r\n                </Table>\r\n            </TableContainer>\r\n              \r\n            <Button \r\n              variant=\"contained\"\r\n              onClick={() => this.props.changeAddNextWeekTimeKeepingStatus()}\r\n            >\r\n              Add</Button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    nextWeekTimeKeeping: state.nextWeekTimeKeeping,\r\n    listEmployee: state.listEmployee,\r\n    listShift: state.listShift,\r\n    infoUser: state.infoUser,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    changeAddNextWeekTimeKeepingStatus: () => {\r\n      dispatch({\r\n          type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n      });\r\n    },\r\n    changeUpdateNextWeekTimeKeepingStatus: () => {\r\n      dispatch({\r\n          type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n      });\r\n    },\r\n    changeUpdateNextWeekTimeKeepingValue: (data) => {\r\n      dispatch({\r\n        type: \"SET_UPDATE_NEXT_WEEK_TIMEKEEPER_VALUE\",\r\n        data: data\r\n      });\r\n    },\r\n    deleteNextWeekTimeKeeping: (data) => {\r\n      dispatch({\r\n        type: \"DELETE_NEXT_WEEK_TIMEKEEPER\",\r\n        data: data\r\n      });\r\n      console.log(\"data\", data)\r\n    },\r\n    getEmployeeDayOff: (data) => {\r\n      dispatch({\r\n        type: \"SET_NEXT_WEEK_TIMEKEEPER\",\r\n        data: data\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(UnShiftEmployee));","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\PayMoneyModal.js",["1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Table, Grid, TextField, \r\n    TableCell, TableContainer, Button, InputLabel,\r\n    Paper, TableRow, TableHead } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    } \r\n})\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\n\r\nclass PayEmployeeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            goodID : \"\",\r\n            change: false,\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n        }; \r\n        // console.log(\"listTimeKeeper\", this.props.listTimeKeeper);\r\n        // console.log(\"this.props.employeeID\", this.props.employeeID);\r\n    }\r\n\r\n    getShiftInforByID(shiftID)\r\n    {\r\n        var listShift = this.props.listShift;\r\n        for(var i = 0 ; i < listShift.length; i++)\r\n        {\r\n            if(listShift[i]._id.shiftID == shiftID)\r\n            {\r\n                return listShift[i].name + ' (' + listShift[i].timeFrom + '-' + listShift[i].timeEnd + ')';\r\n            }\r\n        }\r\n        return \"Can't get shift\";\r\n    }\r\n\r\n    getEmployeeFullNameByID(employeeID)\r\n    {\r\n            for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n            {\r\n                var currentEmployee = this.props.listEmployee.employees[i];\r\n                if(currentEmployee._id.employeeID==employeeID)\r\n                {\r\n                        return currentEmployee.lastName + ' ' + currentEmployee.firstName;\r\n                }\r\n            }\r\n        return \"Can't get name\";\r\n    }\r\n\r\n    exit() {\r\n        this.props.changePayEmployeeStatus();  \r\n    }\r\n\r\n    payEmployee(){\r\n        // alert(\"Confirm password\");\r\n        // viết api để trả lương ở đây\r\n        // this.props.changePayEmployeeStatus();\r\n        for(var i =0; i< this.props.listTimeKeeper.length; i++)\r\n        {\r\n            if(this.props.listTimeKeeper[i]._id.employee._id.employeeID != this.props.employeeID.id) continue;\r\n            // Thử api\r\n            const data = {\r\n                token: localStorage.getItem('token'),\r\n                updatedTimeKeeping: {\r\n                    _id: this.props.listTimeKeeper[i]._id,\r\n                    isPaidSalary: true,\r\n                }\r\n            };\r\n            axios.put(`http://localhost:5000/api/employee/time-keeping`, data)\r\n                .then(res => {\r\n                    console.log(\"Update success\");\r\n                    alert('Đã update thành công sản phẩm');\r\n                    \r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                })\r\n        }\r\n        \r\n        this.props.changePayEmployeeStatus();    \r\n        // Cập nhật redux trạng thái trả lương nhiều cái cùng lúc\r\n\r\n    }\r\n    \r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"PAY EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            {/* <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input> */}\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                     <TableContainer component={Paper}>\r\n                                            <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                                                <TableHead>\r\n                                                    <TableRow>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='180px'>Day</TableCell>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='80px'>Date Of Week</TableCell>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\" >Shift</TableCell>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Salary</TableCell>\r\n                                                        {/* <TableCell className={classes.goodTable_Cell_Header} align=\"center\"></TableCell> */}\r\n                                                    </TableRow>\r\n                                                    {\r\n                                                        this.props.listTimeKeeper.map((timeKeeper)=>\r\n                                                        timeKeeper._id.employee._id.employeeID != this.props.employeeID.id ? (null) :\r\n                                                            (\r\n                                                            <TableRow>\r\n                                                                <TableCell className={classes.goodTable_Cell}>\r\n                                                                    {timeKeeper._id.realDate.substring(0,timeKeeper._id.realDate.indexOf('T') )}\r\n                                                                </TableCell>\r\n                                                                <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.dateInWeek}</TableCell>\r\n                                                                <TableCell className={classes.goodTable_Cell}>\r\n                                                                    {timeKeeper._id.shiftType.name + \" (\"+ timeKeeper._id.shiftType.timeFrom + \r\n                                                                    ' - '+  timeKeeper._id.shiftType.timeEnd +')'}\r\n                                                                </TableCell>\r\n                                                                <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.employee._id.employeeID}</TableCell>\r\n                                                                <TableCell className={classes.goodTable_Cell}>\r\n                                                                    {timeKeeper._id.employee.firstName + \" \" + timeKeeper._id.employee.lastName}\r\n                                                                </TableCell>\r\n                                                                <TableCell className={classes.goodTable_Cell}>\r\n                                                                    {timeKeeper.isPaidSalary.toString()}\r\n                                                                </TableCell>\r\n                                                            </TableRow>\r\n                                                            )\r\n                                                        )\r\n                                                    }\r\n                                                </TableHead>\r\n                                            </Table>\r\n                                    </TableContainer>\r\n                                    <Grid item md={12}\r\n                                        className='input-item'\r\n                                        style ={{\r\n                                            display: 'flex',\r\n                                            justifyContent: 'space-evenly'\r\n                                        }}\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.exit()}>\r\n                                            Exit\r\n                                        </Button>\r\n                                        <Button variant=\"contained\" onClick={() => this.payEmployee()}>\r\n                                            Pay employee\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        listTimeKeeper: state.listTimeKeeping,\r\n        listShift: state.listShift,\r\n        listEmployee: state.listEmployee,\r\n        infoUser: state.infoUser,\r\n        employeeID: state.currentEmployeeViewValue,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changePayEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(PayEmployeeModal));\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Label.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Page.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeMoreMenu.js",["1073","1074"],"import { Icon } from '@iconify/react';\r\nimport editFill from '@iconify/icons-eva/edit-fill';\r\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\r\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\r\nimport {GiPayMoney} from \"react-icons/gi\";\r\nimport {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\n// material\r\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nclass EmployeeMoreMenu extends Component {\r\n  currentEmployee = {};\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: 'false'\r\n    }\r\n    this.myRef = React.createRef();\r\n    this.getEmployeeByID(this.props.data);\r\n  }\r\n  setIsOpen(val) {\r\n    this.isOpen = val;\r\n    this.setState({change: val});\r\n    \r\n  }\r\n\r\n  edit() {\r\n    this.getEmployeeByID(this.props.data);\r\n    // console.log(\"send nude\", this.currentEmployee);\r\n    this.props.setUpdateEmployee(this.currentEmployee);\r\n    this.props.changeUpdateEmployeeStatus();\r\n  }\r\n\r\n  delete() {\r\n    const data = {\r\n      token: localStorage.getItem('token'),\r\n      employee:\r\n      [\r\n          {\r\n              employeeID: this.props.data,\r\n              storeID: this.props.infoUser.email, \r\n          },\r\n      ] \r\n    }\r\n    console.log(data);\r\n\r\n    axios.delete(`http://localhost:5000/api/employee`,{data: data})\r\n        .then(res => {\r\n            alert(\"delete employee(s) success\");\r\n        })\r\n        .catch(err => {\r\n            alert(err);\r\n        })\r\n    \r\n    //Move to sacked\r\n    this.props.deleteEmployeeToSackRedux(this.currentEmployee)\r\n    // Delete redux\r\n    this.props.deleteEmployeeRedux(this.props.data);\r\n\r\n    // Xoá hết shiftAssign\r\n    for(var i = 0; i < this.props.listShiftAssign.length; i++)\r\n    {\r\n        if(this.props.listShiftAssign[i]._id.employee._id.employeeID == this.props.data) \r\n        {\r\n          const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            shiftAssign: {...this.props.listShiftAssign[i]}\r\n          }\r\n          console.log(\"data1\", data1)\r\n          axios.delete(`http://localhost:5000/api/employee/shift-assign`,{data: data1})\r\n          .then(res => {\r\n              // alert(\"success\");\r\n              // Xoá đi trong redux\r\n              this.props.RemoveShiftAssign(data1.shiftAssign);\r\n          })\r\n          .catch(err => {\r\n              alert(err);\r\n          })\r\n        }\r\n        \r\n    }\r\n\r\n  }\r\n\r\n  getEmployeeByID(employeeID) {\r\n    var listEmployee = this.props.listEmployee.employees;\r\n    console.log(listEmployee);\r\n    for(var i = 0; i < listEmployee.length ; i++)\r\n    {\r\n      if(employeeID == listEmployee[i]._id.employeeID)\r\n      {\r\n        this.currentEmployee = listEmployee[i];\r\n        return listEmployee[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  viewEmployee()\r\n  {\r\n      console.log(\"this.props.data\", this.props.data)\r\n      this.props.setIDView(this.props.data);\r\n      this.props.changePayEmployeeStatus();\r\n  }\r\n\r\n  isOpen=false;\r\n  render() {\r\n    return (\r\n      <>\r\n        <IconButton ref={this.myRef} onClick={() => this.setIsOpen(true)}>\r\n          <Icon icon={moreVerticalFill} width={20} height={20} />\r\n        </IconButton>\r\n  \r\n        <Menu\r\n          style={{\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            left: 0,\r\n          }}\r\n          open={this.isOpen}\r\n          onClose={() => this.setIsOpen(false)}\r\n          anchorEl={this.myRef.current}\r\n          // PaperProps={{\r\n          //   sx: { width: 200, maxWidth: '100%' }\r\n          // }}\r\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n          transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        >\r\n          <MenuItem sx={{ color: 'text.secondary' }}\r\n            onClick={() => this.delete()}\r\n          >\r\n            <ListItemIcon>\r\n              <Icon icon={trash2Outline} width={24} height={24} />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n  \r\n          <MenuItem sx={{ color: 'text.secondary' }}\r\n            onClick={() => this.edit()}\r\n          >\r\n            <ListItemIcon>\r\n              <Icon icon={editFill} width={24} height={24} />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Edit\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n          <MenuItem sx={{ color: 'text.secondary' }}\r\n            onClick={()=> this.viewEmployee()}\r\n          >\r\n            <ListItemIcon>\r\n              <GiPayMoney size={24}/> \r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Pay money\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n        </Menu>\r\n      </>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    updateEmployeeStatus: state.updateEmpoyeeStatus,\r\n    payEmployeeStatus: state.payEmployeeStatus,\r\n    listEmployee: state.listEmployee,\r\n    infoUser: state.infoUser,\r\n    listShiftAssign: state.listShiftAssign,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n      changeUpdateEmployeeStatus: () => {\r\n          dispatch({\r\n              type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n          });\r\n      },\r\n      changePayEmployeeStatus: () => {\r\n        dispatch({\r\n            type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n        });\r\n      },\r\n      setUpdateEmployee: (currentEmployee) => {\r\n        dispatch({\r\n          type: \"SET_UPDATE_EMPLOYEE\",\r\n          data: currentEmployee\r\n        });\r\n      }, \r\n      deleteEmployeeRedux: (id) => {\r\n        dispatch({\r\n          type: \"DELETE_EMPLOYEE\",\r\n          id: id\r\n        });\r\n      },\r\n      deleteEmployeeToSackRedux: (data) => {\r\n        dispatch({\r\n          type: \"DELETE_EMPLOYEE_SACKED\",\r\n          data: data\r\n        });\r\n      },\r\n      setIDView: (id) => {\r\n        dispatch({\r\n          type: \"SET_ID_EMPLOYEE\",\r\n          id: id\r\n        });\r\n      },\r\n      RemoveShiftAssign: (data) => {\r\n        dispatch({\r\n            type: \"DELETE_SHIFT_ASSIGN\",\r\n            data: data,\r\n        });\r\n      }\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\SackedEmployeeMenu.js",["1075","1076"],"import { Icon } from '@iconify/react';\r\nimport editFill from '@iconify/icons-eva/edit-fill';\r\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\r\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\r\nimport {GiPayMoney} from \"react-icons/gi\";\r\nimport {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\n// material\r\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nclass EmployeeMoreMenu extends Component {\r\n  currentEmployee = {};\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n        change: 'false'\r\n        }\r\n        this.myRef = React.createRef();\r\n    }\r\n    setIsOpen(val) {\r\n        this.isOpen = val;\r\n        this.setState({change: val});\r\n        \r\n    }\r\n\r\n    getSackedEmployeeByID(employeeID) {\r\n        var listEmployee = this.props.listSackedEmployee.employees;\r\n        console.log(listEmployee);\r\n        for(var i = 0; i < listEmployee.length ; i++)\r\n        {\r\n          if(employeeID == listEmployee[i]._id.employeeID)\r\n          {\r\n            return listEmployee[i];\r\n          }\r\n        }\r\n    }\r\n\r\n    backToWork() {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee:\r\n            [\r\n                {\r\n                    employeeID: this.props.data,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n            ]\r\n            \r\n        }\r\n        axios.patch(`http://localhost:5000/api/employee/delete`, data)\r\n            .then(res => {\r\n                alert(\"back to work success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n\r\n        // Xoá khỏi redux sacked\r\n        this.props.backToWorkSackedEmployee(this.props.data);\r\n\r\n        // Thêm vào redux ko sacked\r\n        this.props.addEmployee(this.getSackedEmployeeByID(this.props.data));\r\n    }\r\n\r\n    delete() {\r\n        const data = {\r\n        token: localStorage.getItem('token'),\r\n        employee:\r\n        [\r\n            {\r\n                employeeID: this.props.data,\r\n                storeID: this.props.infoUser.email, \r\n            },\r\n        ] \r\n        }\r\n        console.log(data);\r\n\r\n        axios.delete(`http://localhost:5000/api/employee/delete`,{data: data})\r\n            .then(res => {\r\n                alert(\"delete permantly employee(s) success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n\r\n        // To redux\r\n        var employeeID = this.props.data;\r\n        this.props.deletePermantlyEmployee(employeeID);\r\n    }\r\n\r\n    isOpen=false;\r\n    render() {\r\n        return (\r\n        <>\r\n            <IconButton ref={this.myRef} onClick={() => this.setIsOpen(true)}>\r\n            <Icon icon={moreVerticalFill} width={20} height={20} />\r\n            </IconButton>\r\n    \r\n            <Menu\r\n            style={{\r\n                position: 'absolute',\r\n                bottom: 0,\r\n                left: 0,\r\n            }}\r\n            open={this.isOpen}\r\n            onClose={() => this.setIsOpen(false)}\r\n            anchorEl={this.myRef.current}\r\n            // PaperProps={{\r\n            //   sx: { width: 200, maxWidth: '100%' }\r\n            // }}\r\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n            >\r\n            <MenuItem sx={{ color: 'text.secondary' }}\r\n                onClick={() => this.delete()}\r\n            >\r\n                <ListItemIcon>\r\n                <Icon icon={trash2Outline} width={24} height={24} />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\r\n            </MenuItem>\r\n    \r\n            <MenuItem sx={{ color: 'text.secondary' }}\r\n                onClick={() => this.backToWork()}\r\n            >\r\n                <ListItemIcon>\r\n                <Icon icon={editFill} width={24} height={24} />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Return\" primaryTypographyProps={{ variant: 'body2' }} />\r\n            </MenuItem>\r\n            </Menu>\r\n        </>\r\n        );\r\n    }\r\n    \r\n    }\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\r\n        payEmployeeStatus: state.payEmployeeStatus,\r\n        listEmployee: state.listEmployee,\r\n        infoUser: state.infoUser,\r\n        listSackedEmployee: state.listSackedEmployee,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        backToWorkSackedEmployee: (id) => {\r\n            dispatch({\r\n                type: \"RETURN_TO_WORK\",\r\n                id: id\r\n            });\r\n        },\r\n        addEmployee: (data) => {\r\n            dispatch({\r\n                type: \"ADD_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        deletePermantlyEmployee: (employeeID) => {\r\n            dispatch({\r\n                type: \"DELETE_PERMANTLY_EMPLOYEE\",\r\n                employeeID: employeeID,\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateEmployeeModal.js",["1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass UpdateEmployeeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n        }; \r\n        this.loadInitialData();\r\n    }\r\n    imgUrl = 'none';\r\n    finishUpImage = true;\r\n    \r\n    async profileImageChange(fileChangeEvent) {\r\n        this.setState({\r\n            imageSelect: fileChangeEvent.target.files[0],\r\n        })\r\n        this.finishUpImage = false;\r\n        const file = fileChangeEvent.target.files[0];\r\n        const { type } = file;\r\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\r\n        } else {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", fileChangeEvent.target.files[0])\r\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\r\n            await axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\r\n                .then(res => {\r\n                    this.imgUrl=res.data.url;\r\n                    this.setState({\r\n                        change: 'true'\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"Thất bại\");\r\n                })\r\n        }\r\n        this.finishUpImage = true;\r\n    }\r\n\r\n\r\n    cancel = () => {\r\n        \r\n    }\r\n\r\n    findIndexInListEmployee(employeeID) {\r\n        for(var i = 0; i < this.props.listEmployee.employees.length ; i++)\r\n        {\r\n            if(this.props.listEmployee.employees[i]._id.employeeID == employeeID)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    checkConstraint() {\r\n        //Constraint 2: Password không được có dưới 6 ký tự\r\n        var password = document.querySelector('input[name=\"password\"]').value.trim();\r\n        if(password.length == 0)\r\n        {\r\n            alert(\"Password không được rỗng\");\r\n            return false;\r\n        }\r\n        if(password.length < 6)\r\n        {\r\n            alert(\"Password không được có dưới 6 ký tự\");\r\n            return false;\r\n        }\r\n        // Constraint 3: FirstName không được trống\r\n        var firstName =  document.querySelector('input[name=\"firstName\"]').value.trim();\r\n        if(firstName.length == 0)\r\n        {\r\n            alert('Tên riêng không được rỗng');\r\n            return false;\r\n        }\r\n        // Constraint 4: lastName không được trống\r\n        var lastName =  document.querySelector('input[name=\"lastName\"]').value.trim();\r\n        if(lastName.length == 0)\r\n        {\r\n            alert('Họ không được trống');\r\n            return false;\r\n        }\r\n        // Constraint 5: Số ID card không được để trống\r\n        var cardID= document.querySelector('input[name=\"cardID\"]').value.trim();\r\n        if(cardID.length == 0)\r\n        {\r\n            alert(\"Số id card không được để trống\");\r\n            return false;\r\n        }\r\n        // Constrain 6:Số điện thoại không được để trống và phải lớn hơn 6 ký tự\r\n        var phoneNumber= document.querySelector('input[name=\"phoneNumber\"]').value;\r\n        if(phoneNumber.length == 0)\r\n        {\r\n            alert(\"Số điện thoại không được để trống\");\r\n            return false;\r\n        }\r\n        if(phoneNumber.length < 6)\r\n        {\r\n            alert(\"Số điện thoại không được dưới 6 ký tự\");\r\n            return false;\r\n        }\r\n        // Constrain 7:Địa chỉ không được để trống\r\n        var address = document.querySelector('input[name=\"adress\"]').value;\r\n        if(address.length==0)\r\n        {\r\n            alert(\"Địa chỉ không được để trống\");\r\n            return false;\r\n        }\r\n        // Constraint 8: Ngày sinh không được để trống\r\n        var birthDay = document.querySelector('input[name=\"birthDay\"]').value;\r\n        if(birthDay.length == 0)\r\n        {\r\n            alert(\"Ngày sinh không được để trống\");\r\n            return false;\r\n        }\r\n        // Constraint 9: Email không được để trống\r\n        var email = document.querySelector('input[name=\"email\"]').value.trim();\r\n        if(email.length == 0)\r\n        {\r\n            alert(\"Email không dược để trống\");\r\n            return false;\r\n        }\r\n        if(email.indexOf('@')==-1 || email.indexOf('@')==email.length-1)\r\n        {\r\n            alert(\"Email không hợp lệ\");\r\n            return false;\r\n        }\r\n        // Constraint 10: Ngày sinh không thể lớn hơn ngày bất đầu làm\r\n        var startDate = document.querySelector('input[name=\"startDate\"]').value;\r\n        if(!this.isGreater(startDate, birthDay))\r\n        {\r\n            alert(\"Ngày sinh không thể lớn hơn ngày bất đầu làm\");\r\n            return false;\r\n        }\r\n        // Constraint 11: Check đã up ảnh xong chưa\r\n        if(this.finishUpImage == false)\r\n        {\r\n            alert(\"Ảnh chưa được upload xong\");\r\n            return false;\r\n        }\r\n\r\n        alert(\"Đã check hết các constraint\")\r\n        return true;\r\n    }\r\n\r\n    isGreater(dateString1, dateString2){\r\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\r\n    }\r\n\r\n    async updateEmployee(){\r\n        if(this.checkConstraint() == false) return;\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: this.id,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                managerID: this.props.infoUser.email,\r\n                password: document.querySelector('input[name=\"password\"]').value,\r\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\r\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\r\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\r\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\r\n                email: document.querySelector('input[name=\"email\"]').value,\r\n                address: document.querySelector('input[name=\"adress\"]').value,\r\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\r\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\r\n                imgUrl: this.imgUrl,\r\n            }   \r\n        }\r\n        // console.log(\"index\", this.findIndexInListEmployee(this.id));\r\n        console.log(\"updateEmployee\", data);\r\n        await axios.put(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Update success\");\r\n                \r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.props.changeLoginStatus();\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n            })\r\n        this.props.updateEmployeeRedux(data.employee, this.findIndexInListEmployee(this.id))\r\n        this.props.changeUpdateEmployeeStatus();\r\n    }\r\n\r\n    id = \"\";\r\n    password = \"\";\r\n    firstName = \"\";\r\n    lastName = \"\";\r\n    cardID = \"\";\r\n    phoneNumber = \"\";\r\n    address = \"\";\r\n    email = \"\";\r\n    startDate = \"\";\r\n    birthDay = \"\";\r\n\r\n\r\n    loadInitialData() {\r\n        var currentEmployee = this.props.currentEditEmployee.state;\r\n        // console.log(\"currentEmployee\", currentEmployee);\r\n        this.id = currentEmployee._id.employeeID;\r\n        this.password = currentEmployee.password;\r\n        this.firstName = currentEmployee.firstName;\r\n        this.lastName = currentEmployee.lastName;\r\n        this.cardID = currentEmployee.cardID;\r\n        this.phoneNumber = currentEmployee.phoneNumber;\r\n        this.address = currentEmployee.address;\r\n        this.email = currentEmployee.email;\r\n        this.startDate = currentEmployee.startDate;\r\n        this.imgUrl = currentEmployee.imgUrl;\r\n        if(this.startDate!=null && this.startDate.indexOf('T')!=-1)\r\n        {\r\n            this.startDate = this.startDate.substring(0, this.startDate.indexOf('T'));\r\n        }\r\n        this.birthDay = currentEmployee.dateOfBirth;\r\n        if(this.birthDay!=null && this.birthDay.indexOf('T')!=-1)\r\n        {\r\n            this.birthDay = this.birthDay.substring(0, this.birthDay.indexOf('T'));\r\n        }\r\n        this.setState({change: !this.state.change})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"UPDATE EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                               <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            value={this.id}\r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>Password</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"password\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.password}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"firstName\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.firstName}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"lastName\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.lastName}\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"number\" \r\n                                            name=\"cardID\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.cardID}\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"number\" \r\n                                            name=\"phoneNumber\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.phoneNumber}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Adress</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"adress\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.address}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>StartDate</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\"\r\n                                            name=\"startDate\"\r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.startDate}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"email\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.email}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\" \r\n                                            // class=\"input-val\"\r\n                                            name=\"birthDay\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.birthDay}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.updateEmployee()}>\r\n                                            UPDATE\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        currentEditEmployee: state.currentEditEmployee,\r\n        infoUser: state.infoUser,\r\n        listEmployee: state.listEmployee,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        updateEmployeeRedux: (data, index) => {\r\n            dispatch({\r\n                type: \"UPDATE_EMPLOYEE\",\r\n                data: data,\r\n                index: index,\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateEmployeeModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddEmployeeModal.js",["1097","1098","1099","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1114","1115","1116","1117","1118","1119"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nvar listUsers = [];\r\n\r\nclass AddEmployeeModal extends Component {\r\n\r\n    genID = 0;\r\n    imgUrl = 'none';\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n        };\r\n        listUsers = [];\r\n        this.getAllEmployee(); \r\n    }\r\n\r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    async getAllEmployee () {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/employee/`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                // console.log(err);\r\n                alert(err)\r\n            })\r\n        listUsers = [];\r\n        for(var i = 0; i < result.length; i++)\r\n        {\r\n            listUsers.push(result[i]);\r\n        }\r\n        this.props.getEmployee(listUsers);\r\n        if(listUsers.length > 0)\r\n        {\r\n            this.genID = parseInt(listUsers[listUsers.length - 1]._id.employeeID) + 1;\r\n            console.log(this.genID);\r\n        }\r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    isGreater(dateString1, dateString2){\r\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\r\n    }\r\n\r\n    finishUpImage = true;\r\n    async profileImageChange(fileChangeEvent) {\r\n        this.setState({\r\n            imageSelect: fileChangeEvent.target.files[0],\r\n        })\r\n        this.finishUpImage = false;\r\n        const file = fileChangeEvent.target.files[0];\r\n        const { type } = file;\r\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\r\n        } else {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", fileChangeEvent.target.files[0])\r\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\r\n            await axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\r\n                .then(res => {\r\n                    this.imgUrl=res.data.url;\r\n                    this.setState({\r\n                        change: 'true'\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"Thất bại\");\r\n                })\r\n        }\r\n        this.finishUpImage = true;\r\n    }\r\n\r\n    checkConstraint() {\r\n        // Constraint 1: ID trống hoặc bị trùng\r\n        var id  = document.querySelector('input[name=\"ID\"]').value;\r\n        if( id.length == 0)\r\n        {\r\n            alert(\"Không thể nhập id rỗng\");\r\n            return false;\r\n        }\r\n        for(var i = 0; i < this.props.listEmployee.employees.length ; i++)\r\n        {\r\n            if(this.props.listEmployee.employees[i]._id.employeeID == id)\r\n            {\r\n                alert(\"ID đã bị trùng\");\r\n                return false;\r\n            }\r\n        }\r\n        // Trùng ID sa thải\r\n        for(var i = 0; i < this.props.listSackedEmployee.employees.length ; i++)\r\n        {\r\n            if(this.props.listSackedEmployee.employees[i]._id.employeeID == id)\r\n            {\r\n                alert(\"ID đã bị trùng với nhân viên đã sai thải\");\r\n                return false;\r\n            }\r\n        }\r\n\r\n        //Constraint 2: Password không được có dưới 6 ký tự\r\n        var password = document.querySelector('input[name=\"password\"]').value.trim();\r\n        if(password.length == 0)\r\n        {\r\n            alert(\"Password không được rỗng\");\r\n            return false;\r\n        }\r\n        if(password.length < 6)\r\n        {\r\n            alert(\"Password không được có dưới 6 ký tự\");\r\n            return false;\r\n        }\r\n        // Constraint 3: FirstName không được trống\r\n        var firstName =  document.querySelector('input[name=\"firstName\"]').value.trim();\r\n        if(firstName.length == 0)\r\n        {\r\n            alert('Tên riêng không được rỗng');\r\n            return false;\r\n        }\r\n        // Constraint 4: lastName không được trống\r\n        var lastName =  document.querySelector('input[name=\"lastName\"]').value.trim();\r\n        if(lastName.length == 0)\r\n        {\r\n            alert('Họ không được trống');\r\n            return false;\r\n        }\r\n        // Constraint 5: Số ID card không được để trống\r\n        var cardID= document.querySelector('input[name=\"cardID\"]').value.trim();\r\n        if(cardID.length == 0)\r\n        {\r\n            alert(\"Số id card không được để trống\");\r\n            return false;\r\n        }\r\n        // Constrain 6:Số điện thoại không được để trống và phải lớn hơn 6 ký tự\r\n        var phoneNumber= document.querySelector('input[name=\"phoneNumber\"]').value;\r\n        if(phoneNumber.length == 0)\r\n        {\r\n            alert(\"Số điện thoại không được để trống\");\r\n            return false;\r\n        }\r\n        if(phoneNumber.length < 6)\r\n        {\r\n            alert(\"Số điện thoại không được dưới 6 ký tự\");\r\n            return false;\r\n        }\r\n        // Constrain 7:Địa chỉ không được để trống\r\n        var address = document.querySelector('input[name=\"adress\"]').value;\r\n        if(address.length==0)\r\n        {\r\n            alert(\"Địa chỉ không được để trống\");\r\n            return false;\r\n        }\r\n        // Constraint 8: Ngày sinh không được để trống\r\n        var birthDay = document.querySelector('input[name=\"birthDay\"]').value;\r\n        if(birthDay.length == 0)\r\n        {\r\n            alert(\"Ngày sinh không được để trống\");\r\n            return false;\r\n        }\r\n        // Constraint 9: Email không được để trống\r\n        var email = document.querySelector('input[name=\"email\"]').value.trim();\r\n        if(email.length == 0)\r\n        {\r\n            alert(\"Email không dược để trống\");\r\n            return false;\r\n        }\r\n        if(email.indexOf('@')==-1 || email.indexOf('@')==email.length-1)\r\n        {\r\n            alert(\"Email không hợp lệ\");\r\n            return false;\r\n        }\r\n        // Constraint 10: Ngày sinh không thể lớn hơn ngày bất đầu làm\r\n        var startDate = document.querySelector('input[name=\"startDate\"]').value;\r\n        if(!this.isGreater(startDate, birthDay))\r\n        {\r\n            alert(\"Ngày sinh không thể lớn hơn ngày bất đầu làm\");\r\n            return false;\r\n        }\r\n        // Constraint 11: Check đã up ảnh xong chưa\r\n        if(this.finishUpImage == false)\r\n        {\r\n            alert(\"Ảnh chưa được upload xong\");\r\n            return false;\r\n        }\r\n\r\n        alert(\"Đã check hết các constraint\")\r\n        return true;\r\n    }\r\n    // Thêm nhân viên\r\n    async addEmployeeToDatabase()\r\n    {\r\n        var isAddOK = true;\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: document.querySelector('input[name=\"ID\"]').value,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                managerID: this.props.infoUser.email,\r\n                password: document.querySelector('input[name=\"password\"]').value,\r\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\r\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\r\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\r\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\r\n                email: document.querySelector('input[name=\"email\"]').value,\r\n                address: document.querySelector('input[name=\"adress\"]').value,\r\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\r\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\r\n                // endDate: \"2021-11-31T00:00:00.000Z\",\r\n                imgUrl: this.imgUrl,\r\n            }   \r\n        }\r\n        console.log(data);\r\n        await axios.post(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu thành công\")\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                if(err.response.data.message)\r\n                {\r\n                    alert(err.response.data.message);\r\n                }\r\n                console.log(err);\r\n                isAddOK = false;\r\n            })\r\n        // Thêm vào redux\r\n        if(isAddOK)\r\n        {\r\n            this.props.addEmployee(data.employee);\r\n            this.props.changeAddEmployeeStatus();\r\n        }\r\n            \r\n        \r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        if(this.checkConstraint()==false) return;\r\n        this.addEmployeeToDatabase();\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"ADD EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            name='ID'\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"  \r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>Password</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"password\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"firstName\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"lastName\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"number\" \r\n                                            name=\"cardID\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"number\" \r\n                                            name=\"phoneNumber\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Adress</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"adress\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>StartDate</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\"\r\n                                            name=\"startDate\"\r\n                                            defaultValue={this.getCurrentDateTime()}\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"email\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\" \r\n                                            // class=\"input-val\"\r\n                                            name=\"birthDay\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.addEmployee()}>\r\n                                            Add\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listEmployee: state.listEmployee,\r\n        listSackedEmployee: state.listSackedEmployee,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        addEmployee: (data) => {\r\n            dispatch({\r\n                type: \"ADD_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEmployeeModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\ConfirmModal.js",["1120","1121","1122","1123","1124","1125"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nclass ConfirmModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    confirm = () => {\r\n        // Thực hiện các lệnh xử lý tại đây\r\n        this.props.changeConfirmStatus();\r\n        this.props.setConfirm();\r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeConfirmStatus();\r\n        this.props.setQuit();\r\n    }\r\n\r\n    getMessage = ()  => {\r\n        var message = \"Cái này chưa code\";\r\n        switch(this.props.confirmCode)\r\n        {\r\n            case 'confirm-delete-good':\r\n                message = \"Are you sure to delete this product ?\";\r\n            case 'confirm-import-good':\r\n                message = \"Are you sure to import this product ?\";\r\n        }\r\n        return (\r\n            <div>\r\n                {message}\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        console.log(this.props.objectEditShift);\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={12} xs={12}>\r\n                                {this.getMessage()}\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.confirm()} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                            Xác nhận\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Hủy\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        confirmStatus: state.confirmStatus,\r\n        deleteStatus: state.deleteStatus,\r\n        confirmCode: state.confirmCode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setConfirm: () => {\r\n            dispatch({\r\n                type: \"CONFIRM\",\r\n            });\r\n        },\r\n        setQuit: () => {\r\n            dispatch({\r\n                type: \"QUIT\",\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmModal);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\SearchBar.js",["1126","1127","1128","1129"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { MdClear} from \"react-icons/md\";\r\nimport { AiOutlineSearch } from \"react-icons/ai\";\r\nimport { withStyles } from '@material-ui/styles';\r\nimport classNames from \"classnames\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    // height: theme.spacing(6),\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    height: \"80px\",\r\n  },\r\n//   iconButton: {\r\n//     color: theme.palette.action.active,\r\n//     transform: \"scale(1, 1)\",\r\n//     transition: theme.transitions.create([\"transform\", \"color\"], {\r\n//       duration: theme.transitions.duration.shorter,\r\n//       easing: theme.transitions.easing.easeInOut,\r\n//     }),\r\n//   },\r\n  iconButtonHidden: {\r\n    transform: \"scale(0, 0)\",\r\n    \"& > $icon\": {\r\n      opacity: 0,\r\n    },\r\n  },\r\n  searchIconButton: {\r\n    // marginRight: theme.spacing(-6),\r\n  },\r\n//   icon: {\r\n//     transition: theme.transitions.create([\"opacity\"], {\r\n//       duration: theme.transitions.duration.shorter,\r\n//       easing: theme.transitions.easing.easeInOut,\r\n//     }),\r\n//   },\r\n  input: {\r\n    width: \"100%\",\r\n  },\r\n  searchContainer: {\r\n    margin: \"4px 8px 4px 8px\",\r\n    height: \"40px\",\r\n    // width: `calc(100% - ${theme.spacing(6 + 4)}px)`, // 6 button + 4 margin\r\n  },\r\n});\r\nconst SearchBar = React.forwardRef(\r\n  (\r\n    {\r\n      cancelOnEscape,\r\n      className,\r\n      classes,\r\n      closeIcon,\r\n      disabled,\r\n      onCancelSearch,\r\n      onRequestSearch,\r\n      searchIcon,\r\n      style,\r\n      ...inputProps\r\n    },\r\n    ref\r\n  ) => {\r\n    const inputRef = React.useRef();\r\n    const [value, setValue] = React.useState(inputProps.value);\r\n\r\n    React.useEffect(() => {\r\n      setValue(inputProps.value);\r\n    }, [inputProps.value]);\r\n\r\n    const handleFocus = React.useCallback(\r\n      (e) => {\r\n        if (inputProps.onFocus) {\r\n          inputProps.onFocus(e);\r\n        }\r\n      },\r\n      [inputProps.onFocus]\r\n    );\r\n\r\n    const handleBlur = React.useCallback(\r\n      (e) => {\r\n        setValue((v) => v.trim());\r\n        if (inputProps.onBlur) {\r\n          inputProps.onBlur(e);\r\n        }\r\n      },\r\n      [inputProps.onBlur]\r\n    );\r\n\r\n    const handleInput = React.useCallback(\r\n      (e) => {\r\n        setValue(e.target.value);\r\n        if (inputProps.onChange) {\r\n          inputProps.onChange(e.target.value);\r\n        }\r\n      },\r\n      [inputProps.onChange]\r\n    );\r\n\r\n    const handleCancel = React.useCallback(() => {\r\n      setValue(\"\");\r\n      if (onCancelSearch) {\r\n        onCancelSearch();\r\n      }\r\n    }, [onCancelSearch]);\r\n\r\n    const handleRequestSearch = React.useCallback(() => {\r\n      if (onRequestSearch) {\r\n        onRequestSearch(value);\r\n      }\r\n    }, [onRequestSearch, value]);\r\n\r\n    const handleKeyUp = React.useCallback(\r\n      (e) => {\r\n        if (e.charCode === 13 || e.key === \"Enter\") {\r\n          handleRequestSearch();\r\n        } else if (\r\n          cancelOnEscape &&\r\n          (e.charCode === 27 || e.key === \"Escape\")\r\n        ) {\r\n          handleCancel();\r\n        }\r\n        if (inputProps.onKeyUp) {\r\n          inputProps.onKeyUp(e);\r\n        }\r\n      },\r\n      [handleRequestSearch, cancelOnEscape, handleCancel, inputProps.onKeyUp]\r\n    );\r\n\r\n    React.useImperativeHandle(ref, () => ({\r\n      focus: () => {\r\n        inputRef.current.focus();\r\n      },\r\n      blur: () => {\r\n        inputRef.current.blur();\r\n      },\r\n    }));\r\n\r\n    return (\r\n      <Paper className={classNames(classes.root, className)} style={{height: '40px'}}>\r\n        <div className={classes.searchContainer}>\r\n          <Input\r\n            {...inputProps}\r\n            inputRef={inputRef}\r\n            onBlur={handleBlur}\r\n            value={value}\r\n            onChange={handleInput}\r\n            onKeyUp={handleKeyUp}\r\n            onFocus={handleFocus}\r\n            fullWidth\r\n            className={classes.input}\r\n            disableUnderline\r\n            disabled={disabled}\r\n          />\r\n        </div>\r\n        <IconButton\r\n          onClick={handleRequestSearch}\r\n          className={classNames(classes.iconButton, classes.searchIconButton, {\r\n            [classes.iconButtonHidden]: value !== \"\",\r\n          })}\r\n          disabled={disabled}\r\n        >\r\n          {React.cloneElement(searchIcon, {\r\n            classes: { root: classes.icon },\r\n          })}\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={handleCancel}\r\n          className={classNames(classes.iconButton, {\r\n            [classes.iconButtonHidden]: value === \"\",\r\n          })}\r\n          disabled={disabled}\r\n        >\r\n          {React.cloneElement(closeIcon, {\r\n            classes: { root: classes.icon },\r\n          })}\r\n        </IconButton>\r\n      </Paper>\r\n    );\r\n  }\r\n);\r\n\r\nSearchBar.defaultProps = {\r\n  className: \"\",\r\n  closeIcon: <MdClear/>,\r\n  disabled: false,\r\n  placeholder: \"Search\",\r\n  searchIcon: <AiOutlineSearch />,\r\n  style: null,\r\n  value: \"\",\r\n};\r\n\r\nSearchBar.propTypes = {\r\n  cancelOnEscape: PropTypes.bool,\r\n  classes: PropTypes.object.isRequired,\r\n  className: PropTypes.string,\r\n  closeIcon: PropTypes.node,\r\n  disabled: PropTypes.bool,\r\n  onCancelSearch: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n  onRequestSearch: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  searchIcon: PropTypes.node,\r\n  style: PropTypes.object,\r\n  value: PropTypes.string,\r\n};\r\n\r\nexport default withStyles(styles)(SearchBar);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\SearchReceipt.js",["1130","1131","1132"],"import React, { useState } from 'react';\r\nimport { BiSearchAlt } from 'react-icons/bi'\r\nimport { useDispatch , useSelector } from 'react-redux'\r\n\r\nfunction SearchReceipt(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => {\r\n        dispatch({\r\n            type: \"RESET_SEARCH\",\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"search-customize\" style={{ borderRadius: '6px', backgroundColor: 'white', justifyContent: 'center', display: 'flex', marginBottom: '10px', padding: '10px' }}>\r\n            <BiSearchAlt style={{ fontSize: '1.6rem', marginRight: '10px', marginLeft: '10px' }}></BiSearchAlt>\r\n            <input onChange={(e) => {dispatch({type:\"CHANGE_SEARCH\", object: e.target.value })}} type=\"text\" style={{ width: '100%', outline: 'none', border: 'none' }} placeholder=\"Enter id receipt\"></input>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchReceipt;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\EditTypeModal.js",["1133","1134"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit} from 'react-icons/bi';\r\nimport { TiDelete } from \"react-icons/ti\";\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nclass EditTypeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            change: false\r\n        }\r\n    }\r\n    confirm = () => {\r\n        // Thực hiện các lệnh xử lý tại đây\r\n        this.props.changeConfirmStatus();\r\n    }\r\n    cancel = () => {\r\n        // this.props.changeConfirmStatus();\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    edit = (type) => {\r\n        // this.props.setEditTypeStatus();\r\n        this.props.typeToUpdate(type);\r\n        // this.props.changeEditTypeStatus();\r\n        this.props.changeStatusUpdateType();\r\n    }\r\n    async delete(type){\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productTypes:\r\n            [\r\n                {\r\n                    typeID: type._id.typeID,\r\n                    storeID: type._id.storeID\r\n                }\r\n            ]\r\n                \r\n        }\r\n        await axios.delete(`http://localhost:5000/api/product/type`,{data: data})\r\n            .then(res => {\r\n                console.log(\"delete success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                // alert(\"Lỗi gì cmnr\")\r\n            })\r\n        this.props.deleteTypeFromRedux(data.productTypes[0]);\r\n\r\n        // Ở đây mình phải cập nhật join nữa\r\n        // Phải get tất cả cái join mà có cái type là type hiện tại\r\n\r\n\r\n        var allJoinMatch = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n                \"_id.typeID\": type._id.typeID,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, \r\n        {\r\n            params: {...data1}\r\n        })\r\n            .then(res => {\r\n                allJoinMatch = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n\r\n        var allProductJoin = [];\r\n        for(var i = 0 ; i < allJoinMatch.length; i++)\r\n        {\r\n            allProductJoin.push({\r\n                productID: allJoinMatch[i]._id.productID,\r\n                typeID: type._id.typeID,\r\n                importDate: allJoinMatch[i]._id.importDate,\r\n                storeID: this.props.infoUser.email,\r\n                \r\n            });\r\n        }\r\n        \r\n        const dataJoin = {\r\n            token: localStorage.getItem('token'),\r\n            productJoinTypes: allProductJoin,      \r\n        }\r\n\r\n        console.log(dataJoin);\r\n\r\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\r\n            .then(res => {\r\n                console.log(\"delete join success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        this.setState({change: !this.state.change})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"All Good Type\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid container item md={12} xs={12} spacing={0}>\r\n                                { this.props.typeProduct.map((type) => (\r\n                                    <Grid item md={3} style={{border:'1px solid #333', padding: 4}}>\r\n                                        <span>{type.name}</span>\r\n                                        <BiEdit onClick={() => this.edit(type)}/>\r\n                                        <TiDelete onClick={() => this.delete(type)}/>\r\n                                    </Grid>\r\n                                ))}\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Thoát\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        editTypeStatus: state.editTypeStatus,\r\n        addTypeStatus: state.addTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        infoUser: state.infoUser,\r\n        typeProductValue: state.typeProductValue,\r\n        typeProduct: state.typeProduct,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        setEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_EDIT_TYPE_STATUS\",\r\n            })\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        typeToUpdate: (data) => {\r\n            dispatch({\r\n                type: \"UPDATE_PRODUCT_TYPE\",\r\n                _id: {\r\n                    typeID: data._id.typeID,\r\n                    storeID: data._id.storeID,\r\n                },\r\n                name: data.name\r\n            })\r\n        },\r\n        changeStatusUpdateType: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_TYPE_STATUS\",\r\n            }); \r\n        },\r\n        deleteTypeFromRedux: (data) => {\r\n            dispatch({\r\n                type: \"DELETE_TYPE\",\r\n                data: data\r\n            });\r\n            \r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTypeModal);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\UpdateGoodModal.js",["1135","1136","1137","1138","1139","1140","1141","1142","1143","1144","1145","1146","1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157","1158","1159","1160","1161"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport GoodImage from './goodExample.jpg';\r\nimport AddTypeModal from './AddTypeModal';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport ConfirmModal from './ConfirmModal';\r\n\r\nvar productTypes =[];\r\nvar listTypeInfor=[];\r\n// typeSet chứa id của các cái type\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass UpdateGoodModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            goodID : \"\",\r\n            change: false,\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n        }; \r\n        typeSet = [];\r\n        this.loadInitialData();\r\n        this.loadAllType();\r\n        this.loadCurrentTypes();\r\n        \r\n    }\r\n    imgUrl='none';\r\n    goodID='';\r\n    importDate='';\r\n    name='';\r\n    imgUrl='';\r\n    quantity = 0;\r\n    remain = 0;\r\n    unit = \"\";\r\n    importPrice = \"\";\r\n    sellPrice = \"\";\r\n    expire =\"\";\r\n    finishUpImage = true;\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        listTypeInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n        productTypes=[];\r\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\r\n        {\r\n            productTypes.push(listTypeInfor[i].name);\r\n        }\r\n        this.setState({change: true});\r\n    }\r\n\r\n    async loadCurrentTypes() {\r\n        // Get hết các cái join của sản phẩm\r\n        var allJoinMatch = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n                \"_id.productID\": this.goodID,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, \r\n        {\r\n            params: {...data1}\r\n        })\r\n            .then(res => {\r\n                allJoinMatch = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        console.log(\"Các join\",allJoinMatch);\r\n        // Thêm vào trên cái bảng typeSet\r\n        for(var i = 0 ; i < allJoinMatch.length ; i ++)\r\n        {\r\n            typeSet.push(allJoinMatch[i]._id.typeID);\r\n        }\r\n        this.setState({change: !this.state.change});\r\n    }\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName='';\r\n        for(var i = 0; i<listTypeInfor.length;i++)\r\n        {   \r\n            if(listTypeInfor[i]._id.typeID == typeID)\r\n            {\r\n                typeName = listTypeInfor[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    checkConstraint = () => {\r\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\r\n        // Constraint 1: Check name\r\n        var productName =  document.querySelector('input[name=\"goodName\"]').value;\r\n        if(productName.length == 0)\r\n        {\r\n            alert(\"Tên sản phẩm không được trống\");\r\n            return false;\r\n        }\r\n        // Constraint 2: Check quantity\r\n        if(document.querySelector('input[name=\"goodQuantity\"]').value.length == 0)\r\n        {\r\n            alert(\"Số lượng sản phẩm không được trống\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value) <= 0) \r\n        {\r\n            alert('Số lượng sản phẩm phải lớn hơn 0');\r\n            return false;\r\n        }\r\n        // Constraint 3: check Unit\r\n        if(document.querySelector('input[name=\"unit\"]').value.length == 0)\r\n        {\r\n            alert('Đơn vị của sản phẩm không được trống');\r\n            return false;\r\n        }\r\n        // Constraint 4: Check import Price\r\n        if(document.querySelector('input[name=\"originalPrice\"]').value.length == 0)\r\n        {\r\n            alert(\"Giá nhập không được trống\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <= 0) \r\n        {\r\n            alert('Giá nhập phải lớn hơn 0');\r\n            return false;\r\n        }\r\n        // Constraint 5: check sell Price\r\n        if(document.querySelector('input[name=\"sellPrice\"]').value.length == 0)\r\n        {\r\n            alert(\"Giá bán không được trống\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"sellPrice\"]').value) <= 0) \r\n        {\r\n            alert('Giá bán phải lớn hơn 0');\r\n            return false;\r\n        }\r\n        // Constraint 6: Ngày nhập phải nhỏ  hơn ngày hết hạn và ngày hết hạn, ngày nhập phải khác null\r\n        if (\r\n            (\r\n                new Date(document.querySelector('input[name=\"importDate\"]').value).getTime()\r\n                - \r\n                new Date(document.querySelector('input[name=\"expiredDate\"]').value).getTime()\r\n            ) >= 0\r\n        )\r\n        {\r\n            alert('Không thể nhập hàng hết hạn');\r\n            return false;\r\n        }\r\n        // Constraint 7: Check giá gốc nhỏ hơn giá bán\r\n        if(\r\n            parseInt(document.querySelector('input[name=\"sellPrice\"]').value) \r\n            - \r\n            parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <=0\r\n            ) \r\n        {\r\n            alert('Giá bán phải lớn hơn giá gốc');\r\n            return false;\r\n        }\r\n        // Constraint 8: check xem đã  up ảnh lên xong chưa\r\n        if(this.finishUpImage == false)\r\n        {\r\n            alert('Ảnh chưa được upload xong');\r\n            return false;\r\n        }\r\n        alert('Constraint đã check đầy đủ');\r\n        return true;\r\n    }\r\n\r\n    handleAdd(){\r\n        this.props.changeAddTypeStatus();\r\n    }\r\n\r\n    async updateGood() {\r\n        var isContinue = this.checkConstraint();\r\n        if(!isContinue)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        var productInfo = this.props.infoUpdate;\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            product: {\r\n                _id: {\r\n                    productID: document.querySelector('input[name=\"goodID\"]').value,\r\n                    importDate: productInfo._id.importDate,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: this.name,\r\n                quantity: this.quantity,\r\n                // remain: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\r\n                sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\r\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\r\n                imgUrl: this.imgUrl,\r\n                unit: document.querySelector('input[name=\"unit\"]').value,\r\n            }\r\n        }\r\n        console.log(\"Updategood\",data);\r\n        axios.put(`http://localhost:5000/api/product`, data)\r\n            .then(res => {\r\n                console.log(\"Update success\");\r\n                alert('Đã update thành công sản phẩm')\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        // Get hết các cái join của sản phẩm\r\n        var allJoinMatch = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n                \"_id.productID\": this.goodID,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, \r\n        {\r\n            params: {...data1}\r\n        })\r\n            .then(res => {\r\n                allJoinMatch = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        console.log(allJoinMatch);\r\n        // Xoá các join liên quan đến sản phẩm\r\n        var allProductJoin = [];\r\n        for(var i = 0 ; i < allJoinMatch.length; i++)\r\n        {\r\n            allProductJoin.push({\r\n                productID: this.goodID,\r\n                typeID: allJoinMatch[i]._id.typeID,\r\n                importDate: allJoinMatch[i]._id.importDate,\r\n                storeID: this.props.infoUser.email,\r\n            });\r\n        }\r\n        const dataJoin = {\r\n            token: localStorage.getItem('token'),\r\n            productJoinTypes: allProductJoin,      \r\n        }\r\n\r\n        console.log(dataJoin);\r\n\r\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\r\n            .then(res => {\r\n                console.log(\"delete join success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        // Thêm các cái hiện tại\r\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\r\n        for(var i = 0 ; i < typeSet.length ; i++)\r\n        {\r\n            const data1 = {\r\n                token: localStorage.getItem('token'),\r\n                productJoinType: {\r\n                    _id : {\r\n                        productID: this.goodID,\r\n                        typeID: typeSet[i], \r\n                        importDate: productInfo._id.importDate,\r\n                        storeID: this.props.infoUser.email,\r\n                    }\r\n                }\r\n            }\r\n            axios.post(`http://localhost:5000/api/product/join`, data1)\r\n                .then(res => {\r\n                    console.log(\"lưu vô bảng join thành công\");\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                })\r\n        }\r\n\r\n        // Thêm vào redux\r\n        var reduxData = {\r\n            _id: {\r\n                productID: productInfo._id.productID,\r\n                importDate: productInfo._id.importDate,\r\n                storeID: this.props.infoUser.email,\r\n            },\r\n            name: this.name,\r\n            quantity: this.quantity,\r\n            remain: this.remain,\r\n            importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\r\n            sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\r\n            expires: document.querySelector('input[name=\"expiredDate\"]').value,\r\n            imgUrl: this.imgUrl,\r\n            unit: document.querySelector('input[name=\"unit\"]').value,\r\n            typeIDList: typeSet,\r\n        }\r\n        this.props.updateProductToRedux(reduxData);\r\n        this.props.changeUpdateGoodStatus();\r\n    }\r\n\r\n    remain = 0;\r\n\r\n    cancel = () => {\r\n        this.props.changeUpdateGoodStatus();\r\n    }\r\n\r\n    loadInitialData = () => {\r\n        // Load các dữ liệu ban đầu của form ở đây để mà update nhưng mà bị lỗi 401 mẹ\r\n        //Xử lý sampleData\r\n        var productInfo = this.props.infoUpdate;\r\n        console.log(this.props.infoUpdate);\r\n\r\n        this.goodID = (productInfo._id.productID == null) ? '' : productInfo._id.productID;\r\n        this.importDate = productInfo._id.importDate;\r\n        this.importDate = this.importDate == null ? '' :this.importDate.substring(0, this.importDate.indexOf('T'));\r\n        this.name = productInfo.name == null ? '' : productInfo.name;\r\n        this.imgUrl = productInfo.imgUrl == null ? '' : productInfo.imgUrl;\r\n        this.quantity = productInfo.quantity == null ? '' : productInfo.quantity;\r\n        this.remain = productInfo.remain;\r\n        this.unit = productInfo.unit == null ? '' : productInfo.unit;\r\n        this.importPrice = productInfo.importPrice == null ? '' : productInfo.importPrice;\r\n        this.sellPrice = productInfo.sellPrice == null ? '' : productInfo.sellPrice;\r\n        this.expire = productInfo.expires; //substring(0,productInfo.expire.indexOf('T'));\r\n        this.expire = this.expire == null ? '' :this.expire.substring(0, this.expire.indexOf('T'));\r\n        console.log(\"this.expire\",this.expire );\r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    profileImageChange = (fileChangeEvent) => {\r\n        this.setState({\r\n            imageSelect: fileChangeEvent.target.files[0],\r\n        })\r\n        this.finishUpImage = false;\r\n        const file = fileChangeEvent.target.files[0];\r\n        const { type } = file;\r\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\r\n        } else {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", fileChangeEvent.target.files[0])\r\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\r\n            axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\r\n                .then(res => {\r\n                    this.imgUrl=res.data.url;\r\n                    this.setState({\r\n                        change: 'true'\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"Thất bại\");\r\n                })\r\n        }\r\n        this.finishUpImage = true;\r\n    }\r\n\r\n    changeName = (e) => {\r\n        this.name = e.target.value;\r\n    }\r\n\r\n    changeValue = (e, variable) =>\r\n    {\r\n        if(variable=='quantity')\r\n        {\r\n            this.quantity = e.target.value;\r\n        }\r\n    }\r\n\r\n    foundTypeInSet(typeID) {\r\n        for(var i = 0 ; i < typeSet.length; i++)\r\n        {\r\n            if(typeSet[i]==typeID._id.typeID) return true;\r\n        }\r\n        return false;\r\n    }\r\n    render() {\r\n        \r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"UPDATE GOOD\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card \r\n                            >\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            name=\"goodID\" \r\n                                            variant=\"outlined\" \r\n                                            value={this.goodID}\r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                        style={{\r\n                                            marginLeft: 0,\r\n                                            paddingLeft: 0\r\n                                        }}\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 128}}>Import Date</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\" \r\n                                            style = {{width: '68%'}} \r\n                                            fullWidth\r\n                                            name=\"importDate\"\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.importDate}\r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            name=\"goodName\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.name}\r\n                                            onChange={(e) => this.changeName(e)} \r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                        style={{padding: '0px', marginLeft: '0px'}}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\" \r\n                                            style={{width: '100px'}}\r\n                                        >\r\n                                            Quantity\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            style = {{width: '60%'}} \r\n                                            fullWidth\r\n                                            name=\"goodQuantity\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\" \r\n                                            defaultValue={this.quantity}\r\n                                            onChange={(e) => this.changeValue(e, 'quantity')}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                        style={{\r\n                                            paddingRight: 24\r\n                                        }}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                marginLeft: 0,\r\n                                                paddingLeft: 4\r\n                                            }}\r\n                                        >\r\n                                            Unit\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '100%', marginLeft: '4px'}} \r\n                                            fullWidth\r\n                                            variant=\"outlined\"\r\n                                            type=\"text\" \r\n                                            name=\"unit\" \r\n                                            defaultValue={this.unit}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 128}}>Original Price</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"originalPrice\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\"\r\n                                            defaultValue={this.importPrice}\r\n                                        />\r\n                                        đ\r\n                                    </Grid>\r\n                                    <Grid item md={6}\r\n                                        className='input-item'\r\n                                        style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{width: '96px'}}\r\n                                        >\r\n                                            Sell Price\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"sellPrice\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\" \r\n                                            defaultValue={this.sellPrice}\r\n                                        />\r\n                                        đ\r\n                                    </Grid>\r\n                                    <Grid item md={7} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            name=\"expiredDate\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.expire} \r\n                                        />\r\n                                        {/* <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"sellPrice\" \r\n                                            variant=\"outlined\"\r\n                                            value={this.expire}\r\n                                        /> */}\r\n                                    </Grid>\r\n                                    <Grid item md={10}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{width:132}}\r\n                                        >\r\n                                            Product Type\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 120 }}>\r\n                                        {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                        <Select\r\n                                            value={this.state.type}\r\n                                            onChange={(event) => {\r\n                                                this.setState({type: event.target.value});\r\n                                                if(!typeSet.includes(event.target.value))\r\n                                                {\r\n                                                    typeSet.push(event.target.value);\r\n                                                }\r\n                                            }}\r\n                                            style={{\r\n                                                height: 36,\r\n                                            }}\r\n                                        >\r\n                                            {\r\n                                                this.props.typeProduct.length== 0 ? <MenuItem value={'none'}>None</MenuItem>:\r\n                                                this.props.typeProduct.map((type) =>\r\n                                                    this.foundTypeInSet(type) ? null :\r\n                                                    <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\r\n                                                )\r\n                                            }   \r\n                                        </Select> \r\n                                    </FormControl>\r\n                                        <Button onClick={() => this.handleAdd()}>\r\n                                            <AiFillPlusCircle\r\n                                                size={28}\r\n                                                style={{\r\n                                                    fontSize: 28,\r\n                                                    margin: 0,\r\n                                                    padding: 0,\r\n                                                    width: 28,\r\n                                                    height: 28\r\n                                                }}    \r\n                                            />\r\n                                        </Button>\r\n                                        <div className='all-type-container'>\r\n                                            {\r\n                                                Array.from(typeSet).map((type) =>\r\n                                                    <div item md={7} className='type-container'>\r\n                                                        <CancelIcon\r\n                                                            className='close-icon'\r\n                                                            size={10}\r\n                                                            onClick={() => {\r\n                                                                typeSet = typeSet.filter(function(item) {\r\n                                                                    return item != type;\r\n                                                                })\r\n                                                                console.log(typeSet);\r\n                                                                this.setState({type: 'none'});\r\n                                                            }}\r\n                                                \r\n                                                        />\r\n                                                        <span className='type-title'>\r\n                                                            {this.getTypeNamebyTypeID(type)}\r\n                                                        </span>\r\n                                                    </div>\r\n                                                    \r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                    </Grid>\r\n                                    {/* <Grid item md={10}\r\n                                        className='input-item'\r\n                                    >\r\n\r\n                                    </Grid> */}\r\n                                    <Grid item md={2}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.updateGood()}>\r\n                                            UPDATE\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                        \r\n                    \r\n                </div>\r\n                </Card>\r\n                {this.props.addTypeStatus ? (\r\n                        <div className=\"modal-add\" style={{ zIndex: '12'}}>\r\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <AddTypeModal></AddTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                {this.props.confirmStatus ? (\r\n                    <div className=\"modal-add\">\r\n                        <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                        <ConfirmModal></ConfirmModal>\r\n                    </div>\r\n                ): null}\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        updateGoodStatus: state.updateGoodStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUpdate: state.infoUpdate,\r\n        infoUser: state.infoUser,\r\n        typeProduct: state.typeProduct,\r\n        listProduct: state.listProduct,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateGoodStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setUpdateConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_UPDATE_GOOD\",\r\n            }); \r\n        },\r\n        updateProductToRedux: (data) => {\r\n            dispatch({\r\n                type: \"UPDATE_PRODUCT\",\r\n                data: data,\r\n            }); \r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateGoodModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\AddGoodModal.js",["1162","1163","1164","1165","1166","1167","1168","1169","1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180"],"import React, { Component } from 'react';\r\nimport { TextField } from '@mui/material';\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { InputLabel, Button, Modal, Grid, Card, CardHeader, Divider, CardContent} from '@mui/material';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { connect } from 'react-redux';\r\nimport GoodImage from '../../img/good-example.jpg';\r\nimport AddTypeModal from './AddTypeModal';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport ConfirmModal from './ConfirmModal';\r\nimport { GiConsoleController } from 'react-icons/gi';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\n// Use for choose type:\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass AddGoodModal extends Component {\r\n    imgUrl= 'none';\r\n    dateTime= Date.now();\r\n    currentDateTime = '2021-01-02';\r\n    finishUpImage = true;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n            change: false,\r\n        }; \r\n        //this.loadAllType(); \r\n        // this.loadAllGood();\r\n\r\n        this.currentDateTime = this.getCurrentDateTime();\r\n        typeSet = [];\r\n        // console.log(\"typeProduct\", this.props.typeProduct);\r\n        var listProductInfor = this.props.listProduct.state;\r\n        if(listProductInfor.length > 0)\r\n        {\r\n            this.generatedID = parseInt(listProductInfor[listProductInfor.length-1]._id.productID) + 1;\r\n        } \r\n        this.setState({change: !this.state.change})\r\n    }\r\n    \r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    handleAdd(){\r\n        this.props.changeAddTypeStatus();\r\n        this.props.setAddTypeStatus();\r\n    }\r\n    \r\n    async profileImageChange(fileChangeEvent) {\r\n        this.setState({\r\n            imageSelect: fileChangeEvent.target.files[0],\r\n        })\r\n        this.finishUpImage = false;\r\n        const file = fileChangeEvent.target.files[0];\r\n        const { type } = file;\r\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\r\n        } else {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", fileChangeEvent.target.files[0])\r\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\r\n            await axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\r\n                .then(res => {\r\n                    this.imgUrl=res.data.url;\r\n                    this.setState({\r\n                        change: 'true'\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"Thất bại\");\r\n                })\r\n        }\r\n        this.finishUpImage = true;\r\n    }\r\n    async importGood(e) {\r\n        // Ngăn chuyển trang\r\n\r\n        var isContinue = this.checkConstraint();\r\n        if(!isContinue)\r\n        {\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n        // // Thêm hàng hoá\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            product: {\r\n                _id: {\r\n                    productID: this.generatedID,\r\n                    importDate: document.querySelector('input[name=\"importDate\"]').value,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: document.querySelector('input[name=\"goodName\"]').value,\r\n                quantity: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                remain: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\r\n                sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\r\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\r\n                imgUrl: this.imgUrl,\r\n                unit: document.querySelector('input[name=\"unit\"]').value,\r\n            }   \r\n        }\r\n        console.log(data);\r\n\r\n        axios.post(`http://localhost:5000/api/product`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu thành công\")\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                console.log(err);\r\n            })\r\n\r\n        //Thêm vào bảng joinType nữa\r\n\r\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\r\n        for(var i = 0 ; i < typeSet.length ; i++)\r\n        {\r\n            const data1 = {\r\n                token: localStorage.getItem('token'),\r\n                productJoinType: {\r\n                    _id : {\r\n                        productID: this.generatedID,\r\n                        typeID: typeSet[i], \r\n                        importDate: document.querySelector('input[name=\"importDate\"]').value,\r\n                        storeID: this.props.infoUser.email,\r\n                    }\r\n                }\r\n            }\r\n            axios.post(`http://localhost:5000/api/product/join`, data1)\r\n                .then(res => {\r\n                    console.log(\"lưu vô bảng join thành công\");\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                })\r\n        }\r\n        this.props.changeStatusAddGood();\r\n        // Thêm vào redux\r\n        var dataRedux = {\r\n            _id: {\r\n                productID: this.generatedID.toString(),\r\n                importDate: document.querySelector('input[name=\"importDate\"]').value + 'T00:00:00.000+00:00',\r\n                storeID: this.props.infoUser.email,\r\n            },\r\n            name: document.querySelector('input[name=\"goodName\"]').value,\r\n            quantity: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n            remain: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n            importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\r\n            sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\r\n            expires: document.querySelector('input[name=\"expiredDate\"]').value + 'T00:00:00.000+00:00',\r\n            imgUrl: this.imgUrl,\r\n            unit: document.querySelector('input[name=\"unit\"]').value,\r\n            typeIDList: typeSet,\r\n        }\r\n        // console.log(\"dataRedux\", dataRedux); \r\n        this.props.addProductToRedux(dataRedux);\r\n        // console.log(data);\r\n        console.log(\"this.props.listProduct.state\", this.props.listProduct.state)\r\n    }\r\n    \r\n    checkConstraint = () => {\r\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\r\n        // Constraint 1: Check name\r\n        var productName =  document.querySelector('input[name=\"goodName\"]').value;\r\n        if(productName.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Tên sản phẩm không được trống\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 2: Check quantity\r\n        if(document.querySelector('input[name=\"goodQuantity\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value) <= 0) \r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\r\n            alert('Số lượng sản phẩm phải lớn hơn 0');\r\n            return false;\r\n        }\r\n        // Constraint 3: check Unit\r\n        if(document.querySelector('input[name=\"unit\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\r\n            alert('Đơn vị của sản phẩm không được trống');\r\n            return false;\r\n        }\r\n        // Constraint 4: Check import Price\r\n        if(document.querySelector('input[name=\"originalPrice\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Giá nhập không được trống\",\"warning\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <= 0) \r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('Giá nhập phải lớn hơn 0',\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 5: check sell Price\r\n        if(document.querySelector('input[name=\"sellPrice\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Giá bán không được trống\",\"warning\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"sellPrice\"]').value) <= 0) \r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('Giá bán phải lớn hơn 0',\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 6: Ngày nhập phải nhỏ  hơn ngày hết hạn\r\n        if (\r\n            (\r\n                new Date(document.querySelector('input[name=\"importDate\"]').value).getTime()\r\n                - \r\n                new Date(document.querySelector('input[name=\"expiredDate\"]').value).getTime()\r\n            ) >= 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('Không thể nhập hàng hết hạn',\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 7: Check giá gốc nhỏ hơn giá bán\r\n        if(\r\n            parseInt(document.querySelector('input[name=\"sellPrice\"]').value) \r\n            - \r\n            parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <=0\r\n            ) \r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('Giá bán phải lớn hơn giá gốc',\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 8: check xem đã  up ảnh lên xong chưa\r\n        if(this.finishUpImage == false)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('Ảnh chưa được upload xong',\"warning\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    generatedID = 0;\r\n\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName='Fuck';\r\n        for(var i = 0; i< this.props.typeProduct.length;i++)\r\n        {   \r\n            if(this.props.typeProduct[i]._id.typeID == typeID)\r\n            {\r\n                typeName = this.props.typeProduct[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    foundTypeInSet(typeID) {\r\n        for(var i = 0 ; i < typeSet.length; i++)\r\n        {\r\n            if(typeSet[i]==typeID._id.typeID) return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '1000px', justifyContent: 'center', marginTop: '10%' }}>   \r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"ADD GOOD\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid className=\"import-container\" container spacing={2}>\r\n                        <Grid item md={3}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                paddingLeft: '30px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden', marginTop: '15px ' }}>\r\n                                <Image style={{width: '240px',height: '240px', padding: '10px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={9}>\r\n                                    <Grid container md={12}>\r\n                                        <Grid item md={6} \r\n                                            className='input-item'\r\n                                        >\r\n                                            <div \r\n                                                className=\"input-label\"\r\n                                                style={{\r\n                                                    width: '130px'\r\n                                                }}\r\n                                            >\r\n                                                ID\r\n                                            </div>\r\n                                            <StyledTextField\r\n                                                classname='input-box' \r\n                                                type=\"text\" \r\n                                                // class=\"input-val\" \r\n                                                style = {{width: '60%'}} \r\n                                                fullWidth \r\n                                                size=\"small\" \r\n                                                name=\"goodID\" \r\n                                                variant=\"outlined\"\r\n                                                value={this.generatedID}\r\n                                                readOnly={true}\r\n                                                disabled={true}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item md={6} \r\n                                            className='input-item'\r\n                                            style={{\r\n                                                marginLeft: 0,\r\n                                                paddingLeft: 0,\r\n                                            }}\r\n                                        >\r\n                                            <div className=\"input-label\" style={{width: 110}}>Import Date</div>\r\n                                            <StyledTextField\r\n                                                classname='input-box'   \r\n                                                type=\"date\" \r\n                                                style = {{width: '68%'}} \r\n                                                fullWidth\r\n                                                name=\"importDate\"\r\n                                                size=\"small\"\r\n                                                variant=\"outlined\"\r\n                                                defaultValue={this.currentDateTime}\r\n                                            />\r\n                                        </Grid>\r\n                                        \r\n                                        <Grid item md={6} \r\n                                            className='input-item'\r\n                                        >\r\n                                            <div className=\"input-label\"style={{width: '130px'}}>Name</div>\r\n                                            <StyledTextField\r\n                                                classname='input-box'   \r\n                                                type=\"text\" \r\n                                                // class=\"input-val\" \r\n                                                style = {{width: '60%'}} \r\n                                                fullWidth\r\n                                                size=\"small\"\r\n                                                name=\"goodName\" \r\n                                                variant=\"outlined\" \r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item md={4}\r\n                                            className='input-item'\r\n                                            style={{padding: '0px', marginLeft: '0px'}}\r\n                                        >\r\n                                            <div \r\n                                                className=\"input-label\" \r\n                                                style={{width: '120px'}}\r\n                                            >\r\n                                                Quantity\r\n                                            </div>\r\n                                            <StyledTextField\r\n                                                style = {{width: '60%'}} \r\n                                                fullWidth\r\n                                                name=\"goodQuantity\" \r\n                                                variant=\"outlined\"\r\n                                                type=\"number\"\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item md={2}\r\n                                            className='input-item'\r\n                                            style={{\r\n                                                paddingRight: 12\r\n                                            }}\r\n                                        >\r\n                                            <div \r\n                                                className=\"input-label\"\r\n                                                style={{\r\n                                                    marginLeft: 0,\r\n                                                    paddingLeft: 4,\r\n                                                    width: 40\r\n                                                }}\r\n                                            >\r\n                                                Unit\r\n                                            </div>\r\n                                            <StyledTextField\r\n                                                classname='input-box'\r\n                                                style = {{width: '100%', marginLeft: '4px'}} \r\n                                                fullWidth\r\n                                                variant=\"outlined\"\r\n                                                type=\"text\" \r\n                                                name=\"unit\" \r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item md={6}\r\n                                            className='input-item'\r\n                                        >\r\n                                            <div className=\"input-label\" style={{width: 128}}>Original Price</div>\r\n                                            <StyledTextField\r\n                                                classname='input-box'\r\n                                                style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \r\n                                                fullWidth\r\n                                                name=\"originalPrice\" \r\n                                                variant=\"outlined\"\r\n                                                type=\"number\" \r\n                                            />\r\n                                            đ\r\n                                        </Grid>\r\n                                        <Grid item md={6}\r\n                                            className='input-item'\r\n                                            style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\r\n                                        >\r\n                                            <div \r\n                                                className=\"input-label\"\r\n                                                style={{width: '130px'}}\r\n                                            >\r\n                                                Sell Price\r\n                                            </div>\r\n                                            <StyledTextField\r\n                                                classname='input-box'\r\n                                                style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \r\n                                                fullWidth\r\n                                                name=\"sellPrice\" \r\n                                                variant=\"outlined\"\r\n                                                type=\"number\" \r\n                                            />\r\n                                            đ\r\n                                        </Grid>\r\n                                        <Grid item md={7} \r\n                                            className='input-item'\r\n                                        >\r\n                                            <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\r\n                                            <StyledTextField\r\n                                                classname='input-box'   \r\n                                                type=\"date\" \r\n                                                style = {{width: '70%'}} \r\n                                                fullWidth\r\n                                                size=\"small\"\r\n                                                name=\"expiredDate\" \r\n                                                variant=\"outlined\"\r\n                                                defaultValue={this.currentDateTime}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item md={12}\r\n                                            className='input-item'\r\n                                        >\r\n                                            <div \r\n                                                className=\"input-label\"\r\n                                                style={{width:132}}\r\n                                            >\r\n                                                Product Type\r\n                                            </div>\r\n                                            <FormControl sx={{ minWidth: 120 }}>\r\n                                                <Select\r\n                                                    value={this.state.type}\r\n                                                    onChange={(event) => {\r\n                                                        this.setState({type: event.target.value});\r\n                                                        if(!typeSet.includes(event.target.value))\r\n                                                        {\r\n                                                            typeSet.push(event.target.value);\r\n                                                        }\r\n                                                        this.setState({change: !this.state.change})\r\n                                                    }}\r\n                                                    style={{\r\n                                                        height: 36,\r\n                                                    }}\r\n                                                >\r\n                                                    {\r\n                                                        this.props.typeProduct.length== 0 ? <MenuItem value={'none'}>None</MenuItem>:\r\n                                                        this.props.typeProduct.map((type) =>\r\n                                                            this.foundTypeInSet(type) ? null :\r\n                                                            <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\r\n                                                        )\r\n                                                    }   \r\n                                                </Select> \r\n                                            </FormControl>\r\n                                            <Button onClick={() => this.handleAdd()}>\r\n                                                <AiFillPlusCircle\r\n                                                    size={28}\r\n                                                    style={{\r\n                                                        fontSize: 28,\r\n                                                        margin: 0,\r\n                                                        padding: 0,\r\n                                                        width: 28,\r\n                                                        height: 28\r\n                                                    }}    \r\n                                                />\r\n                                            </Button>\r\n                                            <div className='all-type-container'>\r\n                                                {\r\n                                                    Array.from(typeSet).map((type) =>\r\n                                                        <div className='type-container'>\r\n                                                            \r\n                                                            <CancelIcon\r\n                                                                className='close-icon'\r\n                                                                size={10}\r\n                                                                onClick={() => {\r\n                                                                    typeSet = typeSet.filter(function(item) {\r\n                                                                        return item != type;\r\n                                                                    })\r\n                                                                    console.log(typeSet);\r\n                                                                    this.setState({type: 'none'});\r\n                                                                }}\r\n                                                    \r\n                                                            />\r\n                                                            <span className='type-title'>\r\n                                                                {this.getTypeNamebyTypeID(type)}\r\n                                                            </span>\r\n                                                        </div>\r\n                                                        \r\n                                                    )\r\n                                                }\r\n                                            </div>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                            </Grid>\r\n                        </Grid> \r\n                    </CardContent>\r\n                    <Divider />    \r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'space-evenly',\r\n                            margin: 10\r\n                        }}\r\n                    >\r\n                        <Button className=\"btn btn-primary\" variant=\"contained\" onClick={(e) => this.props.changeStatusAddGood()}>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button className=\"btn btn-primary\" variant=\"contained\" onClick={(e) => this.importGood(e)}>\r\n                            IMPORT\r\n                        </Button> \r\n                    </div>\r\n                                   \r\n                </Card>    \r\n                {this.props.addTypeStatus ? (\r\n                    <div className=\"modal-add\">\r\n                        <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                        <AddTypeModal></AddTypeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.confirmStatus ? (\r\n                    <div className=\"modal-add\">\r\n                        <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                        <ConfirmModal></ConfirmModal>\r\n                    </div>\r\n                ): null}\r\n            </form>\r\n        );        \r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        typeProduct: state.typeProduct,\r\n        listProduct: state.listProduct,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar\r\n            })\r\n        },\r\n        setAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_IMPORT_GOOD\",\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        getProductToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_AND_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        getProductType: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        changeStatusAddGood: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_GOOD_STATUS\",\r\n            }); \r\n        },\r\n        addProductToRedux: (data) => {\r\n            dispatch({\r\n                type: \"ADD_PRODUCT\",\r\n                data: data,\r\n            }); \r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddGoodModal);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\UpdateTypeModal.js",["1181","1182","1183","1184","1185","1186","1187","1188","1189"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Alert } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel, GiVampireCape } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nvar listTypeInfor = [];\r\n\r\nclass UpdateTypeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            change: 'false'\r\n        }\r\n        this.loadInitialData();\r\n        this.getAllTypeList();\r\n    }\r\n    storeID = \"\";\r\n    typeList = [];\r\n\r\n    async getAllTypeList(){\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        console.log(data.token);\r\n        // alert(data.token);\r\n        console.log(data.filter);\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n    }\r\n    addType = () => {\r\n        var newTypeName = document.querySelector('input[name=\"typeName\"]').value.trim();\r\n        if(this.checkConstraint(newTypeName)==false)  return;\r\n        var genTypeID = 0;\r\n        if(listTypeInfor.length>0)\r\n        {\r\n            genTypeID = parseInt(listTypeInfor[listTypeInfor.length-1]._id.typeID) + 1;\r\n        } \r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productType: {\r\n                _id:{\r\n                    typeID: genTypeID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: newTypeName,\r\n            }    \r\n        }\r\n        axios.post(`http://localhost:5000/api/product/type`, data)\r\n            .then(res => {\r\n                alert(\"Save success\");\r\n                //TODO: Cập nhật token ở đây nữa\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        this.props.changeAddTypeStatus();\r\n    }\r\n    \r\n    checkConstraint(typeName) {\r\n        //Constraint 1: Check name\r\n        for(var i=0;i<listTypeInfor.length;i++)\r\n        {\r\n            if(listTypeInfor[i].name==typeName)\r\n            {\r\n                if(typeName.trim()==this.props.typeProductValue.name)\r\n                {\r\n                    alert(\"Không đổi tên à anh zai\");\r\n                    return false;\r\n                }\r\n                alert(\"Trùng tên rồi anh chai\");\r\n                return false;\r\n            }\r\n            \r\n        }        \r\n        // Constraint 2: Not blank\r\n        if(typeName.length==0)\r\n        {\r\n            alert(\"Không nhập gì à anh chai\")\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n    cancel = () => {\r\n        this.props.changeStatusUpdateType();\r\n    }\r\n\r\n    handle = () => {\r\n        this.editType();\r\n    }\r\n\r\n    editType = () => {\r\n        var newTypeName = this.typeName;\r\n        if(this.checkConstraint(newTypeName)==false) return;\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productType: {\r\n                _id: {\r\n                    typeID: this.props.typeProductValue._id.typeID,\r\n                    storeID: this.props.infoUser.email,\r\n                }, \r\n                name: newTypeName,\r\n            }\r\n        }\r\n        // alert(data.product.name)\r\n        axios.put(`http://localhost:5000/api/product/type`, data)\r\n            .then(res => {\r\n                // Có khi mình sẽ cập nhật type ở dây\r\n                console.log(\"Update success\");\r\n                alert('update được rồi anh trai')\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(\"Lỗi gì cmnr\")\r\n            })\r\n        this.props.changeStatusUpdateType();\r\n        this.props.updateNameToRedux(data.productType);\r\n        // this.loadAllGood();\r\n        // console.log(\"Cập nhập redux nào mấy anh\")\r\n        // this.props.updateNameToProductRedux(data.productType);\r\n        // this.props.changeEditTypeStatus();\r\n    }\r\n\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName=\"Null\";\r\n        console.log(\"typeList\", this.props.typeProduct);\r\n        for(var i = 0; i < this.props.typeProduct.length;i++)\r\n        {   \r\n            if(this.props.typeProduct[i]._id.typeID == typeID)\r\n            {\r\n                typeName = this.props.typeProduct[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    async loadAllGood() {\r\n        var resultProduct = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }\r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/`, {\r\n            params: { ...data }\r\n        })\r\n            .then(res => {\r\n                resultProduct = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Get hết từ cái productjoinType\r\n        var result = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, {\r\n            params: { ...data1 }\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n                localStorage.getItem('token', res.data.token);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Lấy các cái jointype\r\n        var joinTypeInfor = [];\r\n        for (let i = 0; i < result.length; i++) {\r\n            joinTypeInfor.push(result[i]);\r\n        }\r\n        console.log(\"joinTypeInfor\", joinTypeInfor);\r\n\r\n        var listProductInfor = [];\r\n        for (let i = 0; i < resultProduct.length; i++) {\r\n            var typeIDList = [];\r\n            var joinType = '';\r\n            for (var j = 0; j < joinTypeInfor.length; j++) {\r\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\r\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) \r\n                {\r\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\r\n                    joinType = joinType + ' ' + this.getTypeNamebyTypeID(joinTypeInfor[j]._id.typeID);\r\n                }\r\n            }\r\n\r\n            listProductInfor.push(\r\n                {\r\n                    ...resultProduct[i],\r\n                    typeIDList: typeIDList,\r\n                    joinType: joinType\r\n                });\r\n        }\r\n        this.props.getProductToReducer(listProductInfor);\r\n    }\r\n\r\n    typeName = \"\";\r\n    loadInitialData = () => {\r\n        this.typeName = this.props.typeProductValue.name;\r\n        this.setState({change: true});\r\n    }\r\n\r\n    changeTypeName(e)\r\n    {\r\n        this.typeName = e.target.value;\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader \r\n                        style={{ color: 'blue', backgroundColor: '#efeeef', textAlign: 'center' }} \r\n                        title={\"Update Type\"}\r\n                        />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid \r\n                            container \r\n                            spacing={2}\r\n                            justifyContent={'center'}\r\n                            alignItems={'center'}\r\n                        >\r\n                            <Grid item md={2} xs={12}>\r\n                                TypeName\r\n                            </Grid>\r\n                            <Grid item md={10} xs={12}>\r\n                                <TextField\r\n                                    id=\"outlined-basic\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    required\r\n                                    type=\"text\"\r\n                                    name=\"typeName\"\r\n                                    defaultValue={this.typeName}\r\n                                    onChange={(e) => this.changeTypeName(e)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button \r\n                            style={{ backgroundColor: 'yellowgreen' }} \r\n                            // onClick={() => this.addShift()} \r\n                            onClick={() => this.handle()}\r\n                            variant=\"contained\" \r\n                            startIcon={<BiPlusMedical />}\r\n                        >\r\n                            Xác nhận\r\n                        </Button>\r\n                        <Button \r\n                            style={{ backgroundColor: 'red' }} \r\n                            // onClick={() => this.editShift()}\r\n                            onClick={() => this.cancel()}\r\n                            variant=\"contained\" \r\n                            startIcon={<GiCancel />}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        typeProduct: state.typeProduct,\r\n        infoUser: state.infoUser,\r\n        typeProductValue: state.typeProductValue\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        addTypeToReducer: (data) => {\r\n            dispatch({\r\n                type: \"ADD_TYPE\",\r\n                data: data,\r\n            });\r\n        },\r\n         changeStatusUpdateType: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_TYPE_STATUS\",\r\n            }); \r\n        },\r\n        updateNameToRedux: (data) => {\r\n            dispatch({\r\n                type: \"UPDATE_TYPE\",\r\n                data: data,\r\n            });\r\n        },\r\n        getProductToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_AND_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateTypeModal);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\ControlReciept.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\StatusReceiptType.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\DateReciept.js",["1190"],"import React from 'react';\r\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\n\r\n\r\nfunction DataReciept(props) {\r\n    const dispatch = useDispatch()\r\n    const typeByDate = useSelector(state => state.typeByDate)\r\n    const [value, setValue] = React.useState(new Date());\r\n    const [value1, setValue1] = React.useState('all');\r\n    const darkmode = useSelector(state => state.statusDarkmode)\r\n\r\n    const selectDate = () => {\r\n        const data = {\r\n            type: \"typeByDate\",\r\n            day: value.getDate(),\r\n            month: value.getMonth() + 1,\r\n            year: value.getFullYear(),\r\n        }\r\n        dispatch({\r\n            type: \"TYPE_BY_DATE\",\r\n            typeByDate: data,\r\n        })\r\n    }\r\n\r\n    const changeTime = (newValue) => {\r\n        if (newValue) {\r\n            setValue(newValue);\r\n        }\r\n        if (typeByDate.type === 'typeByDate') {\r\n            const data = {\r\n                type: \"typeByDate\",\r\n                day: newValue.getDate(),\r\n                month: newValue.getMonth() + 1,\r\n                year: newValue.getFullYear(),\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        }\r\n    }\r\n\r\n    const selectType = () => {\r\n        if (value1 === 'all') {\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: { type: 'all' },\r\n            })\r\n        } else if (value1 === 'yesterday') {\r\n            let yesterday = new Date()\r\n            const data = {\r\n                type: \"yesterday\",\r\n                day: yesterday.getDate() - 1,\r\n                month: yesterday.getMonth() + 1,\r\n                year: yesterday.getFullYear(),\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        } else if (value1 === 'today') {\r\n            let today = new Date()\r\n            const data = {\r\n                type: \"today\",\r\n                day: today.getDate(),\r\n                month: today.getMonth() + 1,\r\n                year: today.getFullYear(),\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        } else if (value1 === 'lastmonth') {\r\n            let today = new Date()\r\n            const data = {\r\n                type: \"lastmonth\",\r\n                month: today.getMonth(),\r\n                year: today.getFullYear(),\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        } else if (value1 === 'lastyear') {\r\n            let today = new Date()\r\n            const data = {\r\n                type: \"lastyear\",\r\n                year: today.getFullYear() - 1,\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        }\r\n    }\r\n\r\n    const changeType = (e) => {\r\n        setValue1(e.target.value)\r\n        if (typeByDate.type === 'all' || typeByDate.type === 'yesterday' || typeByDate.type === 'today' || typeByDate.type === 'lastmonth' || typeByDate.type === 'lastyear') {\r\n            if (e.target.value === 'all') {\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: { type: 'all' },\r\n                })\r\n            }\r\n            if (e.target.value === 'yesterday') {\r\n                let yesterday = new Date()\r\n                let data = {\r\n                    type: \"yesterday\",\r\n                    day: yesterday.getDate() - 1,\r\n                    month: yesterday.getMonth() + 1,\r\n                    year: yesterday.getFullYear(),\r\n                }\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: data,\r\n                })\r\n            }\r\n            if (e.target.value === 'today') {\r\n                let today = new Date()\r\n                const data = {\r\n                    type: \"today\",\r\n                    day: today.getDate(),\r\n                    month: today.getMonth() + 1,\r\n                    year: today.getFullYear(),\r\n                }\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: data,\r\n                })\r\n            }\r\n            if (e.target.value === 'lastmonth') {\r\n                let today = new Date()\r\n                const data = {\r\n                    type: \"lastmonth\",\r\n                    month: today.getMonth(),\r\n                    year: today.getFullYear(),\r\n                }\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: data,\r\n                })\r\n            }\r\n            if (e.target.value === 'lastyear') {\r\n                let today = new Date()\r\n                const data = {\r\n                    type: \"lastyear\",\r\n                    year: today.getFullYear() - 1,\r\n                }\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: data,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        dispatch({\r\n            type: \"TYPE_BY_DATE\",\r\n            typeByDate: { type: 'all' },\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <Grid item md={12} sm={12}  >\r\n                <Card>\r\n                    <CardHeader style={{ color: !darkmode ? '#0091ea' :'white', backgroundColor: !darkmode ? '#efeeef' :'#455a64'}} title=\"Date\" />\r\n                    <Divider></Divider>\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <div className=\"form-check\">\r\n                                        <input onClick={() => selectType()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault2\" defaultChecked />\r\n                                        <FormControl fullWidth>\r\n                                            <InputLabel id=\"demo-simple-select-label\">Group by</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"demo-simple-select-label\"\r\n                                                id=\"demo-simple-select\"\r\n                                                value={value1}\r\n                                                label=\"Option\"\r\n                                                onChange={(e) => changeType(e)}\r\n                                            >\r\n                                                <MenuItem value='all'>All</MenuItem>\r\n                                                <MenuItem value='today'>Today</MenuItem>\r\n                                                <MenuItem value='yesterday'>Yesterday</MenuItem>\r\n                                                <MenuItem value='lastmonth'>Last month</MenuItem>\r\n                                                <MenuItem value='lastyear'>Last year</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <div className=\"form-check\">\r\n                                        <input onClick={() => selectDate()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\" />\r\n                                        <DesktopDatePicker\r\n                                            label=\"Date\"\r\n                                            value={value}\r\n                                            minDate={new Date('2017-01-01')}\r\n                                            onChange={(newValue) => changeTime(newValue)}\r\n                                            renderInput={(params) => <TextField {...params} />}\r\n                                        />\r\n                                    </div>\r\n                                </Grid>\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default DataReciept;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\TableReciept.js",["1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202","1203","1204"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport { Grid, Box, Button, Checkbox, Modal } from '@mui/material';\r\nimport { red, lightBlue } from '@mui/material/colors';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport axios from 'axios';\r\nimport { FiXSquare } from 'react-icons/fi'\r\nimport { TiArrowBack } from 'react-icons/ti'\r\n\r\nfunction Row(props) {\r\n    const { row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const [openModal, setOpenModal] = React.useState(false);\r\n    const statusSelectAll = useSelector(state => state.statusSelectAll)\r\n    const infoUser = useSelector(state => state.infoUser)\r\n    const dispatch = useDispatch();\r\n    const [statusSelectReplace, setStatusSelectReplace] = React.useState(false);\r\n\r\n    const style = {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 400,\r\n        bgcolor: 'background.paper',\r\n        border: '1px solid #000',\r\n        borderRadius: '5px',\r\n        boxShadow: 24,\r\n        pt: 2,\r\n        px: 4,\r\n        pb: 3,\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        setStatusSelectReplace(statusSelectAll)\r\n    }, [statusSelectAll])\r\n\r\n    const countQuantity = () => {\r\n        let count = 0;\r\n        row.listProduct.map(value => {\r\n            count += value.quantity;\r\n        })\r\n        return count;\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    //Xoa mềm\r\n    const DeleteReciept = (MAHD, isDelete) => {\r\n        if (isDelete) {\r\n            setOpenModal(true)\r\n        } else {\r\n            axios.post('http://localhost:5000/api/sell-product/soft-delete', {\r\n                token: localStorage.getItem('token'),\r\n                email: infoUser.email,\r\n                MAHD: MAHD\r\n            })\r\n                .then(res => {\r\n                    if (res.data.status === 1) {\r\n                        localStorage.setItem('token', res.data.token)\r\n                        dispatch({\r\n                            type: \"DELETE_RECIEPT\",\r\n                            MAHD: MAHD,\r\n                        })\r\n                        dispatch({\r\n                            type: \"HIDE_ALERT\",\r\n                        })\r\n                        dispatch({\r\n                            type: \"SHOW_ALERT\",\r\n                            message: 'Delete success',\r\n                            typeMessage: 'success',\r\n                        })\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    dispatch({\r\n                        type: \"CHANGE_LOGIN_STATUS\",\r\n                    });\r\n                    dispatch({\r\n                        type: \"HIDE_ALERT\",\r\n                    })\r\n                    dispatch({\r\n                        type: \"SHOW_ALERT\",\r\n                        message: 'Login timeout, signin again',\r\n                        typeMessage: 'warning',\r\n                    })\r\n                })\r\n            setOpen(!open)\r\n        }\r\n    }\r\n\r\n    // Xóa vĩnh viễn\r\n    const PermanentlyDelete = async (MAHD) => {\r\n        axios.post('http://localhost:5000/api/sell-product/permanently-delete', {\r\n            token: localStorage.getItem('token'),\r\n            email: infoUser.email,\r\n            MAHD: MAHD\r\n        })\r\n            .then(res => {\r\n                if (res.data.status === 1) {\r\n                    localStorage.setItem('token', res.data.token)\r\n                    dispatch({\r\n                        type: \"DELETE_ONE_RECIEPT\",\r\n                        MAHD: MAHD,\r\n                    })\r\n                    dispatch({\r\n                        type: \"HIDE_ALERT\",\r\n                    })\r\n                    dispatch({\r\n                        type: \"SHOW_ALERT\",\r\n                        message: 'Delete success',\r\n                        typeMessage: 'success',\r\n                    })\r\n                }\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: \"CHANGE_LOGIN_STATUS\",\r\n                });\r\n                dispatch({\r\n                    type: \"HIDE_ALERT\",\r\n                })\r\n                dispatch({\r\n                    type: \"SHOW_ALERT\",\r\n                    message: 'Login timeout, signin again',\r\n                    typeMessage: 'warning',\r\n                })\r\n            })\r\n        setOpenModal(false)\r\n    }\r\n\r\n    const TypeReciept = (isEdit, isDelete, oldBill) => {\r\n        if (isDelete) {\r\n            return red[400]\r\n        } else if (isEdit) {\r\n            return '#f4f492'\r\n        } else if (oldBill) {\r\n            return '#00897b'\r\n        } else {\r\n            return '#a6ffa6'\r\n        }\r\n    }\r\n\r\n    const StatusTypeReciept = (isEdit, isDelete) => {\r\n        if (isDelete) {\r\n            return 'Đã xóa'\r\n        } else if (isEdit) {\r\n            return 'Đổi trả'\r\n        } else {\r\n            return 'Thành công'\r\n        }\r\n    }\r\n\r\n    const RestoneReciept = async (MAHD) => {\r\n        await axios.post('http://localhost:5000/api/sell-product/restone-receipt', {\r\n            token: localStorage.getItem('token'),\r\n            email: infoUser.email,\r\n            MAHD: MAHD\r\n        })\r\n            .then(res => {\r\n                localStorage.setItem('token', res.data.token)\r\n                if (res.data.status === 1) {\r\n                    dispatch({\r\n                        type: 'RESTONE_ONE_RECIEPT',\r\n                        MAHD: MAHD\r\n                    })\r\n                    dispatch({\r\n                        type: \"HIDE_ALERT\",\r\n                    })\r\n                    dispatch({\r\n                        type: \"SHOW_ALERT\",\r\n                        message: 'Restone success',\r\n                        typeMessage: 'success',\r\n                    })\r\n                }\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: \"CHANGE_LOGIN_STATUS\",\r\n                });\r\n                dispatch({\r\n                    type: \"HIDE_ALERT\",\r\n                })\r\n                dispatch({\r\n                    type: \"SHOW_ALERT\",\r\n                    message: 'Login timeout, signin again',\r\n                    typeMessage: 'warning',\r\n                })\r\n            })\r\n        setOpen(false);\r\n    }\r\n\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } };\r\n\r\n    const ChangeCheckbox = (e, MAHD) => {\r\n        setStatusSelectReplace(!statusSelectReplace);\r\n        if (e.target.checked) {\r\n            dispatch({\r\n                type: \"ADD_MAHD_RECIEPT\",\r\n                MAHD: MAHD,\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: \"DELETE_MAHD_RECIEPT\",\r\n                MAHD: MAHD,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow style={{ backgroundColor: TypeReciept(row.isEdit, row.deleted, row.oldBill), borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: '#90a4ae #90a4ae transparent #90a4ae' }} sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n                <TableCell>\r\n                    <Checkbox {...label} checked={statusSelectReplace} onChange={(e) => ChangeCheckbox(e, row.MAHD)} color=\"default\" />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <IconButton\r\n                        aria-label=\"expand row\"\r\n                        size=\"small\"\r\n                        onClick={() => setOpen(!open)}\r\n                    >\r\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                    </IconButton>\r\n                </TableCell>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                    {row.MAHD}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.date}</TableCell>\r\n                <TableCell align=\"right\">{row.totalMoney.toLocaleString()}</TableCell>\r\n                <TableCell align=\"right\">{row.discount}</TableCell>\r\n                <TableCell align=\"right\">{row.totalFinalMoney.toLocaleString()}</TableCell>\r\n            </TableRow>\r\n            <TableRow style={{ borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: 'transparent #90a4ae #90a4ae #90a4ae' }}>\r\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={12}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Box sx={{ margin: 1 }}>\r\n                            <Typography style={{ fontWeight: '600' }} variant=\"h6\" gutterBottom component=\"div\">\r\n                                Detail Recipet\r\n                            </Typography>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item lg={6} md={12} sm={12} xs={12}>\r\n                                    <Table size=\"small\" aria-label=\"purchases\">\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n\r\n                                                <TableCell>#</TableCell>\r\n                                                <TableCell>Name</TableCell>\r\n                                                <TableCell>Quantity</TableCell>\r\n                                                <TableCell align=\"right\">Price</TableCell>\r\n                                                <TableCell align=\"right\">Total Price</TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {row.listProduct.map((value, key) => (\r\n                                                <TableRow key={value.name}>\r\n                                                    <TableCell>\r\n                                                        {key + 1}\r\n                                                    </TableCell>\r\n                                                    <TableCell>{value.product.name}</TableCell>\r\n                                                    <TableCell>{value.quantity}</TableCell>\r\n                                                    <TableCell align=\"right\">{value.product.sellPrice.toLocaleString()}</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        {(value.quantity * value.product.sellPrice).toLocaleString()}\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            ))}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Grid>\r\n                                <Grid style={{ borderLeft: '1px solid black', marginTop: '15px' }} item lg={6} md={12} sm={12} xs={12}>\r\n                                    <Grid container spacing={3}>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Id Receipt:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.MAHD}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Status:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{StatusTypeReciept(row.isEdit, row.deleted)}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Date:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.date}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Time:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.time}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Old bill:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.oldBill ? row.oldBill.MAHD : \"Không có\"}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Seller:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.name}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Total quanitty:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{countQuantity()}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Total money:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.totalMoney.toLocaleString()}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Id coupon:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.coupon ? row.coupon.idCoupon : \"Không áp dụng\"}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Reduce money:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{(row.totalFinalMoney - row.totalMoney).toLocaleString()}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Discount (%):</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.discount}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>TOTAL:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>{row.totalFinalMoney.toLocaleString()}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid style={{ marginBottom: '10px' }} item md={12} xs={12}>\r\n                                    <Grid style={{ justifyContent: 'end' }} container>\r\n                                        {row.deleted ? (\r\n                                            <Grid style={{ justifyContent: 'end' }} item md={2} xs={2}>\r\n                                                <Button onClick={() => RestoneReciept(row.MAHD)} style={{ fontWeight: '700', fontSize: '0.6rem', backgroundColor: '#00bfa5', color: 'white' }}>\r\n                                                    <TiArrowBack style={{ marginRight: '5px', fontSize: '1rem', transform: 'translateY(-5%)' }}></TiArrowBack>\r\n                                                    Restone\r\n                                                </Button>\r\n                                            </Grid>\r\n                                        ) : null}\r\n                                        <Grid style={{ justifyContent: 'end' }} item md={2} xs={2}>\r\n                                            <Button onClick={() => DeleteReciept(row.MAHD, row.deleted)} style={{ fontWeight: '700', fontSize: '0.6rem', backgroundColor: red[400], color: 'white' }}>\r\n                                                <FiXSquare style={{ marginRight: '5px', fontSize: '1rem', transform: 'translateY(-5%)' }}></FiXSquare>\r\n                                                Delete\r\n                                            </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n            <Modal\r\n                open={openModal}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"parent-modal-title\"\r\n                aria-describedby=\"parent-modal-description\"\r\n            >\r\n                <Box sx={{ ...style, width: 400 }}>\r\n                    <h2 style={{ textAlign: 'center' }} id=\"parent-modal-title\">Are you sure to delete?</h2>\r\n                    <Grid container spacing={2}>\r\n                        <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\r\n                            <Button onClick={() => PermanentlyDelete(row.MAHD)} style={{ color: 'white', backgroundColor: red[500] }}>DELETE</Button>\r\n                        </Grid>\r\n                        <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\r\n                            <Button onClick={() => setOpenModal(false)} style={{ backgroundColor: lightBlue[100] }}>CANCEL</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Modal>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nRow.propTypes = {\r\n    row: PropTypes.shape({\r\n        calories: PropTypes.number.isRequired,\r\n        carbs: PropTypes.number.isRequired,\r\n        fat: PropTypes.number.isRequired,\r\n        history: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                amount: PropTypes.number.isRequired,\r\n                customerId: PropTypes.string.isRequired,\r\n                date: PropTypes.string.isRequired,\r\n            }),\r\n        ).isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        price: PropTypes.number.isRequired,\r\n        protein: PropTypes.number.isRequired,\r\n    }).isRequired,\r\n};\r\n\r\n\r\nexport default function CollapsibleTable() {\r\n    const typeReciept = useSelector(state => state.typeReciept)\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const typeByDate = useSelector(state => state.typeByDate)\r\n    const [listRecieptReplace, setListRecieptReplace] = React.useState(listReciept);\r\n    const statusSelectAll = useSelector(state => state.statusSelectAll)\r\n    const search = useSelector(state => state.search)\r\n    const dispatch = useDispatch()\r\n    let listMAHD = []\r\n    React.useEffect(() => {\r\n        var list = typeReciept.length === 0 ? listReciept : listReciept.filter(value => {\r\n            for (var i = 0; i < typeReciept.length; i++) {\r\n                switch (typeReciept[i]) {\r\n                    case 'delete':\r\n                        if (value.deleted) {\r\n                            return value;\r\n                        }\r\n                        break;\r\n                    case 'return':\r\n                        if (!value.deleted && value.isEdit) {\r\n                            return value;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        if (!value.deleted && !value.isEdit) {\r\n                            return value;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        })\r\n\r\n        if (typeByDate.type === 'typeByDate' || typeByDate.type === 'yesterday' || typeByDate.type === 'today') {\r\n            list = list.filter(value => {\r\n                let timeMau = value.date;\r\n                timeMau = timeMau.replace(/\\s/g, \"\");\r\n                timeMau = timeMau.split(\"/\");\r\n                if (typeByDate.day == timeMau[0] && typeByDate.month == timeMau[1] && typeByDate.year == timeMau[2]) {\r\n                    return value;\r\n                }\r\n            })\r\n        }\r\n\r\n        if (typeByDate.type === 'lastmonth') {\r\n            list = list.filter(value => {\r\n                let timeMau = value.date;\r\n                timeMau = timeMau.replace(/\\s/g, \"\");\r\n                timeMau = timeMau.split(\"/\");\r\n                if (typeByDate.month == timeMau[1] && typeByDate.year == timeMau[2]) {\r\n                    return value;\r\n                }\r\n            })\r\n        }\r\n\r\n        if (typeByDate.type === 'lastyear') {\r\n            list = list.filter(value => {\r\n                let timeMau = value.date;\r\n                timeMau = timeMau.replace(/\\s/g, \"\");\r\n                timeMau = timeMau.split(\"/\");\r\n                if (typeByDate.year == timeMau[2]) {\r\n                    return value;\r\n                }\r\n            })\r\n        }\r\n\r\n        if (search.length !== 0) {\r\n            list = list.filter(value => {\r\n                let isCheck = true\r\n                for (let i = 0; i < search.length; i++) {\r\n                    if (search[0] !== value.MAHD[0]) {\r\n                        isCheck = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (isCheck) {\r\n                    return value;\r\n                }\r\n            })\r\n        }\r\n\r\n        list.map(value => {\r\n            listMAHD.push(value.MAHD)\r\n        })\r\n\r\n        statusSelectAll ? dispatch({\r\n            type: \"SELECTED_ALL_RECIEPT\",\r\n            listMAHD: listMAHD,\r\n        }) : dispatch({\r\n            type: \"RESET_MAHD_RECIEPT\"\r\n        })\r\n        setListRecieptReplace(list)\r\n    }, [typeReciept, typeByDate, listReciept, statusSelectAll, search])\r\n\r\n\r\n    return (\r\n        <TableContainer style={{ overflowX: 'hidden', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px' }} component={Paper}>\r\n            <Table aria-label=\"collapsible table\">\r\n                <TableHead>\r\n                    <TableRow style={{ backgroundColor: 'black', color: 'white' }}>\r\n                        <TableCell>\r\n                        </TableCell>\r\n                        <TableCell />\r\n                        <TableCell >ID Receipt</TableCell>\r\n                        <TableCell align=\"right\">Date</TableCell>\r\n                        <TableCell align=\"right\">Total</TableCell>\r\n                        <TableCell align=\"right\">Discount</TableCell>\r\n                        <TableCell align=\"right\">Total final</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {listRecieptReplace ?\r\n                        listRecieptReplace.map((row) => (\r\n                            <Row key={row.MAHD} row={row} />\r\n                        )) : null\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ModalAddCoupon.js",["1205","1206","1207","1208","1209"],"import React from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport TimePicker from '@mui/lab/TimePicker';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport axios from 'axios';\r\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\r\n\r\nfunction ModalAddCoupon(props) {\r\n    const statusDarkmode = useSelector(state => state.statusDarkmode)\r\n    const statusEditCoupon = useSelector(state => state.statusEditCoupon)\r\n    const objectEditCoupon = useSelector(state => state.objectEditCoupon)\r\n    const infoUser = useSelector(state => state.infoUser)\r\n    const [timeFrom, setTimeFrom] = React.useState(statusEditCoupon ? new Date(objectEditCoupon.timeFrom) : new Date());\r\n    const [timeEnd, settimeEnd] = React.useState(statusEditCoupon ? new Date(objectEditCoupon.timeEnd) : new Date());\r\n    const [isDescription, setIsDescription] = React.useState(false);\r\n    const [percent, setPercent] = React.useState(statusEditCoupon ? objectEditCoupon.percent : 100);\r\n    const [isPercent, setIsPercent] = React.useState(false);\r\n    const [description, setDiscription] = React.useState(statusEditCoupon ? objectEditCoupon.name : \"Discount 2/9\")\r\n    const [minTotal, setMinTotal] = React.useState(statusEditCoupon ? objectEditCoupon.minTotal : 100000)\r\n    const [isMinTotal, setIsMinTotal] = React.useState(false)\r\n    const [quantity, setQuantity] = React.useState(statusEditCoupon ? objectEditCoupon.quantity : 10)\r\n    const [isQuantity, setIsQuantity] = React.useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    const blurDiscription = (e) => {\r\n        if (e.target.value.length === 0) {\r\n            setDiscription(e.target.value)\r\n            setIsDescription(true);\r\n        } else {\r\n            setDiscription(e.target.value)\r\n            setIsDescription(false);\r\n        }\r\n    }\r\n\r\n    const blurDiscount = (e) => {\r\n        if (e.target.value > 100 || e.target.value < 0 || e.target.value == \"\") {\r\n            setIsPercent(true)\r\n        }\r\n        else {\r\n            setIsPercent(false)\r\n            setPercent(e.target.value)\r\n        }\r\n    }\r\n\r\n    const blurQuantity = (e) => {\r\n        if(e.target.value < 0 || e.target.value == \"\") {\r\n            setIsQuantity(true)\r\n        } else {\r\n            setIsQuantity(false)\r\n            setQuantity(e.target.value)\r\n        }\r\n    }\r\n\r\n    const blurMinTotal = (e) => {\r\n        if(e.target.value < 100000 || e.target.value == \"\") {\r\n            setIsMinTotal(true)\r\n        } else {\r\n            setIsMinTotal(false)\r\n            setMinTotal(e.target.value)\r\n        }\r\n    }\r\n\r\n    const changeTimeFrom = (newValue) => {\r\n        if (newValue) {\r\n            setTimeFrom(newValue);\r\n        }\r\n    }\r\n\r\n    const changetimeEnd = (newValue) => {\r\n        if (newValue) {\r\n            settimeEnd(newValue);\r\n        }\r\n    }\r\n\r\n    const addCoupon = async () => {\r\n        if (timeEnd - timeFrom > 0) {\r\n            if (!isPercent && !isDescription && !isMinTotal && !isQuantity) {\r\n                const data = {\r\n                    idCoupon: makeCode(6),\r\n                    name: description,\r\n                    percent: percent,\r\n                    minTotal: minTotal,\r\n                    timeFrom: timeFrom,\r\n                    timeEnd: timeEnd,\r\n                    quantity: quantity,\r\n                }\r\n                await axios.post(`http://localhost:5000/api/profile/add-coupon`, {\r\n                    token: localStorage.getItem('token'),\r\n                    email: infoUser.email,\r\n                    data: data,\r\n                }).then(res => {\r\n\r\n                }).catch(err => {\r\n                    \r\n                })\r\n                dispatch({\r\n                    type: \"ADD_COUPON\",\r\n                    data: data\r\n                })\r\n                dispatch({\r\n                    type: \"SHOW_ALERT\",\r\n                    message: \"Add coupon success\",\r\n                    typeMessage: \"success\",\r\n                })\r\n                dispatch({\r\n                    type: \"CHANGE_ADD_COUPON_STATUS\"\r\n                })\r\n            }\r\n        } else {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: \"The end date must be greater than the start date\",\r\n                typeMessage: \"warning\",\r\n            })\r\n        }\r\n    }\r\n\r\n    const editCoupon = () => {\r\n        if (timeEnd - timeFrom > 0) {\r\n            if (!isPercent && !isDescription  && !isQuantity) {\r\n                const data = {\r\n                    idCoupon: objectEditCoupon.idCoupon,\r\n                    name: description,\r\n                    minTotal: minTotal,\r\n                    percent: percent,\r\n                    timeFrom: timeFrom,\r\n                    timeEnd: timeEnd,\r\n                    quantity: quantity\r\n                }\r\n                dispatch({\r\n                    type: \"EDIT_COUPON\",\r\n                    data: data\r\n                })\r\n                dispatch({\r\n                    type: \"SHOW_ALERT\",\r\n                    message: \"Edit coupon success\",\r\n                    typeMessage: \"success\",\r\n                })\r\n                dispatch({\r\n                    type: \"CHANGE_ADD_COUPON_STATUS\"\r\n                })\r\n                dispatch({\r\n                    type:\"RESET_EDIT_COUPON_STATUS\"\r\n                })\r\n            }\r\n        } else {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: \"The end date must be greater than the start date\",\r\n                typeMessage: \"warning\",\r\n            })\r\n        }\r\n    }\r\n\r\n    const hanhleCancel = () => {\r\n        dispatch({\r\n            type: \"CHANGE_ADD_COUPON_STATUS\"\r\n        })\r\n        dispatch({\r\n            type:\"RESET_EDIT_COUPON_STATUS\"\r\n        })\r\n    }\r\n\r\n    const makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    return (\r\n        <form className=\"modal-add-shift\" style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n            <Card>\r\n                <CardHeader style={{ color: !statusDarkmode ? '#0091ea' : 'white', backgroundColor: !statusDarkmode ? '#efeeef' : '#455a64' }} title=\"Create coupon\" />\r\n                <Divider />\r\n                <CardContent>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item md={12} xs={12}>\r\n                            <TextField\r\n                                id=\"outlined-basic\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                id=\"outlined-error-helper-text\"\r\n                                onBlur={(e) => blurDiscription(e)}\r\n                                label=\"Coupon description\"\r\n                                defaultValue={description}\r\n                                error={isDescription}\r\n                                helperText={isDescription ? \"Enter something\" : \"\"}\r\n                                required\r\n                                type=\"text\"\r\n                                name=\"disciption\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <TextField\r\n                                required\r\n                                fullWidth\r\n                                onBlur={(e) => blurDiscount(e)}\r\n                                label=\"Discount\"\r\n                                defaultValue={percent}\r\n                                error={isPercent}\r\n                                helperText={isPercent ? \"Enter greater than 0 and less than 100\" : \"\"}\r\n                                type=\"number\"\r\n                                id=\"outlined-error-helper-text\"\r\n                                name=\"discount\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <TextField\r\n                                required\r\n                                fullWidth\r\n                                onBlur={(e) => blurQuantity(e)}\r\n                                label=\"Quantity\"\r\n                                defaultValue={quantity}\r\n                                error={isQuantity}\r\n                                helperText={isQuantity ? \"Enter greater than 0\" : \"\"}\r\n                                type=\"number\"\r\n                                id=\"outlined-error-helper-text\"\r\n                                name=\"quantity\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <TextField\r\n                                required\r\n                                fullWidth\r\n                                onBlur={(e) => blurMinTotal(e)}\r\n                                label=\"Minimum Total Amount\"\r\n                                defaultValue={minTotal}\r\n                                error={isMinTotal}\r\n                                helperText={isMinTotal ? \"Enter greater than 100.000\" : \"\"}\r\n                                type=\"number\"\r\n                                id=\"outlined-error-helper-text\"\r\n                                name=\"mintotal\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                <Stack spacing={3}>\r\n                                    <DesktopDatePicker\r\n                                        label=\"From\"\r\n                                        value={timeFrom}\r\n                                        minDate={new Date('2017-01-01')}\r\n                                        onChange={(newValue) => changeTimeFrom(newValue)}\r\n                                        renderInput={(params) => <TextField {...params} />}\r\n                                    />\r\n                                    <DesktopDatePicker\r\n                                        label=\"To\"\r\n                                        value={timeEnd}\r\n                                        minDate={new Date('2017-01-01')}\r\n                                        onChange={(newValue) => changetimeEnd(newValue)}\r\n                                        renderInput={(params) => <TextField {...params} />}\r\n                                    />\r\n                                </Stack>\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n                <Divider />\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                    {statusEditCoupon ? (\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => editCoupon()} variant=\"contained\" startIcon={<BiEdit />}>\r\n                            Save\r\n                        </Button>) : (\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => addCoupon()} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                            Add\r\n                        </Button>\r\n                    )}\r\n\r\n\r\n                    <Button style={{ backgroundColor: 'red' }} onClick={(e) => hanhleCancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                        Cancel\r\n                    </Button>\r\n                </Box>\r\n            </Card>\r\n        </form >\r\n    );\r\n}\r\n\r\nexport default ModalAddCoupon;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\AddTypeModal.js",["1210","1211","1212","1213","1214","1215"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Alert } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel, GiVampireCape } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nvar listTypeInfor = [];\r\n\r\nclass AddTypeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            change: 'false'\r\n        }\r\n        // this.getAllTypeList();\r\n        listTypeInfor = this.props.typeProduct;\r\n    }\r\n    storeID = \"\";\r\n    typeList = [];\r\n\r\n    // async getAllTypeList(){\r\n    //     var result = [];\r\n    //     const data = {\r\n    //         token: localStorage.getItem('token'),\r\n    //         filter: {\r\n    //             \"_id.storeID\": this.props.infoUser.email,\r\n    //         }   \r\n    //     }\r\n    //     console.log(data.filter);\r\n    //     await axios.get(`http://localhost:5000/api/product/type`, \r\n    //     {\r\n    //         params: {...data}\r\n    //     })\r\n    //         .then(res => {\r\n    //             result = res.data.data;\r\n    //         })\r\n    //         .catch(err => {\r\n    //             alert(err);\r\n    //         })\r\n    //     //Get data và lưu các tên Type vào bảng\r\n    //     for(var i=0; i < result.length ; i++)\r\n    //     {\r\n    //         listTypeInfor.push(result[i]);\r\n    //     }\r\n    // }\r\n    addType = () => {\r\n        if(this.checkConstraint(this.typeName)==false)  return;\r\n        var genTypeID = 0;\r\n        if(listTypeInfor.length>0)\r\n        {\r\n            genTypeID = parseInt(listTypeInfor[listTypeInfor.length-1]._id.typeID) + 1;\r\n        } \r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productType: {\r\n                _id:{\r\n                    typeID: genTypeID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: this.typeName,\r\n            }    \r\n        }\r\n        axios.post(`http://localhost:5000/api/product/type`, data)\r\n            .then(res => {\r\n                alert(\"Save success\");\r\n                //TODO: Cập nhật token ở đây nữa\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        this.props.addTypeToReducer(data.productType);\r\n        this.props.changeAddTypeStatus();\r\n    }\r\n    \r\n    checkConstraint(typeName) {\r\n        console.log(\"check name\", typeName);\r\n        //Constraint 1: Check name\r\n        for(var i=0;i<listTypeInfor.length;i++)\r\n        {\r\n            if(listTypeInfor[i].name==typeName)\r\n            {\r\n                alert(\"Trùng tên rồi anh chai\");\r\n                return false;\r\n            }\r\n        }        \r\n        // Constraint 2: Not blank\r\n        if(typeName.length==0)\r\n        {\r\n            alert(\"Không nhập gì à anh chai\")\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n    cancel = () => {\r\n        this.props.changeAddTypeStatus();\r\n    }\r\n\r\n    handle = () => {\r\n        this.addType();\r\n    }\r\n    typeName = \"\";\r\n\r\n    changeTypeName(e)\r\n    {\r\n        this.typeName = e.target.value;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '11', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader \r\n                        style={{ color: 'blue', backgroundColor: '#efeeef', textAlign: 'center' }} \r\n                        title={\"Add Type\"}\r\n                        />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid \r\n                            container \r\n                            spacing={2}\r\n                            justifyContent={'center'}\r\n                            alignItems={'center'}\r\n                        >\r\n                            <Grid item md={2} xs={12}>\r\n                                TypeName\r\n                            </Grid>\r\n                            <Grid item md={10} xs={12}>\r\n                                <TextField\r\n                                    id=\"outlined-basic\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    required\r\n                                    type=\"text\"\r\n                                    name=\"typeName\"\r\n                                    defaultValue={this.typeName}\r\n                                    onChange={(e) => this.changeTypeName(e)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button \r\n                            style={{ backgroundColor: 'yellowgreen' }} \r\n                            onClick={() => this.handle()}\r\n                            variant=\"contained\" \r\n                            startIcon={<BiPlusMedical />}\r\n                        >\r\n                            Add type\r\n                        </Button>\r\n                        <Button \r\n                            style={{ backgroundColor: 'red' }} \r\n                            // onClick={() => this.editShift()}\r\n                            onClick={() => this.cancel()}\r\n                            variant=\"contained\" \r\n                            startIcon={<GiCancel />}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        typeProductValue: state.typeProductValue,\r\n        typeProduct: state.typeProduct,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        addTypeToReducer: (data) => {\r\n            dispatch({\r\n                type: \"ADD_TYPE\",\r\n                data: data,\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTypeModal);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileCoupon.js",["1216"],"import React from 'react';\r\nimport { Card, CardHeader, Divider, TableBody, TableHead, TableRow, Paper, Box, Button, CardContent, Table, TableCell, TableContainer } from '@mui/material';\r\nimport { BiPlusMedical } from 'react-icons/bi';\r\nimport { IconButton } from '@mui/material'\r\nimport { styled } from '@mui/material/styles';\r\nimport { FiEdit, FiTrash2 } from 'react-icons/fi'\r\nimport { tableCellClasses } from '@mui/material/TableCell';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport axios from 'axios';\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n    },\r\n}));\r\n\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n    '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n    },\r\n    // hide last border\r\n    '&:last-child td, &:last-child th': {\r\n        border: 0,\r\n    },\r\n}));\r\n\r\n\r\n\r\nfunction ProfileCoupon(props) {\r\n    const statusDarkmode = useSelector(state => state.statusDarkmode)\r\n    const dispatch = useDispatch()\r\n    const listCoupon = useSelector(state => state.listCoupon)\r\n    const openModalAddCoupon = () => {\r\n        dispatch({\r\n            type: \"CHANGE_ADD_COUPON_STATUS\"\r\n        })\r\n    }\r\n\r\n    const convertTime = (time) => {\r\n        let date = new Date(time)\r\n        return date.getDate() + \" / \" + (date.getMonth() + 1) + \" / \" + date.getFullYear()\r\n    }\r\n\r\n    const deleteCoupon = (idCoupon) => {\r\n        dispatch({\r\n            type: \"DELETE_COUPON\",\r\n            idCoupon: idCoupon\r\n        })\r\n        dispatch({\r\n            type: \"SHOW_ALERT\",\r\n            message: \"Delete coupon success\",\r\n            typeMessage: \"success\",\r\n        })\r\n    }\r\n    \r\n    const editCoupon = (data) => {\r\n        dispatch({\r\n            type: \"CHANGE_ADD_COUPON_STATUS\"\r\n        })\r\n        dispatch({\r\n            type: \"CHANGE_EDIT_COUPON_STATUS\"\r\n        })\r\n        dispatch({\r\n            type: \"OBJECT_EDIT_COUPON\",\r\n            objectEditCoupon: data\r\n        })\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        console.log(listCoupon)\r\n    }, [listCoupon])\r\n\r\n\r\n    return (\r\n        <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px' }}>\r\n            <Card style={{ position: \"relative\", marginTop: '15px' }}>\r\n                <CardHeader style={{ color: !statusDarkmode ? '#0091ea' : 'white', backgroundColor: !statusDarkmode ? '#efeeef' : '#455a64' }} title=\"Coupon\" />\r\n                <Divider />\r\n                <CardContent>\r\n                    <TableContainer id=\"choses-product\" component={Paper}>\r\n                        <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\r\n                            <TableHead>\r\n                                <TableRow>\r\n                                    <StyledTableCell>Coupon name</StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">Quantity</StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">Discount</StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">Min Total</StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">From</StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">To</StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">Edit</StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">Delete</StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            {listCoupon.map(item => {\r\n                                return (\r\n                                    <TableBody>\r\n                                        <StyledTableRow key=\"abc\">\r\n                                            <StyledTableCell component=\"th\" scope=\"row\">{item.name}</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">{item.quantity}</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">{item.percent}</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">{item.minTotal.toLocaleString()}</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">{convertTime(item.timeFrom)}</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">{convertTime(item.timeEnd)}</StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">\r\n                                                <IconButton onClick={() => editCoupon(item)} name={item.idCoupon} color=\"secondary\" aria-label=\"fingerprint\">\r\n                                                    <FiEdit />\r\n                                                </IconButton>\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell  align=\"center\">\r\n                                                <IconButton onClick={() => deleteCoupon(item.idCoupon)} name={item.idCoupon} style={{ color: 'red' }} aria-label=\"fingerprint\">\r\n                                                    <FiTrash2 />\r\n                                                </IconButton>\r\n                                            </StyledTableCell>\r\n                                        </StyledTableRow>\r\n                                    </TableBody>\r\n                                )\r\n                            })}\r\n                        </Table>\r\n                    </TableContainer>\r\n                </CardContent>\r\n                <Divider />\r\n                <Box className=\"add-shift\" sx={{ display: 'flex', justifyContent: 'flex-end', p: 2 }}>\r\n                    <Button onClick={() => openModalAddCoupon()} style={{ backgroundColor: 'yellowgreen' }} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                        add\r\n                    </Button>\r\n                </Box>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileCoupon;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ModalAdd.js",["1217","1218","1219","1220"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport TimePicker from '@mui/lab/TimePicker';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nclass ModalAdd extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        if (this.props.editShiftStatus) {\r\n            var _timeFrom = new Date();\r\n            if (this.props.objectEditShift.from.includes(\"PM\")) {\r\n                var fromHour =  parseInt(this.props.objectEditShift.from.slice(0, this.props.objectEditShift.from.indexOf(':')));\r\n                var fromMin = parseInt(this.props.objectEditShift.from.slice(this.props.objectEditShift.from.indexOf(':') + 1));\r\n                _timeFrom.setHours(fromHour + 12, fromMin);\r\n            } else {\r\n                var fromHour =  parseInt(this.props.objectEditShift.from.slice(0, this.props.objectEditShift.from.indexOf(':')));\r\n                var fromMin = parseInt(this.props.objectEditShift.from.slice(this.props.objectEditShift.from.indexOf(':') + 1));\r\n                _timeFrom.setHours(fromHour , fromMin);\r\n            }\r\n           \r\n            var _timeTo = new Date();\r\n            if (this.props.objectEditShift.to.includes(\"PM\")) {\r\n                var toHour = parseInt(this.props.objectEditShift.to.slice(0, this.props.objectEditShift.to.indexOf(':')));\r\n                var toMin = parseInt(this.props.objectEditShift.to.slice(this.props.objectEditShift.to.indexOf(':') + 1));\r\n                _timeTo.setHours(toHour + 12, toMin);\r\n            } else {\r\n                var toHour = parseInt(this.props.objectEditShift.to.slice(0, this.props.objectEditShift.to.indexOf(':')));\r\n                var toMin = parseInt(this.props.objectEditShift.to.slice(this.props.objectEditShift.to.indexOf(':') + 1));\r\n                _timeTo.setHours(toHour, toMin);\r\n            }\r\n            \r\n        }\r\n\r\n        this.state = {\r\n            timeFrom: this.props.editShiftStatus ? _timeFrom : new Date(2018, 5, 35, 0, 0, 0),\r\n            timeTo: this.props.editShiftStatus ? _timeTo : new Date(2018, 5, 35, 0, 0, 0),\r\n            isSalary: false,\r\n            isDescription: false,\r\n            isTimeTo: false,\r\n            valueTime: this.props.editShiftStatus ? 1 : null,\r\n        }\r\n    }\r\n\r\n    descriptionShift = this.props.editShiftStatus ? this.props.objectEditShift.description : \"Ex : abc\"\r\n    timeFrom = this.props.editShiftStatus ? this.props.objectEditShift.from : \"00:00 AM\"\r\n    timeTo = this.props.editShiftStatus ? this.props.objectEditShift.to : \"00:00 AM\"\r\n    salary = this.props.editShiftStatus ? this.props.objectEditShift.salary : 10000\r\n\r\n    // Handle user\r\n    hanhleCancel = (e) => {\r\n        this.props.changeAddStatus();\r\n        if (this.props.editShiftStatus) {\r\n            this.props.changeEditShiftStatus();\r\n        }\r\n    }\r\n\r\n    changeTimeFrom = (e) => {\r\n        var hourse = e.getHours()\r\n        const minutes = e.getMinutes()\r\n        if (hourse >= 12) {\r\n            hourse = hourse - 12;\r\n            this.timeFrom = hourse.toString() + \":\" + minutes.toString() + \" PM\"\r\n        } else {\r\n            this.timeFrom = hourse.toString() + \":\" + minutes.toString() + \" AM\"\r\n        }\r\n        this.setState({\r\n            timeFrom: e,\r\n        })\r\n    }\r\n\r\n    changeTimeTo = (e) => {\r\n        var hourse = e.getHours()\r\n        const minutes = e.getMinutes()\r\n        if (hourse >= 12) {\r\n            hourse = hourse - 12;\r\n            this.timeTo = hourse.toString() + \":\" + minutes.toString() + \" PM\"\r\n        } else {\r\n            this.timeTo = hourse.toString() + \":\" + minutes.toString() + \" AM\"\r\n        }\r\n        this.setState({\r\n            timeTo: e,\r\n        })\r\n    }\r\n\r\n    blurDiscription = (e) => {\r\n        this.descriptionShift = e.target.value;\r\n        if (e.target.value === \"\") {\r\n            this.setState({\r\n                isDescription: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isDescription: false,\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    // Tạo code để xác nhận\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    editShift = async () => {\r\n        if (this.state.timeTo - this.state.timeFrom < 1) {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('The time end must be greater than the time start', 'error')\r\n        }\r\n        if (!this.state.isSalary && !this.state.isDescription && (this.state.timeTo - this.state.timeFrom > 0)) {\r\n            var data = {\r\n                token: localStorage.getItem('token'),\r\n                idUser: this.props.infoUser.email,\r\n                id: this.props.objectEditShift.id,\r\n                salary: this.salary,\r\n                description: this.descriptionShift,\r\n                from: this.timeFrom,\r\n                to: this.timeTo,\r\n            }\r\n            await axios.post(`http://localhost:5000/api/profile/update-shift`, data)\r\n                .then(res => {\r\n                    if (res.data.token) {\r\n                        localStorage.setItem('token', res.data.token);\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(\"Edit shift success\", \"success\");\r\n                        this.props.updateShift(data);\r\n                    }\r\n                    this.props.changeEditShiftStatus();\r\n                    this.props.changeAddStatus();\r\n                })\r\n                .catch(err => {\r\n                    this.props.changeLoginStatus();\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n    blurSalary = (e) => {\r\n        if (e.target.value <= -1) {\r\n            this.setState({\r\n                isSalary: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isSalary: false,\r\n            })\r\n        }\r\n        this.salary = e.target.value;\r\n    }\r\n\r\n    // Call API\r\n    addShift = () => {\r\n        if (this.state.timeTo - this.state.timeFrom < 1) {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('The time end must be greater than the time start', 'error')\r\n        }\r\n        if (!this.state.isSalary && !this.state.isDescription && (this.state.timeTo - this.state.timeFrom > 0)) {\r\n            const code = this.makeCode(6);\r\n            const data = {\r\n                idUser: this.props.infoUser.email,\r\n                id: code,\r\n                salary: this.salary,\r\n                description: this.descriptionShift,\r\n                from: this.timeFrom,\r\n                to: this.timeTo,\r\n            }\r\n            const data1 = {\r\n                name: this.descriptionShift,\r\n                salary: this.salary,\r\n                timeFrom: this.timeFrom,\r\n                timeEnd: this.timeTo,\r\n                _id: { shiftID: code }\r\n            }\r\n            if (data) {\r\n                axios.post(`http://localhost:5000/api/profile/add-shift`, {\r\n                    email: this.props.infoUser.email,\r\n                    token: localStorage.getItem('token'),\r\n                    data: data,\r\n                })\r\n                    .then(res => {\r\n                        if (res.data.token) {\r\n                            this.props.addShift(data1);\r\n                            localStorage.setItem('token', res.data.token);\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(\"Add shift success\", \"success\");\r\n                        }\r\n                        this.props.changeAddStatus();\r\n                    })\r\n                    .catch(err => {\r\n                        this.props.changeLoginStatus();\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"modal-add-shift\" style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Create shift\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={12} xs={12}>\r\n                                <TextField\r\n                                    id=\"outlined-basic\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    defaultValue={(this.props.editShiftStatus ? this.props.objectEditShift.description : this.descriptionShift)}\r\n                                    onBlur={(e) => this.blurDiscription(e)}\r\n                                    label=\"Shift description\"\r\n                                    error={this.state.isDescription}\r\n                                    helperText={this.state.isDescription ? \"Enter something\" : \"\"}\r\n                                    required\r\n                                    type=\"text\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    onBlur={(e) => this.blurSalary(e)}\r\n                                    label=\"Salary\"\r\n                                    defaultValue={this.props.editShiftStatus ? this.props.objectEditShift.salary : this.salary}\r\n                                    error={this.state.isSalary}\r\n                                    helperText={this.state.isSalary ? \"Greater than 0\" : \"\"}\r\n                                    type=\"number\"\r\n                                    id=\"outlined-error-helper-text\"\r\n                                    name=\"salary\"\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                    <Stack spacing={3}>\r\n                                        <TimePicker\r\n                                            label=\"From\"\r\n                                            value={this.state.timeFrom}\r\n                                            onChange={(newValue) => this.changeTimeFrom(newValue)}\r\n                                            renderInput={(params) => <TextField {...params} />}\r\n                                        />\r\n                                        <TimePicker\r\n                                            label=\"To\"\r\n                                            value={this.state.timeTo}\r\n                                            onChange={(newValue) => this.changeTimeTo(newValue)}\r\n                                            renderInput={(params) => <TextField {...params} />}\r\n                                        />\r\n                                    </Stack>\r\n                                </LocalizationProvider>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        {this.props.editShiftStatus ? (\r\n                            <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.editShift()} variant=\"contained\" startIcon={<BiEdit />}>\r\n                                Save\r\n                            </Button>) : (\r\n                            <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.addShift()} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                                Add\r\n                            </Button>\r\n                        )}\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.hanhleCancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Cancel\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addStatus: state.addStatus,\r\n        infoUser: state.infoUser,\r\n        editShiftStatus: state.editShiftStatus,\r\n        objectEditShift: state.objectEditShift,\r\n        statusDarkmode: state.statusDarkmode\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_STATUS\",\r\n            });\r\n        },\r\n        addShift: (data) => {\r\n            dispatch({\r\n                type: \"ADD_SHIFT\",\r\n                newShift: data,\r\n            })\r\n        },\r\n        changeEditShiftStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_SHIFT_STATUS\",\r\n            })\r\n        },\r\n        updateShift: (data) => {\r\n            dispatch({\r\n                type: \"OBJECT_UPDATE_SHIFT\",\r\n                data: data,\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalAdd);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileSetting.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ListShift.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodTable.js",["1221","1222","1223","1224","1225","1226","1227"],"import * as React from 'react';\r\nimport { Component } from 'react';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport GoodRow from './TableRow';\r\n\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    } \r\n})\r\n\r\n\r\nvar listProductInfor = [];\r\nvar joinTypeInfor = [];\r\nvar listTypeInfor = [];\r\n\r\nclass GoodTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            update: false\r\n        }\r\n        console.log(\"this.props.listProduct.state\", this.props.listProduct.state);\r\n    }\r\n    removeProduct= (row) => {\r\n        // Đây là xử lý ở phía dữ liệu, có thể await gì đó.\r\n        // Xử lý ở phía giao diện(tạm)\r\n\r\n        // Đây là câu lệnh để update nhẹ\r\n        this.setState({update: this.state.update})\r\n    }\r\n\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName=\"Null\";\r\n        for(var i = 0; i < this.props.typeProduct.length;i++)\r\n        {   \r\n            if(this.props.typeProduct[i]._id.typeID == typeID)\r\n            {\r\n                typeName = this.props.typeProduct[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div style={{height: '550px', width: '100%', overflowY: 'scroll'}}>\r\n                <TableContainer component={Paper}>\r\n                    <Table className={classes.goodTable} aria-label=\"collapsible table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ID</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">GoodName</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Quantity</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Sell Price</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ImportTime</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell}/>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                this.props.listProduct.state == undefined ? (null):\r\n                                this.props.listProduct.state.map((product) => (\r\n                                    product==undefined ? null :\r\n                                    <GoodRow data={product} />\r\n                                ))\r\n                            }   \r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        listProduct: state.listProduct,\r\n        typeProduct: state.typeProduct,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(GoodTable));\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ChangePassword.js",["1228","1229","1230"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, Button, CardContent } from '@mui/material';\r\nimport axios from 'axios';\r\nimport {connect} from 'react-redux'\r\nimport { FaCommentsDollar } from 'react-icons/fa';\r\nvar bcrypt = require('bcryptjs');\r\n\r\nclass ChangePassword extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isCurPass: false,\r\n            isNewPass: false,\r\n            isRePass: false,\r\n            isChangePass: false,\r\n        }\r\n    }\r\n\r\n    messCurPass = \"\"\r\n    messNewPass = \"\"\r\n    messRePass = \"\"\r\n    curPass = \"\"\r\n    newPass = \"\"\r\n    rePass = \"\"\r\n\r\n    // Gọi api change password\r\n    changePassword = async () => {\r\n        if(this.props.role == false){ \r\n            if(this.curPass != this.props.infoUser.password)\r\n            {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Not a correct pass\", \"error\");\r\n                return;\r\n            }\r\n            const data = {\r\n                token: localStorage.getItem('token'),\r\n                employee: {\r\n                    _id: {\r\n                        employeeID: this.props.infoUser.employeeID,\r\n                        storeID: this.props.infoUser.managerID,\r\n                    },\r\n                    managerID: this.props.infoUser.managerID,\r\n                    password: this.newPass,\r\n                    firstName: this.props.infoUser.firstName,\r\n                    lastName: this.props.infoUser.lastName,\r\n                    phoneNumber: this.props.infoUser.tel,\r\n                    email: this.props.infoUser.email,\r\n                    address: this.props.infoUser.address,\r\n                    cardID: this.props.infoUser.cardID,\r\n                }   \r\n            }\r\n            axios.put(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Change password success\", \"success\");\r\n                this.props.setEmployeePass(this.newPass);\r\n            })\r\n            .catch(err => {\r\n            })\r\n        }\r\n        else {\r\n            const form = document.getElementById('form-change-password');\r\n            const data = {\r\n                token: localStorage.getItem('token'),\r\n                email: this.props.infoUser.email,\r\n                curPass: this.curPass,\r\n                newPass: this.hash(this.newPass),\r\n            }\r\n            await axios.post(`http://localhost:5000/api/profile/change-password`,data)\r\n            .then(res => {\r\n                if (res.data.status === -1) {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(res.data.message, \"error\");\r\n                } else {\r\n                    form.reset();\r\n                    localStorage.setItem('token', res.data.token);\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Change password success\", \"success\");\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.props.changeLoginStatus();\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    // hash\r\n    hash = (pass) => {\r\n        var hash = bcrypt.hashSync(pass, 12)\r\n        return hash;\r\n    }\r\n\r\n    // Handele : blur, change\r\n    blurCurPassword = (e) => {\r\n        this.curPass= e.target.value;\r\n        if (e.target.value === \"\") {\r\n            this.setState({\r\n                isCurPass: false,\r\n                isChangePass: false,\r\n            })\r\n            return;\r\n        } else if (e.target.value.length < 6) {\r\n            this.messCurPass = \"Enter at least 6 characters\";\r\n            this.setState({\r\n                isCurPass: true,\r\n                isChangePass: false,\r\n            })\r\n        } else {\r\n            this.messCurPass = \"\";\r\n            this.setState({\r\n                isCurPass: false,\r\n            })\r\n            if(this.newPass.length>5 && this.newPass === this.rePass){\r\n                this.setState({\r\n                    isChangePass: true,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    blurNewPassword = (e) => {\r\n        this.blurRePassword(e);\r\n        this.newPass = e.target.value;\r\n        if (e.target.value === \"\") {\r\n            this.setState({\r\n                isNewPass: false,\r\n                isChangePass: false,\r\n            })\r\n            return;\r\n        } else if (e.target.value.length < 6) {\r\n            this.messNewPass = \"Enter at least 6 characters\";\r\n            this.setState({\r\n                isNewPass: true,\r\n            })\r\n        } else {\r\n            this.messCurPass = \"\";\r\n            this.setState({\r\n                isNewPass: false,\r\n            })\r\n            this.blurRePassword(e);\r\n            if (this.rePass === this.newPass && this.curPass.length > 5){\r\n                this.setState({\r\n                    isChangePass: true,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    blurRePassword = (e) => {\r\n        this.rePass = document.querySelector('input[name=\"re-password\"]').value\r\n        if (this.rePass !== this.newPass) {\r\n            this.messRePass = \"Re-password not correct\";\r\n            this.setState({\r\n                isRePass: true,\r\n                isChangePass: false,\r\n            })\r\n        } else {\r\n            this.messRePass = \"\";\r\n            this.setState({\r\n                isRePass: false,\r\n            })\r\n            if (this.rePass === this.newPass && this.curPass.length > 5){\r\n                this.setState({\r\n                    isChangePass: true,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form id=\"form-change-password\" style={{marginBottom: '15px', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Change Password\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={12} xs={12}>\r\n                                <TextField\r\n                                    variant=\"standard\"\r\n                                    fullWidth\r\n                                    name=\"cur-password\"\r\n                                    label=\"Current password\"\r\n                                    onBlur={(e) => this.blurCurPassword(e)}\r\n                                    error={this.state.isCurPass}\r\n                                    helperText={this.messCurPass}\r\n                                    type=\"password\"\r\n                                    required\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"New password\"\r\n                                    name=\"new-password\"\r\n                                    required\r\n                                    onBlur={(e) => this.blurNewPassword(e)}\r\n                                    error={this.state.isNewPass}\r\n                                    helperText={this.messNewPass}\r\n                                    type=\"password\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"New password again\"\r\n                                    onBlur={(e) => this.blurRePassword(e)}\r\n                                    error={this.state.isRePass}\r\n                                    helperText={this.messRePass}\r\n                                    name=\"re-password\"\r\n                                    required\r\n                                    type=\"password\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', p: 2 }}>\r\n                        <Button color=\"primary\" disabled={!this.state.isChangePass} onClick={() => this.changePassword()} variant=\"contained\">Change</Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        infoUser: state.infoUser,\r\n        statusDarkmode: state.statusDarkmode,\r\n        role: state.role,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        setEmployeePass: (password) => {\r\n            dispatch({\r\n                type: \"SET_EMPLOYEE_PASS\",\r\n                password: password\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangePassword);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileDetail.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileHeader.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Regulation.js",["1231","1232","1233","1234","1235"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, Button, CardContent } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport Stack from '@mui/material/Stack';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport TimePicker from '@mui/lab/TimePicker';\r\nimport axios from 'axios'\r\n\r\nclass Regulation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            timeStart: new Date(2018, 5, 35, 7, 0, 0),\r\n            timeEnd: new Date(2018, 5, 35, 18, 0, 0),\r\n            numberEmployees: 10,\r\n            isNumberEmployees: false,\r\n            isSaveRegulations: false,\r\n        }\r\n    }\r\n\r\n    changeTimeStart = (newValue) => {\r\n        this.setState({\r\n            timeStart: newValue,\r\n            isSaveRegulations: true,\r\n        })\r\n    }\r\n\r\n    changeTimeEnd = (newValue) => {\r\n        this.setState({\r\n            isSaveRegulations: true,\r\n            timeEnd: newValue,\r\n        })\r\n    }\r\n\r\n    blurNumberEmployees = (e) => {\r\n        if (e.target.value < 0) {\r\n            this.setState({\r\n                isNumberEmployees: true,\r\n                numberEmployees: e.target.value,\r\n                isSaveRegulations: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isNumberEmployees: false,\r\n                numberEmployees: e.target.value,\r\n                isSaveRegulations: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    SaveRegulations = async () => {\r\n        // const data = {\r\n        //     email: this.props.infoUser.email,\r\n        //     token: localStorage.getItem('token'),\r\n        //     regulation : {\r\n        //         currency: document.querySelector('select[name=\"currency\"]').value,\r\n        //         exchangeRate: document.querySelector('select[name=\"exchangeRate\"]').value,\r\n        //         miniumEmployeeAge: document.querySelector('select[name=\"miniumEmployeeAge\"]').value, \r\n        //         lessChangeTimeKeepingDay: document.querySelector('select[name=\"lessChangeTimeKeepingDay\"]').value,\r\n        //         minExpiredProduct: document.querySelector('select[name=\"exchangeRate\"]').value,\r\n        //     },\r\n        // }\r\n        //     numberEmployees: this.state.numberEmployees,\r\n        //     timeStart: {\r\n        //         hours: this.state.timeStart.getHours(),\r\n        //         minutes: this.state.timeStart.getMinutes(),\r\n        //     },\r\n        //     timeEnd: {\r\n        //         hours: this.state.timeEnd.getHours(),\r\n        //         minutes: this.state.timeEnd.getMinutes(),\r\n        //     },\r\n        // }\r\n        // if (!this.state.isNumberEmployees && this.state.isSaveRegulations) {\r\n        //       console.log(\"save\");  \r\n        //       console.log(data);\r\n        //     await axios.post(`http://localhost:5000/api/profile/regulation`, data)\r\n        //     .then(res => {\r\n        //         this.props.hideAlert();\r\n        //         this.props.showAlert(\"Login timeout, signin again\", \"success\");\r\n        //     })\r\n        //     .catch(err => {\r\n        //         this.props.hideAlert();\r\n        //         this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n        //     });\r\n        // }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Regulation\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item md={6} xs={12}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Currency\"\r\n                                    name=\"currency\"\r\n                                    onBlur={(e) => this.blurNumberEmployees(e)}\r\n                                    required\r\n                                    defaultValue=\"vnd\"\r\n                                    variant=\"outlined\"\r\n                                    select\r\n                                    SelectProps={{ native: true }}\r\n                                >\r\n                                    <option value=\"vnd\">\r\n                                        VNĐ\r\n                                    </option>\r\n                                    <option value=\"dollar\">\r\n                                        $\r\n                                    </option>\r\n                                </TextField>\r\n                            </Grid>\r\n                            <Grid item md={6} xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    label=\"Number of employees\"\r\n                                    defaultValue='10'\r\n                                    name=\"numberEmployees\"\r\n                                    variant=\"outlined\"\r\n                                    error={this.state.isNumberEmployees}\r\n                                    helperText={this.state.isNumberEmployees? \"Enter more 0\" : ''}\r\n                                    type=\"number\"\r\n                                    onBlur={(e) => this.blurNumberEmployees(e)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={6} xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    label=\"Exchange rate\"\r\n                                    defaultValue='20000'\r\n                                    name=\"exchangeRate\"\r\n                                    variant=\"outlined\"\r\n                                    // error={this.state.isNumberEmployees}\r\n                                    // helperText={this.state.isNumberEmployees? \"Enter more 0\" : ''}\r\n                                    type=\"number\"\r\n                                    // onBlur={(e) => this.blurNumberEmployees(e)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={6} xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    label=\"Less change timekeeping days\"\r\n                                    defaultValue='2'\r\n                                    name=\"exchangeRate\"\r\n                                    variant=\"outlined\"\r\n                                    // error={this.state.isNumberEmployees}\r\n                                    // helperText={this.state.isNumberEmployees? \"Enter more 0\" : ''}\r\n                                    type=\"number\"\r\n                                    // onBlur={(e) => this.blurNumberEmployees(e)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={6} xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    label=\"Employee Minium Age\"\r\n                                    defaultValue='2'\r\n                                    name=\"exchangeRate\"\r\n                                    variant=\"outlined\"\r\n                                    // error={this.state.isNumberEmployees}\r\n                                    // helperText={this.state.isNumberEmployees? \"Enter more 0\" : ''}\r\n                                    type=\"number\"\r\n                                    // onBlur={(e) => this.blurNumberEmployees(e)}\r\n                                />\r\n                            </Grid>\r\n                            {/* <Grid item md={6} xs={12}>\r\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                    <Stack spacing={3}>\r\n                                        <TimePicker\r\n                                            label=\"Start\"\r\n                                            value={this.state.timeStart}\r\n                                            className=\"timeFrom\"\r\n                                            onChange={(newValue) => this.changeTimeStart(newValue)}\r\n                                            renderInput={(params) => <TextField {...params} />}\r\n                                        />\r\n                                    </Stack>\r\n                                </LocalizationProvider>\r\n                            </Grid>\r\n                            <Grid item md={6} xs={12}>\r\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                    <Stack spacing={3}>\r\n                                        <TimePicker\r\n                                            label=\"End\"\r\n                                            value={this.state.timeEnd}\r\n                                            onChange={(newValue) => this.changeTimeEnd(newValue)}\r\n                                            renderInput={(params) => <TextField onChange={(e) => this.changeTime(e)} {...params} />}\r\n                                        />\r\n                                    </Stack>\r\n                                </LocalizationProvider>\r\n                            </Grid> */}\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', p: 2 }}>\r\n                        <Button onClick={() => this.SaveRegulations()} disabled={!this.state.isSaveRegulations} color=\"primary\" variant=\"contained\">Save</Button>\r\n                    </Box>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        infoUser: state.infoUser,\r\n        statusDarkmode: state.statusDarkmode\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Regulation);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\OptionMonth.js",["1236"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport Grow from '@mui/material/Grow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Popper from '@mui/material/Popper';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuList from '@mui/material/MenuList';\r\nimport { BiCaretDown } from 'react-icons/bi'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst options = [\r\n    {\r\n        month: 'All',\r\n        value: 0,\r\n    },\r\n    {\r\n        month: 'Jan',\r\n        value: 1,\r\n    },\r\n    {\r\n        month: 'Feb',\r\n        value: 2,\r\n    },\r\n    {\r\n        month: 'Mar',\r\n        value: 3,\r\n    },\r\n    {\r\n        month: 'Apr',\r\n        value: 4,\r\n    },\r\n    {\r\n        month: 'May',\r\n        value: 5,\r\n    },\r\n    {\r\n        month: 'Jun',\r\n        value: 6,\r\n    },\r\n    {\r\n        month: 'Jul',\r\n        value: 7,\r\n    },\r\n    {\r\n        month: 'Aug',\r\n        value: 8,\r\n    },\r\n    {\r\n        month: 'Sep',\r\n        value: 9,\r\n    },\r\n    {\r\n        month: 'Oct',\r\n        value: 10,\r\n    },\r\n    {\r\n        month: 'Nov',\r\n        value: 11,\r\n    },\r\n    {\r\n        month: 'Dec',\r\n        value: 12,\r\n    }\r\n];\r\n\r\n\r\n\r\nexport default function OptionMonth() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef(null);\r\n    const dispatch = useDispatch()\r\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n\r\n    const handleClick = () => {\r\n        console.info(`You clicked ${options[selectedIndex]}`);\r\n    };\r\n\r\n    const handleMenuItemClick = (event, index, option) => {\r\n        dispatch({\r\n            type: \"MONTH_SELECT_DASHBOARD\",\r\n            typeDashboard: option,\r\n          })\r\n        setSelectedIndex(index);\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        dispatch({\r\n            type: \"RESET_MONTH_SELECT_DASHBOARD\"\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ButtonGroup variant=\"contained\" ref={anchorRef} aria-label=\"split button\">\r\n                <Button onClick={handleClick}>{options[selectedIndex].month}</Button>\r\n                <Button\r\n                    size=\"small\"\r\n                    aria-controls={open ? 'split-button-menu' : undefined}\r\n                    aria-expanded={open ? 'true' : undefined}\r\n                    aria-label=\"select merge strategy\"\r\n                    aria-haspopup=\"menu\"\r\n                    onClick={handleToggle}\r\n                >\r\n                    <BiCaretDown />\r\n                </Button>\r\n            </ButtonGroup>\r\n            <Popper\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n            >\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin:\r\n                                placement === 'bottom' ? 'center top' : 'center bottom',\r\n                        }}\r\n                    >\r\n                        <Paper>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList id=\"split-button-menu\">\r\n                                    {options.map((item, index) => (\r\n                                        <MenuItem\r\n                                            key={item.value}\r\n                                            selected={index === selectedIndex}\r\n                                            onClick={(event) => handleMenuItemClick(event, index, item.value)}\r\n                                        >\r\n                                            {item.month}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\OptionYear.js",["1237"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport Grow from '@mui/material/Grow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Popper from '@mui/material/Popper';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuList from '@mui/material/MenuList';\r\nimport {BiCaretDown} from 'react-icons/bi'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nlet options = [];\r\nlet date = new Date()\r\nfor(let i = date.getFullYear();i >= 2000; i--) {\r\n    options.push(i);\r\n}\r\n\r\nexport default function OptionYear() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = React.useRef(null);\r\n  const dispatch = useDispatch()\r\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n\r\n  const handleClick = () => {\r\n    console.info(`You clicked ${options[selectedIndex]}`);\r\n  };\r\n\r\n  const handleMenuItemClick = (event, index, option) => {\r\n    console.log(option)\r\n    dispatch({\r\n      type: \"YEAR_SELECT_DASHBOARD\",\r\n      typeDashboard: option,\r\n    })\r\n    setSelectedIndex(index);\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    dispatch({\r\n      type: \"RESET_MONTH_SELECT_DASHBOARD\"\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ButtonGroup variant=\"contained\" ref={anchorRef} aria-label=\"split button\">\r\n        <Button onClick={handleClick}>{options[selectedIndex]}</Button>\r\n        <Button\r\n          size=\"small\"\r\n          aria-controls={open ? 'split-button-menu' : undefined}\r\n          aria-expanded={open ? 'true' : undefined}\r\n          aria-label=\"select merge strategy\"\r\n          aria-haspopup=\"menu\"\r\n          onClick={handleToggle}\r\n        >\r\n          <BiCaretDown />\r\n        </Button>\r\n      </ButtonGroup>\r\n      <Popper\r\n        id=\"choses-product\"\r\n        open={open}\r\n        style={{height: '500px', overflowY:'scroll'}}\r\n        anchorEl={anchorRef.current}\r\n        role={undefined}\r\n        transition\r\n        disablePortal\r\n      >\r\n        {({ TransitionProps, placement }) => (\r\n          <Grow\r\n            {...TransitionProps}\r\n            style={{\r\n              transformOrigin:\r\n                placement === 'bottom' ? 'center top' : 'center bottom',\r\n            }}\r\n          >\r\n            <Paper>\r\n              <ClickAwayListener onClickAway={handleClose}>\r\n                <MenuList id=\"split-button-menu\">\r\n                  {options.map((option, index) => (\r\n                    <MenuItem\r\n                      key={option}\r\n                      selected={index === selectedIndex}\r\n                      onClick={(event) => handleMenuItemClick(event, index, option)}\r\n                    >\r\n                      {option}\r\n                    </MenuItem>\r\n                  ))}\r\n                </MenuList>\r\n              </ClickAwayListener>\r\n            </Paper>\r\n          </Grow>\r\n        )}\r\n      </Popper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\BaseOptionChart.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButton.js",["1238"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport Grow from '@mui/material/Grow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Popper from '@mui/material/Popper';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuList from '@mui/material/MenuList';\r\nimport {BiCaretDown} from 'react-icons/bi'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst options = ['Month', 'Week' , 'Last Week'];\r\n\r\nexport default function SplitButton() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = React.useRef(null);\r\n  const dispatch = useDispatch()\r\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n\r\n  const handleClick = () => {\r\n    console.info(`You clicked ${options[selectedIndex]}`);\r\n  };\r\n\r\n  const handleMenuItemClick = (event, index, option) => {\r\n    console.log(option)\r\n    dispatch({\r\n      type: \"TYPE_TIME_DASHBOARD\",\r\n      typeDashboard: option,\r\n    })\r\n    setSelectedIndex(index);\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    dispatch({\r\n      type: \"RESET_TYPE_TIME_DASHBOARD\"\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ButtonGroup variant=\"contained\" ref={anchorRef} aria-label=\"split button\">\r\n        <Button onClick={handleClick}>{options[selectedIndex]}</Button>\r\n        <Button\r\n          size=\"small\"\r\n          aria-controls={open ? 'split-button-menu' : undefined}\r\n          aria-expanded={open ? 'true' : undefined}\r\n          aria-label=\"select merge strategy\"\r\n          aria-haspopup=\"menu\"\r\n          onClick={handleToggle}\r\n        >\r\n          <BiCaretDown />\r\n        </Button>\r\n      </ButtonGroup>\r\n      <Popper\r\n        open={open}\r\n        anchorEl={anchorRef.current}\r\n        role={undefined}\r\n        transition\r\n        disablePortal\r\n      >\r\n        {({ TransitionProps, placement }) => (\r\n          <Grow\r\n            {...TransitionProps}\r\n            style={{\r\n              transformOrigin:\r\n                placement === 'bottom' ? 'center top' : 'center bottom',\r\n            }}\r\n          >\r\n            <Paper>\r\n              <ClickAwayListener onClickAway={handleClose}>\r\n                <MenuList id=\"split-button-menu\">\r\n                  {options.map((option, index) => (\r\n                    <MenuItem\r\n                      key={option}\r\n                      selected={index === selectedIndex}\r\n                      onClick={(event) => handleMenuItemClick(event, index, option)}\r\n                    >\r\n                      {option}\r\n                    </MenuItem>\r\n                  ))}\r\n                </MenuList>\r\n              </ClickAwayListener>\r\n            </Paper>\r\n          </Grow>\r\n        )}\r\n      </Popper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\FixedCalendarCell.js",["1239","1240","1241","1242","1243","1244","1245","1246","1247"],"import {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { withStyles } from '@material-ui/styles';\r\n// material\r\nimport { TableCell, List, ListItem, ListItemButton, ListItemText} from '@mui/material';\r\nimport '../../css/EmployeeManager.css';\r\n\r\n//icon\r\nimport { IoIosAdd,} from \"react-icons/io\";\r\nimport {  AiFillCloseCircle} from \"react-icons/ai\";\r\n// ----------------------------------------------------------------------\r\nconst styles = theme =>  ({\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '80px',\r\n    } \r\n})\r\n\r\nclass FixedCalendarCell extends Component {\r\n  isOpen=false;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: false\r\n    }\r\n    \r\n  }\r\n\r\n \r\n\r\n  handleChange() {\r\n    this.isOpen = !this.isOpen;\r\n    this.setState({change : !this.state.change})\r\n  }\r\n\r\n  getEmployeeNameByID(employeeID)\r\n  {\r\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n      {\r\n          var currentEmployee = this.props.listEmployee.employees[i];\r\n          if(currentEmployee._id.employeeID==employeeID)\r\n          {\r\n            return currentEmployee.firstName;\r\n          }\r\n      }\r\n      return \"Can't get name\";\r\n  }\r\n\r\n  findEmployeeNameByID(employeeID)\r\n  {\r\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n      {\r\n          var currentEmployee = this.props.listEmployee.employees[i];\r\n          if(currentEmployee._id.employeeID==employeeID)\r\n          {\r\n            return true;\r\n          }\r\n      }\r\n      return false;\r\n  }\r\n\r\n  getCurrentDateTime()\r\n  {\r\n      var currentDate = new Date();\r\n      var day = (currentDate.toString().split(' '))[2];\r\n      if(day.length < 2)\r\n      {\r\n          day = '0' + day;\r\n      }\r\n      var month = (new Date().getMonth() + 1).toString();\r\n      if(month.length<2)\r\n      {\r\n          month = '0' + month;\r\n      }\r\n      return new Date().getFullYear() + '-' + month + '-' + day;\r\n  }\r\n\r\n  async addThisShiftAssign(employeeID)\r\n  {\r\n      const data = {\r\n          token: localStorage.getItem('token'),\r\n          shiftAssign: {\r\n            _id: {\r\n              dateInWeek: this.props.dayIndex,\r\n              storeID: this.props.infoUser.email,\r\n              shiftType: {\r\n                  _id: {\r\n                      shiftID: this.props.shiftID,\r\n                      storeID: this.props.infoUser.email,\r\n                  },\r\n              },\r\n              employee: {\r\n                  _id: {\r\n                      employeeID: employeeID,\r\n                      storeID: this.props.infoUser.email,\r\n                  },\r\n              },\r\n            },\r\n          }\r\n          \r\n      }\r\n      await axios.post(`http://localhost:5000/api/employee/shift-assign`, data)\r\n        .then(res => {\r\n            alert(\"Lưu thành công\")\r\n        })\r\n        .catch(err => {\r\n            alert(err);\r\n            console.log(err);\r\n        })\r\n      this.handleChange();\r\n      this.props.AddShiftAssign(data.shiftAssign);\r\n  }\r\n\r\n  removeShift(employeeID)\r\n  {\r\n    const data1 = {\r\n        token: localStorage.getItem('token'),\r\n        shiftAssign: {\r\n          _id: {\r\n            dateInWeek: this.props.dayIndex,\r\n            storeID: this.props.infoUser.email,\r\n            shiftType: {\r\n                _id: {\r\n                    shiftID: this.props.shiftID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n            },\r\n            employee: {\r\n                _id: {\r\n                    employeeID: employeeID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n            },\r\n          }\r\n      },\r\n    }\r\n      axios.delete(`http://localhost:5000/api/employee/shift-assign`,{data: data1})\r\n      .then(res => {\r\n          alert(\"success\");\r\n      })\r\n      .catch(err => {\r\n          alert(err);\r\n      })\r\n      const data = {\r\n          _id: {\r\n            dateInWeek: this.props.dayIndex,\r\n            storeID: this.props.infoUser.email,\r\n            shiftType: {\r\n                _id: {\r\n                    shiftID: this.props.shiftID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n            },\r\n            employee: {\r\n                _id: {\r\n                    employeeID: employeeID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n            },\r\n        },\r\n      }\r\n      \r\n      // console.log(\"data\", data);\r\n      this.props.RemoveShiftAssign(data);\r\n      \r\n  }\r\n\r\n  findShiftInShiftAssign()\r\n  {\r\n      var listShiftAssign = this.props.listShiftAssign;\r\n      for(var i = 0 ; i < listShiftAssign.length ; i++)\r\n      {\r\n          if(this.props.shiftID == listShiftAssign[i]._id.shiftType._id.shiftID && \r\n            this.props.dayIndex == listShiftAssign[i]._id.dateInWeek && \r\n            this.findEmployeeNameByID(listShiftAssign[i]._id.employee._id.employeeID))\r\n            { \r\n                return true;\r\n            }\r\n      }\r\n      return false;\r\n  }\r\n\r\n  findEmployeeInShift(employeeID)\r\n  {\r\n      var listShiftAssign = this.props.listShiftAssign;\r\n      for(var i = 0 ; i < listShiftAssign.length; i++)\r\n      {\r\n          if(this.props.shiftID == listShiftAssign[i]._id.shiftType._id.shiftID \r\n            && this.props.dayIndex == listShiftAssign[i]._id.dateInWeek\r\n            && listShiftAssign[i]._id.employee._id.employeeID == employeeID)\r\n          return true;\r\n      }\r\n      return false;\r\n  }\r\n  \r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n        <TableCell \r\n            className={classes.goodTable_Cell} \r\n            style={{\r\n                position: 'relative',\r\n                backgroundColor: !this.findShiftInShiftAssign() ?'#ff6057': '#b3cde0',\r\n                height: '80px',\r\n            }}\r\n            // ref={this.myRef}    \r\n        >\r\n            <div\r\n                style={{\r\n                    position: 'absolute',\r\n                    right: 0,\r\n                    top: 0,\r\n                    borderRadius: '50%',\r\n                    backgroundColor: '#fff',\r\n                    width: 22,\r\n                    height: 22,\r\n                    textAlign: 'center'\r\n                }}\r\n                className='add-employee-to-shift-button'\r\n            >\r\n                <IoIosAdd \r\n                    size={30}\r\n                    style={{\r\n                        position: 'absolute',\r\n                        right: -4,\r\n                        top: -3,\r\n                    }}\r\n                    color='#0096FF'\r\n                    onClick={() => this.handleChange()}\r\n                >    \r\n                </IoIosAdd>\r\n                \r\n            </div>\r\n            { \r\n              this.props.listShiftAssign.map((item) => \r\n                (\r\n                  ( this.props.shiftID == item._id.shiftType._id.shiftID \r\n                    && this.props.dayIndex == item._id.dateInWeek \r\n                    && this.findEmployeeNameByID(item._id.employee._id.employeeID))\r\n                  ? <div style={{\r\n                            backgroundColor: \"#fff\", \r\n                            padding: 10, \r\n                            maxWidth: 100,\r\n                            position: 'relative',\r\n                            marginBottom: 4\r\n                            }}\r\n                    >\r\n                      <span>\r\n                          {item._id.employee._id.employeeID + ' - ' \r\n                          + this.getEmployeeNameByID(item._id.employee._id.employeeID)}\r\n                      </span>\r\n                      <AiFillCloseCircle\r\n                          style={{\r\n                            color: 'red',\r\n                            position: 'absolute',\r\n                            right: 0, \r\n                            top: 0,\r\n                          }} \r\n                          size={20}\r\n                          onClick={() => this.removeShift(item._id.employee._id.employeeID)}\r\n                      ></AiFillCloseCircle>\r\n                    </div>\r\n                  : null\r\n                )\r\n              )\r\n            }\r\n            {\r\n              this.isOpen \r\n              ? \r\n              // Đây là cái bảng chọn nhân viên\r\n              <List \r\n                style={{\r\n                  position: 'absolute',\r\n                  right: 0,\r\n                  top: 20,\r\n                  zIndex: 10,\r\n                  maxHeight: 100,\r\n                  overflowY: 'auto',\r\n                  width: 140,\r\n                  backgroundColor: '#fff',\r\n                }}\r\n              >\r\n                {\r\n                  this.props.listEmployee.employees.map((item) =>\r\n                    this.findEmployeeInShift(item._id.employeeID) ? null :\r\n                    <ListItem disablePadding height={30} onClick={() => this.addThisShiftAssign(item._id.employeeID)}>\r\n                        <ListItemButton>\r\n                            <ListItemText>\r\n                                {item._id.employeeID + ' - ' + item.firstName}\r\n                            </ListItemText>\r\n                        </ListItemButton>\r\n                    </ListItem>\r\n                  )\r\n                }\r\n              </List>\r\n              : null\r\n            }\r\n\r\n        </TableCell>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n      listEmployee: state.listEmployee,\r\n      listShiftAssign: state.listShiftAssign,\r\n      infoUser: state.infoUser,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    AddShiftAssign: (data) => {\r\n      dispatch({\r\n          type: \"ADD_NEW_SHIFT_ASSIGN\",\r\n          data: data,\r\n      });\r\n    },\r\n    RemoveShiftAssign: (data) => {\r\n      dispatch({\r\n          type: \"DELETE_SHIFT_ASSIGN\",\r\n          data: data,\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(FixedCalendarCell));","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\DarkMode.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\TableRow.js",["1248","1249","1250","1251","1252","1253","1254"],"import * as React from 'react';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Image } from 'cloudinary-react';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport GoodImage from './goodExample.jpg';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { useDispatch } from 'react-redux'\r\nimport axios from 'axios';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst styles = theme =>  ({\r\n    goodTable_Cell:{\r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: 4,\r\n        color: '#333'\r\n    }\r\n});\r\n\r\n\r\n\r\nclass GoodRow extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            update: false,\r\n            change: false,\r\n        }\r\n        \r\n    }\r\n    isOpen = false;\r\n    row = {};\r\n    setOpen(value) {\r\n        this.isOpen = value;\r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    async deleteProduct(row) {\r\n        // Xoá sản phẩm\r\n        console.log(\"row\", row)\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            products:\r\n            [\r\n                {\r\n                    productID: row._id.productID,\r\n                    importDate: row._id.importDate,\r\n                    storeID: row._id.storeID,\r\n                }\r\n            ]\r\n            \r\n        }\r\n        axios.delete(`http://localhost:5000/api/product`,{data: data})\r\n            .then(res => {\r\n                alert(\"delete product success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        \r\n        // Get hết các cái join của sản phẩm\r\n        var allJoinMatch = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": row._id.storeID,\r\n                \"_id.productID\": row._id.productID,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, \r\n        {\r\n            params: {...data1}\r\n        })\r\n            .then(res => {\r\n                allJoinMatch = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        console.log(allJoinMatch);\r\n        // Xoá các join liên quan đến sản phẩm\r\n        var allProductJoin = [];\r\n        for(var i = 0 ; i < allJoinMatch.length; i++)\r\n        {\r\n            allProductJoin.push({\r\n                productID: row._id.productID,\r\n                typeID: allJoinMatch[i]._id.typeID,\r\n                importDate: allJoinMatch[i]._id.importDate,\r\n                storeID: row._id.storeID,\r\n            });\r\n        }\r\n        const dataJoin = {\r\n            token: localStorage.getItem('token'),\r\n            productJoinTypes: allProductJoin,      \r\n        }\r\n\r\n        console.log(dataJoin);\r\n\r\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\r\n            .then(res => {\r\n                console.log(\"delete join success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        \r\n        console.log(\"this.props.data\",this.props.data)\r\n        this.props.deleteProductToRedux(this.props.data);\r\n    }\r\n\r\n    getTypeList(typeList)\r\n    {\r\n        var joinType = '';\r\n        for(var i = 0 ; i < typeList.length; i++)\r\n        {\r\n            for(var j = 0 ; j < this.props.typeProduct.length; j++)\r\n            {\r\n                if(this.props.typeProduct[j]._id.typeID == typeList[i])\r\n                {\r\n                    joinType += \" \" + this.props.typeProduct[j].name;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return joinType;\r\n    }\r\n\r\n    render () {\r\n        const { classes } = this.props;\r\n        const row = this.props.data;\r\n        // console.log(row);\r\n        return (\r\n            <React.Fragment>\r\n            <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row._id.productID}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.name}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.quantity}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.sellPrice}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\r\n                    {/* {row.importTime == null ? '' : row.importTime.substring(0,row.importTime.indexOf('T'))} */}\r\n                    {row._id.importDate == null ? '': row._id.importDate.indexOf('T')==-1 ? row._id.importDate: row._id.importDate.substring(0,row._id.importDate.indexOf('T'))}\r\n                </TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\r\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => this.setOpen(!this.isOpen)}>\r\n                        {this.isOpen ? (<KeyboardArrowUpIcon />) : (<KeyboardArrowDownIcon />)}\r\n                    </IconButton>\r\n                </TableCell>\r\n            </TableRow>\r\n            {\r\n                this.isOpen ?\r\n                <TableRow>\r\n                    <TableCell className={classes.goodTable_Cell} style={{ padding: 0, height: 100}} colSpan={8}>\r\n                        {/* <Collapse in={open} timeout=\"auto\" unmountOnExit> */}\r\n                        <Collapse in={true} timeout=\"auto\" unmountOnExit>\r\n                            <Box sx={{ margin: 1 }}>\r\n                                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                    Other information\r\n                                </Typography>\r\n                                <div style={{display: 'flex'}}>\r\n                                    {  \r\n                                        row.imgUrl == \"none\"\r\n                                        ? <div style={{width: '100px', height: '100px', objectFit:'cover'}}><img src={GoodImage} style={{width: '100px', height: '100px', objectFit:'cover'}}/></div>\r\n                                        \r\n                                        : <div style={{width: '100px', height: '100px', objectFit:'cover'}}><Image style={{width: '100px', height: '100px', objectFit:'cover'}} cloudName=\"databaseimg\" publicId={row.imgUrl}>{row.imgUrl}</Image></div>\r\n                                    }\r\n                                    <Table>\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                <TableCell className={classes.goodTable_Cell}><div style={{color: '#333'}}>Expired Day</div></TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}><div  style={{color: '#333'}}>Original Price</div></TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div  style={{color: '#333'}}>Good Remain</div></TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div  style={{color: '#333'}}>Product Type</div></TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div style={{color: '#333'}}>Unit</div></TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">\r\n                                                    {/* {row.hidden.expires == null ? '': row.hidden.expires.substring(0,row.hidden.expires.indexOf('T'))} */}\r\n                                                    {row.expires == null ? '': row.expires.indexOf('T') ==-1 ? row.expires : row.expires.substring(0,row.expires.indexOf('T'))}\r\n                                                </TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}>{row.importPrice}</TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}>{row.remain}</TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}>{this.getTypeList(row.typeIDList)}</TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}>{row.unit}</TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                    <div className=\"button-container\">\r\n                                        <Button \r\n                                            onClick={() => {\r\n                                                // Truyền cái data vào trong hàm đây luôn\r\n                                                const data = row;\r\n                                                this.props.updateProduct(data);\r\n                                                this.props.openUpdateModal();\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                        >\r\n                                            Update\r\n                                        </Button>\r\n                                        <Button \r\n                                            variant=\"contained\"\r\n                                            onClick={() => this.deleteProduct(row)}\r\n                                        >\r\n                                            Delete\r\n                                            \r\n                                        </Button>\r\n                                    </div>\r\n                                </div>  \r\n                            </Box>\r\n                        </Collapse>\r\n                    </TableCell>\r\n                </TableRow>\r\n                : null\r\n            }\r\n            \r\n            </React.Fragment>\r\n        ); \r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        listProduct: state.listProduct,\r\n        typeProduct: state.typeProduct,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        getProductToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_AND_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        updateProduct: (data) => {\r\n            dispatch({type: \"UPDATE_GOOD_DATA\", data});\r\n        },\r\n        openUpdateModal: (data) => {\r\n            dispatch({ type: \"CHANGE_UPDATE_GOOD_STATUS\", });\r\n        },\r\n        deleteProductToRedux: (data) => {\r\n            dispatch({\r\n                type: \"DELETE_PRODUCT\",\r\n                data: data,\r\n            }); \r\n        },\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(GoodRow));","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\ComponentToPrint.js",[],{"ruleId":"1255","replacedBy":"1256"},{"ruleId":"1257","replacedBy":"1258"},{"ruleId":"1259","severity":1,"message":"1260","line":10,"column":10,"nodeType":"1261","messageId":"1262","endLine":10,"endColumn":24},{"ruleId":"1263","severity":1,"message":"1264","line":13,"column":3,"nodeType":"1265","messageId":"1266","endLine":15,"endColumn":4},{"ruleId":"1259","severity":1,"message":"1267","line":24,"column":13,"nodeType":"1261","messageId":"1262","endLine":24,"endColumn":21},{"ruleId":"1268","severity":1,"message":"1269","line":21,"column":45,"nodeType":"1270","messageId":"1271","endLine":21,"endColumn":47},{"ruleId":"1272","severity":1,"message":"1273","line":38,"column":30,"nodeType":"1274","messageId":"1275","endLine":38,"endColumn":32},{"ruleId":"1276","severity":1,"message":"1277","line":56,"column":25,"nodeType":"1261","messageId":"1278","endLine":56,"endColumn":33},{"ruleId":"1276","severity":1,"message":"1279","line":57,"column":29,"nodeType":"1261","messageId":"1278","endLine":57,"endColumn":30},{"ruleId":"1272","severity":1,"message":"1273","line":42,"column":30,"nodeType":"1274","messageId":"1275","endLine":42,"endColumn":32},{"ruleId":"1268","severity":1,"message":"1280","line":5,"column":46,"nodeType":"1270","messageId":"1281","endLine":5,"endColumn":48},{"ruleId":"1268","severity":1,"message":"1269","line":41,"column":45,"nodeType":"1270","messageId":"1271","endLine":41,"endColumn":47},{"ruleId":"1268","severity":1,"message":"1280","line":48,"column":48,"nodeType":"1270","messageId":"1281","endLine":48,"endColumn":50},{"ruleId":"1272","severity":1,"message":"1282","line":11,"column":40,"nodeType":"1274","messageId":"1275","endLine":11,"endColumn":42},{"ruleId":"1272","severity":1,"message":"1273","line":23,"column":44,"nodeType":"1274","messageId":"1275","endLine":23,"endColumn":46},{"ruleId":"1276","severity":1,"message":"1277","line":37,"column":21,"nodeType":"1261","messageId":"1278","endLine":37,"endColumn":29},{"ruleId":"1276","severity":1,"message":"1279","line":38,"column":25,"nodeType":"1261","messageId":"1278","endLine":38,"endColumn":26},{"ruleId":"1272","severity":1,"message":"1273","line":40,"column":44,"nodeType":"1274","messageId":"1275","endLine":40,"endColumn":46},{"ruleId":"1272","severity":1,"message":"1273","line":35,"column":53,"nodeType":"1274","messageId":"1275","endLine":35,"endColumn":55},{"ruleId":"1276","severity":1,"message":"1277","line":48,"column":21,"nodeType":"1261","messageId":"1278","endLine":48,"endColumn":29},{"ruleId":"1276","severity":1,"message":"1279","line":49,"column":25,"nodeType":"1261","messageId":"1278","endLine":49,"endColumn":26},{"ruleId":"1272","severity":1,"message":"1273","line":51,"column":53,"nodeType":"1274","messageId":"1275","endLine":51,"endColumn":55},{"ruleId":"1276","severity":1,"message":"1277","line":65,"column":21,"nodeType":"1261","messageId":"1278","endLine":65,"endColumn":29},{"ruleId":"1276","severity":1,"message":"1279","line":66,"column":25,"nodeType":"1261","messageId":"1278","endLine":66,"endColumn":26},{"ruleId":"1272","severity":1,"message":"1273","line":68,"column":53,"nodeType":"1274","messageId":"1275","endLine":68,"endColumn":55},{"ruleId":"1276","severity":1,"message":"1277","line":53,"column":21,"nodeType":"1261","messageId":"1278","endLine":53,"endColumn":29},{"ruleId":"1276","severity":1,"message":"1279","line":54,"column":25,"nodeType":"1261","messageId":"1278","endLine":54,"endColumn":26},{"ruleId":"1272","severity":1,"message":"1273","line":38,"column":30,"nodeType":"1274","messageId":"1275","endLine":38,"endColumn":32},{"ruleId":"1276","severity":1,"message":"1277","line":52,"column":25,"nodeType":"1261","messageId":"1278","endLine":52,"endColumn":33},{"ruleId":"1276","severity":1,"message":"1279","line":53,"column":29,"nodeType":"1261","messageId":"1278","endLine":53,"endColumn":30},{"ruleId":"1259","severity":1,"message":"1283","line":13,"column":8,"nodeType":"1261","messageId":"1262","endLine":13,"endColumn":15},{"ruleId":"1284","severity":1,"message":"1285","line":105,"column":30,"nodeType":"1286","messageId":"1287","endLine":105,"endColumn":31,"suggestions":"1288"},{"ruleId":"1284","severity":1,"message":"1285","line":105,"column":46,"nodeType":"1286","messageId":"1287","endLine":105,"endColumn":47,"suggestions":"1289"},{"ruleId":"1259","severity":1,"message":"1290","line":9,"column":10,"nodeType":"1261","messageId":"1262","endLine":9,"endColumn":19},{"ruleId":"1259","severity":1,"message":"1291","line":14,"column":8,"nodeType":"1261","messageId":"1262","endLine":14,"endColumn":13},{"ruleId":"1259","severity":1,"message":"1283","line":6,"column":8,"nodeType":"1261","messageId":"1262","endLine":6,"endColumn":15},{"ruleId":"1284","severity":1,"message":"1285","line":96,"column":28,"nodeType":"1286","messageId":"1287","endLine":96,"endColumn":29,"suggestions":"1292"},{"ruleId":"1284","severity":1,"message":"1285","line":96,"column":44,"nodeType":"1286","messageId":"1287","endLine":96,"endColumn":45,"suggestions":"1293"},{"ruleId":"1259","severity":1,"message":"1267","line":33,"column":17,"nodeType":"1261","messageId":"1262","endLine":33,"endColumn":25},{"ruleId":"1284","severity":1,"message":"1285","line":123,"column":28,"nodeType":"1286","messageId":"1287","endLine":123,"endColumn":29,"suggestions":"1294"},{"ruleId":"1284","severity":1,"message":"1285","line":123,"column":44,"nodeType":"1286","messageId":"1287","endLine":123,"endColumn":45,"suggestions":"1295"},{"ruleId":"1296","severity":1,"message":"1297","line":315,"column":9,"nodeType":"1298","messageId":"1275","endLine":315,"endColumn":25},{"ruleId":"1259","severity":1,"message":"1299","line":9,"column":11,"nodeType":"1261","messageId":"1262","endLine":9,"endColumn":32},{"ruleId":"1259","severity":1,"message":"1300","line":119,"column":15,"nodeType":"1261","messageId":"1262","endLine":119,"endColumn":30},{"ruleId":"1301","severity":1,"message":"1302","line":135,"column":29,"nodeType":"1303","endLine":135,"endColumn":161},{"ruleId":"1272","severity":1,"message":"1282","line":141,"column":45,"nodeType":"1274","messageId":"1275","endLine":141,"endColumn":47},{"ruleId":"1272","severity":1,"message":"1282","line":154,"column":45,"nodeType":"1274","messageId":"1275","endLine":154,"endColumn":47},{"ruleId":"1304","severity":1,"message":"1305","line":219,"column":25,"nodeType":"1303","endLine":224,"endColumn":26},{"ruleId":"1304","severity":1,"message":"1306","line":228,"column":25,"nodeType":"1303","endLine":228,"endColumn":136},{"ruleId":"1259","severity":1,"message":"1307","line":2,"column":10,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":18},{"ruleId":"1259","severity":1,"message":"1308","line":4,"column":10,"nodeType":"1261","messageId":"1262","endLine":4,"endColumn":17},{"ruleId":"1272","severity":1,"message":"1282","line":97,"column":53,"nodeType":"1274","messageId":"1275","endLine":97,"endColumn":55},{"ruleId":"1259","severity":1,"message":"1309","line":162,"column":13,"nodeType":"1261","messageId":"1262","endLine":162,"endColumn":17},{"ruleId":"1259","severity":1,"message":"1310","line":2,"column":8,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":12},{"ruleId":"1259","severity":1,"message":"1311","line":3,"column":8,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":13},{"ruleId":"1259","severity":1,"message":"1312","line":4,"column":8,"nodeType":"1261","messageId":"1262","endLine":4,"endColumn":17},{"ruleId":"1259","severity":1,"message":"1313","line":5,"column":8,"nodeType":"1261","messageId":"1262","endLine":5,"endColumn":22},{"ruleId":"1259","severity":1,"message":"1314","line":7,"column":10,"nodeType":"1261","messageId":"1262","endLine":7,"endColumn":22},{"ruleId":"1259","severity":1,"message":"1315","line":14,"column":5,"nodeType":"1261","messageId":"1262","endLine":14,"endColumn":11},{"ruleId":"1259","severity":1,"message":"1316","line":23,"column":5,"nodeType":"1261","messageId":"1262","endLine":23,"endColumn":20},{"ruleId":"1259","severity":1,"message":"1317","line":25,"column":8,"nodeType":"1261","messageId":"1262","endLine":25,"endColumn":23},{"ruleId":"1259","severity":1,"message":"1318","line":45,"column":10,"nodeType":"1261","messageId":"1262","endLine":45,"endColumn":21},{"ruleId":"1259","severity":1,"message":"1319","line":97,"column":5,"nodeType":"1261","messageId":"1262","endLine":97,"endColumn":15},{"ruleId":"1259","severity":1,"message":"1320","line":98,"column":5,"nodeType":"1261","messageId":"1262","endLine":98,"endColumn":18},{"ruleId":"1259","severity":1,"message":"1321","line":100,"column":5,"nodeType":"1261","messageId":"1262","endLine":100,"endColumn":9},{"ruleId":"1259","severity":1,"message":"1322","line":101,"column":5,"nodeType":"1261","messageId":"1262","endLine":101,"endColumn":16},{"ruleId":"1272","severity":1,"message":"1273","line":383,"column":75,"nodeType":"1274","messageId":"1275","endLine":383,"endColumn":77},{"ruleId":"1268","severity":1,"message":"1269","line":185,"column":89,"nodeType":"1270","messageId":"1271","endLine":185,"endColumn":91},{"ruleId":"1259","severity":1,"message":"1323","line":4,"column":10,"nodeType":"1261","messageId":"1262","endLine":4,"endColumn":14},{"ruleId":"1259","severity":1,"message":"1324","line":4,"column":43,"nodeType":"1261","messageId":"1262","endLine":4,"endColumn":54},{"ruleId":"1259","severity":1,"message":"1325","line":2,"column":28,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":35},{"ruleId":"1259","severity":1,"message":"1326","line":3,"column":9,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":12},{"ruleId":"1259","severity":1,"message":"1324","line":3,"column":14,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":25},{"ruleId":"1259","severity":1,"message":"1327","line":3,"column":35,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":45},{"ruleId":"1259","severity":1,"message":"1328","line":5,"column":10,"nodeType":"1261","messageId":"1262","endLine":5,"endColumn":15},{"ruleId":"1259","severity":1,"message":"1329","line":10,"column":5,"nodeType":"1261","messageId":"1262","endLine":10,"endColumn":17},{"ruleId":"1259","severity":1,"message":"1330","line":14,"column":5,"nodeType":"1261","messageId":"1262","endLine":14,"endColumn":12},{"ruleId":"1272","severity":1,"message":"1282","line":119,"column":47,"nodeType":"1274","messageId":"1275","endLine":119,"endColumn":49},{"ruleId":"1272","severity":1,"message":"1282","line":120,"column":59,"nodeType":"1274","messageId":"1275","endLine":120,"endColumn":61},{"ruleId":"1272","severity":1,"message":"1282","line":121,"column":61,"nodeType":"1274","messageId":"1275","endLine":121,"endColumn":63},{"ruleId":"1272","severity":1,"message":"1282","line":146,"column":34,"nodeType":"1274","messageId":"1275","endLine":146,"endColumn":36},{"ruleId":"1272","severity":1,"message":"1282","line":151,"column":32,"nodeType":"1274","messageId":"1275","endLine":151,"endColumn":34},{"ruleId":"1272","severity":1,"message":"1282","line":157,"column":32,"nodeType":"1274","messageId":"1275","endLine":157,"endColumn":34},{"ruleId":"1272","severity":1,"message":"1282","line":157,"column":74,"nodeType":"1274","messageId":"1275","endLine":157,"endColumn":76},{"ruleId":"1272","severity":1,"message":"1282","line":170,"column":33,"nodeType":"1274","messageId":"1275","endLine":170,"endColumn":35},{"ruleId":"1272","severity":1,"message":"1282","line":303,"column":80,"nodeType":"1274","messageId":"1275","endLine":303,"endColumn":82},{"ruleId":"1272","severity":1,"message":"1282","line":340,"column":78,"nodeType":"1274","messageId":"1275","endLine":340,"endColumn":80},{"ruleId":"1268","severity":1,"message":"1280","line":25,"column":39,"nodeType":"1270","messageId":"1281","endLine":25,"endColumn":41},{"ruleId":"1268","severity":1,"message":"1280","line":33,"column":39,"nodeType":"1270","messageId":"1281","endLine":33,"endColumn":41},{"ruleId":"1268","severity":1,"message":"1280","line":45,"column":39,"nodeType":"1270","messageId":"1281","endLine":45,"endColumn":41},{"ruleId":"1331","severity":1,"message":"1332","line":159,"column":19,"nodeType":"1270","messageId":"1333","endLine":164,"endColumn":14},{"ruleId":"1268","severity":1,"message":"1280","line":194,"column":37,"nodeType":"1270","messageId":"1281","endLine":194,"endColumn":39},{"ruleId":"1268","severity":1,"message":"1280","line":224,"column":37,"nodeType":"1270","messageId":"1281","endLine":224,"endColumn":39},{"ruleId":"1296","severity":1,"message":"1334","line":343,"column":5,"nodeType":"1298","messageId":"1275","endLine":343,"endColumn":23},{"ruleId":"1259","severity":1,"message":"1335","line":19,"column":8,"nodeType":"1261","messageId":"1262","endLine":19,"endColumn":13},{"ruleId":"1259","severity":1,"message":"1336","line":27,"column":11,"nodeType":"1261","messageId":"1262","endLine":27,"endColumn":19},{"ruleId":"1268","severity":1,"message":"1280","line":104,"column":35,"nodeType":"1270","messageId":"1281","endLine":104,"endColumn":37},{"ruleId":"1268","severity":1,"message":"1280","line":31,"column":43,"nodeType":"1270","messageId":"1281","endLine":31,"endColumn":45},{"ruleId":"1268","severity":1,"message":"1280","line":39,"column":43,"nodeType":"1270","messageId":"1281","endLine":39,"endColumn":45},{"ruleId":"1268","severity":1,"message":"1280","line":50,"column":43,"nodeType":"1270","messageId":"1281","endLine":50,"endColumn":45},{"ruleId":"1259","severity":1,"message":"1337","line":2,"column":82,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":88},{"ruleId":"1259","severity":1,"message":"1338","line":3,"column":10,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":23},{"ruleId":"1259","severity":1,"message":"1339","line":4,"column":10,"nodeType":"1261","messageId":"1262","endLine":4,"endColumn":20},{"ruleId":"1259","severity":1,"message":"1340","line":6,"column":10,"nodeType":"1261","messageId":"1262","endLine":6,"endColumn":16},{"ruleId":"1259","severity":1,"message":"1341","line":6,"column":18,"nodeType":"1261","messageId":"1262","endLine":6,"endColumn":26},{"ruleId":"1259","severity":1,"message":"1335","line":8,"column":8,"nodeType":"1261","messageId":"1262","endLine":8,"endColumn":13},{"ruleId":"1259","severity":1,"message":"1342","line":9,"column":23,"nodeType":"1261","messageId":"1262","endLine":9,"endColumn":34},{"ruleId":"1268","severity":1,"message":"1269","line":65,"column":44,"nodeType":"1270","messageId":"1271","endLine":65,"endColumn":46},{"ruleId":"1272","severity":1,"message":"1282","line":71,"column":24,"nodeType":"1274","messageId":"1275","endLine":71,"endColumn":26},{"ruleId":"1268","severity":1,"message":"1269","line":74,"column":40,"nodeType":"1270","messageId":"1271","endLine":74,"endColumn":42},{"ruleId":"1272","severity":1,"message":"1282","line":75,"column":31,"nodeType":"1274","messageId":"1275","endLine":75,"endColumn":33},{"ruleId":"1268","severity":1,"message":"1269","line":82,"column":37,"nodeType":"1270","messageId":"1271","endLine":82,"endColumn":39},{"ruleId":"1272","severity":1,"message":"1282","line":86,"column":36,"nodeType":"1274","messageId":"1275","endLine":86,"endColumn":38},{"ruleId":"1272","severity":1,"message":"1282","line":86,"column":74,"nodeType":"1274","messageId":"1275","endLine":86,"endColumn":76},{"ruleId":"1272","severity":1,"message":"1282","line":86,"column":111,"nodeType":"1274","messageId":"1275","endLine":86,"endColumn":113},{"ruleId":"1268","severity":1,"message":"1280","line":93,"column":23,"nodeType":"1270","messageId":"1281","endLine":93,"endColumn":25},{"ruleId":"1343","severity":1,"message":"1344","line":97,"column":8,"nodeType":"1345","endLine":97,"endColumn":34,"suggestions":"1346"},{"ruleId":"1272","severity":1,"message":"1282","line":20,"column":33,"nodeType":"1274","messageId":"1275","endLine":20,"endColumn":35},{"ruleId":"1268","severity":1,"message":"1280","line":21,"column":35,"nodeType":"1270","messageId":"1281","endLine":21,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":24,"column":29,"nodeType":"1274","messageId":"1275","endLine":24,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":24,"column":61,"nodeType":"1274","messageId":"1275","endLine":24,"endColumn":63},{"ruleId":"1272","severity":1,"message":"1282","line":24,"column":88,"nodeType":"1274","messageId":"1275","endLine":24,"endColumn":90},{"ruleId":"1272","severity":1,"message":"1282","line":31,"column":40,"nodeType":"1274","messageId":"1275","endLine":31,"endColumn":42},{"ruleId":"1268","severity":1,"message":"1280","line":32,"column":35,"nodeType":"1270","messageId":"1281","endLine":32,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":35,"column":29,"nodeType":"1274","messageId":"1275","endLine":35,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":35,"column":71,"nodeType":"1274","messageId":"1275","endLine":35,"endColumn":73},{"ruleId":"1272","severity":1,"message":"1282","line":35,"column":114,"nodeType":"1274","messageId":"1275","endLine":35,"endColumn":116},{"ruleId":"1272","severity":1,"message":"1282","line":40,"column":40,"nodeType":"1274","messageId":"1275","endLine":40,"endColumn":42},{"ruleId":"1268","severity":1,"message":"1280","line":41,"column":35,"nodeType":"1270","messageId":"1281","endLine":41,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":44,"column":29,"nodeType":"1274","messageId":"1275","endLine":44,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":44,"column":64,"nodeType":"1274","messageId":"1275","endLine":44,"endColumn":66},{"ruleId":"1272","severity":1,"message":"1282","line":49,"column":40,"nodeType":"1274","messageId":"1275","endLine":49,"endColumn":42},{"ruleId":"1268","severity":1,"message":"1280","line":50,"column":35,"nodeType":"1270","messageId":"1281","endLine":50,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":53,"column":29,"nodeType":"1274","messageId":"1275","endLine":53,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":58,"column":40,"nodeType":"1274","messageId":"1275","endLine":58,"endColumn":42},{"ruleId":"1268","severity":1,"message":"1280","line":59,"column":35,"nodeType":"1270","messageId":"1281","endLine":59,"endColumn":37},{"ruleId":"1343","severity":1,"message":"1347","line":66,"column":8,"nodeType":"1345","endLine":66,"endColumn":29,"suggestions":"1348"},{"ruleId":"1259","severity":1,"message":"1349","line":3,"column":10,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":33},{"ruleId":"1259","severity":1,"message":"1350","line":5,"column":10,"nodeType":"1261","messageId":"1262","endLine":5,"endColumn":20},{"ruleId":"1272","severity":1,"message":"1273","line":13,"column":30,"nodeType":"1274","messageId":"1275","endLine":13,"endColumn":32},{"ruleId":"1272","severity":1,"message":"1273","line":17,"column":29,"nodeType":"1274","messageId":"1275","endLine":17,"endColumn":31},{"ruleId":"1259","severity":1,"message":"1351","line":32,"column":9,"nodeType":"1261","messageId":"1262","endLine":32,"endColumn":15},{"ruleId":"1259","severity":1,"message":"1352","line":40,"column":11,"nodeType":"1261","messageId":"1262","endLine":40,"endColumn":22},{"ruleId":"1259","severity":1,"message":"1353","line":43,"column":12,"nodeType":"1261","messageId":"1262","endLine":43,"endColumn":22},{"ruleId":"1259","severity":1,"message":"1354","line":43,"column":24,"nodeType":"1261","messageId":"1262","endLine":43,"endColumn":37},{"ruleId":"1259","severity":1,"message":"1355","line":49,"column":13,"nodeType":"1261","messageId":"1262","endLine":49,"endColumn":18},{"ruleId":"1272","severity":1,"message":"1282","line":56,"column":33,"nodeType":"1274","messageId":"1275","endLine":56,"endColumn":35},{"ruleId":"1272","severity":1,"message":"1282","line":64,"column":29,"nodeType":"1274","messageId":"1275","endLine":64,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":64,"column":65,"nodeType":"1274","messageId":"1275","endLine":64,"endColumn":67},{"ruleId":"1272","severity":1,"message":"1282","line":64,"column":92,"nodeType":"1274","messageId":"1275","endLine":64,"endColumn":94},{"ruleId":"1272","severity":1,"message":"1282","line":69,"column":40,"nodeType":"1274","messageId":"1275","endLine":69,"endColumn":42},{"ruleId":"1276","severity":1,"message":"1279","line":71,"column":21,"nodeType":"1261","messageId":"1278","endLine":71,"endColumn":22},{"ruleId":"1276","severity":1,"message":"1356","line":73,"column":21,"nodeType":"1261","messageId":"1278","endLine":73,"endColumn":29},{"ruleId":"1276","severity":1,"message":"1357","line":74,"column":21,"nodeType":"1261","messageId":"1278","endLine":74,"endColumn":25},{"ruleId":"1272","severity":1,"message":"1282","line":77,"column":29,"nodeType":"1274","messageId":"1275","endLine":77,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":77,"column":65,"nodeType":"1274","messageId":"1275","endLine":77,"endColumn":67},{"ruleId":"1272","severity":1,"message":"1282","line":77,"column":92,"nodeType":"1274","messageId":"1275","endLine":77,"endColumn":94},{"ruleId":"1272","severity":1,"message":"1282","line":83,"column":40,"nodeType":"1274","messageId":"1275","endLine":83,"endColumn":42},{"ruleId":"1276","severity":1,"message":"1279","line":85,"column":21,"nodeType":"1261","messageId":"1278","endLine":85,"endColumn":22},{"ruleId":"1276","severity":1,"message":"1356","line":87,"column":21,"nodeType":"1261","messageId":"1278","endLine":87,"endColumn":29},{"ruleId":"1276","severity":1,"message":"1357","line":88,"column":21,"nodeType":"1261","messageId":"1278","endLine":88,"endColumn":25},{"ruleId":"1272","severity":1,"message":"1282","line":91,"column":29,"nodeType":"1274","messageId":"1275","endLine":91,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":91,"column":56,"nodeType":"1274","messageId":"1275","endLine":91,"endColumn":58},{"ruleId":"1272","severity":1,"message":"1282","line":96,"column":40,"nodeType":"1274","messageId":"1275","endLine":96,"endColumn":42},{"ruleId":"1276","severity":1,"message":"1279","line":98,"column":21,"nodeType":"1261","messageId":"1278","endLine":98,"endColumn":22},{"ruleId":"1276","severity":1,"message":"1356","line":100,"column":21,"nodeType":"1261","messageId":"1278","endLine":100,"endColumn":29},{"ruleId":"1276","severity":1,"message":"1357","line":101,"column":21,"nodeType":"1261","messageId":"1278","endLine":101,"endColumn":25},{"ruleId":"1272","severity":1,"message":"1282","line":104,"column":29,"nodeType":"1274","messageId":"1275","endLine":104,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":109,"column":40,"nodeType":"1274","messageId":"1275","endLine":109,"endColumn":42},{"ruleId":"1276","severity":1,"message":"1279","line":111,"column":21,"nodeType":"1261","messageId":"1278","endLine":111,"endColumn":22},{"ruleId":"1343","severity":1,"message":"1358","line":117,"column":8,"nodeType":"1345","endLine":117,"endColumn":29,"suggestions":"1359"},{"ruleId":"1259","severity":1,"message":"1349","line":3,"column":10,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":33},{"ruleId":"1259","severity":1,"message":"1355","line":17,"column":13,"nodeType":"1261","messageId":"1262","endLine":17,"endColumn":18},{"ruleId":"1272","severity":1,"message":"1282","line":20,"column":33,"nodeType":"1274","messageId":"1275","endLine":20,"endColumn":35},{"ruleId":"1272","severity":1,"message":"1282","line":28,"column":29,"nodeType":"1274","messageId":"1275","endLine":28,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":28,"column":61,"nodeType":"1274","messageId":"1275","endLine":28,"endColumn":63},{"ruleId":"1272","severity":1,"message":"1282","line":28,"column":88,"nodeType":"1274","messageId":"1275","endLine":28,"endColumn":90},{"ruleId":"1268","severity":1,"message":"1280","line":34,"column":35,"nodeType":"1270","messageId":"1281","endLine":34,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":38,"column":29,"nodeType":"1274","messageId":"1275","endLine":38,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":38,"column":61,"nodeType":"1274","messageId":"1275","endLine":38,"endColumn":63},{"ruleId":"1272","severity":1,"message":"1282","line":38,"column":88,"nodeType":"1274","messageId":"1275","endLine":38,"endColumn":90},{"ruleId":"1272","severity":1,"message":"1282","line":51,"column":40,"nodeType":"1274","messageId":"1275","endLine":51,"endColumn":42},{"ruleId":"1276","severity":1,"message":"1360","line":52,"column":17,"nodeType":"1261","messageId":"1278","endLine":52,"endColumn":30},{"ruleId":"1276","severity":1,"message":"1279","line":53,"column":21,"nodeType":"1261","messageId":"1278","endLine":53,"endColumn":22},{"ruleId":"1276","severity":1,"message":"1356","line":55,"column":21,"nodeType":"1261","messageId":"1278","endLine":55,"endColumn":29},{"ruleId":"1276","severity":1,"message":"1357","line":56,"column":21,"nodeType":"1261","messageId":"1278","endLine":56,"endColumn":25},{"ruleId":"1272","severity":1,"message":"1282","line":59,"column":29,"nodeType":"1274","messageId":"1275","endLine":59,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":59,"column":65,"nodeType":"1274","messageId":"1275","endLine":59,"endColumn":67},{"ruleId":"1272","severity":1,"message":"1282","line":59,"column":92,"nodeType":"1274","messageId":"1275","endLine":59,"endColumn":94},{"ruleId":"1276","severity":1,"message":"1361","line":65,"column":17,"nodeType":"1261","messageId":"1278","endLine":65,"endColumn":30},{"ruleId":"1268","severity":1,"message":"1280","line":66,"column":35,"nodeType":"1270","messageId":"1281","endLine":66,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":70,"column":29,"nodeType":"1274","messageId":"1275","endLine":70,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":70,"column":65,"nodeType":"1274","messageId":"1275","endLine":70,"endColumn":67},{"ruleId":"1272","severity":1,"message":"1282","line":70,"column":92,"nodeType":"1274","messageId":"1275","endLine":70,"endColumn":94},{"ruleId":"1272","severity":1,"message":"1282","line":83,"column":40,"nodeType":"1274","messageId":"1275","endLine":83,"endColumn":42},{"ruleId":"1276","severity":1,"message":"1360","line":84,"column":17,"nodeType":"1261","messageId":"1278","endLine":84,"endColumn":30},{"ruleId":"1276","severity":1,"message":"1279","line":85,"column":21,"nodeType":"1261","messageId":"1278","endLine":85,"endColumn":22},{"ruleId":"1276","severity":1,"message":"1356","line":87,"column":21,"nodeType":"1261","messageId":"1278","endLine":87,"endColumn":29},{"ruleId":"1276","severity":1,"message":"1357","line":88,"column":21,"nodeType":"1261","messageId":"1278","endLine":88,"endColumn":25},{"ruleId":"1272","severity":1,"message":"1282","line":91,"column":29,"nodeType":"1274","messageId":"1275","endLine":91,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":91,"column":56,"nodeType":"1274","messageId":"1275","endLine":91,"endColumn":58},{"ruleId":"1276","severity":1,"message":"1361","line":97,"column":17,"nodeType":"1261","messageId":"1278","endLine":97,"endColumn":30},{"ruleId":"1268","severity":1,"message":"1280","line":98,"column":35,"nodeType":"1270","messageId":"1281","endLine":98,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":101,"column":29,"nodeType":"1274","messageId":"1275","endLine":101,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":101,"column":56,"nodeType":"1274","messageId":"1275","endLine":101,"endColumn":58},{"ruleId":"1272","severity":1,"message":"1282","line":113,"column":40,"nodeType":"1274","messageId":"1275","endLine":113,"endColumn":42},{"ruleId":"1276","severity":1,"message":"1360","line":114,"column":17,"nodeType":"1261","messageId":"1278","endLine":114,"endColumn":30},{"ruleId":"1276","severity":1,"message":"1279","line":115,"column":21,"nodeType":"1261","messageId":"1278","endLine":115,"endColumn":22},{"ruleId":"1276","severity":1,"message":"1356","line":117,"column":21,"nodeType":"1261","messageId":"1278","endLine":117,"endColumn":29},{"ruleId":"1276","severity":1,"message":"1357","line":118,"column":21,"nodeType":"1261","messageId":"1278","endLine":118,"endColumn":25},{"ruleId":"1272","severity":1,"message":"1282","line":121,"column":29,"nodeType":"1274","messageId":"1275","endLine":121,"endColumn":31},{"ruleId":"1276","severity":1,"message":"1361","line":127,"column":17,"nodeType":"1261","messageId":"1278","endLine":127,"endColumn":30},{"ruleId":"1268","severity":1,"message":"1280","line":128,"column":35,"nodeType":"1270","messageId":"1281","endLine":128,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":131,"column":29,"nodeType":"1274","messageId":"1275","endLine":131,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":143,"column":40,"nodeType":"1274","messageId":"1275","endLine":143,"endColumn":42},{"ruleId":"1276","severity":1,"message":"1360","line":144,"column":17,"nodeType":"1261","messageId":"1278","endLine":144,"endColumn":30},{"ruleId":"1272","severity":1,"message":"1273","line":145,"column":27,"nodeType":"1274","messageId":"1275","endLine":145,"endColumn":29},{"ruleId":"1272","severity":1,"message":"1273","line":145,"column":61,"nodeType":"1274","messageId":"1275","endLine":145,"endColumn":63},{"ruleId":"1276","severity":1,"message":"1279","line":146,"column":25,"nodeType":"1261","messageId":"1278","endLine":146,"endColumn":26},{"ruleId":"1276","severity":1,"message":"1361","line":152,"column":17,"nodeType":"1261","messageId":"1278","endLine":152,"endColumn":30},{"ruleId":"1268","severity":1,"message":"1280","line":153,"column":35,"nodeType":"1270","messageId":"1281","endLine":153,"endColumn":37},{"ruleId":"1343","severity":1,"message":"1362","line":167,"column":8,"nodeType":"1345","endLine":167,"endColumn":29,"suggestions":"1363"},{"ruleId":"1268","severity":1,"message":"1280","line":21,"column":36,"nodeType":"1270","messageId":"1281","endLine":21,"endColumn":38},{"ruleId":"1268","severity":1,"message":"1269","line":74,"column":51,"nodeType":"1270","messageId":"1271","endLine":74,"endColumn":53},{"ruleId":"1272","severity":1,"message":"1282","line":78,"column":25,"nodeType":"1274","messageId":"1275","endLine":78,"endColumn":27},{"ruleId":"1272","severity":1,"message":"1282","line":78,"column":43,"nodeType":"1274","messageId":"1275","endLine":78,"endColumn":45},{"ruleId":"1272","severity":1,"message":"1282","line":78,"column":63,"nodeType":"1274","messageId":"1275","endLine":78,"endColumn":65},{"ruleId":"1343","severity":1,"message":"1364","line":83,"column":8,"nodeType":"1345","endLine":83,"endColumn":15,"suggestions":"1365"},{"ruleId":"1259","severity":1,"message":"1366","line":1,"column":17,"nodeType":"1261","messageId":"1262","endLine":1,"endColumn":20},{"ruleId":"1259","severity":1,"message":"1342","line":11,"column":23,"nodeType":"1261","messageId":"1262","endLine":11,"endColumn":34},{"ruleId":"1259","severity":1,"message":"1367","line":17,"column":10,"nodeType":"1261","messageId":"1262","endLine":17,"endColumn":15},{"ruleId":"1268","severity":1,"message":"1280","line":111,"column":23,"nodeType":"1270","messageId":"1281","endLine":111,"endColumn":25},{"ruleId":"1268","severity":1,"message":"1280","line":115,"column":31,"nodeType":"1270","messageId":"1281","endLine":115,"endColumn":33},{"ruleId":"1268","severity":1,"message":"1280","line":121,"column":43,"nodeType":"1270","messageId":"1281","endLine":121,"endColumn":45},{"ruleId":"1268","severity":1,"message":"1269","line":184,"column":37,"nodeType":"1270","messageId":"1271","endLine":184,"endColumn":39},{"ruleId":"1268","severity":1,"message":"1280","line":211,"column":35,"nodeType":"1270","messageId":"1281","endLine":211,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":214,"column":25,"nodeType":"1274","messageId":"1275","endLine":214,"endColumn":27},{"ruleId":"1272","severity":1,"message":"1282","line":214,"column":58,"nodeType":"1274","messageId":"1275","endLine":214,"endColumn":60},{"ruleId":"1272","severity":1,"message":"1282","line":214,"column":91,"nodeType":"1274","messageId":"1275","endLine":214,"endColumn":93},{"ruleId":"1272","severity":1,"message":"1282","line":214,"column":124,"nodeType":"1274","messageId":"1275","endLine":214,"endColumn":126},{"ruleId":"1272","severity":1,"message":"1282","line":216,"column":29,"nodeType":"1274","messageId":"1275","endLine":216,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":216,"column":55,"nodeType":"1274","messageId":"1275","endLine":216,"endColumn":57},{"ruleId":"1268","severity":1,"message":"1280","line":218,"column":47,"nodeType":"1270","messageId":"1281","endLine":218,"endColumn":49},{"ruleId":"1331","severity":1,"message":"1368","line":236,"column":27,"nodeType":"1270","messageId":"1333","endLine":247,"endColumn":12},{"ruleId":"1268","severity":1,"message":"1280","line":236,"column":35,"nodeType":"1270","messageId":"1281","endLine":236,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":239,"column":19,"nodeType":"1274","messageId":"1275","endLine":239,"endColumn":21},{"ruleId":"1272","severity":1,"message":"1282","line":239,"column":46,"nodeType":"1274","messageId":"1275","endLine":239,"endColumn":48},{"ruleId":"1272","severity":1,"message":"1282","line":239,"column":72,"nodeType":"1274","messageId":"1275","endLine":239,"endColumn":74},{"ruleId":"1268","severity":1,"message":"1280","line":242,"column":47,"nodeType":"1270","messageId":"1281","endLine":242,"endColumn":49},{"ruleId":"1268","severity":1,"message":"1280","line":264,"column":33,"nodeType":"1270","messageId":"1281","endLine":264,"endColumn":35},{"ruleId":"1272","severity":1,"message":"1282","line":267,"column":23,"nodeType":"1274","messageId":"1275","endLine":267,"endColumn":25},{"ruleId":"1272","severity":1,"message":"1282","line":267,"column":56,"nodeType":"1274","messageId":"1275","endLine":267,"endColumn":58},{"ruleId":"1272","severity":1,"message":"1282","line":267,"column":89,"nodeType":"1274","messageId":"1275","endLine":267,"endColumn":91},{"ruleId":"1272","severity":1,"message":"1282","line":267,"column":122,"nodeType":"1274","messageId":"1275","endLine":267,"endColumn":124},{"ruleId":"1272","severity":1,"message":"1282","line":268,"column":26,"nodeType":"1274","messageId":"1275","endLine":268,"endColumn":28},{"ruleId":"1272","severity":1,"message":"1282","line":268,"column":55,"nodeType":"1274","messageId":"1275","endLine":268,"endColumn":57},{"ruleId":"1268","severity":1,"message":"1280","line":271,"column":47,"nodeType":"1270","messageId":"1281","endLine":271,"endColumn":49},{"ruleId":"1331","severity":1,"message":"1368","line":287,"column":27,"nodeType":"1270","messageId":"1333","endLine":298,"endColumn":12},{"ruleId":"1268","severity":1,"message":"1280","line":287,"column":35,"nodeType":"1270","messageId":"1281","endLine":287,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":290,"column":19,"nodeType":"1274","messageId":"1275","endLine":290,"endColumn":21},{"ruleId":"1272","severity":1,"message":"1282","line":290,"column":49,"nodeType":"1274","messageId":"1275","endLine":290,"endColumn":51},{"ruleId":"1272","severity":1,"message":"1282","line":290,"column":78,"nodeType":"1274","messageId":"1275","endLine":290,"endColumn":80},{"ruleId":"1268","severity":1,"message":"1280","line":293,"column":47,"nodeType":"1270","messageId":"1281","endLine":293,"endColumn":49},{"ruleId":"1268","severity":1,"message":"1280","line":320,"column":31,"nodeType":"1270","messageId":"1281","endLine":320,"endColumn":33},{"ruleId":"1272","severity":1,"message":"1282","line":323,"column":15,"nodeType":"1274","messageId":"1275","endLine":323,"endColumn":17},{"ruleId":"1272","severity":1,"message":"1282","line":323,"column":41,"nodeType":"1274","messageId":"1275","endLine":323,"endColumn":43},{"ruleId":"1268","severity":1,"message":"1280","line":326,"column":43,"nodeType":"1270","messageId":"1281","endLine":326,"endColumn":45},{"ruleId":"1268","severity":1,"message":"1280","line":347,"column":29,"nodeType":"1270","messageId":"1281","endLine":347,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":350,"column":21,"nodeType":"1274","messageId":"1275","endLine":350,"endColumn":23},{"ruleId":"1272","severity":1,"message":"1282","line":355,"column":21,"nodeType":"1274","messageId":"1275","endLine":355,"endColumn":23},{"ruleId":"1272","severity":1,"message":"1282","line":361,"column":21,"nodeType":"1274","messageId":"1275","endLine":361,"endColumn":23},{"ruleId":"1272","severity":1,"message":"1282","line":361,"column":42,"nodeType":"1274","messageId":"1275","endLine":361,"endColumn":44},{"ruleId":"1272","severity":1,"message":"1282","line":363,"column":28,"nodeType":"1274","messageId":"1275","endLine":363,"endColumn":30},{"ruleId":"1272","severity":1,"message":"1282","line":365,"column":31,"nodeType":"1274","messageId":"1275","endLine":365,"endColumn":33},{"ruleId":"1272","severity":1,"message":"1282","line":375,"column":37,"nodeType":"1274","messageId":"1275","endLine":375,"endColumn":39},{"ruleId":"1272","severity":1,"message":"1282","line":375,"column":71,"nodeType":"1274","messageId":"1275","endLine":375,"endColumn":73},{"ruleId":"1268","severity":1,"message":"1280","line":377,"column":29,"nodeType":"1270","messageId":"1281","endLine":377,"endColumn":31},{"ruleId":"1268","severity":1,"message":"1280","line":379,"column":33,"nodeType":"1270","messageId":"1281","endLine":379,"endColumn":35},{"ruleId":"1272","severity":1,"message":"1282","line":383,"column":27,"nodeType":"1274","messageId":"1275","endLine":383,"endColumn":29},{"ruleId":"1272","severity":1,"message":"1282","line":383,"column":54,"nodeType":"1274","messageId":"1275","endLine":383,"endColumn":56},{"ruleId":"1272","severity":1,"message":"1282","line":383,"column":81,"nodeType":"1274","messageId":"1275","endLine":383,"endColumn":83},{"ruleId":"1268","severity":1,"message":"1280","line":390,"column":26,"nodeType":"1270","messageId":"1281","endLine":390,"endColumn":28},{"ruleId":"1268","severity":1,"message":"1280","line":392,"column":33,"nodeType":"1270","messageId":"1281","endLine":392,"endColumn":35},{"ruleId":"1272","severity":1,"message":"1282","line":396,"column":27,"nodeType":"1274","messageId":"1275","endLine":396,"endColumn":29},{"ruleId":"1272","severity":1,"message":"1282","line":396,"column":54,"nodeType":"1274","messageId":"1275","endLine":396,"endColumn":56},{"ruleId":"1272","severity":1,"message":"1282","line":396,"column":81,"nodeType":"1274","messageId":"1275","endLine":396,"endColumn":83},{"ruleId":"1272","severity":1,"message":"1282","line":403,"column":23,"nodeType":"1274","messageId":"1275","endLine":403,"endColumn":25},{"ruleId":"1272","severity":1,"message":"1282","line":403,"column":44,"nodeType":"1274","messageId":"1275","endLine":403,"endColumn":46},{"ruleId":"1272","severity":1,"message":"1282","line":405,"column":30,"nodeType":"1274","messageId":"1275","endLine":405,"endColumn":32},{"ruleId":"1272","severity":1,"message":"1282","line":407,"column":33,"nodeType":"1274","messageId":"1275","endLine":407,"endColumn":35},{"ruleId":"1272","severity":1,"message":"1282","line":418,"column":31,"nodeType":"1274","messageId":"1275","endLine":418,"endColumn":33},{"ruleId":"1272","severity":1,"message":"1282","line":419,"column":37,"nodeType":"1274","messageId":"1275","endLine":419,"endColumn":39},{"ruleId":"1268","severity":1,"message":"1280","line":420,"column":31,"nodeType":"1270","messageId":"1281","endLine":420,"endColumn":33},{"ruleId":"1272","severity":1,"message":"1282","line":423,"column":23,"nodeType":"1274","messageId":"1275","endLine":423,"endColumn":25},{"ruleId":"1272","severity":1,"message":"1282","line":423,"column":43,"nodeType":"1274","messageId":"1275","endLine":423,"endColumn":45},{"ruleId":"1272","severity":1,"message":"1282","line":428,"column":23,"nodeType":"1274","messageId":"1275","endLine":428,"endColumn":25},{"ruleId":"1272","severity":1,"message":"1282","line":428,"column":47,"nodeType":"1274","messageId":"1275","endLine":428,"endColumn":49},{"ruleId":"1272","severity":1,"message":"1282","line":436,"column":23,"nodeType":"1274","messageId":"1275","endLine":436,"endColumn":25},{"ruleId":"1272","severity":1,"message":"1282","line":436,"column":44,"nodeType":"1274","messageId":"1275","endLine":436,"endColumn":46},{"ruleId":"1272","severity":1,"message":"1282","line":438,"column":30,"nodeType":"1274","messageId":"1275","endLine":438,"endColumn":32},{"ruleId":"1272","severity":1,"message":"1282","line":440,"column":33,"nodeType":"1274","messageId":"1275","endLine":440,"endColumn":35},{"ruleId":"1272","severity":1,"message":"1282","line":452,"column":29,"nodeType":"1274","messageId":"1275","endLine":452,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":453,"column":35,"nodeType":"1274","messageId":"1275","endLine":453,"endColumn":37},{"ruleId":"1268","severity":1,"message":"1280","line":454,"column":29,"nodeType":"1270","messageId":"1281","endLine":454,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":457,"column":21,"nodeType":"1274","messageId":"1275","endLine":457,"endColumn":23},{"ruleId":"1272","severity":1,"message":"1282","line":457,"column":41,"nodeType":"1274","messageId":"1275","endLine":457,"endColumn":43},{"ruleId":"1272","severity":1,"message":"1282","line":462,"column":21,"nodeType":"1274","messageId":"1275","endLine":462,"endColumn":23},{"ruleId":"1272","severity":1,"message":"1282","line":462,"column":45,"nodeType":"1274","messageId":"1275","endLine":462,"endColumn":47},{"ruleId":"1272","severity":1,"message":"1282","line":468,"column":21,"nodeType":"1274","messageId":"1275","endLine":468,"endColumn":23},{"ruleId":"1272","severity":1,"message":"1282","line":468,"column":42,"nodeType":"1274","messageId":"1275","endLine":468,"endColumn":44},{"ruleId":"1272","severity":1,"message":"1282","line":470,"column":28,"nodeType":"1274","messageId":"1275","endLine":470,"endColumn":30},{"ruleId":"1272","severity":1,"message":"1282","line":472,"column":31,"nodeType":"1274","messageId":"1275","endLine":472,"endColumn":33},{"ruleId":"1272","severity":1,"message":"1282","line":494,"column":45,"nodeType":"1274","messageId":"1275","endLine":494,"endColumn":47},{"ruleId":"1272","severity":1,"message":"1282","line":494,"column":83,"nodeType":"1274","messageId":"1275","endLine":494,"endColumn":85},{"ruleId":"1343","severity":1,"message":"1369","line":515,"column":6,"nodeType":"1345","endLine":515,"endColumn":54,"suggestions":"1370"},{"ruleId":"1259","severity":1,"message":"1325","line":2,"column":28,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":35},{"ruleId":"1259","severity":1,"message":"1326","line":3,"column":9,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":12},{"ruleId":"1259","severity":1,"message":"1324","line":3,"column":14,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":25},{"ruleId":"1259","severity":1,"message":"1327","line":3,"column":35,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":45},{"ruleId":"1259","severity":1,"message":"1328","line":5,"column":10,"nodeType":"1261","messageId":"1262","endLine":5,"endColumn":15},{"ruleId":"1259","severity":1,"message":"1329","line":10,"column":5,"nodeType":"1261","messageId":"1262","endLine":10,"endColumn":17},{"ruleId":"1259","severity":1,"message":"1330","line":14,"column":5,"nodeType":"1261","messageId":"1262","endLine":14,"endColumn":12},{"ruleId":"1272","severity":1,"message":"1282","line":114,"column":40,"nodeType":"1274","messageId":"1275","endLine":114,"endColumn":42},{"ruleId":"1272","severity":1,"message":"1282","line":119,"column":38,"nodeType":"1274","messageId":"1275","endLine":119,"endColumn":40},{"ruleId":"1272","severity":1,"message":"1282","line":125,"column":38,"nodeType":"1274","messageId":"1275","endLine":125,"endColumn":40},{"ruleId":"1272","severity":1,"message":"1282","line":125,"column":86,"nodeType":"1274","messageId":"1275","endLine":125,"endColumn":88},{"ruleId":"1272","severity":1,"message":"1282","line":138,"column":33,"nodeType":"1274","messageId":"1275","endLine":138,"endColumn":35},{"ruleId":"1272","severity":1,"message":"1282","line":266,"column":80,"nodeType":"1274","messageId":"1275","endLine":266,"endColumn":82},{"ruleId":"1272","severity":1,"message":"1282","line":301,"column":78,"nodeType":"1274","messageId":"1275","endLine":301,"endColumn":80},{"ruleId":"1259","severity":1,"message":"1328","line":4,"column":10,"nodeType":"1261","messageId":"1262","endLine":4,"endColumn":15},{"ruleId":"1259","severity":1,"message":"1335","line":5,"column":8,"nodeType":"1261","messageId":"1262","endLine":5,"endColumn":13},{"ruleId":"1259","severity":1,"message":"1329","line":9,"column":5,"nodeType":"1261","messageId":"1262","endLine":9,"endColumn":17},{"ruleId":"1259","severity":1,"message":"1330","line":13,"column":5,"nodeType":"1261","messageId":"1262","endLine":13,"endColumn":12},{"ruleId":"1259","severity":1,"message":"1371","line":15,"column":5,"nodeType":"1261","messageId":"1262","endLine":15,"endColumn":14},{"ruleId":"1272","severity":1,"message":"1282","line":64,"column":59,"nodeType":"1274","messageId":"1275","endLine":64,"endColumn":61},{"ruleId":"1272","severity":1,"message":"1282","line":23,"column":33,"nodeType":"1274","messageId":"1275","endLine":23,"endColumn":35},{"ruleId":"1268","severity":1,"message":"1280","line":24,"column":35,"nodeType":"1270","messageId":"1281","endLine":24,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":27,"column":29,"nodeType":"1274","messageId":"1275","endLine":27,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":27,"column":61,"nodeType":"1274","messageId":"1275","endLine":27,"endColumn":63},{"ruleId":"1272","severity":1,"message":"1282","line":27,"column":88,"nodeType":"1274","messageId":"1275","endLine":27,"endColumn":90},{"ruleId":"1272","severity":1,"message":"1282","line":34,"column":40,"nodeType":"1274","messageId":"1275","endLine":34,"endColumn":42},{"ruleId":"1268","severity":1,"message":"1280","line":36,"column":35,"nodeType":"1270","messageId":"1281","endLine":36,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":39,"column":29,"nodeType":"1274","messageId":"1275","endLine":39,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":39,"column":67,"nodeType":"1274","messageId":"1275","endLine":39,"endColumn":69},{"ruleId":"1272","severity":1,"message":"1282","line":39,"column":108,"nodeType":"1274","messageId":"1275","endLine":39,"endColumn":110},{"ruleId":"1272","severity":1,"message":"1282","line":46,"column":40,"nodeType":"1274","messageId":"1275","endLine":46,"endColumn":42},{"ruleId":"1268","severity":1,"message":"1280","line":47,"column":35,"nodeType":"1270","messageId":"1281","endLine":47,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":50,"column":29,"nodeType":"1274","messageId":"1275","endLine":50,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":50,"column":68,"nodeType":"1274","messageId":"1275","endLine":50,"endColumn":70},{"ruleId":"1272","severity":1,"message":"1282","line":57,"column":40,"nodeType":"1274","messageId":"1275","endLine":57,"endColumn":42},{"ruleId":"1268","severity":1,"message":"1280","line":58,"column":35,"nodeType":"1270","messageId":"1281","endLine":58,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":61,"column":29,"nodeType":"1274","messageId":"1275","endLine":61,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":68,"column":40,"nodeType":"1274","messageId":"1275","endLine":68,"endColumn":42},{"ruleId":"1268","severity":1,"message":"1280","line":69,"column":35,"nodeType":"1270","messageId":"1281","endLine":69,"endColumn":37},{"ruleId":"1343","severity":1,"message":"1347","line":76,"column":8,"nodeType":"1345","endLine":76,"endColumn":29,"suggestions":"1372"},{"ruleId":"1343","severity":1,"message":"1373","line":50,"column":8,"nodeType":"1345","endLine":50,"endColumn":10,"suggestions":"1374"},{"ruleId":"1259","severity":1,"message":"1325","line":2,"column":28,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":35},{"ruleId":"1259","severity":1,"message":"1326","line":3,"column":9,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":12},{"ruleId":"1259","severity":1,"message":"1324","line":3,"column":14,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":25},{"ruleId":"1259","severity":1,"message":"1327","line":3,"column":35,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":45},{"ruleId":"1259","severity":1,"message":"1328","line":5,"column":10,"nodeType":"1261","messageId":"1262","endLine":5,"endColumn":15},{"ruleId":"1259","severity":1,"message":"1329","line":10,"column":5,"nodeType":"1261","messageId":"1262","endLine":10,"endColumn":17},{"ruleId":"1259","severity":1,"message":"1330","line":14,"column":5,"nodeType":"1261","messageId":"1262","endLine":14,"endColumn":12},{"ruleId":"1272","severity":1,"message":"1282","line":164,"column":47,"nodeType":"1274","messageId":"1275","endLine":164,"endColumn":49},{"ruleId":"1272","severity":1,"message":"1282","line":165,"column":59,"nodeType":"1274","messageId":"1275","endLine":165,"endColumn":61},{"ruleId":"1272","severity":1,"message":"1282","line":166,"column":61,"nodeType":"1274","messageId":"1275","endLine":166,"endColumn":63},{"ruleId":"1272","severity":1,"message":"1273","line":181,"column":38,"nodeType":"1274","messageId":"1275","endLine":181,"endColumn":40},{"ruleId":"1272","severity":1,"message":"1282","line":302,"column":80,"nodeType":"1274","messageId":"1275","endLine":302,"endColumn":82},{"ruleId":"1272","severity":1,"message":"1282","line":361,"column":80,"nodeType":"1274","messageId":"1275","endLine":361,"endColumn":82},{"ruleId":"1259","severity":1,"message":"1325","line":2,"column":28,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":35},{"ruleId":"1259","severity":1,"message":"1326","line":3,"column":9,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":12},{"ruleId":"1259","severity":1,"message":"1324","line":3,"column":14,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":25},{"ruleId":"1259","severity":1,"message":"1327","line":3,"column":35,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":45},{"ruleId":"1259","severity":1,"message":"1328","line":5,"column":10,"nodeType":"1261","messageId":"1262","endLine":5,"endColumn":15},{"ruleId":"1259","severity":1,"message":"1329","line":10,"column":5,"nodeType":"1261","messageId":"1262","endLine":10,"endColumn":17},{"ruleId":"1259","severity":1,"message":"1330","line":14,"column":5,"nodeType":"1261","messageId":"1262","endLine":14,"endColumn":12},{"ruleId":"1272","severity":1,"message":"1282","line":84,"column":40,"nodeType":"1274","messageId":"1275","endLine":84,"endColumn":42},{"ruleId":"1272","severity":1,"message":"1282","line":89,"column":38,"nodeType":"1274","messageId":"1275","endLine":89,"endColumn":40},{"ruleId":"1272","severity":1,"message":"1282","line":95,"column":35,"nodeType":"1274","messageId":"1275","endLine":95,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":95,"column":80,"nodeType":"1274","messageId":"1275","endLine":95,"endColumn":82},{"ruleId":"1272","severity":1,"message":"1282","line":100,"column":30,"nodeType":"1274","messageId":"1275","endLine":100,"endColumn":32},{"ruleId":"1272","severity":1,"message":"1282","line":100,"column":72,"nodeType":"1274","messageId":"1275","endLine":100,"endColumn":74},{"ruleId":"1272","severity":1,"message":"1282","line":132,"column":33,"nodeType":"1274","messageId":"1275","endLine":132,"endColumn":35},{"ruleId":"1272","severity":1,"message":"1282","line":307,"column":80,"nodeType":"1274","messageId":"1275","endLine":307,"endColumn":82},{"ruleId":"1272","severity":1,"message":"1282","line":342,"column":78,"nodeType":"1274","messageId":"1275","endLine":342,"endColumn":80},{"ruleId":"1272","severity":1,"message":"1282","line":376,"column":81,"nodeType":"1274","messageId":"1275","endLine":376,"endColumn":83},{"ruleId":"1259","severity":1,"message":"1375","line":3,"column":10,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":24},{"ruleId":"1259","severity":1,"message":"1326","line":4,"column":10,"nodeType":"1261","messageId":"1262","endLine":4,"endColumn":13},{"ruleId":"1259","severity":1,"message":"1376","line":39,"column":5,"nodeType":"1261","messageId":"1262","endLine":39,"endColumn":10},{"ruleId":"1259","severity":1,"message":"1377","line":40,"column":5,"nodeType":"1261","messageId":"1262","endLine":40,"endColumn":12},{"ruleId":"1259","severity":1,"message":"1378","line":41,"column":5,"nodeType":"1261","messageId":"1262","endLine":41,"endColumn":13},{"ruleId":"1259","severity":1,"message":"1379","line":43,"column":5,"nodeType":"1261","messageId":"1262","endLine":43,"endColumn":16},{"ruleId":"1259","severity":1,"message":"1380","line":44,"column":5,"nodeType":"1261","messageId":"1262","endLine":44,"endColumn":18},{"ruleId":"1259","severity":1,"message":"1381","line":45,"column":5,"nodeType":"1261","messageId":"1262","endLine":45,"endColumn":21},{"ruleId":"1259","severity":1,"message":"1337","line":6,"column":72,"nodeType":"1261","messageId":"1262","endLine":6,"endColumn":78},{"ruleId":"1259","severity":1,"message":"1382","line":7,"column":10,"nodeType":"1261","messageId":"1262","endLine":7,"endColumn":23},{"ruleId":"1259","severity":1,"message":"1383","line":7,"column":25,"nodeType":"1261","messageId":"1262","endLine":7,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":67,"column":37,"nodeType":"1274","messageId":"1275","endLine":67,"endColumn":39},{"ruleId":"1272","severity":1,"message":"1282","line":80,"column":44,"nodeType":"1274","messageId":"1275","endLine":80,"endColumn":46},{"ruleId":"1259","severity":1,"message":"1337","line":6,"column":72,"nodeType":"1261","messageId":"1262","endLine":6,"endColumn":78},{"ruleId":"1259","severity":1,"message":"1384","line":4,"column":10,"nodeType":"1261","messageId":"1262","endLine":4,"endColumn":14},{"ruleId":"1259","severity":1,"message":"1385","line":5,"column":8,"nodeType":"1261","messageId":"1262","endLine":5,"endColumn":24},{"ruleId":"1259","severity":1,"message":"1386","line":11,"column":3,"nodeType":"1261","messageId":"1262","endLine":11,"endColumn":7},{"ruleId":"1259","severity":1,"message":"1387","line":11,"column":9,"nodeType":"1261","messageId":"1262","endLine":11,"endColumn":17},{"ruleId":"1259","severity":1,"message":"1323","line":11,"column":19,"nodeType":"1261","messageId":"1262","endLine":11,"endColumn":23},{"ruleId":"1272","severity":1,"message":"1282","line":72,"column":38,"nodeType":"1274","messageId":"1275","endLine":72,"endColumn":40},{"ruleId":"1272","severity":1,"message":"1282","line":85,"column":36,"nodeType":"1274","messageId":"1275","endLine":85,"endColumn":38},{"ruleId":"1272","severity":1,"message":"1282","line":98,"column":44,"nodeType":"1274","messageId":"1275","endLine":98,"endColumn":46},{"ruleId":"1272","severity":1,"message":"1282","line":131,"column":44,"nodeType":"1274","messageId":"1275","endLine":131,"endColumn":46},{"ruleId":"1272","severity":1,"message":"1282","line":170,"column":74,"nodeType":"1274","messageId":"1275","endLine":170,"endColumn":76},{"ruleId":"1272","severity":1,"message":"1273","line":180,"column":87,"nodeType":"1274","messageId":"1275","endLine":180,"endColumn":89},{"ruleId":"1259","severity":1,"message":"1327","line":3,"column":40,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":50},{"ruleId":"1259","severity":1,"message":"1338","line":6,"column":10,"nodeType":"1261","messageId":"1262","endLine":6,"endColumn":23},{"ruleId":"1259","severity":1,"message":"1388","line":6,"column":25,"nodeType":"1261","messageId":"1262","endLine":6,"endColumn":31},{"ruleId":"1259","severity":1,"message":"1389","line":7,"column":8,"nodeType":"1261","messageId":"1262","endLine":7,"endColumn":13},{"ruleId":"1259","severity":1,"message":"1390","line":8,"column":10,"nodeType":"1261","messageId":"1262","endLine":8,"endColumn":18},{"ruleId":"1259","severity":1,"message":"1391","line":9,"column":8,"nodeType":"1261","messageId":"1262","endLine":9,"endColumn":14},{"ruleId":"1259","severity":1,"message":"1387","line":10,"column":8,"nodeType":"1261","messageId":"1262","endLine":10,"endColumn":16},{"ruleId":"1259","severity":1,"message":"1392","line":11,"column":8,"nodeType":"1261","messageId":"1262","endLine":11,"endColumn":19},{"ruleId":"1259","severity":1,"message":"1328","line":12,"column":10,"nodeType":"1261","messageId":"1262","endLine":12,"endColumn":15},{"ruleId":"1259","severity":1,"message":"1393","line":16,"column":8,"nodeType":"1261","messageId":"1262","endLine":16,"endColumn":28},{"ruleId":"1259","severity":1,"message":"1394","line":17,"column":8,"nodeType":"1261","messageId":"1262","endLine":17,"endColumn":22},{"ruleId":"1259","severity":1,"message":"1395","line":18,"column":8,"nodeType":"1261","messageId":"1262","endLine":18,"endColumn":18},{"ruleId":"1259","severity":1,"message":"1396","line":19,"column":8,"nodeType":"1261","messageId":"1262","endLine":19,"endColumn":22},{"ruleId":"1259","severity":1,"message":"1397","line":20,"column":10,"nodeType":"1261","messageId":"1262","endLine":20,"endColumn":26},{"ruleId":"1259","severity":1,"message":"1398","line":21,"column":8,"nodeType":"1261","messageId":"1262","endLine":21,"endColumn":18},{"ruleId":"1259","severity":1,"message":"1329","line":23,"column":5,"nodeType":"1261","messageId":"1262","endLine":23,"endColumn":17},{"ruleId":"1259","severity":1,"message":"1330","line":27,"column":5,"nodeType":"1261","messageId":"1262","endLine":27,"endColumn":12},{"ruleId":"1259","severity":1,"message":"1399","line":47,"column":7,"nodeType":"1261","messageId":"1262","endLine":47,"endColumn":22},{"ruleId":"1272","severity":1,"message":"1282","line":80,"column":41,"nodeType":"1274","messageId":"1275","endLine":80,"endColumn":43},{"ruleId":"1272","severity":1,"message":"1282","line":93,"column":50,"nodeType":"1274","messageId":"1275","endLine":93,"endColumn":52},{"ruleId":"1272","severity":1,"message":"1273","line":111,"column":73,"nodeType":"1274","messageId":"1275","endLine":111,"endColumn":75},{"ruleId":"1272","severity":1,"message":"1273","line":181,"column":96,"nodeType":"1274","messageId":"1275","endLine":181,"endColumn":98},{"ruleId":"1272","severity":1,"message":"1282","line":68,"column":70,"nodeType":"1274","messageId":"1275","endLine":68,"endColumn":72},{"ruleId":"1272","severity":1,"message":"1282","line":95,"column":21,"nodeType":"1274","messageId":"1275","endLine":95,"endColumn":23},{"ruleId":"1259","severity":1,"message":"1400","line":5,"column":9,"nodeType":"1261","messageId":"1262","endLine":5,"endColumn":19},{"ruleId":"1272","severity":1,"message":"1282","line":36,"column":25,"nodeType":"1274","messageId":"1275","endLine":36,"endColumn":27},{"ruleId":"1259","severity":1,"message":"1325","line":2,"column":28,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":35},{"ruleId":"1259","severity":1,"message":"1326","line":2,"column":54,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":57},{"ruleId":"1259","severity":1,"message":"1324","line":2,"column":59,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":70},{"ruleId":"1259","severity":1,"message":"1327","line":2,"column":80,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":90},{"ruleId":"1272","severity":1,"message":"1282","line":67,"column":68,"nodeType":"1274","messageId":"1275","endLine":67,"endColumn":70},{"ruleId":"1272","severity":1,"message":"1282","line":78,"column":28,"nodeType":"1274","messageId":"1275","endLine":78,"endColumn":30},{"ruleId":"1272","severity":1,"message":"1282","line":90,"column":29,"nodeType":"1274","messageId":"1275","endLine":90,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":97,"column":28,"nodeType":"1274","messageId":"1275","endLine":97,"endColumn":30},{"ruleId":"1272","severity":1,"message":"1282","line":104,"column":26,"nodeType":"1274","messageId":"1275","endLine":104,"endColumn":28},{"ruleId":"1272","severity":1,"message":"1282","line":111,"column":31,"nodeType":"1274","messageId":"1275","endLine":111,"endColumn":33},{"ruleId":"1272","severity":1,"message":"1282","line":123,"column":26,"nodeType":"1274","messageId":"1275","endLine":123,"endColumn":28},{"ruleId":"1272","severity":1,"message":"1282","line":130,"column":28,"nodeType":"1274","messageId":"1275","endLine":130,"endColumn":30},{"ruleId":"1272","severity":1,"message":"1282","line":137,"column":25,"nodeType":"1274","messageId":"1275","endLine":137,"endColumn":27},{"ruleId":"1272","severity":1,"message":"1282","line":142,"column":30,"nodeType":"1274","messageId":"1275","endLine":142,"endColumn":32},{"ruleId":"1272","severity":1,"message":"1282","line":142,"column":56,"nodeType":"1274","messageId":"1275","endLine":142,"endColumn":58},{"ruleId":"1272","severity":1,"message":"1282","line":155,"column":31,"nodeType":"1274","messageId":"1275","endLine":155,"endColumn":33},{"ruleId":"1272","severity":1,"message":"1282","line":170,"column":35,"nodeType":"1274","messageId":"1275","endLine":170,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1273","line":233,"column":63,"nodeType":"1274","messageId":"1275","endLine":233,"endColumn":65},{"ruleId":"1272","severity":1,"message":"1273","line":238,"column":61,"nodeType":"1274","messageId":"1275","endLine":238,"endColumn":63},{"ruleId":"1272","severity":1,"message":"1282","line":266,"column":127,"nodeType":"1274","messageId":"1275","endLine":266,"endColumn":129},{"ruleId":"1259","severity":1,"message":"1325","line":2,"column":28,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":35},{"ruleId":"1259","severity":1,"message":"1326","line":2,"column":54,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":57},{"ruleId":"1259","severity":1,"message":"1324","line":2,"column":59,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":70},{"ruleId":"1259","severity":1,"message":"1327","line":2,"column":80,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":90},{"ruleId":"1259","severity":1,"message":"1329","line":9,"column":5,"nodeType":"1261","messageId":"1262","endLine":9,"endColumn":17},{"ruleId":"1259","severity":1,"message":"1330","line":13,"column":5,"nodeType":"1261","messageId":"1262","endLine":13,"endColumn":12},{"ruleId":"1272","severity":1,"message":"1282","line":126,"column":23,"nodeType":"1274","messageId":"1275","endLine":126,"endColumn":25},{"ruleId":"1272","severity":1,"message":"1282","line":133,"column":68,"nodeType":"1274","messageId":"1275","endLine":133,"endColumn":70},{"ruleId":"1276","severity":1,"message":"1279","line":140,"column":17,"nodeType":"1261","messageId":"1278","endLine":140,"endColumn":18},{"ruleId":"1272","severity":1,"message":"1282","line":142,"column":74,"nodeType":"1274","messageId":"1275","endLine":142,"endColumn":76},{"ruleId":"1272","severity":1,"message":"1282","line":151,"column":28,"nodeType":"1274","messageId":"1275","endLine":151,"endColumn":30},{"ruleId":"1272","severity":1,"message":"1282","line":163,"column":29,"nodeType":"1274","messageId":"1275","endLine":163,"endColumn":31},{"ruleId":"1272","severity":1,"message":"1282","line":170,"column":28,"nodeType":"1274","messageId":"1275","endLine":170,"endColumn":30},{"ruleId":"1272","severity":1,"message":"1282","line":177,"column":26,"nodeType":"1274","messageId":"1275","endLine":177,"endColumn":28},{"ruleId":"1272","severity":1,"message":"1282","line":184,"column":31,"nodeType":"1274","messageId":"1275","endLine":184,"endColumn":33},{"ruleId":"1272","severity":1,"message":"1282","line":196,"column":26,"nodeType":"1274","messageId":"1275","endLine":196,"endColumn":28},{"ruleId":"1272","severity":1,"message":"1282","line":203,"column":28,"nodeType":"1274","messageId":"1275","endLine":203,"endColumn":30},{"ruleId":"1272","severity":1,"message":"1282","line":210,"column":25,"nodeType":"1274","messageId":"1275","endLine":210,"endColumn":27},{"ruleId":"1272","severity":1,"message":"1282","line":215,"column":30,"nodeType":"1274","messageId":"1275","endLine":215,"endColumn":32},{"ruleId":"1272","severity":1,"message":"1282","line":215,"column":56,"nodeType":"1274","messageId":"1275","endLine":215,"endColumn":58},{"ruleId":"1272","severity":1,"message":"1282","line":228,"column":31,"nodeType":"1274","messageId":"1275","endLine":228,"endColumn":33},{"ruleId":"1272","severity":1,"message":"1282","line":292,"column":34,"nodeType":"1274","messageId":"1275","endLine":292,"endColumn":36},{"ruleId":"1272","severity":1,"message":"1282","line":317,"column":127,"nodeType":"1274","messageId":"1275","endLine":317,"endColumn":129},{"ruleId":"1259","severity":1,"message":"1401","line":2,"column":43,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":52},{"ruleId":"1259","severity":1,"message":"1388","line":4,"column":25,"nodeType":"1261","messageId":"1262","endLine":4,"endColumn":31},{"ruleId":"1259","severity":1,"message":"1335","line":7,"column":8,"nodeType":"1261","messageId":"1262","endLine":7,"endColumn":13},{"ruleId":"1263","severity":1,"message":"1264","line":10,"column":5,"nodeType":"1265","messageId":"1266","endLine":12,"endColumn":6},{"ruleId":"1402","severity":1,"message":"1403","line":26,"column":9,"nodeType":"1404","messageId":"1405","endLine":32,"endColumn":10},{"ruleId":"1406","severity":1,"message":"1407","line":30,"column":13,"nodeType":"1408","messageId":"1409","endLine":31,"endColumn":67},{"ruleId":"1343","severity":1,"message":"1410","line":79,"column":7,"nodeType":"1345","endLine":79,"endColumn":27,"suggestions":"1411"},{"ruleId":"1343","severity":1,"message":"1410","line":89,"column":7,"nodeType":"1345","endLine":89,"endColumn":26,"suggestions":"1412"},{"ruleId":"1343","severity":1,"message":"1410","line":99,"column":7,"nodeType":"1345","endLine":99,"endColumn":28,"suggestions":"1413"},{"ruleId":"1343","severity":1,"message":"1410","line":129,"column":7,"nodeType":"1345","endLine":129,"endColumn":78,"suggestions":"1414"},{"ruleId":"1259","severity":1,"message":"1415","line":1,"column":17,"nodeType":"1261","messageId":"1262","endLine":1,"endColumn":25},{"ruleId":"1259","severity":1,"message":"1416","line":3,"column":24,"nodeType":"1261","messageId":"1262","endLine":3,"endColumn":35},{"ruleId":"1343","severity":1,"message":"1373","line":12,"column":8,"nodeType":"1345","endLine":12,"endColumn":10,"suggestions":"1417"},{"ruleId":"1259","severity":1,"message":"1401","line":2,"column":43,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":52},{"ruleId":"1259","severity":1,"message":"1338","line":4,"column":10,"nodeType":"1261","messageId":"1262","endLine":4,"endColumn":23},{"ruleId":"1259","severity":1,"message":"1325","line":2,"column":28,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":35},{"ruleId":"1259","severity":1,"message":"1326","line":2,"column":54,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":57},{"ruleId":"1259","severity":1,"message":"1324","line":2,"column":59,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":70},{"ruleId":"1259","severity":1,"message":"1327","line":2,"column":80,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":90},{"ruleId":"1259","severity":1,"message":"1338","line":4,"column":10,"nodeType":"1261","messageId":"1262","endLine":4,"endColumn":23},{"ruleId":"1259","severity":1,"message":"1388","line":4,"column":25,"nodeType":"1261","messageId":"1262","endLine":4,"endColumn":31},{"ruleId":"1259","severity":1,"message":"1389","line":5,"column":8,"nodeType":"1261","messageId":"1262","endLine":5,"endColumn":13},{"ruleId":"1259","severity":1,"message":"1390","line":6,"column":10,"nodeType":"1261","messageId":"1262","endLine":6,"endColumn":18},{"ruleId":"1259","severity":1,"message":"1418","line":13,"column":8,"nodeType":"1261","messageId":"1262","endLine":13,"endColumn":17},{"ruleId":"1259","severity":1,"message":"1393","line":16,"column":8,"nodeType":"1261","messageId":"1262","endLine":16,"endColumn":28},{"ruleId":"1259","severity":1,"message":"1394","line":17,"column":8,"nodeType":"1261","messageId":"1262","endLine":17,"endColumn":22},{"ruleId":"1259","severity":1,"message":"1395","line":18,"column":8,"nodeType":"1261","messageId":"1262","endLine":18,"endColumn":18},{"ruleId":"1259","severity":1,"message":"1396","line":19,"column":8,"nodeType":"1261","messageId":"1262","endLine":19,"endColumn":22},{"ruleId":"1276","severity":1,"message":"1279","line":98,"column":17,"nodeType":"1261","messageId":"1278","endLine":98,"endColumn":18},{"ruleId":"1272","severity":1,"message":"1282","line":138,"column":44,"nodeType":"1274","messageId":"1275","endLine":138,"endColumn":46},{"ruleId":"1272","severity":1,"message":"1282","line":151,"column":31,"nodeType":"1274","messageId":"1275","endLine":151,"endColumn":33},{"ruleId":"1272","severity":1,"message":"1282","line":157,"column":78,"nodeType":"1274","messageId":"1275","endLine":157,"endColumn":80},{"ruleId":"1272","severity":1,"message":"1282","line":168,"column":70,"nodeType":"1274","messageId":"1275","endLine":168,"endColumn":72},{"ruleId":"1272","severity":1,"message":"1282","line":174,"column":79,"nodeType":"1274","messageId":"1275","endLine":174,"endColumn":81},{"ruleId":"1272","severity":1,"message":"1282","line":185,"column":75,"nodeType":"1274","messageId":"1275","endLine":185,"endColumn":77},{"ruleId":"1272","severity":1,"message":"1282","line":218,"column":31,"nodeType":"1274","messageId":"1275","endLine":218,"endColumn":33},{"ruleId":"1276","severity":1,"message":"1279","line":314,"column":17,"nodeType":"1261","messageId":"1278","endLine":314,"endColumn":18},{"ruleId":"1272","severity":1,"message":"1282","line":417,"column":20,"nodeType":"1274","messageId":"1275","endLine":417,"endColumn":22},{"ruleId":"1272","severity":1,"message":"1282","line":426,"column":26,"nodeType":"1274","messageId":"1275","endLine":426,"endColumn":28},{"ruleId":"1272","severity":1,"message":"1282","line":452,"column":127,"nodeType":"1274","messageId":"1275","endLine":452,"endColumn":129},{"ruleId":"1272","severity":1,"message":"1282","line":656,"column":78,"nodeType":"1274","messageId":"1275","endLine":656,"endColumn":80},{"ruleId":"1272","severity":1,"message":"1273","line":685,"column":81,"nodeType":"1274","messageId":"1275","endLine":685,"endColumn":83},{"ruleId":"1259","severity":1,"message":"1327","line":6,"column":10,"nodeType":"1261","messageId":"1262","endLine":6,"endColumn":20},{"ruleId":"1259","severity":1,"message":"1419","line":6,"column":30,"nodeType":"1261","messageId":"1262","endLine":6,"endColumn":35},{"ruleId":"1259","severity":1,"message":"1418","line":11,"column":8,"nodeType":"1261","messageId":"1262","endLine":11,"endColumn":17},{"ruleId":"1259","severity":1,"message":"1396","line":15,"column":8,"nodeType":"1261","messageId":"1262","endLine":15,"endColumn":22},{"ruleId":"1259","severity":1,"message":"1394","line":16,"column":8,"nodeType":"1261","messageId":"1262","endLine":16,"endColumn":22},{"ruleId":"1259","severity":1,"message":"1393","line":17,"column":8,"nodeType":"1261","messageId":"1262","endLine":17,"endColumn":28},{"ruleId":"1259","severity":1,"message":"1420","line":20,"column":10,"nodeType":"1261","messageId":"1262","endLine":20,"endColumn":29},{"ruleId":"1259","severity":1,"message":"1421","line":22,"column":5,"nodeType":"1261","messageId":"1262","endLine":22,"endColumn":9},{"ruleId":"1272","severity":1,"message":"1282","line":206,"column":31,"nodeType":"1274","messageId":"1275","endLine":206,"endColumn":33},{"ruleId":"1272","severity":1,"message":"1282","line":213,"column":78,"nodeType":"1274","messageId":"1275","endLine":213,"endColumn":80},{"ruleId":"1272","severity":1,"message":"1282","line":227,"column":70,"nodeType":"1274","messageId":"1275","endLine":227,"endColumn":72},{"ruleId":"1272","severity":1,"message":"1282","line":235,"column":79,"nodeType":"1274","messageId":"1275","endLine":235,"endColumn":81},{"ruleId":"1272","severity":1,"message":"1282","line":248,"column":75,"nodeType":"1274","messageId":"1275","endLine":248,"endColumn":77},{"ruleId":"1272","severity":1,"message":"1282","line":284,"column":31,"nodeType":"1274","messageId":"1275","endLine":284,"endColumn":33},{"ruleId":"1272","severity":1,"message":"1282","line":299,"column":53,"nodeType":"1274","messageId":"1275","endLine":299,"endColumn":55},{"ruleId":"1272","severity":1,"message":"1282","line":311,"column":26,"nodeType":"1274","messageId":"1275","endLine":311,"endColumn":28},{"ruleId":"1272","severity":1,"message":"1282","line":334,"column":144,"nodeType":"1274","messageId":"1275","endLine":334,"endColumn":146},{"ruleId":"1272","severity":1,"message":"1282","line":518,"column":86,"nodeType":"1274","messageId":"1275","endLine":518,"endColumn":88},{"ruleId":"1272","severity":1,"message":"1273","line":548,"column":85,"nodeType":"1274","messageId":"1275","endLine":548,"endColumn":87},{"ruleId":"1259","severity":1,"message":"1291","line":2,"column":80,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":85},{"ruleId":"1259","severity":1,"message":"1388","line":4,"column":25,"nodeType":"1261","messageId":"1262","endLine":4,"endColumn":31},{"ruleId":"1259","severity":1,"message":"1422","line":6,"column":20,"nodeType":"1261","messageId":"1262","endLine":6,"endColumn":33},{"ruleId":"1272","severity":1,"message":"1282","line":52,"column":45,"nodeType":"1274","messageId":"1275","endLine":52,"endColumn":47},{"ruleId":"1272","severity":1,"message":"1282","line":83,"column":37,"nodeType":"1274","messageId":"1275","endLine":83,"endColumn":39},{"ruleId":"1272","severity":1,"message":"1282","line":85,"column":35,"nodeType":"1274","messageId":"1275","endLine":85,"endColumn":37},{"ruleId":"1272","severity":1,"message":"1282","line":96,"column":27,"nodeType":"1274","messageId":"1275","endLine":96,"endColumn":29},{"ruleId":"1272","severity":1,"message":"1282","line":114,"column":45,"nodeType":"1274","messageId":"1275","endLine":114,"endColumn":47},{"ruleId":"1272","severity":1,"message":"1282","line":149,"column":53,"nodeType":"1274","messageId":"1275","endLine":149,"endColumn":55},{"ruleId":"1343","severity":1,"message":"1373","line":172,"column":8,"nodeType":"1345","endLine":172,"endColumn":10,"suggestions":"1423"},{"ruleId":"1268","severity":1,"message":"1280","line":52,"column":35,"nodeType":"1270","messageId":"1281","endLine":52,"endColumn":37},{"ruleId":"1268","severity":1,"message":"1269","line":482,"column":86,"nodeType":"1270","messageId":"1271","endLine":482,"endColumn":88},{"ruleId":"1268","severity":1,"message":"1269","line":505,"column":38,"nodeType":"1270","messageId":"1271","endLine":505,"endColumn":40},{"ruleId":"1272","severity":1,"message":"1282","line":509,"column":36,"nodeType":"1274","messageId":"1275","endLine":509,"endColumn":38},{"ruleId":"1272","severity":1,"message":"1282","line":509,"column":70,"nodeType":"1274","messageId":"1275","endLine":509,"endColumn":72},{"ruleId":"1272","severity":1,"message":"1282","line":509,"column":103,"nodeType":"1274","messageId":"1275","endLine":509,"endColumn":105},{"ruleId":"1268","severity":1,"message":"1269","line":516,"column":38,"nodeType":"1270","messageId":"1271","endLine":516,"endColumn":40},{"ruleId":"1272","severity":1,"message":"1282","line":520,"column":38,"nodeType":"1274","messageId":"1275","endLine":520,"endColumn":40},{"ruleId":"1272","severity":1,"message":"1282","line":520,"column":71,"nodeType":"1274","messageId":"1275","endLine":520,"endColumn":73},{"ruleId":"1268","severity":1,"message":"1269","line":527,"column":38,"nodeType":"1270","messageId":"1271","endLine":527,"endColumn":40},{"ruleId":"1272","severity":1,"message":"1282","line":531,"column":37,"nodeType":"1274","messageId":"1275","endLine":531,"endColumn":39},{"ruleId":"1268","severity":1,"message":"1269","line":538,"column":38,"nodeType":"1270","messageId":"1271","endLine":538,"endColumn":40},{"ruleId":"1268","severity":1,"message":"1280","line":552,"column":24,"nodeType":"1270","messageId":"1281","endLine":552,"endColumn":26},{"ruleId":"1343","severity":1,"message":"1424","line":563,"column":8,"nodeType":"1345","endLine":563,"endColumn":71,"suggestions":"1425"},{"ruleId":"1259","severity":1,"message":"1426","line":7,"column":8,"nodeType":"1261","messageId":"1262","endLine":7,"endColumn":18},{"ruleId":"1272","severity":1,"message":"1282","line":41,"column":74,"nodeType":"1274","messageId":"1275","endLine":41,"endColumn":76},{"ruleId":"1272","severity":1,"message":"1282","line":51,"column":49,"nodeType":"1274","messageId":"1275","endLine":51,"endColumn":51},{"ruleId":"1272","severity":1,"message":"1282","line":60,"column":54,"nodeType":"1274","messageId":"1275","endLine":60,"endColumn":56},{"ruleId":"1427","severity":1,"message":"1428","line":192,"column":33,"nodeType":"1429","messageId":"1430","endLine":192,"endColumn":64},{"ruleId":"1259","severity":1,"message":"1291","line":2,"column":80,"nodeType":"1261","messageId":"1262","endLine":2,"endColumn":85},{"ruleId":"1259","severity":1,"message":"1388","line":4,"column":25,"nodeType":"1261","messageId":"1262","endLine":4,"endColumn":31},{"ruleId":"1259","severity":1,"message":"1422","line":6,"column":20,"nodeType":"1261","messageId":"1262","endLine":6,"endColumn":33},{"ruleId":"1272","severity":1,"message":"1282","line":49,"column":47,"nodeType":"1274","messageId":"1275","endLine":49,"endColumn":49},{"ruleId":"1272","severity":1,"message":"1282","line":82,"column":37,"nodeType":"1274","messageId":"1275","endLine":82,"endColumn":39},{"ruleId":"1272","severity":1,"message":"1282","line":89,"column":27,"nodeType":"1274","messageId":"1275","endLine":89,"endColumn":29},{"ruleId":"1259","severity":1,"message":"1335","line":9,"column":8,"nodeType":"1261","messageId":"1262","endLine":9,"endColumn":13},{"ruleId":"1276","severity":1,"message":"1431","line":23,"column":21,"nodeType":"1261","messageId":"1278","endLine":23,"endColumn":29},{"ruleId":"1276","severity":1,"message":"1432","line":24,"column":21,"nodeType":"1261","messageId":"1278","endLine":24,"endColumn":28},{"ruleId":"1276","severity":1,"message":"1433","line":34,"column":21,"nodeType":"1261","messageId":"1278","endLine":34,"endColumn":27},{"ruleId":"1276","severity":1,"message":"1434","line":35,"column":21,"nodeType":"1261","messageId":"1278","endLine":35,"endColumn":26},{"ruleId":"1259","severity":1,"message":"1335","line":11,"column":8,"nodeType":"1261","messageId":"1262","endLine":11,"endColumn":13},{"ruleId":"1259","severity":1,"message":"1435","line":30,"column":5,"nodeType":"1261","messageId":"1262","endLine":30,"endColumn":21},{"ruleId":"1259","severity":1,"message":"1436","line":31,"column":5,"nodeType":"1261","messageId":"1262","endLine":31,"endColumn":18},{"ruleId":"1259","severity":1,"message":"1437","line":32,"column":5,"nodeType":"1261","messageId":"1262","endLine":32,"endColumn":18},{"ruleId":"1272","severity":1,"message":"1282","line":54,"column":53,"nodeType":"1274","messageId":"1275","endLine":54,"endColumn":55},{"ruleId":"1272","severity":1,"message":"1282","line":81,"column":62,"nodeType":"1274","messageId":"1275","endLine":81,"endColumn":64},{"ruleId":"1272","severity":1,"message":"1282","line":83,"column":44,"nodeType":"1274","messageId":"1275","endLine":83,"endColumn":46},{"ruleId":"1259","severity":1,"message":"1438","line":5,"column":10,"nodeType":"1261","messageId":"1262","endLine":5,"endColumn":26},{"ruleId":"1272","severity":1,"message":"1282","line":28,"column":28,"nodeType":"1274","messageId":"1275","endLine":28,"endColumn":30},{"ruleId":"1272","severity":1,"message":"1273","line":29,"column":29,"nodeType":"1274","messageId":"1275","endLine":29,"endColumn":31},{"ruleId":"1259","severity":1,"message":"1389","line":4,"column":8,"nodeType":"1261","messageId":"1262","endLine":4,"endColumn":13},{"ruleId":"1259","severity":1,"message":"1394","line":5,"column":8,"nodeType":"1261","messageId":"1262","endLine":5,"endColumn":22},{"ruleId":"1259","severity":1,"message":"1393","line":6,"column":8,"nodeType":"1261","messageId":"1262","endLine":6,"endColumn":28},{"ruleId":"1259","severity":1,"message":"1426","line":7,"column":8,"nodeType":"1261","messageId":"1262","endLine":7,"endColumn":18},{"ruleId":"1259","severity":1,"message":"1335","line":8,"column":8,"nodeType":"1261","messageId":"1262","endLine":8,"endColumn":13},{"ruleId":"1343","severity":1,"message":"1373","line":105,"column":8,"nodeType":"1345","endLine":105,"endColumn":10,"suggestions":"1439"},{"ruleId":"1343","severity":1,"message":"1373","line":55,"column":6,"nodeType":"1345","endLine":55,"endColumn":8,"suggestions":"1440"},{"ruleId":"1343","severity":1,"message":"1373","line":51,"column":6,"nodeType":"1345","endLine":51,"endColumn":8,"suggestions":"1441"},{"ruleId":"1272","severity":1,"message":"1282","line":45,"column":44,"nodeType":"1274","messageId":"1275","endLine":45,"endColumn":46},{"ruleId":"1272","severity":1,"message":"1282","line":58,"column":44,"nodeType":"1274","messageId":"1275","endLine":58,"endColumn":46},{"ruleId":"1272","severity":1,"message":"1282","line":177,"column":33,"nodeType":"1274","messageId":"1275","endLine":177,"endColumn":35},{"ruleId":"1272","severity":1,"message":"1282","line":178,"column":33,"nodeType":"1274","messageId":"1275","endLine":178,"endColumn":35},{"ruleId":"1272","severity":1,"message":"1282","line":192,"column":33,"nodeType":"1274","messageId":"1275","endLine":192,"endColumn":35},{"ruleId":"1272","severity":1,"message":"1282","line":193,"column":36,"nodeType":"1274","messageId":"1275","endLine":193,"endColumn":38},{"ruleId":"1272","severity":1,"message":"1282","line":194,"column":63,"nodeType":"1274","messageId":"1275","endLine":194,"endColumn":65},{"ruleId":"1272","severity":1,"message":"1282","line":241,"column":40,"nodeType":"1274","messageId":"1275","endLine":241,"endColumn":42},{"ruleId":"1272","severity":1,"message":"1282","line":242,"column":44,"nodeType":"1274","messageId":"1275","endLine":242,"endColumn":46},{"ruleId":"1259","severity":1,"message":"1442","line":15,"column":8,"nodeType":"1261","messageId":"1262","endLine":15,"endColumn":22},{"ruleId":"1259","severity":1,"message":"1342","line":18,"column":10,"nodeType":"1261","messageId":"1262","endLine":18,"endColumn":21},{"ruleId":"1272","severity":1,"message":"1282","line":132,"column":57,"nodeType":"1274","messageId":"1275","endLine":132,"endColumn":59},{"ruleId":"1272","severity":1,"message":"1282","line":155,"column":86,"nodeType":"1274","messageId":"1275","endLine":155,"endColumn":88},{"ruleId":"1272","severity":1,"message":"1282","line":175,"column":52,"nodeType":"1274","messageId":"1275","endLine":175,"endColumn":54},{"ruleId":"1301","severity":1,"message":"1302","line":176,"column":109,"nodeType":"1303","endLine":176,"endColumn":192},{"ruleId":"1272","severity":1,"message":"1282","line":194,"column":105,"nodeType":"1274","messageId":"1275","endLine":194,"endColumn":107},"no-native-reassign",["1443"],"no-negated-in-lhs",["1444"],"no-unused-vars","'FiChevronRight' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'joinType' is assigned a value but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-redeclare","'newState' is already defined.","redeclared","'i' is already defined.","Array.prototype.map() expects a return value from arrow function.","expectedInside","Expected '===' and instead saw '=='.","'emailjs' is defined but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["1445","1446"],["1447","1448"],"'FiXSquare' is defined but never used.","'Alert' is defined but never used.",["1449","1450"],["1451","1452"],["1453","1454"],["1455","1456"],"no-dupe-keys","Duplicate key 'updateShiftTypes'.","ObjectExpression","'statusConfirmPassword' is assigned a value but never used.","'navbarContainer' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'DataGrid' is defined but never used.","'NavLink' is defined but never used.","'name' is assigned a value but never used.","'Page' is defined but never used.","'Label' is defined but never used.","'Scrollbar' is defined but never used.","'SearchNotFound' is defined but never used.","'sentenceCase' is defined but never used.","'Avatar' is defined but never used.","'TablePagination' is defined but never used.","'EmployeeToolbar' is defined but never used.","'EmployeeObj' is defined but never used.","'filterName' is assigned a value but never used.","'filteredUsers' is assigned a value but never used.","'page' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","'Grid' is defined but never used.","'CardContent' is defined but never used.","'Divider' is defined but never used.","'Box' is defined but never used.","'InputLabel' is defined but never used.","'Image' is defined but never used.","'productTypes' is assigned a value but never used.","'typeSet' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","unsafeRefs","Duplicate key 'InfomationBillEdit'.","'axios' is defined but never used.","'infoUser' is assigned a value but never used.","'Button' is defined but never used.","'BiPlusMedical' is defined but never used.","'IconButton' is defined but never used.","'FiEdit' is defined but never used.","'FiTrash2' is defined but never used.","'useDispatch' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'listReceipt'. Either include it or remove the dependency array.","ArrayExpression",["1457"],"React Hook React.useEffect has missing dependencies: 'listReciept' and 'nowTime'. Either include them or remove the dependency array.",["1458"],"'RiMoneyDollarCircleFill' is defined but never used.","'BsCashCoin' is defined but never used.","'salary' is assigned a value but never used.","'listReciept' is assigned a value but never used.","'totalMoney' is assigned a value but never used.","'setTotalMoney' is assigned a value but never used.","'money' is assigned a value but never used.","'realDate' is already defined.","'date' is already defined.","React Hook React.useEffect has missing dependencies: 'listTimeKeeping' and 'nowTime'. Either include them or remove the dependency array.",["1459"],"'importProduct' is already defined.","'exportProduct' is already defined.","React Hook React.useEffect has missing dependencies: 'listProduct', 'listReciept', and 'nowTime'. Either include them or remove the dependency array.",["1460"],"React Hook React.useEffect has a missing dependency: 'listReciept'. Either include it or remove the dependency array.",["1461"],"'now' is defined but never used.","'title' is assigned a value but never used.","Function declared in a loop contains unsafe references to variable(s) 'moneyDoanhThu', 'moneyTienGoc'.","React Hook React.useEffect has missing dependencies: 'DateInMonth', 'DateInWeek', 'DateInYear', 'GrowthPercent', 'nowTime', 'totalMoneyInMonth', and 'totalMoneyInWeek'. Either include them or remove the dependency array.",["1462"],"'listUsers' is assigned a value but never used.",["1463"],"React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["1464"],"'visuallyHidden' is defined but never used.","'order' is assigned a value but never used.","'orderBy' is assigned a value but never used.","'rowCount' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'onRequestSort' is assigned a value but never used.","'onSelectAllClick' is assigned a value but never used.","'AiOutlineEdit' is defined but never used.","'AiFillDelete' is defined but never used.","'Icon' is defined but never used.","'moreVerticalFill' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'BiEdit' is defined but never used.","'Stack' is defined but never used.","'GiCancel' is defined but never used.","'Select' is defined but never used.","'FormControl' is defined but never used.","'LocalizationProvider' is defined but never used.","'AdapterDateFns' is defined but never used.","'DatePicker' is defined but never used.","'DateTimePicker' is defined but never used.","'AiFillPlusCircle' is defined but never used.","'CancelIcon' is defined but never used.","'StyledTextField' is assigned a value but never used.","'GiPayMoney' is defined but never used.","'TextField' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","React Hook React.useCallback has a missing dependency: 'inputProps'. Either include it or remove the dependency array.",["1465"],["1466"],["1467"],["1468"],"'useState' is defined but never used.","'useSelector' is defined but never used.",["1469"],"'GoodImage' is defined but never used.","'Modal' is defined but never used.","'GiConsoleController' is defined but never used.","'Link' is defined but never used.","'GiVampireCape' is defined but never used.",["1470"],"React Hook React.useEffect has missing dependencies: 'dispatch' and 'listMAHD'. Either include them or remove the dependency array.",["1471"],"'TimePicker' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'fromHour' is already defined.","'fromMin' is already defined.","'toHour' is already defined.","'toMin' is already defined.","'listProductInfor' is assigned a value but never used.","'joinTypeInfor' is assigned a value but never used.","'listTypeInfor' is assigned a value but never used.","'FaCommentsDollar' is defined but never used.",["1472"],["1473"],["1474"],"'TableContainer' is defined but never used.","no-global-assign","no-unsafe-negation",{"messageId":"1475","fix":"1476","desc":"1477"},{"messageId":"1478","fix":"1479","desc":"1480"},{"messageId":"1475","fix":"1481","desc":"1477"},{"messageId":"1478","fix":"1482","desc":"1480"},{"messageId":"1475","fix":"1483","desc":"1477"},{"messageId":"1478","fix":"1484","desc":"1480"},{"messageId":"1475","fix":"1485","desc":"1477"},{"messageId":"1478","fix":"1486","desc":"1480"},{"messageId":"1475","fix":"1487","desc":"1477"},{"messageId":"1478","fix":"1488","desc":"1480"},{"messageId":"1475","fix":"1489","desc":"1477"},{"messageId":"1478","fix":"1490","desc":"1480"},{"desc":"1491","fix":"1492"},{"desc":"1493","fix":"1494"},{"desc":"1495","fix":"1496"},{"desc":"1497","fix":"1498"},{"desc":"1499","fix":"1500"},{"desc":"1501","fix":"1502"},{"desc":"1493","fix":"1503"},{"desc":"1504","fix":"1505"},{"desc":"1506","fix":"1507"},{"desc":"1506","fix":"1508"},{"desc":"1506","fix":"1509"},{"desc":"1510","fix":"1511"},{"desc":"1504","fix":"1512"},{"desc":"1504","fix":"1513"},{"desc":"1514","fix":"1515"},{"desc":"1504","fix":"1516"},{"desc":"1504","fix":"1517"},{"desc":"1504","fix":"1518"},"removeEscape",{"range":"1519","text":"1520"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1521","text":"1522"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1523","text":"1520"},{"range":"1524","text":"1522"},{"range":"1525","text":"1520"},{"range":"1526","text":"1522"},{"range":"1527","text":"1520"},{"range":"1528","text":"1522"},{"range":"1529","text":"1520"},{"range":"1530","text":"1522"},{"range":"1531","text":"1520"},{"range":"1532","text":"1522"},"Update the dependencies array to be: [typeCheck, value1, value, listReceipt]",{"range":"1533","text":"1534"},"Update the dependencies array to be: [listReciept, nowTime, typeHeaderDashboard]",{"range":"1535","text":"1536"},"Update the dependencies array to be: [listTimeKeeping, nowTime, typeHeaderDashboard]",{"range":"1537","text":"1538"},"Update the dependencies array to be: [listProduct, listReciept, nowTime, typeHeaderDashboard]",{"range":"1539","text":"1540"},"Update the dependencies array to be: [listReciept, value]",{"range":"1541","text":"1542"},"Update the dependencies array to be: [typeTimeDashboard, growth, typeMonth, typeYear, nowTime, DateInYear, GrowthPercent, DateInWeek, totalMoneyInWeek, totalMoneyInMonth, DateInMonth]",{"range":"1543","text":"1544"},{"range":"1545","text":"1536"},"Update the dependencies array to be: [dispatch]",{"range":"1546","text":"1547"},"Update the dependencies array to be: [inputProps]",{"range":"1548","text":"1549"},{"range":"1550","text":"1549"},{"range":"1551","text":"1549"},"Update the dependencies array to be: [cancelOnEscape, inputProps, handleRequestSearch, handleCancel]",{"range":"1552","text":"1553"},{"range":"1554","text":"1547"},{"range":"1555","text":"1547"},"Update the dependencies array to be: [typeReciept, typeByDate, listReciept, statusSelectAll, search, dispatch, listMAHD]",{"range":"1556","text":"1557"},{"range":"1558","text":"1547"},{"range":"1559","text":"1547"},{"range":"1560","text":"1547"},[3704,3705],"",[3704,3704],"\\",[3720,3721],[3720,3720],[3233,3234],[3233,3233],[3249,3250],[3249,3249],[5442,5443],[5442,5442],[5458,5459],[5458,5458],[3476,3502],"[typeCheck, value1, value, listReceipt]",[2697,2718],"[listReciept, nowTime, typeHeaderDashboard]",[4991,5012],"[listTimeKeeping, nowTime, typeHeaderDashboard]",[7551,7572],"[listProduct, listReciept, nowTime, typeHeaderDashboard]",[2518,2525],"[listReciept, value]",[17969,18017],"[typeTimeDashboard, growth, typeMonth, typeYear, nowTime, DateInYear, GrowthPercent, DateInWeek, totalMoneyInWeek, totalMoneyInMonth, DateInMonth]",[3077,3098],[1555,1557],"[dispatch]",[2067,2087],"[inputProps]",[2288,2307],[2525,2546],[3292,3363],"[cancelOnEscape, inputProps, handleRequestSearch, handleCancel]",[322,324],[5811,5813],[27259,27322],"[typeReciept, typeByDate, listReciept, statusSelectAll, search, dispatch, listMAHD]",[2265,2267],[1535,1537],[1464,1466]]