[{"D:\\Workspace\\university-project\\SE100Project\\client\\src\\index.js":"1","D:\\Workspace\\university-project\\SE100Project\\client\\src\\App.js":"2","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Store.js":"3","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Router\\DirectionURL.js":"4","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\LoginStatusReducer.js":"5","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\TypeStatusReducer.js":"6","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\DistrictReducer.js":"7","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\ProvinceReducer.js":"8","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\InfoUserReducer.js":"9","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\ObjectEditShiftReducer.js":"10","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\ListShiftReducer.js":"11","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\RoleReducer.js":"12","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\ConfirmModalReducer.js":"13","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\chooseTypeProduct.js":"14","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\ListProductReducer.js":"15","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\InfoUpdateProduct.js":"16","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\typeProductReducer.js":"17","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\TypeProductValueReducer.js":"18","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\AlertReducer.js":"19","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\SidebarOpenStatus.js":"20","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddShiftReducer.js":"21","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusDarkModeReducer.js":"22","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditShiftReducer.js":"23","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusModalConfirmPassword.js":"24","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusConfirmReducer.js":"25","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditTypeReducer.js":"26","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusYesConfirmReducer.js":"27","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateEmployeeReducer.js":"28","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusDeleteConfirmReducer.js":"29","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddEmployeeReducer.js":"30","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusPayMoneyStatus.js":"31","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateGoodReducer.js":"32","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddTypeReducer.js":"33","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\GoodManager\\UpdateTypeStatus.js":"34","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\GoodManager\\AddGoodStatus.js":"35","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\GoodManager\\ExcelInstructionStatus.js":"36","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\SellProduct\\StatusShowHistoryRecieptReducer.js":"37","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\SellProduct\\InfomationBillEdit.js":"38","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\SellProduct\\StatusEditInfomationBill.js":"39","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\SellProduct\\ShoppingBagsReducer.js":"40","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\SellProduct\\ListRecieptReducer.js":"41","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\employeeListReducer.js":"42","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\employeeSackedListReducer.js":"43","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\addNextWeekTimeKeepingStatus.js":"44","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\updateNextWeekTimeKeepingStatus.js":"45","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\currentEditEmployeeReducer.js":"46","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\nextWeekTimeKeepingReducer.js":"47","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\updateNextWeekTimeKeepingValue.js":"48","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\addTimeKeepingStatus.js":"49","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\currentEmployeeViewValue.js":"50","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\listShiftAssignReducer.js":"51","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\updateTimeKeepingStatus.js":"52","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\currentShiftInfoReducer.js":"53","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\addEmployeeToShiftStatus.js":"54","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\listTimeKeepingReducer.js":"55","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\RecieptManager\\TypeReciept.js":"56","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\updateTimeKeeperValue.js":"57","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\RecieptManager\\TypeByDate.js":"58","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\RecieptManager\\SearchReducer.js":"59","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\RecieptManager\\StatusSelectAll.js":"60","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Dashboard\\MonthSelectReducer.js":"61","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Dashboard\\TypeTimeDashboard.js":"62","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Dashboard\\YearSelectReducer.js":"63","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Dashboard\\TypeHeaderDashboard.js":"64","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Profile\\StatusModalAddCoupon.js":"65","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Profile\\StatusEditCoupon.js":"66","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Profile\\ObjectEditCoupon.js":"67","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\RecieptManager\\ListRecieptDelete.js":"68","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Profile\\RegulationReducer.js":"69","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Profile\\ListCoupon.js":"70","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Body.js":"71","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Login\\Login.js":"72","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Login\\ForgotPassword.js":"73","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Login\\Register.js":"74","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Login\\LoginWithEmployee.js":"75","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Router\\DashboardURL.js":"76","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Partials\\SideNavBar.js":"77","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodManager.js":"78","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeeManager.js":"79","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\RecieptManager\\ReiceiptManager.js":"80","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\Profile.js":"81","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\DashBoard.js":"82","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\SellProduct\\SellProduct.js":"83","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateTimeKeepingModal.js":"84","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddEmployeeToShift.js":"85","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\SellProduct\\HistoryReciept.js":"86","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\SellProduct\\Print.js":"87","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\SellProduct\\ShoppingBags.js":"88","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\SellProduct\\TableReciept.js":"89","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\SellProduct\\ComponentToPrint.js":"90","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\SellProduct\\Tabs.js":"91","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\ExportRevenue.js":"92","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\SalaryStats.js":"93","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\ProductStatis.js":"94","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\CouponManager.js":"95","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\TotalMoney.js":"96","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\ErrorReceipt.js":"97","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButtonDashboard.js":"98","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\DaiLyMoneyTracking.js":"99","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\Statistic.js":"100","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\ModalAddCoupon.js":"101","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\ProfileCoupon.js":"102","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\Regulation.js":"103","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\ModalAdd.js":"104","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\ProfileSetting.js":"105","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\ListShift.js":"106","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\ChangePassword.js":"107","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\ProfileDetail.js":"108","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\ProfileHeader.js":"109","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\RecieptManager\\SearchReceipt.js":"110","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\RecieptManager\\ControlReciept.js":"111","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\RecieptManager\\DateReciept.js":"112","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\RecieptManager\\StatusReceiptType.js":"113","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\RecieptManager\\TableReciept.js":"114","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddTimeKeeperModal.js":"115","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\NoJobEmployee.js":"116","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\TimekeepingTable.js":"117","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateNextWeekTimeKeeping.js":"118","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddNextWeekTimeKeeping.js":"119","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\UnShiftEmployee.js":"120","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\FixedCalendar.js":"121","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\PayMoneyModal.js":"122","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateEmployeeModal.js":"123","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddEmployeeModal.js":"124","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeTableHeader.js":"125","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\fakeData.js":"126","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\SackedEmployeeMenu.js":"127","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeMoreMenu.js":"128","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeToolbar.js":"129","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\SearchNotFound.js":"130","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\Scrollbar.js":"131","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\Page.js":"132","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\Label.js":"133","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\UpdateTypeModal.js":"134","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\SortByTable.js":"135","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\ExcelInstruction.js":"136","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodTableDisplay.js":"137","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\AddGoodModal.js":"138","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\TypeManager.js":"139","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\EditTypeModal.js":"140","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\AddTypeModal.js":"141","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\ConfirmModal.js":"142","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\UpdateGoodModal.js":"143","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\SearchBar.js":"144","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodTable.js":"145","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\DarkMode.js":"146","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeInformation.js":"147","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\FixedCalendarCell.js":"148","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\TableRow.js":"149","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\TypeInfo.js":"150","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\OptionYear.js":"151","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButton.js":"152","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\OptionMonth.js":"153","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\BaseOptionChart.js":"154","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\SellProduct\\backupBillEditReducer.js":"155"},{"size":307,"mtime":1638453641200,"results":"156","hashOfConfig":"157"},{"size":6591,"mtime":1639469032296,"results":"158","hashOfConfig":"157"},{"size":8069,"mtime":1639509726463,"results":"159","hashOfConfig":"157"},{"size":2219,"mtime":1635339609703,"results":"160","hashOfConfig":"157"},{"size":295,"mtime":1633930066735,"results":"161","hashOfConfig":"157"},{"size":343,"mtime":1634478986923,"results":"162","hashOfConfig":"157"},{"size":376,"mtime":1635324703317,"results":"163","hashOfConfig":"157"},{"size":384,"mtime":1634478986910,"results":"164","hashOfConfig":"157"},{"size":3275,"mtime":1639466254600,"results":"165","hashOfConfig":"157"},{"size":340,"mtime":1634478986909,"results":"166","hashOfConfig":"157"},{"size":1166,"mtime":1638439384785,"results":"167","hashOfConfig":"157"},{"size":316,"mtime":1635324703320,"results":"168","hashOfConfig":"157"},{"size":482,"mtime":1635324703316,"results":"169","hashOfConfig":"157"},{"size":360,"mtime":1635428416089,"results":"170","hashOfConfig":"157"},{"size":3256,"mtime":1639512715603,"results":"171","hashOfConfig":"157"},{"size":558,"mtime":1637079791247,"results":"172","hashOfConfig":"157"},{"size":1697,"mtime":1639228293219,"results":"173","hashOfConfig":"157"},{"size":668,"mtime":1635324960042,"results":"174","hashOfConfig":"157"},{"size":670,"mtime":1635428387315,"results":"175","hashOfConfig":"157"},{"size":346,"mtime":1639053801268,"results":"176","hashOfConfig":"157"},{"size":303,"mtime":1634478986911,"results":"177","hashOfConfig":"157"},{"size":302,"mtime":1634647661476,"results":"178","hashOfConfig":"157"},{"size":312,"mtime":1634478986916,"results":"179","hashOfConfig":"157"},{"size":370,"mtime":1634478986919,"results":"180","hashOfConfig":"157"},{"size":303,"mtime":1635324703322,"results":"181","hashOfConfig":"157"},{"size":309,"mtime":1635324703325,"results":"182","hashOfConfig":"157"},{"size":350,"mtime":1635324703331,"results":"183","hashOfConfig":"157"},{"size":339,"mtime":1635324703329,"results":"184","hashOfConfig":"157"},{"size":390,"mtime":1635324703324,"results":"185","hashOfConfig":"157"},{"size":324,"mtime":1635324703321,"results":"186","hashOfConfig":"157"},{"size":324,"mtime":1635324703327,"results":"187","hashOfConfig":"157"},{"size":323,"mtime":1635428416086,"results":"188","hashOfConfig":"157"},{"size":304,"mtime":1635324703322,"results":"189","hashOfConfig":"157"},{"size":323,"mtime":1638364324697,"results":"190","hashOfConfig":"157"},{"size":308,"mtime":1638364324695,"results":"191","hashOfConfig":"157"},{"size":353,"mtime":1639053801268,"results":"192","hashOfConfig":"157"},{"size":341,"mtime":1637079791256,"results":"193","hashOfConfig":"157"},{"size":357,"mtime":1639509808720,"results":"194","hashOfConfig":"157"},{"size":341,"mtime":1637079791255,"results":"195","hashOfConfig":"157"},{"size":1333,"mtime":1637079791255,"results":"196","hashOfConfig":"157"},{"size":3398,"mtime":1639536864943,"results":"197","hashOfConfig":"157"},{"size":2587,"mtime":1637079791234,"results":"198","hashOfConfig":"157"},{"size":2407,"mtime":1638364324692,"results":"199","hashOfConfig":"157"},{"size":380,"mtime":1637079791230,"results":"200","hashOfConfig":"157"},{"size":395,"mtime":1637079791240,"results":"201","hashOfConfig":"157"},{"size":901,"mtime":1637079791233,"results":"202","hashOfConfig":"157"},{"size":2316,"mtime":1637079791239,"results":"203","hashOfConfig":"157"},{"size":996,"mtime":1637079791243,"results":"204","hashOfConfig":"157"},{"size":339,"mtime":1637079791232,"results":"205","hashOfConfig":"157"},{"size":397,"mtime":1638364324691,"results":"206","hashOfConfig":"157"},{"size":2213,"mtime":1639417494541,"results":"207","hashOfConfig":"157"},{"size":354,"mtime":1637079791245,"results":"208","hashOfConfig":"157"},{"size":527,"mtime":1639332813066,"results":"209","hashOfConfig":"157"},{"size":361,"mtime":1639327488134,"results":"210","hashOfConfig":"157"},{"size":3500,"mtime":1639053801267,"results":"211","hashOfConfig":"157"},{"size":541,"mtime":1637079791252,"results":"212","hashOfConfig":"157"},{"size":921,"mtime":1637079791244,"results":"213","hashOfConfig":"157"},{"size":340,"mtime":1637079791252,"results":"214","hashOfConfig":"157"},{"size":372,"mtime":1637079791250,"results":"215","hashOfConfig":"157"},{"size":382,"mtime":1637079791251,"results":"216","hashOfConfig":"157"},{"size":429,"mtime":1638439384781,"results":"217","hashOfConfig":"157"},{"size":425,"mtime":1638439384783,"results":"218","hashOfConfig":"157"},{"size":498,"mtime":1638439384784,"results":"219","hashOfConfig":"157"},{"size":433,"mtime":1638439384782,"results":"220","hashOfConfig":"157"},{"size":334,"mtime":1638439384788,"results":"221","hashOfConfig":"157"},{"size":387,"mtime":1638439384787,"results":"222","hashOfConfig":"157"},{"size":327,"mtime":1638439384786,"results":"223","hashOfConfig":"157"},{"size":629,"mtime":1637079791250,"results":"224","hashOfConfig":"157"},{"size":352,"mtime":1638453760699,"results":"225","hashOfConfig":"157"},{"size":1420,"mtime":1639053755133,"results":"226","hashOfConfig":"157"},{"size":1420,"mtime":1639053801222,"results":"227","hashOfConfig":"157"},{"size":15444,"mtime":1639471759138,"results":"228","hashOfConfig":"157"},{"size":12568,"mtime":1639466239666,"results":"229","hashOfConfig":"157"},{"size":15170,"mtime":1639471782374,"results":"230","hashOfConfig":"157"},{"size":9437,"mtime":1639471868948,"results":"231","hashOfConfig":"157"},{"size":1733,"mtime":1639472000304,"results":"232","hashOfConfig":"157"},{"size":15730,"mtime":1639469497989,"results":"233","hashOfConfig":"157"},{"size":38990,"mtime":1639466649893,"results":"234","hashOfConfig":"157"},{"size":29968,"mtime":1639495700852,"results":"235","hashOfConfig":"157"},{"size":2070,"mtime":1639042458892,"results":"236","hashOfConfig":"157"},{"size":5183,"mtime":1639496046745,"results":"237","hashOfConfig":"157"},{"size":4282,"mtime":1639053755094,"results":"238","hashOfConfig":"157"},{"size":16615,"mtime":1639536527325,"results":"239","hashOfConfig":"157"},{"size":16910,"mtime":1639228293184,"results":"240","hashOfConfig":"157"},{"size":9044,"mtime":1639417704211,"results":"241","hashOfConfig":"157"},{"size":1162,"mtime":1637079791224,"results":"242","hashOfConfig":"157"},{"size":22354,"mtime":1639537751194,"results":"243","hashOfConfig":"157"},{"size":3875,"mtime":1639053755129,"results":"244","hashOfConfig":"157"},{"size":22166,"mtime":1639511624622,"results":"245","hashOfConfig":"157"},{"size":8216,"mtime":1639053755125,"results":"246","hashOfConfig":"157"},{"size":1335,"mtime":1639053755132,"results":"247","hashOfConfig":"157"},{"size":5719,"mtime":1639228293147,"results":"248","hashOfConfig":"157"},{"size":7626,"mtime":1639476076597,"results":"249","hashOfConfig":"157"},{"size":8271,"mtime":1639228293148,"results":"250","hashOfConfig":"157"},{"size":11759,"mtime":1639505510118,"results":"251","hashOfConfig":"157"},{"size":4098,"mtime":1639336263877,"results":"252","hashOfConfig":"157"},{"size":3360,"mtime":1639065774534,"results":"253","hashOfConfig":"157"},{"size":3912,"mtime":1638439384742,"results":"254","hashOfConfig":"157"},{"size":6708,"mtime":1639504686825,"results":"255","hashOfConfig":"157"},{"size":20219,"mtime":1639416163474,"results":"256","hashOfConfig":"157"},{"size":13957,"mtime":1639466239677,"results":"257","hashOfConfig":"157"},{"size":8809,"mtime":1639053755120,"results":"258","hashOfConfig":"157"},{"size":9282,"mtime":1639234811765,"results":"259","hashOfConfig":"157"},{"size":15208,"mtime":1639466239675,"results":"260","hashOfConfig":"157"},{"size":1157,"mtime":1637079791216,"results":"261","hashOfConfig":"157"},{"size":10456,"mtime":1639495241665,"results":"262","hashOfConfig":"157"},{"size":10508,"mtime":1639466239674,"results":"263","hashOfConfig":"157"},{"size":21974,"mtime":1639537804303,"results":"264","hashOfConfig":"157"},{"size":4568,"mtime":1639469762057,"results":"265","hashOfConfig":"157"},{"size":907,"mtime":1638453760692,"results":"266","hashOfConfig":"157"},{"size":12729,"mtime":1639496135295,"results":"267","hashOfConfig":"157"},{"size":9089,"mtime":1638453760691,"results":"268","hashOfConfig":"157"},{"size":4118,"mtime":1639053755121,"results":"269","hashOfConfig":"157"},{"size":29796,"mtime":1639496080390,"results":"270","hashOfConfig":"157"},{"size":14599,"mtime":1639228293159,"results":"271","hashOfConfig":"157"},{"size":4077,"mtime":1639228293170,"results":"272","hashOfConfig":"157"},{"size":7531,"mtime":1639228293175,"results":"273","hashOfConfig":"157"},{"size":23499,"mtime":1639495972955,"results":"274","hashOfConfig":"157"},{"size":22758,"mtime":1639495118303,"results":"275","hashOfConfig":"157"},{"size":12488,"mtime":1639228293177,"results":"276","hashOfConfig":"157"},{"size":5885,"mtime":1639228293166,"results":"277","hashOfConfig":"157"},{"size":27015,"mtime":1639228293172,"results":"278","hashOfConfig":"157"},{"size":26560,"mtime":1639473268063,"results":"279","hashOfConfig":"157"},{"size":27077,"mtime":1639472990572,"results":"280","hashOfConfig":"157"},{"size":1188,"mtime":1639228293163,"results":"281","hashOfConfig":"157"},{"size":698,"mtime":1637079791193,"results":"282","hashOfConfig":"157"},{"size":7794,"mtime":1639234811762,"results":"283","hashOfConfig":"157"},{"size":8494,"mtime":1639234811761,"results":"284","hashOfConfig":"157"},{"size":2489,"mtime":1635324703267,"results":"285","hashOfConfig":"157"},{"size":0,"mtime":1635324703274,"results":"286","hashOfConfig":"157"},{"size":1541,"mtime":1635324703273,"results":"287","hashOfConfig":"157"},{"size":482,"mtime":1635324703271,"results":"288","hashOfConfig":"157"},{"size":2458,"mtime":1635324703269,"results":"289","hashOfConfig":"157"},{"size":12824,"mtime":1639228293207,"results":"290","hashOfConfig":"157"},{"size":9192,"mtime":1639228293198,"results":"291","hashOfConfig":"157"},{"size":4068,"mtime":1639228293194,"results":"292","hashOfConfig":"157"},{"size":26393,"mtime":1639228293196,"results":"293","hashOfConfig":"157"},{"size":37639,"mtime":1639474122824,"results":"294","hashOfConfig":"157"},{"size":2723,"mtime":1639228293203,"results":"295","hashOfConfig":"157"},{"size":4473,"mtime":1639228293192,"results":"296","hashOfConfig":"157"},{"size":6777,"mtime":1639228293190,"results":"297","hashOfConfig":"157"},{"size":3507,"mtime":1635324703280,"results":"298","hashOfConfig":"157"},{"size":44713,"mtime":1639501565984,"results":"299","hashOfConfig":"157"},{"size":5541,"mtime":1635324703285,"results":"300","hashOfConfig":"157"},{"size":3878,"mtime":1639053801254,"results":"301","hashOfConfig":"157"},{"size":3134,"mtime":1634478986899,"results":"302","hashOfConfig":"157"},{"size":7497,"mtime":1639466860359,"results":"303","hashOfConfig":"157"},{"size":13028,"mtime":1639333151841,"results":"304","hashOfConfig":"157"},{"size":15151,"mtime":1639228293200,"results":"305","hashOfConfig":"157"},{"size":9195,"mtime":1639502861629,"results":"306","hashOfConfig":"157"},{"size":3250,"mtime":1638439384745,"results":"307","hashOfConfig":"157"},{"size":3099,"mtime":1639053755096,"results":"308","hashOfConfig":"157"},{"size":4476,"mtime":1638439384744,"results":"309","hashOfConfig":"157"},{"size":5647,"mtime":1638364274864,"results":"310","hashOfConfig":"157"},{"size":451,"mtime":1639509679653,"results":"311","hashOfConfig":"157"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},"13guukl",{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"317","usedDeprecatedRules":"314"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"314"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"349","usedDeprecatedRules":"314"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"370","messages":"371","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"378","messages":"379","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"380","messages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"396","usedDeprecatedRules":"314"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"401","usedDeprecatedRules":"314"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"404","usedDeprecatedRules":"314"},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"413","usedDeprecatedRules":"314"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"314"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431","usedDeprecatedRules":"314"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"460","messages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"462","usedDeprecatedRules":"314"},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"465","messages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467","usedDeprecatedRules":"314"},{"filePath":"468","messages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470","usedDeprecatedRules":"314"},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"473","usedDeprecatedRules":"314"},{"filePath":"474","messages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"476","usedDeprecatedRules":"314"},{"filePath":"477","messages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481","usedDeprecatedRules":"314"},{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484","usedDeprecatedRules":"314"},{"filePath":"485","messages":"486","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"487","usedDeprecatedRules":"314"},{"filePath":"488","messages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"492","usedDeprecatedRules":"314"},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499","usedDeprecatedRules":"314"},{"filePath":"500","messages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"502","usedDeprecatedRules":"314"},{"filePath":"503","messages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"505","usedDeprecatedRules":"314"},{"filePath":"506","messages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"512","usedDeprecatedRules":"314"},{"filePath":"513","messages":"514","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"515","usedDeprecatedRules":"314"},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"518","messages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"520","usedDeprecatedRules":"314"},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"523","usedDeprecatedRules":"314"},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":"526","usedDeprecatedRules":"314"},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"529","usedDeprecatedRules":"314"},{"filePath":"530","messages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532","usedDeprecatedRules":"314"},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535","usedDeprecatedRules":"314"},{"filePath":"536","messages":"537","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"538","usedDeprecatedRules":"314"},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"541","usedDeprecatedRules":"314"},{"filePath":"542","messages":"543","errorCount":0,"fatalErrorCount":0,"warningCount":89,"fixableErrorCount":0,"fixableWarningCount":0,"source":"544","usedDeprecatedRules":"314"},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"547","usedDeprecatedRules":"314"},{"filePath":"548","messages":"549","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"314"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"555","usedDeprecatedRules":"314"},{"filePath":"556","messages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"558","messages":"559","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560","usedDeprecatedRules":"314"},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"563","usedDeprecatedRules":"314"},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"568","messages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"570","usedDeprecatedRules":"314"},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"575","usedDeprecatedRules":"314"},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"578","messages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"580","usedDeprecatedRules":"314"},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"583","usedDeprecatedRules":"314"},{"filePath":"584","messages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"586","usedDeprecatedRules":"314"},{"filePath":"587","messages":"588","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"589","usedDeprecatedRules":"314"},{"filePath":"590","messages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"592","usedDeprecatedRules":"314"},{"filePath":"593","messages":"594","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"595","usedDeprecatedRules":"314"},{"filePath":"596","messages":"597","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"598","usedDeprecatedRules":"314"},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"601","usedDeprecatedRules":"314"},{"filePath":"602","messages":"603","errorCount":0,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"604","usedDeprecatedRules":"314"},{"filePath":"605","messages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"607","usedDeprecatedRules":"314"},{"filePath":"608","messages":"609","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"610","usedDeprecatedRules":"314"},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"613","usedDeprecatedRules":"314"},{"filePath":"614","messages":"615","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"616","messages":"617","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"618","usedDeprecatedRules":"314"},{"filePath":"619","messages":"620","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621","usedDeprecatedRules":"314"},{"filePath":"622","messages":"623","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"632","messages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"634","usedDeprecatedRules":"314"},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"314"},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"640","usedDeprecatedRules":"314"},{"filePath":"641","messages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":39,"fixableErrorCount":0,"fixableWarningCount":0,"source":"643","usedDeprecatedRules":"314"},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"646","usedDeprecatedRules":"314"},{"filePath":"647","messages":"648","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"649","usedDeprecatedRules":"314"},{"filePath":"650","messages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"652","usedDeprecatedRules":"314"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655","usedDeprecatedRules":"314"},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"658","usedDeprecatedRules":"314"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"661","usedDeprecatedRules":"314"},{"filePath":"662","messages":"663","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"664","usedDeprecatedRules":"314"},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667","usedDeprecatedRules":"314"},{"filePath":"668","messages":"669","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"670","messages":"671","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"672","usedDeprecatedRules":"314"},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"675","usedDeprecatedRules":"314"},{"filePath":"676","messages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"678","usedDeprecatedRules":"314"},{"filePath":"679","messages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"681","usedDeprecatedRules":"314"},{"filePath":"682","messages":"683","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"684","usedDeprecatedRules":"314"},{"filePath":"685","messages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"687","usedDeprecatedRules":"314"},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"690","usedDeprecatedRules":"314"},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},{"filePath":"693","messages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"314"},"D:\\Workspace\\university-project\\SE100Project\\client\\src\\index.js",[],["695","696"],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\App.js",["697","698","699"],"import React, { Component } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n} from \"react-router-dom\";\r\nimport DirectionURL from './Router/DirectionURL';\r\nimport './css/App.css'\r\nimport { connect } from 'react-redux'\r\nimport axios from 'axios';\r\nimport Alert from '@mui/material/Alert';\r\nimport { FiChevronRight, FiXSquare } from \"react-icons/fi\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  loadAllGood(dataProduct, dataJoin) {\r\n    var resultProduct = dataProduct;\r\n    var joinTypeInfor = dataJoin;\r\n\r\n    var listProductInfor = [];\r\n    for (let i = 0; i < resultProduct.length; i++) {\r\n      var typeIDList = [];\r\n      var joinType = '';\r\n      for (var j = 0; j < joinTypeInfor.length; j++) {\r\n        if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\r\n          resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) {\r\n          typeIDList.push(joinTypeInfor[j]._id.typeID);\r\n        }\r\n      }\r\n\r\n      listProductInfor.push(\r\n        {\r\n          ...resultProduct[i],\r\n          typeIDList: typeIDList,\r\n        });\r\n    }\r\n    this.props.getProductToReducer(listProductInfor);\r\n  }\r\n\r\n  async componentWillMount() {\r\n    if (localStorage.getItem('token') && localStorage.getItem('token') !== \"\") {\r\n      await axios.post(`http://localhost:5000/refresh`, {\r\n        token: localStorage.getItem('token'),\r\n      })\r\n        .then(res => {\r\n          console.log(res.data.status)\r\n          console.log(res.data.data.isEmployee)\r\n          if (res.data.status === 1) {\r\n            if (!res.data.data.isEmployee) {\r\n              this.props.setRole()\r\n              localStorage.setItem('token', res.data.token);\r\n              this.props.updateProfile(res.data.data);\r\n              this.props.updateRecieptUser(res.data.data.receipts)\r\n              this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n              this.props.updateCouponUser(res.data.data.coupons)\r\n              this.props.updateShiftTypes(res.data.data.shiftTypes)\r\n              this.props.changeLoginStatus();\r\n              this.props.getEmployee(res.data.data.employees);\r\n              // Phi\r\n              this.props.getTimeKeeping(res.data.data.timeKeeping);\r\n              this.loadAllGood(res.data.data.products, res.data.data.productJoinTypes);\r\n              if (res.data.data.regulation.length > 0)\r\n                this.props.setRegulation(res.data.data.regulation[0]);\r\n              else this.props.setRegulation({});\r\n              console.log(\"res.data\", res.data)\r\n            } else {\r\n              console.log(\"res.data.data\", res.data.data)\r\n              this.props.setRoleEmployee()\r\n              localStorage.setItem('token', res.data.token);\r\n              this.props.updateProfileEployee(res.data.data.employee[0], res.data.data.manager[0], res.data.data.store[0].storeName);\r\n              this.props.updateAvatar(res.data.data.employee[0].imgUrl ? res.data.data.employee[0].imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n              this.props.updateRecieptUser(res.data.data.receipts);\r\n              this.props.updateCouponUser(res.data.data.coupons)\r\n\r\n              if (res.data.data.regulation.length > 0)\r\n                this.props.setRegulation(res.data.data.regulation[0]);\r\n              else this.props.setRegulation({});\r\n\r\n              this.props.changeLoginStatus();\r\n            }\r\n            this.props.showAlert(res.data.message, \"success\");\r\n          }\r\n        })\r\n        .catch(err => {\r\n        })\r\n    }\r\n  }\r\n\r\n  autoHideAlert = () => {\r\n    setTimeout(() => this.props.hideAlert(), 4000);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <DirectionURL></DirectionURL>\r\n        {this.props.alertReducer.status ? this.autoHideAlert() : null}\r\n        {this.props.alertReducer.status ? <Alert style={{ cursor: 'pointer' }} onClick={() => this.props.hideAlert()} className=\"message-error\" severity={this.props.alertReducer.typeMessage}>{this.props.alertReducer.message} — check it out! <FiXSquare></FiXSquare></Alert> : null}\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    isLogin: state.loginStatus,\r\n    alertReducer: state.alert,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    changeLoginStatus: () => {\r\n      dispatch({\r\n        type: \"CHANGE_LOGIN_STATUS\",\r\n      });\r\n    },\r\n    updateProvince: (data) => {\r\n      dispatch({\r\n        type: \"UPDATE_DATA\",\r\n        data: data,\r\n      })\r\n    },\r\n    updateRecieptUser: (data) => {\r\n      dispatch({\r\n        type: \"UPDATE_RECIEPT_USER\",\r\n        listReciept: data,\r\n      })\r\n    },\r\n    updateProfile: (data) => {\r\n      dispatch({\r\n        type: \"UPDATA_DATA_USER\",\r\n        data: data,\r\n      })\r\n    },\r\n    updateAvatar: (avatar) => {\r\n      dispatch({\r\n        type: \"UPDATE_AVATAR\",\r\n        avatar: avatar,\r\n      })\r\n    },\r\n    updateShiftTypes: (shiftTypes) => {\r\n      dispatch({\r\n        type: \"UPDATE_DATA_SHIFT_USER\",\r\n        shiftTypes: shiftTypes,\r\n      })\r\n    },\r\n    hideAlert: () => {\r\n      dispatch({\r\n        type: \"HIDE_ALERT\",\r\n      })\r\n    },\r\n    showAlert: (message, typeMessage) => {\r\n      dispatch({\r\n        type: \"SHOW_ALERT\",\r\n        message: message,\r\n        typeMessage: typeMessage,\r\n      })\r\n    },\r\n    getEmployee: (data) => {\r\n      dispatch({\r\n        type: \"GET_EMPLOYEE\",\r\n        employees: data,\r\n      });\r\n    },\r\n    setRole: () => {\r\n      dispatch({\r\n        type: \"ADMIN_ROLE\"\r\n      });\r\n    },\r\n    updateProfileEployee: (data, data1, storeName) => {\r\n      dispatch({\r\n        type: \"UPDATA_DATA_EMPLOYEE\",\r\n        data: data,\r\n        data1: data1,\r\n        storeName: storeName,\r\n      })\r\n    },\r\n    setRoleEmployee: () => {\r\n      dispatch({\r\n        type: \"EMPLOYEE_ROLE\",\r\n      });\r\n    },\r\n    getTimeKeeping: (data) => {\r\n      dispatch({\r\n        type: \"GET_TIMEKEEPER\",\r\n        data: data\r\n      });\r\n    },\r\n    getProductToReducer: (data) => {\r\n      dispatch({\r\n        type: \"GET_PRODUCT_AND_TYPE\",\r\n        data: data\r\n      });\r\n    },\r\n    setRegulation: (data) => {\r\n      dispatch({\r\n        type: \"SET_REGULATION\",\r\n        data: data,\r\n      });\r\n    },\r\n    updateCouponUser: (coupons) => {\r\n      dispatch({\r\n        type: \"UPDATE_COUPON_USER\",\r\n        coupons: coupons\r\n      })\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Store.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Router\\DirectionURL.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\LoginStatusReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\TypeStatusReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\DistrictReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\ProvinceReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\InfoUserReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\ObjectEditShiftReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\ListShiftReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\RoleReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\ConfirmModalReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\chooseTypeProduct.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\ListProductReducer.js",["700","701","702","703","704","705","706","707","708"],"\r\nconst listProductInitialState = [\r\n    {\r\n        _id: {\r\n            productID: \"\", \r\n            importDate: \"\", \r\n            storeID: \"\",\r\n        },\r\n        name: \"\", \r\n        imgUrl: \"\", \r\n        quantity: \"\", \r\n        remain: \"\", \r\n        unit: \"\",\r\n        importPrice: \"\", \r\n        sellPrice: \"\", \r\n        expires: \"\",\r\n        typeIDList: [],\r\n    },\r\n],\r\n\r\n    listProductReducer = (state = listProductInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"GET_PRODUCT_AND_TYPE\":\r\n                return {\r\n                    state: action.data\r\n                }\r\n            case \"ADD_PRODUCT\":\r\n                return {\r\n                    state: [...state.state, action.data]\r\n                }\r\n            case \"UPDATE_PRODUCT\":\r\n                var newState = [];\r\n                for(var i = 0 ; i < state.state.length; i++)\r\n                {\r\n                    if(state.state[i]._id.productID != action.data._id.productID)\r\n                    {\r\n                        newState.push(state.state[i]);\r\n                    }\r\n                    else \r\n                    {\r\n                        newState.push(action.data);\r\n                    }\r\n                }\r\n                return {\r\n                    state: newState\r\n                }\r\n            case \"DELETE_PRODUCT\":\r\n                var newState = [];\r\n                for(var i = 0 ; i < state.state.length; i++)\r\n                {\r\n                    if(state.state[i]._id.productID != action.data._id.productID)\r\n                    {\r\n                        newState.push(state.state[i]);\r\n                    }\r\n                    else \r\n                    {\r\n                        \r\n                    }\r\n                }\r\n                return {\r\n                    state: newState\r\n                }\r\n            case \"DECREASE_REMAIN_PRODUCT\": \r\n            {\r\n                var newState = [];\r\n                for(var i = 0 ; i < state.state.length; i++)\r\n                {\r\n                    if(state.state[i]._id.productID != action.data._id.productID)\r\n                    {\r\n                        newState.push(state.state[i]);\r\n                    }\r\n                    else \r\n                    {\r\n                        var decreaseVal = state.state[i];\r\n                        decreaseVal.remain = action.data.remain;\r\n                        newState.push(decreaseVal);\r\n                    }\r\n                }\r\n                console.log(\"newState\", newState)\r\n                return {\r\n                    state: newState\r\n                }\r\n            }\r\n            case \"DELETE_TYPE_PRODUCT\": \r\n            {\r\n                var newState = [];\r\n                for(var i = 0 ; i < state.state.length; i++)\r\n                {\r\n                    state.state[i].typeIDList = state.state[i].typeIDList.filter(function(item) {\r\n                        return item !== action.typeID;\r\n                    })\r\n                    newState.push(state.state[i]);\r\n                }\r\n                return {\r\n                    state: newState\r\n                }\r\n            }\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default listProductReducer;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\InfoUpdateProduct.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\typeProductReducer.js",["709","710","711","712"],"\r\nconst typeProductInitialState = [\r\n    {\r\n        _id: {\r\n            typeID: \"\",\r\n            storeID: \"\",\r\n        },\r\n        name: \"\",\r\n    },\r\n],\r\n\r\n    typeProductReducer = (state = typeProductInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"GET_PRODUCT_TYPE\":\r\n                return action.data;\r\n            case \"ADD_TYPE\":\r\n                return [...state, action.data];\r\n            case \"UPDATE_TYPE\":\r\n            {\r\n                var newState = [];\r\n                for(var i = 0 ; i < state.length ; i ++)\r\n                {\r\n                    if(state[i]._id.typeID != action.data._id.typeID)\r\n                    {\r\n                        newState.push(state[i]);\r\n                    }\r\n                    else \r\n                    {\r\n                        newState.push(action.data);\r\n                    }\r\n                }\r\n                return newState;\r\n            }\r\n            case \"DELETE_TYPE\":\r\n            {\r\n                console.log(\"action.data\", action.data);\r\n                var newState = [];\r\n                for(var i = 0 ; i < state.length ; i ++)\r\n                {\r\n                    if(state[i]._id.typeID != action.data.typeID)\r\n                    {\r\n                        newState.push(state[i]);\r\n                    }\r\n                    else \r\n                    {\r\n                        console.log(\"Xoá được ở vị trí thứ\" ,i);\r\n                    }\r\n                }\r\n                console.log(\"newState\", newState)\r\n                return newState;\r\n            }\r\n\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default typeProductReducer;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\TypeProductValueReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\AlertReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\SidebarOpenStatus.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddShiftReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusDarkModeReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditShiftReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusModalConfirmPassword.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusConfirmReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditTypeReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusYesConfirmReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateEmployeeReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusDeleteConfirmReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddEmployeeReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusPayMoneyStatus.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateGoodReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddTypeReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\GoodManager\\UpdateTypeStatus.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\GoodManager\\AddGoodStatus.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\GoodManager\\ExcelInstructionStatus.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\SellProduct\\StatusShowHistoryRecieptReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\SellProduct\\InfomationBillEdit.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\SellProduct\\StatusEditInfomationBill.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\SellProduct\\ShoppingBagsReducer.js",["713"],"const shoppingBagsInitialState = [],\r\n    shoppingBagsReducer = (state = shoppingBagsInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"ADD_NEW_PRODUCT_SHOPPING_BAGS\": \r\n                return [...state, action.newProduct];\r\n            case \"RAISE_QUANTITY_SHOPPING_BAGS\":\r\n                return state.map(value => {\r\n                    if (value.product.name === action.name) {\r\n                        value.quantity += 1;\r\n                    }\r\n                    return value\r\n                })\r\n            case \"REDUCE_QUANTITY_SHOPPING_BAGS\":\r\n                return state.map(value => {\r\n                    if (value.product.name === action.name) {\r\n                        value.quantity -= 1;\r\n                    }\r\n                    return value\r\n                })\r\n            case \"DELETE_PRODUCT_SHOPPING_BAGS\":\r\n                return state.filter((value) => {\r\n                    if (value.product.name !== action.name) {\r\n                        return value;\r\n                    } \r\n                })\r\n            case \"RESET_SHOPPING_BAGS\":\r\n                return state = [];\r\n            case \"INFO_SHOPPING_BAGS_EDIT\":\r\n                return action.listProduct\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default shoppingBagsReducer;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\SellProduct\\ListRecieptReducer.js",["714","715","716"],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\employeeListReducer.js",["717","718","719"],"const listEmployeeInitialState = {\r\n    employees: [\r\n        // {\r\n        //     _id: { \r\n        //         employeeID: '3', \r\n        //         storeID: '19522006@gm.uit.edu.vn' \r\n        //     },\r\n        //     managerID: '19522006@gm.uit.edu.vn',\r\n        //     password: '1212',\r\n        //     firstName: '1212',\r\n        //     lastName: '1212',\r\n        //     phoneNumber: '1212',\r\n        //     dateOfBirth: \"2021-11-20T00:00:00.000Z\",\r\n        //     email: '12121',\r\n        //     address: '1212',\r\n        //     cardID: '1212',\r\n        //     startDate: \"2021-11-26T00:00:00.000Z\",\r\n        //     deleted: false,\r\n        //     __v: 0\r\n        // },\r\n    ]\r\n}\r\n\r\nconst  listEmployeeReducer = (state = listEmployeeInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"GET_EMPLOYEE\":\r\n                state.employees = action.employees;\r\n                return state;\r\n            case \"ADD_EMPLOYEE\":\r\n                return {\r\n                    employees : [...state.employees, action.employees ]\r\n                }\r\n            case \"UPDATE_EMPLOYEE\":\r\n                {\r\n                    var newState = [];\r\n                    for(var i = 0 ; i < state.employees.length ; i ++)\r\n                    {\r\n                        if(i != action.index)\r\n                        {\r\n                            newState.push(state.employees[i]);\r\n                        }\r\n                        else \r\n                        {\r\n                            newState.push(action.data);\r\n                        }\r\n                    }\r\n                    console.log(\"newState\", newState);\r\n                    return {\r\n                        employees : newState\r\n                    }\r\n\r\n                }\r\n                case \"DELETE_EMPLOYEE\":\r\n                {\r\n                    console.log(\"action\", action);\r\n                    var newState = [];\r\n                    for(var i = 0 ; i < state.employees.length ; i ++)\r\n                    {\r\n                        if(state.employees[i]._id.employeeID !== action.id)\r\n                        {\r\n                            newState.push(state.employees[i]);\r\n                        }\r\n                        else {\r\n                            console.log(\"Kiếm đc cái xoá rồi\")\r\n                        }\r\n                    }\r\n                    return {\r\n                        employees : newState\r\n                    }\r\n\r\n                }\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default listEmployeeReducer;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\employeeSackedListReducer.js",["720","721"],"const listSackedEmployeeInitialState = {\r\n    employees: [\r\n        {\r\n            _id: { \r\n                employeeID: '3', \r\n                storeID: '19522006@gm.uit.edu.vn' \r\n            },\r\n            managerID: '19522006@gm.uit.edu.vn',\r\n            password: '1212',\r\n            firstName: '1212',\r\n            lastName: '1212',\r\n            phoneNumber: '1212',\r\n            dateOfBirth: \"2021-11-20T00:00:00.000Z\",\r\n            email: '12121',\r\n            address: '1212',\r\n            cardID: '1212',\r\n            startDate: \"2021-11-26T00:00:00.000Z\",\r\n            deleted: false,\r\n            __v: 0\r\n        },\r\n    ]\r\n}\r\n\r\nconst  listSackedEmployeeReducer = (state = listSackedEmployeeInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"GET_EMPLOYEE_SACKED\":\r\n                state.employees = action.employees;\r\n                return state;\r\n            case \"DELETE_EMPLOYEE_SACKED\":\r\n                console.log(\"action\", action);\r\n                return {\r\n                    employees: [...state.employees, action.data]\r\n                };\r\n            case \"RETURN_TO_WORK\":\r\n            {\r\n                var newState = [];\r\n                for(var i = 0 ; i < state.employees.length ; i ++)\r\n                {\r\n                    if(state.employees[i]._id.employeeID !== action.id)\r\n                    {\r\n                        newState.push(state.employees[i]);\r\n                    }\r\n                    else {\r\n                        console.log(\"Kiếm đc cái xoá rồi\")\r\n                    }\r\n                }\r\n                return {\r\n                    employees : newState\r\n                }\r\n            }\r\n            case \"DELETE_PERMANTLY_EMPLOYEE\":\r\n            {\r\n                var newState = [];\r\n                for(var i = 0 ; i < state.employees.length ; i ++)\r\n                {\r\n                    if(state.employees[i]._id.employeeID !== action.employeeID)\r\n                    {\r\n                        newState.push(state.employees[i]);\r\n                    }\r\n                    else {\r\n                        console.log(\"Kiếm đc cái xoá rồi\")\r\n                    }\r\n                }\r\n                return {\r\n                    employees : newState\r\n                }\r\n            }\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default listSackedEmployeeReducer;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\addNextWeekTimeKeepingStatus.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\updateNextWeekTimeKeepingStatus.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\currentEditEmployeeReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\nextWeekTimeKeepingReducer.js",["722"],"const nextWeekTimeKeepingInitialState =\r\n    \r\n[\r\n    {\r\n        _id: {\r\n            dateInWeek: \"T6\",\r\n            storeID: \"19522006@gm.uit.edu.vn\",\r\n            shiftType: {\r\n                _id: {\r\n                    shiftID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n            },\r\n            employee: {\r\n                _id: {\r\n                    employeeID: \"2\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n            },\r\n        },\r\n        alternativeEmployee: {\r\n            _id: {\r\n                employeeID: \"3\",\r\n                storeID: \"19522006@gm.uit.edu.vn\",\r\n            },\r\n        },\r\n        realDate: \"2021-12-04\",\r\n    }\r\n];\r\n\r\nconst nextWeekTimeKeepingReducer = (state = nextWeekTimeKeepingInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"SET_NEXT_WEEK_TIMEKEEPER\":\r\n                return action.data;\r\n            case \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\":\r\n                return [...state, action.data]\r\n            case \"UPDATE_NEXT_WEEK_TIMEKEEPER\":\r\n                {\r\n                    var newState = [];\r\n                    for(var i = 0 ; i < state.length ; i ++)\r\n                    {\r\n                        if(i != action.index)\r\n                        {\r\n                            newState.push(state[i]);\r\n                        }\r\n                        else \r\n                        {\r\n                            newState.push(action.data);\r\n                        }\r\n                    }\r\n                    return newState;\r\n                }\r\n            case \"DELETE_NEXT_WEEK_TIMEKEEPER\":\r\n            {\r\n                console.log(action.data._id.dateInWeek);\r\n                return state.filter((value, key) => \r\n                (\r\n                    value._id.dateInWeek !== action.data._id.dateInWeek \r\n                    || value._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \r\n                    || value._id.employee._id.employeeID !== action.data._id.employee._id.employeeID\r\n                    || value._id.realDate !== action.data._id.realDate\r\n                ));\r\n            }\r\n                \r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default nextWeekTimeKeepingReducer;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\updateNextWeekTimeKeepingValue.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\addTimeKeepingStatus.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\currentEmployeeViewValue.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\listShiftAssignReducer.js",["723","724"],"const listShiftAssignInitialState =[];\r\n\r\nconst listShiftAssignReducer = (state = listShiftAssignInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"SET_SHIFT_ASSIGN\":\r\n            {\r\n                return action.data;\r\n            }\r\n                \r\n            case \"ADD_NEW_SHIFT_ASSIGN\":\r\n                {\r\n                    console.log(\"action.data\", action.data);\r\n                    console.log(\"current State\", state);\r\n                    var newState = [];\r\n                    for(var i =0 ; i< state.length; i++)\r\n                    {\r\n                        newState.push(state[i]);\r\n                    }\r\n                    newState.push(action.data);\r\n                    console.log(\"newState\", newState);\r\n                    return newState;  \r\n                }\r\n            case \"DELETE_SHIFT_ASSIGN\":\r\n                {\r\n                    console.log(\"Đã vô được delete\");\r\n                    console.log(action.data);\r\n                    var newState = [];\r\n                    for(var i = 0 ; i < state.length ; i ++)\r\n                    {\r\n                        if(state[i]._id.dateInWeek !== action.data._id.dateInWeek \r\n                            || state[i]._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \r\n                            || state[i]._id.employee._id.employeeID !== action.data._id.employee._id.employeeID)\r\n                        {\r\n                            newState.push(state[i]);\r\n                        }\r\n                    }\r\n                    return newState;\r\n\r\n                    // return state.filter((value, key) => \r\n                    //     (\r\n                    //         value._id.dateInWeek !== action.data._id.dateInWeek \r\n                    //         || value._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \r\n                    //         || value._id.employee._id.employeeID !== action.data._id.employee._id.employeeID \r\n                    //     )\r\n                    // );\r\n                }\r\n               \r\n                \r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default listShiftAssignReducer;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\updateTimeKeepingStatus.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\currentShiftInfoReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\addEmployeeToShiftStatus.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\listTimeKeepingReducer.js",["725","726","727","728","729","730"],"const listTimeKeepingInitialState =   \r\n[\r\n    // {\r\n    //     _id: {\r\n    //         dateInWeek: 'T7',\r\n    //         storeID: '19522006@gm.uit.edu.vn',\r\n    //         shiftType: {\r\n    //             _id: {\r\n    //                 shiftID: 'v908tB',\r\n    //                 storeID: '19522006@gm.uit.edu.vn',\r\n    //             },\r\n    //         },\r\n    //         employee: {\r\n    //             _id: {\r\n    //                 employeeID: '1',\r\n    //                 storeID: '19522006@gm.uit.edu.vn',\r\n    //             },\r\n    //         },\r\n    //     },\r\n    //     realDate: '2021-11-11',\r\n    //     isPaidSalary: false,\r\n    //     createdAt: '2021-01-02',\r\n    // }\r\n    \r\n];\r\n\r\nconst listTimeKeepingReducer = (state = listTimeKeepingInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"GET_TIMEKEEPER\":\r\n                return action.data;\r\n            case \"ADD_NEW_TIME_KEEPER\":\r\n                return [...state, action.data];\r\n            case \"UPDATE_TIMEKEEPER\":\r\n                {\r\n                    var newState = [];\r\n                    for(var i = 0 ; i < state.length ; i ++)\r\n                    {\r\n                        if(i != action.index)\r\n                        {\r\n                            newState.push(state[i]);\r\n                        }\r\n                        else \r\n                        {\r\n                            newState.push(action.data);\r\n                        }\r\n                    }\r\n                    return newState;\r\n                }\r\n            case \"DELETE_TIMEKEEPER\":\r\n                {\r\n                    console.log(\"action\", action);\r\n                    var newState = [];\r\n                    for(var i = 0 ; i < state.length ; i ++)\r\n                    {\r\n                        if(state[i]._id.dateInWeek !== action.data._id.dateInWeek \r\n                            || state[i]._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \r\n                            || state[i]._id.employee._id.employeeID !== action.data._id.employee._id.employeeID)\r\n                        {\r\n                            newState.push(state[i]);\r\n                        }\r\n                        else {\r\n                            console.log(\"Kiếm đc cái xoá rồi\")\r\n                        }\r\n                    }\r\n                    return newState;\r\n\r\n                    // return state.filter((value, key) => \r\n                    //     (\r\n                    //         value._id.dateInWeek !== action.data._id.dateInWeek \r\n                    //         || value._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \r\n                    //         || value._id.employee._id.employeeID !== action.data._id.employee._id.employeeID \r\n                    //     )\r\n                    // );\r\n                }\r\n            case \"PAY_SALARY\":\r\n            {\r\n                // Ở đây thì có trả lương hết\r\n                var newState = [];\r\n                for(var i = 0 ; i < state.length ; i ++)\r\n                {\r\n                    if(state[i]._id.employee._id.employeeID == action.employeeID)\r\n                    {\r\n                        state[i].isPaidSalary = true;\r\n                    }\r\n                    newState.push(state[i]);\r\n                }\r\n                return newState;\r\n            }\r\n                \r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default listTimeKeepingReducer;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\RecieptManager\\TypeReciept.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Employee\\updateTimeKeeperValue.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\RecieptManager\\TypeByDate.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\RecieptManager\\SearchReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\RecieptManager\\StatusSelectAll.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Dashboard\\MonthSelectReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Dashboard\\TypeTimeDashboard.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Dashboard\\YearSelectReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Dashboard\\TypeHeaderDashboard.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Profile\\StatusModalAddCoupon.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Profile\\StatusEditCoupon.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Profile\\ObjectEditCoupon.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\RecieptManager\\ListRecieptDelete.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Profile\\RegulationReducer.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\Profile\\ListCoupon.js",["731"],"\r\nconst listCouponInitialState = [],\r\n    listCouponReducer = (state = listCouponInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"DELETE_COUPON\":\r\n                return state.filter((value, key) => (value._id.couponID !== action.idCoupon));\r\n            case \"ADD_COUPON\":\r\n                return [...state, action.data]\r\n            case \"EDIT_COUPON\":\r\n                return state.map(value => {\r\n                    if (value._id.couponID == action.data._id.couponID) {\r\n                        value.name = action.data.name\r\n                        value.percent = action.data.percent\r\n                        value.minTotal = action.data.minTotal\r\n                        value.timeFrom = action.data.timeFrom\r\n                        value.timeEnd = action.data.timeEnd\r\n                        value.quantity = action.data.quantity\r\n                    }\r\n                    return value\r\n                })\r\n            case \"UPDATE_QUANTITY_COUPON\":\r\n                return state.map(value => {\r\n                    if (value._id.couponID === action.idCoupon) {\r\n                        value.quantity--\r\n                    }\r\n                    return value\r\n                })\r\n            case \"UPDATE_COUPON_USER\": \r\n                return state = action.coupons\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n    \r\nexport default listCouponReducer;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Body.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Login\\Login.js",["732","733","734","735"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../css/Login.css'\r\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\r\nimport { FiChevronRight } from \"react-icons/fi\";\r\nimport { BiUser } from \"react-icons/bi\";\r\nimport { Avatar } from '@mui/material'\r\nimport { IconContext } from \"react-icons\";\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport axios from 'axios';\r\n\r\n\r\nclass Login extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            appId: \"543752153590340\",\r\n            clientId: \"826925109796-mi95l41fi57bdlolpvnfdg5bpt9oc81h.apps.googleusercontent.com\",\r\n        }\r\n    }\r\n\r\n    loadAllGood(dataProduct, dataJoin) {\r\n        var resultProduct = dataProduct;\r\n        var joinTypeInfor = dataJoin;\r\n        var listProductInfor = [];\r\n        for (let i = 0; i < resultProduct.length; i++) {\r\n            var typeIDList = [];\r\n            var joinType = '';\r\n            for (var j = 0; j < joinTypeInfor.length; j++) {\r\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\r\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) \r\n                {\r\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\r\n                }\r\n            }\r\n    \r\n            listProductInfor.push(\r\n                {\r\n                    ...resultProduct[i],\r\n                    typeIDList: typeIDList,\r\n                });\r\n        }\r\n        this.props.getProductToReducer(listProductInfor);\r\n      }\r\n\r\n    // Login with google\r\n    onLoginSuccess = async (res) => {\r\n        this.props.setRole();\r\n        await axios.post(`http://localhost:5000/sign-in-with-google`, res.profileObj)\r\n            .then(res => {\r\n                switch (res.data.status) {\r\n                    case 1:\r\n                        localStorage.setItem('token', res.data.token);\r\n                        this.props.updateProfile(res.data.data);\r\n                        this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n                        this.props.updateShiftTypes(res.data.data.shiftTypes);\r\n                        this.props.updateRecieptUser(res.data.data.receipts);\r\n                        this.props.updateCouponUser(res.data.data.coupons)\r\n                        this.props.changeLoginStatus();\r\n                        this.props.getTimeKeeping(res.data.data.timeKeeping);\r\n                        this.loadAllGood(res.data.data.products, res.data.data.productJoinTypes);\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(res.data.message, \"success\");\r\n                        if(res.data.data.regulation.length > 0)\r\n                            this.props.setRegulation(res.data.data.regulation[0]);\r\n                        else this.props.setRegulation({});\r\n                        console.log(\"res.data\", res.data)\r\n                        break;\r\n                    case -1:\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(res.data.message, \"error\");\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Error, server don't active\", \"error\");\r\n            })\r\n    }\r\n\r\n    // Check để thay đổi trạng thái đã login hay chưa\r\n    isLoginCheck = async (e) => {\r\n        this.props.setRole();\r\n        if (this.blurEmail() && this.blurPassword()) {\r\n            await axios.post(`http://localhost:5000/sign-in-with-gmail-password`, {\r\n                email: document.querySelector('#email').value,\r\n                password: document.getElementById('password').value,\r\n            })\r\n                .then(res => {\r\n                    switch (res.data.status) {\r\n                        case 1:\r\n                            localStorage.setItem('token', res.data.token);\r\n                            this.props.updateProfile(res.data.data);\r\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n                            this.props.updateShiftTypes(res.data.data.shiftTypes);\r\n                            this.props.updateCouponUser(res.data.data.coupons)\r\n                            this.props.updateRecieptUser(res.data.data.receipts);\r\n                            this.props.changeLoginStatus();\r\n                            this.props.getEmployee(res.data.data.employees);\r\n                            this.props.getTimeKeeping(res.data.data.timeKeeping);\r\n                            this.loadAllGood(res.data.data.products, res.data.data.productJoinTypes);\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"success\");\r\n                            if(res.data.data.regulation.length > 0)\r\n                                this.props.setRegulation(res.data.data.regulation[0]);\r\n                            else this.props.setRegulation({});\r\n                            console.log(\"res.data\", res.data)\r\n                            break;\r\n                        case -1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"error\");\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Error system\", \"error\");\r\n                })\r\n        }\r\n    }\r\n\r\n    // Handle user : blur , change in input\r\n    blurEmail = () => {\r\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        const event = document.querySelector('#email');\r\n        let elementValue = event.value;\r\n        const formGroup = event.parentElement.parentElement;\r\n        // check validate\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else if (!regex.test(elementValue)) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        let elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Sign In'\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-login\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <BiUser></BiUser>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Sign In</div>\r\n                                <NavLink to=\"/register\" className=\"auth-form__switch-btn\">Register <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight></NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Enter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"auth-form__support\">\r\n                                    <span className=\"auth-form__support-forget\">\r\n                                        <NavLink to=\"/forgot\" className=\"auth-form__switch-btn\">Forgot password</NavLink>\r\n                                    </span>\r\n                                    <span className=\"auth-form__help-separate\" />\r\n                                    <span className=\"auth-form__support-need-support\">Need help?</span>\r\n                                </div>\r\n                                <div className=\"auth-form__support\">\r\n                                    <GoogleLogin\r\n                                        className=\"auth-form__support-google\"\r\n                                        clientId={this.state.clientId}\r\n                                        buttonText=\"Login with Google\"\r\n                                        onSuccess={this.onLoginSuccess}\r\n                                        onFailure={this.onFailureSuccess}\r\n                                        cookiePolicy={'single_host_origin'}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div to=\"/home\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <NavLink to=\"/employee\" id=\"navlink\" className=\"auth-form__btn-log-in auth-form__switch-btn auth-form-employee\">\r\n                                        Employee\r\n                                        <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight>\r\n                                    </NavLink>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        updateProfile: (data) => {\r\n            dispatch({\r\n                type: \"UPDATA_DATA_USER\",\r\n                data: data,\r\n            })\r\n        },\r\n        setRole: () => {\r\n            dispatch({\r\n                type: \"ADMIN_ROLE\"\r\n            });\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar,\r\n            })\r\n        },\r\n        updateShiftTypes: (shiftTypes) => {\r\n            dispatch({\r\n                type: \"UPDATE_DATA_SHIFT_USER\",\r\n                shiftTypes: shiftTypes,\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n          },\r\n        updateShiftTypes: (shiftTypes) => {\r\n            dispatch({\r\n                type: \"UPDATE_DATA_SHIFT_USER\",\r\n                shiftTypes: shiftTypes,\r\n            })\r\n        },\r\n        updateRecieptUser: (data) => {\r\n            dispatch({\r\n                type: \"UPDATE_RECIEPT_USER\",\r\n                listReciept: data,\r\n            })\r\n        },\r\n        getTimeKeeping: (data) => {\r\n            dispatch({\r\n              type: \"GET_TIMEKEEPER\",\r\n              data: data\r\n            });  \r\n          },\r\n        getProductToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_AND_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        setRegulation: (data) => {\r\n            dispatch({\r\n                type: \"SET_REGULATION\",\r\n                data: data,\r\n            });\r\n        },\r\n        updateCouponUser: (coupons) => {\r\n            dispatch({\r\n                type: \"UPDATE_COUPON_USER\",\r\n                coupons: coupons\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Login\\ForgotPassword.js",["736","737"],"import React, { Component } from 'react';\r\nimport Avatar from '@mui/material/Avatar'\r\nimport { IconContext } from \"react-icons\";\r\nimport { FiSend } from \"react-icons/fi\";\r\nimport { BsFillEnvelopeFill, BsLockFill, BsBoxArrowInLeft, BsCodeSlash } from \"react-icons/bs\";\r\nimport emailjs from 'emailjs-com';\r\nimport axios from 'axios';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nvar bcrypt = require('bcryptjs');\r\n\r\n\r\nclass ForgotPassword extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            code: \"\",\r\n            statusSendCode: true,\r\n        }\r\n    }\r\n\r\n\r\n    // Send code tới người dùng\r\n    sendCode = (a = this.makeCode(6)) => {\r\n        this.setState({\r\n            code: a,\r\n        })\r\n        emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\r\n        emailjs.send(\"gmail_main\", \"template_plasdgf\", {\r\n            To_mail: `${document.querySelector('#email').value}`,\r\n            code: `${a}`,\r\n        })\r\n            .then((response) => {\r\n                console.log('SUCCESS!', response.status, response.text);\r\n            }, (err) => {\r\n                console.log('FAILED...', err);\r\n            });\r\n    }\r\n\r\n    // Tạo code để xác nhận\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Hashpassword\r\n    hash = (pass) => {\r\n        var hash = bcrypt.hashSync(pass, 12)\r\n        return hash;\r\n    }\r\n\r\n    //Check tìm lại mật khẩu\r\n    findPassword = (e) => {\r\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword()) {\r\n            const form = document.getElementById('findpass-form');\r\n            axios.post(`http://localhost:5000/find-password`, {\r\n                email: document.querySelector('#email').value,\r\n                password: this.hash(document.getElementById('password').value),\r\n            })\r\n                .then(res => {\r\n                    form.reset();\r\n                    switch (res.data.status) {\r\n                        case 1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"success\");\r\n                            break;\r\n                        case -1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"error\");\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Error system\", \"error\");\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    // Handle user blue change in input\r\n    blurEmail = () => {\r\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        const event = document.querySelector('#email');\r\n        const elementValue = event.value;\r\n        const formGroup = event.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            this.setState({\r\n                statusSendCode: true,\r\n            })\r\n            return false;\r\n        } else if (!regex.test(elementValue)) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\r\n            this.setState({\r\n                statusSendCode: true,\r\n            })\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            this.setState({\r\n                statusSendCode: false,\r\n            })\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurCode = () => {\r\n        const e = document.getElementById('code');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (this.state.code === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\r\n            return false\r\n        } else if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\r\n            return false\r\n        } else if (elementValue !== this.state.code) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\r\n            return false\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurRePassword = () => {\r\n        const e = document.getElementById('re-password')\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else if (document.getElementById('password').value !== elementValue) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Find password'\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-findpass\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <FiSend></FiSend>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Find password</div>\r\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"><BsBoxArrowInLeft className=\"arrow-return\"></BsBoxArrowInLeft></NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/findpass-submit?_method=PUT\" method=\"POST\" id=\"findpass-form\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"Ex: abc@gmail.com\" type=\"text\" />\r\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND</button>\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"code\" className=\"form-label\">Code</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\r\n                                        <input maxLength={6} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\r\n\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">New password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Enter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">Re-password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"password\" rules=\"required|min:6\" id=\"re-password\" placeholder=\"Enter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div onClick={(e) => this.findPassword(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Find Password</div>\r\n                                </div>\r\n\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default connect(mapDispatchToProps)(ForgotPassword);\r\n","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Login\\Register.js",["738","739","740","741"],"import React, { Component } from 'react';\r\nimport '../../css/Login.css'\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport { connect } from 'react-redux';\r\nimport Avatar from '@mui/material/Avatar'\r\nimport { IconContext } from \"react-icons\";\r\nimport { FiChevronLeft, FiUserPlus } from \"react-icons/fi\";\r\nimport { BsFillEnvelopeFill, BsLockFill, BsCodeSlash } from \"react-icons/bs\";\r\nimport { FaPhoneSquare } from \"react-icons/fa\";\r\nimport axios from 'axios';\r\nimport emailjs from 'emailjs-com';\r\nvar bcrypt = require('bcryptjs');\r\n\r\n\r\nclass Register extends Component {\r\n    constructor(props) {\r\n\r\n        super(props);\r\n        this.state = {\r\n            code: \"\",\r\n            statusSendCode: true,\r\n        }\r\n    }\r\n\r\n\r\n    // Send code tới người dùng\r\n    sendCode = (a = this.makeCode(6)) => {\r\n        this.setState({\r\n            code: a,\r\n        })\r\n        emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\r\n        emailjs.send(\"gmail_main\", \"template_plasdgf\", {\r\n            To_mail: `${document.getElementById('email').value}`,\r\n            code: `${a}`,\r\n        })\r\n            .then((response) => {\r\n                console.log('SUCCESS!', response.status, response.text);\r\n            }, (err) => {\r\n                console.log('FAILED...', err);\r\n            });\r\n    }\r\n\r\n    // status SignUp \r\n    SignUp = (e) => {\r\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword() && this.blurTel()) {\r\n            axios.post(`http://localhost:5000/register-with-email`, {\r\n                email: document.getElementById('email').value,\r\n                password: this.hash(document.getElementById('password').value),\r\n                tel: document.getElementById('tel').value,\r\n            })\r\n                .then(res => {\r\n                    switch (res.data.status) {\r\n                        case 1:\r\n                            localStorage.setItem('token', res.data.token);\r\n                            this.props.updateProfile(res.data.data);\r\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n                            this.props.changeLoginStatus();\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"success\");\r\n                            break;\r\n                        case -1:\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(res.data.message, \"error\");\r\n                            break;\r\n                        default:\r\n                            break;\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Error system\", \"error\");\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n\r\n    // Tạo mã code cho người dùng xác nhận\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Hashpassword\r\n    hash = (pass) => {\r\n        var hash = bcrypt.hashSync(pass, 12)\r\n        return hash;\r\n    }\r\n\r\n\r\n    // Handle user : blur, change in input\r\n    blurEmail = () => {\r\n        const regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n        const e = document.getElementById('email');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            this.setState({\r\n                statusSendCode: true,\r\n            })\r\n            return false;\r\n        } else if (!regex.test(elementValue)) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\r\n            this.setState({\r\n                statusSendCode: true,\r\n            })\r\n            return false\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            this.setState({\r\n                statusSendCode: false,\r\n            })\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurCode = () => {\r\n        const e = document.getElementById('code');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (this.state.code === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\r\n            return false\r\n        } else if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\r\n            return false\r\n        } else if (elementValue !== this.state.code) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\r\n            return false\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurRePassword = () => {\r\n        const e = document.getElementById('re-password')\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else if (document.getElementById('password').value !== elementValue) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true\r\n        }\r\n    }\r\n\r\n    blurTel = () => {\r\n        const e = document.getElementById('tel');\r\n        const elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        const regex = /^\\d+$/;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else if (!regex.test(elementValue)) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Phone is not in the correct format\";\r\n            return false;\r\n        } else if (elementValue.length !=10){\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Phone number must has 10 digits\";\r\n            return false;\r\n        } else if (elementValue[0] !='0'){\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Phonenumber must begin with 0\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Register'\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-register\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <FiUserPlus></FiUserPlus>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Register</div>\r\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Sign In</NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/register-submit\" method=\"post\" id=\"register-form\">\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\r\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND CODE</button>\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\r\n                                        <input maxLength={6} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Enter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"re-password\" id=\"re-password\" placeholder=\"Enter re-password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <FaPhoneSquare className=\"input-custom-icon\" ></FaPhoneSquare>\r\n                                        </span>\r\n                                        <input maxLength={30} className=\"form-control\" onBlur={(e) => this.blurTel(e)} onChange={(e) => this.changeInput(e)} name=\"tel\" rules=\"required\" id=\"tel\" placeholder=\"Ex: 0303030303\" type=\"tel\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div onClick={(e) => this.SignUp(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign Up</div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div >\r\n            </div >\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        updateProfile: (data) => {\r\n            dispatch({\r\n                type: \"UPDATA_DATA_USER\",\r\n                data: data,\r\n            })\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar,\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Login\\LoginWithEmployee.js",["742","743"],"import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport '../../css/Login.css'\r\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\r\nimport { FiXSquare, FiChevronLeft } from \"react-icons/fi\";\r\nimport { FaUserTie } from 'react-icons/fa'\r\nimport { Avatar } from '@mui/material'\r\nimport { IconContext } from \"react-icons\";\r\nimport axios from 'axios';\r\nimport Alert from '@mui/material/Alert';\r\n\r\nclass LoginWithEmployee extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n        }\r\n    }\r\n\r\n    // Check để thay đổi trạng thái đã login hay chưa\r\n    isLoginCheck = async (e) => {\r\n        this.props.setRole();\r\n        if (this.blurEmail() && this.blurPassword()) {\r\n            await axios.post(`http://localhost:5000/sign-in-employee`, {\r\n                email: document.querySelector('#username').value,\r\n                password: document.getElementById('password').value,\r\n            })\r\n                .then(res => {\r\n                    if (res.status === 200) {\r\n                        console.log(\"res.data.data.regulation\", res.data.data.regulation);\r\n                        localStorage.setItem('token', res.data.token);\r\n                        this.props.updateProfile(res.data.data.employee[0], res.data.data.manager[0], res.data.data.store[0].storeName);\r\n                        this.props.updateAvatar(res.data.data.employee[0].imgUrl ? res.data.data.employee[0].imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\r\n                        this.props.updateRecieptUser(res.data.data.receipts);\r\n                        if(res.data.data.regulation.length > 0)\r\n                            this.props.setRegulation(res.data.data.regulation[0]);\r\n                        else this.props.setRegulation({});\r\n                        this.props.updateCouponUser(res.data.data.coupons)\r\n                        this.props.changeLoginStatus();\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(\"Login successfully\", \"success\");\r\n                        console.log(\"res.data\", res.data)\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"The email IS NOT registered or you entered the WRONG password.\", \"error\");\r\n                    return;\r\n                })\r\n            // Get các thông tin để thêm vào redux\r\n        }\r\n    }\r\n\r\n\r\n    // Handle user : blur , change in input\r\n    blurEmail = () => {\r\n        const event = document.querySelector('#username');\r\n        let elementValue = event.value;\r\n        const formGroup = event.parentElement.parentElement;\r\n        // check validate\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    blurPassword = () => {\r\n        const e = document.getElementById('password');\r\n        let elementValue = e.value;\r\n        const formGroup = e.parentElement.parentElement;\r\n        if (elementValue === \"\") {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\r\n            return false;\r\n        } else if (e.value.length < 6) {\r\n            formGroup.className = 'invalid form-group'\r\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\r\n            return false;\r\n        } else {\r\n            formGroup.classList.remove('invalid');\r\n            formGroup.querySelector('.form-message').innerText = \"\";\r\n            return true;\r\n        }\r\n    }\r\n\r\n    changeInput = (e) => {\r\n        const formGroup = e.target.parentElement.parentElement;\r\n        formGroup.classList.remove('invalid');\r\n        formGroup.querySelector('.form-message').innerText = \"\";\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Employee'\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Login\">\r\n                <div className=\"form-login\">\r\n                    <div className=\"auth-form\">\r\n                        <Avatar className=\"auth-form__avatar\">\r\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\r\n                                <FaUserTie></FaUserTie>\r\n                            </IconContext.Provider>\r\n                        </Avatar>\r\n                        <div className=\"auth-form__container\">\r\n                            <div className=\"auth-form__header\">\r\n                                <div className=\"auth-form__heading\">Employee</div>\r\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Manager Sign In</NavLink>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"auth-form__body\">\r\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"email\" className=\"form-label\">Username</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\r\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"username\" id=\"username\" placeholder=\"VD: phuoc123\" type=\"text\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"form-group\">\r\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n                                    <div className=\"input-custom\">\r\n                                        <span>\r\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\r\n                                        </span>\r\n                                        <input maxLength={30} className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\" id=\"password\" placeholder=\"Enter password\" type=\"password\" />\r\n                                    </div>\r\n                                    <span className=\"form-message\" />\r\n                                </div>\r\n                                <div className=\"auth-form__btn\">\r\n                                    <div to=\"/sellproduct\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        setRole: () => {\r\n            dispatch({\r\n                type: \"EMPLOYEE_ROLE\",\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        updateProfile: (data, data1, storeName) => {\r\n            dispatch({\r\n                type: \"UPDATA_DATA_EMPLOYEE\",\r\n                data: data,\r\n                data1: data1,\r\n                storeName: storeName,\r\n            })\r\n        },\r\n        setProfile: (data) => {\r\n            dispatch({\r\n                type: \"SET_DATA_USER\",\r\n                data: data,\r\n            })\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar,\r\n            })\r\n        },\r\n        updateRecieptUser: (data) => {\r\n            dispatch({\r\n                type: \"UPDATE_RECIEPT_USER\",\r\n                listReciept: data,\r\n            })\r\n        },\r\n        setRegulation: (data) => {\r\n            dispatch({\r\n                type: \"SET_REGULATION\",\r\n                data: data,\r\n            });\r\n        },\r\n        updateCouponUser: (coupons) => {\r\n            dispatch({\r\n                type: \"UPDATE_COUPON_USER\",\r\n                coupons: coupons\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginWithEmployee);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Router\\DashboardURL.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Partials\\SideNavBar.js",["744","745","746","747","748","749"],"import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    AiOutlineDashboard,\r\n    AiFillDashboard,\r\n    AiOutlineContainer,\r\n    AiFillContainer\r\n} from \"react-icons/ai\";\r\nimport { Button } from '@mui/material';\r\nimport { BsInfoCircleFill } from \"react-icons/bs\";\r\nimport {\r\n    IoPeopleOutline,\r\n    IoPeopleSharp,\r\n    IoReceiptOutline,\r\n    IoReceiptSharp,\r\n} from \"react-icons/io5\";\r\nimport { ImCheckboxUnchecked, ImCheckboxChecked } from \"react-icons/im\"\r\nimport { IoIosArrowBack , IoIosArrowForward} from \"react-icons/io\";\r\nimport { RiProfileFill, RiProfileLine } from \"react-icons/ri\";\r\nimport { FaSignOutAlt } from \"react-icons/fa\";\r\nimport { GiSellCard } from 'react-icons/gi'\r\nimport Avatar from '../../img/avatar_default.jpg';\r\nimport { NavLink } from 'react-router-dom';\r\nimport '../../css/SideNavBar.css';\r\nimport axios from 'axios';\r\n\r\nclass SideNavBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            change: true,\r\n            attendance: false,\r\n        }\r\n        this.getInitialScreen();\r\n        console.log(\"openSidebar\", this.props.sidebarOpen);\r\n        this.loadIntialOpen();\r\n    }\r\n    active = ['active', '', '', '', '', ''];\r\n\r\n    changeIndex(index) {\r\n        for (var i = 0; i < this.active.length; i++) {\r\n            this.active[i] = '';\r\n        }\r\n        this.active[index] = 'active';\r\n        this.setState({ change: !this.state.change });\r\n    }\r\n\r\n    getInitialScreen() {\r\n        var link = window.location.href;\r\n        link = link.substring(link.lastIndexOf('/') + 1);\r\n\r\n        for (var i = 0; i < this.active.length; i++) {\r\n            this.active[i] = '';\r\n        }\r\n\r\n        switch (link) {\r\n            case \"profile\":\r\n                this.active[1] = 'active';\r\n                break;\r\n            case \"employeemanager\":\r\n                this.active[2] = 'active';\r\n                break;\r\n            case \"goodmanager\":\r\n                this.active[3] = 'active';\r\n                break;\r\n            case \"import\":\r\n                this.active[3] = 'active';\r\n                break;\r\n            case \"receiptmanager\":\r\n                this.active[4] = 'active';\r\n                break;\r\n            case \"sellproduct\":\r\n                this.active[5] = 'active';\r\n                break;\r\n            case \"profile#\":\r\n                this.active[1] = 'active';\r\n                break;\r\n            case \"employeemanager#\":\r\n                this.active[2] = 'active';\r\n                break;\r\n            case \"goodmanager#\":\r\n                this.active[3] = 'active';\r\n                break;\r\n            case \"import#\":\r\n                this.active[3] = 'active';\r\n                break;\r\n            case \"receiptmanager#\":\r\n                this.active[4] = 'active';\r\n                break;\r\n            case \"sellproduct#\":\r\n                this.active[5] = 'active';\r\n                break;\r\n            default:\r\n                this.active[0] = 'active';\r\n                break;\r\n        }\r\n        this.setState({ change: !this.state.change });\r\n    }\r\n\r\n    attendance = () => {\r\n        this.setState({\r\n            attendance: true,\r\n        })\r\n        this.props.hideAlert()\r\n        this.props.showAlert('Attendanced success', 'success')\r\n    }\r\n\r\n    logOut = () => {\r\n        localStorage.setItem('token', null)\r\n        this.props.resetInfoUser()\r\n        this.props.resetRecieptUser()\r\n        this.props.resetShiftUser()\r\n        this.props.changeLoginStatus()\r\n    }\r\n\r\n    attendance = () => {\r\n        var time = new Date();\r\n        let a = ((time.getHours() > 12) ? time.getHours() - 12 : time.getHours()) + \":\" + time.getMinutes() +\" \"+ ((time.getHours() > 12) ? \"PM\" : \"AM\");\r\n        axios.post('http://localhost:5000/api/employee/time-keeping',{\r\n            token: localStorage.getItem('token'),\r\n            data: {\r\n                email: this.props.infoUser.employeeID,\r\n                time: a,\r\n            }\r\n        }).then(res => {\r\n            console.log(res)\r\n            localStorage.setItem('token', res.data.token)\r\n            this.props.showAlert(res.data.message, 'success')\r\n            this.setState({\r\n                attendance: true\r\n            })\r\n        }).catch(err => {\r\n            this.props.showAlert(err.response.data.message, 'error')\r\n        })\r\n    }\r\n\r\n    hideNavbar() {\r\n        // console.log(\"Chạy được hàm ẩn rồi\");\r\n        // // // console \r\n        // const navbarContainer = document.querySelector('.navbar-container');\r\n        const navbarContainer = document.querySelector('.navbar-container');\r\n        navbarContainer.classList.add('short');\r\n        this.props.closeSidebar();\r\n    }\r\n\r\n    showNavbar() {\r\n        // console.log(\"Chạy được hàm ẩn rồi\");\r\n        // // // console \r\n        const navbarContainer = document.querySelector('.navbar-container');\r\n        navbarContainer.classList.remove('short');\r\n        this.props.openSidebar();\r\n    }\r\n\r\n    loadIntialOpen() {\r\n        this.props.openSidebar();\r\n        // if(this.props.sidebarOpen)\r\n        // {\r\n        //     var navbarContainer2 = document.querySelector('.navbar-container');\r\n        //     console.log('Toang mở')\r\n        //     console.log(\"navbarContainer\", navbarContainer2)\r\n        //     // navbarContainer2.classList.remove('short');\r\n        // }\r\n        // else \r\n        // {\r\n        //     var navbarContainer2 = document.querySelector('.navbar-container');\r\n        //     console.log('Toang đóng')\r\n        //     console.log(\"navbarContainer\", navbarContainer2)\r\n        //     // navbarContainer2.classList.add('short');\r\n        // }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div\r\n                class=\"navbar-container\"\r\n            >\r\n                <div style={{ backgroundColor: !this.props.statusDarkmode ? '#fafafa' : '#37474f' }} class=\"navibar sidebar\">\r\n                    <div className=\"nav-icon\" >\r\n                        {\r\n                            this.props.sidebarOpen ?\r\n                            <IoIosArrowBack\r\n                                className='icon-open'\r\n                                size={20}\r\n                                onClick={(e) => this.hideNavbar()}\r\n                            />\r\n                            :\r\n                            <IoIosArrowForward\r\n                                className='icon-close'\r\n                                style={{\r\n                                    position: 'fixed',\r\n                                    left: '42px',\r\n                                    top: '56px',\r\n                                }}\r\n                                size={20}\r\n                                onClick={(e) => this.showNavbar()}\r\n                            />\r\n                        }\r\n                    </div>\r\n                    <div class=\"nav-heading\">\r\n                        <div \r\n                            style={{ \r\n                                backgroundColor: !this.props.sidebarOpen? !this.props.statusDarkmode ? '#fafafa' : '#37474f': (!this.props.statusDarkmode ? '#cfd8dc' : '#455a64'),\r\n                                paddingTop: !this.props.sidebarOpen? 10: 8,\r\n                                display: 'flex'\r\n                            }} \r\n                            class=\"navbar-heading-container\"\r\n                        >\r\n                            <img class='user-avatar'src={this.props.infoUser.avatar != 'none' ? this.props.infoUser.avatar : Avatar} style={{ width: 40, height: 40, borderRadius: '100%', flex: 1 }}></img>\r\n                            <span class=\"user-name\" style={{ color: !this.props.statusDarkmode ? 'black' : 'white', fontWeight: '700', maxWidth: '100px' }} >\r\n                                {this.props.infoUser.lastName + \" \" + this.props.infoUser.firstName}\r\n                            </span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"nav-container\">\r\n                        {\r\n                            this.props.role == true ? (null)\r\n                                : (<div style={{ justifyContent: 'center', display: 'flex', marginBottom: '10px' }}>\r\n                                    <Button onClick={() => this.attendance()} style={{ backgroundColor: this.state.attendance ? '#b9f6ca' : '#e0e0e0', color: '#424242' }}>\r\n                                        {!this.state.attendance ? (<ImCheckboxUnchecked style={{ marginRight: '10px' }}></ImCheckboxUnchecked>)\r\n                                            : (<ImCheckboxChecked style={{ marginRight: '10px', color: '#1b5e20' }}></ImCheckboxChecked>)\r\n                                        }\r\n\r\n                                        {!this.props.sidebarOpen ? (null) : this.state.attendance ? 'attendanced' : 'attendance'}\r\n                                    </Button>\r\n                                </div>\r\n                                )\r\n                        }\r\n                        {\r\n                            this.props.role == true ?\r\n                                (<NavLink className={\"nav-item \" + this.active[0]} to=\"/dashboard\"\r\n                                    onClick={() => this.changeIndex(0)}\r\n                                >\r\n                                    <AiOutlineDashboard class=\"nav-item-icon\" />\r\n                                    <AiFillDashboard class=\"nav-item-icon icon-activate\" />\r\n                                    <span className=\"nav-item-lable\">Dashboard</span>\r\n                                </NavLink>) : (null)\r\n                        }\r\n                        <NavLink to=\"/profile\" className={\"nav-item \" + this.active[1]} href=\"#\"\r\n                            onClick={() => this.changeIndex(1)}\r\n                        >\r\n                            <RiProfileLine class=\"nav-item-icon\" />\r\n                            <RiProfileFill class=\"nav-item-icon icon-activate\" />\r\n                            <span className=\"nav-item-lable\">\r\n                                {this.props.role == true ? 'Store' : 'Profile'} \r\n                            </span>\r\n                        </NavLink>\r\n\r\n                        {\r\n                            this.props.role === true ?\r\n                                (\r\n                                    <div>\r\n                                        <NavLink\r\n                                            to=\"/employeemanager\"\r\n                                            className={\"nav-item \" + this.active[2]}\r\n                                            href=\"#\"\r\n                                            onClick={() => this.changeIndex(2)}\r\n                                        >\r\n                                            <IoPeopleOutline class=\"nav-item-icon\" />\r\n                                            <IoPeopleSharp class=\"nav-item-icon icon-activate\" />\r\n                                            <span className=\"nav-item-lable\">Employee Manager</span>\r\n                                        </NavLink>\r\n                                        <NavLink\r\n                                            to=\"/goodmanager\"\r\n                                            className={\"nav-item \" + this.active[3]}\r\n                                            href=\"#\"\r\n                                            onClick={() => this.changeIndex(3)}\r\n                                        >\r\n                                            <AiOutlineContainer className=\"nav-item-icon\" />\r\n                                            <AiFillContainer className=\"nav-item-icon icon-activate\" />\r\n                                            <span className=\"nav-item-lable\">Products Manager</span>\r\n                                        </NavLink>\r\n                                        <NavLink\r\n                                            to=\"/receiptmanager\"\r\n                                            className={\"nav-item \" + this.active[4]}\r\n                                            href=\"#\"\r\n                                            onClick={() => this.changeIndex(4)}\r\n                                        >\r\n                                            <IoReceiptOutline class=\"nav-item-icon\" />\r\n                                            <IoReceiptSharp class=\"nav-item-icon icon-activate\" />\r\n                                            <span className=\"nav-item-lable\">Receipt Manager</span>\r\n                                        </NavLink>\r\n                                    </div>\r\n                                ) : (null)\r\n                        }\r\n\r\n                        <NavLink to=\"/sellproduct\" className={\"nav-item \" + this.active[5]} href='#'\r\n                            onClick={() => this.changeIndex(5)}\r\n                        >\r\n                            <GiSellCard class=\"nav-item-icon\" />\r\n                            <GiSellCard class=\"nav-item-icon icon-activate\" />\r\n                            <span className=\"nav-item-lable\">Sell Product</span>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                    <div class=\"nav-footer\">\r\n                        <a\r\n                            to=\"/login\"\r\n                            onClick={() => this.logOut()}\r\n                            className={\"nav-item \"}\r\n                            style={{ flex: 5 }}\r\n                        >\r\n                            <FaSignOutAlt class=\"nav-item-icon\" />\r\n                            <span className=\"nav-item-lable\">Sign out</span>\r\n                        </a>\r\n                        <a target=\"blank\" href=\"https://github.com/Minhthang1506/SE100Project\" className={\"nav-item \"}  style={{ flex: 4 }}>\r\n                            <BsInfoCircleFill class=\"nav-item-icon\" />\r\n                            <span className=\"nav-item-lable\">About</span>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n        infoUser: state.infoUser,\r\n        role: state.role,\r\n        statusDarkmode: state.statusDarkmode,\r\n        sidebarOpen: state.sidebarOpen,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            })\r\n        },\r\n        resetShiftUser: () => {\r\n            dispatch({\r\n                type:\"RESET_SHIFT_USER\"\r\n            })\r\n        },\r\n        resetRecieptUser: () => {\r\n            dispatch({\r\n                type: \"RESET_ALL_RECIEPT_USER\",\r\n            })\r\n        },\r\n        changeConfirmPasswordTest: () => {\r\n            dispatch({\r\n                type: \"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        resetInfoUser: () => {\r\n            dispatch({\r\n                type: \"RESET_INFO_USER\"\r\n            })\r\n        },\r\n        closeSidebar: () => {\r\n            dispatch({\r\n                type: \"CLOSE_SIDEBAR\"\r\n            })\r\n        },\r\n        openSidebar: () => {\r\n            dispatch({\r\n                type: \"OPEN_SIDEBAR\"\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SideNavBar);\r\n","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodManager.js",["750","751","752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782","783","784","785","786","787","788","789"],"import { Component } from 'react';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport GoodTable from './GoodPartials/GoodTable';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Button from '@mui/material/Button';\r\nimport SearchBar from './GoodPartials/SearchBar';\r\nimport {connect} from 'react-redux'\r\nimport AddTypeModal from './GoodPartials/AddTypeModal';\r\nimport '../css/GoodManager.css';\r\nimport ConfirmModal from './GoodPartials/ConfirmModal';\r\nimport UpdateGoodModal from './GoodPartials/UpdateGoodModal';\r\nimport EditTypeModal from './GoodPartials/EditTypeModal';\r\nimport AddGoodModal from './GoodPartials/AddGoodModal';\r\nimport axios from 'axios';\r\nimport UpdateTypeModal from './GoodPartials/UpdateTypeModal';\r\nimport XLSX from 'xlsx';\r\nimport excelLogo from './GoodPartials/excelLogo.png';\r\nimport { inputAdornmentClasses } from '@material-ui/core';\r\nimport GoodTableDisplay from './GoodPartials/GoodTableDisplay';\r\nimport ExcelInstruction from './GoodPartials/ExcelInstruction';\r\nimport { Container, Grid, Card, CardHeader, Divider, CardContent} from '@mui/material';\r\nimport SortByTable from './GoodPartials/SortByTable';\r\nimport TypeManager from './GoodPartials/TypeManager';\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport { MdOutlineIntegrationInstructions } from \"react-icons/md\";\r\nimport { BsCardList } from \"react-icons/bs\";\r\nclass GoodManager extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.loadAllType(); \r\n        this.loadAllGood();\r\n    }\r\n\r\n    async loadAllGood() {\r\n        var resultProduct = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }\r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/`, {\r\n            params: { ...data }\r\n        })\r\n            .then(res => {\r\n                resultProduct = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        // Get hết từ cái productjoinType\r\n        var result = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, {\r\n            params: { ...data1 }\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n                localStorage.getItem('token', res.data.token);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        // Lấy các cái jointype\r\n        var joinTypeInfor = [];\r\n        for (let i = 0; i < result.length; i++) {\r\n            joinTypeInfor.push(result[i]);\r\n        }\r\n        // console.log(\"joinTypeInfor\", joinTypeInfor);\r\n\r\n        var listProductInfor = [];\r\n        for (let i = 0; i < resultProduct.length; i++) {\r\n            var typeIDList = [];\r\n            var joinType = '';\r\n            for (var j = 0; j < joinTypeInfor.length; j++) {\r\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\r\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) \r\n                {\r\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\r\n                    joinType = joinType + ' ' + this.getTypeNamebyTypeID(joinTypeInfor[j]._id.typeID);\r\n                }\r\n            }\r\n\r\n            listProductInfor.push(\r\n                {\r\n                    ...resultProduct[i],\r\n                    typeIDList: typeIDList,\r\n                    joinType: joinType\r\n                });\r\n        }\r\n        this.props.getProductToReducer(listProductInfor);\r\n    }\r\n\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName=\"Null\";\r\n        for(var i = 0; i < this.props.typeProduct.length;i++)\r\n        {   \r\n            if(this.props.typeProduct[i]._id.typeID == typeID)\r\n            {\r\n                typeName = this.props.typeProduct[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log('bug when get types', err);\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        this.props.getProductType(result);\r\n    }\r\n    handleAdd() {\r\n        this.props.changeAddTypeStatus();\r\n        this.props.setAddTypeStatus();\r\n    }\r\n    handleConfirm(){\r\n        this.props.changeConfirmStatus();\r\n        this.props.unsetDelete();\r\n    }\r\n    handleConfirmDelete(){\r\n        this.props.changeConfirmStatus();\r\n        this.props.setDeleteConfirm();\r\n    }\r\n    handleUpdateGood() {\r\n        this.props.changeUpdateGoodStatus();\r\n    }\r\n    handleEditType() {\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Product Manager'\r\n    }   \r\n\r\n    uploadExcel(e){\r\n        e.preventDefault();\r\n        var f;\r\n        try {\r\n            // console.log(\"e\", e.target.files[0]);\r\n            f = e.target.files[0];\r\n        }\r\n        catch(e) {\r\n            console.log(e);\r\n            return;\r\n        } \r\n\r\n        var name = f.name;\r\n        const reader = new FileReader();\r\n        var dataExcel;\r\n        // Chỗ này đọc file excel gì đó, giờ xử lý cái data lấy ra thôi\r\n        reader.onload = (evt) => {\r\n            const bstr = evt.target.result;\r\n            const wb = XLSX.read(bstr, {type:'binary'});\r\n            const wsname = wb.SheetNames[0];\r\n            const ws = wb.Sheets[wsname];\r\n            const data = XLSX.utils.sheet_to_csv(ws, {header:1});\r\n            // console.log(\"data\", data);\r\n            dataExcel = data;\r\n            this.handleExcelData(dataExcel);\r\n        };\r\n        reader.readAsBinaryString(f);\r\n        // Reset tên file mỗi khi đọc\r\n        document.querySelector('#upload-excel').value = '';\r\n\r\n        \r\n    }\r\n\r\n    handleExcelData(excelData) {\r\n        // chia các cột theo row\r\n        var rows = excelData.split('\\n');\r\n        console.log(\"Nội dung file\", rows);\r\n        if(rows.length  <= 2)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"The file is invalid because it doesn't has header and data!\",\"warning\");\r\n            return false;\r\n        }\r\n        // Xử lý các thông tin ở trưởng header\r\n        var rowSample=\r\n            [\"Product ID\",\"Name\",\"Quantity\",\"Unit\",\"Expired Date\",\r\n            \"Currency\",\"Original Price\",\"SellPrice\",\"ProductType\"];\r\n        var rowSplit = rows[0].split(',');\r\n        if(rowSample.length != rowSplit.length)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"The header is invalid. It is different from the template or has data out of the table!\",\"warning\");   \r\n            return false;\r\n        }\r\n        for(var i = 0 ; i < rowSample.length ; i++)\r\n        {\r\n            if(rowSample[i] != rowSplit[i]) {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"the header is different from the template\",\"warning\");\r\n                return false;\r\n            }\r\n        }\r\n        var columnName = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\r\n        var allRows = [];\r\n        // Xử lý lần lượt các dữ liệu ở từng ô.\r\n        for(var i2 = 1; i2 < rows.length - 1; i2++)\r\n        {\r\n            var dataRows = rows[i2].split(',');\r\n            if(dataRows.length < 9)\r\n            {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"The line \" + (i2+1) + ' in the excel file is lack of data' ,\"warning\");\r\n                return false;\r\n            }\r\n\r\n            if(dataRows.length > 9)\r\n            {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"The line \" + (i2+1) + ' in the excel file is has more data than the template or has the cell contains \",\"' ,\"warning\");\r\n                return false;\r\n            }\r\n            for(var j = 0; j < dataRows.length; j++)\r\n            {\r\n                if(dataRows[j]=='')\r\n                {\r\n                    this.props.hideAlert();\r\n\t\t\t\t    this.props.showAlert(\"The line \" + (i2+1) + ' with column ' + columnName[j] +' in the excel file is '+\r\n                    +'lack of data' ,\"warning\");\r\n                    return false;\r\n                }\r\n            }\r\n            // Lấy dữ liệu đã có tạo thành object và bắt đầu check xong constraint\r\n            var newRow = {\r\n                name: dataRows[1],\r\n                quantity: dataRows[2],\r\n                unit: dataRows[3],\r\n                expiredDate: dataRows[4],\r\n                currency: dataRows[5],\r\n                originalPrice: dataRows[6],\r\n                sellPrice: dataRows[7],\r\n                productTypeName: dataRows[8]\r\n            }\r\n            // Check các constraint và quy định ở đây trước khi add vào listObject\r\n            if(this.checkConstraintOfExcelObject(newRow, i2) == false) return false;\r\n            if(this.checkRegulationOfExcelObject(newRow, i2) == false) return false;\r\n            allRows.push(newRow);\r\n            \r\n        } \r\n        \r\n        console.log(\"Tất cả dữ liệu\", allRows);\r\n        // Xử lý sau khi đã lấy được các excel Object\r\n        this.addProductsFromExcel(allRows);\r\n    }\r\n\r\n    checkAllNumber(stringToCheck)\r\n    {\r\n        var number=[1,2,3,4,5,6,7,8,9,0];\r\n        for(var i = 0; i < stringToCheck.length ; i++)\r\n        {\r\n            var isFound = false;\r\n            for(var j = 0; j < number.length ;j++)\r\n            {\r\n                if(number[j]==stringToCheck[i])\r\n                {\r\n                    isFound = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(!isFound) return false; \r\n        }\r\n        return true;\r\n    }\r\n\r\n    checkAllDoubleNumber(stringToCheck) {\r\n        var number=['1','2','3','4','5','6','7','8','9','0','.'];\r\n        for(var i = 0; i < stringToCheck.length ; i++)\r\n        {\r\n            var isFound = false;\r\n            for(var j = 0; j < number.length ;j++)\r\n            {\r\n                if(number[j]==stringToCheck[i])\r\n                {\r\n                    isFound = true;\r\n                    break;\r\n                }\r\n            }\r\n            if(!isFound) return false; \r\n        }\r\n        return true;\r\n    }\r\n\r\n    isLeafYear(year) {\r\n        if(year % 400 == 0) return true;\r\n        if(year % 100 == 0) return false;\r\n        if(year % 4 == 0) return true;\r\n        else return false;\r\n    }\r\n\r\n    toDateString(dateStringToConvert)\r\n    {\r\n        var days = dateStringToConvert.split('/');\r\n        if(days.length !=3) return \"\";\r\n        // Check một số cái điều kiện về tháng\r\n        if(!this.checkAllNumber(days[0]) || parseInt(days[0]) > 12 || parseInt(days[0]) < 1 )\r\n        {\r\n            return \"\";\r\n        } \r\n        // Check một số điều kiện về năm\r\n        if(!this.checkAllNumber(days[2]) || parseInt(days[2]) <= 0 )\r\n        {\r\n            return \"\";\r\n        }\r\n        // Check các điều kiện về ngày \r\n        var dayInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n        if(parseInt(days[0]) < 1 || parseInt(days[0]) > 31)\r\n        {\r\n            return \"\";\r\n        }\r\n        var dayOfCurrrentMonth = dayInMonth[parseInt(days[0])];\r\n        if(parseInt(days[0]) == 2)\r\n        {\r\n            if(this.isLeafYear(parseInt(days[2])))\r\n            {\r\n                dayOfCurrrentMonth = 29;\r\n            }\r\n        }\r\n        if(parseInt(days[0]) > dayOfCurrrentMonth)\r\n        {\r\n            return \"\";\r\n        }\r\n        // Này là trường hợp lý tưởng nhất luôn rồi\r\n        return '20' + days[2] + '-' + days[0] + '-' + days[1]; \r\n    }\r\n\r\n    checkConstraintOfExcelObject(newRow, index) {\r\n        // check quantity\r\n        try {\r\n            if(parseInt(newRow.quantity) <= 0 || this.checkAllNumber(newRow.quantity)==false)\r\n            {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"The number of product in line \"+ (index + 1) +\" is invalid\",\"warning\");\r\n                return false;\r\n            }\r\n        }\r\n        catch(e)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"The number of product in line \"+ (index + 1) +\" is invalid\",\"warning\");\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            if(parseFloat(newRow.originalPrice) <= 0 || this.checkAllDoubleNumber(newRow.originalPrice)==false)\r\n            {\r\n                this.props.hideAlert();\r\n\t\t\t    this.props.showAlert(\"Import price of product in line \"+ (index + 1) +\" is invalid\",\"warning\");\r\n            }\r\n\r\n        }\r\n        catch (e){\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Import price of product in line \"+ (index + 1) +\" is invalid\",\"warning\");\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            if(parseFloat(newRow.sellPrice) <= 0 || this.checkAllDoubleNumber(newRow.sellPrice)==false)\r\n            {\r\n                this.props.hideAlert();\r\n\t\t\t    this.props.showAlert(\"Sell price of product in line \"+ (index + 1) +\" is invalid\",\"warning\");\r\n                return false;\r\n            }\r\n\r\n        }\r\n        catch (e){\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Sell price of product in line \"+ (index + 1) +\" is invalid\",\"warning\");\r\n            return false;\r\n        }\r\n\r\n        try {\r\n            if(this.toDateString(newRow.expiredDate)==\"\")\r\n            {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Expired day of product in line \"+ (index + 1) +\" is invalid\",\"warning\");\r\n                return false;\r\n            }\r\n        }\r\n        catch(e)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Expired day of product in line \"+ (index + 1) +\" is invalid\",\"warning\");\r\n            return false;\r\n        }\r\n        // Check ngày hết hạn lớn hơn ngày nhập là ngày hiện tại\r\n        try{\r\n            // console.log(\"In thử ngày hiện tại\", new Date().getTime())\r\n            if(new Date().getTime() - new Date(this.toDateString(newRow.expiredDate)).getTime() >=0)\r\n            {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Expired day of product in line \"+ (index + 1) +\" must be greater than the import day\",\"warning\");\r\n                return false;\r\n            }\r\n        }\r\n        catch(e) {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Expired day of product in line \"+ (index + 1) +\" must be greater than the import day\",\"warning\");\r\n            return false;\r\n        }\r\n        // Check giá gốc phải nhỏ hơn giá bán\r\n        if ( parseFloat(newRow.sellPrice) - parseFloat(newRow.originalPrice) <=0.0) \r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Sell price of product in line \"+ (index + 1) +\" must be greater than the import price\",\"warning\");\r\n            return false;\r\n        }\r\n        // Check cái đơn vị tiền\r\n        if ( newRow.currency != '$' && newRow.currency !='VNĐ') \r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Currency of product in line \"+ (index + 1) +\" must be either '$' or 'VNĐ'\",\"warning\");\r\n            return false;\r\n        }\r\n        // Check xong hết các constraint;\r\n        return true;\r\n    }\r\n\r\n    calculateDay(dateString1, dateString2)\r\n    {\r\n        return (\r\n            (new Date(dateString1)).setHours(0, 0, 0) \r\n                - \r\n            (new Date(dateString2)).setHours(0,0,0)\r\n            )\r\n            /(1000 * 60 * 60 * 24);\r\n    }\r\n\r\n    getCurrentDateTimeString()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    checkRegulationOfExcelObject(newRow, index) {\r\n        if(Object.keys(this.props.regulation).length == 0) return true;\r\n        try {\r\n            if(\r\n                this.props.regulation.minExpiredProduct > \r\n                this.calculateDay(this.toDateString(newRow.expiredDate), this.getCurrentDateTimeString())\r\n            )\r\n            {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert('The expiration date in line '  + (index+1) \r\n                + ' must be at least ' +this.props.regulation.minExpiredProduct + ' day(s) older than the import date',\"warning\");\r\n                return false;\r\n            }\r\n        }\r\n        catch(e){\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Some error happened in checking regulation of import day and expire day\",\"warning\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Thêm các sản phẩm vào cơ sở dữ liệu:\r\n    addProductsFromExcel(excelObject){ \r\n        var allTypes = [];\r\n        var allProducts = [];\r\n        var allJoins = [];\r\n\r\n        var allProductsforRedux = [];\r\n        // ID bắt đầu đánh ở đây:\r\n        var genIDProductStart = 0;\r\n        var listProductInfor = this.props.listProduct.state;\r\n        if(listProductInfor.length > 0)\r\n        {\r\n            genIDProductStart = parseInt(listProductInfor[listProductInfor.length-1]._id.productID) + 1;\r\n        } \r\n        \r\n        var currentgenIDTypeStart = 0;\r\n        var listTypeInfor = this.props.typeProduct;\r\n        console.log(\"listTypeInfor\", listTypeInfor);\r\n        if(listTypeInfor.length>0)\r\n        {\r\n            currentgenIDTypeStart = parseInt(listTypeInfor[listTypeInfor.length-1]._id.typeID) + 1;\r\n        } \r\n\r\n        var excecuteListType = [];\r\n        // Chạy từng cái object để tạo cái product, cái type và cái join\r\n        for(var i = 0; i < excelObject.length; i++)\r\n        {\r\n            // Tách riêng từng cái product\r\n            var currentProduct = {\r\n                _id: {\r\n                    productID: genIDProductStart + i,\r\n                    importDate: this.getCurrentDateTimeString(),\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: excelObject[i].name,\r\n                quantity: excelObject[i].quantity,\r\n                remain: excelObject[i].quantity,\r\n                importPrice: (excelObject[i].currency == 'VNĐ') ?\r\n                    excelObject[i].originalPrice :\r\n                    excelObject[i].originalPrice * this.props.regulation.exchangeRate,\r\n                sellPrice: (excelObject[i].currency == 'VNĐ') ?\r\n                    excelObject[i].sellPrice :\r\n                    excelObject[i].sellPrice * this.props.regulation.exchangeRate,\r\n                expires: this.toDateString(excelObject[i].expiredDate),\r\n                imgUrl: 'none',\r\n                unit: excelObject[i].unit,\r\n            }\r\n            allProducts.push(currentProduct);\r\n            // Tách riêng từng cái type của cái currentProduct\r\n            var currentTypes = excelObject[i].productTypeName.split(' || ');\r\n            // console.log(\"currentTypes\", currentTypes)\r\n\r\n            // Tìm kiếm các cái trong listTypeInfor và trong cái executeListType\r\n            var currentProductRedux = currentProduct;\r\n            var typeIDList = [];\r\n\r\n            for(var k = 0; k < currentTypes.length ; k ++)\r\n            {\r\n                var indexFound = -1;\r\n                // Tìm kiếm trong các loại có sẵn\r\n                for(var j = 0 ; j < listTypeInfor.length; j++)\r\n                {\r\n                    if(currentTypes[k] == listTypeInfor[j].name)\r\n                    {\r\n                        indexFound = listTypeInfor[j]._id.typeID;\r\n                        break;\r\n                    }\r\n                }\r\n                if(indexFound != -1)\r\n                {\r\n                    // Tạo một cái object join để thêm vào cái có sẵn\r\n                    var currentproductJoinType = {\r\n                        _id : {\r\n                            productID: genIDProductStart + i,\r\n                            typeID: indexFound, \r\n                            importDate: this.getCurrentDateTimeString(),\r\n                            storeID: this.props.infoUser.email,\r\n                        }\r\n                    }\r\n                    allJoins.push(currentproductJoinType);\r\n\r\n                    typeIDList.push(indexFound);\r\n                }\r\n                else \r\n                {\r\n                    var indexExecFound = -1;\r\n                    for(var l =0 ; l < excecuteListType.length ; l++)\r\n                    {\r\n                        if(currentTypes[k] == excecuteListType[l].name)\r\n                        {\r\n                            indexExecFound = excecuteListType[l]._id.typeID;\r\n                        }\r\n                    }\r\n                    if(indexExecFound != -1)\r\n                    {\r\n                        var currentproductJoinType = {\r\n                            _id : {\r\n                                productID: genIDProductStart + i,\r\n                                typeID: indexExecFound, \r\n                                importDate: this.getCurrentDateTimeString(),\r\n                                storeID: this.props.infoUser.email,\r\n                            }\r\n                        }\r\n                        allJoins.push(currentproductJoinType);\r\n\r\n                        typeIDList.push(indexExecFound);\r\n                    }\r\n                    // Nếu như không tìm thấy trong cả hai cái thì phải thêm thôi\r\n                    else \r\n                    {\r\n                        // Thêm các cái mình sẽ add vào csdl ở đây\r\n                        var newTypeToAdd = {\r\n                            _id:{\r\n                                typeID: currentgenIDTypeStart,\r\n                                storeID: this.props.infoUser.email,\r\n                            },\r\n                            name: currentTypes[k],\r\n                        }\r\n                        allTypes.push(newTypeToAdd);\r\n                        \r\n                        // Sau đó sẽ thêm vào cái cái join ở đây\r\n                        var currentproductJoinType = {\r\n                            _id : {\r\n                                productID: genIDProductStart + i,\r\n                                typeID: currentgenIDTypeStart, \r\n                                importDate: this.getCurrentDateTimeString(),\r\n                                storeID: this.props.infoUser.email,\r\n                            }\r\n                        }\r\n                        allJoins.push(currentproductJoinType);\r\n\r\n                        typeIDList.push(currentgenIDTypeStart);\r\n                        // Cộng thêm để lấy ID cho các cái sau này\r\n                        currentgenIDTypeStart ++;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Thêm vào redux\r\n            var currentProductRedux2 = {\r\n                ...currentProductRedux,\r\n                typeIDList: typeIDList,\r\n            }\r\n            allProductsforRedux.push(currentProductRedux2);\r\n        }\r\n        console.log(\"allProducts\", allProducts);\r\n        console.log(\"allTypes\", allTypes);\r\n        console.log(\"allJoins\", allJoins);\r\n        // var allTypes = [];\r\n        // var allProducts = [];\r\n        // var allJoins = [];\r\n\r\n        // Lấy được ok rồi, giờ thì thêm từng cái vào cơ sở dữ liệu thôi\r\n        // Thêm thử tất cả sản phẩm vào csdl xem sao \r\n\r\n        var dataProduct = {\r\n            token: localStorage.getItem('token'),\r\n            products: [...allProducts ]\r\n        }\r\n        axios.post(`http://localhost:5000/api/product/import`, dataProduct)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n                console.log(\"Bug when add dataProduct\", err);\r\n            })\r\n\r\n        \r\n        for(var m = 0 ; m < allTypes.length ; m++)\r\n        {\r\n            const dataType = {\r\n                token: localStorage.getItem('token'),\r\n                productType: {\r\n                    ...allTypes[m]\r\n                }    \r\n            }\r\n            axios.post(`http://localhost:5000/api/product/type`, dataType)\r\n            .then(res => {\r\n                \r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n                console.log('bug when add types',err)\r\n            })\r\n            // Cập nhật type vào redux\r\n            this.props.addTypeToReducer(dataType.productType);\r\n        }      \r\n\r\n        for(var m = 0 ; m < allJoins.length ; m++)\r\n        {\r\n            const dataJoin = {\r\n                token: localStorage.getItem('token'),\r\n                productJoinType: {\r\n                    ...allJoins[m]\r\n                }  \r\n            }\r\n            axios.post(`http://localhost:5000/api/product/join`, dataJoin)\r\n                .then(res => {\r\n                    \r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                })\r\n        }\r\n        console.log(\"lưu vô bảng join thành công\");\r\n        // Cập nhật các sản phẩm và joinType vào redux:\r\n        for(var m = 0; m < allProductsforRedux.length ;m++)\r\n        {\r\n            this.props.addProductToRedux(allProductsforRedux[m]);\r\n        }\r\n        this.props.hideAlert();\r\n\t\tthis.props.showAlert(\"Add products from excel file success\",\"success\");\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"scroll-bar\" style={{overflow: 'auto', height:'100vh'}}>\r\n                <div style={{ width: '100%', marginTop: '40px', marginBottom: '40px', paddingBottom: '40px' }}>\r\n                    <Container style={{ marginBottom: '20px', marginTop: '20px' }} maxWidth=\"xl\">\r\n                        <Grid className=\"profile-body\" container spacing={2}>\r\n                            <Grid item  lg={3} md={12} sm={12}>\r\n                                <Grid container spacing={2}>\r\n                                    {/* <Grid item md={12} sm={12}>\r\n                                        <SortByTable></SortByTable>\r\n                                    </Grid> */}\r\n                                    <Grid item md={12} sm={12}>\r\n                                        <Grid container spacing={2}>\r\n                                            <Grid item md={12} sm={12}  >\r\n                                                <Card>\r\n                                                    <CardHeader style={{ height: 56, color: !this.props.darkmode ? '#0091ea' :'white', backgroundColor: !this.props.darkmode ? '#efeeef' :'#455a64'}} title=\"Import Manager\" />\r\n                                                    <Divider></Divider>\r\n                                                    <CardContent>\r\n                                                        <Grid container spacing={2}>\r\n                                                            <Grid item md={12} sm={12}>\r\n                                                                <Button variant=\"contained\" style={{height: 40, width: '100%'}}>\r\n                                                                    <Button style={{color: '#fff', textDecoration: 'none', height: 43}} onClick={() => this.props.changeStatusAddGood()}>\r\n                                                                        <BiPlusMedical color={'white'} size={16} style={{marginRight: 4}}/>\r\n                                                                        Add product\r\n                                                                    </Button>\r\n                                                                </Button>\r\n                                                            </Grid>\r\n                                                            \r\n                                                            <Grid item md={12} sm={12} style={{justifyContent:'space-between'}}>\r\n                                                                <label \r\n                                                                    className='excel-instruction'\r\n                                                                    style={{ width:'100%' ,backgroundColor: '#31be7d', padding: '4px 8px',borderRadius: 4, lineHeight: 2.0, color:'#fff', display: 'flex', alignItems:'center', justifyContent:'center'}} \r\n                                                                    for=\"upload-excel\"\r\n                                                                >\r\n                                                                    <img src={excelLogo} width={18} height={18} style={{marginRight: 2}}></img>\r\n                                                                    <label for=\"upload-excel\" className='excel-instruction' style={{fontSize: 15, display: 'block'}}>IMPORT EXCEL</label>\r\n                                                                </label>\r\n                                                                <input \r\n                                                                    id=\"upload-excel\" type=\"file\" style={{display: 'none'}} \r\n                                                                    accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" \r\n                                                                    onChange={(e) => this.uploadExcel(e)}\r\n                                                                ></input>\r\n                                                            </Grid>\r\n                                                            \r\n                                                            <Grid item md={12} sm={12}>\r\n                                                                <Button style={{ backgroundColor: 'yellowgreen', width:'100%' }}  onClick={() => this.props.changeExcelInstruction()} variant=\"contained\">\r\n                                                                    <BsCardList color={'white'} size={16} style={{marginRight: 4}}></BsCardList>\r\n                                                                    Excel Instruction\r\n                                                                </Button>\r\n                                                            </Grid>\r\n                                                        </Grid>\r\n                                                    </CardContent>\r\n                                                </Card>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                    <Grid item md={12} sm={12}>\r\n                                        <TypeManager></TypeManager>\r\n                                    </Grid>\r\n                                    \r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid item  lg={9} md={12} sm={12}>\r\n                                <GoodTableDisplay/>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Container>\r\n                    {/* Đây là phần modal */}\r\n\r\n                    {this.props.addTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <AddTypeModal></AddTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.confirmStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                            <ConfirmModal></ConfirmModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.updateGoodStatus ? (\r\n                        <div \r\n                            className=\"modal-add\"\r\n                        >\r\n                            <div onClick={() => {this.props.changeUpdateGoodStatus();}} className=\"modal-overlay\"></div>\r\n                            <UpdateGoodModal\r\n                                style={{\r\n                                    marginTop: 0\r\n                                }}\r\n                            >\r\n                            </UpdateGoodModal>\r\n                        </div>\r\n                    ): null}\r\n                     {this.props.editTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeEditTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <EditTypeModal></EditTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                    {/* {this.props.editTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeEditTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <EditTypeModal></EditTypeModal>\r\n                        </div>\r\n                    ): null} */}\r\n                    {this.props.statusAddGood ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeStatusAddGood();}} className=\"modal-overlay\"></div>\r\n                            <AddGoodModal></AddGoodModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.statusUpdateType ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeStatusUpdateType();}} className=\"modal-overlay\"></div>\r\n                            <UpdateTypeModal></UpdateTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.excelInstructionStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeExcelInstruction();}} className=\"modal-overlay\"></div>\r\n                            <ExcelInstruction></ExcelInstruction>\r\n                        </div>\r\n                    ): null}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        deleteStatus: state.deleteStatus,\r\n        updateGoodStatus: state.updateGoodStatus,\r\n        editTypeStatus: state.editTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        statusAddGood: state.statusAddGood,\r\n        infoUser: state.infoUser,\r\n        statusUpdateType: state.statusUpdateType,\r\n        typeProduct: state.typeProduct,\r\n        regulation: state.regulationReducer,\r\n        listProduct: state.listProduct,\r\n        excelInstructionStatus: state.excelInstructionStatus,\r\n        darkmode: state.statusDarkmode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        unsetDelete: () => {\r\n            dispatch({\r\n                type: \"UNSET_DELETE_STATUS\",\r\n            })\r\n        },\r\n        changeUpdateGoodStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\r\n            })\r\n        },\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            })\r\n        },\r\n        setAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        setDeleteConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_DELETE_GOOD\",\r\n            }); \r\n        },\r\n        changeStatusAddGood: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_GOOD_STATUS\",\r\n            }); \r\n        },\r\n        getProductType: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        changeStatusUpdateType: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_TYPE_STATUS\",\r\n            }); \r\n        },\r\n        getProductToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_AND_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        addTypeToReducer: (data) => {\r\n            dispatch({\r\n                type: \"ADD_TYPE\",\r\n                data: data,\r\n            });\r\n        },\r\n        addProductToRedux: (data) => {\r\n            dispatch({\r\n                type: \"ADD_PRODUCT\",\r\n                data: data,\r\n            }); \r\n        },\r\n        changeExcelInstruction: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EXCEL_INSTRUCTION_STATUS\",\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\nexport default connect(mapStateToProps , mapDispatchToProps)(GoodManager);\r\n","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeeManager.js",["790","791","792","793","794","795","796","797","798","799","800","801","802","803","804","805","806","807","808","809"],"import React, { Component } from 'react';\r\nimport Page from './EmployeePartials/Page';\r\nimport Label from './EmployeePartials/Label';\r\nimport Scrollbar from './EmployeePartials/Scrollbar';\r\nimport SearchNotFound from './EmployeePartials/SearchNotFound';\r\nimport { Icon } from '@iconify/react';\r\nimport { sentenceCase } from 'change-case';\r\nimport {connect} from 'react-redux'\r\nimport plusFill from '@iconify/icons-eva/plus-fill';\r\nimport {\r\n    Card,\r\n    Table,\r\n    Stack,\r\n    Avatar,\r\n    Button,\r\n    Checkbox,\r\n    TableRow,\r\n    TableBody,\r\n    TableCell,\r\n    Container,\r\n    Typography,\r\n    TableContainer,\r\n    TablePagination,\r\n    TableHead, TableSortLabel,\r\n    CardContent, \r\n    CardHeader,\r\n    Divider\r\n} from '@mui/material';\r\nimport EmployeeToolbar from './EmployeePartials/EmployeeToolbar';\r\nimport EmployeeMoreMenu from './EmployeePartials/EmployeeMoreMenu';\r\nimport SackedEmployeeMenu from './EmployeePartials/SackedEmployeeMenu';\r\nimport EmployeeTableHeader from './EmployeePartials/EmployeeTableHeader';\r\nimport USERLIST from './EmployeePartials/fakeData'\r\nimport AddEmployeeModal from './EmployeePartials/AddEmployeeModal';\r\nimport UpdateEmployeeModal from './EmployeePartials/UpdateEmployeeModal';\r\nimport PayMoneyModal from './EmployeePartials/PayMoneyModal';\r\nimport FixedCalendar from './EmployeePartials/FixedCalendar';\r\nimport UnShiftEmployee from './EmployeePartials/UnShiftEmployee';\r\nimport AddNextWeekTimeKeepingModal from './EmployeePartials/AddNextWeekTimeKeeping';\r\nimport UpdateNextWeekTimeKeepingModal from './EmployeePartials/UpdateNextWeekTimeKeeping';\r\nimport NoJobEmployee from './EmployeePartials/NoJobEmployee';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport TimekeepingTable from './EmployeePartials/TimekeepingTable';\r\nimport AddTimeKeepingModal from './EmployeePartials/AddTimeKeeperModal';\r\nimport UpdateTimeKeepingModal from './EmployeePartials/UpdateTimeKeepingModal';\r\nimport AddEmployeeToShift from './EmployeePartials/AddEmployeeToShift';\r\nimport axios from 'axios';\r\n\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '20px',\r\n    } \r\n})\r\n\r\nvar selected = [];\r\nvar filterName = \"\";\r\nvar filteredUsers = [];\r\nvar listUsers = [];\r\nclass EmployeeManager extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            change: false,\r\n        }; \r\n        //this.getAllEmployee();\r\n        // this.getAllEmployee();\r\n        this.getSackedEmployee();\r\n    }\r\n\r\n    handleFilterByName(event){\r\n        filterName = event.target.value;\r\n    }\r\n\r\n    addEmployee () {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n    // Lấy danh sách các nhân viên\r\n    async getAllEmployee () {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/employee/`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        listUsers = [];\r\n        for(var i = 0; i < result.length; i++)\r\n        {\r\n            listUsers.push(result[i]);\r\n        }\r\n        // Thêm vào cái redux\r\n        this.props.getEmployee(listUsers);\r\n        this.setState({change: !this.state.change});\r\n    }\r\n    // Thêm nhân viên\r\n    addEmployeeToDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n                managerID: \"19522006@gm.uit.edu.vn\",\r\n                password: \"abc123\",\r\n                firstName: \"Antonio\",\r\n                lastName: \"Rudiger\",\r\n                phoneNumber: \"03232323232\",\r\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\r\n                email: \"1911@gmail.com\",\r\n                address: \"Wherever\",\r\n                cardID: \"25110985819\",\r\n                startDate: \"2021-11-02T00:00:00.000Z\",\r\n                endDate: \"2021-11-31T00:00:00.000Z\",\r\n            }   \r\n        }\r\n        axios.post(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Save employee success!\",\"success\");\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n                // console.log(err);\r\n            })\r\n    }\r\n    // Xoá nhân viên\r\n    deleteEmployeeFromDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee:\r\n            [\r\n                {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\", \r\n                },\r\n            ]\r\n            \r\n        }\r\n        axios.delete(`http://localhost:5000/api/employee`,{data: data})\r\n            .then(res => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Sacked employee success\",\"success\");\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n    }\r\n    // Sửa nhân viên\r\n    updateEmployee()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n                managerID: \"19522006@gm.uit.edu.vn\",\r\n                password: \"abc123\",\r\n                firstName: \"Antonio\",\r\n                lastName: \"Rudiger Christensen\",\r\n                phoneNumber: \"03232323232\",\r\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\r\n                email: \"1911@gmail.com\",\r\n                address: \"Wherever\",\r\n                cardID: \"25110985819\",\r\n                startDate: \"2021-11-02T00:00:00.000Z\",\r\n                endDate: \"2021-11-31T00:00:00.000Z\",\r\n            }\r\n        }\r\n        axios.put(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Update success\");\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    async getSackedEmployee () {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/employee/delete`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log('Bug when get delete employees',err);\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        this.props.getSackedEmployee(result);\r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    backToWork() {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee:\r\n            [\r\n                {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\", \r\n                },\r\n            ]\r\n            \r\n        }\r\n        axios.patch(`http://localhost:5000/api/employee/delete`, data)\r\n            .then(res => {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Employee return to work success\",\"success\");\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n    }\r\n\r\n    // Xoá nhân viên hoàn toàn\r\n    deleteEmployeePermantlyFromDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee:\r\n            [\r\n                {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\", \r\n                },\r\n            ]\r\n            \r\n        }\r\n        axios.delete(`http://localhost:5000/api/employee/delete`,{data: data})\r\n            .then(res => {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Delete permantly employee(s) success\",\"success\");\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n    }\r\n\r\n    componentWillMount() {\r\n        document.title = 'Employee Manager'\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div\r\n                style={{display: 'block', overflowY: 'auto', height: '100vh', width:'100%'}}\r\n                id=\"scroll-bar\"\r\n            >\r\n                <Card style={{margin: 16}}>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Current employee(s)\" />\r\n                        <Divider />\r\n                        \r\n                        <CardContent style={{margin: 0}}>\r\n                            <Button\r\n                                variant='contained'\r\n                                startIcon={<Icon icon={plusFill} />}\r\n                                onClick={() => this.addEmployee()}\r\n                                >\r\n                                    New Employee\r\n                                </Button>\r\n                            <Card style={{width: '100%', margin: 0}}>\r\n                                <TableContainer id=\"scroll-bar\" style ={{maxHeight:'500px' , width: '100%',overflow: 'auto'}}>\r\n                                    <Table>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"center\" className = {classes.goodTable_Cell}style={{color: '#fff', backgroundColor: '#000'}}>\r\n                                                Username\r\n                                            </TableCell>\r\n                                            <TableCell component=\"th\" className = {classes.goodTable_Cell}scope=\"row\" padding=\"none\" align=\"center\" style={{color: '#fff', backgroundColor: '#000'}}> \r\n                                                First Name\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\"  className = {classes.goodTable_Cell}style={{color: '#fff', backgroundColor: '#000'}} >Last Name</TableCell>  \r\n                                            <TableCell align=\"center\"  className = {classes.goodTable_Cell}style={{color: '#fff', backgroundColor: '#000'}}>\r\n                                                Date Of Birth\r\n                                            </TableCell>\r\n                                            <TableCell align=\"center\"  className = {classes.goodTable_Cell}style={{color: '#fff', backgroundColor: '#000'}}>Phone Number</TableCell>\r\n                                            <TableCell align=\"center\"  className = {classes.goodTable_Cell}style={{color: '#fff', backgroundColor: '#000'}}>Email</TableCell>\r\n                                            <TableCell align=\"center\"  className = {classes.goodTable_Cell}style={{color: '#fff', backgroundColor: '#000'}}>Address</TableCell>\r\n                                            <TableCell align=\"center\"  className = {classes.goodTable_Cell}style={{color: '#fff', backgroundColor: '#000'}}></TableCell>\r\n                                        </TableRow>\r\n                                        <TableBody\r\n                                            style={{height: '100%', width: '100%'}}\r\n                                        >\r\n                                        {\r\n                                            this.props.listEmployee.employees.map((row) => {\r\n                                            return (\r\n                                                <TableRow\r\n                                                    hover\r\n                                                    tabIndex={-1}\r\n                                                    role=\"checkbox\"\r\n                                                >\r\n                                                    <TableCell align=\"center\">\r\n                                                        {row._id.employeeID}\r\n                                                    </TableCell>\r\n                                                    <TableCell component=\"th\" scope=\"row\" padding=\"none\" align=\"center\">\r\n                                                            {row.firstName}\r\n                                                    </TableCell>\r\n                                                    <TableCell align=\"center\">{row.lastName}</TableCell>  \r\n                                                    <TableCell align=\"center\">\r\n                                                        {row.dateOfBirth.indexOf('T') != -1 ? row.dateOfBirth.substring(0,row.dateOfBirth.indexOf('T')): row.dateOfBirth}\r\n                                                    </TableCell>\r\n                                                    <TableCell align=\"center\">{row.phoneNumber}</TableCell>\r\n                                                    <TableCell align=\"center\">{row.email}</TableCell>\r\n                                                    <TableCell align=\"center\">{row.address}</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        <EmployeeMoreMenu\r\n                                                            data={row._id.employeeID}    \r\n                                                        >\r\n                                                        </EmployeeMoreMenu>\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            );\r\n                                            })}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                                \r\n                            </Card>\r\n                            \r\n                        </CardContent>\r\n                </Card>\r\n                <Card  style={{margin: 16}}>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Calendar shift\" />\r\n                        <Divider />\r\n                        <CardContent>\r\n                            <FixedCalendar/>\r\n                        </CardContent>\r\n                </Card>\r\n                <Card  style={{margin: 16}}>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"No schedule employee(s)\" />\r\n                        <Divider />\r\n                        <CardContent>\r\n                            <NoJobEmployee></NoJobEmployee>\r\n                        </CardContent>\r\n                </Card>\r\n                <Card  style={{margin: 16}}>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Off day\" />\r\n                        <Divider />\r\n                        <CardContent>\r\n                            <UnShiftEmployee/>\r\n                        </CardContent>\r\n                </Card>    \r\n                <Card  style={{margin: 16}}>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"All timekeeping(s)\" />\r\n                        <Divider />\r\n                        <CardContent>\r\n                            <TimekeepingTable></TimekeepingTable>\r\n                        </CardContent>\r\n                </Card>    \r\n                <Card  style={{margin: 16}}>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Sacked employee(s)\" />\r\n                        <Divider />\r\n                        <CardContent>\r\n                            <TableContainer id=\"scroll-bar\" style ={{maxHeight:'500px',overflowY: 'auto', overflowX:'hidden', boxShadow: '1px 1px #888888'}}>\r\n                                <Table>\r\n                                    <TableRow>\r\n                                        <TableCell align=\"center\" className = {classes.goodTable_Cell} style={{color: '#fff', backgroundColor: '#000'}}>\r\n                                            Username\r\n                                        </TableCell>\r\n                                        <TableCell component=\"th\" className = {classes.goodTable_Cell} scope=\"row\" padding=\"none\" align=\"center\" style={{color: '#fff', backgroundColor: '#000'}}> \r\n                                            First Name\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\" className = {classes.goodTable_Cell} style={{color: '#fff', backgroundColor: '#000'}} >Last Name</TableCell>  \r\n                                        <TableCell align=\"center\" className = {classes.goodTable_Cell} style={{color: '#fff', backgroundColor: '#000'}}>\r\n                                            Date Of Birth\r\n                                        </TableCell>\r\n                                        <TableCell align=\"center\" className = {classes.goodTable_Cell} style={{color: '#fff', backgroundColor: '#000'}}>Phone Number</TableCell>\r\n                                        <TableCell align=\"center\" className = {classes.goodTable_Cell} style={{color: '#fff', backgroundColor: '#000'}}>Email</TableCell>\r\n                                        <TableCell align=\"center\" className = {classes.goodTable_Cell} style={{color: '#fff', backgroundColor: '#000'}}>Address</TableCell>\r\n                                        <TableCell align=\"center\" className = {classes.goodTable_Cell} style={{color: '#fff', backgroundColor: '#000'}}></TableCell>\r\n                                    </TableRow>\r\n                                    <TableBody\r\n                                        style={{height: '100%', width: '100%'}}\r\n                                    >\r\n                                    {\r\n                                        this.props.listSackedEmployee.employees.map((row) => {\r\n                                        return (\r\n                                            <TableRow\r\n                                                hover\r\n                                                tabIndex={-1}\r\n                                            >\r\n                                                <TableCell   align=\"center\">\r\n                                                    {row._id.employeeID}\r\n                                                </TableCell>\r\n                                                <TableCell component=\"th\" scope=\"row\" padding=\"none\" align=\"center\">\r\n                                                    {row.firstName}\r\n                                                </TableCell>\r\n                                                <TableCell align=\"center\">{row.lastName}</TableCell>  \r\n                                                <TableCell align=\"center\">{row.dateOfBirth.substring(0,row.dateOfBirth.indexOf('T'))}</TableCell>\r\n                                                <TableCell align=\"center\">{row.phoneNumber}</TableCell>\r\n                                                <TableCell align=\"center\">{row.email}</TableCell>\r\n                                                <TableCell align=\"center\">{row.address}</TableCell>\r\n                                                <TableCell align=\"center\">\r\n                                                    <SackedEmployeeMenu\r\n                                                        data={row._id.employeeID}    \r\n                                                    >\r\n                                                    </SackedEmployeeMenu>\r\n                                                </TableCell>\r\n                                            </TableRow>\r\n                                        );\r\n                                        })}\r\n                                    </TableBody>\r\n                                </Table>\r\n                            </TableContainer>\r\n                        </CardContent>\r\n                </Card>    \r\n                     \r\n                    \r\n\r\n                    \r\n\r\n\r\n                {/* Đây là phần modal */}\r\n                {this.props.addEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeAddEmployeeStatus();}} className=\"modal-overlay\"></div>\r\n                        <AddEmployeeModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </AddEmployeeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.updateEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeUpdateEmployeeStatus();}} \r\n                            className=\"modal-overlay\"\r\n                        />\r\n                        <UpdateEmployeeModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </UpdateEmployeeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.payEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                        style={{width: '100%'}}\r\n                    >\r\n                        <div onClick={() => {this.props.changePayEmployeeStatus();}} className=\"modal-overlay\"></div>\r\n                        <PayMoneyModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </PayMoneyModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.statusAddNextWeekTimeKeeping \r\n                ? \r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeAddNextWeekTimeKeepingStatus();}} className=\"modal-overlay\"></div>\r\n                        <AddNextWeekTimeKeepingModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </AddNextWeekTimeKeepingModal>\r\n                    </div>\r\n                : null\r\n                }\r\n                {this.props.statusUpdateNextWeekTimeKeeping \r\n                ? \r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeUpdateNextWeekTimeKeepingStatus();}} className=\"modal-overlay\"></div>\r\n                        <UpdateNextWeekTimeKeepingModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </UpdateNextWeekTimeKeepingModal>\r\n                    </div>\r\n                : null\r\n                }\r\n                {this.props.statusAddTimeKeeping \r\n                ? \r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeAddTimeKeepingStatus()}} className=\"modal-overlay\"></div>\r\n                        <AddTimeKeepingModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </AddTimeKeepingModal>\r\n                    </div>\r\n                : null\r\n                }\r\n                {this.props.statusUpdateTimeKeeping \r\n                ? \r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeUpdateTimeKeepingStatus();}} className=\"modal-overlay\"></div>\r\n                        <UpdateTimeKeepingModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </UpdateTimeKeepingModal>\r\n                    </div>\r\n                : null\r\n                }\r\n                {this.props.statusAddEmployeeToShift\r\n                    ? \r\n                        <div \r\n                            className=\"modal-add\"\r\n                        >\r\n                            <div onClick={() => {\r\n                                this.props.changeAddEmployeeToShiftStatus();\r\n                            }} className=\"modal-overlay\"></div>\r\n                            <AddEmployeeToShift\r\n                                style={{\r\n                                    marginTop: 0\r\n                                }}\r\n                            >\r\n                            </AddEmployeeToShift>\r\n                        </div>\r\n                    : null\r\n                    }\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\r\n        payEmployeeStatus: state.payEmployeeStatus,\r\n        infoUser: state.infoUser,\r\n        listEmployee: state.listEmployee,\r\n        listSackedEmployee: state.listSackedEmployee,\r\n        statusAddNextWeekTimeKeeping: state.statusAddNextWeekTimeKeeping,\r\n        statusUpdateNextWeekTimeKeeping: state.statusUpdateNextWeekTimeKeeping,\r\n        statusAddTimeKeeping: state.statusAddTimeKeeping,\r\n        statusUpdateTimeKeeping: state.statusUpdateTimeKeeping,\r\n        statusDarkmode: state.statusDarkmode,\r\n        statusAddEmployeeToShift: state.statusAddEmployeeToShift,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changePayEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        getSackedEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE_SACKED\",\r\n                employees: data,\r\n            });\r\n        },\r\n        changeAddNextWeekTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateNextWeekTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        changeAddTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        changeAddEmployeeToShiftStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_TO_SHIFT_STATUS\",\r\n            });\r\n        },\r\n    }\r\n}\r\nexport default connect(mapStateToProps , mapDispatchToProps)((withStyles(styles, {withTheme: true}))(EmployeeManager));\r\n","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\RecieptManager\\ReiceiptManager.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\Profile.js",["810"],"import React, { Component } from 'react';\r\nimport ProfileHeader from './ProfileHeader';\r\nimport '../../css/Profile.css';\r\nimport { Container, Grid, Button } from '@mui/material';\r\nimport ProfileDetail from './ProfileDetail';\r\nimport ChangePassword from './ChangePassword';\r\nimport ListShift from './ListShift';\r\nimport ProfileSetting from './ProfileSetting';\r\nimport ModalAdd from './ModalAdd';\r\nimport ProfileCoupon from './ProfileCoupon';\r\nimport Regulation from './Regulation';\r\nimport { connect } from 'react-redux'\r\nimport ModalAddCoupon from './ModalAddCoupon';\r\nimport axios from 'axios';\r\n\r\nclass Profile extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isFindPassword: (this.props.infoUser._id == null) ? false : (this.props.infoUser._id.includes(\"_Google\") ? true : false),\r\n        }\r\n    }\r\n\r\n    deleteDataAccout = async () => {\r\n        axios.post('http://localhost:5000/api/profile/delete-account', {\r\n            email: this.props.infoUser.email,\r\n            token: localStorage.getItem('token'),\r\n        })\r\n            .then(res => {\r\n            })\r\n            .catch(err => {\r\n            })\r\n    }\r\n\r\n\r\n    componentWillMount() {\r\n        document.title = 'Profile'\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"scroll-bar\" className=\"profile\" style={{ overflow: 'scroll', overflowX: 'hidden', height: '100vh' }}>\r\n                <ProfileHeader></ProfileHeader>\r\n                <Container style={{ marginBottom: '20px' }} maxWidth=\"xl\">\r\n                    <Grid className=\"profile-body\" container spacing={2}>\r\n                        <Grid item md={8} sm={12}  >\r\n                            <ProfileDetail></ProfileDetail>\r\n                        </Grid>\r\n                        <Grid item md={4} sm={12} >\r\n                            {this.state.isFindPassword ? null : <ChangePassword></ChangePassword>}\r\n                            <ProfileSetting></ProfileSetting>\r\n                        </Grid>\r\n                        {\r\n                            !this.props.role ? null : (\r\n                                <Grid item md={12} sm={12}  >\r\n                                    <Regulation></Regulation>\r\n                                </Grid>\r\n                            )\r\n                        }\r\n                        {!this.props.role ? null : (\r\n                            <Grid item sm={12} md={12} >\r\n                                <ListShift></ListShift>\r\n                            </Grid>\r\n                        )}\r\n                        {!this.props.role ? null : (\r\n                            <Grid item sm={12} md={12} >\r\n                                <ProfileCoupon></ProfileCoupon>\r\n                            </Grid>\r\n                        )}\r\n                            {/* {!this.props.role ? null : (\r\n                                <Grid item sm={12} md={12} >\r\n                                    <Button onClick={() => this.deleteDataAccout()} style={{ backgroundColor: 'red', width: '100%', color: 'white' }}>Delete Data Account</Button>\r\n                                </Grid>\r\n                            )} */}\r\n\r\n                    </Grid>\r\n                </Container>\r\n                {this.props.addStatus ? (<div className=\"modal-add\">\r\n                    <div onClick={() => { this.props.changeAddStatus(); if (this.props.editShiftStatus) { this.props.changeEditShiftStatus() } }} className=\"modal-overlay\"></div>\r\n                    <ModalAdd></ModalAdd>\r\n                </div>) : null}\r\n                {\r\n                    this.props.statusModalAddCoupon ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeStatusModalAddCoupon() ; if (this.props.statusEditCoupon) { this.props.changeStatusEditCoupon()}}} className=\"modal-overlay\"></div>\r\n                            <ModalAddCoupon></ModalAddCoupon>\r\n                        </div>\r\n                    ) : null\r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addStatus: state.addStatus,\r\n        editShiftStatus: state.editShiftStatus,\r\n        infoUser: state.infoUser,\r\n        role: state.role,\r\n        statusDarkmode: state.statusDarkmode,\r\n        statusModalAddCoupon: state.statusModalAddCoupon,\r\n        statusEditCoupon: state.statusEditCoupon,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_STATUS\",\r\n            });\r\n        },\r\n        changeEditShiftStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_SHIFT_STATUS\",\r\n            })\r\n        },\r\n        changeStatusModalAddCoupon: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_COUPON_STATUS\"\r\n            })\r\n        },\r\n        changeStatusEditCoupon: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_COUPON_STATUS\"\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\DashBoard.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\SellProduct\\SellProduct.js",["811","812"],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateTimeKeepingModal.js",["813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, \r\n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nvar listDayInWeek = [\r\n    {ID:'T2',name:'Thứ hai'}, \r\n    {ID:'T3',name:'Thứ ba'}, \r\n    {ID:'T4',name:'Thứ tư'}, \r\n    {ID:'T5',name:'Thứ năm'}, \r\n    {ID:'T6',name:'Thứ sáu'}, \r\n    {ID:'T7',name:'Thứ bảy'}, \r\n    {ID:'CN',name:'Chủ nhật'}\r\n];\r\n\r\nclass UpdateTimeKeepingModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n            timeKeepingID: '',\r\n            dayChosed: '',\r\n            shiftID: '',\r\n        };\r\n        this.loadInitialData()\r\n    }\r\n\r\n    realDate = '';\r\n    shiftID = '';\r\n    dayChosed = '';\r\n    timeKeepingID = '';\r\n    loadInitialData()\r\n    {\r\n        console.log(this.props.updateTimeKeepingValue.state);\r\n        this.realDate = this.props.updateTimeKeepingValue.state.realDate;\r\n        this.shiftID = this.props.updateTimeKeepingValue.state._id.shiftType._id.shiftID;\r\n        this.timeKeepingID = this.props.updateTimeKeepingValue.state._id.employee._id.employeeID;\r\n        this.dayChosed= this.props.updateTimeKeepingValue.state._id.dateInWeek;\r\n        this.setState({\r\n            shiftID : this.props.updateTimeKeepingValue.state._id.shiftType._id.shiftID,\r\n            dayChosed: this.props.updateTimeKeepingValue.state._id.dateInWeek,\r\n            timeKeepingID: this.props.updateTimeKeepingValue.state._id.employee._id.employeeID,\r\n        });\r\n    }\r\n\r\n    findIndexCurrentKeepingInRedux(id)\r\n    {\r\n        //Đụng đến nếu sửa bảng\r\n        var listToSearch = this.props.listTimeKeeper;\r\n        for(var i = 0 ; i < listToSearch.length ; i ++)\r\n        {\r\n            if(listToSearch[i]._id.dateInWeek == id.dateInWeek && \r\n                listToSearch[i]._id.shiftType._id.shiftID == id.shiftType._id.shiftID&& \r\n                listToSearch[i]._id.employee._id.employeeID == id.employee._id.employeeID)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    checkContraint() {\r\n        if(this.state.dayChosed.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"You haven't select the day of week\",\"warning\");\r\n            return false;\r\n        }\r\n        if(this.state.shiftID.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"You haven't select the shift\",\"warning\");\r\n            return false;\r\n        }\r\n        console.log(this.state.timeKeepingID );\r\n        if( this.state.timeKeepingID == undefined || this.state.timeKeepingID.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"You haven't select the employee\",\"warning\"); \r\n            return false;\r\n        }\r\n        // Có CSDL thì báo xem có trùng với cái cũ ko nữa\r\n        return true;\r\n    }\r\n\r\n\r\n    UpdateChange() {\r\n        if(this.checkContraint()==false) return;\r\n        const data = {\r\n            _id: {\r\n                dateInWeek: this.dayChosed,\r\n                storeID: this.props.infoUser.email,\r\n                shiftType: {\r\n                    _id: {\r\n                        shiftID: this.shiftID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n                employee: {\r\n                    _id: {\r\n                        employeeID: this.timeKeepingID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n            },\r\n            realDate: document.querySelector('input[name=\"realDate\"]').value,\r\n        };\r\n        this.props.updateTimeKeeper(data, this.findIndexCurrentKeepingInRedux(data._id));\r\n        console.log(data);\r\n        this.props.changeUpdateTimeKeepingStatus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \r\n                    title=\"Update TimeKeeper\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            Real Date\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"date\" \r\n                                            name='realDate'\r\n                                            readOnly={true}\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.realDate}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Choose Day in week\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 120 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                readOnly={true}\r\n                                                value = {this.dayChosed}\r\n                                                onChange={(event) => {\r\n                                                    this.dayChosed = event.target.value;\r\n                                                    this.setState({dayChosed: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    listDayInWeek.map((item) =>\r\n                                                        <MenuItem value={item.ID}>\r\n                                                            {item.name}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n\r\n                                    <Grid item md={8} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>\r\n                                            Choose Shift\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 220 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                readOnly={true}\r\n                                                value={this.shiftID}\r\n                                                onChange={(event) => {\r\n                                                    this.shiftID = event.target.value;\r\n                                                    this.setState({shiftID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                    : this.props.listShift.map((shift) =>\r\n                                                        <MenuItem value={shift._id.shiftID}>\r\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            TimeKeeping Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                readOnly={true}\r\n                                                value={this.timeKeepingID}\r\n                                                onChange={(event) => {\r\n                                                    this.timeKeepingID = event.target.value;\r\n                                                    this.setState({timeKeepingID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        !(this.state.alterID == item._id.employeeID) ?\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                        : null\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.UpdateChange()}>\r\n                                            Update Change\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        listTimeKeeper: state.listTimeKeeping,\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listShift: state.listShift,\r\n        listEmployee: state.listEmployee,\r\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\r\n        updateTimeKeepingValue: state.updateTimeKeepingValue,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeUpdateTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        addNewTimeKeeper: (data) => {\r\n            dispatch({\r\n                type: \"ADD_NEW_TIME_KEEPER\",\r\n                data: data,\r\n            });\r\n        }, \r\n        updateTimeKeeper: (data, indexOfVal) => {\r\n            dispatch({\r\n                type: \"UPDATE_TIMEKEEPER\",\r\n                data: data,\r\n                index: indexOfVal\r\n            });\r\n        }, \r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateTimeKeepingModal);\r\n\r\n               ","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddEmployeeToShift.js",["831","832","833","834","835","836","837","838","839"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel, Stack } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport {IoMdAdd } from \"react-icons/io\";\r\n\r\nclass AddEmployeeToShiftModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            change: false,\r\n        };\r\n        console.log('listEmployee', this.props.listEmployee);\r\n        console.log('current Shift value', this.props.currentShiftValue)\r\n    }\r\n\r\n    \r\n    cancel = () => {\r\n        this.props.changeAddEmployeeToShiftStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n    }\r\n\r\n    getShiftInforByID(shiftID)\r\n    {\r\n        var listShift = this.props.listShift;\r\n        for(var i = 0 ; i < listShift.length; i++)\r\n        {\r\n            if(listShift[i]._id.shiftID == shiftID)\r\n            {\r\n                return listShift[i].name + ' (' + listShift[i].timeFrom + '-' + listShift[i].timeEnd + ')';\r\n            }\r\n        }\r\n        return \"Can't get shift\";\r\n    }\r\n\r\n    findEmployeeInShift(employeeID)\r\n    {\r\n        var listShiftAssign = this.props.listShiftAssign;\r\n        // Lỗi ở chỗ thêm shift assign\r\n        // console.log(\"listShiftAssign\", listShiftAssign);\r\n        for(var i = 0 ; i < listShiftAssign.length; i++)\r\n        {\r\n            if(this.props.currentShiftValue._id.shiftType._id.shiftID == listShiftAssign[i]._id.shiftType._id.shiftID \r\n                && this.props.currentShiftValue._id.dateInWeek == listShiftAssign[i]._id.dateInWeek\r\n                && listShiftAssign[i]._id.employee._id.employeeID == employeeID)\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    async getAllShiftAssign()\r\n    {\r\n        var result = [];\r\n        const data = {\r\n        token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/employee/shift-assign`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n                this.props.setShiftAssign(result);\r\n            })\r\n            .catch(err => {\r\n                console.log('bug when get shift-assign', err);\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n    }\r\n    async addEmployeeToShift(employeeID) {\r\n        console.log(\"employeeID\", employeeID)\r\n        var currentShift = this.props.currentShiftValue;\r\n        currentShift._id.employee = {\r\n            _id: {\r\n                employeeID: employeeID,\r\n                storeID: this.props.infoUser.email,\r\n            },\r\n        }\r\n\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            shiftAssign: currentShift, \r\n        }\r\n        console.log(currentShift);\r\n        await axios.post(`http://localhost:5000/api/employee/shift-assign`, data)\r\n        .then(res => {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Save shift assign success\",\"success\");\r\n            this.props.AddShiftAssign(data.shiftAssign);\r\n            this.getAllShiftAssign();\r\n        })\r\n        .catch(err => {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            console.log('bug when add shift-assign',err);\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form  style={{zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"All Employee To Shift\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={12}>\r\n                                {\"Add to shift: \"}\r\n                                {this.getShiftInforByID(this.props.currentShiftValue._id.shiftType._id.shiftID)}\r\n                                {\" in \" +this.props.currentShiftValue._id.dateInWeek}\r\n                            </Grid>\r\n                            <Grid id='scroll-bar' item md={12} xs={12} style={{\r\n                                    alignItems: 'center', \r\n                                    justifyContent: 'center', \r\n                                    display: 'flex', \r\n                                    flexDirection: 'column',\r\n                                    maxHeight: 200,\r\n                                    overflowY: 'auto',\r\n                                }}>\r\n                                    {\r\n                                        this.props.listEmployee.employees.map((item) =>\r\n                                            this.findEmployeeInShift(item._id.employeeID) ? (null) :\r\n                                            <Grid \r\n                                                onClick={() => this.addEmployeeToShift(item._id.employeeID)}\r\n                                                className='add-employee-to-shift-button'\r\n                                                style={{padding: 10, width: '100%', height: 40, borderRadius: '10px', border: '1px solid #333', marginRight: 20, display: 'flex', marginTop: 10}} item md={8}>\r\n                                                <div style={{marginRight: 20 , borderRadius: '100%',marginTop: 'auto', marginBottom: 'auto'}}>\r\n                                                    <IoMdAdd size={20}  color={'yellowgreen'} style={{marginTop: -5}}>\r\n                                                    </IoMdAdd>\r\n                                                </div>\r\n                                                \r\n                                                <label style={{marginTop: 'auto', marginBottom: 'auto'}}>\r\n                                                    {item._id.employeeID + ' - ' + item.lastName + ' ' + item.firstName}\r\n                                                </label>\r\n                                            </Grid> \r\n                                        )\r\n                                    }\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={() => this.cancel()} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Thoát\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listEmployee: state.listEmployee,\r\n        listSackedEmployee: state.listSackedEmployee,\r\n        regulation: state.regulationReducer,\r\n        statusDarkmode: state.statusDarkmode,\r\n        currentShiftValue: state.currentShiftValue,\r\n        listShift: state.listShift,\r\n        listShiftAssign: state.listShiftAssign,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        setShiftAssign: (data) => {\r\n            dispatch({\r\n                type: \"SET_SHIFT_ASSIGN\",\r\n                data: data,\r\n            });\r\n        },\r\n        AddShiftAssign: (data) => {\r\n            dispatch({\r\n                type: \"ADD_NEW_SHIFT_ASSIGN\",\r\n                data: data,\r\n            });\r\n          },\r\n        changeAddEmployeeToShiftStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_TO_SHIFT_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        addEmployee: (data) => {\r\n            dispatch({\r\n                type: \"ADD_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEmployeeToShiftModal);\r\n\r\n               ","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\SellProduct\\HistoryReciept.js",["840","841"],"import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport CollapsibleTable from './TableReciept'\r\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\r\n\r\nfunction HistoryReciept(props) {\r\n\r\n    const darkmode = useSelector(state => state.statusDarkmode)\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div style={{ overflow: 'hidden' }} className=\"modal-history-reciept\">\r\n            <div onClick={() => { dispatch({ type: \"CHANGE_HISTORY_RECIEPT_STATUS\" }) }} className=\"modal-overlay\"></div>\r\n            <div className=\"history-list-receipt\">\r\n                <Card>\r\n                    <CardHeader style={{ color: !darkmode ? '#0091ea' : 'white', backgroundColor: !darkmode ? '#efeeef' : '#455a64' }} title=\"History Reciept\" />\r\n                    <Divider></Divider>\r\n                </Card>\r\n                <div id=\"choses-product\" style={{ margin: '30px', height: '82%', overflow: 'hidden', overflowY: 'scroll' }}>\r\n                    <CollapsibleTable></CollapsibleTable>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HistoryReciept;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\SellProduct\\Print.js",["842","843","844","845","846","847","848","849","850","851","852"],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\SellProduct\\ShoppingBags.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\SellProduct\\TableReciept.js",["853","854","855","856"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport { Grid, Box } from '@mui/material';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport { red } from '@mui/material/colors'\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { FiEdit } from 'react-icons/fi'\r\nimport axios from 'axios';\r\n\r\n\r\nfunction Row(props) {\r\n    const { row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const dispatch = useDispatch();\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const infoUser = useSelector(state => state.infoUser)\r\n    const regulation = useSelector(state => state.regulationReducer)\r\n    const statusEditInfoBill = useSelector(state => state.statusEditInfoBill)\r\n\r\n\r\n    const editReciept = (rowReceipt, coupon) => {\r\n        console.log(\"rowReceipt\", rowReceipt);\r\n        if (coupon) {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: \"This bill has used to discount!\",\r\n                typeMessage: \"warning\"\r\n            })\r\n        } else {\r\n            // Tạo 1 list product mới\r\n            var newListProduct = [];\r\n            for(var i = 0 ; i < rowReceipt.listProduct.length ; i++)\r\n            {\r\n                newListProduct.push(\r\n                    {\r\n                        product: Object.assign({}, rowReceipt.listProduct[i].product),\r\n                        quantity: rowReceipt.listProduct[i].quantity,\r\n                    }\r\n                )\r\n            }\r\n\r\n            // Phát hiện xem người dùng có đang kiểu như edit một cái khác không \r\n            if (!statusEditInfoBill) {\r\n                dispatch({\r\n                    type: \"INFO_SHOPPING_BAGS_EDIT\",\r\n                    listProduct: [...rowReceipt.listProduct],\r\n                })\r\n\r\n                dispatch({\r\n                    type: \"ADD_INFO_BILL_EDIT\",\r\n                    InfoBill: {\r\n                        MAHD: rowReceipt.MAHD,\r\n                        coupon: rowReceipt.coupon,\r\n                        date: rowReceipt.date,\r\n                        deleted: rowReceipt.deleted,\r\n                        discount: rowReceipt.discount,\r\n                        idUser: rowReceipt.idUser,\r\n                        isEdit: rowReceipt.isEdit,\r\n                        listProduct: newListProduct,\r\n                        name: rowReceipt.name,\r\n                        oldBill: rowReceipt.oldBill,\r\n                        time: rowReceipt.time,\r\n                        totalFinalMoney: rowReceipt.totalFinalMoney,\r\n                        totalMoney: rowReceipt.totalMoney,\r\n                    },\r\n                })\r\n\r\n                dispatch({\r\n                    type: \"BACKUP_BILL_EDIT\",\r\n                    InfoBill: {\r\n                        MAHD: rowReceipt.MAHD,\r\n                        coupon: rowReceipt.coupon,\r\n                        date: rowReceipt.date,\r\n                        deleted: rowReceipt.deleted,\r\n                        discount: rowReceipt.discount,\r\n                        idUser: rowReceipt.idUser,\r\n                        isEdit: rowReceipt.isEdit,\r\n                        listProduct: newListProduct,\r\n                        name: rowReceipt.name,\r\n                        oldBill: rowReceipt.oldBill,\r\n                        time: rowReceipt.time,\r\n                        totalFinalMoney: rowReceipt.totalFinalMoney,\r\n                        totalMoney: rowReceipt.totalMoney,\r\n                    },\r\n                })\r\n\r\n                // Thay đổi cái tình trạng edit để mà có gì còn edit\r\n                dispatch({\r\n                    type: \"CHANGE_EDIT_INFOMATION_STATUS\",\r\n                })\r\n\r\n                // Ẩn cái bảng history đi\r\n                dispatch({\r\n                    type: \"CHANGE_HISTORY_RECIEPT_STATUS\"\r\n                })\r\n            } \r\n            // Phát hiện xem người dùng có đang kiểu như edit một cái khác không \r\n            else {\r\n\r\n                dispatch({\r\n                    type: \"HIDE_ALERT\",\r\n                })\r\n                dispatch({\r\n                    type: \"SHOW_ALERT\",\r\n                    message: \"You are editing another bill!\",\r\n                    typeMessage: \"warning\"\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    const TypeReciept = (isEdit, isDelete) => {\r\n        if (isDelete) {\r\n            return red[400]\r\n        } else if (isEdit) {\r\n            return '#f4f492'\r\n        } else {\r\n            return '#a6ffa6'\r\n        }\r\n    }\r\n\r\n\r\n    const StatusTypeReciept = (isEdit, isDelete) => {\r\n        if (isDelete) {\r\n            return 'Deleted'\r\n        } else if (isEdit) {\r\n            return 'Exchange'\r\n        } else {\r\n            return 'Success'\r\n        }\r\n    }\r\n\r\n    const showEdit = (isEdit, isDelete) => {\r\n        if (isEdit || isDelete) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const countQuantity = () => {\r\n        let count = 0;\r\n        row.listProduct.map(value => {\r\n            count += value.quantity;\r\n        })\r\n        return count;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow style={{ backgroundColor: TypeReciept(row.isEdit, row.deleted), borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: '#90a4ae #90a4ae transparent #90a4ae' }} sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n                <TableCell>\r\n                    <IconButton\r\n                        aria-label=\"expand row\"\r\n                        size=\"small\"\r\n                        onClick={() => setOpen(!open)}\r\n                    >\r\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                    </IconButton>\r\n                </TableCell>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                    {row.MAHD}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.date}</TableCell>\r\n                <TableCell align=\"right\">\r\n                    {regulation.currency === 'vnd' ? (row.totalMoney).toLocaleString() : ((row.totalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.discount}</TableCell>\r\n                <TableCell align=\"right\">\r\n                    {regulation.currency === 'vnd' ? (row.totalFinalMoney).toLocaleString() : ((row.totalFinalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\r\n                </TableCell>\r\n                <TableCell>\r\n                    {!showEdit(row.isEdit, row.deleted) ? (\r\n                        <IconButton onClick={() => editReciept(Object.assign({}, row), row.coupon)} color=\"secondary\" aria-label=\"fingerprint\">\r\n                            <FiEdit />\r\n                        </IconButton>\r\n                    ) : null}\r\n                </TableCell>\r\n            </TableRow>\r\n            <TableRow style={{ borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: 'transparent #90a4ae #90a4ae #90a4ae' }}>\r\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={12}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Box sx={{ margin: 1 }}>\r\n                            <Typography style={{ fontWeight: '600' }} variant=\"h6\" gutterBottom component=\"div\">\r\n                                Detail Recipet\r\n                            </Typography>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item lg={6} md={12} xs={12}>\r\n                                    <Table size=\"small\" aria-label=\"purchases\">\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                <TableCell>#</TableCell>\r\n                                                <TableCell>Name</TableCell>\r\n                                                <TableCell>Quantity</TableCell>\r\n                                                <TableCell align=\"right\">Price</TableCell>\r\n                                                <TableCell align=\"right\">Total Price</TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {row.listProduct.map((value, key) => (\r\n                                                <TableRow key={value.name}>\r\n                                                    <TableCell>\r\n                                                        {key + 1}\r\n                                                    </TableCell>\r\n                                                    <TableCell>{value.product.name}</TableCell>\r\n                                                    <TableCell>{value.quantity}</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        {regulation.currency === 'vnd' ? (value.product.sellPrice).toLocaleString() : ((value.product.sellPrice) / regulation.exchangeRate).toFixed(2).toLocaleString()}\r\n                                                    </TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        {regulation.currency === 'vnd' ? (value.quantity * value.product.sellPrice).toLocaleString() : ((value.quantity * value.product.sellPrice) / regulation.exchangeRate).toFixed(2).toLocaleString()}\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            ))}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Grid>\r\n                                <Grid style={{ borderLeft: '1px solid black', marginTop: '15px' }} item lg={6} md={12} xs={12}>\r\n                                    <Grid container spacing={3}>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Id Receipt:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.MAHD}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Status:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{StatusTypeReciept(row.isEdit, row.isDelete)}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Date:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.date}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Time:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.time}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Old bill:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.oldBill ? row.oldBill.MAHD : \"None\"}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Seller:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.name}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Total quanitty:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{countQuantity()}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Total money:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>\r\n                                                        {regulation.currency === 'vnd' ? (row.totalMoney).toLocaleString() : ((row.totalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\r\n                                                    </p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Coupon:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.coupon ? row.coupon.idCoupon : \"Not apply\"}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Reduce money:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>\r\n                                                        {regulation.currency === 'vnd' ? (row.totalFinalMoney - row.totalMoney).toLocaleString() : ((row.totalFinalMoney - row.totalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\r\n                                                    </p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Discount (%):</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.discount}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>TOTAL:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>\r\n                                                        {regulation.currency === 'vnd' ? (row.totalFinalMoney).toLocaleString() : ((row.totalFinalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\r\n                                                    </p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nRow.propTypes = {\r\n    row: PropTypes.shape({\r\n        calories: PropTypes.number.isRequired,\r\n        carbs: PropTypes.number.isRequired,\r\n        fat: PropTypes.number.isRequired,\r\n        history: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                amount: PropTypes.number.isRequired,\r\n                customerId: PropTypes.string.isRequired,\r\n                date: PropTypes.string.isRequired,\r\n            }),\r\n        ).isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        price: PropTypes.number.isRequired,\r\n        protein: PropTypes.number.isRequired,\r\n    }).isRequired,\r\n};\r\n\r\n\r\nexport default function CollapsibleTable() {\r\n\r\n    const listReciept = useSelector(state => state.listReciept)\r\n\r\n    return (\r\n        <TableContainer style={{ overflowX: 'hidden' }} component={Paper}>\r\n            <Table aria-label=\"collapsible table\">\r\n                <TableHead>\r\n                    <TableRow style={{ backgroundColor: 'black', color: 'white' }}>\r\n                        <TableCell />\r\n                        <TableCell >Id Receipt</TableCell>\r\n                        <TableCell align=\"right\">Date</TableCell>\r\n                        <TableCell align=\"right\">Total</TableCell>\r\n                        <TableCell align=\"right\">Discount</TableCell>\r\n                        <TableCell align=\"right\">Total final</TableCell>\r\n                        <TableCell />\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {listReciept ?\r\n                        listReciept.map((row) => (\r\n                            <Row key={row.MAHD} row={row} />\r\n                        )) : null\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\SellProduct\\ComponentToPrint.js",["857","858","859","860","861","862","863","864","865","866","867"],"import React from 'react';\r\n\r\n\r\n\r\nclass ComponentToPrint extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date(),\r\n        }\r\n    }\r\n\r\n    minute = 1000 * 60;\r\n    hour = this.minute * 60;\r\n    day = this.hour * 24;\r\n    year = this.day * 365;\r\n\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    totalMoney = () => {\r\n        let total = 0;\r\n        this.props.shoppingBags.map(value => {\r\n            total += value.quantity * value.product.sellPrice;\r\n        })\r\n\r\n        if (this.props.regulation.currency != 'vnd') {\r\n            total = (total / this.props.regulation.exchangeRate).toFixed(2)\r\n        }\r\n\r\n        return total.toLocaleString();\r\n    }\r\n\r\n    reduceTotalMoney = () => {\r\n        let total = 0;\r\n        this.props.shoppingBags.map(value => {\r\n            total += value.quantity * value.product.sellPrice;\r\n        })\r\n        if (total !== 0) {\r\n            total = total * this.props.percentDiscount / 100\r\n        }\r\n\r\n        if (this.props.regulation.currency != 'vnd') {\r\n            total = (total / this.props.regulation.exchangeRate).toFixed(2)\r\n        }\r\n\r\n        return total.toLocaleString()\r\n    }\r\n\r\n    finalTotalMoney = () => {\r\n        let total = 0;\r\n        this.props.shoppingBags.map(value => {\r\n            total += value.quantity * value.product.sellPrice;\r\n        })\r\n        if (total !== 0 && this.props.percentDiscount !== 0) {\r\n            total -= total * this.props.percentDiscount / 100\r\n        }\r\n        if (this.props.regulation.currency != 'vnd') {\r\n            total = (total / this.props.regulation.exchangeRate).toFixed(2)\r\n        }\r\n        return total.toLocaleString();\r\n    }\r\n\r\n    dateFunction = () => {\r\n        let month = this.state.date.getMonth() + 1;\r\n        return \"  \" + this.state.date.getDate() + \" / \" + month + \" / \" + this.state.date.getFullYear()\r\n    }\r\n\r\n    renderMoneyProduct= (value) => {\r\n        let Money = 0\r\n        if (this.props.regulation.currency != 'vnd') {\r\n            Money = (value.product.sellPrice / this.props.regulation.exchangeRate).toFixed(2)\r\n        } else {\r\n            Money = value.product.sellPrice\r\n        }\r\n        return Money\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <h1 style={{ textAlign: 'center' }}>{this.props.infoUser.storeName}</h1>\r\n                </div>\r\n                <div style={{ borderBottom: '1px solid #00000059' }} className=\"col-12\">\r\n                    <p style={{ textAlign: 'center', marginBottom: '0' }}>{this.props.infoUser.address}</p>\r\n                    <p style={{ textAlign: 'center' }}>{this.props.infoUser.district + ' ' + this.props.infoUser.province}</p>\r\n                    <p style={{ textAlign: 'center' }}>{\"SĐT: \" + this.props.infoUser.tel}</p>\r\n                </div>\r\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\r\n                    <h4 style={{ textAlign: 'center' }}>HÓA ĐƠN THANH TOÁN</h4>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <p style={{ textAlign: 'center', fontWeight: '400' }}>Số HĐ: {this.props.MAHD}</p>\r\n                    <div style={{ margin: '0 5px' }} className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <p style={{ fontWeight: '700' }}>Date:\r\n                                <span style={{ fontWeight: '400' }}>\r\n                                    {this.dateFunction()}\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <p style={{ fontWeight: '700' }}>Time:\r\n                                <span style={{ fontWeight: '400' }}>\r\n                                    {\"  \" + this.state.date.getHours() + \":\" + this.state.date.getMinutes()}\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <p style={{ fontWeight: '700', margin: '0 17px' }}>\r\n                        Cashier:\r\n                        <span style={{ fontWeight: '400' }}>\r\n                            {\"  Admin\"}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <table style={{ margin: '0 10px' }} class=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Quantity</th>\r\n                            <th scope=\"col\">Price</th>\r\n                            <th scope=\"col\">Total money</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.props.shoppingBags ? this.props.shoppingBags.map((value, key) => (\r\n                            <tr>\r\n                                <td>{key + 1}</td>\r\n                                <td>{value.product.name}</td>\r\n                                <td>{value.quantity}</td>\r\n                                <td>\r\n                                    {this.renderMoneyProduct(value)}\r\n                                </td>\r\n                                <td>\r\n                                    {(this.props.regulation.currency != 'vnd') ? ((value.quantity * value.product.sellPrice) / this.props.regulation.exchangeRate).toFixed(2) : (value.quantity * value.product.sellPrice)}\r\n                                </td>\r\n                            </tr>\r\n                        ))\r\n                            : null}\r\n                    </tbody>\r\n                </table>\r\n                <div style={{ marginTop: '20px' }} className=\"col-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'end' }}>Total :</h6>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'start' }}>{this.totalMoney()} {(this.props.regulation.currency != 'vnd') ? '$' : 'VNĐ'}</h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'end' }}>Discount :</h6>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'start' }}>-{this.reduceTotalMoney()} {(this.props.regulation.currency != 'vnd') ? '$' : 'VNĐ'}</h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <h5 style={{ textAlign: 'end' }}>TOTAL FINAL :</h5>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h5 style={{ textAlign: 'start' }}>\r\n                                {this.finalTotalMoney()} {(this.props.regulation.currency != 'vnd') ? '$' : 'VNĐ'}\r\n                            </h5>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\r\n                    <h6 style={{ textAlign: 'center', fontStyle: 'italic ' }}>Xin cảm ơn quý khách</h6>\r\n                    <h6 style={{ textAlign: 'center', fontStyle: 'italic ' }}>hẹn gặp lại!</h6>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ComponentToPrint;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\SellProduct\\Tabs.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\ExportRevenue.js",["868"],"import React from \"react\";\r\nimport {\r\n    Card,\r\n    CardHeader,\r\n    Divider,\r\n    CardContent,\r\n    Grid,\r\n    TextField,\r\n    Box,\r\n    Button,\r\n} from \"@mui/material\";\r\nimport { GiCancel } from \"react-icons/gi\";\r\nimport { BiPlusMedical, BiEdit } from \"react-icons/bi\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DesktopDatePicker from \"@mui/lab/DesktopDatePicker\";\r\nfunction ModalConfirmPassword(props) {\r\n    const statusDarkmode = useSelector((state) => state.statusDarkmode);\r\n    const infoUser = useSelector((state) => state.infoUser);\r\n    const dispatch = useDispatch();\r\n    const [timeFrom, setTimeFrom] = React.useState(new Date());\r\n    const [timeEnd, settimeEnd] = React.useState(new Date());\r\n    const handleCancel = () => {\r\n        dispatch({\r\n            type: \"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\r\n        });\r\n    };\r\n\r\n    const changeTimeFrom = (newValue) => {\r\n        if (newValue) {\r\n            setTimeFrom(newValue);\r\n        }\r\n    };\r\n\r\n    const changetimeEnd = (newValue) => {\r\n        if (newValue) {\r\n            settimeEnd(newValue);\r\n        }\r\n    };\r\n\r\n    const exportFile = async () => {\r\n        if (timeEnd - timeFrom >= 0) {\r\n            // Xử lý ở đây\r\n            await axios({\r\n                method: \"get\",\r\n                url: \"http://localhost:5000/api/report\",\r\n                params: {\r\n                    token: localStorage.getItem(\"token\"),\r\n                    from: timeFrom,\r\n                    end: timeEnd,\r\n                    storeID: infoUser.email\r\n                },\r\n                responseType: \"blob\",\r\n            }).then((response) => {\r\n                const url = window.URL.createObjectURL(\r\n                    new Blob([response.data])\r\n                );\r\n                const link = document.createElement(\"a\");\r\n                link.href = url;\r\n                link.setAttribute(\"download\", \"Report.xlsx\"); //or any other extension\r\n                document.body.appendChild(link);\r\n                link.click();\r\n            });\r\n            //\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: \"Export success\",\r\n                typeMessage: \"success\",\r\n            });\r\n            handleCancel();\r\n        } else {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message:\r\n                    \"The end date must be greater than greater than or equal to the start date\",\r\n                typeMessage: \"warning\",\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <Card\r\n            className=\"card-confirm-password\"\r\n            style={{\r\n                minWidth: \"500px\",\r\n                width: \"600px\",\r\n                justifyContent: \"center\",\r\n                marginTop: \"10%\",\r\n            }}\r\n        >\r\n            <CardHeader\r\n                style={{\r\n                    color: !statusDarkmode ? \"#0091ea\" : \"white\",\r\n                    backgroundColor: !statusDarkmode ? \"#efeeef\" : \"#455a64\",\r\n                }}\r\n                title=\"Export file sales report\"\r\n            />\r\n            <Divider />\r\n            <CardContent>\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={12} xs={12}>\r\n                        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                            <Stack spacing={3}>\r\n                                <DesktopDatePicker\r\n                                    label=\"From\"\r\n                                    value={timeFrom}\r\n                                    minDate={new Date(\"2017-01-01\")}\r\n                                    onChange={(newValue) =>\r\n                                        changeTimeFrom(newValue)\r\n                                    }\r\n                                    renderInput={(params) => (\r\n                                        <TextField {...params} />\r\n                                    )}\r\n                                />\r\n                                <DesktopDatePicker\r\n                                    label=\"To\"\r\n                                    value={timeEnd}\r\n                                    minDate={new Date(\"2017-01-01\")}\r\n                                    onChange={(newValue) =>\r\n                                        changetimeEnd(newValue)\r\n                                    }\r\n                                    renderInput={(params) => (\r\n                                        <TextField {...params} />\r\n                                    )}\r\n                                />\r\n                            </Stack>\r\n                        </LocalizationProvider>\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n            <Divider />\r\n            <Box sx={{ display: \"flex\", justifyContent: \"space-evenly\", p: 2 }}>\r\n                <Button\r\n                    onClick={() => exportFile()}\r\n                    style={{ backgroundColor: \"yellowgreen\" }}\r\n                    variant=\"contained\"\r\n                    startIcon={<BiPlusMedical />}\r\n                >\r\n                    Confirm\r\n                </Button>\r\n                <Button\r\n                    style={{ backgroundColor: \"red\" }}\r\n                    onClick={() => handleCancel()}\r\n                    variant=\"contained\"\r\n                    startIcon={<GiCancel />}\r\n                >\r\n                    Cancel\r\n                </Button>\r\n            </Box>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default ModalConfirmPassword;\r\n","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\SalaryStats.js",["869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885","886","887","888","889","890","891","892","893","894","895","896","897","898","899","900","901","902","903","904","905","906","907"],"import React from 'react';\r\nimport { Typography } from '@mui/material';\r\nimport { RiMoneyDollarCircleFill } from 'react-icons/ri'\r\nimport { useSelector } from 'react-redux'\r\nimport { BsCashCoin } from \"react-icons/bs\";\r\nimport { IoCashSharp } from \"react-icons/io5\";\r\n\r\nfunction calculateTime(timeFrom, timeEnd)\r\n{\r\n    var realTimeFrom, realTimeEnd;\r\n\r\n    realTimeFrom = parseInt(timeFrom.substring(0, timeFrom.indexOf(':')));\r\n    if(timeFrom.indexOf('PM')!=-1) realTimeFrom += 12;\r\n    var minuteFrom= parseInt(timeFrom.substring(timeFrom.indexOf(':')+1, timeFrom.indexOf(':') + 3));\r\n\r\n    realTimeEnd = parseInt(timeEnd.substring(0, timeEnd.indexOf(':')));\r\n    if(timeEnd.indexOf('PM')!=-1) realTimeEnd += 12;\r\n    var minuteEnd= parseInt(timeEnd.substring(timeEnd.indexOf(':')+1, timeEnd.indexOf(':') + 3));\r\n\r\n    var timeDiff = realTimeEnd - realTimeFrom;\r\n    \r\n    if(minuteEnd - minuteFrom < 0)\r\n    {\r\n        timeDiff --;\r\n        minuteEnd += 60;\r\n    }\r\n\r\n    return Math.round(timeDiff + (minuteEnd - minuteFrom) / 60.0);\r\n}\r\n\r\nfunction calculateSalary(shift){\r\n    var salary = 0;\r\n    // Tính thời gian của ca làm\r\n    return shift._id.shiftType.salary * (calculateTime(shift._id.shiftType.timeFrom,shift._id.shiftType.timeEnd));\r\n}\r\n\r\n\r\nfunction SalaryStats(props) {\r\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const listTimeKeeping = useSelector(state => state.listTimeKeeping)\r\n    const [totalPayedSalary, setTotalPayedSalary] = React.useState('')\r\n    const [totalNotPayedSalary, setTotalNotPayedSalary] = React.useState('')\r\n    const regulation = useSelector(state => state.regulationReducer)\r\n    let nowTime = new Date();\r\n    console.log(\"listTimeKeeping\",listTimeKeeping);\r\n\r\n    React.useEffect(() => {\r\n        \r\n        let money = 0;\r\n        let currentMonth = nowTime.getMonth() + 1;\r\n\r\n        // console.log(\"listTimeKeeping\",listTimeKeeping )\r\n        // if(listTimeKeeping.length>0)\r\n        //     console.log(calculateSalary(listTimeKeeping[0]));\r\n\r\n        if (typeHeaderDashboard == 'Today') {\r\n            let payedSalary = 0, notPaySalary = 0;\r\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\r\n            {\r\n                var realDate = listTimeKeeping[i]._id.realDate.substring(0,listTimeKeeping[i]._id.realDate.indexOf('T'));\r\n                var date = realDate.split('-');\r\n                // console.log(date);\r\n                // console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\r\n                if (date[2] == nowTime.getDate() - 1 && date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\r\n                    if(listTimeKeeping[i].isPaidSalary == true)\r\n                    {\r\n                        payedSalary += calculateSalary(listTimeKeeping[i]);\r\n                    }\r\n                    else notPaySalary += calculateSalary(listTimeKeeping[i]);\r\n                }\r\n            }\r\n            setTotalPayedSalary(payedSalary);\r\n            setTotalNotPayedSalary(notPaySalary);\r\n        } else if (typeHeaderDashboard == 'Yesterday') {\r\n            let payedSalary = 0, notPaySalary = 0;\r\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\r\n            {\r\n                var realDate = listTimeKeeping[i]._id.realDate.substring(0,listTimeKeeping[i]._id.realDate.indexOf('T'));\r\n                var date = realDate.split('-');\r\n                // console.log(date);\r\n                // console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\r\n                if (date[2] == nowTime.getDate() - 2 && date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\r\n                    if(listTimeKeeping[i].isPaidSalary == true)\r\n                    {\r\n                        payedSalary += calculateSalary(listTimeKeeping[i]);\r\n                    }\r\n                    else notPaySalary += calculateSalary(listTimeKeeping[i]);\r\n                }\r\n            }\r\n            setTotalPayedSalary(payedSalary);\r\n            setTotalNotPayedSalary(notPaySalary);\r\n\r\n        } else if (typeHeaderDashboard == 'Month') {\r\n            let payedSalary = 0, notPaySalary = 0;\r\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\r\n            {\r\n                var realDate = listTimeKeeping[i]._id.realDate.substring(0,listTimeKeeping[i]._id.realDate.indexOf('T'));\r\n                var date = realDate.split('-');\r\n                // console.log(date);\r\n                // console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\r\n                if (date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\r\n                    if(listTimeKeeping[i].isPaidSalary == true)\r\n                    {\r\n                        payedSalary += calculateSalary(listTimeKeeping[i]);\r\n                    }\r\n                    else notPaySalary += calculateSalary(listTimeKeeping[i]);\r\n                }\r\n            }\r\n            setTotalPayedSalary(payedSalary);\r\n            setTotalNotPayedSalary(notPaySalary);\r\n        } else if (typeHeaderDashboard == 'Year') {\r\n            let payedSalary = 0, notPaySalary = 0;\r\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\r\n            {\r\n                var realDate = listTimeKeeping[i]._id.realDate.substring(0,listTimeKeeping[i]._id.realDate.indexOf('T'));\r\n                var date = realDate.split('-');\r\n                // console.log(date);\r\n                // console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\r\n                if (date[0] == nowTime.getFullYear()) {\r\n                    if(listTimeKeeping[i].isPaidSalary == true)\r\n                    {\r\n                        payedSalary += calculateSalary(listTimeKeeping[i]);\r\n                    }\r\n                    else notPaySalary += calculateSalary(listTimeKeeping[i]);\r\n                }\r\n            }\r\n            setTotalPayedSalary(payedSalary);\r\n            setTotalNotPayedSalary(notPaySalary);\r\n        } else if (typeHeaderDashboard == 'All') {\r\n            let payedSalary = 0, notPaySalary = 0;\r\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\r\n            {\r\n                if(listTimeKeeping[i].isPaidSalary == true)\r\n                {\r\n                    payedSalary += calculateSalary(listTimeKeeping[i]);\r\n                }\r\n                else notPaySalary += calculateSalary(listTimeKeeping[i]);\r\n            }\r\n            setTotalPayedSalary(payedSalary);\r\n            setTotalNotPayedSalary(notPaySalary);\r\n        }\r\n    }, [typeHeaderDashboard])\r\n\r\n    return (\r\n        <div className=\"dashboard-css sold-good\">\r\n            <div className=\"dashboard-item-img sold-good\" style={{ marginBottom: '30px'}}>\r\n                <IoCashSharp className=\"dashboard-item-icon sold-good\"></IoCashSharp>\r\n            </div>\r\n            {\r\n                (Object.keys(regulation).length == 0 || regulation.currency == 'vnd' )?\r\n                <Typography style={{ marginBottom: '10px' }} variant=\"h6\">\r\n                    {totalPayedSalary} / {totalNotPayedSalary} VNĐ\r\n                </Typography>\r\n                : \r\n                <Typography style={{ marginBottom: '10px' }} variant=\"h6\">\r\n                    {(totalPayedSalary/regulation.exchangeRate).toFixed(2)} / {(totalNotPayedSalary/regulation.exchangeRate).toFixed(2)} $\r\n                </Typography>\r\n            }\r\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                Paid Salary / Unpaid Salary\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SalaryStats;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\ProductStatis.js",["908","909","910","911","912","913","914","915","916","917","918","919","920","921","922","923","924","925","926","927","928","929","930","931","932","933","934","935","936","937","938","939","940","941","942","943","944","945","946","947","948","949","950","951","952","953","954","955","956","957","958"],"import React from 'react';\r\nimport { Typography } from '@mui/material';\r\nimport { RiMoneyDollarCircleFill } from 'react-icons/ri'\r\nimport { useSelector } from 'react-redux'\r\nimport { MdImportExport } from \"react-icons/md\";\r\n\r\nfunction ProductStatis(props) {\r\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const [totalExport, setTotalExport] = React.useState('')\r\n    const listProduct = useSelector(state => state.listProduct.state)\r\n    const [totalImport, setTotalImport] = React.useState('');\r\n    // console.log(\"listProduct\", listProduct);\r\n    let nowTime = new Date()\r\n\r\n    React.useEffect(() => {\r\n        let money = 0;\r\n        let currentMonth = nowTime.getMonth() + 1;\r\n\r\n        if (typeHeaderDashboard == 'Today') {\r\n            var importProduct = 0;\r\n            for(var i = 0; i < listProduct.length; i++)\r\n            {\r\n                var realDate = listProduct[i]._id.importDate.substring(0,listProduct[i]._id.importDate.indexOf('T'));\r\n                var date = realDate.split('-');\r\n                // console.log(date);\r\n                // console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\r\n                if (date[2] == nowTime.getDate() && date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\r\n                    importProduct += parseInt(listProduct[i].quantity);\r\n                }\r\n            }\r\n            setTotalImport(importProduct);\r\n            var exportProduct = 0;\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                console.log(\"val\", value);\r\n                if (date[0] == nowTime.getDate() && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\r\n                    // Tính tổng số lượng sản phẩm\r\n                    var allExport = 0;\r\n                    for(var j = 0; j < value.listProduct.length; j++)\r\n                    {\r\n                        allExport += parseInt(value.listProduct[j].quantity);\r\n                    }\r\n                    if(!value.deleted) {\r\n                        exportProduct += allExport;\r\n                    }\r\n                }\r\n            })\r\n            setTotalExport(exportProduct)\r\n        } else if (typeHeaderDashboard == 'Yesterday') {\r\n            var importProduct = 0;\r\n            for(var i = 0; i < listProduct.length; i++)\r\n            {\r\n                var realDate = listProduct[i]._id.importDate.substring(0,listProduct[i]._id.importDate.indexOf('T'));\r\n                var date = realDate.split('-');\r\n                // console.log(date);\r\n                // console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\r\n                if (date[2] == nowTime.getDate() - 1 && date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\r\n                    importProduct += parseInt(listProduct[i].quantity);\r\n                }\r\n            }\r\n            setTotalImport(importProduct);\r\n\r\n            var exportProduct =0;\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                console.log(\"val\", value);\r\n                if (date[0] == nowTime.getDate() - 1 && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\r\n                    // Tính tổng số lượng sản phẩm\r\n                    var allExport = 0;\r\n                    for(var j = 0; j < value.listProduct.length; j++)\r\n                    {\r\n                        allExport += parseInt(value.listProduct[j].quantity);\r\n                    }\r\n                    if(!value.deleted) {\r\n                        exportProduct += allExport;\r\n                    }\r\n                }\r\n            })\r\n            setTotalExport(exportProduct)\r\n        } else if (typeHeaderDashboard == 'Month') {\r\n            var importProduct = 0;\r\n            for(var i = 0; i < listProduct.length; i++)\r\n            {\r\n                var realDate = listProduct[i]._id.importDate.substring(0,listProduct[i]._id.importDate.indexOf('T'));\r\n                var date = realDate.split('-');\r\n                console.log(date);\r\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\r\n                if (date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\r\n                    importProduct += parseInt(listProduct[i].quantity);\r\n                }\r\n            }\r\n            setTotalImport(importProduct);\r\n\r\n            var exportProduct =0;\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\r\n                    var allExport = 0;\r\n                    for(var j = 0; j < value.listProduct.length; j++)\r\n                    {\r\n                        allExport += parseInt(value.listProduct[j].quantity);\r\n                    }\r\n                    if(!value.deleted) {\r\n                        exportProduct += allExport;\r\n                    }\r\n                }\r\n            })\r\n            setTotalExport(exportProduct)\r\n        } else if (typeHeaderDashboard == 'Year') {\r\n            var importProduct = 0;\r\n            for(var i = 0; i < listProduct.length; i++)\r\n            {\r\n                var realDate = listProduct[i]._id.importDate.substring(0,listProduct[i]._id.importDate.indexOf('T'));\r\n                var date = realDate.split('-');\r\n                console.log(date);\r\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\r\n                if (date[0] == nowTime.getFullYear()) {\r\n                    importProduct += parseInt(listProduct[i].quantity);\r\n                }\r\n            }\r\n            setTotalImport(importProduct);\r\n\r\n            var exportProduct =0;\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[2] == nowTime.getFullYear()) {\r\n                    var allExport = 0;\r\n                    for(var j = 0; j < value.listProduct.length; j++)\r\n                    {\r\n                        allExport += parseInt(value.listProduct[j].quantity);\r\n                    }\r\n                    if(!value.deleted) {\r\n                        exportProduct += allExport;\r\n                    }\r\n                }\r\n            })\r\n            setTotalExport(exportProduct)\r\n        } else if (typeHeaderDashboard == 'All') {\r\n            var importProduct = 0;\r\n            if(listProduct!=undefined && listProduct.length != undefined)\r\n                for(var i = 0; i < listProduct.length; i++)\r\n                {\r\n                    importProduct += parseInt(listProduct[i].quantity);\r\n                }\r\n            setTotalImport(importProduct);\r\n            \r\n            var exportProduct =0;\r\n            listReciept.map(value => {\r\n                if(!value.deleted) {\r\n                    var allExport = 0;\r\n                    for(var j = 0; j < value.listProduct.length; j++)\r\n                    {\r\n                        allExport += parseInt(value.listProduct[j].quantity);\r\n                    }\r\n                    if(!value.deleted) {\r\n                        exportProduct += allExport;\r\n                    }\r\n                }\r\n            })\r\n            setTotalExport(exportProduct)\r\n        }\r\n    }, [typeHeaderDashboard])\r\n\r\n    return (\r\n        <div className=\"dashboard-css imported-good\">\r\n            <div className=\"dashboard-item-img imported-good\" style={{ marginBottom: '30px' }}>\r\n                <MdImportExport className=\"dashboard-item-icon imported-good\"></MdImportExport>\r\n            </div>\r\n            <Typography style={{ marginBottom: '10px' }} variant=\"h6\">\r\n                {totalImport.toLocaleString() + ' / ' + totalExport.toLocaleString()}\r\n            </Typography>\r\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                Import Product / Sell Product\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProductStatis;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\CouponManager.js",["959","960","961","962","963","964","965","966","967","968","969","970","971","972","973","974","975","976"],"import React from 'react';\r\nimport { Card, CardHeader, Divider, TableBody, TableHead, TableRow, Paper, Grid, Button, CardContent, Table, TableCell, TableContainer } from '@mui/material';\r\nimport { BiPlusMedical } from 'react-icons/bi';\r\nimport { IconButton } from '@mui/material'\r\nimport { styled } from '@mui/material/styles';\r\nimport { FiEdit, FiTrash2 } from 'react-icons/fi'\r\nimport { tableCellClasses } from '@mui/material/TableCell';\r\nimport axios from 'axios';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\n\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n    },\r\n}));\r\n\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n    '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n    },\r\n    // hide last border\r\n    '&:last-child td, &:last-child th': {\r\n        border: 0,\r\n    },\r\n}));\r\n\r\n\r\n\r\nfunction CouponManager(props) {\r\n    const statusDarkmode = useSelector(state => state.statusDarkmode)\r\n    const [value, setValue] = React.useState(new Date())\r\n    const [value1, setValue1] = React.useState('all')\r\n    const [typeCheck, setTypeCheck] = React.useState('groupBy')\r\n    const listCoupon = useSelector(state => state.listCoupon)\r\n    const listReceipt = useSelector(state => state.listReciept)\r\n    const [listReceiptHaveCoupon, setListReceiptHaveCoupon] = React.useState([]);\r\n    const [totalDiscount, setTotalDiscount] = React.useState(0);\r\n    const regulation = useSelector(state => state.regulationReducer)\r\n\r\n    const selectType = (e) => {\r\n        setTypeCheck(e.target.value);\r\n    }\r\n\r\n    const changeType = (e) => {\r\n        setValue1(e.target.value)\r\n    }\r\n\r\n    const changeTime = (newValue) => {\r\n        setValue(newValue);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        let list = listReceipt.filter(item => {\r\n            if (item.coupon && !item.deleted && !item.isEdit) {\r\n                return item\r\n            }\r\n        })\r\n        if (typeCheck === 'groupBy') {\r\n            if (value1 == 'all') {\r\n                setListReceiptHaveCoupon(list)\r\n            } else {\r\n                list = list.filter(item=> {\r\n                    if(value1 == item.coupon.idCoupon){\r\n                        return item\r\n                    }\r\n                })\r\n                setListReceiptHaveCoupon(list)\r\n            }\r\n        } else {\r\n            list = list.filter(item => {\r\n                let timeMau = item.date;\r\n                timeMau = timeMau.replace(/\\s/g, \"\");\r\n                timeMau = timeMau.split(\"/\");\r\n                if(value.getDate() == timeMau[0] && value.getMonth() + 1 == timeMau[1] && value.getFullYear() == timeMau[2]) {\r\n                    return item\r\n                }\r\n            })\r\n            setListReceiptHaveCoupon(list)\r\n        }\r\n        let money = 0\r\n        list.map(item => {\r\n            money += item.totalFinalMoney - item.totalMoney;\r\n        })\r\n        setTotalDiscount(money)\r\n    }, [typeCheck, value1, value])\r\n\r\n\r\n\r\n    return (\r\n        <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', marginBottom: '30px' }}>\r\n            <Card style={{ position: \"relative\" }}>\r\n                <CardHeader style={{ color: !statusDarkmode ? '#0091ea' : 'white', backgroundColor: !statusDarkmode ? '#efeeef' : '#455a64' }} title=\"Coupon Manager\" />\r\n                <Divider />\r\n                <CardContent>\r\n                    <Grid container spacing={3}>\r\n                        <Grid item md={3} sm={3}>\r\n                            <Grid container spacing={2}>\r\n                                <Grid item md={12} sm={12}  >\r\n                                    <Card>\r\n                                        <CardHeader style={{ color: !statusDarkmode ? '#0091ea' : 'white', backgroundColor: !statusDarkmode ? '#efeeef' : '#455a64' }} title=\"Date\" />\r\n                                        <Divider></Divider>\r\n                                        <CardContent>\r\n                                            <Grid container spacing={2}>\r\n                                                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                                    <Grid item md={12} sm={12}>\r\n                                                        <div className=\"form-check\">\r\n                                                            <input onClick={(e) => selectType(e)} style={{ transform: 'translateY(70%)' }} value=\"groupBy\" className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault2\" defaultChecked />\r\n                                                            <FormControl fullWidth>\r\n                                                                <InputLabel id=\"demo-simple-select-label\">Group by</InputLabel>\r\n                                                                <Select\r\n                                                                    labelId=\"demo-simple-select-label\"\r\n                                                                    id=\"demo-simple-select\"\r\n                                                                    value={value1}\r\n                                                                    label=\"Option\"\r\n                                                                    onChange={(e) => changeType(e)}\r\n                                                                >\r\n                                                                    <MenuItem value='all'>All</MenuItem>\r\n                                                                    {listCoupon.map(value => (\r\n                                                                        <MenuItem value={value.idCoupon}>{value.name}</MenuItem>\r\n                                                                    ))}\r\n                                                                </Select>\r\n                                                            </FormControl>\r\n                                                        </div>\r\n                                                    </Grid>\r\n                                                    <Grid item md={12} sm={12}>\r\n                                                        <div className=\"form-check\">\r\n                                                            <input onClick={(e) => selectType(e)} style={{ transform: 'translateY(70%)' }} value=\"date\" className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\" />\r\n                                                            <DesktopDatePicker\r\n                                                                label=\"Ngày\"\r\n                                                                value={value}\r\n                                                                minDate={new Date('2017-01-01')}\r\n                                                                onChange={(newValue) => changeTime(newValue)}\r\n                                                                renderInput={(params) => <TextField {...params} />}\r\n                                                            />\r\n                                                        </div>\r\n                                                    </Grid>\r\n                                                </LocalizationProvider>\r\n                                            </Grid>\r\n                                        </CardContent>\r\n                                    </Card>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                        <Grid style={{ height: '500px' }} item md={9} sm={9}>\r\n                            <Grid container spacing={3}>\r\n                                <Grid id=\"choses-product\" style={{ overflowX: 'hidden', overflowY: 'auto', height: '430px', marginTop: '20px' }} item md={12} sm={12}  >\r\n                                    <TableContainer id=\"choses-product\" component={Paper}>\r\n                                        <Table  sx={{ minWidth: 700 }} aria-label=\"customized table\">\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <StyledTableCell>Name coupon</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">Id Reciept</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">Date</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">Dicount(%)</StyledTableCell>\r\n                                                    <StyledTableCell align=\"center\">Reduce Money</StyledTableCell>\r\n                                                </TableRow>\r\n                                            </TableHead >\r\n                                            {listReceiptHaveCoupon.map(item => {\r\n                                                return (\r\n                                                    <TableBody>\r\n                                                        <StyledTableRow key=\"abc\">\r\n                                                            <StyledTableCell component=\"th\" scope=\"row\">{item.coupon.name}</StyledTableCell>\r\n                                                            <StyledTableCell align=\"center\">{item.MAHD}</StyledTableCell>\r\n                                                            <StyledTableCell align=\"center\">{item.date}</StyledTableCell>\r\n                                                            <StyledTableCell align=\"center\">{item.coupon.percent}</StyledTableCell>\r\n                                                            <StyledTableCell align=\"center\">{regulation.currency === 'vnd' ? (item.totalFinalMoney - item.totalMoney).toLocaleString(): ((item.totalFinalMoney - item.totalMoney)/regulation.exchangeRate).toFixed(2).toLocaleString()}</StyledTableCell>\r\n                                                        </StyledTableRow>\r\n                                                    </TableBody>\r\n                                                )\r\n                                            })}\r\n                                        </Table>\r\n                                    </TableContainer>\r\n                                </Grid>\r\n                                <Grid item md={12} sm={12}  >\r\n                                    <h5 style={{ textAlign: 'end', paddingRight: '20px', borderTop: '2px solid black' }}>Discount:\r\n                                        <span style={{ color: 'red' }}>   {regulation.currency === 'vnd' ? totalDiscount.toLocaleString() : ((totalDiscount/regulation.exchangeRate).toFixed(2)).toLocaleString()}  {(regulation.currency == 'vnd') ? 'VNĐ' : '$'}</span>\r\n                                    </h5>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n\r\n                </CardContent>\r\n                <Divider />\r\n\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CouponManager;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\TotalMoney.js",["977","978","979","980","981","982","983","984","985","986","987","988","989","990","991","992","993","994","995","996","997","998"],"import React from 'react';\r\nimport { Typography } from '@mui/material';\r\nimport { RiMoneyDollarCircleFill } from 'react-icons/ri'\r\nimport { useSelector } from 'react-redux'\r\nimport moment from 'moment';\r\n\r\n\r\nfunction TotalMoney(props) {\r\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const regulation = useSelector(state => state.regulationReducer)\r\n    const [totalMoney, setTotalMoney] = React.useState('')\r\n\r\n    // console.log(\"ListReceipt\", listReciept);\r\n    let nowTime = new Date();\r\n\r\n    // console.log(\"nowTime.getMonth\",moment().subtract(24, 'days').format('l'));\r\n\r\n    React.useEffect(() => {\r\n        let money = 0;\r\n        let currentMonth = nowTime.getMonth() + 1;\r\n        let lastMonth = new Date(moment().subtract(1, 'months'))\r\n        \r\n        if (typeHeaderDashboard == 'Today') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[0] == nowTime.getDate() && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\r\n                    if(!value.deleted) {\r\n                        money += value.totalFinalMoney\r\n                    }\r\n                }\r\n            })\r\n            setTotalMoney(money)\r\n        } else if (typeHeaderDashboard == 'Yesterday') {\r\n            let yesterdayTime = new Date(moment().subtract(1, 'days'))\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[0] == yesterdayTime.getDate() && date[1] == yesterdayTime.getMonth()+1 && date[2] == yesterdayTime.getFullYear()) {\r\n                    if(!value.deleted){\r\n                        money += value.totalFinalMoney\r\n                    }\r\n                }\r\n            })\r\n            setTotalMoney(money)\r\n        } else if (typeHeaderDashboard == 'Month') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[1] == lastMonth.getMonth() + 1 && date[2] == lastMonth.getFullYear()) {\r\n                    if(!value.deleted) {\r\n                        money += value.totalFinalMoney\r\n                    }\r\n                }\r\n            })\r\n            setTotalMoney(money)\r\n        } else if (typeHeaderDashboard == 'Year') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[2] == nowTime.getFullYear()) {\r\n                    if(!value.deleted) {\r\n                        money += value.totalFinalMoney\r\n                    }\r\n                }\r\n            })\r\n            setTotalMoney(money)\r\n        } else if (typeHeaderDashboard == 'All') {\r\n            listReciept.map(value => {\r\n                if(!value.deleted) {\r\n                    money += value.totalFinalMoney\r\n                }\r\n            })\r\n            setTotalMoney(money)\r\n        }\r\n    }, [typeHeaderDashboard])\r\n\r\n    return (\r\n        <div className=\"dashboard-css\">\r\n            <div className=\"dashboard-item-img\" style={{ marginBottom: '30px' }}>\r\n                <RiMoneyDollarCircleFill className=\"dashboard-item-icon\"></RiMoneyDollarCircleFill>\r\n            </div>\r\n            {\r\n                ( Object.keys(regulation).length == 0 || regulation.currency == 'vnd' )?\r\n                <Typography style={{ marginBottom: '10px' }} variant=\"h6\">\r\n                    {totalMoney.toLocaleString()} VNĐ \r\n                </Typography>\r\n                :\r\n                <Typography style={{ marginBottom: '10px' }} variant=\"h6\">\r\n                    {(totalMoney/regulation.exchangeRate).toFixed(2)} $\r\n                </Typography>\r\n            }\r\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                Total money\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TotalMoney;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\ErrorReceipt.js",["999","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","1016","1017","1018"],"import React from 'react';\r\nimport { Typography } from '@mui/material';\r\nimport { FaReceipt } from 'react-icons/fa'\r\nimport { useSelector } from 'react-redux'\r\nimport moment from 'moment'\r\n\r\n\r\nfunction ErrorReceipt(props) {\r\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const [index, setIndex] = React.useState(0)\r\n    let nowTime = new Date()\r\n\r\n    React.useEffect(() => {\r\n        let errorReciept = 0;\r\n        let currentMonth = nowTime.getMonth() + 1;\r\n        let lastMonth = new Date(moment().subtract(1, 'months'))\r\n        let yesterdayTime = new Date(moment().subtract(1, 'days'))\r\n\r\n        if (typeHeaderDashboard == 'Today') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[0] == nowTime.getDate() && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\r\n                    if (!value.deleted && value.isEdit) {\r\n                        errorReciept++\r\n                    }\r\n                }\r\n            })\r\n            setIndex(errorReciept)\r\n        } else if (typeHeaderDashboard == 'Yesterday') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[0] == yesterdayTime.getDate() - 1 && date[1] == yesterdayTime.getMonth() + 1 && date[2] == yesterdayTime.getFullYear()) {\r\n                    if (!value.deleted && value.isEdit) errorReciept++\r\n                }\r\n            })\r\n            setIndex(errorReciept)\r\n        } else if (typeHeaderDashboard == 'Month') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[1] == lastMonth.getMonth() && date[2] == lastMonth.getFullYear()) {\r\n                    if (!value.deleted && value.isEdit) errorReciept++\r\n                }\r\n            })\r\n            setIndex(errorReciept)\r\n        } else if (typeHeaderDashboard == 'Year') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[2] == nowTime.getFullYear()) {\r\n                    if (!value.deleted && value.isEdit) errorReciept++\r\n                }\r\n            })\r\n            setIndex(errorReciept)\r\n        } else if (typeHeaderDashboard == 'All') {\r\n            listReciept.map(value => {\r\n                if (!value.deleted && value.isEdit) {\r\n                    errorReciept++\r\n                }\r\n            })\r\n            setIndex(errorReciept)\r\n        }\r\n    }, [typeHeaderDashboard])\r\n\r\n    return (\r\n        <div className=\"dashboard-css error-receipt\">\r\n            <div className=\"dashboard-item-img error-receipt\" style={{ marginBottom: '30px' }}>\r\n                <FaReceipt className=\"dashboard-item-icon error-receipt\"></FaReceipt>\r\n            </div>\r\n            <Typography style={{ marginBottom: '10px' }} variant=\"h5\">{index}</Typography>\r\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                Exchange recepit\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorReceipt;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButtonDashboard.js",["1019"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport Grow from '@mui/material/Grow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Popper from '@mui/material/Popper';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuList from '@mui/material/MenuList';\r\nimport { BiCaretDown } from 'react-icons/bi'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst options = ['All', 'Today', 'Yesterday', 'Month', 'Year'];\r\n\r\nexport default function SplitButton() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef(null);\r\n    const dispatch = useDispatch()\r\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n\r\n    const handleClick = () => {\r\n        console.info(`You clicked ${options[selectedIndex]}`);\r\n    };\r\n\r\n    const handleMenuItemClick = (event, index, option) => {\r\n        dispatch({\r\n            type: \"TYPE_HEADER_DASHBOARD\",\r\n            typeDashboard: option\r\n        })\r\n        setSelectedIndex(index);\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        dispatch({\r\n            type: \"RESET_TYPE_HEADER_DASHBOARD\"\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ButtonGroup variant=\"contained\" className=\"button-group-customize\" ref={anchorRef} aria-label=\"split button\">\r\n                <Button onClick={handleClick}>{options[selectedIndex]}</Button>\r\n                <Button\r\n                    size=\"small\"\r\n                    aria-controls={open ? 'split-button-menu' : undefined}\r\n                    aria-expanded={open ? 'true' : undefined}\r\n                    aria-label=\"select merge strategy\"\r\n                    aria-haspopup=\"menu\"\r\n                    onClick={handleToggle}\r\n                >\r\n                    <BiCaretDown />\r\n                </Button>\r\n            </ButtonGroup>\r\n            <Popper\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n                style={{zIndex: 20}}\r\n            >\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin:\r\n                                placement === 'bottom' ? 'center top' : 'center bottom',\r\n                        }}\r\n                    >\r\n                        <Paper>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList id=\"split-button-menu\" style={{zIndex: 500}}>\r\n                                    {options.map((option, index) => (\r\n                                        <MenuItem\r\n                                            key={option}\r\n                                            selected={index === selectedIndex}\r\n                                            onClick={(event) => handleMenuItemClick(event, index, option)}\r\n                                            style={{zIndex: 500}}\r\n                                        >\r\n                                            {option}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\DaiLyMoneyTracking.js",["1020","1021","1022","1023","1024","1025","1026","1027"],"import React from 'react';\r\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\r\nimport { Grid, TextField } from '@mui/material';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport { useSelector } from 'react-redux'\r\n\r\n\r\nfunction DaiLyMoneyTracking(props) {\r\n    const [value, setValue] = React.useState(new Date());\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const [dailyListReciept, setDailiListReciept] = React.useState([]);\r\n    const regulation = useSelector(state => state.regulationReducer)\r\n\r\n    const changeTime = (newValue) => {\r\n        if (newValue) {\r\n            setValue(newValue);\r\n        }\r\n    }\r\n\r\n    const totalMoneyDaily = () => {\r\n        let money = 0\r\n        dailyListReciept.map(value => {\r\n            if(!value.isEdit) {\r\n                if (!value.deleted) {\r\n                    money += value.totalFinalMoney\r\n                } else {\r\n                    // money -= value.totalFinalMoney\r\n                }\r\n            }\r\n        })\r\n\r\n        if(regulation.currency !== 'vnd') {\r\n            money = (money/regulation.exchangeRate).toFixed(2);\r\n        } \r\n\r\n        return money\r\n    }\r\n\r\n    const renderMoney = (item) => {\r\n        let money = item.totalFinalMoney\r\n        if(regulation.currency !== 'vnd') {\r\n            money = (money/regulation.exchangeRate).toFixed(2);\r\n        } \r\n\r\n        if (item.deleted && item.isEdit) {\r\n            return 0\r\n        } else if (item.deleted) {\r\n            return money\r\n        } else if (item.isEdit) {\r\n            return 0\r\n        } else {\r\n            return \"+\" + money\r\n        }\r\n    }\r\n\r\n    const renderStatus = (item) => {\r\n        if (item.deleted && item.isEdit) {\r\n            return \"Exchange\"\r\n        } else if (item.deleted) {\r\n            return \"Deleted\"\r\n        } else if (item.isEdit) {\r\n            return \"Exchange\"\r\n        } else {\r\n            return \"Success\"\r\n        }\r\n    }\r\n\r\n    const renderColor = (item) => {\r\n        if (item.deleted && item.isEdit) {\r\n            return \"#c1c103\"\r\n        } else if (item.deleted) {\r\n            return \"red\"\r\n        } else if (item.isEdit) {\r\n            return \"#c1c103\"\r\n        } else {\r\n            return \"green\"\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        let day = value.getDate()\r\n        let month = value.getMonth() + 1;\r\n        let year = value.getFullYear()\r\n        let arrListReciept\r\n        arrListReciept = listReciept.filter(value => {\r\n            let data = value.date;\r\n            data = data.replace(/\\s/g, \"\");\r\n            data = data.split(\"/\");\r\n            if (data[0] == day && data[1] == month && data[2] == year) {\r\n                return value\r\n            }\r\n        })\r\n        setDailiListReciept(arrListReciept)\r\n    }, [value])\r\n\r\n    return (\r\n        <div style={{ backgroundColor: 'white', borderRadius: '4px', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', overflow: 'hidden' }}>\r\n            <div style={{ height: 'auto', width: '90%', margin: 'auto', paddingTop: '20px' }}>\r\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                    <DesktopDatePicker\r\n                        label=\"Date\"\r\n                        value={value}\r\n                        minDate={new Date('2017-01-01')}\r\n                        onChange={(newValue) => changeTime(newValue)}\r\n                        renderInput={(params) => <TextField style={{ width: '100%' }} {...params} />}\r\n                    />\r\n                </LocalizationProvider>\r\n            </div>\r\n            <div id=\"choses-product\" style={{ backgroundColor: 'white', height: '500px', width: '80%', overflow: 'hidden', margin: 'auto', overflowY: 'auto', marginTop: '20px', marginBottom: '20px' }}>\r\n                <ul style={{ textDecoration: 'none', listStyle: 'none', paddingLeft: '0' }}>\r\n                    {\r\n                        dailyListReciept.length !== 0 ? dailyListReciept.map(value => (\r\n                            <li style={{ borderBottom: '1px #0000004d solid', marginBottom: '5px', paddingBottom: '5px' }}>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item sm={6} md={6}>\r\n                                        <div>{renderStatus(value)}</div>\r\n                                        <div style={{ fontWeight: '700', color: renderColor(value) }}>{renderMoney(value).toLocaleString()}</div>\r\n                                    </Grid>\r\n                                    <Grid style={{ display: 'flex', justifyContent: 'center' }} item sm={6} md={3}>\r\n                                        <div style={{ color: '#00000075', paddingLeft: '10px', fontSize: '1rem' }}>{value.name}</div>\r\n                                    </Grid>\r\n                                    <Grid style={{ display: 'flex', justifyContent: 'center' }} item sm={6} md={3}>\r\n                                        <div style={{ color: '#00000075', paddingLeft: '10px', fontSize: '1rem' }}>{value.time}</div>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </li>\r\n                        )) : (\r\n                            <div style={{ justifyContent: 'center', display: 'flex', marginTop: '100px', color: 'rgba(0,0,0,0.5)' }}>\r\n                                <h2>\r\n                                    You have not sold any invoices today\r\n                                </h2>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </ul>\r\n            </div>\r\n            <div style={{ height: 'auto', width: '100%', paddingTop: '20px', paddingBottom: '20px', borderTop: '3px solid black' }}>\r\n                <Grid container spacing={2}>\r\n                    <Grid style={{ display: 'flex', justifyContent: 'end' }} item md={2}>\r\n                        <h5 style={{ fontWeight: '800' }}>TOTAL : </h5>\r\n                    </Grid>\r\n                    <Grid style={{ display: 'flex', justifyContent: 'start' }} item md={5}>\r\n                        {totalMoneyDaily() >= 0 ? (\r\n                            <h5 style={{ color: 'green', fontWeight: 'bold' }}>{totalMoneyDaily().toLocaleString()} {(regulation.currency == 'vnd') ? 'VNĐ' : '$'}</h5>\r\n                        ) : (\r\n                            <h5 style={{ color: 'red', fontWeight: 'bold' }}>{totalMoneyDaily().toLocaleString()} {(regulation.currency == 'vnd') ? 'VNĐ' : '$'}</h5>\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DaiLyMoneyTracking;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\Statistic.js",["1028","1029","1030","1031","1032","1033","1034","1035","1036","1037","1038","1039","1040","1041","1042","1043","1044","1045","1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074","1075","1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096","1097","1098","1099","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1114","1115","1116"],"import { merge, now } from 'lodash';\r\nimport ReactApexChart from 'react-apexcharts';\r\n// material\r\nimport { Card, CardHeader, Box } from '@mui/material';\r\n//\r\nimport BaseOptionChart from './BaseOptionChart';\r\nimport SplitButton from './GroupButton';\r\nimport OptionYear from './OptionYear';\r\nimport OptionMonth from './OptionMonth';\r\n// ----------------------------------------------------------------------\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport React from 'react';\r\nimport moment from 'moment'\r\n\r\nexport default function AppWebsiteVisits() {\r\n  const [typeDate, setTypeData] = React.useState(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Sartuday', 'Sunday']);\r\n  const [title, setTitle] = React.useState('last Week')\r\n  const [tienGoc, setTienGoc] = React.useState([])\r\n  const [tienDoanhThu, setTienDoanhThu] = React.useState([])\r\n  const [tienLai, setTienLai] = React.useState([])\r\n  const [growth, setGrowth] = React.useState('(+100%) than Last Week')\r\n  const [showOption, setShowOption] = React.useState(false);\r\n  var CHART_DATA = [\r\n    {\r\n      name: 'Funds',\r\n      type: 'column',\r\n      data: tienGoc\r\n    },\r\n    {\r\n      name: 'Revenue',\r\n      type: 'area',\r\n      data: tienDoanhThu\r\n    },\r\n    {\r\n      name: 'Profit',\r\n      type: 'line',\r\n      data: tienLai\r\n    }\r\n  ];\r\n  const typeTimeDashboard = useSelector(state => state.typeTimeDashboard)\r\n  const listReciept = useSelector(state => state.listReciept)\r\n  const typeMonth = useSelector(state => state.monthSelectDashboard)\r\n  const typeYear = useSelector(state => state.yearSelectDashboard)\r\n  const regulation = useSelector(state => state.regulationReducer)\r\n\r\n  let nowTime = new Date()\r\n  const chartOptions = merge(BaseOptionChart(), {\r\n    stroke: { width: [1, 2, 3] },\r\n    plotOptions: { bar: { columnWidth: '11%', borderRadius: 4 } },\r\n    fill: { type: ['solid', 'gradient', 'solid'] },\r\n    xaxis: {\r\n      categories: typeDate,\r\n    },\r\n    tooltip: {\r\n      shared: true,\r\n      intersect: false,\r\n      y: {\r\n        formatter: (y) => {\r\n          if (typeof y !== 'undefined') {\r\n            if(regulation == {})\r\n            {\r\n              return `${y.toFixed(0)} VNĐ`;\r\n            }\r\n            if (regulation.currency == 'vnd')\r\n              return `${y.toFixed(0)} VNĐ`;\r\n            else\r\n              return `${(y).toFixed(2)} $`;\r\n          }\r\n          return y.toFixed(2);\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  const DateInWeek = (type) => {\r\n    let Week = [];\r\n    if (type === 'Week') {\r\n      // Week\r\n      if (nowTime.getDay() === 0) {\r\n        for (let i = 0; i < 7; i++) {\r\n          let nowDate = new Date(moment().subtract(i, 'days'))\r\n          let date = nowDate.getDate() + \" \" + (nowDate.getMonth() + 1) + \" \" + nowDate.getFullYear();\r\n          Week.push(date)\r\n        }\r\n        return Week\r\n      } else {\r\n        for (let i = 0; i < nowTime.getDay(); i++) {\r\n          let nowDate = new Date(moment().subtract(i, 'days'))\r\n          let date = nowDate.getDate() + \" \" + (nowDate.getMonth() + 1) + \" \" + nowDate.getFullYear();\r\n          Week.push(date)\r\n        }\r\n        return Week\r\n      }\r\n\r\n    } else {\r\n      if (nowTime.getDay() === 0) {\r\n        for (let i = 0; i < 7; i++) {\r\n          let nowDate = new Date(moment().subtract(i + 7, 'days'))\r\n          let date = nowDate.getDate() + \" \" + (nowDate.getMonth() + 1) + \" \" + nowDate.getFullYear();\r\n          Week.push(date)\r\n        }\r\n        return Week\r\n      } else {\r\n        for (let i = 0; i < 7; i++) {\r\n          let nowDate = new Date(moment().subtract(i + nowTime.getDay(), 'days'))\r\n          let date = nowDate.getDate() + \" \" + (nowDate.getMonth() + 1) + \" \" + nowDate.getFullYear();\r\n          Week.push(date)\r\n        }\r\n        return Week\r\n      }\r\n    }\r\n  }\r\n\r\n  ///////Week\r\n  const totalMoneyInWeek = (arrDate, type) => {\r\n    let arrDoanhThu = []\r\n    let arrTienGoc = []\r\n    let arrLai = []\r\n    arrDate.map(value => {\r\n      let date = value.split(\" \")\r\n      let moneyDoanhThu = 0\r\n      let moneyTienGoc = 0\r\n      listReciept.map(reciept => {\r\n        let dateReciept = reciept.date.replace(/\\s/g, \"\");\r\n        dateReciept = dateReciept.split(\"/\")\r\n        if (date[0] === dateReciept[0] && date[1] === dateReciept[1] && date[2] === dateReciept[2]) {\r\n          if (!reciept.deleted) {\r\n            moneyDoanhThu += reciept.totalFinalMoney;\r\n            reciept.listProduct.map(value => {\r\n              moneyTienGoc += value.quantity * value.product.importPrice;\r\n            })\r\n          }\r\n        }\r\n      })\r\n      if (regulation.currency !== 'vnd') {\r\n        moneyDoanhThu = (moneyDoanhThu / regulation.exchangeRate).toFixed(2);\r\n        moneyTienGoc = (moneyTienGoc / regulation.exchangeRate).toFixed(2)\r\n      }\r\n      arrTienGoc.unshift(moneyTienGoc)\r\n      arrDoanhThu.unshift(moneyDoanhThu)\r\n      arrLai.unshift(moneyDoanhThu - moneyTienGoc)\r\n    })\r\n    setTienGoc(arrTienGoc)\r\n    setTienDoanhThu(arrDoanhThu)\r\n    setTienLai(arrLai)\r\n  }\r\n\r\n\r\n  ///////Month\r\n\r\n  const DateInMonth = (month123, year123, currentMonth) => {\r\n    let arrCurrentMonth = [];\r\n    let arrLastMonth = []\r\n    let month = new Date(moment().subtract(1, 'months'))\r\n    let lastMonth = month.getMonth() + 1;\r\n    let year = nowTime.getFullYear();\r\n    let monthCurrent = nowTime.getMonth() + 1;\r\n\r\n    for (let i = 0; i < 8; i++) {\r\n      let data\r\n      if (i === 0) {\r\n        data = '1/' + monthCurrent\r\n        arrCurrentMonth.push(data)\r\n        data = '1/' + month123\r\n        arrLastMonth.push(data)\r\n      } else {\r\n        data = i * 4 + '/' + monthCurrent\r\n        arrCurrentMonth.push(data)\r\n        data = i * 4 + '/' + month123\r\n        arrLastMonth.push(data)\r\n      }\r\n    }\r\n\r\n    if (currentMonth === true) {\r\n      //Month\r\n      let data = new Date(year, nowTime.getMonth() + 1, 0).getDate() + '/' + monthCurrent\r\n      arrCurrentMonth.push(data)\r\n      return arrCurrentMonth\r\n    } else {\r\n      //Last month\r\n      let data = new Date(year123, month123, 0).getDate() + '/' + lastMonth\r\n      arrLastMonth.push(data)\r\n      return arrLastMonth\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  const totalMoneyInMonth = (arrDate, currentMonth, month123, year123) => {\r\n    var newArr\r\n    let arrDoanhThu = [0]\r\n    let arrTienGoc = [0]\r\n    let arrLai = [0]\r\n    if (currentMonth) {\r\n      newArr = arrDate.filter(value => {\r\n        let data = value.replace(/\\s/g, \"\")\r\n        data = value.split(\"/\");\r\n        if (nowTime.getDate() >= data[0]) {\r\n          return value\r\n        }\r\n      })\r\n      if (nowTime.getDate() % 4 !== 0) {\r\n        let month = nowTime.getMonth() + 1;\r\n        let a = nowTime.getDate() + \"/\" + month\r\n        newArr.push(a)\r\n      }\r\n      setTypeData(newArr)\r\n    } else {\r\n      setTypeData(arrDate)\r\n    }\r\n\r\n    if (currentMonth) {\r\n      if (nowTime.getDate() / 4 === 0) {\r\n\r\n      } else {\r\n        for (let i = 1; i <= nowTime.getDate() / 4; i++) {\r\n          let year = nowTime.getFullYear();\r\n          let date = newArr[i].replace(/\\s/g, \"\");\r\n          date = date.split(\"/\")\r\n          let moneyDoanhThu = 0;\r\n          let moneyTienGoc = 0;\r\n          listReciept.map(reciept => {\r\n            let dateReciept = reciept.date.replace(/\\s/g, \"\");\r\n            dateReciept = dateReciept.split(\"/\")\r\n            if (date[0] == dateReciept[0] || date[0] - 1 == dateReciept[0] || date[0] - 2 == dateReciept[0] || date[0] - 3 == dateReciept[0]) {\r\n              if (!reciept.deleted) {\r\n                if (date[1] == dateReciept[1] && year == dateReciept[2])\r\n                  moneyDoanhThu += reciept.totalFinalMoney;\r\n                reciept.listProduct.map(value => {\r\n                  moneyTienGoc += value.quantity * value.product.importPrice;\r\n                })\r\n              }\r\n            }\r\n          })\r\n          if (regulation.currency !== 'vnd') {\r\n            moneyDoanhThu = (moneyDoanhThu / regulation.exchangeRate).toFixed(2);\r\n            moneyTienGoc = (moneyTienGoc / regulation.exchangeRate).toFixed(2)\r\n          }\r\n          arrDoanhThu.push(moneyDoanhThu);\r\n          arrTienGoc.push(moneyTienGoc)\r\n          arrLai.push(moneyDoanhThu - moneyTienGoc)\r\n        }\r\n      }\r\n\r\n      if (nowTime.getDate() % 4 !== 0) {\r\n        let moneyDoanhThu = 0;\r\n        let moneyTienGoc = 0;\r\n        for (let i = 4 * Math.floor(nowTime.getDate() / 4); i <= nowTime.getDate(); i++) {\r\n          let year = nowTime.getFullYear();\r\n          let month = nowTime.getMonth() + 1;\r\n          listReciept.map(reciept => {\r\n            let dateReciept = reciept.date.replace(/\\s/g, \"\");\r\n            dateReciept = dateReciept.split(\"/\")\r\n            if (i == dateReciept[0] && month == dateReciept[1] && year == dateReciept[2]) {\r\n              if (!reciept.deleted) {\r\n                moneyDoanhThu += reciept.totalFinalMoney;\r\n                reciept.listProduct.map(value => {\r\n                  moneyTienGoc += value.quantity * value.product.importPrice;\r\n                })\r\n              }\r\n            }\r\n          })\r\n        }\r\n        if (regulation.currency !== 'vnd') {\r\n          moneyDoanhThu = (moneyDoanhThu / regulation.exchangeRate).toFixed(2);\r\n          moneyTienGoc = (moneyTienGoc / regulation.exchangeRate).toFixed(2)\r\n        }\r\n        arrDoanhThu.push(moneyDoanhThu);\r\n        arrTienGoc.push(moneyTienGoc)\r\n        arrLai.push(moneyDoanhThu - moneyTienGoc)\r\n      }\r\n\r\n      setTienGoc(arrTienGoc)\r\n      setTienDoanhThu(arrDoanhThu)\r\n      setTienLai(arrLai)\r\n    } else {\r\n\r\n      for (let i = 1; i <= 7; i++) {\r\n        let date = arrDate[i].replace(/\\s/g, \"\");\r\n        date = date.split(\"/\")\r\n        let moneyDoanhThu = 0;\r\n        let moneyTienGoc = 0;\r\n        listReciept.map(reciept => {\r\n          let dateReciept = reciept.date.replace(/\\s/g, \"\");\r\n          dateReciept = dateReciept.split(\"/\")\r\n          if (date[0] == dateReciept[0] || date[0] - 1 == dateReciept[0] || date[0] - 2 == dateReciept[0] || date[0] - 3 == dateReciept[0]) {\r\n            if (month123 == dateReciept[1] && year123 == dateReciept[2]) {\r\n              if (!reciept.deleted) {\r\n                moneyDoanhThu += reciept.totalFinalMoney;\r\n                reciept.listProduct.map(value => {\r\n                  moneyTienGoc += value.quantity * value.product.importPrice;\r\n                })\r\n              }\r\n            }\r\n          }\r\n        })\r\n        if (regulation.currency !== 'vnd') {\r\n          moneyDoanhThu = (moneyDoanhThu / regulation.exchangeRate).toFixed(2);\r\n          moneyTienGoc = (moneyTienGoc / regulation.exchangeRate).toFixed(2)\r\n        }\r\n        arrDoanhThu.push(moneyDoanhThu);\r\n        arrTienGoc.push(moneyTienGoc)\r\n        arrLai.push(moneyDoanhThu - moneyTienGoc)\r\n      }\r\n\r\n      if (new Date(year123, month123, 0).getDate() > 28) {\r\n        let moneyDoanhThu = 0;\r\n        let moneyTienGoc = 0;\r\n        for (let i = 29; i <= new Date(year123, month123, 0).getDate(); i++) {\r\n          listReciept.map(reciept => {\r\n            let dateReciept = reciept.date.replace(/\\s/g, \"\");\r\n            dateReciept = dateReciept.split(\"/\")\r\n            if (i == dateReciept[0] && month123 == dateReciept[1] && year123 == dateReciept[2]) {\r\n              if (!reciept.deleted) {\r\n                moneyDoanhThu += reciept.totalFinalMoney;\r\n                reciept.listProduct.map(value => {\r\n                  moneyTienGoc += value.quantity * value.product.importPrice;\r\n                })\r\n              }\r\n            }\r\n          })\r\n        }\r\n        if (regulation.currency !== 'vnd') {\r\n          moneyDoanhThu = (moneyDoanhThu / regulation.exchangeRate).toFixed(2);\r\n          moneyTienGoc = (moneyTienGoc / regulation.exchangeRate).toFixed(2)\r\n        }\r\n        arrDoanhThu.push(moneyDoanhThu);\r\n        arrTienGoc.push(moneyTienGoc)\r\n        arrLai.push(moneyDoanhThu - moneyTienGoc)\r\n      }\r\n      setTienGoc(arrTienGoc)\r\n      setTienDoanhThu(arrDoanhThu)\r\n      setTienLai(arrLai)\r\n    }\r\n\r\n  }\r\n\r\n\r\n  ////// YEAR\r\n  const DateInYear = (year) => {\r\n    let arrDoanhThu = []\r\n    let arrTienGoc = []\r\n    let arrLai = []\r\n    for (let i = 1; i <= 12; i++) {\r\n      let moneyDoanhThu = 0;\r\n      let moneyTienGoc = 0;\r\n      listReciept.map(reciept => {\r\n        let dateReciept = reciept.date.replace(/\\s/g, \"\");\r\n        dateReciept = dateReciept.split(\"/\")\r\n        if (i == dateReciept[1] && year == dateReciept[2]) {\r\n          if (!reciept.deleted) {\r\n            moneyDoanhThu += reciept.totalFinalMoney;\r\n            reciept.listProduct.map(value => {\r\n              moneyTienGoc += value.quantity * value.product.importPrice;\r\n            })\r\n          }\r\n        }\r\n      })\r\n\r\n      if (regulation.currency !== 'vnd') {\r\n        moneyDoanhThu = (moneyDoanhThu / regulation.exchangeRate).toFixed(2);\r\n        moneyTienGoc = (moneyTienGoc / regulation.exchangeRate).toFixed(2)\r\n      }\r\n\r\n      arrDoanhThu.push(moneyDoanhThu);\r\n      arrTienGoc.push(moneyTienGoc)\r\n      arrLai.push(moneyDoanhThu - moneyTienGoc)\r\n      setTienGoc(arrTienGoc)\r\n      setTienDoanhThu(arrDoanhThu)\r\n      setTienLai(arrLai)\r\n    }\r\n  }\r\n\r\n  // // Tắng trưởng của công ty\r\n  const GrowthPercent = (month, year, type, arrCurrent, arrLast) => {\r\n    let moneyLast = 0;\r\n    let moneyCurrent = 0;\r\n\r\n    if (month === 0) {\r\n      listReciept.map(value => {\r\n        let date = value.date.replace(/\\s/g, \"\")\r\n        date = date.split(\"/\")\r\n        if (date[2] == year) {\r\n          if (!value.deleted) {\r\n            moneyCurrent += value.totalFinalMoney\r\n          }\r\n        }\r\n        if (date[2] == year - 1) {\r\n          if (!value.deleted) {\r\n            moneyLast += value.totalFinalMoney\r\n          }\r\n        }\r\n      })\r\n      if (moneyLast == 0 && moneyCurrent == 0) {\r\n        setGrowth('(+0%) than Last Year')\r\n      } else if (moneyLast == 0) {\r\n        setGrowth('(+100%) than Last Year')\r\n      } else if (moneyCurrent == 0) {\r\n        setGrowth('(+0%) than Last Year')\r\n      } else {\r\n        let percent = (moneyCurrent / moneyLast) * 100\r\n        if (percent >= 100) {\r\n          setGrowth(`(+${(percent - 100).toFixed(2)}%) than Last Year`)\r\n        } else {\r\n          setGrowth(`(-${(100 - percent).toFixed(2)}%) than Last Year`)\r\n        }\r\n      }\r\n    } else if (month !== 0 && month == nowTime.getMonth() + 1 && year == nowTime.getFullYear()) {\r\n      if (type === 'Week' || type === 'Last Week') {\r\n        arrCurrent.map(date => {\r\n          let item = date.split(\" \");\r\n          listReciept.map(value => {\r\n            let valueDate = value.date.replace(/\\s/g, \"\")\r\n            valueDate = valueDate.split(\"/\")\r\n            if (!value.deleted) {\r\n              if (item[0] == valueDate[0] && item[1] == valueDate[1] && item[2] == valueDate[2]) {\r\n                moneyCurrent += value.totalFinalMoney\r\n              }\r\n            }\r\n          })\r\n        })\r\n\r\n        arrLast.map(date => {\r\n          let item = date.split(\" \");\r\n          listReciept.map(value => {\r\n            let valueDate = value.date.replace(/\\s/g, \"\")\r\n            valueDate = valueDate.split(\"/\")\r\n            if (!value.deleted) {\r\n              if (item[0] == valueDate[0] && item[1] == valueDate[1] && item[2] == valueDate[2]) {\r\n                moneyLast += value.totalFinalMoney\r\n              }\r\n            }\r\n          })\r\n        })\r\n\r\n        if (moneyLast == 0 && moneyCurrent == 0) {\r\n          setGrowth('(+0%) than Last Week')\r\n        } else if (moneyLast == 0) {\r\n          setGrowth('(+100%) than Last Week')\r\n        } else if (moneyCurrent == 0) {\r\n          setGrowth('(+0%) than Last Week')\r\n        } else {\r\n          let percent = (moneyCurrent / moneyLast) * 100\r\n          if (percent >= 100) {\r\n            setGrowth(`(+${(percent - 100).toFixed(2)}%) than Last Week`)\r\n          } else {\r\n            setGrowth(`(-${(100 - percent).toFixed(2)}%) than Last Week`)\r\n          }\r\n        }\r\n      } else {\r\n        let lastMonth = month == 1 ? 12 : month - 1\r\n        let yearOfLastMonth = month == 1 ? year - 1 : year\r\n        listReciept.map(value => {\r\n          let date = value.date.replace(/\\s/g, \"\")\r\n          date = date.split(\"/\")\r\n          if (date[1] == month && date[2] == year) {\r\n            if (!value.deleted) {\r\n              moneyCurrent += value.totalFinalMoney\r\n            }\r\n          }\r\n          if (date[1] == lastMonth && date[2] == yearOfLastMonth) {\r\n            if (!value.deleted) {\r\n              moneyLast += value.totalFinalMoney\r\n            }\r\n          }\r\n        })\r\n\r\n\r\n        if (moneyLast == 0 && moneyCurrent == 0) {\r\n          setGrowth('(+0%) than Last Month')\r\n        } else if (moneyLast == 0) {\r\n          setGrowth('(+100%) than Last Month')\r\n        } else if (moneyCurrent == 0) {\r\n          setGrowth('(+0%) than Last Month')\r\n        } else {\r\n          let percent = (moneyCurrent / moneyLast) * 100\r\n          if (percent >= 100) {\r\n            setGrowth(`(+${(percent - 100).toFixed(2)}%) than Last Month`)\r\n          } else {\r\n            setGrowth(`(-${(100 - percent).toFixed(2)}%) than Last Month`)\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      let lastMonth = month == 1 ? 12 : month - 1\r\n      let yearOfLastMonth = month == 1 ? year - 1 : year\r\n      listReciept.map(value => {\r\n        let date = value.date.replace(/\\s/g, \"\")\r\n        date = date.split(\"/\")\r\n        if (date[1] == month && date[2] == year) {\r\n          if (!value.deleted) {\r\n            moneyCurrent += value.totalFinalMoney\r\n          }\r\n        }\r\n        if (date[1] == lastMonth && date[2] == yearOfLastMonth) {\r\n          if (!value.deleted) {\r\n            moneyLast += value.totalFinalMoney\r\n          }\r\n        }\r\n      })\r\n      if (moneyLast == 0 && moneyCurrent == 0) {\r\n        setGrowth('(+0%) than Last Month')\r\n      } else if (moneyLast == 0) {\r\n        setGrowth('(+100%) than Last Month')\r\n      } else if (moneyCurrent == 0) {\r\n        setGrowth('(+0%) than Last Month')\r\n      } else {\r\n        let percent = (moneyCurrent / moneyLast) * 100\r\n        if (percent >= 100) {\r\n          setGrowth(`(+${(percent - 100).toFixed(2)}%) than Last Month`)\r\n        } else {\r\n          setGrowth(`(-${(100 - percent).toFixed(2)}%) than Last Month`)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  React.useEffect(() => {\r\n\r\n    if (typeMonth === 0) {\r\n      DateInYear(typeYear)\r\n      GrowthPercent(typeMonth, typeYear, typeTimeDashboard);\r\n      setTypeData(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']);\r\n      setShowOption(false);\r\n      setTitle('last year')\r\n    } else if (typeMonth !== 0 && typeMonth == nowTime.getMonth() + 1 && typeYear == nowTime.getFullYear()) {\r\n      setShowOption(true);\r\n      if (typeTimeDashboard === 'Week' || typeTimeDashboard === 'Last Week') {\r\n        let arrCurrent = DateInWeek('Week')\r\n        let arrLast = DateInWeek('Last Week')\r\n        setTypeData(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Sartuday', 'Sunday'])\r\n        totalMoneyInWeek(DateInWeek(typeTimeDashboard), typeTimeDashboard);\r\n        GrowthPercent(typeMonth, typeYear, typeTimeDashboard, arrCurrent, arrLast);\r\n        setTitle('last Week')\r\n      } else {\r\n        setShowOption(true);\r\n        totalMoneyInMonth(DateInMonth(typeMonth, typeYear, true), true, typeMonth, typeYear)\r\n        GrowthPercent(typeMonth, typeYear, typeTimeDashboard, '', '');\r\n      }\r\n    } else {\r\n      setShowOption(false);\r\n      totalMoneyInMonth(DateInMonth(typeMonth, typeYear, false), false, typeMonth, typeYear)\r\n      GrowthPercent(typeMonth, typeYear, typeTimeDashboard, '', '');\r\n    }\r\n\r\n  }, [typeTimeDashboard, growth, typeMonth, typeYear,regulation])\r\n\r\n\r\n\r\n  return (\r\n    <Card>\r\n      <div className=\"titleStatistic\">\r\n        <CardHeader style={{ fontWeight: '800' }} title=\"Revenue\" subheader={growth} />\r\n        <div style={{ display: 'flex', justifyContent: 'end' }}>\r\n          <OptionYear></OptionYear>\r\n          <OptionMonth></OptionMonth>\r\n          {showOption ? (\r\n            <SplitButton></SplitButton>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n      <Box sx={{ p: 3, pb: 1 }} dir=\"ltr\">\r\n        <ReactApexChart type=\"line\" series={CHART_DATA} options={chartOptions} height={364} />\r\n      </Box>\r\n    </Card>\r\n  );\r\n}\r\n","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\ModalAddCoupon.js",["1117","1118","1119","1120","1121"],"import React from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport TimePicker from '@mui/lab/TimePicker';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport axios from 'axios';\r\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\r\n\r\nfunction ModalAddCoupon(props) {\r\n    const statusDarkmode = useSelector(state => state.statusDarkmode)\r\n    const statusEditCoupon = useSelector(state => state.statusEditCoupon)\r\n    const objectEditCoupon = useSelector(state => state.objectEditCoupon)\r\n    const infoUser = useSelector(state => state.infoUser)\r\n    const [timeFrom, setTimeFrom] = React.useState(statusEditCoupon ? new Date(objectEditCoupon.timeFrom) : new Date());\r\n    const [timeEnd, settimeEnd] = React.useState(statusEditCoupon ? new Date(objectEditCoupon.timeEnd) : new Date());\r\n    const [isDescription, setIsDescription] = React.useState(false);\r\n    const [percent, setPercent] = React.useState(statusEditCoupon ? objectEditCoupon.percent : 100);\r\n    const [isPercent, setIsPercent] = React.useState(false);\r\n    const [description, setDiscription] = React.useState(statusEditCoupon ? objectEditCoupon.name : \"Discount 2/9\")\r\n    const [minTotal, setMinTotal] = React.useState(statusEditCoupon ? objectEditCoupon.minTotal : 100000)\r\n    const [isMinTotal, setIsMinTotal] = React.useState(false)\r\n    const [quantity, setQuantity] = React.useState(statusEditCoupon ? objectEditCoupon.quantity : 10)\r\n    const [isQuantity, setIsQuantity] = React.useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    const blurDiscription = (e) => {\r\n        if (e.target.value.length === 0) {\r\n            setDiscription(e.target.value)\r\n            setIsDescription(true);\r\n        } else {\r\n            setDiscription(e.target.value)\r\n            setIsDescription(false);\r\n        }\r\n    }\r\n\r\n    const blurDiscount = (e) => {\r\n        if (e.target.value > 100 || e.target.value < 0 || e.target.value == \"\") {\r\n            setIsPercent(true)\r\n        }\r\n        else {\r\n            setIsPercent(false)\r\n            setPercent(Number(e.target.value).toFixed(0))\r\n        }\r\n    }\r\n\r\n    const blurQuantity = (e) => {\r\n        if (e.target.value < 0 || e.target.value == \"\") {\r\n            setIsQuantity(true)\r\n        } else {\r\n            setIsQuantity(false)\r\n            setQuantity(e.target.value)\r\n        }\r\n    }\r\n\r\n    const blurMinTotal = (e) => {\r\n        if (e.target.value < 100000 || e.target.value == \"\") {\r\n            setIsMinTotal(true)\r\n        } else {\r\n            setIsMinTotal(false)\r\n            setMinTotal(e.target.value)\r\n        }\r\n    }\r\n\r\n    const changeTimeFrom = (newValue) => {\r\n        if (newValue) {\r\n            setTimeFrom(newValue);\r\n        }\r\n    }\r\n\r\n    const changetimeEnd = (newValue) => {\r\n        if (newValue) {\r\n            settimeEnd(newValue);\r\n        }\r\n    }\r\n\r\n    const addCoupon = async () => {\r\n        if (timeEnd - timeFrom >= 0) {\r\n            if (!isPercent && !isDescription && !isMinTotal && !isQuantity) {\r\n                const data = {\r\n                    _id: {\r\n                        storeID: infoUser.email,\r\n                        couponID: makeCode(6),\r\n                    },\r\n                    name: description,\r\n                    percent: percent,\r\n                    minTotal: minTotal,\r\n                    timeFrom: timeFrom,\r\n                    timeEnd: timeEnd,\r\n                    quantity: quantity,\r\n                }\r\n                await axios.post(`http://localhost:5000/api/coupon/create`, {\r\n                    token: localStorage.getItem('token'),\r\n                    email: infoUser.email,\r\n                    coupon: data,\r\n                }).then(res => {\r\n\r\n                }).catch(err => {\r\n\r\n                })\r\n                dispatch({\r\n                    type: \"ADD_COUPON\",\r\n                    data: data\r\n                })\r\n                dispatch({\r\n                    type: \"SHOW_ALERT\",\r\n                    message: \"Add coupon success\",\r\n                    typeMessage: \"success\",\r\n                })\r\n                dispatch({\r\n                    type: \"CHANGE_ADD_COUPON_STATUS\"\r\n                })\r\n            }\r\n        } else {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: \"The end date must be greater than the start date\",\r\n                typeMessage: \"warning\",\r\n            })\r\n        }\r\n    }\r\n\r\n    const editCoupon = async () => {\r\n        if (timeEnd - timeFrom >= 0) {\r\n            if (!isPercent && !isDescription && !isQuantity) {\r\n                const data = {\r\n                    _id: {\r\n                        couponID: objectEditCoupon._id.couponID,\r\n                        storeID: infoUser.email\r\n                    },\r\n                    name: description,\r\n                    minTotal: minTotal,\r\n                    percent: percent,\r\n                    timeFrom: timeFrom,\r\n                    timeEnd: timeEnd,\r\n                    quantity: Number(quantity),\r\n                }\r\n                await axios.post(`http://localhost:5000/api/coupon/update`, {\r\n                    token: localStorage.getItem('token'),\r\n                    email: infoUser.email,\r\n                    coupon: { ...data },\r\n                }).then(res => {\r\n                    dispatch({\r\n                        type: \"EDIT_COUPON\",\r\n                        data: data\r\n                    })\r\n                    dispatch({\r\n                        type: \"SHOW_ALERT\",\r\n                        message: \"Edit coupon success\",\r\n                        typeMessage: \"success\",\r\n                    })\r\n                    dispatch({\r\n                        type: \"CHANGE_ADD_COUPON_STATUS\"\r\n                    })\r\n                    dispatch({\r\n                        type: \"RESET_EDIT_COUPON_STATUS\"\r\n                    })\r\n                }).catch(err => {\r\n                    dispatch({\r\n                        type: \"SHOW_ALERT\",\r\n                        message: \"Edit coupon faile\",\r\n                        typeMessage: \"warning\",\r\n                    })\r\n                })\r\n            }\r\n        } else {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: \"The end date must be greater than the start date\",\r\n                typeMessage: \"warning\",\r\n            })\r\n        }\r\n    }\r\n\r\n    const hanhleCancel = () => {\r\n        dispatch({\r\n            type: \"CHANGE_ADD_COUPON_STATUS\"\r\n        })\r\n        dispatch({\r\n            type: \"RESET_EDIT_COUPON_STATUS\"\r\n        })\r\n    }\r\n\r\n    const makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    const limitText = (limitField, limitNum) => {\r\n        if (limitField.target.value.length > limitNum) {\r\n            limitField.target.value = limitField.target.value.substring(0, limitNum);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className=\"modal-add-shift\" style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n            <Card>\r\n                <CardHeader style={{ color: !statusDarkmode ? '#0091ea' : 'white', backgroundColor: !statusDarkmode ? '#efeeef' : '#455a64' }} title=\"Create coupon\" />\r\n                <Divider />\r\n                <CardContent>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item md={12} xs={12}>\r\n                            <TextField\r\n                                id=\"outlined-basic\"\r\n                                variant=\"outlined\"\r\n                                fullWidth\r\n                                onKeyDown={(e) => limitText(e, 30)}\r\n                                onKeyUp={(e) => limitText(e, 30)}\r\n                                id=\"outlined-error-helper-text\"\r\n                                onBlur={(e) => blurDiscription(e)}\r\n                                label=\"Coupon description\"\r\n                                defaultValue={description}\r\n                                error={isDescription}\r\n                                helperText={isDescription ? \"Enter something\" : \"\"}\r\n                                required\r\n                                type=\"text\"\r\n                                name=\"disciption\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <TextField\r\n                                required\r\n                                fullWidth\r\n                                onBlur={(e) => blurDiscount(e)}\r\n                                label=\"Discount\"\r\n                                defaultValue={percent}\r\n                                onKeyDown={(e) => limitText(e, 10)}\r\n                                onKeyUp={(e) => limitText(e, 10)}\r\n                                error={isPercent}\r\n                                helperText={isPercent ? \"Enter greater than 0 and less than 100\" : \"\"}\r\n                                type=\"number\"\r\n                                id=\"outlined-error-helper-text\"\r\n                                name=\"discount (%)\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <TextField\r\n                                required\r\n                                fullWidth\r\n                                onBlur={(e) => blurQuantity(e)}\r\n                                label=\"Quantity\"\r\n                                defaultValue={quantity}\r\n                                onKeyDown={(e) => limitText(e, 10)}\r\n                                onKeyUp={(e) => limitText(e, 10)}\r\n                                error={isQuantity}\r\n                                helperText={isQuantity ? \"Enter greater than 0\" : \"\"}\r\n                                type=\"number\"\r\n                                id=\"outlined-error-helper-text\"\r\n                                name=\"quantity\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <TextField\r\n                                required\r\n                                fullWidth\r\n                                onBlur={(e) => blurMinTotal(e)}\r\n                                label=\"Minimum Total Amount\"\r\n                                defaultValue={minTotal}\r\n                                onKeyDown={(e) => limitText(e, 30)}\r\n                                onKeyUp={(e) => limitText(e, 30)}\r\n                                error={isMinTotal}\r\n                                helperText={isMinTotal ? \"Enter greater than 100.000\" : \"\"}\r\n                                type=\"number\"\r\n                                id=\"outlined-error-helper-text\"\r\n                                name=\"mintotal\"\r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item md={12} xs={12}>\r\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                <Stack spacing={3}>\r\n                                    <DesktopDatePicker\r\n                                        label=\"From\"\r\n                                        value={timeFrom}\r\n                                        minDate={new Date('2017-01-01')}\r\n                                        onChange={(newValue) => changeTimeFrom(newValue)}\r\n                                        renderInput={(params) => <TextField {...params} />}\r\n                                    />\r\n                                    <DesktopDatePicker\r\n                                        label=\"To\"\r\n                                        value={timeEnd}\r\n                                        minDate={new Date('2017-01-01')}\r\n                                        onChange={(newValue) => changetimeEnd(newValue)}\r\n                                        renderInput={(params) => <TextField {...params} />}\r\n                                    />\r\n                                </Stack>\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n                <Divider />\r\n                <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                    {statusEditCoupon ? (\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => editCoupon()} variant=\"contained\" startIcon={<BiEdit />}>\r\n                            Save\r\n                        </Button>) : (\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => addCoupon()} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                            Add\r\n                        </Button>\r\n                    )}\r\n                    <Button style={{ backgroundColor: 'red' }} onClick={(e) => hanhleCancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                        Cancel\r\n                    </Button>\r\n                </Box>\r\n            </Card>\r\n        </form >\r\n    );\r\n}\r\n\r\nexport default ModalAddCoupon;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\ProfileCoupon.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\Regulation.js",["1122","1123","1124","1125","1126","1127"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, Button, CardContent } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport Stack from '@mui/material/Stack';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport TimePicker from '@mui/lab/TimePicker';\r\nimport axios from 'axios'\r\n\r\nclass Regulation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isSaveRegulations: false,\r\n        }\r\n        this.loadInitialData();\r\n    }\r\n\r\n    blurAnything = (e) => {\r\n        this.setState({\r\n            isSaveRegulations: true,\r\n        })\r\n    }\r\n\r\n    checkConstraint(data) {\r\n        if(data.regulation.exchangeRate <= 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Exchange rate must be greater than 0\",\"warning\");    \r\n            return false;\r\n        }\r\n        else if(data.regulation.miniumEmployeeAge <= 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Minium old of employee must be greater than 0\",\"warning\"); \r\n            return false;\r\n        }\r\n        else if(data.regulation.lessChangeTimeKeepingDay <= 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Day before absent must be greater than 0\",\"warning\"); \r\n            return false;\r\n        }\r\n        else if(data.regulation.minExpiredProduct <= 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"The different of expired day and import day must be greater than 0\",\"warning\"); \r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    currency = '';\r\n    exchangeRate = 0;\r\n    miniumEmployeeAge = 0;\r\n    lessChangeTimeKeepingDay = 0;\r\n    minExpiredProduct = 0;\r\n\r\n    loadInitialData()\r\n    {\r\n        if(this.props.regulation != {})\r\n        {\r\n            this.currency = this.props.regulation.currency;\r\n            this.exchangeRate = this.props.regulation.exchangeRate;\r\n            this.miniumEmployeeAge = this.props.regulation.miniumEmployeeAge;\r\n            this.lessChangeTimeKeepingDay = this.props.regulation.lessChangeTimeKeepingDay;\r\n            this.minExpiredProduct = this.props.regulation.minExpiredProduct;\r\n        }\r\n    }   \r\n\r\n    SaveRegulations = async () => {\r\n        const data = {\r\n            email: this.props.infoUser.email,\r\n            token: localStorage.getItem('token'),\r\n            regulation : {\r\n                _id: this.props.infoUser.email,\r\n                currency: document.querySelector('select[name=\"currency\"]').value,\r\n                exchangeRate: document.querySelector('input[name=\"exchangeRate\"]').value,\r\n                miniumEmployeeAge: document.querySelector('input[name=\"miniumEmployeeAge\"]').value, \r\n                lessChangeTimeKeepingDay: document.querySelector('input[name=\"lessChangeTimeKeepingDay\"]').value,\r\n                minExpiredProduct: document.querySelector('input[name=\"minExpiredProduct\"]').value,\r\n            },\r\n        }\r\n        console.log(\"Thông tin quy định\", data);\r\n        if(this.checkConstraint(data)== false) return;\r\n        await axios.post(`http://localhost:5000/api/profile/regulation`, data)\r\n        .then(res => {\r\n            console.log(\"Add thành công\");\r\n            this.props.showAlert(\"Change regulation OK\", \"success\");\r\n        })\r\n        .catch(err => {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n        });\r\n\r\n        // Thêm vào redux:\r\n        this.props.updateRegulation(data.regulation);\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Regulation\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={3}>\r\n                            <Grid item md={6} xs={12}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"Currency\"\r\n                                    name=\"currency\"\r\n                                    onBlur={(e) => this.blurAnything(e)}\r\n                                    required\r\n                                    defaultValue={this.currency}\r\n                                    variant=\"outlined\"\r\n                                    select\r\n                                    SelectProps={{ native: true }}\r\n                                >\r\n                                    <option value=\"vnd\">\r\n                                        VNĐ\r\n                                    </option>\r\n                                    <option value=\"dollar\">\r\n                                        $\r\n                                    </option>\r\n                                </TextField>\r\n                            </Grid>\r\n                            <Grid item md={6} xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    label=\"Exchange rate ($ to VNĐ)\"\r\n                                    defaultValue={this.exchangeRate}\r\n                                    name=\"exchangeRate\"\r\n                                    onBlur={(e) => this.blurAnything(e)}\r\n                                    variant=\"outlined\"\r\n                                    type=\"number\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={6} xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    label=\"Minium day before timekeeping change\"\r\n                                    defaultValue={this.lessChangeTimeKeepingDay}\r\n                                    name=\"lessChangeTimeKeepingDay\"\r\n                                    variant=\"outlined\"\r\n                                    onBlur={(e) => this.blurAnything(e)}\r\n                                    type=\"number\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={6} xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    label=\"Employee Minium Age\"\r\n                                    defaultValue={this.miniumEmployeeAge}\r\n                                    name=\"miniumEmployeeAge\"\r\n                                    variant=\"outlined\"\r\n                                    onBlur={(e) => this.blurAnything(e)}\r\n                                    type=\"number\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={6} xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    label=\"Min expired product days\"\r\n                                    defaultValue={this.minExpiredProduct}\r\n                                    name=\"minExpiredProduct\"\r\n                                    variant=\"outlined\"\r\n                                    onBlur={(e) => this.blurAnything(e)}\r\n                                    type=\"number\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', p: 2 }}>\r\n                        <Button onClick={() => this.SaveRegulations()} disabled={!this.state.isSaveRegulations} color=\"primary\" variant=\"contained\">Save</Button>\r\n                    </Box>\r\n                </Card>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        infoUser: state.infoUser,\r\n        statusDarkmode: state.statusDarkmode,\r\n        regulation : state.regulationReducer,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        setRegulation: (data) => {\r\n            dispatch({\r\n                type: \"SET_REGULATION\",\r\n                data: data,\r\n            });\r\n        },\r\n        updateRegulation: (data) => {\r\n            dispatch({\r\n                type: \"UPDATE_REGULATION\",\r\n                data: data,\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Regulation);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\ModalAdd.js",["1128","1129","1130","1131"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport TimePicker from '@mui/lab/TimePicker';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nclass ModalAdd extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        if (this.props.editShiftStatus) {\r\n            var _timeFrom = new Date();\r\n            if (this.props.objectEditShift.from.includes(\"PM\")) {\r\n                var fromHour =  parseInt(this.props.objectEditShift.from.slice(0, this.props.objectEditShift.from.indexOf(':')));\r\n                var fromMin = parseInt(this.props.objectEditShift.from.slice(this.props.objectEditShift.from.indexOf(':') + 1));\r\n                _timeFrom.setHours(fromHour + 12, fromMin);\r\n            } else {\r\n                var fromHour =  parseInt(this.props.objectEditShift.from.slice(0, this.props.objectEditShift.from.indexOf(':')));\r\n                var fromMin = parseInt(this.props.objectEditShift.from.slice(this.props.objectEditShift.from.indexOf(':') + 1));\r\n                _timeFrom.setHours(fromHour , fromMin);\r\n            }\r\n           \r\n            var _timeTo = new Date();\r\n            if (this.props.objectEditShift.to.includes(\"PM\")) {\r\n                var toHour = parseInt(this.props.objectEditShift.to.slice(0, this.props.objectEditShift.to.indexOf(':')));\r\n                var toMin = parseInt(this.props.objectEditShift.to.slice(this.props.objectEditShift.to.indexOf(':') + 1));\r\n                _timeTo.setHours(toHour + 12, toMin);\r\n            } else {\r\n                var toHour = parseInt(this.props.objectEditShift.to.slice(0, this.props.objectEditShift.to.indexOf(':')));\r\n                var toMin = parseInt(this.props.objectEditShift.to.slice(this.props.objectEditShift.to.indexOf(':') + 1));\r\n                _timeTo.setHours(toHour, toMin);\r\n            }\r\n            \r\n        }\r\n\r\n        this.state = {\r\n            timeFrom: this.props.editShiftStatus ? _timeFrom : new Date(2018, 5, 35, 0, 0, 0),\r\n            timeTo: this.props.editShiftStatus ? _timeTo : new Date(2018, 5, 35, 0, 0, 0),\r\n            isSalary: false,\r\n            isDescription: false,\r\n            isTimeTo: false,\r\n            valueTime: this.props.editShiftStatus ? 1 : null,\r\n        }\r\n    }\r\n\r\n    descriptionShift = this.props.editShiftStatus ? this.props.objectEditShift.description : \"Ex : abc\"\r\n    timeFrom = this.props.editShiftStatus ? this.props.objectEditShift.from : \"00:00 AM\"\r\n    timeTo = this.props.editShiftStatus ? this.props.objectEditShift.to : \"00:00 AM\"\r\n    salary = this.props.editShiftStatus ? this.props.objectEditShift.salary : 10000\r\n\r\n    // Handle user\r\n    hanhleCancel = (e) => {\r\n        this.props.changeAddStatus();\r\n        if (this.props.editShiftStatus) {\r\n            this.props.changeEditShiftStatus();\r\n        }\r\n    }\r\n\r\n    changeTimeFrom = (e) => {\r\n        var hourse = e.getHours()\r\n        const minutes = e.getMinutes()\r\n        if (hourse >= 12) {\r\n            hourse = hourse - 12;\r\n            this.timeFrom = hourse.toString() + \":\" + minutes.toString() + \" PM\"\r\n        } else {\r\n            this.timeFrom = hourse.toString() + \":\" + minutes.toString() + \" AM\"\r\n        }\r\n        this.setState({\r\n            timeFrom: e,\r\n        })\r\n    }\r\n\r\n    changeTimeTo = (e) => {\r\n        var hourse = e.getHours()\r\n        const minutes = e.getMinutes()\r\n        if (hourse >= 12) {\r\n            hourse = hourse - 12;\r\n            this.timeTo = hourse.toString() + \":\" + minutes.toString() + \" PM\"\r\n        } else {\r\n            this.timeTo = hourse.toString() + \":\" + minutes.toString() + \" AM\"\r\n        }\r\n        this.setState({\r\n            timeTo: e,\r\n        })\r\n    }\r\n\r\n    blurDiscription = (e) => {\r\n        this.descriptionShift = e.target.value;\r\n        if (e.target.value === \"\") {\r\n            this.setState({\r\n                isDescription: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isDescription: false,\r\n            })\r\n        }\r\n    }\r\n\r\n\r\n    // Tạo code để xác nhận\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    editShift = async () => {\r\n        if (this.state.timeTo - this.state.timeFrom < 1) {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('The time end must be greater than the time start', 'error')\r\n        }\r\n        if (!this.state.isSalary && !this.state.isDescription && (this.state.timeTo - this.state.timeFrom > 0)) {\r\n            var data = {\r\n                token: localStorage.getItem('token'),\r\n                idUser: this.props.infoUser.email,\r\n                id: this.props.objectEditShift.id,\r\n                salary: this.salary,\r\n                description: this.descriptionShift,\r\n                from: this.timeFrom,\r\n                to: this.timeTo,\r\n            }\r\n            await axios.post(`http://localhost:5000/api/profile/update-shift`, data)\r\n                .then(res => {\r\n                    if (res.data.token) {\r\n                        localStorage.setItem('token', res.data.token);\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(\"Edit shift success\", \"success\");\r\n                        this.props.updateShift(data);\r\n                    }\r\n                    this.props.changeEditShiftStatus();\r\n                    this.props.changeAddStatus();\r\n                })\r\n                .catch(err => {\r\n                    this.props.changeLoginStatus();\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n                })\r\n\r\n        }\r\n    }\r\n\r\n    blurSalary = (e) => {\r\n        if (e.target.value <= -1) {\r\n            this.setState({\r\n                isSalary: true,\r\n            })\r\n        } else {\r\n            this.setState({\r\n                isSalary: false,\r\n            })\r\n        }\r\n        this.salary = e.target.value;\r\n    }\r\n\r\n    // Call API\r\n    addShift = () => {\r\n        if (this.state.timeTo - this.state.timeFrom < 1) {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('The time end must be greater than the time start', 'error')\r\n        }\r\n        if (!this.state.isSalary && !this.state.isDescription && (this.state.timeTo - this.state.timeFrom > 0)) {\r\n            const code = this.makeCode(6);\r\n            const data = {\r\n                idUser: this.props.infoUser.email,\r\n                id: code,\r\n                salary: this.salary,\r\n                description: this.descriptionShift,\r\n                from: this.timeFrom,\r\n                to: this.timeTo,\r\n            }\r\n            const data1 = {\r\n                name: this.descriptionShift,\r\n                salary: this.salary,\r\n                timeFrom: this.timeFrom,\r\n                timeEnd: this.timeTo,\r\n                _id: { shiftID: code }\r\n            }\r\n            if (data) {\r\n                axios.post(`http://localhost:5000/api/profile/add-shift`, {\r\n                    email: this.props.infoUser.email,\r\n                    token: localStorage.getItem('token'),\r\n                    data: data,\r\n                })\r\n                    .then(res => {\r\n                        if (res.data.token) {\r\n                            this.props.addShift(data1);\r\n                            localStorage.setItem('token', res.data.token);\r\n                            this.props.hideAlert();\r\n                            this.props.showAlert(\"Add shift success\", \"success\");\r\n                        }\r\n                        this.props.changeAddStatus();\r\n                    })\r\n                    .catch(err => {\r\n                        this.props.changeLoginStatus();\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n    limitText = (limitField, limitNum) => {\r\n        if (limitField.target.value.length > limitNum) {\r\n            limitField.target.value = limitField.target.value.substring(0, limitNum);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form className=\"modal-add-shift\" style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Create shift\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={12} xs={12}>\r\n                                <TextField\r\n                                    id=\"outlined-basic\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    onKeyDown={(e) => this.limitText(e, 30)}\r\n                                    onKeyUp={(e) => this.limitText(e, 30)}\r\n                                    defaultValue={(this.props.editShiftStatus ? this.props.objectEditShift.description : this.descriptionShift)}\r\n                                    onBlur={(e) => this.blurDiscription(e)}\r\n                                    label=\"Shift description\"\r\n                                    error={this.state.isDescription}\r\n                                    helperText={this.state.isDescription ? \"Enter something\" : \"\"}\r\n                                    required\r\n                                    type=\"text\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <TextField\r\n                                    required\r\n                                    fullWidth\r\n                                    onBlur={(e) => this.blurSalary(e)}\r\n                                    label=\"Salary (VNĐ)\"\r\n                                    defaultValue={this.props.editShiftStatus ? this.props.objectEditShift.salary : this.salary}\r\n                                    error={this.state.isSalary}\r\n                                    helperText={this.state.isSalary ? \"Greater than 0\" : \"\"}\r\n                                    type=\"number\"\r\n                                    onKeyDown={(e) => this.limitText(e, 30)}\r\n                                    onKeyUp={(e) => this.limitText(e, 30)}\r\n                                    id=\"outlined-error-helper-text\"\r\n                                    name=\"salary\"\r\n                                    variant=\"outlined\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                    <Stack spacing={3}>\r\n                                        <TimePicker\r\n                                            label=\"From\"\r\n                                            value={this.state.timeFrom}\r\n                                            onChange={(newValue) => this.changeTimeFrom(newValue)}\r\n                                            renderInput={(params) => <TextField {...params} />}\r\n                                        />\r\n                                        <TimePicker\r\n                                            label=\"To\"\r\n                                            value={this.state.timeTo}\r\n                                            onChange={(newValue) => this.changeTimeTo(newValue)}\r\n                                            renderInput={(params) => <TextField {...params} />}\r\n                                        />\r\n                                    </Stack>\r\n                                </LocalizationProvider>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        {this.props.editShiftStatus ? (\r\n                            <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.editShift()} variant=\"contained\" startIcon={<BiEdit />}>\r\n                                Save\r\n                            </Button>) : (\r\n                            <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.addShift()} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                                Add\r\n                            </Button>\r\n                        )}\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.hanhleCancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Cancel\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addStatus: state.addStatus,\r\n        infoUser: state.infoUser,\r\n        editShiftStatus: state.editShiftStatus,\r\n        objectEditShift: state.objectEditShift,\r\n        statusDarkmode: state.statusDarkmode\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_STATUS\",\r\n            });\r\n        },\r\n        addShift: (data) => {\r\n            dispatch({\r\n                type: \"ADD_SHIFT\",\r\n                newShift: data,\r\n            })\r\n        },\r\n        changeEditShiftStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_SHIFT_STATUS\",\r\n            })\r\n        },\r\n        updateShift: (data) => {\r\n            dispatch({\r\n                type: \"OBJECT_UPDATE_SHIFT\",\r\n                data: data,\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalAdd);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\ProfileSetting.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\ListShift.js",["1132","1133","1134","1135","1136","1137"],"import React, { Component } from 'react';\r\nimport { Modal ,Grid,Card, CardHeader, Divider, TableHead, TableRow, Paper, Box, Button, CardContent, Table, TableBody, TableCell, TableContainer } from '@mui/material';\r\nimport { BiPlusMedical } from 'react-icons/bi';\r\nimport { IconButton } from '@mui/material'\r\nimport { styled } from '@mui/material/styles';\r\nimport { FiEdit, FiTrash2 } from 'react-icons/fi'\r\nimport { tableCellClasses } from '@mui/material/TableCell';\r\nimport { connect } from 'react-redux'\r\nimport axios from 'axios';\r\nimport { red, blue, lightBlue } from '@mui/material/colors';\r\nimport { CgDanger } from 'react-icons/cg'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport {TiArrowBack} from 'react-icons/ti'\r\n\r\n\r\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\r\n    [`&.${tableCellClasses.head}`]: {\r\n        backgroundColor: theme.palette.common.black,\r\n        color: theme.palette.common.white,\r\n    },\r\n    [`&.${tableCellClasses.body}`]: {\r\n        fontSize: 14,\r\n    },\r\n}));\r\n\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n    '&:nth-of-type(odd)': {\r\n        backgroundColor: theme.palette.action.hover,\r\n    },\r\n    // hide last border\r\n    '&:last-child td, &:last-child th': {\r\n        border: 0,\r\n    },\r\n}));\r\n\r\nconst style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 400,\r\n    bgcolor: 'background.paper',\r\n    border: '1px solid #000',\r\n    borderRadius: '5px',\r\n    boxShadow: 24,\r\n    pt: 2,\r\n    px: 4,\r\n    pb: 3,\r\n};\r\n\r\n\r\nclass ListShift extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            open: false,\r\n        }\r\n    }\r\n\r\n    deleteShiftId = ''\r\n\r\n    handleEdit = (e, id, description, from, to, salary) => {\r\n        const data = {\r\n            description: description,\r\n            from: from,\r\n            id: id,\r\n            to: to,\r\n            salary: salary,\r\n        }\r\n        if (id) {\r\n            this.props.objectEditShift(data)\r\n            this.props.changeEditShiftStatus();\r\n            this.props.changeAddStatus();\r\n        }\r\n    }\r\n\r\n    showModal = (id) => {\r\n        this.setState({\r\n            open: true\r\n        })\r\n        this.deleteShiftId = id;\r\n    }\r\n\r\n    handleAdd = () => {\r\n        this.props.changeAddStatus();\r\n    }\r\n\r\n    handleDelete = (idShift) => {\r\n        if (idShift) {\r\n            axios.post(`http://localhost:5000/api/profile/delete-shift`, {\r\n                token: localStorage.getItem('token'),\r\n                email: this.props.infoUser.email,\r\n                idShift: idShift\r\n            })\r\n                .then(res => {\r\n                    if (res.data.token) {\r\n                        localStorage.setItem('token', res.data.token);\r\n                        this.props.deleteShift(idShift);\r\n                        this.props.hideAlert();\r\n                        this.props.showAlert(\"Delete shift success\", \"success\");\r\n                        this.setState({\r\n                            open: false \r\n                        })\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    this.setState({\r\n                        open: false \r\n                    })\r\n                    this.props.changeLoginStatus();\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px' }}>\r\n                <Card style={{ position: \"relative\", marginTop: '15px' }}>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode ? '#0091ea' : 'white', backgroundColor: !this.props.statusDarkmode ? '#efeeef' : '#455a64' }} title=\"List Shift\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <TableContainer id=\"choses-product\" component={Paper}>\r\n                            <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\r\n                                <TableHead>\r\n                                    <TableRow>\r\n                                        <StyledTableCell>Description</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Salary</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">From</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">To</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Edit</StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">Delete</StyledTableCell>\r\n                                    </TableRow>\r\n                                </TableHead>\r\n                                {this.props.listShift.map(item => {\r\n                                    return (\r\n                                        <TableBody>\r\n                                            <StyledTableRow key=\"abc\">\r\n                                                <StyledTableCell component=\"th\" scope=\"row\">{item.name}</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    {this.props.regulation == {} ? (item.salary).toLocaleString() : this.props.regulation.currency === 'vnd' ? (item.salary).toLocaleString() : ((item.salary) / this.props.regulation.exchangeRate).toFixed(2).toLocaleString()}\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">{item.timeFrom}</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">{item.timeEnd}</StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    <IconButton name={item._id.shiftID} onClick={(e) => this.handleEdit(e, item._id.shiftID, item.name, item.timeFrom, item.timeEnd, item.salary)} color=\"secondary\" aria-label=\"fingerprint\">\r\n                                                        <FiEdit />\r\n                                                    </IconButton>\r\n                                                </StyledTableCell>\r\n                                                <StyledTableCell align=\"center\">\r\n                                                    <IconButton name={item._id.shiftID} onClick={(e) => this.showModal(item._id.shiftID)} style={{ color: 'red' }} aria-label=\"fingerprint\">\r\n                                                        <FiTrash2 />\r\n                                                    </IconButton>\r\n                                                </StyledTableCell>\r\n                                            </StyledTableRow>\r\n                                        </TableBody>\r\n                                    )\r\n                                })}\r\n                            </Table>\r\n                        </TableContainer>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box className=\"add-shift\" sx={{ display: 'flex', justifyContent: 'flex-end', p: 2 }}>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleAdd()} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                            add\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n                <Modal\r\n                    open={this.state.open}\r\n                    onClose={() => this.setState({open: false})}\r\n                    aria-labelledby=\"parent-modal-title\"\r\n                    aria-describedby=\"parent-modal-description\"\r\n                >\r\n                    <Box sx={{ ...style, width: 400 }}>\r\n                        <h2 style={{ textAlign: 'center', fontSize: '1.4rem', marginBottom: '15px' }} >Are you sure delete this shift ?</h2>\r\n                        <Divider />\r\n                        <Grid style={{ marginTop: '5px' }} container spacing={2}>\r\n                            <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\r\n                                <Button onClick={(e) => this.handleDelete(this.deleteShiftId)} style={{ color: 'white', backgroundColor: red[500] }}>DELETE</Button>\r\n                            </Grid>\r\n                            <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\r\n                                <Button onClick={() => this.setState({open: false})} style={{ backgroundColor: lightBlue[100] }}>CANCEL</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addStatus: state.addStatus,\r\n        listShift: state.listShift,\r\n        infoUser: state.infoUser,\r\n        statusDarkmode: state.statusDarkmode,\r\n        regulation: state.regulationReducer\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_STATUS\",\r\n            });\r\n        },\r\n        deleteShift: (idShift) => {\r\n            dispatch({\r\n                type: \"DELETE_SHIFT\",\r\n                idShift: idShift,\r\n            })\r\n        },\r\n        changeEditShiftStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_SHIFT_STATUS\",\r\n            })\r\n        },\r\n        objectEditShift: (data) => {\r\n            dispatch({\r\n                type: \"OBJECT_EDIT_SHIFT\",\r\n                data: data\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListShift);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\ChangePassword.js",["1138","1139","1140"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, Button, CardContent } from '@mui/material';\r\nimport axios from 'axios';\r\nimport {connect} from 'react-redux'\r\nimport { FaCommentsDollar } from 'react-icons/fa';\r\nvar bcrypt = require('bcryptjs');\r\n\r\nclass ChangePassword extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isCurPass: false,\r\n            isNewPass: false,\r\n            isRePass: false,\r\n            isChangePass: false,\r\n        }\r\n    }\r\n\r\n    messCurPass = \"\"\r\n    messNewPass = \"\"\r\n    messRePass = \"\"\r\n    curPass = \"\"\r\n    newPass = \"\"\r\n    rePass = \"\"\r\n\r\n    // Gọi api change password\r\n    changePassword = async () => {\r\n        if(this.props.role == false){ \r\n            if(this.curPass != this.props.infoUser.password)\r\n            {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Not a correct pass\", \"error\");\r\n                return;\r\n            }\r\n            const data = {\r\n                token: localStorage.getItem('token'),\r\n                employee: {\r\n                    _id: {\r\n                        employeeID: this.props.infoUser.employeeID,\r\n                        storeID: this.props.infoUser.managerID,\r\n                    },\r\n                    managerID: this.props.infoUser.managerID,\r\n                    password: this.newPass,\r\n                    firstName: this.props.infoUser.firstName,\r\n                    lastName: this.props.infoUser.lastName,\r\n                    phoneNumber: this.props.infoUser.tel,\r\n                    email: this.props.infoUser.email,\r\n                    address: this.props.infoUser.address,\r\n                    cardID: this.props.infoUser.cardID,\r\n                }   \r\n            }\r\n            axios.put(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Change password success\", \"success\");\r\n                this.props.setEmployeePass(this.newPass);\r\n            })\r\n            .catch(err => {\r\n            })\r\n        }\r\n        else {\r\n            const form = document.getElementById('form-change-password');\r\n            const data = {\r\n                token: localStorage.getItem('token'),\r\n                email: this.props.infoUser.email,\r\n                curPass: this.curPass,\r\n                newPass: this.hash(this.newPass),\r\n            }\r\n            await axios.post(`http://localhost:5000/api/profile/change-password`,data)\r\n            .then(res => {\r\n                if (res.data.status === -1) {\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(res.data.message, \"error\");\r\n                } else {\r\n                    form.reset();\r\n                    localStorage.setItem('token', res.data.token);\r\n                    this.props.hideAlert();\r\n                    this.props.showAlert(\"Change password success\", \"success\");\r\n                }\r\n            })\r\n            .catch(err => {\r\n                this.props.changeLoginStatus();\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n            })\r\n        }\r\n        \r\n    }\r\n\r\n    // hash\r\n    hash = (pass) => {\r\n        var hash = bcrypt.hashSync(pass, 12)\r\n        return hash;\r\n    }\r\n\r\n    // Handele : blur, change\r\n    blurCurPassword = (e) => {\r\n        this.curPass= e.target.value;\r\n        if (e.target.value === \"\") {\r\n            this.setState({\r\n                isCurPass: false,\r\n                isChangePass: false,\r\n            })\r\n            return;\r\n        } else if (e.target.value.length < 6) {\r\n            this.messCurPass = \"Enter at least 6 characters\";\r\n            this.setState({\r\n                isCurPass: true,\r\n                isChangePass: false,\r\n            })\r\n        } else {\r\n            this.messCurPass = \"\";\r\n            this.setState({\r\n                isCurPass: false,\r\n            })\r\n            if(this.newPass.length>5 && this.newPass === this.rePass){\r\n                this.setState({\r\n                    isChangePass: true,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    blurNewPassword = (e) => {\r\n        this.blurRePassword(e);\r\n        this.newPass = e.target.value;\r\n        if (e.target.value === \"\") {\r\n            this.setState({\r\n                isNewPass: false,\r\n                isChangePass: false,\r\n            })\r\n            return;\r\n        } else if (e.target.value.length < 6) {\r\n            this.messNewPass = \"Enter at least 6 characters\";\r\n            this.setState({\r\n                isNewPass: true,\r\n            })\r\n        } else {\r\n            this.messCurPass = \"\";\r\n            this.setState({\r\n                isNewPass: false,\r\n            })\r\n            this.blurRePassword(e);\r\n            if (this.rePass === this.newPass && this.curPass.length > 5){\r\n                this.setState({\r\n                    isChangePass: true,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    blurRePassword = (e) => {\r\n        this.rePass = document.querySelector('input[name=\"re-password\"]').value\r\n        if (this.rePass !== this.newPass) {\r\n            this.messRePass = \"Re-password not correct\";\r\n            this.setState({\r\n                isRePass: true,\r\n                isChangePass: false,\r\n            })\r\n        } else {\r\n            this.messRePass = \"\";\r\n            this.setState({\r\n                isRePass: false,\r\n            })\r\n            if (this.rePass === this.newPass && this.curPass.length > 5){\r\n                this.setState({\r\n                    isChangePass: true,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    limitText = (limitField, limitNum) => {\r\n        if (limitField.target.value.length > limitNum) {\r\n            limitField.target.value = limitField.target.value.substring(0, limitNum);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form id=\"form-change-password\" style={{marginBottom: '15px', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Change Password\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={12} xs={12}>\r\n                                <TextField\r\n                                    variant=\"standard\"\r\n                                    fullWidth\r\n                                    name=\"cur-password\"\r\n                                    label=\"Current password\"\r\n                                    onKeyDown={(e) => this.limitText(e, 30)}\r\n                                    onKeyUp={(e) => this.limitText(e, 30)}\r\n                                    onBlur={(e) => this.blurCurPassword(e)}\r\n                                    error={this.state.isCurPass}\r\n                                    helperText={this.messCurPass}\r\n                                    type=\"password\"\r\n                                    required\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"New password\"\r\n                                    name=\"new-password\"\r\n                                    required\r\n                                    onKeyDown={(e) => this.limitText(e, 30)}\r\n                                    onKeyUp={(e) => this.limitText(e, 30)}\r\n                                    onBlur={(e) => this.blurNewPassword(e)}\r\n                                    error={this.state.isNewPass}\r\n                                    helperText={this.messNewPass}\r\n                                    type=\"password\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <TextField\r\n                                    fullWidth\r\n                                    label=\"New password again\"\r\n                                    onBlur={(e) => this.blurRePassword(e)}\r\n                                    error={this.state.isRePass}\r\n                                    helperText={this.messRePass}\r\n                                    onKeyDown={(e) => this.limitText(e, 30)}\r\n                                    onKeyUp={(e) => this.limitText(e, 30)}\r\n                                    name=\"re-password\"\r\n                                    required\r\n                                    type=\"password\"\r\n                                    variant=\"standard\"\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', p: 2 }}>\r\n                        <Button color=\"primary\" disabled={!this.state.isChangePass} onClick={() => this.changePassword()} variant=\"contained\">Change</Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        infoUser: state.infoUser,\r\n        statusDarkmode: state.statusDarkmode,\r\n        role: state.role,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            });\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        setEmployeePass: (password) => {\r\n            dispatch({\r\n                type: \"SET_EMPLOYEE_PASS\",\r\n                password: password\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangePassword);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\ProfileDetail.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\ProfileHeader.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\RecieptManager\\SearchReceipt.js",["1141","1142","1143"],"import React, { useState } from 'react';\r\nimport { BiSearchAlt } from 'react-icons/bi'\r\nimport { useDispatch , useSelector } from 'react-redux'\r\n\r\nfunction SearchReceipt(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    React.useEffect(() => {\r\n        dispatch({\r\n            type: \"RESET_SEARCH\",\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"search-customize\" style={{ borderRadius: '6px', backgroundColor: 'white', justifyContent: 'center', display: 'flex', marginBottom: '10px', padding: '10px' }}>\r\n            <BiSearchAlt style={{ fontSize: '1.6rem', marginRight: '10px', marginLeft: '10px' }}></BiSearchAlt>\r\n            <input onChange={(e) => {dispatch({type:\"CHANGE_SEARCH\", object: e.target.value })}} type=\"text\" style={{ width: '100%', outline: 'none', border: 'none' }} placeholder=\"Enter id receipt\"></input>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchReceipt;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\RecieptManager\\ControlReciept.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\RecieptManager\\DateReciept.js",["1144"],"import React from 'react';\r\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\n\r\n\r\nfunction DataReciept(props) {\r\n    const dispatch = useDispatch()\r\n    const typeByDate = useSelector(state => state.typeByDate)\r\n    const [value, setValue] = React.useState(new Date());\r\n    const [value1, setValue1] = React.useState('all');\r\n    const darkmode = useSelector(state => state.statusDarkmode)\r\n\r\n    const selectDate = () => {\r\n        const data = {\r\n            type: \"typeByDate\",\r\n            day: value.getDate(),\r\n            month: value.getMonth() + 1,\r\n            year: value.getFullYear(),\r\n        }\r\n        dispatch({\r\n            type: \"TYPE_BY_DATE\",\r\n            typeByDate: data,\r\n        })\r\n    }\r\n\r\n    const changeTime = (newValue) => {\r\n        if (newValue) {\r\n            setValue(newValue);\r\n        }\r\n        if (typeByDate.type === 'typeByDate') {\r\n            const data = {\r\n                type: \"typeByDate\",\r\n                day: newValue.getDate(),\r\n                month: newValue.getMonth() + 1,\r\n                year: newValue.getFullYear(),\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        }\r\n    }\r\n\r\n    const selectType = () => {\r\n        if (value1 === 'all') {\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: { type: 'all' },\r\n            })\r\n        } else if (value1 === 'yesterday') {\r\n            let yesterday = new Date()\r\n            const data = {\r\n                type: \"yesterday\",\r\n                day: yesterday.getDate() - 1,\r\n                month: yesterday.getMonth() + 1,\r\n                year: yesterday.getFullYear(),\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        } else if (value1 === 'today') {\r\n            let today = new Date()\r\n            const data = {\r\n                type: \"today\",\r\n                day: today.getDate(),\r\n                month: today.getMonth() + 1,\r\n                year: today.getFullYear(),\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        } else if (value1 === 'lastmonth') {\r\n            let today = new Date()\r\n            const data = {\r\n                type: \"lastmonth\",\r\n                month: today.getMonth(),\r\n                year: today.getFullYear(),\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        } else if (value1 === 'lastyear') {\r\n            let today = new Date()\r\n            const data = {\r\n                type: \"lastyear\",\r\n                year: today.getFullYear() - 1,\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        }\r\n    }\r\n\r\n    const changeType = (e) => {\r\n        setValue1(e.target.value)\r\n        if (typeByDate.type === 'all' || typeByDate.type === 'yesterday' || typeByDate.type === 'today' || typeByDate.type === 'lastmonth' || typeByDate.type === 'lastyear') {\r\n            if (e.target.value === 'all') {\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: { type: 'all' },\r\n                })\r\n            }\r\n            if (e.target.value === 'yesterday') {\r\n                let yesterday = new Date()\r\n                let data = {\r\n                    type: \"yesterday\",\r\n                    day: yesterday.getDate() - 1,\r\n                    month: yesterday.getMonth() + 1,\r\n                    year: yesterday.getFullYear(),\r\n                }\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: data,\r\n                })\r\n            }\r\n            if (e.target.value === 'today') {\r\n                let today = new Date()\r\n                const data = {\r\n                    type: \"today\",\r\n                    day: today.getDate(),\r\n                    month: today.getMonth() + 1,\r\n                    year: today.getFullYear(),\r\n                }\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: data,\r\n                })\r\n            }\r\n            if (e.target.value === 'lastmonth') {\r\n                let today = new Date()\r\n                const data = {\r\n                    type: \"lastmonth\",\r\n                    month: today.getMonth(),\r\n                    year: today.getFullYear(),\r\n                }\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: data,\r\n                })\r\n            }\r\n            if (e.target.value === 'lastyear') {\r\n                let today = new Date()\r\n                const data = {\r\n                    type: \"lastyear\",\r\n                    year: today.getFullYear() - 1,\r\n                }\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: data,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        dispatch({\r\n            type: \"TYPE_BY_DATE\",\r\n            typeByDate: { type: 'all' },\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <Grid item md={12} sm={12}  >\r\n                <Card>\r\n                    <CardHeader style={{ color: !darkmode ? '#0091ea' :'white', backgroundColor: !darkmode ? '#efeeef' :'#455a64'}} title=\"Date\" />\r\n                    <Divider></Divider>\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <div className=\"form-check\">\r\n                                        <input onClick={() => selectType()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault2\" defaultChecked />\r\n                                        <FormControl fullWidth>\r\n                                            <InputLabel id=\"demo-simple-select-label\">Group by</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"demo-simple-select-label\"\r\n                                                id=\"demo-simple-select\"\r\n                                                value={value1}\r\n                                                label=\"Option\"\r\n                                                onChange={(e) => changeType(e)}\r\n                                            >\r\n                                                <MenuItem value='all'>All</MenuItem>\r\n                                                <MenuItem value='today'>Today</MenuItem>\r\n                                                <MenuItem value='yesterday'>Yesterday</MenuItem>\r\n                                                <MenuItem value='lastmonth'>Last month</MenuItem>\r\n                                                <MenuItem value='lastyear'>Last year</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <div className=\"form-check\">\r\n                                        <input onClick={() => selectDate()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\" />\r\n                                        <DesktopDatePicker\r\n                                            label=\"Date\"\r\n                                            value={value}\r\n                                            minDate={new Date('2017-01-01')}\r\n                                            onChange={(newValue) => changeTime(newValue)}\r\n                                            renderInput={(params) => <TextField {...params} />}\r\n                                        />\r\n                                    </div>\r\n                                </Grid>\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default DataReciept;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\RecieptManager\\StatusReceiptType.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\RecieptManager\\TableReciept.js",["1145","1146","1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157","1158"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport { Grid, Box, Button, Checkbox, Modal } from '@mui/material';\r\nimport { red, lightBlue } from '@mui/material/colors';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport axios from 'axios';\r\nimport { FiXSquare } from 'react-icons/fi'\r\nimport { TiArrowBack } from 'react-icons/ti'\r\n\r\nfunction Row(props) {\r\n    const { row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const [openModal, setOpenModal] = React.useState(false);\r\n    const statusSelectAll = useSelector(state => state.statusSelectAll)\r\n    const infoUser = useSelector(state => state.infoUser)\r\n    const dispatch = useDispatch();\r\n    const [statusSelectReplace, setStatusSelectReplace] = React.useState(false);\r\n    const regulation = useSelector(state => state.regulationReducer)\r\n\r\n\r\n    const style = {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 400,\r\n        bgcolor: 'background.paper',\r\n        border: '1px solid #000',\r\n        borderRadius: '5px',\r\n        boxShadow: 24,\r\n        pt: 2,\r\n        px: 4,\r\n        pb: 3,\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        setStatusSelectReplace(statusSelectAll)\r\n    }, [statusSelectAll])\r\n\r\n    const countQuantity = () => {\r\n        let count = 0;\r\n        row.listProduct.map(value => {\r\n            count += value.quantity;\r\n        })\r\n        return count;\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    //Xoa mềm\r\n    const DeleteReciept = (MAHD, isDelete) => {\r\n        if (isDelete) {\r\n            setOpenModal(true)\r\n        } else {\r\n            axios.post('http://localhost:5000/api/sell-product/soft-delete', {\r\n                token: localStorage.getItem('token'),\r\n                email: infoUser.email,\r\n                MAHD: MAHD\r\n            })\r\n                .then(res => {\r\n                    if (res.data.status === 1) {\r\n                        localStorage.setItem('token', res.data.token)\r\n                        dispatch({\r\n                            type: \"DELETE_RECIEPT\",\r\n                            MAHD: MAHD,\r\n                        })\r\n                        dispatch({\r\n                            type: \"HIDE_ALERT\",\r\n                        })\r\n                        dispatch({\r\n                            type: \"SHOW_ALERT\",\r\n                            message: 'Delete success',\r\n                            typeMessage: 'success',\r\n                        })\r\n                    }\r\n                })\r\n                .catch(err => {\r\n                    dispatch({\r\n                        type: \"CHANGE_LOGIN_STATUS\",\r\n                    });\r\n                    dispatch({\r\n                        type: \"HIDE_ALERT\",\r\n                    })\r\n                    dispatch({\r\n                        type: \"SHOW_ALERT\",\r\n                        message: 'Login timeout, signin again',\r\n                        typeMessage: 'warning',\r\n                    })\r\n                })\r\n            setOpen(!open)\r\n        }\r\n    }\r\n\r\n    // Xóa vĩnh viễn\r\n    const PermanentlyDelete = async (MAHD) => {\r\n        axios.post('http://localhost:5000/api/sell-product/permanently-delete', {\r\n            token: localStorage.getItem('token'),\r\n            email: infoUser.email,\r\n            MAHD: MAHD\r\n        })\r\n            .then(res => {\r\n                if (res.data.status === 1) {\r\n                    localStorage.setItem('token', res.data.token)\r\n                    dispatch({\r\n                        type: \"DELETE_ONE_RECIEPT\",\r\n                        MAHD: MAHD,\r\n                    })\r\n                    dispatch({\r\n                        type: \"HIDE_ALERT\",\r\n                    })\r\n                    dispatch({\r\n                        type: \"SHOW_ALERT\",\r\n                        message: 'Delete success',\r\n                        typeMessage: 'success',\r\n                    })\r\n                }\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: \"CHANGE_LOGIN_STATUS\",\r\n                });\r\n                dispatch({\r\n                    type: \"HIDE_ALERT\",\r\n                })\r\n                dispatch({\r\n                    type: \"SHOW_ALERT\",\r\n                    message: 'Login timeout, signin again',\r\n                    typeMessage: 'warning',\r\n                })\r\n            })\r\n        setOpenModal(false)\r\n    }\r\n\r\n    const TypeReciept = (isEdit, isDelete, oldBill) => {\r\n        if (isDelete) {\r\n            return red[400]\r\n        } else if (isEdit) {\r\n            return '#f4f492'\r\n        } else if (oldBill) {\r\n            return '#00897b'\r\n        } else {\r\n            return '#a6ffa6'\r\n        }\r\n    }\r\n\r\n    const StatusTypeReciept = (isEdit, isDelete) => {\r\n        if (isDelete) {\r\n            return 'Deleted'\r\n        } else if (isEdit) {\r\n            return 'Exchange'\r\n        } else {\r\n            return 'Success'\r\n        }\r\n    }\r\n\r\n    const RestoneReciept = async (MAHD) => {\r\n        await axios.post('http://localhost:5000/api/sell-product/restone-receipt', {\r\n            token: localStorage.getItem('token'),\r\n            email: infoUser.email,\r\n            MAHD: MAHD\r\n        })\r\n            .then(res => {\r\n                localStorage.setItem('token', res.data.token)\r\n                if (res.data.status === 1) {\r\n                    dispatch({\r\n                        type: 'RESTONE_ONE_RECIEPT',\r\n                        MAHD: MAHD\r\n                    })\r\n                    dispatch({\r\n                        type: \"HIDE_ALERT\",\r\n                    })\r\n                    dispatch({\r\n                        type: \"SHOW_ALERT\",\r\n                        message: 'Restone success',\r\n                        typeMessage: 'success',\r\n                    })\r\n                }\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: \"CHANGE_LOGIN_STATUS\",\r\n                });\r\n                dispatch({\r\n                    type: \"HIDE_ALERT\",\r\n                })\r\n                dispatch({\r\n                    type: \"SHOW_ALERT\",\r\n                    message: 'Login timeout, signin again',\r\n                    typeMessage: 'warning',\r\n                })\r\n            })\r\n        setOpen(false);\r\n    }\r\n\r\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } };\r\n\r\n    const ChangeCheckbox = (e, MAHD) => {\r\n        setStatusSelectReplace(!statusSelectReplace);\r\n        if (e.target.checked) {\r\n            dispatch({\r\n                type: \"ADD_MAHD_RECIEPT\",\r\n                MAHD: MAHD,\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: \"DELETE_MAHD_RECIEPT\",\r\n                MAHD: MAHD,\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow style={{ backgroundColor: TypeReciept(row.isEdit, row.deleted, row.oldBill), borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: '#90a4ae #90a4ae transparent #90a4ae' }} sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n                <TableCell>\r\n                    <Checkbox {...label} checked={statusSelectReplace} onChange={(e) => ChangeCheckbox(e, row.MAHD)} color=\"default\" />\r\n                </TableCell>\r\n                <TableCell>\r\n                    <IconButton\r\n                        aria-label=\"expand row\"\r\n                        size=\"small\"\r\n                        onClick={() => setOpen(!open)}\r\n                    >\r\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                    </IconButton>\r\n                </TableCell>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                    {row.MAHD}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.date}</TableCell>\r\n                <TableCell align=\"right\">\r\n                    {regulation.currency === 'vnd' ? (row.totalMoney).toLocaleString() : ((row.totalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.discount}</TableCell>\r\n                <TableCell align=\"right\">\r\n                    {regulation.currency === 'vnd' ? (row.totalFinalMoney).toLocaleString() : ((row.totalFinalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\r\n                    </TableCell>\r\n            </TableRow>\r\n            <TableRow style={{ borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: 'transparent #90a4ae #90a4ae #90a4ae' }}>\r\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={12}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Box sx={{ margin: 1 }}>\r\n                            <Typography style={{ fontWeight: '600' }} variant=\"h6\" gutterBottom component=\"div\">\r\n                                Detail Recipet\r\n                            </Typography>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item lg={6} md={12} sm={12} xs={12}>\r\n                                    <Table size=\"small\" aria-label=\"purchases\">\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n\r\n                                                <TableCell>#</TableCell>\r\n                                                <TableCell>Name</TableCell>\r\n                                                <TableCell>Quantity</TableCell>\r\n                                                <TableCell align=\"right\">Price</TableCell>\r\n                                                <TableCell align=\"right\">Total Price</TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {row.listProduct.map((value, key) => (\r\n                                                <TableRow key={value.name}>\r\n                                                    <TableCell>\r\n                                                        {key + 1}\r\n                                                    </TableCell>\r\n                                                    <TableCell>{value.product.name}</TableCell>\r\n                                                    <TableCell>{value.quantity}</TableCell>\r\n                                                    <TableCell align=\"right\">{regulation.currency === 'vnd' ? value.product.sellPrice.toLocaleString() : (value.product.sellPrice / regulation.exchangeRate).toFixed(2).toLocaleString()}</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        {regulation.currency === 'vnd' ? (value.quantity * value.product.sellPrice).toLocaleString() : ((value.quantity * value.product.sellPrice) / regulation.exchangeRate).toFixed(2).toLocaleString()}\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            ))}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Grid>\r\n                                <Grid style={{ borderLeft: '1px solid black', marginTop: '15px' }} item lg={6} md={12} sm={12} xs={12}>\r\n                                    <Grid container spacing={3}>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Id Receipt:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.MAHD}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Status:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{StatusTypeReciept(row.isEdit, row.deleted)}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Date:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.date}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Time:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.time}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Old bill:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.oldBill ? row.oldBill.MAHD : \"None\"}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Seller:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.name}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Total quanitty:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{countQuantity()}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Total money:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>\r\n                                                        {regulation.currency === 'vnd' ? row.totalMoney.toLocaleString() : (row.totalMoney / regulation.exchangeRate).toFixed(2).toLocaleString()}\r\n                                                    </p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Id coupon:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.coupon ? row.coupon.idCoupon : \"Not apply\"}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Reduce money:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>\r\n                                                        {regulation.currency === 'vnd' ? (row.totalFinalMoney - row.totalMoney).toLocaleString() : ((row.totalFinalMoney - row.totalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\r\n                                                    </p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Discount (%):</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.discount}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>TOTAL:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>\r\n                                                        {regulation.currency === 'vnd' ? (row.totalFinalMoney).toLocaleString() : ((row.totalFinalMoney) / regulation.exchangeRate).toFixed(2).toLocaleString()}\r\n                                                    </p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid style={{ marginBottom: '10px' }} item md={12} xs={12}>\r\n                                    <Grid style={{ justifyContent: 'end' }} container>\r\n                                        {row.deleted ? (\r\n                                            <Grid style={{ justifyContent: 'end' }} item md={2} xs={2}>\r\n                                                <Button onClick={() => RestoneReciept(row.MAHD)} style={{ fontWeight: '700', fontSize: '0.6rem', backgroundColor: '#00bfa5', color: 'white' }}>\r\n                                                    <TiArrowBack style={{ marginRight: '5px', fontSize: '1rem', transform: 'translateY(-5%)' }}></TiArrowBack>\r\n                                                    Restore\r\n                                                </Button>\r\n                                            </Grid>\r\n                                        ) : null}\r\n                                        <Grid style={{ justifyContent: 'end' }} item md={2} xs={2}>\r\n                                            <Button onClick={() => DeleteReciept(row.MAHD, row.deleted)} style={{ fontWeight: '700', fontSize: '0.6rem', backgroundColor: red[400], color: 'white' }}>\r\n                                                <FiXSquare style={{ marginRight: '5px', fontSize: '1rem', transform: 'translateY(-5%)' }}></FiXSquare>\r\n                                                Delete\r\n                                            </Button>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n            <Modal\r\n                open={openModal}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"parent-modal-title\"\r\n                aria-describedby=\"parent-modal-description\"\r\n            >\r\n                <Box sx={{ ...style, width: 400 }}>\r\n                    <h2 style={{ textAlign: 'center' }} id=\"parent-modal-title\">Are you sure to delete?</h2>\r\n                    <Grid container spacing={2}>\r\n                        <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\r\n                            <Button onClick={() => PermanentlyDelete(row.MAHD)} style={{ color: 'white', backgroundColor: red[500] }}>DELETE</Button>\r\n                        </Grid>\r\n                        <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\r\n                            <Button onClick={() => setOpenModal(false)} style={{ backgroundColor: lightBlue[100] }}>CANCEL</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Modal>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nRow.propTypes = {\r\n    row: PropTypes.shape({\r\n        calories: PropTypes.number.isRequired,\r\n        carbs: PropTypes.number.isRequired,\r\n        fat: PropTypes.number.isRequired,\r\n        history: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                amount: PropTypes.number.isRequired,\r\n                customerId: PropTypes.string.isRequired,\r\n                date: PropTypes.string.isRequired,\r\n            }),\r\n        ).isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        price: PropTypes.number.isRequired,\r\n        protein: PropTypes.number.isRequired,\r\n    }).isRequired,\r\n};\r\n\r\n\r\nexport default function CollapsibleTable() {\r\n    const typeReciept = useSelector(state => state.typeReciept)\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const typeByDate = useSelector(state => state.typeByDate)\r\n    const [listRecieptReplace, setListRecieptReplace] = React.useState(listReciept);\r\n    const statusSelectAll = useSelector(state => state.statusSelectAll)\r\n    const search = useSelector(state => state.search)\r\n    const dispatch = useDispatch()\r\n    let listMAHD = []\r\n    React.useEffect(() => {\r\n        var list = typeReciept.length === 0 ? listReciept : listReciept.filter(value => {\r\n            for (var i = 0; i < typeReciept.length; i++) {\r\n                switch (typeReciept[i]) {\r\n                    case 'delete':\r\n                        if (value.deleted) {\r\n                            return value;\r\n                        }\r\n                        break;\r\n                    case 'return':\r\n                        if (!value.deleted && value.isEdit) {\r\n                            return value;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        if (!value.deleted && !value.isEdit) {\r\n                            return value;\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        })\r\n\r\n        if (typeByDate.type === 'typeByDate' || typeByDate.type === 'yesterday' || typeByDate.type === 'today') {\r\n            list = list.filter(value => {\r\n                let timeMau = value.date;\r\n                timeMau = timeMau.replace(/\\s/g, \"\");\r\n                timeMau = timeMau.split(\"/\");\r\n                if (typeByDate.day == timeMau[0] && typeByDate.month == timeMau[1] && typeByDate.year == timeMau[2]) {\r\n                    return value;\r\n                }\r\n            })\r\n        }\r\n\r\n        if (typeByDate.type === 'lastmonth') {\r\n            list = list.filter(value => {\r\n                let timeMau = value.date;\r\n                timeMau = timeMau.replace(/\\s/g, \"\");\r\n                timeMau = timeMau.split(\"/\");\r\n                if (typeByDate.month == timeMau[1] && typeByDate.year == timeMau[2]) {\r\n                    return value;\r\n                }\r\n            })\r\n        }\r\n\r\n        if (typeByDate.type === 'lastyear') {\r\n            list = list.filter(value => {\r\n                let timeMau = value.date;\r\n                timeMau = timeMau.replace(/\\s/g, \"\");\r\n                timeMau = timeMau.split(\"/\");\r\n                if (typeByDate.year == timeMau[2]) {\r\n                    return value;\r\n                }\r\n            })\r\n        }\r\n\r\n        if (search.length !== 0) {\r\n            list = list.filter(value => {\r\n                let isCheck = true\r\n                for (let i = 0; i < search.length; i++) {\r\n                    if (search[0] !== value.MAHD[0]) {\r\n                        isCheck = false;\r\n                        break;\r\n                    }\r\n                }\r\n                if (isCheck) {\r\n                    return value;\r\n                }\r\n            })\r\n        }\r\n\r\n        list.map(value => {\r\n            listMAHD.push(value.MAHD)\r\n        })\r\n\r\n        statusSelectAll ? dispatch({\r\n            type: \"SELECTED_ALL_RECIEPT\",\r\n            listMAHD: listMAHD,\r\n        }) : dispatch({\r\n            type: \"RESET_MAHD_RECIEPT\"\r\n        })\r\n        setListRecieptReplace(list)\r\n    }, [typeReciept, typeByDate, listReciept, statusSelectAll, search])\r\n\r\n\r\n    return (\r\n        <TableContainer style={{ overflowX: 'hidden', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px' }} component={Paper}>\r\n            <Table aria-label=\"collapsible table\">\r\n                <TableHead>\r\n                    <TableRow style={{ backgroundColor: 'black', color: 'white' }}>\r\n                        <TableCell>\r\n                        </TableCell>\r\n                        <TableCell />\r\n                        <TableCell >ID Receipt</TableCell>\r\n                        <TableCell align=\"right\">Date</TableCell>\r\n                        <TableCell align=\"right\">Total</TableCell>\r\n                        <TableCell align=\"right\">Discount</TableCell>\r\n                        <TableCell align=\"right\">Total final</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {listRecieptReplace ?\r\n                        listRecieptReplace.map((row) => (\r\n                            <Row key={row.MAHD} row={row} />\r\n                        )) : null\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddTimeKeeperModal.js",["1159","1160","1161","1162","1163","1164","1165","1166","1167","1168","1169","1170","1171","1172","1173"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, \r\n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nvar listDayInWeek = [\r\n    {ID:'T2',name:'Thứ hai'}, \r\n    {ID:'T3',name:'Thứ ba'}, \r\n    {ID:'T4',name:'Thứ tư'}, \r\n    {ID:'T5',name:'Thứ năm'}, \r\n    {ID:'T6',name:'Thứ sáu'}, \r\n    {ID:'T7',name:'Thứ bảy'}, \r\n    {ID:'CN',name:'Chủ nhật'}\r\n];\r\nclass AddTimeKeepingModal extends Component {\r\n\r\n    genID = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n            timeKeepingID: '',\r\n            alterID: '',\r\n            dayChosed: '',\r\n            shiftID: '',\r\n        };\r\n    }\r\n\r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    checkContraint() {\r\n        if(this.state.dayChosed.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"You haven't select the day of week\",\"warning\");\r\n            return false;\r\n        }\r\n        if(this.state.shiftID.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"You haven't select the shift\",\"warning\");\r\n            return false;\r\n        }\r\n        console.log(this.state.timeKeepingID );\r\n        if( this.state.timeKeepingID == undefined || this.state.timeKeepingID.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"You haven't select the employee\",\"warning\"); \r\n            return false;\r\n        }\r\n        // Có CSDL thì báo xem có trùng với cái cũ ko nữa\r\n        return true;\r\n    }\r\n\r\n\r\n    addChange() {\r\n        if(this.checkContraint()==false);\r\n        const data = {\r\n            _id: {\r\n                dateInWeek: this.state.dayChosed,\r\n                storeID: this.props.infoUser.email,\r\n                shiftType: {\r\n                    _id: {\r\n                        shiftID: this.state.shiftID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n                employee: {\r\n                    _id: {\r\n                        employeeID: this.state.timeKeepingID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n            },\r\n            realDate: document.querySelector('input[name=\"realDate\"]').value,\r\n        };\r\n        this.props.addNewTimeKeeper(data);\r\n        this.props.changeAddTimeKeepingStatus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \r\n                    title=\"Change TimeKeeper\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            Real Date\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"date\" \r\n                                            name='realDate'\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.getCurrentDateTime()}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Choose Day in week\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 120 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({dayChosed: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    listDayInWeek.map((item) =>\r\n                                                        <MenuItem value={item.ID}>\r\n                                                            {item.name}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n\r\n                                    <Grid item md={8} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>\r\n                                            Choose Shift\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 220 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({shiftID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                    : this.props.listShift.map((shift) =>\r\n                                                        <MenuItem value={shift._id.shiftID}>\r\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            TimeKeeping Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({timeKeepingID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        !(this.state.alterID == item._id.employeeID) ?\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                        : null\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.addChange()}>\r\n                                            Add Change\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listShift: state.listShift,\r\n        listEmployee: state.listEmployee,\r\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        addNewTimeKeeper: (data) => {\r\n            dispatch({\r\n                type: \"ADD_NEW_TIME_KEEPER\",\r\n                data: data,\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTimeKeepingModal);\r\n\r\n               ","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\NoJobEmployee.js",["1174","1175","1176","1177","1178","1179"],"import React, { Component } from 'react';\r\nimport { Table, TableCell, TableContainer, TableRow, TableHead, Paper} from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nvar listUsers = [];\r\n\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n    } \r\n})\r\n\r\nclass NoJobEmployee extends Component {\r\n\r\n    genID = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n        };\r\n        listUsers = [];\r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        this.addEmployeeToDatabase();\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    findEmployeeInAssign(employeeID)\r\n    {\r\n        var shiftAssign = this.props.listShiftAssign;\r\n        for(var i = 0 ; i < shiftAssign.length; i++)\r\n        {\r\n            if(shiftAssign[i]._id.employee._id.employeeID == employeeID)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div>\r\n                <TableContainer component={Paper} style={{width: 400}} >\r\n                    <Table>\r\n                        <TableHead>\r\n                            <TableRow style={{height: 20}}>\r\n                                <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" >      ID</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\">Employee</TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        {\r\n\r\n                            this.props.listEmployee.employees.map((item) => \r\n                                !this.findEmployeeInAssign(item._id.employeeID)\r\n                                ?<TableRow>\r\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\" style={{height: 30}}>{item._id.employeeID}</TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\">{item.firstName + ' ' + item.lastName}</TableCell>\r\n                                </TableRow>\r\n                                :(null)\r\n                            )\r\n                        }\r\n                        \r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listEmployee: state.listEmployee,\r\n        listShiftAssign: state.listShiftAssign,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles, {withTheme: true})(NoJobEmployee));\r\n\r\n               ","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\TimekeepingTable.js",["1180","1181","1182","1183","1184"],"import {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { withStyles } from '@material-ui/styles';\r\n// material\r\nimport { Paper, TableContainer, Table, TableHead, TableCell, TableRow, Button} from '@mui/material';\r\nimport { AiOutlineEdit, AiFillDelete } from \"react-icons/ai\";\r\n// ----------------------------------------------------------------------\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    } \r\n})\r\n\r\nclass TimeKeepingTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: 'false'\r\n    }\r\n    this.getAllTimeKeeping()\r\n  }\r\n\r\n    async getAllTimeKeeping()\r\n    {\r\n        var result = [];\r\n        const data = {\r\n          token: localStorage.getItem('token'),\r\n          filter: {\r\n              \"_id.storeID\": this.props.infoUser.email,\r\n          }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/employee/time-keeping`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n                // console.log(\"điểm danh\", res.data.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.props.hideAlert();\r\n\t\t\t\t        this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        // To redux\r\n        this.props.getTimeKeeping(result);\r\n    }\r\n\r\n  getShiftInforByID(shiftID)\r\n  {\r\n      var listShift = this.props.listShift;\r\n      for(var i = 0 ; i < listShift.length; i++)\r\n      {\r\n        if(listShift[i]._id.shiftID == shiftID)\r\n        {\r\n            return listShift[i].name + ' (' + listShift[i].timeFrom + '-' + listShift[i].timeEnd + ')';\r\n        }\r\n      }\r\n      return \"Can't get shift\";\r\n  }\r\n\r\n  getEmployeeFullNameByID(employeeID)\r\n  {\r\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n      {\r\n          var currentEmployee = this.props.listEmployee.employees[i];\r\n          if(currentEmployee._id.employeeID==employeeID)\r\n          {\r\n            return currentEmployee.lastName + ' ' + currentEmployee.firstName;\r\n          }\r\n      }\r\n      return \"Can't get name\";\r\n  }\r\n  render() {\r\n    const { classes } = this.props;\r\n    return ( \r\n      <div  > \r\n          <TableContainer component={Paper}>\r\n                <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='180px'>Day</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='80px'>Date Of Week</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" >Shift</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">ID</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">Name</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">Paid</TableCell>\r\n                            {/* <TableCell className={classes.goodTable_Cell_Header} align=\"center\"></TableCell> */}\r\n                        </TableRow>\r\n                        {\r\n                            this.props.listTimeKeeper.map((timeKeeper)=>\r\n                                (\r\n                                  <TableRow>\r\n                                    <TableCell className={classes.goodTable_Cell}>\r\n                                        {timeKeeper._id.realDate.substring(0,timeKeeper._id.realDate.indexOf('T') )}\r\n                                    </TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.dateInWeek}</TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell}>\r\n                                        {timeKeeper._id.shiftType.name + \" (\"+ timeKeeper._id.shiftType.timeFrom + \r\n                                          ' - '+  timeKeeper._id.shiftType.timeEnd +')'}\r\n                                      </TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.employee._id.employeeID}</TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell}>\r\n                                        {timeKeeper._id.employee.firstName + \" \" + timeKeeper._id.employee.lastName}\r\n                                    </TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell}>\r\n                                        {timeKeeper.isPaidSalary.toString()}\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                )\r\n                            )\r\n                        }\r\n                    </TableHead>\r\n                </Table>\r\n          </TableContainer>\r\n            {/* <Button \r\n                variant=\"contained\"\r\n                onClick={() => this.props.changeAddTimeKeepingStatus()}\r\n            >\r\n              Add\r\n            </Button> */}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n      listTimeKeeper: state.listTimeKeeping,\r\n      listShift: state.listShift,\r\n      listEmployee: state.listEmployee,\r\n      infoUser: state.infoUser\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    changeAddTimeKeepingStatus: () => {\r\n      dispatch({\r\n          type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\r\n      });\r\n    },\r\n    changeUpdateTimeKeepingStatus: () => {\r\n      dispatch({\r\n          type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\r\n      });\r\n    },\r\n    changeUpdateTimeKeepingValue: (data) => {\r\n      dispatch({\r\n        type: \"SET_UPDATE_TIMEKEEPER_VALUE\",\r\n        data: data\r\n      });\r\n    },\r\n    deleteTimeKeeping: (data) => {\r\n      console.log(\"data\", data)\r\n      dispatch({\r\n        type: \"DELETE_TIMEKEEPER\",\r\n        data: data\r\n      });  \r\n    },\r\n    getTimeKeeping: (data) => {\r\n      dispatch({\r\n        type: \"GET_TIMEKEEPER\",\r\n        data: data\r\n      });  \r\n    },\r\n    showAlert: (message, typeMessage) => {\r\n      dispatch({\r\n        type: \"SHOW_ALERT\",\r\n        message: message,\r\n        typeMessage: typeMessage,\r\n      })\r\n    },\r\n    hideAlert: () => {\r\n      dispatch({\r\n        type: \"HIDE_ALERT\",\r\n      })\r\n    },\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(TimeKeepingTable));","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateNextWeekTimeKeeping.js",["1185","1186","1187","1188","1189","1190","1191","1192","1193","1194","1195","1196","1197","1198","1199","1200"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, \r\n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"center\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\n  var listDayInWeek = [\r\n    {ID:'Monday',name:'Monday'}, \r\n    {ID:'Tuesday',name:'Tuesday'}, \r\n    {ID:'Wednesday',name:'Wednesday'}, \r\n    {ID:'Thursday',name:'Thursday'}, \r\n    {ID:'Friday',name:'Friday'}, \r\n    {ID:'Saturday',name:'Saturday'}, \r\n    {ID:'Sunday',name:'Sunday'}\r\n];\r\n\r\nclass UpdateNextWeekTimeKeepingModal extends Component {\r\n\r\n    genID = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n            withdrawID: '',\r\n            alterID: '',\r\n            dayChosed: '',\r\n            shiftID: '',\r\n        };\r\n        this.loadInitialData();\r\n    }\r\n\r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    isGreater(dateString1, dateString2){\r\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\r\n    }\r\n\r\n    calculateDay(dateString1, dateString2)\r\n    {\r\n        return (\r\n            (new Date(dateString1)).setHours(0, 0, 0) \r\n                - \r\n            (new Date(dateString2)).setHours(0,0,0)\r\n            )\r\n            /(1000 * 60 * 60 * 24);\r\n    }\r\n\r\n    checkContraint() {\r\n        if(!this.isGreater(document.querySelector('input[name=\"realDate\"]').value, this.getCurrentDateTime() ))\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"The input day must be greater than today\",\"warning\"); \r\n            return false;\r\n        }\r\n        // Check thử ngày nhập nhỏ hơn ngày báo nghỉ bn ngày\r\n        if(this.props.regulation != {})\r\n        {\r\n            if(this.calculateDay(document.querySelector('input[name=\"realDate\"]').value, this.getCurrentDateTime() ) < \r\n            this.props.regulation.lessChangeTimeKeepingDay)\r\n            {\r\n                console.log(\"Tính ngày\",this.calculateDay(document.querySelector('input[name=\"realDate\"]').value, this.getCurrentDateTime()));\r\n                this.props.hideAlert();\r\n\t\t\t    this.props.showAlert(\"The input day must be greater than today at least \"+ this.props.regulation.lessChangeTimeKeepingDay+\" day(s)\",\"warning\");\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    async updateChange() {\r\n        if(this.checkContraint() == false) return;\r\n        // Xoá cái hiện tại đi cái đã\r\n        const data = {\r\n            token: localStorage.getItem('token'),   \r\n            offDay: {\r\n                _id: this.props.updateNextWeekTimeKeepingValue._id\r\n            }\r\n        }\r\n\r\n        await axios.delete(`http://localhost:5000/api/employee/off-day`,{data: data})\r\n          .then(res => {\r\n          })\r\n          .catch(err => {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n          })\r\n        this.props.deleteNextWeekTimeKeeping(this.props.updateNextWeekTimeKeepingValue);\r\n        console.log(\"Xoá được rồi\");\r\n        const dataUpdate = {\r\n            token: localStorage.getItem('token'),\r\n            offDay: {\r\n                _id: {\r\n                    dateInWeek: this.currentdayChosed,\r\n                    storeID: this.props.infoUser.email,\r\n                    shiftType: {\r\n                        _id: {\r\n                            shiftID: this.currentShipChosed,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    employee: {\r\n                        _id: {\r\n                            employeeID: this.currentWidrawID,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\r\n                },\r\n                alternativeEmployee: {\r\n                    _id: {\r\n                        employeeID: this.currentAlterID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n            }    \r\n        };\r\n        console.log(\"dataUpdate\", dataUpdate);\r\n        await axios.post(`http://localhost:5000/api/employee/off-day`, dataUpdate)\r\n          .then(res => {\r\n                console.log(\"Save success\");\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Update absent day success\",\"success\");\r\n                this.props.addNewChange(dataUpdate.offDay);\r\n                console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\r\n        })\r\n        .catch(err => {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(err.response.data.message,\"warning\");\r\n            console.log(err);\r\n            if(err.response.data.message)\r\n            {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(err.response.data.message,\"warning\");\r\n            }\r\n            // Nếu lỗi thì thêm lại\r\n            this.props.addNewChange(this.props.updateNextWeekTimeKeepingValue);\r\n            axios.post(`http://localhost:5000/api/employee/off-day`, {\r\n                token: localStorage.getItem('token'),\r\n                offDay: this.props.updateNextWeekTimeKeepingValue,\r\n            })\r\n            .then(res => {\r\n                    this.props.hideAlert();\r\n\t\t\t\t    this.props.showAlert(\"Add current absent day success\",\"success\"); \r\n                })\r\n                .catch(err => {\r\n                    if(err.response.data.message)\r\n                    {\r\n                        this.props.hideAlert();\r\n\t\t\t\t        this.props.showAlert(err.response.data.message,\"warning\");\r\n                    }\r\n                    else {\r\n                        this.props.hideAlert();\r\n\t\t\t\t        this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n                    }\r\n                });\r\n        })\r\n        // var indexOfData = this.findIndexCurrentNextTimeKeepingInRedux(data._id)\r\n        // this.props.changeUpdateNextWeekTimeKeeping(data, indexOfData);\r\n\r\n        this.props.changeUpdateNextWeekTimeKeepingStatus();\r\n    }\r\n\r\n    findIndexCurrentNextTimeKeepingInRedux(id)\r\n    {\r\n        //Đụng đến nếu sửa bảng\r\n        var listToSearch = this.props.nextWeekTimeKeeping;\r\n        for(var i = 0 ; i < listToSearch.length ; i ++)\r\n        {\r\n            if(listToSearch[i]._id.dateInWeek == id.dateInWeek && \r\n                listToSearch[i]._id.shiftType._id.shiftID == id.shiftType._id.shiftID&& \r\n                listToSearch[i]._id.employee._id.employeeID == id.employee._id.employeeID)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    realDate = '';\r\n    currentdayChosed = '';\r\n    currentShipChosed = '';\r\n    currentWidrawID = '';\r\n    loadInitialData() {\r\n        var val = this.props.updateNextWeekTimeKeepingValue;\r\n        this.realDate = val._id.realDate;\r\n        if(this.realDate.indexOf('T')!=-1) this.realDate = this.realDate.substring(0, this.realDate.indexOf('T'));\r\n        this.currentdayChosed = val._id.dateInWeek;\r\n        this.currentShipChosed = val._id.shiftType._id.shiftID;\r\n        this.currentWidrawID = val._id.employee._id.employeeID;\r\n        this.currentAlterID = val.alternativeEmployee._id.employeeID;\r\n        this.setState({\r\n            change : !this.state.change,\r\n            shiftID: this.currentShipChosed,\r\n            dayChosed: this.currentdayChosed,\r\n            withdrawID: this.currentWidrawID,\r\n            alterID: this.currentAlterID,\r\n        });\r\n    }\r\n\r\n    getDayInWeek(date) {\r\n        const d = new Date(date);\r\n    \r\n        const weekday = new Array(7);\r\n        weekday[0] = \"Sunday\";\r\n        weekday[1] = \"Monday\";\r\n        weekday[2] = \"Tuesday\";\r\n        weekday[3] = \"Wednesday\";\r\n        weekday[4] = \"Thursday\";\r\n        weekday[5] = \"Friday\";\r\n        weekday[6] = \"Saturday\";\r\n    \r\n        return weekday[d.getDay()];\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} \r\n                    title=\"Update Offday\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            Real Date\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"date\" \r\n                                            name='realDate'\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.realDate}\r\n                                            onChange={(event) => {\r\n                                                console.log(\"new Date\",event.target.value)\r\n                                                this.currentdayChosed = this.getDayInWeek(event.target.value);\r\n                                                this.setState({dayChosed: this.getDayInWeek(event.target.value)});\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Day in week\r\n                                        </div>\r\n                                        <FormControl>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <StyledTextField\r\n                                                value={this.currentdayChosed}\r\n                                                onChange={(event) => {\r\n                                                    this.currentdayChosed = event.target.value;\r\n                                                    this.setState({dayChosed: event.target.value});\r\n                                                }}\r\n                                                readOnly = {true}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                    marginRight: 10,\r\n                                                    width: 120,\r\n                                                    textAlign: 'center'\r\n                                                }}\r\n                                            >\r\n                                                {/* {\r\n                                                    listDayInWeek.map((item) =>\r\n                                                        <MenuItem value={item.ID}>\r\n                                                            {item.name}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }    */}\r\n                                            </StyledTextField> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n\r\n                                    <Grid item md={8} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>\r\n                                            Choose Shift\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 220 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                value={this.currentShipChosed}\r\n                                                onChange={(event) => {\r\n                                                    this.currentShipChosed = event.target.value;\r\n                                                    this.setState({shiftID: event.target.value});\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                    : this.props.listShift.map((shift) =>\r\n                                                        <MenuItem value={shift._id.shiftID}>\r\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Widraw Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                value={this.currentWidrawID}\r\n                                                onChange={(event) => {\r\n                                                    this.currentWidrawID = event.target.value;\r\n                                                    this.setState({withdrawID: event.target.value});\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Alter Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                value={this.currentAlterID}\r\n                                                onChange={(event) => {\r\n                                                    this.currentAlterID = event.target.value;\r\n                                                    this.setState({alterID: event.target.value});\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        !(this.currentWidrawID == item._id.employeeID) ?\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                        : null\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={12}>\r\n                                        <Divider></Divider>\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={12}\r\n                                        className='input-item'\r\n                                        style={{display: 'flex', justifyContent: 'space-evenly'}}\r\n                                    >\r\n                                        <Button variant=\"contained\" style={{backgroundColor: 'red'}} onClick={() => this.props.changeUpdateNextWeekTimeKeepingStatus()}>\r\n                                            Cancel\r\n                                        </Button>\r\n                                        <Button variant=\"contained\" onClick={() => this.updateChange()}>\r\n                                            Add Change\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listShift: state.listShift,\r\n        listEmployee: state.listEmployee,\r\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\r\n        updateNextWeekTimeKeepingValue: state.updateNextWeekTimeKeepingValue,\r\n        regulation: state.regulationReducer,\r\n        statusDarkmode: state.statusDarkmode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeUpdateNextWeekTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        addNewChange: (data) => {\r\n            dispatch({\r\n                type: \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\",\r\n                data: data,\r\n            });\r\n        },\r\n        \r\n        changeUpdateNextWeekTimeKeeping: (data, indexOfData) => {\r\n            dispatch({\r\n                type: \"UPDATE_NEXT_WEEK_TIMEKEEPER\",\r\n                data: data,\r\n                index: indexOfData,\r\n            });\r\n        },\r\n        deleteNextWeekTimeKeeping: (data) => {\r\n            dispatch({\r\n              type: \"DELETE_NEXT_WEEK_TIMEKEEPER\",\r\n              data: data\r\n            });\r\n            console.log(\"data\", data)\r\n          },\r\n          showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateNextWeekTimeKeepingModal);\r\n\r\n               ","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddNextWeekTimeKeeping.js",["1201","1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1212","1213","1214","1215","1216","1217","1218"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, \r\n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"center\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nvar listDayInWeek = [\r\n    {ID:'Monday',name:'Monday'}, \r\n    {ID:'Tuesday',name:'Tuesday'}, \r\n    {ID:'Wednesday',name:'Wednesday'}, \r\n    {ID:'Thursday',name:'Thursday'}, \r\n    {ID:'Friday',name:'Friday'}, \r\n    {ID:'Saturday',name:'Saturday'}, \r\n    {ID:'Sunday',name:'Sunday'}\r\n];\r\nclass AddNextWeekTimeKeepingModal extends Component {\r\n\r\n    genID = 0;\r\n    dayChosed = '';\r\n    constructor(props) {\r\n        super(props);\r\n        this.dayChosed = this.getDayInWeek(this.getCurrentDateTime());\r\n        this.state = {\r\n            change: false,\r\n            withdrawID: '',\r\n            alterID: '',\r\n            dayChosed: this.getDayInWeek(this.getCurrentDateTime()),\r\n            shiftID: '',\r\n        };\r\n        \r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeAddNextWeekTimeKeepingStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        this.addEmployeeToDatabase();\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    isGreater(dateString1, dateString2){\r\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\r\n    }\r\n\r\n    calculateDay(dateString1, dateString2)\r\n    {\r\n        return (\r\n            (new Date(dateString1)).setHours(0, 0, 0) \r\n                - \r\n            (new Date(dateString2)).setHours(0,0,0)\r\n            )\r\n            /(1000 * 60 * 60 * 24);\r\n    }\r\n\r\n    checkContraint() {\r\n        if(this.state.dayChosed.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"You haven't select the day of week\",\"warning\");\r\n            return false;\r\n        }\r\n        if(this.state.shiftID.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"You haven't select the shift\",\"warning\");\r\n            return false;\r\n        }\r\n        console.log(this.state.withdrawID );\r\n        if( this.state.withdrawID == undefined || this.state.withdrawID.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"You haven't select the absent employee\",\"warning\"); \r\n            return false;\r\n        }\r\n        if(this.state.alterID== undefined || this.state.alterID.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"You haven't select the ablternative employee\",\"warning\"); \r\n            return false;\r\n        }\r\n        if(!this.isGreater(document.querySelector('input[name=\"realDate\"]').value, this.getCurrentDateTime() ))\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"The input day must be greater than today\",\"warning\"); \r\n            return false;\r\n        }\r\n        // Check thử ngày nhập nhỏ hơn ngày báo nghỉ bn ngày\r\n        if(this.props.regulation != {})\r\n        {\r\n            if(this.calculateDay(document.querySelector('input[name=\"realDate\"]').value, this.getCurrentDateTime() ) < \r\n            this.props.regulation.lessChangeTimeKeepingDay)\r\n            {\r\n                console.log(\"Tính ngày\",this.calculateDay(document.querySelector('input[name=\"realDate\"]').value, this.getCurrentDateTime()));\r\n                this.props.hideAlert();\r\n\t\t\t    this.props.showAlert(\"The input day must be greater than today at least \"+ this.props.regulation.lessChangeTimeKeepingDay+\" day(s)\",\"warning\");\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    getDayInWeek(date) {\r\n        const d = new Date(date);\r\n    \r\n        const weekday = new Array(7);\r\n        weekday[0] = \"Sunday\";\r\n        weekday[1] = \"Monday\";\r\n        weekday[2] = \"Tuesday\";\r\n        weekday[3] = \"Wednesday\";\r\n        weekday[4] = \"Thursday\";\r\n        weekday[5] = \"Friday\";\r\n        weekday[6] = \"Saturday\";\r\n    \r\n        return weekday[d.getDay()];\r\n    }\r\n\r\n    async addChange() {\r\n        if(this.checkContraint()==false) return ;\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            offDay: {\r\n                _id: {\r\n                    dateInWeek: this.state.dayChosed,\r\n                    storeID: this.props.infoUser.email,\r\n                    shiftType: {\r\n                        _id: {\r\n                            shiftID: this.state.shiftID,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    employee: {\r\n                        _id: {\r\n                            employeeID: this.state.withdrawID,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\r\n                },\r\n                alternativeEmployee: {\r\n                    _id: {\r\n                        employeeID: this.state.alterID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n                \r\n            }\r\n        };\r\n        await axios.post(`http://localhost:5000/api/employee/off-day`, data1)\r\n          .then(res => {\r\n              console.log(\"Save success\");\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Save absent day success\",\"success\");\r\n              const data = {\r\n                _id: {\r\n                    dateInWeek: this.state.dayChosed,\r\n                    storeID: this.props.infoUser.email,\r\n                    shiftType: {\r\n                        _id: {\r\n                            shiftID: this.state.shiftID,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    employee: {\r\n                        _id: {\r\n                            employeeID: this.state.withdrawID,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\r\n                },\r\n                alternativeEmployee: {\r\n                    _id: {\r\n                        employeeID: this.state.alterID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n                \r\n            };\r\n            \r\n            this.props.addNewChange(data);\r\n            console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\r\n            this.props.changeAddNextWeekTimeKeepingStatus();\r\n          })\r\n          .catch(err => {\r\n                // console.log(\"err.response.data.message\", err.response.data.message);\r\n                if(err.response.data.message)\r\n                {\r\n                    this.props.hideAlert();\r\n\t\t\t\t    this.props.showAlert(err.response.data.message,\"warning\");\r\n                }\r\n                else {\r\n                    this.props.hideAlert();\r\n\t\t\t\t    this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n                }\r\n                console.log(err);\r\n          })\r\n        \r\n        // console.log(this.props.nextWeekTimeKeeping)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} \r\n                    title=\"Change Offday\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            Real Date\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"date\" \r\n                                            name='realDate'\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.getCurrentDateTime()}\r\n                                            onChange={(event) => {\r\n                                                this.dayChosed = this.getDayInWeek(event.target.value);\r\n                                                this.setState({dayChosed: this.getDayInWeek(event.target.value)});\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Day in week\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 80 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <StyledTextField\r\n                                                value={this.dayChosed}\r\n                                                onChange={(event) => {\r\n                                                    this.dayChosed = event.target.value;\r\n                                                    this.setState({dayChosed: event.target.value});\r\n\r\n                                                }}\r\n                                                readOnly={true}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                    marginRight: 10,\r\n                                                    width: 120,\r\n                                                    textAlign: 'center'\r\n                                                }}\r\n                                            >\r\n                                                {/* {\r\n                                                    listDayInWeek.map((item) =>\r\n                                                        <MenuItem value={item.ID}>\r\n                                                            {item.name}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }    */}\r\n                                            </StyledTextField> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n\r\n                                    <Grid item md={8} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>\r\n                                            Choose Shift\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 220 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({shiftID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                    : this.props.listShift.map((shift) =>\r\n                                                        <MenuItem value={shift._id.shiftID}>\r\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Widraw Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({withdrawID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        !(this.state.alterID == item._id.employeeID) ?\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                        : null\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Alter Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({alterID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        !(this.state.withdrawID == item._id.employeeID) ?\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                        : null\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={12}>\r\n                                        <Divider></Divider>\r\n                                    </Grid>\r\n                                    <Grid item md={12}\r\n                                        className='input-item'\r\n                                        \r\n                                        style={{display: 'flex', justifyContent: 'space-evenly'}}\r\n                                    >\r\n                                        <Button variant=\"contained\" style={{backgroundColor: 'red'}} onClick={() => this.props.changeAddNextWeekTimeKeepingStatus()}>\r\n                                            Cancel\r\n                                        </Button>\r\n                                        <Button variant=\"contained\" onClick={() => this.addChange()}>\r\n                                            Add Change\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listShift: state.listShift,\r\n        listEmployee: state.listEmployee,\r\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\r\n        regulation: state.regulationReducer,\r\n        statusDarkmode: state.statusDarkmode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddNextWeekTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        addNewChange: (data) => {\r\n            dispatch({\r\n                type: \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\",\r\n                data: data,\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNextWeekTimeKeepingModal);\r\n\r\n               ","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\UnShiftEmployee.js",["1219","1220","1221","1222","1223","1224","1225","1226","1227","1228"],"import {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Icon } from '@iconify/react';\r\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport '../../css/EmployeeManager.css'\r\n// material\r\nimport { Paper, TableContainer, Table, \r\n  TableHead, TableCell, TableRow, Button,\r\n  Menu, MenuItem, Grid\r\n} from '@mui/material';\r\nimport { AiOutlineEdit, AiFillDelete } from \"react-icons/ai\";\r\nimport plusFill from '@iconify/icons-eva/plus-fill';\r\n// ----------------------------------------------------------------------\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    } \r\n})\r\n\r\nclass UnShiftEmployee extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: false\r\n    }\r\n    this.getAllNextWeekTimeKeeping();\r\n    console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\r\n  }\r\n\r\n  async getAllNextWeekTimeKeeping()\r\n  {\r\n    var result = [];\r\n    const data = {\r\n      token: localStorage.getItem('token'),\r\n      filter: {\r\n          \"_id.storeID\": this.props.infoUser.email,\r\n      }   \r\n    }\r\n    await axios.get(`http://localhost:5000/api/employee/off-day`, {\r\n        params: {...data}\r\n    })\r\n        .then(res => {\r\n            result = res.data.data;\r\n            console.log(\"Báo nghỉ\", res.data.data);\r\n            this.props.getEmployeeDayOff(result);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            this.props.hideAlert();\r\n\t\t\t\t    this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n        })\r\n  }\r\n\r\n  findShift(shiftID) {\r\n      var shifts= this.props.listShift;\r\n        for(var i = 0 ; i < shifts.length ; i++)\r\n        {\r\n            if(shifts[i]._id.shiftID == shiftID)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n  }\r\n\r\n  getShiftNameAndTime(shiftID)\r\n  {\r\n      var shifts= this.props.listShift;\r\n      for(var i = 0 ; i < shifts.length ; i++)\r\n      {\r\n          if(shifts[i]._id.shiftID == shiftID)\r\n          {\r\n              return shifts[i].name + ' (' + shifts[i].timeFrom + ' - ' + shifts[i].timeEnd +') ';\r\n          }\r\n      }\r\n      return \"Can't get shift\";\r\n  }\r\n\r\n  getEmployeeNameByID(employeeID)\r\n  {\r\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n      {\r\n          var currentEmployee = this.props.listEmployee.employees[i];\r\n          if(currentEmployee._id.employeeID==employeeID)\r\n          {\r\n            return currentEmployee.firstName;\r\n          }\r\n      }\r\n      return \"This employee was sacked\";\r\n  }\r\n\r\n  reload()\r\n  {\r\n    this.setState({change: !this.state.change})\r\n  }\r\n\r\n  openOption = false;\r\n\r\n  handleClose ()\r\n  {\r\n      this.openOption = false;\r\n      this.setState({change: !this.state.change});\r\n  }\r\n\r\n  handleOpen()\r\n  {\r\n      this.openOption = true;\r\n      this.setState({change: !this.state.change});\r\n  }\r\n\r\n  findEmployeeNameByID(employeeID)\r\n  {\r\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n      {\r\n          var currentEmployee = this.props.listEmployee.employees[i];\r\n          if(currentEmployee._id.employeeID==employeeID)\r\n          {\r\n            return true;\r\n          }\r\n      }\r\n      return false;\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div>\r\n          <Button \r\n              variant=\"contained\"\r\n              onClick={() => this.props.changeAddNextWeekTimeKeepingStatus()}\r\n              startIcon={<Icon icon={plusFill} />}\r\n            >\r\n              \r\n            Add\r\n          </Button>\r\n          <TableContainer component={Paper} >\r\n                <Table className={classes.goodTable} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='80px' rowSpan={2}>Day</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" rowSpan={2}>Shift</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" rowSpan={2}>Real Date</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" colSpan={2}>Withdraw</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" colSpan={2}>Change</TableCell>\r\n                            <TableCell rowSpan={2} style={{color: '#fff', backgroundColor: '#000'}}/>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">ID</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">Name</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">ID</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">Name</TableCell>\r\n                        </TableRow>\r\n                        {\r\n                          this.props.nextWeekTimeKeeping.map((item) =>\r\n                          // this.findEmployeeNameByID(item._id.employee._id.employeeID) == false \r\n                          // || this.findEmployeeNameByID(item.alternativeEmployee._id.employeeID) == false\r\n                          this.findShift(item._id.shiftType._id.shiftID) == false\r\n                          ? (null) :\r\n                          <TableRow\r\n                              style={{\r\n                                position: 'relative',\r\n                              }}\r\n                          >\r\n                              <TableCell className={classes.goodTable_Cell}>{item._id.dateInWeek}</TableCell>\r\n                              <TableCell className={classes.goodTable_Cell}>{this.getShiftNameAndTime(item._id.shiftType._id.shiftID)}</TableCell>\r\n                              <TableCell className={classes.goodTable_Cell}>\r\n                                  {item._id.realDate ? item._id.realDate.indexOf('T') !=-1 ? item._id.realDate.substring(0,item._id.realDate.indexOf('T') ) : item._id.realDate : \"Loading...\"}\r\n                              </TableCell>\r\n                              <TableCell className={classes.goodTable_Cell}>{item._id.employee._id.employeeID}</TableCell>\r\n                              <TableCell className={classes.goodTable_Cell}>{this.getEmployeeNameByID(item._id.employee._id.employeeID)}</TableCell>\r\n                              <TableCell className={classes.goodTable_Cell}>{item.alternativeEmployee._id.employeeID}</TableCell>\r\n                              <TableCell className={classes.goodTable_Cell} style={{\r\n                                backgroundColor: this.findEmployeeNameByID(item.alternativeEmployee._id.employeeID) ? '#fff' :'#ff6057' \r\n                              }}>{this.getEmployeeNameByID(item.alternativeEmployee._id.employeeID)}</TableCell>\r\n                              <TableCell width={60} className={classes.goodTable_Cell} >\r\n                                  <div style={{display: 'flex'}}>\r\n                                      <AiOutlineEdit size={20} \r\n                                        onClick={() =>\r\n                                          {\r\n                                            this.props.changeUpdateNextWeekTimeKeepingStatus();\r\n                                            this.props.changeUpdateNextWeekTimeKeepingValue(item);\r\n                                          }\r\n                                        }\r\n                                      />\r\n                                      <AiFillDelete size={20} \r\n                                          onClick={() => \r\n                                              {\r\n                                                  const data = {\r\n                                                      token: localStorage.getItem('token'),   \r\n                                                      offDay: {\r\n                                                          _id: item._id\r\n                                                      }\r\n                                                  }\r\n                                                  console.log(\"data.offDay._id\", data.offDay._id)\r\n                                                  axios.delete(`http://localhost:5000/api/employee/off-day`,{data: data})\r\n                                                    .then(res => {\r\n                                                        this.props.hideAlert();\r\n\t\t\t\t                                                this.props.showAlert(\"Delete absent day success\",\"success\");\r\n                                                    })\r\n                                                    .catch(err => {\r\n                                                      this.props.hideAlert();\r\n                                                      this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n                                                    })\r\n                                                  this.props.deleteNextWeekTimeKeeping(item);\r\n                                              }\r\n                                            // this.props.changeUpdateNextWeekTimeKeepingStatus();\r\n                                            \r\n                                            // this.props.changeUpdateNextWeekTimeKeepingValue(item);\r\n                                          }\r\n                                      />\r\n                                    </div>      \r\n                              </TableCell> \r\n                          </TableRow> \r\n                          )\r\n                        }\r\n                    </TableHead>\r\n                    \r\n                </Table>\r\n            </TableContainer>\r\n              \r\n            \r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    nextWeekTimeKeeping: state.nextWeekTimeKeeping,\r\n    listEmployee: state.listEmployee,\r\n    listShift: state.listShift,\r\n    infoUser: state.infoUser,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    changeAddNextWeekTimeKeepingStatus: () => {\r\n      dispatch({\r\n          type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n      });\r\n    },\r\n    changeUpdateNextWeekTimeKeepingStatus: () => {\r\n      dispatch({\r\n          type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n      });\r\n    },\r\n    changeUpdateNextWeekTimeKeepingValue: (data) => {\r\n      dispatch({\r\n        type: \"SET_UPDATE_NEXT_WEEK_TIMEKEEPER_VALUE\",\r\n        data: data\r\n      });\r\n    },\r\n    deleteNextWeekTimeKeeping: (data) => {\r\n      dispatch({\r\n        type: \"DELETE_NEXT_WEEK_TIMEKEEPER\",\r\n        data: data\r\n      });\r\n      console.log(\"data\", data)\r\n    },\r\n    getEmployeeDayOff: (data) => {\r\n      dispatch({\r\n        type: \"SET_NEXT_WEEK_TIMEKEEPER\",\r\n        data: data\r\n      });\r\n    },\r\n    showAlert: (message, typeMessage) => {\r\n      dispatch({\r\n        type: \"SHOW_ALERT\",\r\n        message: message,\r\n        typeMessage: typeMessage,\r\n      })\r\n    },\r\n    hideAlert: () => {\r\n      dispatch({\r\n        type: \"HIDE_ALERT\",\r\n      })\r\n    },\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(UnShiftEmployee));","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\FixedCalendar.js",["1229"],"import {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { withStyles } from '@material-ui/styles';\r\n// material\r\nimport { Paper, TableContainer, Table, TableHead, TableCell, TableRow, Button } from '@mui/material';\r\nimport FixedTableCell from './FixedCalendarCell';\r\n\r\n// ----------------------------------------------------------------------\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '80px',\r\n    } \r\n})\r\n\r\nclass FixedCalendar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: 'false'\r\n    }\r\n    this.getAllShiftAssign();\r\n  }\r\n  async getAllShiftAssign()\r\n  {\r\n    var result = [];\r\n    const data = {\r\n      token: localStorage.getItem('token'),\r\n      filter: {\r\n          \"_id.storeID\": this.props.infoUser.email,\r\n      }   \r\n    }\r\n    await axios.get(`http://localhost:5000/api/employee/shift-assign`, {\r\n        params: {...data}\r\n    })\r\n        .then(res => {\r\n            result = res.data.data;\r\n            this.props.setShiftAssign(result);\r\n        })\r\n        .catch(err => {\r\n            console.log('bug when add shift-assign', err);\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n        })\r\n  }\r\n  \r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div style={{marginTop: 10, maxHeight: 600}}> \r\n          <TableContainer id=\"scroll-bar\" style={{overflowX: 'hidden'}} component={Paper}>\r\n              <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                  <TableHead>\r\n                      <TableRow>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" width='12%'>\r\n                                Shift\r\n                            </TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" width='12%'>Mon</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" width='12%'>Tue</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" width='12%'>Wed</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" width='12%'>Thu</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" width='12%'>Fri</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" width='12%'>Sat</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}} align=\"center\" width='12%'>Sun</TableCell>\r\n                      </TableRow>\r\n                  </TableHead>\r\n                      {\r\n                          this.props.listShift.map((shift) => \r\n                          (\r\n                              <TableRow>\r\n                                  <TableCell className={classes.goodTable_Cell} width={100}>{shift.timeFrom + '-' + shift.timeEnd}</TableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Monday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Tuesday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Wednesday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Thursday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Friday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Saturday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Sunday'}></FixedTableCell>\r\n                              </TableRow>\r\n                          ))\r\n                      }\r\n              </Table>\r\n          </TableContainer>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        listShift: state.listShift,\r\n        infoUser: state.infoUser,\r\n        listShiftAssign: state.listShiftAssign,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n      setShiftAssign: (data) => {\r\n          dispatch({\r\n              type: \"SET_SHIFT_ASSIGN\",\r\n              data: data,\r\n          });\r\n      },\r\n      showAlert: (message, typeMessage) => {\r\n        dispatch({\r\n            type: \"SHOW_ALERT\",\r\n            message: message,\r\n            typeMessage: typeMessage,\r\n        })\r\n    },\r\n    hideAlert: () => {\r\n        dispatch({\r\n            type: \"HIDE_ALERT\",\r\n        })\r\n    },\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(FixedCalendar));","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\PayMoneyModal.js",["1230","1231","1232","1233","1234","1235","1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246","1247","1248","1249","1250","1251","1252","1253","1254","1255","1256","1257","1258","1259","1260","1261","1262"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Table, Grid, TextField, \r\n    TableCell, TableContainer, Button, InputLabel,\r\n    Paper, TableRow, TableHead } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport EmployeeInformation from './EmployeeInformation';\r\nimport { GiConsoleController } from 'react-icons/gi';\r\n\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    } \r\n})\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\n\r\nclass PayEmployeeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            goodID : \"\",\r\n            change: false,\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n        }; \r\n        // console.log(\"listTimeKeeper\", this.props.listTimeKeeper);\r\n        // console.log(\"this.props.employeeID\", this.props.employeeID);\r\n        this.calculateTotalSalary();\r\n    }\r\n\r\n    getShiftInforByID(shiftID)\r\n    {\r\n        var listShift = this.props.listShift;\r\n        for(var i = 0 ; i < listShift.length; i++)\r\n        {\r\n            if(listShift[i]._id.shiftID == shiftID)\r\n            {\r\n                return listShift[i].name + ' (' + listShift[i].timeFrom + '-' + listShift[i].timeEnd + ')';\r\n            }\r\n        }\r\n        return \"Can't get shift\";\r\n    }\r\n\r\n    getEmployeeFullNameByID(employeeID)\r\n    {\r\n            for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n            {\r\n                var currentEmployee = this.props.listEmployee.employees[i];\r\n                if(currentEmployee._id.employeeID==employeeID)\r\n                {\r\n                        return currentEmployee.lastName + ' ' + currentEmployee.firstName;\r\n                }\r\n            }\r\n        return \"Can't get name\";\r\n    }\r\n\r\n    exit() {\r\n        this.props.changePayEmployeeStatus();  \r\n    }\r\n\r\n    payEmployee(){\r\n        // alert(\"Confirm password\");\r\n        // viết api để trả lương ở đây\r\n        // this.props.changePayEmployeeStatus();\r\n        try {\r\n            for(var i =0; i< this.props.listTimeKeeper.length; i++)\r\n            {\r\n                if(this.props.listTimeKeeper[i]._id.employee._id.employeeID != this.props.employeeID.id) continue;\r\n                // Thử api\r\n                const data = {\r\n                    token: localStorage.getItem('token'),\r\n                    updatedTimeKeeping: {\r\n                        _id: this.props.listTimeKeeper[i]._id,\r\n                        isPaidSalary: true,\r\n                    }\r\n                };\r\n                axios.put(`http://localhost:5000/api/employee/time-keeping`, data)\r\n                    .then(res => {\r\n                        console.log(\"Update success\");\r\n                    })\r\n                    .catch(err => {\r\n                        console.log(err);\r\n                    })\r\n            }\r\n            // Cập nhật redux khi update việc trả lương\r\n            this.props.paySalary(this.props.employeeID.id);\r\n            console.log(\"Đã gọi hàm cập nhập trạng thái\", this.props.employeeID.id)\r\n        }\r\n        catch(e)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            console.log(\"Lỗi trả lương\", e);\r\n        }\r\n        \r\n        // this.props.changePayEmployeeStatus();    \r\n        // Cập nhật redux trạng thái trả lương nhiều cái cùng lúc\r\n\r\n    }\r\n\r\n    findShift(shiftID) {\r\n        var shifts= this.props.listShift;\r\n          for(var i = 0 ; i < shifts.length ; i++)\r\n          {\r\n              if(shifts[i]._id.shiftID == shiftID)\r\n              {\r\n                  return true;\r\n              }\r\n          }\r\n          return false;\r\n    }\r\n\r\n    getShiftNameAndTime(shiftID)\r\n    {\r\n        var shifts= this.props.listShift;\r\n        for(var i = 0 ; i < shifts.length ; i++)\r\n        {\r\n            if(shifts[i]._id.shiftID == shiftID)\r\n            {\r\n                return shifts[i].name + ' (' + shifts[i].timeFrom + ' - ' + shifts[i].timeEnd +') ';\r\n            }\r\n        }\r\n        return \"Can't get shift\";\r\n    }\r\n\r\n    calculateTime(timeFrom, timeEnd)\r\n    {\r\n        var realTimeFrom, realTimeEnd;\r\n\r\n        realTimeFrom = parseInt(timeFrom.substring(0, timeFrom.indexOf(':')));\r\n        if(timeFrom.indexOf('PM')!=-1) realTimeFrom += 12;\r\n        var minuteFrom= parseInt(timeFrom.substring(timeFrom.indexOf(':')+1, timeFrom.indexOf(':') + 3));\r\n\r\n        realTimeEnd = parseInt(timeEnd.substring(0, timeEnd.indexOf(':')));\r\n        if(timeEnd.indexOf('PM')!=-1) realTimeEnd += 12;\r\n        var minuteEnd= parseInt(timeEnd.substring(timeEnd.indexOf(':')+1, timeEnd.indexOf(':') + 3));\r\n\r\n        var timeDiff = realTimeEnd - realTimeFrom;\r\n        \r\n        if(minuteEnd - minuteFrom < 0)\r\n        {\r\n            timeDiff --;\r\n            minuteEnd += 60;\r\n        }\r\n\r\n        return Math.round(timeDiff + (minuteEnd - minuteFrom) / 60.0);\r\n    }\r\n\r\n    calculateSalary(shiftType){\r\n        return shiftType.salary * (this.calculateTime(shiftType.timeFrom,shiftType.timeEnd));\r\n    }\r\n\r\n    getEmployeeNameByID(employeeID)\r\n    {\r\n        for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n        {\r\n            var currentEmployee = this.props.listEmployee.employees[i];\r\n            if(currentEmployee._id.employeeID==employeeID)\r\n            {\r\n                return currentEmployee.firstName;\r\n            }\r\n        }\r\n        return \"This employee was sacked\";\r\n    }\r\n    findEmployeeNameByID(employeeID)\r\n    {\r\n        for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n        {\r\n            var currentEmployee = this.props.listEmployee.employees[i];\r\n            if(currentEmployee._id.employeeID==employeeID)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    totalSalary = 0;\r\n\r\n    calculateTotalSalary() {\r\n        // this.props.listTimeKeeper;\r\n        var baseSalary = 0;\r\n        for(var i = 0; i < this.props.listTimeKeeper.length ; i++)\r\n        {\r\n            if(\r\n                this.props.listTimeKeeper[i]._id.employee._id.employeeID == this.props.employeeID.id &&\r\n                this.props.listTimeKeeper[i].isPaidSalary == false\r\n                )\r\n            {\r\n                console.log(\"Chấm công\", this.props.listTimeKeeper[i])\r\n                baseSalary += this.calculateSalary(this.props.listTimeKeeper[i]._id.shiftType);\r\n            }\r\n        }\r\n        this.totalSalary = baseSalary;\r\n        this.setState({change: !this.state.change});\r\n        console.log(\"this.totalSalary\",this.totalSalary);\r\n    }\r\n\r\n    toReadableDay(dayToConvert) {\r\n        var days = dayToConvert.split('-');\r\n        return days[2] + '/' + days[1] + '/'+ days[0];\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <form \r\n                style={{ zIndex: '10', width: '80%', height: 600,justifyContent: 'center', marginTop: '40px', overflow:'auto'}} \r\n                autoComplete=\"off\" noValidate id='scroll-bar'\r\n            >\r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"PAY EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}>\r\n                            <Card>\r\n                                <Grid container md={12}>\r\n                                    <EmployeeInformation></EmployeeInformation>\r\n                                </Grid>\r\n                                <label\r\n                                    style={{margin: 18, marginBottom: 4, fontWeight: 700}}\r\n                                >\r\n                                    Timekeeping table\r\n                                </label>\r\n                                \r\n                                <Grid container md={12}>\r\n                                     <TableContainer \r\n                                        component={Paper}\r\n                                        style={{\r\n                                            marginLeft: 18,\r\n                                            marginRight: 18,\r\n                                            // Thay đổi chiều dài cột tại đây\r\n                                            maxHeight: 400,\r\n                                            overflow: 'auto',\r\n                                        }}\r\n                                        id=\"scroll-bar\"\r\n                                     >\r\n                                            \r\n                                            <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                                                <TableHead>\r\n                                                    <TableRow>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='240px'>Day</TableCell>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='100px'>Weekday</TableCell>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='240px'>Shift</TableCell>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='140px'>Per Hour</TableCell>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='140px'>Salary</TableCell>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='120px'>Salary status</TableCell>\r\n                                                        {/* <TableCell className={classes.goodTable_Cell_Header} align=\"center\"></TableCell> */}\r\n                                                    </TableRow>\r\n                                                    {\r\n                                                        this.props.listTimeKeeper.map((timeKeeper)=>\r\n                                                        timeKeeper._id.employee._id.employeeID != this.props.employeeID.id ? (null) :\r\n                                                            (\r\n                                                            <TableRow>\r\n                                                                <TableCell className={classes.goodTable_Cell} align=\"center\">\r\n                                                                    {this.toReadableDay(timeKeeper._id.realDate.substring(0,timeKeeper._id.realDate.indexOf('T') ))}\r\n                                                                </TableCell>\r\n                                                                <TableCell className={classes.goodTable_Cell} align=\"center\">{timeKeeper._id.dateInWeek}</TableCell>\r\n                                                                <TableCell className={classes.goodTable_Cell}>\r\n                                                                    {timeKeeper._id.shiftType.name + \" (\"+ timeKeeper._id.shiftType.timeFrom + \r\n                                                                    ' - '+  timeKeeper._id.shiftType.timeEnd +')'}\r\n                                                                </TableCell>\r\n                                                                <TableCell className={classes.goodTable_Cell}>\r\n                                                                    <div style={{display: 'flex'}}>\r\n                                                                        {\r\n                                                                            Object.keys(this.props.regulation).length == 0 ?\r\n                                                                            <div style={{marginRight: 4}}>{timeKeeper._id.shiftType.salary}</div> :\r\n                                                                            this.props.regulation.currency == 'vnd' ?\r\n                                                                            <div style={{marginRight: 4}}>{timeKeeper._id.shiftType.salary}</div> :\r\n                                                                            <div style={{marginRight: 4}}>{(timeKeeper._id.shiftType.salary/this.props.regulation.exchangeRate).toFixed(2)}</div>\r\n                                                                        }\r\n                                                                        {\r\n                                                                            (Object.keys(this.props.regulation).length == 0)\r\n                                                                                ? <div>{' VNĐ'}</div> :\r\n                                                                            (this.props.regulation.currency == 'vnd' ? <div>{' VNĐ'}</div> : <div>{' $'}</div> )\r\n                                                                        }\r\n                                                                    </div>\r\n                                                                </TableCell>\r\n                                                                <TableCell className={classes.goodTable_Cell}>\r\n                                                                    {/* {this.calculateSalary(timeKeeper._id.shiftType)}\\ */}\r\n                                                                    <div style={{display: 'flex'}}>\r\n                                                                        {\r\n                                                                            Object.keys(this.props.regulation).length == 0 ?\r\n                                                                            <div style={{marginRight: 4}}>{this.calculateSalary(timeKeeper._id.shiftType)}</div> :\r\n                                                                            this.props.regulation.currency == 'vnd' ?\r\n                                                                            <div style={{marginRight: 4}}>{this.calculateSalary(timeKeeper._id.shiftType)}</div> :\r\n                                                                            <div style={{marginRight: 4}}>{(this.calculateSalary(timeKeeper._id.shiftType)/this.props.regulation.exchangeRate).toFixed(2)}</div>\r\n                                                                        }\r\n                                                                        {\r\n                                                                            (Object.keys(this.props.regulation).length == 0)\r\n                                                                                ? <div>{' VNĐ'}</div> :\r\n                                                                            (this.props.regulation.currency == 'vnd' ? <div>{' VNĐ'}</div> : <div>{' $'}</div> )\r\n                                                                        }\r\n                                                                    </div>\r\n                                                                    \r\n                                                                </TableCell>\r\n                                                                <TableCell className={classes.goodTable_Cell} align=\"center\">\r\n                                                                    {\r\n                                                                        timeKeeper.isPaidSalary== true ? \r\n                                                                        <div style={{backgroundColor:'#73b504', color:'#fff', borderRadius: 4, lineHeight: 2.2}}>\r\n                                                                            Payed\r\n                                                                        </div> : \r\n                                                                        <div style={{backgroundColor:'#ff2400', color:'#fff', borderRadius: 4, lineHeight: 2.2}}>\r\n                                                                            Not payed\r\n                                                                        </div>\r\n                                                                    }\r\n                                                                </TableCell>\r\n                                                            </TableRow>\r\n                                                            )\r\n                                                        )\r\n                                                    }\r\n                                                </TableHead>\r\n                                            </Table>\r\n                                    </TableContainer>\r\n                                    <Grid item md={12} style={{marginTop: 4}}>\r\n                                        <div style={{display: 'flex', margin: '12px 18px'}}>\r\n                                            <lable style={{fontWeight: 700, marginRight: '14px'}}>\r\n                                                TotalSalary: \r\n                                            </lable>\r\n                                            {\r\n                                                Object.keys(this.props.regulation).length == 0 ?\r\n                                                <div style={{marginRight: 4}}>{this.totalSalary}</div> :\r\n                                                this.props.regulation.currency == 'vnd' ?\r\n                                                <div style={{marginRight: 4}}>{this.totalSalary}</div> :\r\n                                                <div style={{marginRight: 4}}>{(this.totalSalary/this.props.regulation.exchangeRate).toFixed(2)}</div>\r\n                                            }\r\n                                            {\r\n                                                (Object.keys(this.props.regulation).length == 0)\r\n                                                    ? <div>{' VNĐ'}</div> :\r\n                                                (this.props.regulation.currency == 'vnd' ? <div>{' VNĐ'}</div> : <div>{' $'}</div> )\r\n                                            }\r\n                                        </div>\r\n                                        \r\n                                        <Button style={{margin: '-38px 18px', float: 'right'}}variant=\"contained\" onClick={() => this.payEmployee()}>\r\n                                            Pay employee\r\n                                        </Button>\r\n                                    </Grid>\r\n                                    \r\n                                </Grid>\r\n                                <Grid container md={12}>\r\n                                    <label\r\n                                        style={{margin: 18, marginBottom: 4, fontWeight: 700}}\r\n                                    >\r\n                                        ChangeTimekeeping table\r\n                                    </label>\r\n                                    <TableContainer component={Paper} \r\n                                        style={{\r\n                                            margin: 18, \r\n                                            marginTop: 0,\r\n                                            // Thay đổi chiều dài cột tại đây\r\n                                            maxHeight: 400,\r\n                                            overflow: 'auto',\r\n                                        }}\r\n                                        id='scroll-bar' \r\n                                    >\r\n                                        <Table className={classes.goodTable} size=\"small\" aria-label=\"a dense table\">\r\n                                            <TableHead>\r\n                                                <TableRow>\r\n                                                    <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\" width='80px'>Day</TableCell>\r\n                                                    <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">Shift</TableCell>\r\n                                                    <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">Real Date</TableCell>\r\n                                                    <TableCell className={classes.goodTable_Cell_Header} style={{color: '#fff', backgroundColor: '#000'}}align=\"center\">ID</TableCell>\r\n                                                    <TableCell className={classes.goodTable_Cell_Header}style={{color: '#fff', backgroundColor: '#000'}} align=\"center\">Name</TableCell>\r\n                                                </TableRow>\r\n                                                {\r\n                                                this.props.nextWeekTimeKeeping.map((item) =>\r\n                                                // this.findEmployeeNameByID(item._id.employee._id.employeeID) == false \r\n                                                // || this.findEmployeeNameByID(item.alternativeEmployee._id.employeeID) == false\r\n                                                this.props.employeeID.id != item._id.employee._id.employeeID\r\n                                                || this.findShift(item._id.shiftType._id.shiftID) == false\r\n                                                ? (null) :\r\n                                                <TableRow\r\n                                                    style={{\r\n                                                        position: 'relative',\r\n                                                    }}\r\n                                                >\r\n                                                    <TableCell className={classes.goodTable_Cell}>{item._id.dateInWeek}</TableCell>\r\n                                                    <TableCell className={classes.goodTable_Cell}>{this.getShiftNameAndTime(item._id.shiftType._id.shiftID)}</TableCell>\r\n                                                    <TableCell className={classes.goodTable_Cell}>\r\n                                                        {item._id.realDate ? item._id.realDate.indexOf('T') !=-1 ? item._id.realDate.substring(0,item._id.realDate.indexOf('T') ) : item._id.realDate : \"Loading...\"}\r\n                                                    </TableCell>\r\n                                                    <TableCell className={classes.goodTable_Cell}>{item._id.employee._id.employeeID}</TableCell>\r\n                                                    <TableCell className={classes.goodTable_Cell}>{this.getEmployeeNameByID(item._id.employee._id.employeeID)}</TableCell>\r\n                                                </TableRow> \r\n                                                )\r\n                                                }\r\n                                            </TableHead>\r\n                                            \r\n                                        </Table>\r\n                                    </TableContainer>\r\n                                </Grid>\r\n                                <Grid container md={12}>\r\n                                    <Grid item md={10}>\r\n                                    </Grid>\r\n                                    <Grid item md={2}>\r\n                                        <Button style={{margin: '4px 18px',float: 'right', backgroundColor:\"#f00\"}} variant=\"contained\" onClick={() => this.exit()}>\r\n                                            Exit\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        listTimeKeeper: state.listTimeKeeping,\r\n        listShift: state.listShift,\r\n        listEmployee: state.listEmployee,\r\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\r\n        infoUser: state.infoUser,\r\n        employeeID: state.currentEmployeeViewValue,\r\n        regulation: state.regulationReducer,\r\n        statusDarkmode: state.statusDarkmode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changePayEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        paySalary: (employeeID) => {\r\n            dispatch({\r\n                type: \"PAY_SALARY\",\r\n                employeeID: employeeID\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(PayEmployeeModal));\r\n\r\n               ","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateEmployeeModal.js",["1263","1264","1265","1266","1267","1268","1269","1270","1271","1272","1273","1274","1275","1276","1277","1278","1279","1280","1281","1282","1283","1284","1285","1286","1287"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass UpdateEmployeeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n        }; \r\n        this.loadInitialData();\r\n    }\r\n    imgUrl = 'none';\r\n    finishUpImage = true;\r\n    \r\n    async profileImageChange(fileChangeEvent) {\r\n        this.setState({\r\n            imageSelect: fileChangeEvent.target.files[0],\r\n        })\r\n        this.finishUpImage = false;\r\n        const file = fileChangeEvent.target.files[0];\r\n        const { type } = file;\r\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\r\n        } else {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", fileChangeEvent.target.files[0])\r\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\r\n            await axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\r\n                .then(res => {\r\n                    this.imgUrl=res.data.url;\r\n                    this.setState({\r\n                        change: 'true'\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"Thất bại\");\r\n                })\r\n        }\r\n        this.finishUpImage = true;\r\n    }\r\n\r\n\r\n    cancel = () => {\r\n        \r\n    }\r\n\r\n    findIndexInListEmployee(employeeID) {\r\n        for(var i = 0; i < this.props.listEmployee.employees.length ; i++)\r\n        {\r\n            if(this.props.listEmployee.employees[i]._id.employeeID == employeeID)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    checkConstraint() {\r\n        //Constraint 2: Password không được có dưới 6 ký tự\r\n        var password = document.querySelector('input[name=\"password\"]').value.trim();\r\n        if(password.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Password can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        if(password.length < 6)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Password can't be less than 6 character\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 3: FirstName không được trống\r\n        var firstName =  document.querySelector('input[name=\"firstName\"]').value.trim();\r\n        if(firstName.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"The firstname can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 4: lastName không được trống\r\n        var lastName =  document.querySelector('input[name=\"lastName\"]').value.trim();\r\n        if(lastName.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"The lastname can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 5: Số ID card không được để trống\r\n        var cardID= document.querySelector('input[name=\"cardID\"]').value.trim();\r\n        if(cardID.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"ID card can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        if(cardID.length != 9 && cardID.length != 12)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"ID card must has 9 or 12 digits\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constrain 6:Số điện thoại không được để trống và phải lớn hơn 6 ký tự\r\n        var phoneNumber= document.querySelector('input[name=\"phoneNumber\"]').value;\r\n        if(phoneNumber.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Phonenumber can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        if(phoneNumber.length != 10)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Phonenumber must has 10 digits\",\"warning\");\r\n            return false;\r\n        }\r\n        if(phoneNumber[0] != '0')\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Phonenumber must begin with 0\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constrain 7:Địa chỉ không được để trống\r\n        var address = document.querySelector('input[name=\"adress\"]').value;\r\n        if(address.length==0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Address can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 8: Ngày sinh không được để trống\r\n        var birthDay = document.querySelector('input[name=\"birthDay\"]').value;\r\n        if(birthDay.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Birthday can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 9: Email không được để trống\r\n        var email = document.querySelector('input[name=\"email\"]').value.trim();\r\n        if(email.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Email can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        if(email.indexOf('@')==-1 || email.indexOf('@')==email.length-1)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Email is invalid\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 10: Ngày sinh không thể lớn hơn ngày bất đầu làm\r\n        var startDate = document.querySelector('input[name=\"startDate\"]').value;\r\n        if(!this.isGreater(startDate, birthDay))\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Birthday can't be greater than the startday\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 11: Check đã up ảnh xong chưa\r\n        if(this.finishUpImage == false)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"The picture is not uploaded yet\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 12: Check tuổi với cái regulation:\r\n        if(this.props.regulation != {})\r\n        {\r\n            if(this.calculateOld(startDate, birthDay) < this.props.regulation.miniumEmployeeAge)\r\n            {\r\n                console.log(\"Tính tuổi\",this.calculateOld(startDate, birthDay));\r\n                this.props.hideAlert();\r\n\t\t\t    this.props.showAlert(\"Employee is not old enough (\"+ this.props.regulation.miniumEmployeeAge+\")\",\"warning\");\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isGreater(dateString1, dateString2){\r\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\r\n    }\r\n\r\n    calculateOld(dateString1, dateString2)\r\n    {\r\n        return (new Date(dateString1).getYear() - new Date(dateString2).getYear());\r\n    }\r\n\r\n    async updateEmployee(){\r\n        if(this.checkConstraint() == false) return;\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: this.id,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                managerID: this.props.infoUser.email,\r\n                password: document.querySelector('input[name=\"password\"]').value,\r\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\r\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\r\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\r\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\r\n                email: document.querySelector('input[name=\"email\"]').value,\r\n                address: document.querySelector('input[name=\"adress\"]').value,\r\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\r\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\r\n                imgUrl: this.imgUrl,\r\n            }   \r\n        }\r\n        // console.log(\"index\", this.findIndexInListEmployee(this.id));\r\n        console.log(\"updateEmployee\", data);\r\n        await axios.put(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Update success\");\r\n                \r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.props.changeLoginStatus();\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Login timeout, signin again\", \"warning\");\r\n            })\r\n        this.props.updateEmployeeRedux(data.employee, this.findIndexInListEmployee(this.id))\r\n        this.props.changeUpdateEmployeeStatus();\r\n    }\r\n\r\n    id = \"\";\r\n    password = \"\";\r\n    firstName = \"\";\r\n    lastName = \"\";\r\n    cardID = \"\";\r\n    phoneNumber = \"\";\r\n    address = \"\";\r\n    email = \"\";\r\n    startDate = \"\";\r\n    birthDay = \"\";\r\n\r\n    limitText = (limitField, limitNum) => {\r\n        if (limitField.target.value.length > limitNum) {\r\n            limitField.target.value = limitField.target.value.substring(0, limitNum);\r\n        }\r\n    }\r\n\r\n    loadInitialData() {\r\n        var currentEmployee = this.props.currentEditEmployee.state;\r\n        // console.log(\"currentEmployee\", currentEmployee);\r\n        this.id = currentEmployee._id.employeeID;\r\n        this.password = currentEmployee.password;\r\n        this.firstName = currentEmployee.firstName;\r\n        this.lastName = currentEmployee.lastName;\r\n        this.cardID = currentEmployee.cardID;\r\n        this.phoneNumber = currentEmployee.phoneNumber;\r\n        this.address = currentEmployee.address;\r\n        this.email = currentEmployee.email;\r\n        this.startDate = currentEmployee.startDate;\r\n        this.imgUrl = currentEmployee.imgUrl;\r\n        if(this.startDate!=null && this.startDate.indexOf('T')!=-1)\r\n        {\r\n            this.startDate = this.startDate.substring(0, this.startDate.indexOf('T'));\r\n        }\r\n        this.birthDay = currentEmployee.dateOfBirth;\r\n        if(this.birthDay!=null && this.birthDay.indexOf('T')!=-1)\r\n        {\r\n            this.birthDay = this.birthDay.substring(0, this.birthDay.indexOf('T'));\r\n        }\r\n        this.setState({change: !this.state.change})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"UPDATE EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card >\r\n                                \r\n                               <Grid container md={12} style={{marginRight: 4}}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            Username\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            value={this.id}\r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                            onKeyDown={(e) => this.limitText(e, 10)}\r\n                                            onKeyUp={(e) => this.limitText(e, 10)}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>Password</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"password\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.password}\r\n                                            onKeyDown={(e) => this.limitText(e, 10)}\r\n                                            onKeyUp={(e) => this.limitText(e, 10)}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"firstName\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.firstName}\r\n                                            onKeyDown={(e) => this.limitText(e, 20)}\r\n                                            onKeyUp={(e) => this.limitText(e, 20)}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"lastName\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.lastName}\r\n                                            onKeyDown={(e) => this.limitText(e, 20)}\r\n                                            onKeyUp={(e) => this.limitText(e, 20)}\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"number\" \r\n                                            name=\"cardID\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.cardID}\r\n                                            onKeyDown={(e) => this.limitText(e, 12)}\r\n                                            onKeyUp={(e) => this.limitText(e, 12)}\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"number\" \r\n                                            name=\"phoneNumber\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.phoneNumber}\r\n                                            \r\n                                            onKeyDown={(e) => this.limitText(e, 10)}\r\n                                            onKeyUp={(e) => this.limitText(e, 10)}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Adress</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"adress\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.address}\r\n                                            \r\n                                            onKeyDown={(e) => this.limitText(e, 30)}\r\n                                            onKeyUp={(e) => this.limitText(e, 30)}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Start Date</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\"\r\n                                            name=\"startDate\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.startDate}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"email\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.email}\r\n                                            \r\n                                            onKeyDown={(e) => this.limitText(e, 20)}\r\n                                            onKeyUp={(e) => this.limitText(e, 20)}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\" \r\n                                            // class=\"input-val\"\r\n                                            name=\"birthDay\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.birthDay}\r\n                                        />\r\n                                    </Grid>\r\n                                </Grid>\r\n                                <Grid item sm={12} md={12} >\r\n                                    <div style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n                                        <Button style={{margin: 12}} variant=\"contained\" onClick={() => this.updateEmployee()}>\r\n                                            UPDATE\r\n                                        </Button>\r\n                                    </div>\r\n                                </Grid>\r\n                                \r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        currentEditEmployee: state.currentEditEmployee,\r\n        infoUser: state.infoUser,\r\n        listEmployee: state.listEmployee,\r\n        regulation: state.regulationReducer,\r\n        statusDarkmode: state.statusDarkmode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        updateEmployeeRedux: (data, index) => {\r\n            dispatch({\r\n                type: \"UPDATE_EMPLOYEE\",\r\n                data: data,\r\n                index: index,\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateEmployeeModal);\r\n\r\n               ","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddEmployeeModal.js",["1288","1289","1290","1291","1292","1293","1294","1295","1296","1297","1298","1299","1300","1301","1302","1303","1304","1305","1306","1307","1308","1309","1310","1311","1312","1313","1314","1315"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nvar listUsers = [];\r\n\r\nclass AddEmployeeModal extends Component {\r\n\r\n    genID = 0;\r\n    imgUrl = 'none';\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n        };\r\n        listUsers = [];\r\n        this.getAllEmployee(); \r\n    }\r\n\r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    async getAllEmployee () {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/employee/`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                // console.log(err);\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        listUsers = [];\r\n        for(var i = 0; i < result.length; i++)\r\n        {\r\n            listUsers.push(result[i]);\r\n        }\r\n        this.props.getEmployee(listUsers);\r\n        if(listUsers.length > 0)\r\n        {\r\n            this.genID = parseInt(listUsers[listUsers.length - 1]._id.employeeID) + 1;\r\n            console.log(this.genID);\r\n        }\r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    isGreater(dateString1, dateString2){\r\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\r\n    }\r\n\r\n    calculateOld(dateString1, dateString2)\r\n    {\r\n        return (new Date(dateString1).getYear() - new Date(dateString2).getYear());\r\n    }\r\n\r\n    finishUpImage = true;\r\n    async profileImageChange(fileChangeEvent) {\r\n        this.setState({\r\n            imageSelect: fileChangeEvent.target.files[0],\r\n        })\r\n        this.finishUpImage = false;\r\n        const file = fileChangeEvent.target.files[0];\r\n        const { type } = file;\r\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\r\n        } else {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", fileChangeEvent.target.files[0])\r\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\r\n            await axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\r\n                .then(res => {\r\n                    this.imgUrl=res.data.url;\r\n                    this.setState({\r\n                        change: 'true'\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"Thất bại\");\r\n                })\r\n        }\r\n        this.finishUpImage = true;\r\n    }\r\n\r\n    checkConstraint() {\r\n        // Constraint 1: ID trống hoặc bị trùng\r\n        var id  = document.querySelector('input[name=\"ID\"]').value;\r\n        if( id.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Can't let the id blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        for(var i = 0; i < this.props.listEmployee.employees.length ; i++)\r\n        {\r\n            if(this.props.listEmployee.employees[i]._id.employeeID == id)\r\n            {\r\n                this.props.hideAlert();\r\n\t\t\t    this.props.showAlert(\"ID duplicated\",\"warning\");\r\n                return false;\r\n            }\r\n        }\r\n        // Trùng ID sa thải\r\n        for(var i = 0; i < this.props.listSackedEmployee.employees.length ; i++)\r\n        {\r\n            if(this.props.listSackedEmployee.employees[i]._id.employeeID == id)\r\n            {\r\n                this.props.hideAlert();\r\n\t\t\t    this.props.showAlert(\"ID duplicated\",\"warning\");\r\n                return false;\r\n            }\r\n        }\r\n\r\n        //Constraint 2: Password không được có dưới 6 ký tự\r\n        var password = document.querySelector('input[name=\"password\"]').value.trim();\r\n        if(password.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Password can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        if(password.length < 6)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Password can't be less than 6 character\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 3: FirstName không được trống\r\n        var firstName =  document.querySelector('input[name=\"firstName\"]').value.trim();\r\n        if(firstName.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"The firstname can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 4: lastName không được trống\r\n        var lastName =  document.querySelector('input[name=\"lastName\"]').value.trim();\r\n        if(lastName.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"The lastname can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 5: Số ID card không được để trống\r\n        var cardID= document.querySelector('input[name=\"cardID\"]').value.trim();\r\n        if(cardID.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"ID card can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint X: Số ID phải có 9 hoặc 12 ký tự\r\n        if(cardID.length != 9 && cardID.length != 12)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"ID card must has 9 or 12 digits\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constrain 6:Số điện thoại không được để trống và phải lớn hơn 6 ký tự\r\n        var phoneNumber= document.querySelector('input[name=\"phoneNumber\"]').value;\r\n        if(phoneNumber.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Phonenumber can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        if(phoneNumber.length != 10)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Phonenumber must has 10 digits\",\"warning\");\r\n            return false;\r\n        }\r\n        if(phoneNumber[0] != '0')\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Phonenumber must begin with 0\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constrain 7:Địa chỉ không được để trống\r\n        var address = document.querySelector('input[name=\"adress\"]').value;\r\n        if(address.length==0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Address can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 8: Ngày sinh không được để trống\r\n        var birthDay = document.querySelector('input[name=\"birthDay\"]').value;\r\n        if(birthDay.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Birthday can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 9: Email không được để trống\r\n        var email = document.querySelector('input[name=\"email\"]').value.trim();\r\n        if(email.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Email can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        if(email.indexOf('@')==-1 || email.indexOf('@')==email.length-1)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Email is invalid\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 10: Ngày sinh không thể lớn hơn ngày bất đầu làm\r\n        var startDate = document.querySelector('input[name=\"startDate\"]').value;\r\n        if(!this.isGreater(startDate, birthDay))\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Birthday can't be greater than the startday\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 11: Check đã up ảnh xong chưa\r\n        if(this.finishUpImage == false)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"The picture is not uploaded yet\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 12: Check tuổi với cái regulation:\r\n        if(this.props.regulation != {})\r\n        {\r\n            if(this.calculateOld(startDate, birthDay) < this.props.regulation.miniumEmployeeAge)\r\n            {\r\n                console.log(\"Tính tuổi\",this.calculateOld(startDate, birthDay));\r\n                this.props.hideAlert();\r\n\t\t\t    this.props.showAlert(\"Employee is not old enough (\"+ this.props.regulation.miniumEmployeeAge+\")\",\"warning\");\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // Thêm nhân viên\r\n    async addEmployeeToDatabase()\r\n    {\r\n        var isAddOK = true;\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: document.querySelector('input[name=\"ID\"]').value,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                managerID: this.props.infoUser.email,\r\n                password: document.querySelector('input[name=\"password\"]').value,\r\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\r\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\r\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\r\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\r\n                email: document.querySelector('input[name=\"email\"]').value,\r\n                address: document.querySelector('input[name=\"adress\"]').value,\r\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\r\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\r\n                // endDate: \"2021-11-31T00:00:00.000Z\",\r\n                imgUrl: this.imgUrl,\r\n            }   \r\n        }\r\n        console.log(data);\r\n        await axios.post(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Add employee success\",\"success\");\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(err.response.data.message,\"warning\");\r\n                isAddOK = false;\r\n            })\r\n        // Thêm vào redux\r\n        if(isAddOK)\r\n        {\r\n            this.props.addEmployee(data.employee);\r\n            this.props.changeAddEmployeeStatus();\r\n        }\r\n            \r\n        \r\n    }\r\n\r\n    limitText = (limitField, limitNum) => {\r\n        if (limitField.target.value.length > limitNum) {\r\n            limitField.target.value = limitField.target.value.substring(0, limitNum);\r\n        }\r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        if(this.checkConstraint()==false) return;\r\n        this.addEmployeeToDatabase();\r\n        \r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"ADD EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            Username\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            onKeyDown={(e) => this.limitText(e, 10)}\r\n                                            onKeyUp={(e) => this.limitText(e, 10)}\r\n                                            name='ID'\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"  \r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>Password</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"password\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            onKeyDown={(e) => this.limitText(e, 10)}\r\n                                            onKeyUp={(e) => this.limitText(e, 10)}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"firstName\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            \r\n                                            onKeyDown={(e) => this.limitText(e, 20)}\r\n                                            onKeyUp={(e) => this.limitText(e, 20)}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"lastName\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            \r\n                                            onKeyDown={(e) => this.limitText(e, 20)}\r\n                                            onKeyUp={(e) => this.limitText(e, 20)}\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"number\" \r\n                                            name=\"cardID\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            \r\n                                            onKeyDown={(e) => this.limitText(e, 12)}\r\n                                            onKeyUp={(e) => this.limitText(e, 12)}\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"number\" \r\n                                            name=\"phoneNumber\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            onKeyDown={(e) => this.limitText(e, 10)}\r\n                                            onKeyUp={(e) => this.limitText(e, 10)}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Adress</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"adress\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            onKeyDown={(e) => this.limitText(e, 20)}\r\n                                            onKeyUp={(e) => this.limitText(e, 20)}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Start Date</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\"\r\n                                            name=\"startDate\"\r\n                                            defaultValue={this.getCurrentDateTime()}\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"email\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            onKeyDown={(e) => this.limitText(e, 30)}\r\n                                            onKeyUp={(e) => this.limitText(e, 30)}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\" \r\n                                            // class=\"input-val\"\r\n                                            name=\"birthDay\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item sm={12} md={12} >\r\n                                        <div style={{display: 'flex', justifyContent: 'flex-end'}}>\r\n                                            <Button variant=\"contained\" style={{margin: 12}} onClick={() => this.addEmployee()}>\r\n                                                Add\r\n                                            </Button>\r\n                                        </div>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listEmployee: state.listEmployee,\r\n        listSackedEmployee: state.listSackedEmployee,\r\n        regulation: state.regulationReducer,\r\n        statusDarkmode: state.statusDarkmode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        addEmployee: (data) => {\r\n            dispatch({\r\n                type: \"ADD_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEmployeeModal);\r\n\r\n               ","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeTableHeader.js",["1316","1317","1318","1319","1320","1321","1322","1323","1324","1325"],"import PropTypes from 'prop-types';\r\n// material\r\nimport { visuallyHidden } from '@mui/utils';\r\nimport { Box, Checkbox, TableRow, TableCell, TableHead, TableSortLabel } from '@mui/material';\r\nimport { withStyles } from '@material-ui/styles';\r\n// ----------------------------------------------------------------------\r\n\r\nEmployeeTableHeader.propTypes = {\r\n  order: PropTypes.oneOf(['asc', 'desc']),\r\n  orderBy: PropTypes.string,\r\n  rowCount: PropTypes.number,\r\n  headLabel: PropTypes.array,\r\n  numSelected: PropTypes.number,\r\n  onRequestSort: PropTypes.func,\r\n  onSelectAllClick: PropTypes.func\r\n};\r\n\r\nfunction EmployeeTableHeader( props){\r\n  const {\r\n    order,\r\n    orderBy,\r\n    rowCount,\r\n    headLabel,\r\n    numSelected,\r\n    onRequestSort,\r\n    onSelectAllClick} = props;\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headLabel.map((headCell) => (\r\n          <TableCell>\r\n            <TableSortLabel\r\n              style={{\r\n                color: '#333'\r\n              }}\r\n            >\r\n              {headCell.label}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nexport default EmployeeTableHeader;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\fakeData.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\SackedEmployeeMenu.js",["1326","1327","1328","1329","1330","1331","1332"],"import { Icon } from '@iconify/react';\r\nimport editFill from '@iconify/icons-eva/edit-fill';\r\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\r\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\r\nimport {GiPayMoney} from \"react-icons/gi\";\r\nimport {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\n// material\r\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Modal} from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\nconst style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 400,\r\n    bgcolor: 'background.paper',\r\n    border: '1px solid #000',\r\n    borderRadius: '5px',\r\n    boxShadow: 24,\r\n    pt: 2,\r\n    px: 4,\r\n    pb: 3,\r\n  };\r\nclass EmployeeMoreMenu extends Component {\r\n  currentEmployee = {};\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            change: 'false',\r\n            openModal: false\r\n        }\r\n        this.myRef = React.createRef();\r\n    }\r\n    setIsOpen(val) {\r\n        this.isOpen = val;\r\n        this.setState({change: val});\r\n        \r\n    }\r\n\r\n    getSackedEmployeeByID(employeeID) {\r\n        var listEmployee = this.props.listSackedEmployee.employees;\r\n        console.log(listEmployee);\r\n        for(var i = 0; i < listEmployee.length ; i++)\r\n        {\r\n          if(employeeID == listEmployee[i]._id.employeeID)\r\n          {\r\n            return listEmployee[i];\r\n          }\r\n        }\r\n    }\r\n\r\n    backToWork() {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee:\r\n            [\r\n                {\r\n                    employeeID: this.props.data,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n            ]\r\n            \r\n        }\r\n        axios.patch(`http://localhost:5000/api/employee/delete`, data)\r\n            .then(res => {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Employee has returned to work\",\"success\");\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n\r\n        // Xoá khỏi redux sacked\r\n        this.props.backToWorkSackedEmployee(this.props.data);\r\n\r\n        // Thêm vào redux ko sacked\r\n        this.props.addEmployee(this.getSackedEmployeeByID(this.props.data));\r\n    }\r\n\r\n    delete() {\r\n        this.handleClose();\r\n        this.setIsOpen(false);\r\n        const data = {\r\n        token: localStorage.getItem('token'),\r\n        employee:\r\n        [\r\n            {\r\n                employeeID: this.props.data,\r\n                storeID: this.props.infoUser.email, \r\n            },\r\n        ] \r\n        }\r\n        console.log(data);\r\n\r\n        axios.delete(`http://localhost:5000/api/employee/delete`,{data: data})\r\n            .then(res => {\r\n                this.props.hideAlert();\r\n                this.props.showAlert(\"Delete permantly employee(s) success\",\"success\");\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n\r\n        // To redux\r\n        var employeeID = this.props.data;\r\n        this.props.deletePermantlyEmployee(employeeID);\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({openModal: false});\r\n    }\r\n  \r\n    openModal() {\r\n        this.setState({openModal: true});\r\n    }\r\n\r\n    isOpen=false;\r\n    render() {\r\n        return (\r\n        <>\r\n            <IconButton ref={this.myRef} onClick={() => this.setIsOpen(true)}>\r\n            <Icon icon={moreVerticalFill} width={20} height={20} />\r\n            </IconButton>\r\n    \r\n            <Menu\r\n                style={{\r\n                    position: 'absolute',\r\n                    bottom: 0,\r\n                    left: 0,\r\n                }}\r\n                open={this.isOpen}\r\n                onClose={() => this.setIsOpen(false)}\r\n                anchorEl={this.myRef.current}\r\n                // PaperProps={{\r\n                //   sx: { width: 200, maxWidth: '100%' }\r\n                // }}\r\n                anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n                transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n            >\r\n                <MenuItem sx={{ color: 'text.secondary' }}\r\n                    onClick={() => this.openModal()}\r\n                >\r\n                    <ListItemIcon>\r\n                        <Icon icon={trash2Outline} width={24} height={24} />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\r\n                </MenuItem>\r\n                <MenuItem sx={{ color: 'text.secondary' }}\r\n                    onClick={() => this.backToWork()}\r\n                >\r\n                    <ListItemIcon>\r\n                    <Icon icon={editFill} width={24} height={24} />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Return\" primaryTypographyProps={{ variant: 'body2' }} />\r\n                </MenuItem>\r\n            </Menu>\r\n        <Modal\r\n            open={this.state.openModal}\r\n            onClose={() => this.handleClose()}\r\n            aria-labelledby=\"parent-modal-title\"\r\n            aria-describedby=\"parent-modal-description\"\r\n        >\r\n            <Box sx={{ ...style, width: 400 }}>\r\n                <h2 style={{ textAlign: 'center' , fontSize: 20}} id=\"parent-modal-title\">Are you sure to delete?</h2>\r\n                <Grid container spacing={2}>\r\n                    <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\r\n                        <Button onClick={() => this.delete()} style={{ color: 'white', backgroundColor: '#f44336' }}>DELETE</Button>\r\n                    </Grid>\r\n                    <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\r\n                        <Button onClick={() => this.handleClose()} style={{ backgroundColor: '#ADD8E6' }}>CANCEL</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Modal>\r\n        </>\r\n        );\r\n    }\r\n    \r\n    }\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\r\n        payEmployeeStatus: state.payEmployeeStatus,\r\n        listEmployee: state.listEmployee,\r\n        infoUser: state.infoUser,\r\n        listSackedEmployee: state.listSackedEmployee,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        backToWorkSackedEmployee: (id) => {\r\n            dispatch({\r\n                type: \"RETURN_TO_WORK\",\r\n                id: id\r\n            });\r\n        },\r\n        addEmployee: (data) => {\r\n            dispatch({\r\n                type: \"ADD_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        deletePermantlyEmployee: (employeeID) => {\r\n            dispatch({\r\n                type: \"DELETE_PERMANTLY_EMPLOYEE\",\r\n                employeeID: employeeID,\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeMoreMenu.js",["1333","1334","1335","1336","1337","1338","1339"],"import { Icon } from '@iconify/react';\r\nimport editFill from '@iconify/icons-eva/edit-fill';\r\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\r\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\r\nimport {GiPayMoney} from \"react-icons/gi\";\r\nimport {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Modal} from '@mui/material';\r\n// material\r\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\nconst style = {\r\n  position: 'absolute',\r\n  top: '50%',\r\n  left: '50%',\r\n  transform: 'translate(-50%, -50%)',\r\n  width: 400,\r\n  bgcolor: 'background.paper',\r\n  border: '1px solid #000',\r\n  borderRadius: '5px',\r\n  boxShadow: 24,\r\n  pt: 2,\r\n  px: 4,\r\n  pb: 3,\r\n};\r\nclass EmployeeMoreMenu extends Component {\r\n  currentEmployee = {};\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: false,\r\n      openModal: false,\r\n    }\r\n    this.myRef = React.createRef();\r\n    this.getEmployeeByID(this.props.data);\r\n  }\r\n  setIsOpen(val) {\r\n    this.isOpen = val;\r\n    this.setState({change: val});\r\n    \r\n  }\r\n\r\n  edit() {\r\n    this.setIsOpen(false);\r\n    this.getEmployeeByID(this.props.data);\r\n    // console.log(\"send nude\", this.currentEmployee);\r\n    this.props.setUpdateEmployee(this.currentEmployee);\r\n    this.props.changeUpdateEmployeeStatus();\r\n  }\r\n\r\n  delete() {\r\n    this.setIsOpen(false);\r\n    this.handleClose();\r\n    const data = {\r\n      token: localStorage.getItem('token'),\r\n      employee:\r\n      [\r\n          {\r\n              employeeID: this.props.data,\r\n              storeID: this.props.infoUser.email, \r\n          },\r\n      ] \r\n    }\r\n    console.log(data);\r\n\r\n    axios.delete(`http://localhost:5000/api/employee`,{data: data})\r\n        .then(res => {\r\n            this.props.hideAlert();\r\n\t\t\t\t    this.props.showAlert(\"Delete employee(s) success\",\"success\");\r\n        })\r\n        .catch(err => {\r\n          this.props.hideAlert();\r\n          this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n        })\r\n    \r\n    //Move to sacked\r\n    this.props.deleteEmployeeToSackRedux(this.currentEmployee)\r\n    // Delete redux\r\n    this.props.deleteEmployeeRedux(this.props.data);\r\n\r\n    // Xoá hết shiftAssign\r\n    for(var i = 0; i < this.props.listShiftAssign.length; i++)\r\n    {\r\n        if(this.props.listShiftAssign[i]._id.employee._id.employeeID == this.props.data) \r\n        {\r\n          const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            shiftAssign: {...this.props.listShiftAssign[i]}\r\n          }\r\n          console.log(\"data1\", data1)\r\n          axios.delete(`http://localhost:5000/api/employee/shift-assign`,{data: data1})\r\n          .then(res => {\r\n              // Xoá đi trong redux\r\n              this.props.RemoveShiftAssign(data1.shiftAssign);\r\n          })\r\n          .catch(err => {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n          })\r\n        }\r\n        \r\n    }\r\n\r\n  }\r\n\r\n  getEmployeeByID(employeeID) {\r\n    var listEmployee = this.props.listEmployee.employees;\r\n    console.log(listEmployee);\r\n    for(var i = 0; i < listEmployee.length ; i++)\r\n    {\r\n      if(employeeID == listEmployee[i]._id.employeeID)\r\n      {\r\n        this.currentEmployee = listEmployee[i];\r\n        return listEmployee[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  viewEmployee()\r\n  {\r\n      console.log(\"this.props.data\", this.props.data)\r\n      this.props.setIDView(this.props.data);\r\n      this.props.changePayEmployeeStatus();\r\n      this.setIsOpen(false);\r\n  }\r\n\r\n  isOpen=false;\r\n\r\n  handleClose() {\r\n      this.setState({openModal: false});\r\n  }\r\n\r\n  openModal() {\r\n      this.setState({openModal: true});\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <IconButton ref={this.myRef} onClick={() => this.setIsOpen(true)}>\r\n          <Icon icon={moreVerticalFill} width={20} height={20} />\r\n        </IconButton>\r\n  \r\n        <Menu\r\n          style={{\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            left: 0,\r\n          }}\r\n          open={this.isOpen}\r\n          onClose={() => this.setIsOpen(false)}\r\n          anchorEl={this.myRef.current}\r\n          // PaperProps={{\r\n          //   sx: { width: 200, maxWidth: '100%' }\r\n          // }}\r\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n          transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        >\r\n          <MenuItem sx={{ color: 'text.secondary' }}\r\n            onClick={() => this.openModal()}\r\n          >\r\n            <ListItemIcon>\r\n              <Icon icon={trash2Outline} width={24} height={24} />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n  \r\n          <MenuItem sx={{ color: 'text.secondary' }}\r\n            onClick={() => this.edit()}\r\n          >\r\n            <ListItemIcon>\r\n              <Icon icon={editFill} width={24} height={24} />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Edit\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n          <MenuItem sx={{ color: 'text.secondary' }}\r\n            onClick={()=> this.viewEmployee()}\r\n          >\r\n            <ListItemIcon>\r\n              <GiPayMoney size={24}/> \r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Pay money\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n        </Menu>\r\n        <Modal\r\n            open={this.state.openModal}\r\n            onClose={() => this.handleClose()}\r\n            aria-labelledby=\"parent-modal-title\"\r\n            aria-describedby=\"parent-modal-description\"\r\n        >\r\n            <Box sx={{ ...style, width: 400 }}>\r\n                <h2 style={{ textAlign: 'center' , fontSize: 20}} id=\"parent-modal-title\">Are you sure to delete?</h2>\r\n                <Grid container spacing={2}>\r\n                    <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\r\n                        <Button onClick={() => this.delete()} style={{ color: 'white', backgroundColor: '#f44336' }}>DELETE</Button>\r\n                    </Grid>\r\n                    <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\r\n                        <Button onClick={() => this.handleClose()} style={{ backgroundColor: '#ADD8E6' }}>CANCEL</Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </Box>\r\n        </Modal>\r\n      </>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    updateEmployeeStatus: state.updateEmpoyeeStatus,\r\n    payEmployeeStatus: state.payEmployeeStatus,\r\n    listEmployee: state.listEmployee,\r\n    infoUser: state.infoUser,\r\n    listShiftAssign: state.listShiftAssign,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n      changeUpdateEmployeeStatus: () => {\r\n          dispatch({\r\n              type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n          });\r\n      },\r\n      changePayEmployeeStatus: () => {\r\n        dispatch({\r\n            type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n        });\r\n      },\r\n      setUpdateEmployee: (currentEmployee) => {\r\n        dispatch({\r\n          type: \"SET_UPDATE_EMPLOYEE\",\r\n          data: currentEmployee\r\n        });\r\n      }, \r\n      deleteEmployeeRedux: (id) => {\r\n        dispatch({\r\n          type: \"DELETE_EMPLOYEE\",\r\n          id: id\r\n        });\r\n      },\r\n      deleteEmployeeToSackRedux: (data) => {\r\n        dispatch({\r\n          type: \"DELETE_EMPLOYEE_SACKED\",\r\n          data: data\r\n        });\r\n      },\r\n      setIDView: (id) => {\r\n        dispatch({\r\n          type: \"SET_ID_EMPLOYEE\",\r\n          id: id\r\n        });\r\n      },\r\n      RemoveShiftAssign: (data) => {\r\n        dispatch({\r\n            type: \"DELETE_SHIFT_ASSIGN\",\r\n            data: data,\r\n        });\r\n      },\r\n      showAlert: (message, typeMessage) => {\r\n        dispatch({\r\n          type: \"SHOW_ALERT\",\r\n          message: message,\r\n          typeMessage: typeMessage,\r\n        })\r\n      },\r\n      hideAlert: () => {\r\n        dispatch({\r\n          type: \"HIDE_ALERT\",\r\n        })\r\n      },\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeToolbar.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\SearchNotFound.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\Scrollbar.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\Page.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\Label.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\UpdateTypeModal.js",["1340","1341","1342","1343","1344","1345","1346","1347","1348"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Alert } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel, GiVampireCape } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nvar listTypeInfor = [];\r\n\r\nclass UpdateTypeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            change: 'false'\r\n        }\r\n        this.loadInitialData();\r\n        this.getAllTypeList();\r\n    }\r\n    storeID = \"\";\r\n    typeList = [];\r\n\r\n    async getAllTypeList(){\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        console.log(data.token);\r\n        console.log(data.filter);\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n    }\r\n    addType = () => {\r\n        var newTypeName = document.querySelector('input[name=\"typeName\"]').value.trim();\r\n        if(this.checkConstraint(newTypeName)==false)  return;\r\n        var genTypeID = 0;\r\n        if(listTypeInfor.length>0)\r\n        {\r\n            genTypeID = parseInt(listTypeInfor[listTypeInfor.length-1]._id.typeID) + 1;\r\n        } \r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productType: {\r\n                _id:{\r\n                    typeID: genTypeID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: newTypeName,\r\n            }    \r\n        }\r\n        axios.post(`http://localhost:5000/api/product/type`, data)\r\n            .then(res => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Save product type success\",\"success\");\r\n                //TODO: Cập nhật token ở đây nữa\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        this.props.changeAddTypeStatus();\r\n    }\r\n    \r\n    checkConstraint(typeName) {\r\n        //Constraint 1: Check name\r\n        for(var i=0;i<listTypeInfor.length;i++)\r\n        {\r\n            if(listTypeInfor[i].name==typeName)\r\n            {\r\n                if(typeName.trim()==this.props.typeProductValue.name)\r\n                {\r\n                    this.props.hideAlert();\r\n\t\t\t\t    this.props.showAlert(\"You must change your name before saving\",\"success\");\r\n                    return false;\r\n                }\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Duplicate type name\",\"success\");\r\n                return false;\r\n            }\r\n            \r\n        }        \r\n        // Constraint 2: Not blank\r\n        if(typeName.length==0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Type name can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n    cancel = () => {\r\n        this.props.changeStatusUpdateType();\r\n    }\r\n\r\n    handle = () => {\r\n        this.editType();\r\n    }\r\n\r\n    editType = () => {\r\n        var newTypeName = this.typeName;\r\n        if(this.checkConstraint(newTypeName)==false) return;\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productType: {\r\n                _id: {\r\n                    typeID: this.props.typeProductValue._id.typeID,\r\n                    storeID: this.props.infoUser.email,\r\n                }, \r\n                name: newTypeName,\r\n            }\r\n        }\r\n        axios.put(`http://localhost:5000/api/product/type`, data)\r\n            .then(res => {\r\n                // Có khi mình sẽ cập nhật type ở dây\r\n                console.log(\"Update success\");\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Update typename success\",\"success\");\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happended, restart and try again\",\"warning\");\r\n            })\r\n        this.props.changeStatusUpdateType();\r\n        this.props.updateNameToRedux(data.productType);\r\n        // this.loadAllGood();\r\n        // console.log(\"Cập nhập redux nào mấy anh\")\r\n        // this.props.updateNameToProductRedux(data.productType);\r\n        // this.props.changeEditTypeStatus();\r\n    }\r\n\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName=\"Null\";\r\n        console.log(\"typeList\", this.props.typeProduct);\r\n        for(var i = 0; i < this.props.typeProduct.length;i++)\r\n        {   \r\n            if(this.props.typeProduct[i]._id.typeID == typeID)\r\n            {\r\n                typeName = this.props.typeProduct[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    async loadAllGood() {\r\n        var resultProduct = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }\r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/`, {\r\n            params: { ...data }\r\n        })\r\n            .then(res => {\r\n                resultProduct = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        // Get hết từ cái productjoinType\r\n        var result = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, {\r\n            params: { ...data1 }\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n                localStorage.getItem('token', res.data.token);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        // Lấy các cái jointype\r\n        var joinTypeInfor = [];\r\n        for (let i = 0; i < result.length; i++) {\r\n            joinTypeInfor.push(result[i]);\r\n        }\r\n        // console.log(\"joinTypeInfor\", joinTypeInfor);\r\n\r\n        var listProductInfor = [];\r\n        for (let i = 0; i < resultProduct.length; i++) {\r\n            var typeIDList = [];\r\n            var joinType = '';\r\n            for (var j = 0; j < joinTypeInfor.length; j++) {\r\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\r\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) \r\n                {\r\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\r\n                    joinType = joinType + ' ' + this.getTypeNamebyTypeID(joinTypeInfor[j]._id.typeID);\r\n                }\r\n            }\r\n\r\n            listProductInfor.push(\r\n                {\r\n                    ...resultProduct[i],\r\n                    typeIDList: typeIDList,\r\n                    joinType: joinType\r\n                });\r\n        }\r\n        this.props.getProductToReducer(listProductInfor);\r\n    }\r\n\r\n    typeName = \"\";\r\n    loadInitialData = () => {\r\n        this.typeName = this.props.typeProductValue.name;\r\n        this.setState({change: true});\r\n    }\r\n\r\n    changeTypeName(e)\r\n    {\r\n        this.typeName = e.target.value;\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader \r\n                        style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} \r\n                        title={\"Update Type\"}\r\n                        />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid \r\n                            container \r\n                            spacing={2}\r\n                            justifyContent={'center'}\r\n                            alignItems={'center'}\r\n                        >\r\n                            <Grid item md={2} xs={12}>\r\n                                TypeName\r\n                            </Grid>\r\n                            <Grid item md={10} xs={12}>\r\n                                <TextField\r\n                                    id=\"outlined-basic\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    required\r\n                                    type=\"text\"\r\n                                    name=\"typeName\"\r\n                                    defaultValue={this.typeName}\r\n                                    onChange={(e) => this.changeTypeName(e)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button \r\n                            style={{ backgroundColor: 'yellowgreen' }} \r\n                            // onClick={() => this.addShift()} \r\n                            onClick={() => this.handle()}\r\n                            variant=\"contained\" \r\n                            startIcon={<BiPlusMedical />}\r\n                        >\r\n                            Xác nhận\r\n                        </Button>\r\n                        <Button \r\n                            style={{ backgroundColor: 'red' }} \r\n                            // onClick={() => this.editShift()}\r\n                            onClick={() => this.cancel()}\r\n                            variant=\"contained\" \r\n                            startIcon={<GiCancel />}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        typeProduct: state.typeProduct,\r\n        infoUser: state.infoUser,\r\n        typeProductValue: state.typeProductValue,\r\n        statusDarkmode: state.statusDarkmode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        addTypeToReducer: (data) => {\r\n            dispatch({\r\n                type: \"ADD_TYPE\",\r\n                data: data,\r\n            });\r\n        },\r\n         changeStatusUpdateType: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_TYPE_STATUS\",\r\n            }); \r\n        },\r\n        updateNameToRedux: (data) => {\r\n            dispatch({\r\n                type: \"UPDATE_TYPE\",\r\n                data: data,\r\n            });\r\n        },\r\n        getProductToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_AND_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateTypeModal);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\SortByTable.js",["1349"],"import React from 'react';\r\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\n\r\n\r\nfunction SortByTable(props) {\r\n    const dispatch = useDispatch()\r\n    const typeByDate = useSelector(state => state.typeByDate)\r\n    const [value, setValue] = React.useState(new Date());\r\n    const [value1, setValue1] = React.useState('all');\r\n    const darkmode = useSelector(state => state.statusDarkmode)\r\n\r\n    const selectDate = () => {\r\n        const data = {\r\n            type: \"typeByDate\",\r\n            day: value.getDate(),\r\n            month: value.getMonth() + 1,\r\n            year: value.getFullYear(),\r\n        }\r\n        dispatch({\r\n            type: \"TYPE_BY_DATE\",\r\n            typeByDate: data,\r\n        })\r\n    }\r\n\r\n    const changeTime = (newValue) => {\r\n        if (newValue) {\r\n            setValue(newValue);\r\n        }\r\n        if (typeByDate.type === 'typeByDate') {\r\n            const data = {\r\n                type: \"typeByDate\",\r\n                day: newValue.getDate(),\r\n                month: newValue.getMonth() + 1,\r\n                year: newValue.getFullYear(),\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        }\r\n    }\r\n\r\n    const selectType = () => {\r\n        if (value1 === 'all') {\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: { type: 'all' },\r\n            })\r\n        } else if (value1 === 'yesterday') {\r\n            let yesterday = new Date()\r\n            const data = {\r\n                type: \"yesterday\",\r\n                day: yesterday.getDate() - 1,\r\n                month: yesterday.getMonth() + 1,\r\n                year: yesterday.getFullYear(),\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        } else if (value1 === 'today') {\r\n            let today = new Date()\r\n            const data = {\r\n                type: \"today\",\r\n                day: today.getDate(),\r\n                month: today.getMonth() + 1,\r\n                year: today.getFullYear(),\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        } else if (value1 === 'lastmonth') {\r\n            let today = new Date()\r\n            const data = {\r\n                type: \"lastmonth\",\r\n                month: today.getMonth(),\r\n                year: today.getFullYear(),\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        } else if (value1 === 'lastyear') {\r\n            let today = new Date()\r\n            const data = {\r\n                type: \"lastyear\",\r\n                year: today.getFullYear() - 1,\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        }\r\n    }\r\n\r\n    const changeType = (e) => {\r\n        setValue1(e.target.value)\r\n        if (typeByDate.type === 'all' || typeByDate.type === 'yesterday' || typeByDate.type === 'today' || typeByDate.type === 'lastmonth' || typeByDate.type === 'lastyear') {\r\n            if (e.target.value === 'all') {\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: { type: 'all' },\r\n                })\r\n            }\r\n            if (e.target.value === 'yesterday') {\r\n                let yesterday = new Date()\r\n                let data = {\r\n                    type: \"yesterday\",\r\n                    day: yesterday.getDate() - 1,\r\n                    month: yesterday.getMonth() + 1,\r\n                    year: yesterday.getFullYear(),\r\n                }\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: data,\r\n                })\r\n            }\r\n            if (e.target.value === 'today') {\r\n                let today = new Date()\r\n                const data = {\r\n                    type: \"today\",\r\n                    day: today.getDate(),\r\n                    month: today.getMonth() + 1,\r\n                    year: today.getFullYear(),\r\n                }\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: data,\r\n                })\r\n            }\r\n            if (e.target.value === 'lastmonth') {\r\n                let today = new Date()\r\n                const data = {\r\n                    type: \"lastmonth\",\r\n                    month: today.getMonth(),\r\n                    year: today.getFullYear(),\r\n                }\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: data,\r\n                })\r\n            }\r\n            if (e.target.value === 'lastyear') {\r\n                let today = new Date()\r\n                const data = {\r\n                    type: \"lastyear\",\r\n                    year: today.getFullYear() - 1,\r\n                }\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: data,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        dispatch({\r\n            type: \"TYPE_BY_DATE\",\r\n            typeByDate: { type: 'all' },\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <Grid item md={12} sm={12}  >\r\n                <Card>\r\n                    <CardHeader style={{ height: 56, color: !darkmode ? '#0091ea' :'white', backgroundColor: !darkmode ? '#efeeef' :'#455a64'}} title=\"Sort\" />\r\n                    <Divider></Divider>\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <div className=\"form-check\">\r\n                                        <input onClick={() => selectType()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault2\" defaultChecked />\r\n                                        <FormControl fullWidth>\r\n                                            <InputLabel id=\"demo-simple-select-label\">Sort by</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"demo-simple-select-label\"\r\n                                                id=\"demo-simple-select\"\r\n                                                value={value1}\r\n                                                label=\"Option\"\r\n                                                onChange={(e) => changeType(e)}\r\n                                                style={{height: 40}}\r\n                                            >\r\n                                                <MenuItem style={{height: 40}} value='all'>All</MenuItem>\r\n                                                <MenuItem value='today'>Today</MenuItem>\r\n                                                <MenuItem value='yesterday'>Yesterday</MenuItem>\r\n                                                <MenuItem value='lastmonth'>Last month</MenuItem>\r\n                                                <MenuItem value='lastyear'>Last year</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <div className=\"form-check\">\r\n                                        <input onClick={() => selectDate()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\" />\r\n                                        <DesktopDatePicker\r\n                                            label=\"Date\"\r\n                                            value={value}\r\n                                            minDate={new Date('2017-01-01')}\r\n                                            onChange={(newValue) => changeTime(newValue)}\r\n                                            renderInput={(params) => <TextField {...params} />} \r\n                                        />\r\n                                    </div>\r\n                                </Grid>\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default SortByTable;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\ExcelInstruction.js",["1350","1351","1352","1353","1354","1355","1356"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nclass ExcelInstruction extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.exit();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '600px',width: '70%', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Instruction\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={12} xs={12} style={{margin: '0px 12px'}}>\r\n                                <label style={{fontWeight: 700, display: 'block'}}>Note:</label>\r\n                                - Uploaded file must have the column exactly like the template file<br/>\r\n                                - Product ID in the file can be changed<br/>\r\n                                - You can separate to add multiple types by adding ' || ' between the type\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12} style={{margin: '0px 12px'}}>\r\n                                <label style={{fontWeight: 700, display: 'block'}}>Step by step:</label>\r\n                                - Click in the upload excel button<br/>\r\n                                - Choose a excel file and click OK<br/>\r\n                                - Wait for the alert or fix excel file, upload again if your excel file was error\r\n                            </Grid>\r\n                            {\r\n                                Object.keys(this.props.regulation).length == 0 ? null :\r\n                                <Grid item md={12} xs={12} style={{margin: '0px 12px'}}>\r\n                                    <label style={{fontWeight: 700, display: 'block'}}>Regulation:</label>\r\n                                    - The expiration date must be at least {this.props.regulation.minExpiredProduct} day(s) older than the import date \r\n                                </Grid>\r\n                            }\r\n                        </Grid>\r\n                        <a  style={{margin: '0px 12px'}}\r\n                            target=\"_blank\" rel=\"noopener noreferrer\"\r\n                            href=\"https://docs.google.com/spreadsheets/d/1bk99RhxehlZk-1B4c93rIZ7MvUNlWO7F/edit?usp=sharing&ouid=107720637610074440067&rtpof=true&sd=true\">\r\n                            Template link here !\r\n                        </a>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', p: 2 }}>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Exit    \r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        confirmStatus: state.confirmStatus,\r\n        deleteStatus: state.deleteStatus,\r\n        confirmCode: state.confirmCode,\r\n        regulation: state.regulationReducer,\r\n        statusDarkmode: state.statusDarkmode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        exit: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EXCEL_INSTRUCTION_STATUS\",\r\n            });\r\n        },\r\n\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ExcelInstruction);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodTableDisplay.js",["1357","1358","1359","1360","1361","1362","1363","1364","1365","1366","1367","1368","1369","1370","1371","1372","1373","1374","1375","1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386","1387","1388","1389","1390","1391","1392","1393","1394","1395"],"import * as React from 'react';\r\nimport { Component } from 'react';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { Grid, Box, Button, Checkbox, Modal, Divider } from '@mui/material';\r\nimport { red, lightBlue } from '@mui/material/colors';\r\nimport Typography from '@mui/material/Typography';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { FiXSquare } from 'react-icons/fi'\r\nimport { TiArrowBack } from 'react-icons/ti'\r\nimport { Image } from 'cloudinary-react';\r\nimport GoodImage from './goodExample.jpg';\r\nimport { fontWeight } from '@material-ui/system';\r\nimport { AiOutlineEdit, AiFillDelete } from \"react-icons/ai\";\r\n\r\nconst styles = theme => ({\r\n    goodTable: {\r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell: {\r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    }\r\n})\r\n\r\n\r\nvar listProductInfor = [];\r\nvar joinTypeInfor = [];\r\nvar listTypeInfor = [];\r\n\r\nfunction Row(props) {\r\n    const { row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const [openModal, setOpenModal] = React.useState(false);\r\n    const statusSelectAll = useSelector(state => state.statusSelectAll)\r\n    const infoUser = useSelector(state => state.infoUser)\r\n    const dispatch = useDispatch();\r\n    const [statusSelectReplace, setStatusSelectReplace] = React.useState(false);\r\n    const regulation = useSelector(state => state.regulationReducer)\r\n    const typeProduct = useSelector(state => state.typeProduct)\r\n\r\n    const style = {\r\n        position: 'absolute',\r\n        top: '50%',\r\n        left: '50%',\r\n        transform: 'translate(-50%, -50%)',\r\n        width: 400,\r\n        bgcolor: 'background.paper',\r\n        border: '1px solid #000',\r\n        borderRadius: '5px',\r\n        boxShadow: 24,\r\n        pt: 2,\r\n        px: 4,\r\n        pb: 3,\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        setStatusSelectReplace(statusSelectAll)\r\n    }, [statusSelectAll])\r\n\r\n    const countQuantity = () => {\r\n        let count = 0;\r\n        row.listProduct.map(value => {\r\n            count += value.quantity;\r\n        })\r\n        return count;\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    }\r\n\r\n    const handleOpen = () => {\r\n        setOpen(true);\r\n    }\r\n\r\n    const getTypeNamebyTypeID = (typeID) => {\r\n        var typeName=\"Null\";\r\n        for(var i = 0; i < typeProduct.length;i++)\r\n        {   \r\n            if(typeProduct[i]._id.typeID == typeID)\r\n            {\r\n                typeName = typeProduct[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    \r\n\r\n    const editProduct = async (row) => \r\n    {\r\n        dispatch({type: \"UPDATE_GOOD_DATA\", data: row});\r\n        dispatch({ type: \"CHANGE_UPDATE_GOOD_STATUS\", });\r\n    }\r\n\r\n    const deleteProduct = async (row) => {\r\n        // Xoá sản phẩm\r\n        console.log(\"row\", row)\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            products:\r\n            [\r\n                {\r\n                    productID: row._id.productID,\r\n                    importDate: row._id.importDate,\r\n                    storeID: row._id.storeID,\r\n                }\r\n            ]\r\n            \r\n        }\r\n        axios.delete(`http://localhost:5000/api/product`,{data: data})\r\n            .then(res => {\r\n                dispatch({\r\n                    type: \"HIDE_ALERT\",\r\n                })\r\n                dispatch({\r\n                    type: \"SHOW_ALERT\",\r\n                    message: \"Delete product success\",\r\n                    typeMessage: \"success\",\r\n                })\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: \"HIDE_ALERT\",\r\n                })\r\n                dispatch({\r\n                    type: \"SHOW_ALERT\",\r\n                    message: \"Something happened, restart and try again\",\r\n                    typeMessage: \"warning\",\r\n                })\r\n            })\r\n        \r\n        // Get hết các cái join của sản phẩm\r\n        var allJoinMatch = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": row._id.storeID,\r\n                \"_id.productID\": row._id.productID,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, \r\n        {\r\n            params: {...data1}\r\n        })\r\n            .then(res => {\r\n                allJoinMatch = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: \"HIDE_ALERT\",\r\n                })\r\n                dispatch({\r\n                    type: \"SHOW_ALERT\",\r\n                    message: \"Something happened, restart and try again\",\r\n                    typeMessage: \"warning\",\r\n                })\r\n            })\r\n        console.log(allJoinMatch);\r\n        // Xoá các join liên quan đến sản phẩm\r\n        var allProductJoin = [];\r\n        for(var i = 0 ; i < allJoinMatch.length; i++)\r\n        {\r\n            allProductJoin.push({\r\n                productID: row._id.productID,\r\n                typeID: allJoinMatch[i]._id.typeID,\r\n                importDate: allJoinMatch[i]._id.importDate,\r\n                storeID: row._id.storeID,\r\n            });\r\n        }\r\n        const dataJoin = {\r\n            token: localStorage.getItem('token'),\r\n            productJoinTypes: allProductJoin,      \r\n        }\r\n\r\n        console.log(dataJoin);\r\n\r\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\r\n            .then(res => {\r\n                console.log(\"delete join success\");\r\n            })\r\n            .catch(err => {\r\n                dispatch({\r\n                    type: \"HIDE_ALERT\",\r\n                })\r\n                dispatch({\r\n                    type: \"SHOW_ALERT\",\r\n                    message: \"Something happened, restart and try again\",\r\n                    typeMessage: \"warning\",\r\n                })\r\n            })\r\n        dispatch({\r\n            type: \"DELETE_PRODUCT\",\r\n            data: row,\r\n        });\r\n    }\r\n\r\n    const calculateDay = (dateString1, dateString2) =>\r\n    {\r\n        // console.log(\"dateString1\", dateString1);\r\n        // console.log(\"dateString2\", dateString2);\r\n        if(dateString1.indexOf('T') != -1)\r\n        {\r\n            dateString1 = dateString1.substring(0, dateString1.indexOf('T'));\r\n        }\r\n        var time = (\r\n            (new Date(dateString1)).setHours(0, 0, 0) \r\n                - \r\n            (new Date(dateString2)).setHours(0,0,0)\r\n            )\r\n            /(1000 * 60 * 60 * 24);\r\n        if(time > 0) return time;\r\n        else return <lable style={{color: 'red'}}>'Product is expired!'</lable>;\r\n    }\r\n\r\n    const getCurrentDateTimeString = () => {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow style={{ borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: '#90a4ae #90a4ae transparent #90a4ae' }} sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n                {/* <TableCell>\r\n                    <Checkbox {...label} checked={statusSelectReplace} onChange={(e) => ChangeCheckbox(e, row.MAHD)} color=\"default\" />\r\n                </TableCell> */}\r\n                <TableCell>\r\n                    <IconButton\r\n                        aria-label=\"expand row\"\r\n                        size=\"small\"\r\n                        onClick={() => setOpen(!open)}\r\n                    >\r\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                    </IconButton>\r\n                </TableCell>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                    {row._id.productID}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.name}</TableCell>\r\n                <TableCell align=\"right\">\r\n                    <div style={{display: 'flex', justifyContent:'flex-end'}}>\r\n                        {\r\n                            row.typeIDList.map((typeID) => \r\n                                <label style={{\r\n                                        backgroundColor: '#088F8F', \r\n                                        color: 'white', \r\n                                        padding: '4px 8px', \r\n                                        borderRadius:'4px',\r\n                                        marginLeft: 10\r\n                                    }}>\r\n                                    {getTypeNamebyTypeID(typeID)}\r\n                                </label>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.quantity + ' (' + row.unit + ')'}</TableCell>\r\n                <TableCell align=\"right\">{row.remain + ' (' + row.unit + ')'}</TableCell>\r\n                <TableCell align=\"right\">\r\n                    <div style={{ display: 'flex', justifyContent: 'flex-end' }}>\r\n                        {\r\n                            Object.keys(regulation).length == 0 ?\r\n                                <div>{row.sellPrice}</div> :\r\n                                regulation.currency == 'vnd' ?\r\n                                    <div>{row.sellPrice}</div> :\r\n                                    <div>{(row.sellPrice / regulation.exchangeRate).toFixed(2)}</div>\r\n                        }\r\n\r\n                        <div style={{ marginLeft: 4 }}>\r\n                            {\r\n                                (Object.keys(regulation).length == 0)\r\n                                    ? ' VNĐ' :\r\n                                    (regulation.currency == 'vnd' ? ' VNĐ' : ' $')\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </TableCell>\r\n            </TableRow>\r\n            <TableRow style={{ borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: 'transparent #90a4ae #90a4ae #90a4ae' }}>\r\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={12}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Divider></Divider>\r\n                        <label style={{ fontWeight: 700, marginTop: 20, fontSize: 16, marginLeft: 10 }}>Product detail</label>\r\n                        <Grid container>\r\n                            <Grid item md={2}>\r\n                                {\r\n                                    row.imgUrl == \"none\"\r\n                                        ? <div style={{ width: '100px', height: '100px', objectFit: 'cover', margin: 10 }}><img src={GoodImage} style={{ width: '100px', height: '100px', objectFit: 'cover' }} /></div>\r\n\r\n                                        : <div style={{ width: '100px', height: '100px', objectFit: 'cover', margin: 10 }}><Image style={{ width: '100px', height: '100px', objectFit: 'cover' }} cloudName=\"databaseimg\" publicId={row.imgUrl}>{row.imgUrl}</Image></div>\r\n                                }\r\n                            </Grid>\r\n                            <Grid item md={10}>\r\n                                <Grid container>\r\n                                    <Grid item md={6}>\r\n                                        <div style={{ display: 'flex' , marginTop: 10}}>\r\n                                            <div style={{ fontWeight: 700, marginRight: 8, marginLeft: 20 }}>\r\n                                                {'Import price:'}\r\n                                            </div>\r\n                                            {\r\n                                                Object.keys(regulation).length == 0 ?\r\n                                                    <div>{row.importPrice}</div> :\r\n                                                    regulation.currency == 'vnd' ?\r\n                                                        <div>{row.importPrice}</div> :\r\n                                                        <div>{(row.importPrice / regulation.exchangeRate).toFixed(2)}</div>\r\n                                            }\r\n                                            <div style={{ marginLeft: 4 }}>\r\n                                                {\r\n                                                    (Object.keys(regulation).length == 0)\r\n                                                        ? ' VNĐ' :\r\n                                                        (regulation.currency == 'vnd' ? ' VNĐ' : ' $')\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item md={6}>\r\n                                        <div style={{dislay: 'flex', marginTop: 10}}>\r\n                                            <lable style={{ fontWeight: 700, marginRight: 8, marginLeft: 20 }}>\r\n                                                Expired Day: \r\n                                            </lable>\r\n                                            <label>\r\n                                                {row.expires == null ? '' : row.expires.indexOf('T') == -1 ? row.expires : row.expires.substring(0, row.expires.indexOf('T'))}\r\n                                            </label>\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item md={6}>\r\n                                        <div style={{dislay: 'flex', marginTop: 10}}>\r\n                                            <lable style={{ fontWeight: 700, marginRight: 8 , marginLeft: 18 }}>\r\n                                                Sold quantity: \r\n                                            </lable>\r\n                                            <label>\r\n                                                {row.quantity - row.remain}\r\n                                            </label>\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item md={6}>\r\n                                        <div style={{dislay: 'flex', marginTop: 10}}>\r\n                                            <lable style={{ fontWeight: 700, marginRight: 8, marginLeft: 20 }}>\r\n                                                Day before expired: \r\n                                            </lable>\r\n                                            <label>\r\n                                                {calculateDay(row.expires.indexOf('T') == -1 ? row.expires : row.expires.substring(0, row.expires.indexOf('T')), getCurrentDateTimeString())}\r\n                                            </label>\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item md={6}>\r\n                                        <div style={{dislay: 'flex', marginTop: 10}}>\r\n                                            <lable style={{ fontWeight: 700, marginRight: 8, marginLeft: 20 }}>\r\n                                                Profit per product: \r\n                                            </lable>\r\n                                            <label> \r\n                                                {\r\n                                                    Object.keys(regulation).length == 0 ?\r\n                                                        <div>{(row.sellPrice - row.importPrice)}</div> :\r\n                                                        regulation.currency == 'vnd' ?\r\n                                                            <div>{(row.sellPrice - row.importPrice)}</div> :\r\n                                                            <div>{((row.sellPrice - row.importPrice) / regulation.exchangeRate).toFixed(2)}</div>\r\n                                                }\r\n                                                \r\n                                            </label>\r\n                                            <label style={{ marginLeft: 4 }}>\r\n                                                {\r\n                                                    (Object.keys(regulation).length == 0)\r\n                                                        ? ' VNĐ' :\r\n                                                        (regulation.currency == 'vnd' ? ' VNĐ' : ' $')\r\n                                                }\r\n                                            </label>\r\n                                        </div>\r\n                                    </Grid>\r\n                                    <Grid item md={6}>\r\n                                        <div style={{dislay: 'flex', marginTop: 10}}>\r\n                                            <lable style={{ fontWeight: 700, marginRight: 8, marginLeft: 20 }}>\r\n                                                Real profit: \r\n                                            </lable>\r\n                                            <label> \r\n                                                {\r\n                                                    Object.keys(regulation).length == 0 ?\r\n                                                        <div>{(row.sellPrice - row.importPrice)*(row.quantity - row.remain)}</div> :\r\n                                                        regulation.currency == 'vnd' ?\r\n                                                            <div>{(row.sellPrice - row.importPrice)*(row.quantity - row.remain)}</div> :\r\n                                                            <div>{((row.sellPrice - row.importPrice)*(row.quantity - row.remain) / regulation.exchangeRate).toFixed(2)}</div>\r\n                                                }\r\n                                                \r\n                                            </label>\r\n                                            <label style={{ marginLeft: 4 }}>\r\n                                                {\r\n                                                    (Object.keys(regulation).length == 0)\r\n                                                        ? ' VNĐ' :\r\n                                                        (regulation.currency == 'vnd' ? ' VNĐ' : ' $')\r\n                                                }\r\n                                            </label>\r\n                                        </div>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                        {/* Khu này dành cho sửa xoá các kiểu */}\r\n                        <Grid style={{ marginBottom: '10px' }} item md={12} xs={12}>\r\n                            <Grid style={{ justifyContent: 'end' }} container>\r\n                                <Grid style={{ justifyContent: 'end' }} item md={2} xs={2}>\r\n                                    <Button onClick={() => editProduct(row)} style={{ fontWeight: '700', fontSize: '0.6rem', backgroundColor: '#00bfa5', color: 'white' }}>\r\n                                        <AiOutlineEdit style={{ marginRight: '5px', fontSize: '1rem', transform: 'translateY(-5%)' }}></AiOutlineEdit>\r\n                                        Edit\r\n                                    </Button>\r\n                                </Grid> \r\n                                <Grid style={{ justifyContent: 'end' }} item md={2} xs={2}>\r\n                                    <Button onClick={() => setOpenModal(true)} style={{ fontWeight: '700', fontSize: '0.6rem', backgroundColor: red[400], color: 'white' }}>\r\n                                        <FiXSquare style={{ marginRight: '5px', fontSize: '1rem', transform: 'translateY(-5%)' }}></FiXSquare>\r\n                                        Delete\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Grid>\r\n\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n            <Modal\r\n                open={openModal}\r\n                onClose={handleClose}\r\n                aria-labelledby=\"parent-modal-title\"\r\n                aria-describedby=\"parent-modal-description\"\r\n            >\r\n                <Box sx={{ ...style, width: 400 }}>\r\n                    <h2 style={{ textAlign: 'center' }} id=\"parent-modal-title\">Are you sure to delete?</h2>\r\n                    <Grid container spacing={2}>\r\n                        <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\r\n                            <Button onClick={() => deleteProduct(row)} style={{ color: 'white', backgroundColor: red[500] }}>DELETE</Button>\r\n                        </Grid>\r\n                        <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\r\n                            <Button onClick={() => setOpenModal(false)} style={{ backgroundColor: lightBlue[100] }}>CANCEL</Button>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n            </Modal>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nRow.propTypes = {\r\n    row: PropTypes.shape({\r\n        calories: PropTypes.number.isRequired,\r\n        carbs: PropTypes.number.isRequired,\r\n        fat: PropTypes.number.isRequired,\r\n        history: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                amount: PropTypes.number.isRequired,\r\n                customerId: PropTypes.string.isRequired,\r\n                date: PropTypes.string.isRequired,\r\n            }),\r\n        ).isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        price: PropTypes.number.isRequired,\r\n        protein: PropTypes.number.isRequired,\r\n    }).isRequired,\r\n};\r\n\r\nclass GoodTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            update: false\r\n        }\r\n        console.log(\"this.props.listProduct.state\", this.props.listProduct.state);\r\n    }\r\n\r\n    getTypeNamebyTypeID(typeID) {\r\n        var typeName = \"Null\";\r\n        for (var i = 0; i < this.props.typeProduct.length; i++) {\r\n            if (this.props.typeProduct[i]._id.typeID == typeID) {\r\n                typeName = this.props.typeProduct[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <TableContainer id='scroll-bar' style={{ maxHeight: '100vh', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', overflow: 'auto', overflowX: 'hidden' }} component={Paper}>\r\n                <Table aria-label=\"collapsible table\">\r\n                    <TableHead>\r\n                        <TableRow style={{ backgroundColor: 'black', color: 'white' }}>\r\n                            <TableCell></TableCell>\r\n                            <TableCell >Product ID</TableCell>\r\n                            <TableCell align=\"right\">Name</TableCell>\r\n                            <TableCell align=\"right\">Type</TableCell>\r\n                            <TableCell align=\"right\">Quantity</TableCell>\r\n                            <TableCell align=\"right\">Remain</TableCell>\r\n                            <TableCell align=\"right\">Sell Price</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {/* {listRecieptReplace ?\r\n                            listRecieptReplace.map((row) => (\r\n                                <Row key={row.MAHD} row={row} />\r\n                            )) : null\r\n                        } */}\r\n                        {\r\n                            this.props.listProduct.state == undefined ? (null) :\r\n                                this.props.listProduct.state.map((product) => (\r\n                                    product == undefined ? null :\r\n                                        <Row key={product._id.productID} row={product} />\r\n                                ))\r\n                        }\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        listProduct: state.listProduct,\r\n        typeProduct: state.typeProduct,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        deleteProductToRedux: (data) => {\r\n            dispatch({\r\n                type: \"DELETE_PRODUCT\",\r\n                data: data,\r\n            }); \r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, { withTheme: true }))(GoodTable));\r\n","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\AddGoodModal.js",["1396","1397","1398","1399","1400","1401","1402","1403","1404","1405","1406","1407","1408","1409","1410","1411","1412","1413","1414","1415","1416","1417","1418","1419","1420","1421","1422"],"import React, { Component } from 'react';\r\nimport { TextField } from '@mui/material';\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { InputLabel, Button, Modal, Grid, Card, CardHeader, Divider, CardContent} from '@mui/material';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { connect } from 'react-redux';\r\nimport GoodImage from '../../img/good-example.jpg';\r\nimport AddTypeModal from './AddTypeModal';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport ConfirmModal from './ConfirmModal';\r\nimport { GiConsoleController } from 'react-icons/gi';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n\r\n// Use for choose type:\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass AddGoodModal extends Component {\r\n    imgUrl= 'none';\r\n    dateTime= Date.now();\r\n    currentDateTime = '2021-01-02';\r\n    finishUpImage = true;\r\n    curCurrencySelect = 'vnd';\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n            change: false,\r\n        }; \r\n        //this.loadAllType(); \r\n        // this.loadAllGood();\r\n\r\n        this.currentDateTime = this.getCurrentDateTime();\r\n        typeSet = [];\r\n        // console.log(\"typeProduct\", this.props.typeProduct);\r\n        var listProductInfor = this.props.listProduct.state;\r\n        if(listProductInfor.length > 0)\r\n        {\r\n            this.generatedID = parseInt(listProductInfor[listProductInfor.length-1]._id.productID) + 1;\r\n        } \r\n        this.setState({change: !this.state.change})\r\n    }\r\n    \r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    handleAdd(){\r\n        this.props.changeAddTypeStatus();\r\n        this.props.setAddTypeStatus();\r\n    }\r\n\r\n    async profileImageChange(fileChangeEvent) {\r\n        this.setState({\r\n            imageSelect: fileChangeEvent.target.files[0],\r\n        })\r\n        this.finishUpImage = false;\r\n        const file = fileChangeEvent.target.files[0];\r\n        const { type } = file;\r\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\r\n        } else {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", fileChangeEvent.target.files[0])\r\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\r\n            await axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\r\n                .then(res => {\r\n                    this.imgUrl=res.data.url;\r\n                    this.setState({\r\n                        change: 'true'\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"Thất bại\");\r\n                })\r\n        }\r\n        this.finishUpImage = true;\r\n    }\r\n\r\n    limitText = (limitField, limitNum) => {\r\n        if (limitField.target.value.length > limitNum) {\r\n            limitField.target.value = limitField.target.value.substring(0, limitNum);\r\n        }\r\n    }\r\n\r\n    calculateDay(dateString1, dateString2)\r\n    {\r\n        return (\r\n            (new Date(dateString1)).setHours(0, 0, 0) \r\n                - \r\n            (new Date(dateString2)).setHours(0,0,0)\r\n            )\r\n            /(1000 * 60 * 60 * 24);\r\n    }\r\n\r\n    async importGood(e) {\r\n        var currentCurrency = document.querySelector('#currencySelector').value;\r\n        var isContinue = this.checkConstraint();\r\n        if(!isContinue)\r\n        {\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n        \r\n        // // Thêm hàng hoá\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            product: {\r\n                _id: {\r\n                    productID: this.generatedID,\r\n                    importDate: document.querySelector('input[name=\"importDate\"]').value,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: document.querySelector('input[name=\"goodName\"]').value,\r\n                quantity: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                remain: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                importPrice: (currentCurrency == 'vnd') ?\r\n                    document.querySelector('input[name=\"originalPrice\"]').value :\r\n                    document.querySelector('input[name=\"originalPrice\"]').value* this.props.regulation.exchangeRate,\r\n                sellPrice: (currentCurrency == 'vnd') ?\r\n                    document.querySelector('input[name=\"sellPrice\"]').value:\r\n                    document.querySelector('input[name=\"sellPrice\"]').value * this.props.regulation.exchangeRate,\r\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\r\n                imgUrl: this.imgUrl,\r\n                unit: document.querySelector('input[name=\"unit\"]').value,\r\n            }   \r\n        }\r\n        console.log(data);\r\n\r\n        axios.post(`http://localhost:5000/api/product`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Save product success\",\"success\");\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n                console.log('Bug when add product', err);\r\n            })\r\n\r\n        //Thêm vào bảng joinType nữa\r\n\r\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\r\n        for(var i = 0 ; i < typeSet.length ; i++)\r\n        {\r\n            const data1 = {\r\n                token: localStorage.getItem('token'),\r\n                productJoinType: {\r\n                    _id : {\r\n                        productID: this.generatedID,\r\n                        typeID: typeSet[i], \r\n                        importDate: document.querySelector('input[name=\"importDate\"]').value,\r\n                        storeID: this.props.infoUser.email,\r\n                    }\r\n                }\r\n            }\r\n            axios.post(`http://localhost:5000/api/product/join`, data1)\r\n                .then(res => {\r\n                    console.log(\"lưu vô bảng join thành công\");\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                })\r\n        }\r\n        this.props.changeStatusAddGood();\r\n        // Thêm vào redux\r\n        var dataRedux = {\r\n            _id: {\r\n                productID: this.generatedID.toString(),\r\n                importDate: document.querySelector('input[name=\"importDate\"]').value + 'T00:00:00.000+00:00',\r\n                storeID: this.props.infoUser.email,\r\n            },\r\n            name: document.querySelector('input[name=\"goodName\"]').value,\r\n            quantity: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n            remain: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n            importPrice: (currentCurrency == 'vnd') ?\r\n                document.querySelector('input[name=\"originalPrice\"]').value :\r\n                document.querySelector('input[name=\"originalPrice\"]').value* this.props.regulation.exchangeRate,\r\n            sellPrice: (currentCurrency == 'vnd') ?\r\n                document.querySelector('input[name=\"sellPrice\"]').value:\r\n                document.querySelector('input[name=\"sellPrice\"]').value * this.props.regulation.exchangeRate,\r\n            expires: document.querySelector('input[name=\"expiredDate\"]').value + 'T00:00:00.000+00:00',\r\n            imgUrl: this.imgUrl,\r\n            unit: document.querySelector('input[name=\"unit\"]').value,\r\n            typeIDList: typeSet,\r\n        }\r\n        // console.log(\"dataRedux\", dataRedux); \r\n        this.props.addProductToRedux(dataRedux);\r\n        // console.log(data);\r\n        console.log(\"this.props.listProduct.state\", this.props.listProduct.state)\r\n    }\r\n    \r\n    checkConstraint = () => {\r\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\r\n        // Constraint 1: Check name\r\n        var productName =  document.querySelector('input[name=\"goodName\"]').value;\r\n        if(productName.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product name can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 2: Check quantity\r\n        if(document.querySelector('input[name=\"goodQuantity\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product quantity can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value) <= 0) \r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product quantity must be greater than 0\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 3: check Unit\r\n        if(document.querySelector('input[name=\"unit\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product unit can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 4: Check import Price\r\n        if(document.querySelector('input[name=\"originalPrice\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product import price can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        else if(parseFloat(document.querySelector('input[name=\"originalPrice\"]').value) <= 0.0) \r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product import price must be greater than 0\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 5: check sell Price\r\n        if(document.querySelector('input[name=\"sellPrice\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product sell price can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        else if(parseFloat(document.querySelector('input[name=\"sellPrice\"]').value) <= 0.0) \r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product sell price must be greater than 0\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 6: Ngày nhập phải nhỏ  hơn ngày hết hạn\r\n        if (\r\n            (\r\n                new Date(document.querySelector('input[name=\"importDate\"]').value).getTime()\r\n                - \r\n                new Date(document.querySelector('input[name=\"expiredDate\"]').value).getTime()\r\n            ) >= 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('Product was expired',\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 7: Check giá gốc nhỏ hơn giá bán\r\n        if(\r\n            parseFloat(document.querySelector('input[name=\"sellPrice\"]').value) \r\n            - \r\n            parseFloat(document.querySelector('input[name=\"originalPrice\"]').value) <=0.0\r\n            ) \r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Sell price must greater than original price\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 8: check xem đã  up ảnh lên xong chưa\r\n        if(this.finishUpImage == false)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Image was not uploaded yet\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 9: Ngày nhập phải nhỏ  hơn ngày hết hạn theo regulation\r\n        if(this.props.regulation!={})\r\n        {\r\n            if (\r\n                this.calculateDay(document.querySelector('input[name=\"expiredDate\"]').value, document.querySelector('input[name=\"importDate\"]').value)\r\n                < this.props.regulation.minExpiredProduct)\r\n                // minExpiredProduct\r\n            {\r\n                this.props.hideAlert();\r\n                 this.props.showAlert('The expired day must be at least ' + this.props.regulation.minExpiredProduct + ' older than the import day'\r\n                 ,\"warning\");\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    generatedID = 0;\r\n\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName='Fuck';\r\n        for(var i = 0; i< this.props.typeProduct.length;i++)\r\n        {   \r\n            if(this.props.typeProduct[i]._id.typeID == typeID)\r\n            {\r\n                typeName = this.props.typeProduct[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    foundTypeInSet(typeID) {\r\n        for(var i = 0 ; i < typeSet.length; i++)\r\n        {\r\n            if(typeSet[i]==typeID._id.typeID) return true;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    render() {\r\n        return(\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '90%', justifyContent: 'center', marginTop: '10%' }}>   \r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"ADD GOOD\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid className=\"import-container\" container spacing={2}>\r\n                        <Grid item md={2}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                paddingLeft: '30px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden', marginTop: '15px ' }}>\r\n                                <Image style={{width: '180px',height: '180px', padding: '10px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={10}>\r\n                                    <Grid container md={12}>\r\n                                        <Grid item md={6} \r\n                                            className='input-item'\r\n                                        >\r\n                                            <div \r\n                                                className=\"input-label\"\r\n                                                style={{\r\n                                                    width: '176px'\r\n                                                }}\r\n                                            >\r\n                                                ID\r\n                                            </div>\r\n                                            <StyledTextField\r\n                                                classname='input-box' \r\n                                                type=\"text\" \r\n                                                // class=\"input-val\" \r\n                                                style = {{width: '100%'}} \r\n                                                fullWidth \r\n                                                size=\"small\" \r\n                                                name=\"goodID\" \r\n                                                variant=\"outlined\"\r\n                                                value={this.generatedID}\r\n                                                readOnly={true}\r\n                                                disabled={true}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item md={6} \r\n                                            className='input-item'\r\n                                            style={{\r\n                                                marginLeft: 0,\r\n                                                paddingLeft: 0,\r\n                                            }}\r\n                                        >\r\n                                            <div className=\"input-label\" style={{width: 138}}>Import Date</div>\r\n                                            <StyledTextField\r\n                                                classname='input-box'   \r\n                                                type=\"date\" \r\n                                                style = {{width: '100%'}} \r\n                                                fullWidth\r\n                                                name=\"importDate\"\r\n                                                size=\"small\"\r\n                                                variant=\"outlined\"\r\n                                                defaultValue={this.currentDateTime}\r\n                                            />\r\n                                        </Grid>\r\n                                        \r\n                                        <Grid item md={6} \r\n                                            className='input-item'\r\n                                        >\r\n                                            <div className=\"input-label\"style={{width: '176px'}}>Name</div>\r\n                                            <StyledTextField\r\n                                                classname='input-box'   \r\n                                                type=\"text\" \r\n                                                // class=\"input-val\" \r\n                                                style = {{width: '100%'}} \r\n                                                fullWidth\r\n                                                size=\"small\"\r\n                                                name=\"goodName\" \r\n                                                variant=\"outlined\" \r\n                                                \r\n                                                onKeyDown={(e) => this.limitText(e, 20)}\r\n                                                onKeyUp={(e) => this.limitText(e, 20)}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item md={4}\r\n                                            className='input-item'\r\n                                            style={{padding: '0px', marginLeft: '0px', marginRight: 0}}\r\n                                        >\r\n                                            <div \r\n                                                className=\"input-label\" \r\n                                                style={{width: '110px'}}\r\n                                            >\r\n                                                Quantity\r\n                                            </div>\r\n                                            <StyledTextField\r\n                                                style = {{width: '60%'}} \r\n                                                fullWidth\r\n                                                name=\"goodQuantity\" \r\n                                                variant=\"outlined\"\r\n                                                type=\"number\"\r\n                                                \r\n                                                onKeyDown={(e) => this.limitText(e, 10)}\r\n                                                onKeyUp={(e) => this.limitText(e, 10)}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item md={2}\r\n                                            className='input-item'\r\n                                            style={{\r\n                                                paddingRight: 5\r\n                                            }}\r\n                                        >\r\n                                            <div \r\n                                                className=\"input-label\"\r\n                                                style={{\r\n                                                    marginLeft: 0,\r\n                                                    paddingLeft: 0,\r\n                                                    width: 40\r\n                                                }}\r\n                                            >\r\n                                                Unit\r\n                                            </div>\r\n                                            <StyledTextField\r\n                                                classname='input-box'\r\n                                                style = {{width: '100%', marginLeft: '4px'}} \r\n                                                fullWidth\r\n                                                variant=\"outlined\"\r\n                                                type=\"text\" \r\n                                                name=\"unit\" \r\n                                                \r\n                                                onKeyDown={(e) => this.limitText(e, 10)}\r\n                                                onKeyUp={(e) => this.limitText(e, 10)}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item md={6} \r\n                                            className='input-item'\r\n                                        >\r\n                                            <div className=\"input-label\" style={{width: 176}}>Expired Date</div>\r\n                                            <StyledTextField\r\n                                                classname='input-box'   \r\n                                                type=\"date\" \r\n                                                style = {{width: '100%'}} \r\n                                                fullWidth\r\n                                                size=\"small\"\r\n                                                name=\"expiredDate\" \r\n                                                variant=\"outlined\"\r\n                                                defaultValue={this.currentDateTime}\r\n                                            />\r\n                                        </Grid>\r\n                                        <Grid item md={6} className='input-item' style={{marginLeft: -8}}>\r\n                                            <div className=\"input-label\" style={{width: 138}}>Currency</div>\r\n                                            <StyledTextField\r\n                                                // fullWidth\r\n                                                id=\"currencySelector\"\r\n                                                name=\"currency\"\r\n                                                variant=\"outlined\"\r\n                                                style = {{width: '100%'}} \r\n                                                select\r\n\r\n                                                SelectProps={{ native: true }}\r\n                                                onChange={(event) => {\r\n                                                    this.curCurrencySelect = event.target.value;\r\n                                                    this.setState({change: !this.state.change})\r\n                                                }}\r\n                                            >\r\n                                                <option value=\"vnd\">\r\n                                                    VNĐ\r\n                                                </option>\r\n                                                {\r\n                                                    this.props.regulation != {} ?\r\n                                                    <option value=\"dollar\">\r\n                                                        $\r\n                                                    </option>\r\n                                                    : (null)\r\n                                                }\r\n                                                \r\n                                            </StyledTextField>\r\n                                        </Grid>\r\n                                        <Grid item md={6}\r\n                                            className='input-item'\r\n                                        >\r\n                                            <div className=\"input-label\" style={{width: 189}}>Original Price</div>\r\n                                            <StyledTextField\r\n                                                classname='input-box'\r\n                                                style = {{width: '100%', marginRight: 8}} \r\n                                                fullWidth\r\n                                                name=\"originalPrice\" \r\n                                                variant=\"outlined\"\r\n                                                type=\"number\" \r\n                                                onKeyDown={(e) => this.limitText(e, 10)}\r\n                                                onKeyUp={(e) => this.limitText(e, 10)}\r\n                                            />\r\n                                            <div style={{width: 30}}>\r\n                                                { this.curCurrencySelect == 'vnd' ? <div>VNĐ</div> : <div>$</div>}\r\n                                            </div>\r\n                                            \r\n                                        </Grid>\r\n                                        <Grid item md={6}\r\n                                            className='input-item'\r\n                                            style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\r\n                                        >\r\n                                            <div \r\n                                                className=\"input-label\"\r\n                                                style={{width: '150px'}}\r\n                                            >\r\n                                                Sell Price\r\n                                            </div>\r\n                                            <StyledTextField\r\n                                                classname='input-box'\r\n                                                style = {{width: '100%', marginLeft: '4px',marginRight:'8px'}} \r\n                                                fullWidth\r\n                                                name=\"sellPrice\" \r\n                                                variant=\"outlined\"\r\n                                                type=\"number\" \r\n                                                onKeyDown={(e) => this.limitText(e, 10)}\r\n                                                onKeyUp={(e) => this.limitText(e, 10)}\r\n                                            />\r\n                                            { this.curCurrencySelect == 'vnd' ? <div>VNĐ</div> : <div>$</div>}\r\n                                        </Grid>\r\n                                        \r\n                                        <Grid item md={12}\r\n                                            className='input-item'\r\n                                        >\r\n                                            <div \r\n                                                className=\"input-label\"\r\n                                                style={{width:129}}\r\n                                            >\r\n                                                Product Type\r\n                                            </div>\r\n                                            <FormControl sx={{ minWidth: 120 }}>\r\n                                                <Select\r\n                                                    value={this.state.type}\r\n                                                    onChange={(event) => {\r\n                                                        this.setState({type: event.target.value});\r\n                                                        if(!typeSet.includes(event.target.value))\r\n                                                        {\r\n                                                            typeSet.push(event.target.value);\r\n                                                        }\r\n                                                        this.setState({change: !this.state.change})\r\n                                                    }}\r\n                                                    style={{\r\n                                                        height: 36,\r\n                                                    }}\r\n                                                >\r\n                                                    {\r\n                                                        this.props.typeProduct.length== 0 ? <MenuItem value={'none'}>None</MenuItem>:\r\n                                                        this.props.typeProduct.map((type) =>\r\n                                                            this.foundTypeInSet(type) ? null :\r\n                                                            <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\r\n                                                        )\r\n                                                    }   \r\n                                                </Select> \r\n                                            </FormControl>\r\n                                            <Button onClick={() => this.handleAdd()}>\r\n                                                <AiFillPlusCircle\r\n                                                    size={28}\r\n                                                    style={{\r\n                                                        fontSize: 28,\r\n                                                        margin: 0,\r\n                                                        padding: 0,\r\n                                                        width: 28,\r\n                                                        height: 28\r\n                                                    }}    \r\n                                                />\r\n                                            </Button>\r\n                                            <div className='all-type-container'>\r\n                                                {\r\n                                                    Array.from(typeSet).map((type) =>\r\n                                                        <div className='type-container'>\r\n                                                            \r\n                                                            <CancelIcon\r\n                                                                className='close-icon'\r\n                                                                size={10}\r\n                                                                onClick={() => {\r\n                                                                    typeSet = typeSet.filter(function(item) {\r\n                                                                        return item != type;\r\n                                                                    })\r\n                                                                    console.log(typeSet);\r\n                                                                    this.setState({type: 'none'});\r\n                                                                }}\r\n                                                    \r\n                                                            />\r\n                                                            <span className='type-title'>\r\n                                                                {this.getTypeNamebyTypeID(type)}\r\n                                                            </span>\r\n                                                        </div>\r\n                                                        \r\n                                                    )\r\n                                                }\r\n                                            </div>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                            </Grid>\r\n                        </Grid> \r\n                    </CardContent>\r\n                    <Divider />    \r\n                    <div\r\n                        style={{\r\n                            display: 'flex',\r\n                            justifyContent: 'space-evenly',\r\n                            margin: 10,\r\n                            paddingBottom: 10,\r\n                        }}\r\n                    >\r\n                        <Button className=\"btn btn-primary\" style={{backgroundColor: 'red'}} variant=\"contained\" onClick={(e) => this.props.changeStatusAddGood()}>\r\n                            Cancel\r\n                        </Button>\r\n                        <Button className=\"btn btn-primary\" variant=\"contained\" onClick={(e) => this.importGood(e)}>\r\n                            IMPORT\r\n                        </Button> \r\n                    </div>\r\n                                   \r\n                </Card>    \r\n                {this.props.addTypeStatus ? (\r\n                    <div className=\"modal-add\">\r\n                        <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                        <AddTypeModal></AddTypeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.confirmStatus ? (\r\n                    <div className=\"modal-add\">\r\n                        <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                        <ConfirmModal></ConfirmModal>\r\n                    </div>\r\n                ): null}\r\n            </form>\r\n        );        \r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        typeProduct: state.typeProduct,\r\n        listProduct: state.listProduct,\r\n        regulation: state.regulationReducer,\r\n        statusDarkmode: state.statusDarkmode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar\r\n            })\r\n        },\r\n        setAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_IMPORT_GOOD\",\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        getProductToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_AND_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        getProductType: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        changeStatusAddGood: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_GOOD_STATUS\",\r\n            }); \r\n        },\r\n        addProductToRedux: (data) => {\r\n            dispatch({\r\n                type: \"ADD_PRODUCT\",\r\n                data: data,\r\n            }); \r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddGoodModal);\r\n","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\TypeManager.js",["1423","1424","1425","1426","1427","1428","1429","1430"],"import React from 'react';\r\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\nimport Button from '@mui/material/Button';\r\nimport { IoIosAdd } from \"react-icons/io\";\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nfunction TypeManager(props) {\r\n    const dispatch = useDispatch()\r\n    const darkmode = useSelector(state => state.statusDarkmode)\r\n\r\n    const handleEditType = () => {\r\n        dispatch({\r\n            type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n        });\r\n    }\r\n\r\n    const handleAdd = () => {\r\n        dispatch({\r\n            type: \"SET_ADD_TYPE_STATUS\",\r\n        });\r\n        dispatch({\r\n            type: \"CHANGE_ADD_TYPE_STATUS\",\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <Grid item md={12} sm={12}  >\r\n                <Card>\r\n                    <CardHeader style={{ height: 56, color: !darkmode ? '#0091ea' :'white', backgroundColor: !darkmode ? '#efeeef' :'#455a64'}} title=\"Type Manager\" />\r\n                    <Divider></Divider>\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                <Grid item md={6} sm={12}>\r\n                                    <Button style={{ backgroundColor: '#0d6efd', width:'100%' }} onClick={() => handleAdd()} variant=\"contained\">\r\n                                        <BiPlusMedical color={'white'} size={16} style={{marginRight: 4}}/>\r\n                                        add type\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item md={6} sm={12}>\r\n                                    <Button style={{ backgroundColor: 'yellowgreen', width:'100%' }} onClick={() => handleEditType()} variant=\"contained\">\r\n                                        All types\r\n                                    </Button>\r\n                                </Grid>\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default TypeManager;","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\EditTypeModal.js",["1431","1432","1433","1434","1435","1436"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Modal } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit} from 'react-icons/bi';\r\nimport { TiDelete } from \"react-icons/ti\";\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\nimport TypeInfo from './TypeInfo';\r\nclass EditTypeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            change: false,\r\n        }\r\n    }\r\n    confirm = () => {\r\n        // Thực hiện các lệnh xử lý tại đây\r\n        this.props.changeConfirmStatus();\r\n    }\r\n    cancel = () => {\r\n        // this.props.changeConfirmStatus();\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    \r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"All Good Type\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid container item md={12} xs={12} spacing={0}>\r\n                                { this.props.typeProduct.map((type) => (\r\n                                    <TypeInfo type={type}></TypeInfo>\r\n                                ))}\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Thoát\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        editTypeStatus: state.editTypeStatus,\r\n        addTypeStatus: state.addTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        infoUser: state.infoUser,\r\n        typeProductValue: state.typeProductValue,\r\n        typeProduct: state.typeProduct,\r\n        statusDarkmode: state.statusDarkmode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        setEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_EDIT_TYPE_STATUS\",\r\n            })\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        typeToUpdate: (data) => {\r\n            dispatch({\r\n                type: \"UPDATE_PRODUCT_TYPE\",\r\n                _id: {\r\n                    typeID: data._id.typeID,\r\n                    storeID: data._id.storeID,\r\n                },\r\n                name: data.name\r\n            })\r\n        },\r\n        changeStatusUpdateType: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_TYPE_STATUS\",\r\n            }); \r\n        },\r\n        deleteTypeFromRedux: (data) => {\r\n            dispatch({\r\n                type: \"DELETE_TYPE\",\r\n                data: data\r\n            });\r\n            \r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTypeModal);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\AddTypeModal.js",["1437","1438","1439","1440","1441","1442"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Alert } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel, GiVampireCape } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nvar listTypeInfor = [];\r\n\r\n\r\n\r\nclass AddTypeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            change: 'false'\r\n        }\r\n        // this.getAllTypeList();\r\n        listTypeInfor = this.props.typeProduct;\r\n    }\r\n    storeID = \"\";\r\n    typeList = [];\r\n\r\n    addType = () => {\r\n        if(this.checkConstraint(this.typeName)==false)  return;\r\n        var genTypeID = 0;\r\n        if(listTypeInfor.length>0)\r\n        {\r\n            genTypeID = parseInt(listTypeInfor[listTypeInfor.length-1]._id.typeID) + 1;\r\n        } \r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productType: {\r\n                _id:{\r\n                    typeID: genTypeID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: this.typeName,\r\n            }    \r\n        }\r\n        axios.post(`http://localhost:5000/api/product/type`, data)\r\n            .then(res => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Save product type success\",\"success\");\r\n                //TODO: Cập nhật token ở đây nữa\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Add type failed\",\"warning\");\r\n            })\r\n        this.props.addTypeToReducer(data.productType);\r\n        this.props.changeAddTypeStatus();\r\n    }\r\n    \r\n    checkConstraint(typeName) {\r\n        console.log(\"check name\", typeName);\r\n        //Constraint 1: Check name\r\n        for(var i=0;i<listTypeInfor.length;i++)\r\n        {\r\n            if(listTypeInfor[i].name==typeName)\r\n            {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Duplicate type name\",\"warning\");\r\n                return false;\r\n            }\r\n        }        \r\n        // Constraint 2: Not blank\r\n        if(typeName.length==0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Type name can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n    cancel = () => {\r\n        this.props.changeAddTypeStatus();\r\n    }\r\n\r\n    handle = () => {\r\n        this.addType();\r\n    }\r\n    typeName = \"\";\r\n\r\n    changeTypeName(e)\r\n    {\r\n        this.typeName = e.target.value;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '11', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader \r\n                        style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} \r\n                        title={\"Add Type\"}\r\n                        />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid \r\n                            container \r\n                            spacing={2}\r\n                            justifyContent={'center'}\r\n                            alignItems={'center'}\r\n                        >\r\n                            <Grid item md={2} xs={12}>\r\n                                TypeName\r\n                            </Grid>\r\n                            <Grid item md={10} xs={12}>\r\n                                <TextField\r\n                                    id=\"outlined-basic\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    required\r\n                                    type=\"text\"\r\n                                    name=\"typeName\"\r\n                                    defaultValue={this.typeName}\r\n                                    onChange={(e) => this.changeTypeName(e)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button \r\n                            style={{ backgroundColor: 'yellowgreen' }} \r\n                            onClick={() => this.handle()}\r\n                            variant=\"contained\" \r\n                            startIcon={<BiPlusMedical />}\r\n                        >\r\n                            Add type\r\n                        </Button>\r\n                        <Button \r\n                            style={{ backgroundColor: 'red' }} \r\n                            // onClick={() => this.editShift()}\r\n                            onClick={() => this.cancel()}\r\n                            variant=\"contained\" \r\n                            startIcon={<GiCancel />}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        typeProductValue: state.typeProductValue,\r\n        typeProduct: state.typeProduct,\r\n        statusDarkmode: state.statusDarkmode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        addTypeToReducer: (data) => {\r\n            dispatch({\r\n                type: \"ADD_TYPE\",\r\n                data: data,\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTypeModal);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\ConfirmModal.js",["1443","1444","1445","1446","1447","1448"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nclass ConfirmModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    confirm = () => {\r\n        // Thực hiện các lệnh xử lý tại đây\r\n        this.props.changeConfirmStatus();\r\n        this.props.setConfirm();\r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeConfirmStatus();\r\n        this.props.setQuit();\r\n    }\r\n\r\n    getMessage = ()  => {\r\n        var message = \"Cái này chưa code\";\r\n        switch(this.props.confirmCode)\r\n        {\r\n            case 'confirm-delete-good':\r\n                message = \"Are you sure to delete this product ?\";\r\n            case 'confirm-import-good':\r\n                message = \"Are you sure to import this product ?\";\r\n        }\r\n        return (\r\n            <div>\r\n                {message}\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        console.log(this.props.objectEditShift);\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={12} xs={12}>\r\n                                {this.getMessage()}\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.confirm()} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                            Xác nhận\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Hủy\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        confirmStatus: state.confirmStatus,\r\n        deleteStatus: state.deleteStatus,\r\n        confirmCode: state.confirmCode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setConfirm: () => {\r\n            dispatch({\r\n                type: \"CONFIRM\",\r\n            });\r\n        },\r\n        setQuit: () => {\r\n            dispatch({\r\n                type: \"QUIT\",\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmModal);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\UpdateGoodModal.js",["1449","1450","1451","1452","1453","1454","1455","1456","1457","1458","1459","1460","1461","1462","1463","1464","1465","1466","1467","1468","1469","1470","1471","1472","1473","1474","1475","1476","1477","1478","1479","1480","1481","1482","1483","1484","1485","1486","1487","1488"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport GoodImage from './goodExample.jpg';\r\nimport AddTypeModal from './AddTypeModal';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport ConfirmModal from './ConfirmModal';\r\n\r\nvar productTypes =[];\r\nvar listTypeInfor=[];\r\n// typeSet chứa id của các cái type\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass UpdateGoodModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            goodID : \"\",\r\n            change: false,\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n            exchangeRate: Object.keys(this.props.regulation).length== 0 ? 1 : this.props.regulation.currency == 'vnd' ? 1 : this.props.regulation.exchangeRate,\r\n        }; \r\n        typeSet = [];\r\n        this.loadInitialData();\r\n        this.loadAllType();\r\n        this.loadCurrentTypes();\r\n        console.log(\"ListProduct\", this.props.listProduct)\r\n    }\r\n    imgUrl='none';\r\n    goodID='';\r\n    importDate='';\r\n    name='';\r\n    imgUrl='';\r\n    quantity = 0;\r\n    remain = 0;\r\n    unit = \"\";\r\n    importPrice = \"\";\r\n    sellPrice = \"\";\r\n    expire =\"\";\r\n    finishUpImage = true;\r\n    soldProduct =0;\r\n\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        listTypeInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n        productTypes=[];\r\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\r\n        {\r\n            productTypes.push(listTypeInfor[i].name);\r\n        }\r\n        this.setState({change: true});\r\n    }\r\n\r\n    async loadCurrentTypes() {\r\n        // Get hết các cái join của sản phẩm\r\n        var allJoinMatch = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n                \"_id.productID\": this.goodID,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, \r\n        {\r\n            params: {...data1}\r\n        })\r\n            .then(res => {\r\n                allJoinMatch = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        console.log(\"Các join\",allJoinMatch);\r\n        // Thêm vào trên cái bảng typeSet\r\n        for(var i = 0 ; i < allJoinMatch.length ; i ++)\r\n        {\r\n            typeSet.push(allJoinMatch[i]._id.typeID);\r\n        }\r\n        this.setState({change: !this.state.change});\r\n    }\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName='';\r\n        for(var i = 0; i<listTypeInfor.length;i++)\r\n        {   \r\n            if(listTypeInfor[i]._id.typeID == typeID)\r\n            {\r\n                typeName = listTypeInfor[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    calculateDay(dateString1, dateString2)\r\n    {\r\n        return (\r\n            (new Date(dateString1)).setHours(0, 0, 0) \r\n                - \r\n            (new Date(dateString2)).setHours(0,0,0)\r\n            )\r\n            /(1000 * 60 * 60 * 24);\r\n    }\r\n\r\n    limitText = (limitField, limitNum) => {\r\n        if (limitField.target.value.length > limitNum) {\r\n            limitField.target.value = limitField.target.value.substring(0, limitNum);\r\n        }\r\n    }\r\n\r\n    curCurrencySelect = 'vnd';\r\n\r\n    checkConstraint = () => {\r\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\r\n        // Constraint 1: Check name\r\n        var productName =  document.querySelector('input[name=\"goodName\"]').value;\r\n        if(productName.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product name can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 2: Check quantity\r\n        if(document.querySelector('input[name=\"goodQuantity\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product quantity can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value) <= 0) \r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product quantity must be greater than 0\",\"warning\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value ) - this.soldProduct < 0) \r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product quantity must be greater than sold quantity\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 3: check Unit\r\n        if(document.querySelector('input[name=\"unit\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product unit can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 4: Check import Price\r\n        if(document.querySelector('input[name=\"originalPrice\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product import price can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        else if(parseFloat(document.querySelector('input[name=\"originalPrice\"]').value) <= 0) \r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product import price must be greater than 0\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 5: check sell Price\r\n        if(document.querySelector('input[name=\"sellPrice\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product sell price can't be left blanked\",\"warning\");\r\n            return false;\r\n        }\r\n        else if(parseFloat(document.querySelector('input[name=\"sellPrice\"]').value) <= 0) \r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product sell price must be greater than 0\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 6: Ngày nhập phải nhỏ  hơn ngày hết hạn và ngày hết hạn, ngày nhập phải khác null\r\n        if (\r\n            (\r\n                new Date(document.querySelector('input[name=\"importDate\"]').value).getTime()\r\n                - \r\n                new Date(document.querySelector('input[name=\"expiredDate\"]').value).getTime()\r\n            ) >= 0\r\n        )\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product was expired\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 7: Check giá gốc nhỏ hơn giá bán\r\n        if(\r\n            parseInt(document.querySelector('input[name=\"sellPrice\"]').value) \r\n            - \r\n            parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <=0\r\n            ) \r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Product sell price must be greater than product import price\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 8: check xem đã  up ảnh lên xong chưa\r\n        if(this.finishUpImage == false)\r\n        {\r\n            this.props.hideAlert();\r\n\t\t\tthis.props.showAlert(\"Image was not uploaded yet\",\"warning\");\r\n            return false;\r\n        }\r\n         // Constraint 9: Ngày nhập phải nhỏ  hơn ngày hết hạn theo regulation\r\n         if(this.props.regulation!={})\r\n         {\r\n             if (\r\n                 this.calculateDay(document.querySelector('input[name=\"expiredDate\"]').value, document.querySelector('input[name=\"importDate\"]').value)\r\n                 < this.props.regulation.minExpiredProduct)\r\n                 // minExpiredProduct\r\n             {\r\n                 this.props.hideAlert();\r\n                 this.props.showAlert('The expired day must be at least ' + this.props.regulation.minExpiredProduct + ' older than the import day'\r\n                 ,\"warning\");\r\n                 return false;\r\n             }\r\n         }\r\n        return true;\r\n    }\r\n\r\n    handleAdd(){\r\n        this.props.changeAddTypeStatus();\r\n    }\r\n\r\n    async updateGood() {\r\n        var currentCurrency = document.querySelector('#currencySelector').value;\r\n        var isContinue = this.checkConstraint();\r\n        if(!isContinue)\r\n        {\r\n            return;\r\n        }\r\n        \r\n        var productInfo = this.props.infoUpdate;\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            product: {\r\n                _id: {\r\n                    productID: document.querySelector('input[name=\"goodID\"]').value,\r\n                    importDate: productInfo._id.importDate,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: this.name,\r\n                quantity: this.quantity,\r\n                remain: this.quantity - this.soldProduct,\r\n                importPrice: (currentCurrency == 'vnd') ?\r\n                    document.querySelector('input[name=\"originalPrice\"]').value :\r\n                    document.querySelector('input[name=\"originalPrice\"]').value* this.props.regulation.exchangeRate,\r\n                sellPrice: (currentCurrency == 'vnd') ?\r\n                    document.querySelector('input[name=\"sellPrice\"]').value:\r\n                    document.querySelector('input[name=\"sellPrice\"]').value * this.props.regulation.exchangeRate,\r\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\r\n                imgUrl: this.imgUrl,\r\n                unit: document.querySelector('input[name=\"unit\"]').value,\r\n            }\r\n        }\r\n        console.log(\"Updategood\",data);\r\n        axios.put(`http://localhost:5000/api/product`, data)\r\n            .then(res => {\r\n                console.log(\"Update success\");\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Update product success\",\"success\");\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        // Get hết các cái join của sản phẩm\r\n        var allJoinMatch = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n                \"_id.productID\": this.goodID,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, \r\n        {\r\n            params: {...data1}\r\n        })\r\n            .then(res => {\r\n                allJoinMatch = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        console.log(allJoinMatch);\r\n        // Xoá các join liên quan đến sản phẩm\r\n        var allProductJoin = [];\r\n        for(var i = 0 ; i < allJoinMatch.length; i++)\r\n        {\r\n            allProductJoin.push({\r\n                productID: this.goodID,\r\n                typeID: allJoinMatch[i]._id.typeID,\r\n                importDate: allJoinMatch[i]._id.importDate,\r\n                storeID: this.props.infoUser.email,\r\n            });\r\n        }\r\n        const dataJoin = {\r\n            token: localStorage.getItem('token'),\r\n            productJoinTypes: allProductJoin,      \r\n        }\r\n\r\n        console.log(dataJoin);\r\n\r\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\r\n            .then(res => {\r\n                console.log(\"delete join success\");\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        // Thêm các cái hiện tại\r\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\r\n        for(var i = 0 ; i < typeSet.length ; i++)\r\n        {\r\n            const data1 = {\r\n                token: localStorage.getItem('token'),\r\n                productJoinType: {\r\n                    _id : {\r\n                        productID: this.goodID,\r\n                        typeID: typeSet[i], \r\n                        importDate: productInfo._id.importDate,\r\n                        storeID: this.props.infoUser.email,\r\n                    }\r\n                }\r\n            }\r\n            axios.post(`http://localhost:5000/api/product/join`, data1)\r\n                .then(res => {\r\n                    console.log(\"lưu vô bảng join thành công\");\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                })\r\n        }\r\n\r\n        // Thêm vào redux\r\n        var reduxData = {\r\n            _id: {\r\n                productID: productInfo._id.productID,\r\n                importDate: productInfo._id.importDate, \r\n                storeID: this.props.infoUser.email,\r\n            },\r\n            name: this.name,\r\n            quantity: this.quantity,\r\n            remain: this.quantity - this.soldProduct,\r\n            importPrice: (currentCurrency == 'vnd') ?\r\n                document.querySelector('input[name=\"originalPrice\"]').value :\r\n                document.querySelector('input[name=\"originalPrice\"]').value* this.props.regulation.exchangeRate,\r\n            sellPrice: (currentCurrency == 'vnd') ?\r\n                document.querySelector('input[name=\"sellPrice\"]').value:\r\n                document.querySelector('input[name=\"sellPrice\"]').value * this.props.regulation.exchangeRate,\r\n            expires: document.querySelector('input[name=\"expiredDate\"]').value + 'T00:00:00.000+00:00',\r\n            imgUrl: this.imgUrl,\r\n            unit: document.querySelector('input[name=\"unit\"]').value,\r\n            typeIDList: typeSet,\r\n        }\r\n        this.props.updateProductToRedux(reduxData);\r\n        this.props.changeUpdateGoodStatus();\r\n    }\r\n\r\n    remain = 0;\r\n\r\n    cancel = () => {\r\n        this.props.changeUpdateGoodStatus();\r\n    }\r\n\r\n    loadInitialData = () => {\r\n        // Load các dữ liệu ban đầu của form ở đây để mà update nhưng mà bị lỗi 401 mẹ\r\n        //Xử lý sampleData\r\n        var productInfo = this.props.infoUpdate;\r\n        console.log(\"expires\", this.props.infoUpdate.expires);\r\n\r\n        this.goodID = (productInfo._id.productID == null) ? '' : productInfo._id.productID;\r\n        this.importDate = productInfo._id.importDate;\r\n        this.importDate = this.importDate == null ? '': this.importDate.indexOf('T')==-1? this.importDate :this.importDate.substring(0, this.importDate.indexOf('T'));\r\n        this.name = productInfo.name == null ? '' : productInfo.name;\r\n        this.imgUrl = productInfo.imgUrl == null ? '' : productInfo.imgUrl;\r\n        this.quantity = productInfo.quantity == null ? '' : productInfo.quantity;\r\n        this.remain = productInfo.remain;\r\n        this.soldProduct = productInfo.quantity - productInfo.remain;\r\n        this.unit = productInfo.unit == null ? '' : productInfo.unit;\r\n        this.importPrice = productInfo.importPrice == null ? '' : productInfo.importPrice;\r\n        this.sellPrice = productInfo.sellPrice == null ? '' : productInfo.sellPrice;\r\n        this.expire = productInfo.expires; //substring(0,productInfo.expire.indexOf('T'));\r\n        this.expire = (this.expire == null) ? '' : this.expire.indexOf('T') == -1 ? this.expire : this.expire.substring(0, this.expire.indexOf('T'));\r\n        console.log(\"this.expire\",this.expire );\r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    profileImageChange = (fileChangeEvent) => {\r\n        this.setState({\r\n            imageSelect: fileChangeEvent.target.files[0],\r\n        })\r\n        this.finishUpImage = false;\r\n        const file = fileChangeEvent.target.files[0];\r\n        const { type } = file;\r\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\r\n        } else {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", fileChangeEvent.target.files[0])\r\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\r\n            axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\r\n                .then(res => {\r\n                    this.imgUrl=res.data.url;\r\n                    this.setState({\r\n                        change: 'true'\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"Thất bại\");\r\n                })\r\n        }\r\n        this.finishUpImage = true;\r\n    }\r\n\r\n    changeName = (e) => {\r\n        this.name = e.target.value;\r\n    }\r\n\r\n    changeValue = (e, variable) =>\r\n    {\r\n        if(variable=='quantity')\r\n        {\r\n            this.quantity = e.target.value;\r\n        }\r\n    }\r\n\r\n    foundTypeInSet(typeID) {\r\n        for(var i = 0 ; i < typeSet.length; i++)\r\n        {\r\n            if(typeSet[i]==typeID._id.typeID) return true;\r\n        }\r\n        return false;\r\n    }\r\n    render() {\r\n        \r\n        return (\r\n            <form style={{ zIndex: '10', width: '90%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"UPDATE GOOD\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card \r\n                            >\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '165px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            name=\"goodID\" \r\n                                            variant=\"outlined\" \r\n                                            value={this.goodID}\r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                        style={{\r\n                                            marginLeft: 0,\r\n                                            paddingLeft: 0\r\n                                        }}\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 128}}>Import Date</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\" \r\n                                            style = {{width: '100%', paddingRight: 8}} \r\n                                            fullWidth\r\n                                            name=\"importDate\"\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.importDate}\r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '165px'}}>Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            name=\"goodName\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.name}\r\n                                            onChange={(e) => this.changeName(e)} \r\n                                            onKeyDown={(e) => this.limitText(e, 20)}\r\n                                            onKeyUp={(e) => this.limitText(e, 20)}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                        style={{padding: '0px', marginLeft: '0px'}}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\" \r\n                                            style={{width: '106px'}}\r\n                                        >\r\n                                            Quantity\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            style = {{width: '60%'}} \r\n                                            fullWidth\r\n                                            name=\"goodQuantity\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\" \r\n                                            defaultValue={this.quantity}\r\n                                            onChange={(e) => this.changeValue(e, 'quantity')}\r\n                                            onKeyDown={(e) => this.limitText(e, 10)}\r\n                                            onKeyUp={(e) => this.limitText(e, 10)}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                        style={{\r\n                                            paddingRight: 24\r\n                                        }}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                marginLeft: 0,\r\n                                                paddingLeft: 4\r\n                                            }}\r\n                                        >\r\n                                            Unit\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '100%', marginLeft: '4px'}} \r\n                                            fullWidth\r\n                                            variant=\"outlined\"\r\n                                            type=\"text\" \r\n                                            name=\"unit\" \r\n                                            defaultValue={this.unit}\r\n                                            onKeyDown={(e) => this.limitText(e, 10)}\r\n                                            onKeyUp={(e) => this.limitText(e, 10)}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            name=\"expiredDate\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.expire} \r\n                                        />\r\n                                        {/* <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"sellPrice\" \r\n                                            variant=\"outlined\"\r\n                                            value={this.expire}\r\n                                        /> */}\r\n                                    </Grid>\r\n                                    <Grid item md={6} className='input-item'>\r\n                                        <div className=\"input-label\" style={{width: 106, marginLeft: '-8px'}}>Currency</div>\r\n                                        <StyledTextField\r\n                                            // fullWidth\r\n                                            id=\"currencySelector\"\r\n                                            name=\"currency\"\r\n                                            variant=\"outlined\"\r\n                                            style = {{width: '70%'}} \r\n                                            select\r\n\r\n                                            SelectProps={{ native: true }}\r\n                                            onChange={(event) => {\r\n                                                var preChoice = this.curCurrencySelect;\r\n                                                this.curCurrencySelect = event.target.value;\r\n                                                if(preChoice != this.curCurrencySelect)\r\n                                                {\r\n                                                    if(this.curCurrencySelect == 'vnd')\r\n                                                    {\r\n                                                        this.sellPrice= (this.sellPrice*this.props.regulation.exchangeRate).toFixed(0)\r\n                                                        this.importPrice= (this.props.regulation.exchangeRate*this.importPrice).toFixed(0);\r\n                                                    }\r\n                                                    else\r\n                                                    {\r\n                                                        this.sellPrice= (this.sellPrice/this.props.regulation.exchangeRate).toFixed(2);\r\n                                                        this.importPrice= (this.importPrice/this.props.regulation.exchangeRate).toFixed(2);\r\n                                                    }\r\n                                                }\r\n                                                this.setState({change: !this.state.change,});\r\n                                            }}\r\n                                        >\r\n                                            <option value=\"vnd\">\r\n                                                VNĐ\r\n                                            </option>\r\n                                            {\r\n                                                Object.keys(this.props.regulation).length == 0 ?\r\n                                                <option value=\"dollar\">\r\n                                                    $\r\n                                                </option>\r\n                                                : (null)\r\n                                            }\r\n                                            \r\n                                        </StyledTextField>\r\n                                    </Grid>\r\n                                    <Grid item md={6}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 128}}>Original Price</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"originalPrice\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\"\r\n                                            // onChange={(this.)}\r\n                                            onChange={(e) => {\r\n                                                this.importPrice = e.target.value;\r\n                                                this.setState({\r\n                                                    change: !this.state.change,\r\n                                                });\r\n                                            }}\r\n                                            \r\n                                            onKeyDown={(e) => this.limitText(e, 10)}\r\n                                            onKeyUp={(e) => this.limitText(e, 10)}\r\n                                            value={this.importPrice}\r\n                                        />\r\n                                        { this.curCurrencySelect == 'vnd' ? <div>VNĐ</div> : <div>$</div>}\r\n                                    </Grid>\r\n                                    <Grid item md={6}\r\n                                        className='input-item'\r\n                                        style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{width: '109px'}}\r\n                                        >\r\n                                            Sell Price\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"sellPrice\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\" \r\n                                            onChange={(e) => {\r\n                                                this.sellPrice = e.target.value;\r\n                                                this.setState({\r\n                                                    change: !this.state.change,\r\n                                                });\r\n                                            }}\r\n                                            value={this.sellPrice}\r\n                                            \r\n                                            onKeyDown={(e) => this.limitText(e, 10)}\r\n                                            onKeyUp={(e) => this.limitText(e, 10)}\r\n                                        />\r\n                                        { this.curCurrencySelect == 'vnd' ? <div>VNĐ</div> : <div>$</div>}\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={10}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{width:132}}\r\n                                        >\r\n                                            Product Type\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 120 }}>\r\n                                        {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                        <Select\r\n                                            value={this.state.type}\r\n                                            onChange={(event) => {\r\n                                                this.setState({type: event.target.value});\r\n                                                if(!typeSet.includes(event.target.value))\r\n                                                {\r\n                                                    typeSet.push(event.target.value);\r\n                                                }\r\n                                            }}\r\n                                            style={{\r\n                                                height: 36,\r\n                                            }}\r\n                                        >\r\n                                            {\r\n                                                this.props.typeProduct.length== 0 ? <MenuItem value={'none'}>None</MenuItem>:\r\n                                                this.props.typeProduct.map((type) =>\r\n                                                    this.foundTypeInSet(type) ? null :\r\n                                                    <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\r\n                                                )\r\n                                            }   \r\n                                        </Select> \r\n                                    </FormControl>\r\n                                        <Button onClick={() => this.handleAdd()}>\r\n                                            <AiFillPlusCircle\r\n                                                size={28}\r\n                                                style={{\r\n                                                    fontSize: 28,\r\n                                                    margin: 0,\r\n                                                    padding: 0,\r\n                                                    width: 28,\r\n                                                    height: 28\r\n                                                }}    \r\n                                            />\r\n                                        </Button>\r\n                                        <div className='all-type-container'>\r\n                                            {\r\n                                                Array.from(typeSet).map((type) =>\r\n                                                    <div item md={7} className='type-container'>\r\n                                                        <CancelIcon\r\n                                                            className='close-icon'\r\n                                                            size={10}\r\n                                                            onClick={() => {\r\n                                                                typeSet = typeSet.filter(function(item) {\r\n                                                                    return item != type;\r\n                                                                })\r\n                                                                console.log(typeSet);\r\n                                                                this.setState({type: 'none'});\r\n                                                            }}\r\n                                                \r\n                                                        />\r\n                                                        <span className='type-title'>\r\n                                                            {this.getTypeNamebyTypeID(type)}\r\n                                                        </span>\r\n                                                    </div>\r\n                                                    \r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                    </Grid>\r\n                                    {/* <Grid item md={10}\r\n                                        className='input-item'\r\n                                    >\r\n\r\n                                    </Grid> */}\r\n                                    <Grid item md={12}>\r\n                                        <Divider/>\r\n                                    </Grid>\r\n                                \r\n                                    <Grid item md={12}\r\n                                        className='input-item'\r\n                                        style={{display: 'flex', justifyContent: 'space-evenly'}}\r\n                                    >\r\n                                        <Button variant=\"contained\"  style={{marginLeft: 10, backgroundColor: 'red'}} onClick={() => this.props.changeUpdateGoodStatus()}>\r\n                                            Cancel\r\n                                        </Button>\r\n                                        <Button variant=\"contained\" style={{marginLeft: 10}} onClick={() => this.updateGood()}>\r\n                                            UPDATE\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                        \r\n                    \r\n                </div>\r\n                </Card>\r\n                {this.props.addTypeStatus ? (\r\n                        <div className=\"modal-add\" style={{ zIndex: '12'}}>\r\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <AddTypeModal></AddTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                {this.props.confirmStatus ? (\r\n                    <div className=\"modal-add\">\r\n                        <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                        <ConfirmModal></ConfirmModal>\r\n                    </div>\r\n                ): null}\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        updateGoodStatus: state.updateGoodStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUpdate: state.infoUpdate,\r\n        infoUser: state.infoUser,\r\n        typeProduct: state.typeProduct,\r\n        listProduct: state.listProduct,\r\n        regulation: state.regulationReducer,\r\n        statusDarkmode: state.statusDarkmode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateGoodStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setUpdateConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_UPDATE_GOOD\",\r\n            }); \r\n        },\r\n        updateProductToRedux: (data) => {\r\n            dispatch({\r\n                type: \"UPDATE_PRODUCT\",\r\n                data: data,\r\n            }); \r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateGoodModal);\r\n\r\n               ","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\SearchBar.js",["1489","1490","1491","1492"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { MdClear} from \"react-icons/md\";\r\nimport { AiOutlineSearch } from \"react-icons/ai\";\r\nimport { withStyles } from '@material-ui/styles';\r\nimport classNames from \"classnames\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    // height: theme.spacing(6),\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    height: \"80px\",\r\n  },\r\n//   iconButton: {\r\n//     color: theme.palette.action.active,\r\n//     transform: \"scale(1, 1)\",\r\n//     transition: theme.transitions.create([\"transform\", \"color\"], {\r\n//       duration: theme.transitions.duration.shorter,\r\n//       easing: theme.transitions.easing.easeInOut,\r\n//     }),\r\n//   },\r\n  iconButtonHidden: {\r\n    transform: \"scale(0, 0)\",\r\n    \"& > $icon\": {\r\n      opacity: 0,\r\n    },\r\n  },\r\n  searchIconButton: {\r\n    // marginRight: theme.spacing(-6),\r\n  },\r\n//   icon: {\r\n//     transition: theme.transitions.create([\"opacity\"], {\r\n//       duration: theme.transitions.duration.shorter,\r\n//       easing: theme.transitions.easing.easeInOut,\r\n//     }),\r\n//   },\r\n  input: {\r\n    width: \"100%\",\r\n  },\r\n  searchContainer: {\r\n    margin: \"4px 8px 4px 8px\",\r\n    height: \"40px\",\r\n    // width: `calc(100% - ${theme.spacing(6 + 4)}px)`, // 6 button + 4 margin\r\n  },\r\n});\r\nconst SearchBar = React.forwardRef(\r\n  (\r\n    {\r\n      cancelOnEscape,\r\n      className,\r\n      classes,\r\n      closeIcon,\r\n      disabled,\r\n      onCancelSearch,\r\n      onRequestSearch,\r\n      searchIcon,\r\n      style,\r\n      ...inputProps\r\n    },\r\n    ref\r\n  ) => {\r\n    const inputRef = React.useRef();\r\n    const [value, setValue] = React.useState(inputProps.value);\r\n\r\n    React.useEffect(() => {\r\n      setValue(inputProps.value);\r\n    }, [inputProps.value]);\r\n\r\n    const handleFocus = React.useCallback(\r\n      (e) => {\r\n        if (inputProps.onFocus) {\r\n          inputProps.onFocus(e);\r\n        }\r\n      },\r\n      [inputProps.onFocus]\r\n    );\r\n\r\n    const handleBlur = React.useCallback(\r\n      (e) => {\r\n        setValue((v) => v.trim());\r\n        if (inputProps.onBlur) {\r\n          inputProps.onBlur(e);\r\n        }\r\n      },\r\n      [inputProps.onBlur]\r\n    );\r\n\r\n    const handleInput = React.useCallback(\r\n      (e) => {\r\n        setValue(e.target.value);\r\n        if (inputProps.onChange) {\r\n          inputProps.onChange(e.target.value);\r\n        }\r\n      },\r\n      [inputProps.onChange]\r\n    );\r\n\r\n    const handleCancel = React.useCallback(() => {\r\n      setValue(\"\");\r\n      if (onCancelSearch) {\r\n        onCancelSearch();\r\n      }\r\n    }, [onCancelSearch]);\r\n\r\n    const handleRequestSearch = React.useCallback(() => {\r\n      if (onRequestSearch) {\r\n        onRequestSearch(value);\r\n      }\r\n    }, [onRequestSearch, value]);\r\n\r\n    const handleKeyUp = React.useCallback(\r\n      (e) => {\r\n        if (e.charCode === 13 || e.key === \"Enter\") {\r\n          handleRequestSearch();\r\n        } else if (\r\n          cancelOnEscape &&\r\n          (e.charCode === 27 || e.key === \"Escape\")\r\n        ) {\r\n          handleCancel();\r\n        }\r\n        if (inputProps.onKeyUp) {\r\n          inputProps.onKeyUp(e);\r\n        }\r\n      },\r\n      [handleRequestSearch, cancelOnEscape, handleCancel, inputProps.onKeyUp]\r\n    );\r\n\r\n    React.useImperativeHandle(ref, () => ({\r\n      focus: () => {\r\n        inputRef.current.focus();\r\n      },\r\n      blur: () => {\r\n        inputRef.current.blur();\r\n      },\r\n    }));\r\n\r\n    return (\r\n      <Paper className={classNames(classes.root, className)} style={{height: '40px'}}>\r\n        <div className={classes.searchContainer}>\r\n          <Input\r\n            {...inputProps}\r\n            inputRef={inputRef}\r\n            onBlur={handleBlur}\r\n            value={value}\r\n            onChange={handleInput}\r\n            onKeyUp={handleKeyUp}\r\n            onFocus={handleFocus}\r\n            fullWidth\r\n            className={classes.input}\r\n            disableUnderline\r\n            disabled={disabled}\r\n          />\r\n        </div>\r\n        <IconButton\r\n          onClick={handleRequestSearch}\r\n          className={classNames(classes.iconButton, classes.searchIconButton, {\r\n            [classes.iconButtonHidden]: value !== \"\",\r\n          })}\r\n          disabled={disabled}\r\n        >\r\n          {React.cloneElement(searchIcon, {\r\n            classes: { root: classes.icon },\r\n          })}\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={handleCancel}\r\n          className={classNames(classes.iconButton, {\r\n            [classes.iconButtonHidden]: value === \"\",\r\n          })}\r\n          disabled={disabled}\r\n        >\r\n          {React.cloneElement(closeIcon, {\r\n            classes: { root: classes.icon },\r\n          })}\r\n        </IconButton>\r\n      </Paper>\r\n    );\r\n  }\r\n);\r\n\r\nSearchBar.defaultProps = {\r\n  className: \"\",\r\n  closeIcon: <MdClear/>,\r\n  disabled: false,\r\n  placeholder: \"Search\",\r\n  searchIcon: <AiOutlineSearch />,\r\n  style: null,\r\n  value: \"\",\r\n};\r\n\r\nSearchBar.propTypes = {\r\n  cancelOnEscape: PropTypes.bool,\r\n  classes: PropTypes.object.isRequired,\r\n  className: PropTypes.string,\r\n  closeIcon: PropTypes.node,\r\n  disabled: PropTypes.bool,\r\n  onCancelSearch: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n  onRequestSearch: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  searchIcon: PropTypes.node,\r\n  style: PropTypes.object,\r\n  value: PropTypes.string,\r\n};\r\n\r\nexport default withStyles(styles)(SearchBar);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodTable.js",["1493","1494","1495","1496","1497","1498","1499"],"import * as React from 'react';\r\nimport { Component } from 'react';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport GoodRow from './TableRow';\r\n\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    } \r\n})\r\n\r\n\r\nvar listProductInfor = [];\r\nvar joinTypeInfor = [];\r\nvar listTypeInfor = [];\r\n\r\nclass GoodTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            update: false\r\n        }\r\n        console.log(\"this.props.listProduct.state\", this.props.listProduct.state);\r\n    }\r\n\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName=\"Null\";\r\n        for(var i = 0; i < this.props.typeProduct.length;i++)\r\n        {   \r\n            if(this.props.typeProduct[i]._id.typeID == typeID)\r\n            {\r\n                typeName = this.props.typeProduct[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div id=\"scroll-bar\" style={{height: '550px', width: '100%', overflowY: 'auto'}}>\r\n                <TableContainer id=\"scroll-bar\" component={Paper}>\r\n                    <Table className={classes.goodTable} aria-label=\"collapsible table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ID</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">GoodName</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Quantity</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Sell Price</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ImportTime</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell}/>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                this.props.listProduct.state == undefined ? (null):\r\n                                this.props.listProduct.state.map((product) => (\r\n                                    product==undefined ? null :\r\n                                    <GoodRow data={product} />\r\n                                ))\r\n                            }   \r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        listProduct: state.listProduct,\r\n        typeProduct: state.typeProduct,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(GoodTable));\r\n","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Profile\\DarkMode.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeInformation.js",["1500","1501","1502","1503","1504","1505","1506","1507","1508","1509","1510","1511","1512","1513","1514","1515"],"import {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport { Card, CardHeader, Table, Grid, TextField, \r\n    TableCell, TableContainer, Button, InputLabel,\r\n    Paper, TableRow, TableHead } from '@mui/material';\r\nimport { Image } from 'cloudinary-react';\r\n\r\n\r\nclass EmployeeInformation extends Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.loadInitialData();\r\n    }\r\n\r\n    currentEmployee ;\r\n\r\n    loadInitialData() {\r\n        this.currentEmployee = this.getEmployeeInformationByID(this.props.employeeID.id);\r\n    }\r\n\r\n    getEmployeeInformationByID(employeeID)\r\n    {\r\n        for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n        {\r\n            var currentEmployee = this.props.listEmployee.employees[i];\r\n            if(currentEmployee._id.employeeID==employeeID)\r\n            {\r\n                console.log(\"currentEmployee\", currentEmployee)\r\n                return currentEmployee;\r\n            }\r\n        }\r\n        return {};\r\n    }\r\n\r\n    toReadableDay(dayToConvert) {\r\n        var days = dayToConvert.split('-');\r\n        return days[2] + '/' + days[1] + '/'+ days[0];\r\n    }\r\n\r\n    render() {\r\n      return (\r\n        <div>\r\n            <Grid container>\r\n                <Grid item xs={2} display={{\r\n                    display: 'flex',\r\n                    // alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    marginTop: 20\r\n                }}>\r\n                    {\r\n                        this.currentEmployee.imgUrl =='none' ? \r\n                        <div\r\n                            style={{\r\n                                backgroundImage: \"url('https://res.cloudinary.com/databaseimg/image/upload/v1638852707/pskte7yrug4ifktds96c.png'\",\r\n                                 width: '80%', height: 0, paddingTop: '80%', backgroundSize: 'cover'\r\n                            }} \r\n                        >\r\n                        </div>\r\n                        : \r\n                        <div \r\n                            style={{\r\n                                backgroundImage: \"url('\" + this.currentEmployee.imgUrl + \"')\",\r\n                                width: '80%', height: 0, paddingTop: '80%', backgroundSize: 'cover'\r\n                            }}\r\n                        > \r\n                        </div>\r\n                    }\r\n                </Grid>\r\n                <Grid item xs={8}>\r\n                    <Grid container style={{marginTop: 14}}>\r\n                        <Grid item xs={6} class=\"property-display\">\r\n                            <lable class=\"property-name\">\r\n                                Username:\r\n                            </lable>\r\n                            <div class=\"property-val\">\r\n                                {this.currentEmployee._id.employeeID}\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={6} class=\"property-display\">\r\n                            <lable class=\"property-name\">\r\n                                Password:\r\n                            </lable>\r\n                            <div class=\"property-val\">\r\n                                {this.currentEmployee.password}\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={6} class=\"property-display\">\r\n                            <lable class=\"property-name\">\r\n                                First Name:\r\n                            </lable>\r\n                            <div class=\"property-val\">\r\n                                {this.currentEmployee.firstName}\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={6} class=\"property-display\">\r\n                            <lable class=\"property-name\">\r\n                                Last Name:\r\n                            </lable>\r\n                            <div class=\"property-val\">\r\n                                {this.currentEmployee.lastName}\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={6} class=\"property-display\">\r\n                            <lable class=\"property-name\">\r\n                                CardID:\r\n                            </lable>\r\n                            <div class=\"property-val\">\r\n                                {this.currentEmployee.cardID}\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={6} class=\"property-display\">\r\n                            <lable class=\"property-name\">\r\n                                Phone Number:\r\n                            </lable>\r\n                            <div class=\"property-val\">\r\n                                {this.currentEmployee.phoneNumber}\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={6} class=\"property-display\">\r\n                            <lable class=\"property-name\">\r\n                                Address:\r\n                            </lable>\r\n                            <div class=\"property-val\">\r\n                                {this.currentEmployee.address}\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={6} class=\"property-display\">\r\n                            <lable class=\"property-name\">\r\n                                StartDate:\r\n                            </lable>\r\n                            <div class=\"property-val\">\r\n                                {this.toReadableDay(this.currentEmployee.startDate.indexOf('T')!=-1 ? \r\n                                this.currentEmployee.startDate.substring(0, this.currentEmployee.startDate.indexOf('T')) :\r\n                                this.currentEmployee.startDate)\r\n                                }\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={6} class=\"property-display\">\r\n                            <lable class=\"property-name\">\r\n                                Email:\r\n                            </lable>\r\n                            <div class=\"property-val\">\r\n                                {this.currentEmployee.email}\r\n                            </div>\r\n                        </Grid>\r\n                        <Grid item xs={6} class=\"property-display\">\r\n                            <lable class=\"property-name\">\r\n                                Birthday:\r\n                            </lable>\r\n                            <div class=\"property-val\">\r\n                                {this.toReadableDay(this.currentEmployee.dateOfBirth.indexOf('T')!=-1 ? \r\n                                this.currentEmployee.dateOfBirth.substring(0, this.currentEmployee.dateOfBirth.indexOf('T')) : \r\n                                this.currentEmployee.dateOfBirth)}\r\n                            </div>\r\n                        </Grid>\r\n                        \r\n                    </Grid>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n      );\r\n    }\r\n    \r\n  }\r\n  const mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        listEmployee: state.listEmployee,\r\n        employeeID: state.currentEmployeeViewValue,\r\n    }\r\n  }\r\n  \r\n  const mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n       \r\n    }\r\n  }\r\n  export default connect(mapStateToProps, mapDispatchToProps)(EmployeeInformation);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\EmployeePartials\\FixedCalendarCell.js",["1516","1517","1518","1519","1520","1521","1522","1523","1524","1525","1526","1527","1528","1529"],"import {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { withStyles } from '@material-ui/styles';\r\n// material\r\nimport { TableCell, List, ListItem, ListItemButton, ListItemText} from '@mui/material';\r\nimport '../../css/EmployeeManager.css';\r\n\r\n//icon\r\nimport { IoIosAdd,} from \"react-icons/io\";\r\nimport {  AiFillCloseCircle} from \"react-icons/ai\";\r\n\r\n\r\nimport AddEmployeeToShift from './AddEmployeeToShift';\r\n// ----------------------------------------------------------------------\r\nconst styles = theme =>  ({\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '80px',\r\n    } \r\n})\r\n\r\nclass FixedCalendarCell extends Component {\r\n  isOpen=false;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: false\r\n    }\r\n    \r\n  }\r\n\r\n \r\n\r\n  handleChange() {\r\n    this.isOpen = !this.isOpen;\r\n    this.setState({change : !this.state.change})\r\n  }\r\n\r\n  getEmployeeNameByID(employeeID)\r\n  {\r\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n      {\r\n          var currentEmployee = this.props.listEmployee.employees[i];\r\n          if(currentEmployee._id.employeeID==employeeID)\r\n          {\r\n            return currentEmployee.firstName;\r\n          }\r\n      }\r\n      return \"Can't get name\";\r\n  }\r\n\r\n  findEmployeeNameByID(employeeID)\r\n  {\r\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n      {\r\n          var currentEmployee = this.props.listEmployee.employees[i];\r\n          if(currentEmployee._id.employeeID==employeeID)\r\n          {\r\n            return true;\r\n          }\r\n      }\r\n      return false;\r\n  }\r\n\r\n  getCurrentDateTime()\r\n  {\r\n      var currentDate = new Date();\r\n      var day = (currentDate.toString().split(' '))[2];\r\n      if(day.length < 2)\r\n      {\r\n          day = '0' + day;\r\n      }\r\n      var month = (new Date().getMonth() + 1).toString();\r\n      if(month.length<2)\r\n      {\r\n          month = '0' + month;\r\n      }\r\n      return new Date().getFullYear() + '-' + month + '-' + day;\r\n  }\r\n\r\n  async addThisShiftAssign(employeeID)\r\n  {\r\n      const data = {\r\n          token: localStorage.getItem('token'),\r\n          shiftAssign: {\r\n            _id: {\r\n              dateInWeek: this.props.dayIndex,\r\n              storeID: this.props.infoUser.email,\r\n              shiftType: {\r\n                  _id: {\r\n                      shiftID: this.props.shiftID,\r\n                      storeID: this.props.infoUser.email,\r\n                  },\r\n              },\r\n              employee: {\r\n                  _id: {\r\n                      employeeID: employeeID,\r\n                      storeID: this.props.infoUser.email,\r\n                  },\r\n              },\r\n            },\r\n          }\r\n          \r\n      }\r\n      await axios.post(`http://localhost:5000/api/employee/shift-assign`, data)\r\n        .then(res => {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Save shift assign success\",\"success\");\r\n        })\r\n        .catch(err => {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            console.log('bug when add shift-assign',err);\r\n        })\r\n      this.handleChange();\r\n      this.props.AddShiftAssign(data.shiftAssign);\r\n  }\r\n\r\n  sendShiftInfoToRedux(){\r\n     var shiftAssign = {\r\n        _id: {\r\n          dateInWeek: this.props.dayIndex,\r\n          storeID: this.props.infoUser.email,\r\n          shiftType: {\r\n              _id: {\r\n                  shiftID: this.props.shiftID,\r\n                  storeID: this.props.infoUser.email,\r\n              },\r\n          },\r\n        }\r\n     }\r\n     this.props.changeCurrentShiftValue(shiftAssign);\r\n  }\r\n\r\n  removeShift(employeeID)\r\n  {\r\n    const data1 = {\r\n        token: localStorage.getItem('token'),\r\n        shiftAssign: {\r\n          _id: {\r\n            dateInWeek: this.props.dayIndex,\r\n            storeID: this.props.infoUser.email,\r\n            shiftType: {\r\n                _id: {\r\n                    shiftID: this.props.shiftID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n            },\r\n            employee: {\r\n                _id: {\r\n                    employeeID: employeeID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n            },\r\n          }\r\n      },\r\n    }\r\n      axios.delete(`http://localhost:5000/api/employee/shift-assign`,{data: data1})\r\n      .then(res => {\r\n        this.props.hideAlert();\r\n        this.props.showAlert(\"Delete shift assign success\",\"success\");\r\n      })\r\n      .catch(err => {\r\n        this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n      })\r\n      const data = {\r\n          _id: {\r\n            dateInWeek: this.props.dayIndex,\r\n            storeID: this.props.infoUser.email,\r\n            shiftType: {\r\n                _id: {\r\n                    shiftID: this.props.shiftID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n            },\r\n            employee: {\r\n                _id: {\r\n                    employeeID: employeeID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n            },\r\n        },\r\n      }\r\n      \r\n      // console.log(\"data\", data);\r\n      this.props.RemoveShiftAssign(data);\r\n      \r\n  }\r\n\r\n  findShiftInShiftAssign()\r\n  {\r\n      var listShiftAssign = this.props.listShiftAssign;\r\n      for(var i = 0 ; i < listShiftAssign.length ; i++)\r\n      {\r\n          if(this.props.shiftID == listShiftAssign[i]._id.shiftType._id.shiftID && \r\n            this.props.dayIndex == listShiftAssign[i]._id.dateInWeek && \r\n            this.findEmployeeNameByID(listShiftAssign[i]._id.employee._id.employeeID))\r\n            { \r\n                return true;\r\n            }\r\n      }\r\n      return false;\r\n  }\r\n\r\n  findEmployeeInShift(employeeID)\r\n  {\r\n      var listShiftAssign = this.props.listShiftAssign;\r\n      for(var i = 0 ; i < listShiftAssign.length; i++)\r\n      {\r\n          if(this.props.shiftID == listShiftAssign[i]._id.shiftType._id.shiftID \r\n            && this.props.dayIndex == listShiftAssign[i]._id.dateInWeek\r\n            && listShiftAssign[i]._id.employee._id.employeeID == employeeID)\r\n          return true;\r\n      }\r\n      return false;\r\n  }\r\n  \r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n        <TableCell \r\n            id=\"scroll-bar\"\r\n            className={classes.goodTable_Cell} \r\n            style={{\r\n                position: 'relative',\r\n                backgroundColor: !this.findShiftInShiftAssign() ?'#ff6057': 'yellowgreen',\r\n                height: '80px',\r\n            }}\r\n            // ref={this.myRef}    \r\n        >\r\n            <div\r\n                style={{\r\n                    position: 'absolute',\r\n                    right: 0,\r\n                    top: 0,\r\n                    borderRadius: '50%',\r\n                    backgroundColor: '#fff',\r\n                    width: 22,\r\n                    height: 22,\r\n                    textAlign: 'center'\r\n                }}\r\n                className='add-employee-to-shift-button'\r\n            >\r\n                <IoIosAdd \r\n                    size={30}\r\n                    style={{\r\n                        position: 'absolute',\r\n                        right: -4,\r\n                        top: -3,\r\n                    }}\r\n                    color='#0096FF'\r\n                    onClick={() => { \r\n                        this.sendShiftInfoToRedux(); \r\n                        this.props.changeAddEmployeeToShiftStatus()\r\n                      }\r\n                    }\r\n                >    \r\n                </IoIosAdd>\r\n                \r\n            </div>\r\n            { \r\n              this.props.listShiftAssign.map((item) => \r\n                (\r\n                  ( this.props.shiftID == item._id.shiftType._id.shiftID \r\n                    && this.props.dayIndex == item._id.dateInWeek \r\n                    && this.findEmployeeNameByID(item._id.employee._id.employeeID))\r\n                  ? <div style={{\r\n                            backgroundColor: \"#fff\", \r\n                            padding: 10, \r\n                            width: '100%',\r\n                            position: 'relative',\r\n                            marginBottom: 4\r\n                            }}\r\n                    >\r\n                      <span>\r\n                          {item._id.employee._id.employeeID + ' - ' \r\n                          + this.getEmployeeNameByID(item._id.employee._id.employeeID)}\r\n                      </span>\r\n                      <AiFillCloseCircle\r\n                          style={{\r\n                            color: 'red',\r\n                            position: 'absolute',\r\n                            right: 0, \r\n                            top: 0,\r\n                          }} \r\n                          size={20}\r\n                          onClick={() => this.removeShift(item._id.employee._id.employeeID)}\r\n                      ></AiFillCloseCircle>\r\n                    </div>\r\n                  : null\r\n                )\r\n              )\r\n            }\r\n            {\r\n              // this.isOpen \r\n              // ? \r\n              // // Đây là cái bảng chọn nhân viên\r\n              // <List \r\n              //   style={{\r\n              //     position: 'absolute',\r\n              //     right: 0,\r\n              //     top: 20,\r\n              //     zIndex: 10,\r\n              //     maxHeight: 100,\r\n              //     overflowY: 'auto',\r\n              //     width: 140,\r\n              //     backgroundColor: '#fff',\r\n              //     width: 200\r\n              //   }}\r\n              //   id=\"scroll-bar\"\r\n              // >\r\n              //   {/* <div style={{height: 12, backgroundColor:'#333'}}></div> */}\r\n              //   {\r\n              //     this.props.listEmployee.employees.map((item) =>\r\n              //       this.findEmployeeInShift(item._id.employeeID) ? null :\r\n              //       <ListItem style={{display: 'flex', flexDirection: 'column'}} disablePadding height={30} onClick={() => this.addThisShiftAssign(item._id.employeeID)}>\r\n              //           <ListItemButton>\r\n              //               <ListItemText>\r\n              //                 <span style={{fontSize: 14}}>{item._id.employeeID + ' - ' + item.firstName}</span>\r\n                                \r\n              //               </ListItemText>\r\n              //           </ListItemButton>\r\n              //           <div style={{\r\n              //               height: 2,\r\n              //               width: '100%',\r\n              //               border: '1px solid #333'\r\n              //           }}></div>\r\n              //       </ListItem>\r\n              //     )\r\n              //   }\r\n              // </List>\r\n              // : null\r\n            }\r\n            {/* {this.props.statusAddEmployeeToShift\r\n            ? \r\n                <div \r\n                    className=\"modal-add\"\r\n                >\r\n                    <div onClick={() => {\r\n                          console.log(\"Đã được đóng\")\r\n                          this.props.changeAddEmployeeToShiftStatus();\r\n                      }} className=\"modal-overlay\"></div>\r\n                    <AddEmployeeToShift\r\n                        style={{\r\n                            marginTop: 0\r\n                        }}\r\n                    >\r\n                    </AddEmployeeToShift>\r\n                </div>\r\n            : null\r\n            } */}\r\n        </TableCell>\r\n        \r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        listEmployee: state.listEmployee,\r\n        listShiftAssign: state.listShiftAssign,\r\n        infoUser: state.infoUser,\r\n        statusAddEmployeeToShift: state.statusAddEmployeeToShift,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    AddShiftAssign: (data) => {\r\n      dispatch({\r\n          type: \"ADD_NEW_SHIFT_ASSIGN\",\r\n          data: data,\r\n      });\r\n    },\r\n    RemoveShiftAssign: (data) => {\r\n      dispatch({\r\n          type: \"DELETE_SHIFT_ASSIGN\",\r\n          data: data,\r\n      });\r\n    },\r\n    showAlert: (message, typeMessage) => {\r\n      dispatch({\r\n        type: \"SHOW_ALERT\",\r\n        message: message,\r\n        typeMessage: typeMessage,\r\n      })\r\n    },\r\n    hideAlert: () => {\r\n      dispatch({\r\n        type: \"HIDE_ALERT\",\r\n      })\r\n    },\r\n    changeAddEmployeeToShiftStatus: () => {\r\n      dispatch({\r\n          type: \"CHANGE_ADD_EMPLOYEE_TO_SHIFT_STATUS\",\r\n      });\r\n    },\r\n    changeCurrentShiftValue: (data) => {\r\n      dispatch({\r\n        type: \"SET_CURRENT_SHIFT_VALUE\",\r\n        data: data\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(FixedCalendarCell));","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\TableRow.js",["1530","1531","1532","1533","1534","1535","1536","1537","1538","1539","1540","1541","1542","1543","1544","1545"],"import * as React from 'react';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Image } from 'cloudinary-react';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport GoodImage from './goodExample.jpg';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { useDispatch } from 'react-redux'\r\nimport axios from 'axios';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { StaticRouter } from 'react-router-dom';\r\n\r\nconst styles = theme =>  ({\r\n    goodTable_Cell:{\r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: 4,\r\n        color: '#333'\r\n    }\r\n});\r\n\r\n\r\n\r\nclass GoodRow extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            update: false,\r\n            change: false,\r\n        }\r\n        console.log('regulation', this.props.regulation)\r\n    }\r\n    isOpen = false;\r\n    row = {};\r\n    setOpen(value) {\r\n        this.isOpen = value;\r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    async deleteProduct(row) {\r\n        // Xoá sản phẩm\r\n        console.log(\"row\", row)\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            products:\r\n            [\r\n                {\r\n                    productID: row._id.productID,\r\n                    importDate: row._id.importDate,\r\n                    storeID: row._id.storeID,\r\n                }\r\n            ]\r\n            \r\n        }\r\n        axios.delete(`http://localhost:5000/api/product`,{data: data})\r\n            .then(res => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Delete product success\",\"success\");\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        \r\n        // Get hết các cái join của sản phẩm\r\n        var allJoinMatch = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": row._id.storeID,\r\n                \"_id.productID\": row._id.productID,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, \r\n        {\r\n            params: {...data1}\r\n        })\r\n            .then(res => {\r\n                allJoinMatch = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        console.log(allJoinMatch);\r\n        // Xoá các join liên quan đến sản phẩm\r\n        var allProductJoin = [];\r\n        for(var i = 0 ; i < allJoinMatch.length; i++)\r\n        {\r\n            allProductJoin.push({\r\n                productID: row._id.productID,\r\n                typeID: allJoinMatch[i]._id.typeID,\r\n                importDate: allJoinMatch[i]._id.importDate,\r\n                storeID: row._id.storeID,\r\n            });\r\n        }\r\n        const dataJoin = {\r\n            token: localStorage.getItem('token'),\r\n            productJoinTypes: allProductJoin,      \r\n        }\r\n\r\n        console.log(dataJoin);\r\n\r\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\r\n            .then(res => {\r\n                console.log(\"delete join success\");\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        \r\n        console.log(\"this.props.data\",this.props.data)\r\n        this.props.deleteProductToRedux(this.props.data);\r\n    }\r\n\r\n    getTypeList(typeList)\r\n    {\r\n        var joinType = '';\r\n        for(var i = 0 ; i < typeList.length; i++)\r\n        {\r\n            for(var j = 0 ; j < this.props.typeProduct.length; j++)\r\n            {\r\n                if(this.props.typeProduct[j]._id.typeID == typeList[i])\r\n                {\r\n                    joinType += \" \" + this.props.typeProduct[j].name;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return joinType;\r\n    }\r\n\r\n    render () {\r\n        const { classes } = this.props;\r\n        const row = this.props.data;\r\n        // console.log(row);\r\n        return (\r\n            <React.Fragment>\r\n            <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row._id.productID}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.name}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.quantity}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\r\n                <div style={{display: 'flex'}}>\r\n                    {\r\n                        Object.keys(this.props.regulation).length == 0 ?\r\n                        <div>{row.sellPrice}</div> :\r\n                        this.props.regulation.currency == 'vnd' ?\r\n                        <div>{row.sellPrice}</div> :\r\n                        <div>{(row.sellPrice/this.props.regulation.exchangeRate).toFixed(2)}</div>\r\n                    }\r\n                    \r\n                    <div style={{marginLeft: 4}}>\r\n                        {\r\n                            (Object.keys(this.props.regulation).length == 0)\r\n                                ? ' VNĐ':\r\n                            (this.props.regulation.currency == 'vnd' ? ' VNĐ' : ' $')\r\n                        }\r\n                    </div>\r\n                </div>\r\n                </TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\r\n                    {/* {row.importTime == null ? '' : row.importTime.substring(0,row.importTime.indexOf('T'))} */}\r\n                    {row._id.importDate == null ? '': row._id.importDate.indexOf('T')==-1 ? row._id.importDate: row._id.importDate.substring(0,row._id.importDate.indexOf('T'))}\r\n                </TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\r\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => this.setOpen(!this.isOpen)}>\r\n                        {this.isOpen ? (<KeyboardArrowUpIcon />) : (<KeyboardArrowDownIcon />)}\r\n                    </IconButton>\r\n                </TableCell>\r\n            </TableRow>\r\n            {\r\n                this.isOpen ?\r\n                <TableRow>\r\n                    <TableCell className={classes.goodTable_Cell} style={{ padding: 0, height: 100}} colSpan={8}>\r\n                        {/* <Collapse in={open} timeout=\"auto\" unmountOnExit> */}\r\n                        <Collapse in={true} timeout=\"auto\" unmountOnExit>\r\n                            <Box sx={{ margin: 1 }}>\r\n                                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                    Other information\r\n                                </Typography>\r\n                                <div style={{display: 'flex'}}>\r\n                                    {  \r\n                                        row.imgUrl == \"none\"\r\n                                        ? <div style={{width: '100px', height: '100px', objectFit:'cover'}}><img src={GoodImage} style={{width: '100px', height: '100px', objectFit:'cover'}}/></div>\r\n                                        \r\n                                        : <div style={{width: '100px', height: '100px', objectFit:'cover'}}><Image style={{width: '100px', height: '100px', objectFit:'cover'}} cloudName=\"databaseimg\" publicId={row.imgUrl}>{row.imgUrl}</Image></div>\r\n                                    }\r\n                                    <Table>\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                <TableCell className={classes.goodTable_Cell}><div style={{color: '#333'}}>Expired Day</div></TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}><div  style={{color: '#333'}}>Original Price</div></TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div  style={{color: '#333'}}>Good Remain</div></TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div  style={{color: '#333'}}>Product Type</div></TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div style={{color: '#333'}}>Unit</div></TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">\r\n                                                    {/* {row.hidden.expires == null ? '': row.hidden.expires.substring(0,row.hidden.expires.indexOf('T'))} */}\r\n                                                    {row.expires == null ? '': row.expires.indexOf('T') ==-1 ? row.expires : row.expires.substring(0,row.expires.indexOf('T'))}\r\n                                                </TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell} >\r\n                                                    <div style={{display: 'flex'}}>\r\n                                                    {\r\n                                                        Object.keys(this.props.regulation).length == 0 ?\r\n                                                        <div>{row.importPrice}</div> :\r\n                                                        this.props.regulation.currency == 'vnd' ?\r\n                                                        <div>{row.importPrice}</div> :\r\n                                                        <div>{(row.importPrice/this.props.regulation.exchangeRate).toFixed(2)}</div>\r\n                                                    }\r\n                                                        <div style={{marginLeft: 4}}>\r\n                                                            {\r\n                                                                (Object.keys(this.props.regulation).length == 0)\r\n                                                                    ? ' VNĐ':\r\n                                                                (this.props.regulation.currency == 'vnd' ? ' VNĐ' : ' $')\r\n                                                            }\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}>{row.remain}</TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}>{this.getTypeList(row.typeIDList)}</TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}>{row.unit}</TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                    <div className=\"button-container\">\r\n                                        <Button \r\n                                            onClick={() => {\r\n                                                // Truyền cái data vào trong hàm đây luôn\r\n                                                const data = row;\r\n                                                this.props.updateProduct(data);\r\n                                                this.props.openUpdateModal();\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                        >\r\n                                            Update\r\n                                        </Button>\r\n                                        <Button \r\n                                            variant=\"contained\"\r\n                                            onClick={() => this.deleteProduct(row)}\r\n                                        >\r\n                                            Delete\r\n                                            \r\n                                        </Button>\r\n                                    </div>\r\n                                </div>  \r\n                            </Box>\r\n                        </Collapse>\r\n                    </TableCell>\r\n                </TableRow>\r\n                : null\r\n            }\r\n            \r\n            </React.Fragment>\r\n        ); \r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        listProduct: state.listProduct,\r\n        typeProduct: state.typeProduct,\r\n        regulation: state.regulationReducer,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        getProductToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_AND_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        updateProduct: (data) => {\r\n            dispatch({type: \"UPDATE_GOOD_DATA\", data});\r\n        },\r\n        openUpdateModal: (data) => {\r\n            dispatch({ type: \"CHANGE_UPDATE_GOOD_STATUS\", });\r\n        },\r\n        deleteProductToRedux: (data) => {\r\n            dispatch({\r\n                type: \"DELETE_PRODUCT\",\r\n                data: data,\r\n            }); \r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(GoodRow));","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\GoodPartials\\TypeInfo.js",["1546","1547","1548","1549","1550","1551","1552"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Modal} from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit} from 'react-icons/bi';\r\nimport { TiDelete } from \"react-icons/ti\";\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nconst style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 400,\r\n    bgcolor: 'background.paper',\r\n    border: '1px solid #000',\r\n    borderRadius: '5px',\r\n    boxShadow: 24,\r\n    pt: 2,\r\n    px: 4,\r\n    pb: 3,\r\n};\r\n\r\nclass TypeInfo extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            change: false,\r\n            openModal: false\r\n        }\r\n    }\r\n\r\n    edit = (type) => {\r\n        // this.props.setEditTypeStatus();\r\n        this.props.typeToUpdate(type);\r\n        // this.props.changeEditTypeStatus();\r\n        this.props.changeStatusUpdateType();\r\n    }\r\n\r\n    async getAllTypeList(){\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n\r\n        this.props.getProductType(result);\r\n    }\r\n\r\n    async delete(type){\r\n        console.log(\"type\", type);\r\n        this.handleClose();\r\n        this.props.changeEditTypeStatus();\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productTypes:\r\n            [\r\n                {\r\n                    typeID: type._id.typeID,\r\n                    storeID: type._id.storeID\r\n                }\r\n            ]\r\n                \r\n        }\r\n        await axios.delete(`http://localhost:5000/api/product/type`,{data: data})\r\n            .then(res => {\r\n                console.log(\"delete success\");\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n                console.log('bug when delete type',err);\r\n            })\r\n        this.props.deleteTypeFromRedux(data.productTypes[0]);\r\n        \r\n        // Ở đây mình phải cập nhật join nữa\r\n        // Phải get tất cả cái join mà có cái type là type hiện tại\r\n\r\n\r\n        var allJoinMatch = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n                \"_id.typeID\": type._id.typeID,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, \r\n        {\r\n            params: {...data1}\r\n        })\r\n            .then(res => {\r\n                allJoinMatch = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log('Bug when get join', err);\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n\r\n        var allProductJoin = [];\r\n        for(var i = 0 ; i < allJoinMatch.length; i++)\r\n        {\r\n            allProductJoin.push({\r\n                productID: allJoinMatch[i]._id.productID,\r\n                typeID: type._id.typeID,\r\n                importDate: allJoinMatch[i]._id.importDate,\r\n                storeID: this.props.infoUser.email,\r\n            });\r\n        }\r\n        \r\n        const dataJoin = {\r\n            token: localStorage.getItem('token'),\r\n            productJoinTypes: allProductJoin,      \r\n        }\r\n\r\n        console.log(dataJoin);\r\n\r\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\r\n            .then(res => {\r\n                console.log(\"delete join success\");\r\n            })\r\n            .catch(err => {\r\n                this.props.hideAlert();\r\n\t\t\t\tthis.props.showAlert(\"Something happened, restart and try again\",\"warning\");\r\n            })\r\n        \r\n        // Cập nhật các redux khi xoá join\r\n        this.props.deleteTypeProductInProduct(type._id.typeID);\r\n\r\n\r\n        // this.getAllTypeList();\r\n        console.log('this.typeProduct', this.props.typeProduct)\r\n        this.setState({change: !this.state.change})\r\n        \r\n        this.props.hideAlert();\r\n\t    this.props.showAlert(\"Delete type success   \",\"success\");\r\n    }\r\n\r\n    handleClose() {\r\n        this.setState({openModal: false});\r\n    }\r\n\r\n    openModal() {\r\n        this.setState({openModal: true});\r\n    }\r\n\r\n    type = this.props.type;\r\n\r\n    render() {\r\n        return (\r\n            <Grid md={12}>\r\n                <Grid container>\r\n                    <Grid item md={10} style={{padding: 4, paddingLeft: 20}}>\r\n                        <span>{this.type.name}</span>\r\n                    </Grid>\r\n                    <Grid item md={2}>\r\n                        <BiEdit  size={20} color={'yellowgreen'}onClick={() => this.edit(this.type)}/>\r\n                        <TiDelete size={20} color={'red'} onClick={() => this.openModal()}/>\r\n                    </Grid>           \r\n                </Grid>\r\n                \r\n                <Modal\r\n                    open={this.state.openModal}\r\n                    onClose={() => this.handleClose()}\r\n                    aria-labelledby=\"parent-modal-title\"\r\n                    aria-describedby=\"parent-modal-description\"\r\n                >\r\n                    <Box sx={{ ...style, width: 400 }}>\r\n                        <h2 style={{ textAlign: 'center' }} id=\"parent-modal-title\">Are you sure to delete?</h2>\r\n                        <Grid container spacing={2}>\r\n                            <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\r\n                                <Button onClick={() => this.delete(this.type)} style={{ color: 'white', backgroundColor: '#f44336' }}>DELETE</Button>\r\n                            </Grid>\r\n                            <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\r\n                                <Button onClick={() => this.handleClose()} style={{ backgroundColor: '#ADD8E6' }}>CANCEL</Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Modal>\r\n                <Divider></Divider>\r\n            </Grid>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps1 = (state, ownProps) => {\r\n    return {\r\n        editTypeStatus: state.editTypeStatus,\r\n        addTypeStatus: state.addTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        infoUser: state.infoUser,\r\n        typeProductValue: state.typeProductValue,\r\n        typeProduct: state.typeProduct,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps1 = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        setEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_EDIT_TYPE_STATUS\",\r\n            })\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        typeToUpdate: (data) => {\r\n            dispatch({\r\n                type: \"UPDATE_PRODUCT_TYPE\",\r\n                _id: {\r\n                    typeID: data._id.typeID,\r\n                    storeID: data._id.storeID,\r\n                },\r\n                name: data.name\r\n            })\r\n        },\r\n        changeStatusUpdateType: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_TYPE_STATUS\",\r\n            }); \r\n        },\r\n        deleteTypeFromRedux: (data) => {\r\n            dispatch({\r\n                type: \"DELETE_TYPE\",\r\n                data: data\r\n            });\r\n            \r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        deleteTypeProductInProduct: (typeID) => {\r\n            dispatch({\r\n                type: \"DELETE_TYPE_PRODUCT\",\r\n                typeID: typeID\r\n            })\r\n        },\r\n        getProductType: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps1, mapDispatchToProps1)(TypeInfo);","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\OptionYear.js",["1553"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport Grow from '@mui/material/Grow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Popper from '@mui/material/Popper';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuList from '@mui/material/MenuList';\r\nimport {BiCaretDown} from 'react-icons/bi'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nlet options = [];\r\nlet date = new Date()\r\nfor(let i = date.getFullYear();i >= 2000; i--) {\r\n    options.push(i);\r\n}\r\n\r\nexport default function OptionYear() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = React.useRef(null);\r\n  const dispatch = useDispatch()\r\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n\r\n  const handleClick = () => {\r\n    console.info(`You clicked ${options[selectedIndex]}`);\r\n  };\r\n\r\n  const handleMenuItemClick = (event, index, option) => {\r\n    console.log(option)\r\n    dispatch({\r\n      type: \"YEAR_SELECT_DASHBOARD\",\r\n      typeDashboard: option,\r\n    })\r\n    setSelectedIndex(index);\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    dispatch({\r\n      type: \"RESET_MONTH_SELECT_DASHBOARD\"\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ButtonGroup variant=\"contained\" ref={anchorRef} aria-label=\"split button\">\r\n        <Button onClick={handleClick}>{options[selectedIndex]}</Button>\r\n        <Button\r\n          size=\"small\"\r\n          aria-controls={open ? 'split-button-menu' : undefined}\r\n          aria-expanded={open ? 'true' : undefined}\r\n          aria-label=\"select merge strategy\"\r\n          aria-haspopup=\"menu\"\r\n          onClick={handleToggle}\r\n        >\r\n          <BiCaretDown />\r\n        </Button>\r\n      </ButtonGroup>\r\n      <Popper\r\n        id=\"choses-product\"\r\n        open={open}\r\n        style={{height: '500px', overflowY:'scroll'}}\r\n        anchorEl={anchorRef.current}\r\n        role={undefined}\r\n        transition\r\n        disablePortal\r\n      >\r\n        {({ TransitionProps, placement }) => (\r\n          <Grow\r\n            {...TransitionProps}\r\n            style={{\r\n              transformOrigin:\r\n                placement === 'bottom' ? 'center top' : 'center bottom',\r\n            }}\r\n          >\r\n            <Paper>\r\n              <ClickAwayListener onClickAway={handleClose}>\r\n                <MenuList id=\"split-button-menu\">\r\n                  {options.map((option, index) => (\r\n                    <MenuItem\r\n                      key={option}\r\n                      selected={index === selectedIndex}\r\n                      onClick={(event) => handleMenuItemClick(event, index, option)}\r\n                    >\r\n                      {option}\r\n                    </MenuItem>\r\n                  ))}\r\n                </MenuList>\r\n              </ClickAwayListener>\r\n            </Paper>\r\n          </Grow>\r\n        )}\r\n      </Popper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButton.js",["1554"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport Grow from '@mui/material/Grow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Popper from '@mui/material/Popper';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuList from '@mui/material/MenuList';\r\nimport {BiCaretDown} from 'react-icons/bi'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst options = ['Month', 'Week' , 'Last Week'];\r\n\r\nexport default function SplitButton() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const anchorRef = React.useRef(null);\r\n  const dispatch = useDispatch()\r\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n\r\n  const handleClick = () => {\r\n    //console.info(`You clicked ${options[selectedIndex]}`);\r\n  };\r\n\r\n  const handleMenuItemClick = (event, index, option) => {\r\n    //console.log(option)\r\n    dispatch({\r\n      type: \"TYPE_TIME_DASHBOARD\",\r\n      typeDashboard: option,\r\n    })\r\n    setSelectedIndex(index);\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleToggle = () => {\r\n    setOpen((prevOpen) => !prevOpen);\r\n  };\r\n\r\n  const handleClose = (event) => {\r\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    dispatch({\r\n      type: \"RESET_TYPE_TIME_DASHBOARD\"\r\n    })\r\n  }, [])\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ButtonGroup variant=\"contained\" ref={anchorRef} aria-label=\"split button\">\r\n        <Button onClick={handleClick}>{options[selectedIndex]}</Button>\r\n        <Button\r\n          size=\"small\"\r\n          aria-controls={open ? 'split-button-menu' : undefined}\r\n          aria-expanded={open ? 'true' : undefined}\r\n          aria-label=\"select merge strategy\"\r\n          aria-haspopup=\"menu\"\r\n          onClick={handleToggle}\r\n        >\r\n          <BiCaretDown />\r\n        </Button>\r\n      </ButtonGroup>\r\n      <Popper\r\n        open={open}\r\n        anchorEl={anchorRef.current}\r\n        role={undefined}\r\n        transition\r\n        disablePortal\r\n      >\r\n        {({ TransitionProps, placement }) => (\r\n          <Grow\r\n            {...TransitionProps}\r\n            style={{\r\n              transformOrigin:\r\n                placement === 'bottom' ? 'center top' : 'center bottom',\r\n            }}\r\n          >\r\n            <Paper>\r\n              <ClickAwayListener onClickAway={handleClose}>\r\n                <MenuList id=\"split-button-menu\">\r\n                  {options.map((option, index) => (\r\n                    <MenuItem\r\n                      key={option}\r\n                      selected={index === selectedIndex}\r\n                      onClick={(event) => handleMenuItemClick(event, index, option)}\r\n                    >\r\n                      {option}\r\n                    </MenuItem>\r\n                  ))}\r\n                </MenuList>\r\n              </ClickAwayListener>\r\n            </Paper>\r\n          </Grow>\r\n        )}\r\n      </Popper>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\OptionMonth.js",["1555"],"import * as React from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport ButtonGroup from '@mui/material/ButtonGroup';\r\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\r\nimport Grow from '@mui/material/Grow';\r\nimport Paper from '@mui/material/Paper';\r\nimport Popper from '@mui/material/Popper';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport MenuList from '@mui/material/MenuList';\r\nimport { BiCaretDown } from 'react-icons/bi'\r\nimport { useDispatch } from 'react-redux';\r\n\r\nconst options = [\r\n    {\r\n        month: 'All',\r\n        value: 0,\r\n    },\r\n    {\r\n        month: 'Jan',\r\n        value: 1,\r\n    },\r\n    {\r\n        month: 'Feb',\r\n        value: 2,\r\n    },\r\n    {\r\n        month: 'Mar',\r\n        value: 3,\r\n    },\r\n    {\r\n        month: 'Apr',\r\n        value: 4,\r\n    },\r\n    {\r\n        month: 'May',\r\n        value: 5,\r\n    },\r\n    {\r\n        month: 'Jun',\r\n        value: 6,\r\n    },\r\n    {\r\n        month: 'Jul',\r\n        value: 7,\r\n    },\r\n    {\r\n        month: 'Aug',\r\n        value: 8,\r\n    },\r\n    {\r\n        month: 'Sep',\r\n        value: 9,\r\n    },\r\n    {\r\n        month: 'Oct',\r\n        value: 10,\r\n    },\r\n    {\r\n        month: 'Nov',\r\n        value: 11,\r\n    },\r\n    {\r\n        month: 'Dec',\r\n        value: 12,\r\n    }\r\n];\r\n\r\n\r\n\r\nexport default function OptionMonth() {\r\n    const [open, setOpen] = React.useState(false);\r\n    const anchorRef = React.useRef(null);\r\n    const dispatch = useDispatch()\r\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\r\n\r\n    const handleClick = () => {\r\n        console.info(`You clicked ${options[selectedIndex]}`);\r\n    };\r\n\r\n    const handleMenuItemClick = (event, index, option) => {\r\n        dispatch({\r\n            type: \"MONTH_SELECT_DASHBOARD\",\r\n            typeDashboard: option,\r\n          })\r\n        setSelectedIndex(index);\r\n        setOpen(false);\r\n    };\r\n\r\n    const handleToggle = () => {\r\n        setOpen((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n\r\n        setOpen(false);\r\n    };\r\n\r\n    React.useEffect(() => {\r\n        dispatch({\r\n            type: \"RESET_MONTH_SELECT_DASHBOARD\"\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ButtonGroup variant=\"contained\" ref={anchorRef} aria-label=\"split button\">\r\n                <Button onClick={handleClick}>{options[selectedIndex].month}</Button>\r\n                <Button\r\n                    size=\"small\"\r\n                    aria-controls={open ? 'split-button-menu' : undefined}\r\n                    aria-expanded={open ? 'true' : undefined}\r\n                    aria-label=\"select merge strategy\"\r\n                    aria-haspopup=\"menu\"\r\n                    onClick={handleToggle}\r\n                >\r\n                    <BiCaretDown />\r\n                </Button>\r\n            </ButtonGroup>\r\n            <Popper\r\n                open={open}\r\n                anchorEl={anchorRef.current}\r\n                role={undefined}\r\n                transition\r\n                disablePortal\r\n            >\r\n                {({ TransitionProps, placement }) => (\r\n                    <Grow\r\n                        {...TransitionProps}\r\n                        style={{\r\n                            transformOrigin:\r\n                                placement === 'bottom' ? 'center top' : 'center bottom',\r\n                        }}\r\n                    >\r\n                        <Paper>\r\n                            <ClickAwayListener onClickAway={handleClose}>\r\n                                <MenuList id=\"split-button-menu\">\r\n                                    {options.map((item, index) => (\r\n                                        <MenuItem\r\n                                            key={item.value}\r\n                                            selected={index === selectedIndex}\r\n                                            onClick={(event) => handleMenuItemClick(event, index, item.value)}\r\n                                        >\r\n                                            {item.month}\r\n                                        </MenuItem>\r\n                                    ))}\r\n                                </MenuList>\r\n                            </ClickAwayListener>\r\n                        </Paper>\r\n                    </Grow>\r\n                )}\r\n            </Popper>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","D:\\Workspace\\university-project\\SE100Project\\client\\src\\Components\\Dashboard\\BaseOptionChart.js",[],"D:\\Workspace\\university-project\\SE100Project\\client\\src\\Reducer\\SellProduct\\backupBillEditReducer.js",[],{"ruleId":"1556","replacedBy":"1557"},{"ruleId":"1558","replacedBy":"1559"},{"ruleId":"1560","severity":1,"message":"1561","line":10,"column":10,"nodeType":"1562","messageId":"1563","endLine":10,"endColumn":24},{"ruleId":"1564","severity":1,"message":"1565","line":13,"column":3,"nodeType":"1566","messageId":"1567","endLine":15,"endColumn":4},{"ruleId":"1560","severity":1,"message":"1568","line":24,"column":11,"nodeType":"1562","messageId":"1563","endLine":24,"endColumn":19},{"ruleId":"1569","severity":1,"message":"1570","line":35,"column":53,"nodeType":"1571","messageId":"1572","endLine":35,"endColumn":55},{"ruleId":"1573","severity":1,"message":"1574","line":48,"column":21,"nodeType":"1562","messageId":"1575","endLine":48,"endColumn":29},{"ruleId":"1573","severity":1,"message":"1576","line":49,"column":25,"nodeType":"1562","messageId":"1575","endLine":49,"endColumn":26},{"ruleId":"1569","severity":1,"message":"1570","line":51,"column":53,"nodeType":"1571","messageId":"1572","endLine":51,"endColumn":55},{"ruleId":"1573","severity":1,"message":"1574","line":65,"column":21,"nodeType":"1562","messageId":"1575","endLine":65,"endColumn":29},{"ruleId":"1573","severity":1,"message":"1576","line":66,"column":25,"nodeType":"1562","messageId":"1575","endLine":66,"endColumn":26},{"ruleId":"1569","severity":1,"message":"1570","line":68,"column":53,"nodeType":"1571","messageId":"1572","endLine":68,"endColumn":55},{"ruleId":"1573","severity":1,"message":"1574","line":86,"column":21,"nodeType":"1562","messageId":"1575","endLine":86,"endColumn":29},{"ruleId":"1573","severity":1,"message":"1576","line":87,"column":25,"nodeType":"1562","messageId":"1575","endLine":87,"endColumn":26},{"ruleId":"1569","severity":1,"message":"1570","line":23,"column":44,"nodeType":"1571","messageId":"1572","endLine":23,"endColumn":46},{"ruleId":"1573","severity":1,"message":"1574","line":37,"column":21,"nodeType":"1562","messageId":"1575","endLine":37,"endColumn":29},{"ruleId":"1573","severity":1,"message":"1576","line":38,"column":25,"nodeType":"1562","messageId":"1575","endLine":38,"endColumn":26},{"ruleId":"1569","severity":1,"message":"1570","line":40,"column":44,"nodeType":"1571","messageId":"1572","endLine":40,"endColumn":46},{"ruleId":"1577","severity":1,"message":"1578","line":21,"column":45,"nodeType":"1579","messageId":"1580","endLine":21,"endColumn":47},{"ruleId":"1577","severity":1,"message":"1581","line":5,"column":46,"nodeType":"1579","messageId":"1582","endLine":5,"endColumn":48},{"ruleId":"1577","severity":1,"message":"1578","line":43,"column":45,"nodeType":"1579","messageId":"1580","endLine":43,"endColumn":47},{"ruleId":"1577","severity":1,"message":"1581","line":50,"column":48,"nodeType":"1579","messageId":"1582","endLine":50,"endColumn":50},{"ruleId":"1569","severity":1,"message":"1570","line":38,"column":30,"nodeType":"1571","messageId":"1572","endLine":38,"endColumn":32},{"ruleId":"1573","severity":1,"message":"1574","line":56,"column":25,"nodeType":"1562","messageId":"1575","endLine":56,"endColumn":33},{"ruleId":"1573","severity":1,"message":"1576","line":57,"column":29,"nodeType":"1562","messageId":"1575","endLine":57,"endColumn":30},{"ruleId":"1573","severity":1,"message":"1574","line":53,"column":21,"nodeType":"1562","messageId":"1575","endLine":53,"endColumn":29},{"ruleId":"1573","severity":1,"message":"1576","line":54,"column":25,"nodeType":"1562","messageId":"1575","endLine":54,"endColumn":26},{"ruleId":"1569","severity":1,"message":"1570","line":42,"column":30,"nodeType":"1571","messageId":"1572","endLine":42,"endColumn":32},{"ruleId":"1573","severity":1,"message":"1574","line":27,"column":25,"nodeType":"1562","messageId":"1575","endLine":27,"endColumn":33},{"ruleId":"1573","severity":1,"message":"1576","line":28,"column":29,"nodeType":"1562","messageId":"1575","endLine":28,"endColumn":30},{"ruleId":"1569","severity":1,"message":"1570","line":38,"column":30,"nodeType":"1571","messageId":"1572","endLine":38,"endColumn":32},{"ruleId":"1573","severity":1,"message":"1574","line":52,"column":25,"nodeType":"1562","messageId":"1575","endLine":52,"endColumn":33},{"ruleId":"1573","severity":1,"message":"1576","line":53,"column":29,"nodeType":"1562","messageId":"1575","endLine":53,"endColumn":30},{"ruleId":"1573","severity":1,"message":"1574","line":78,"column":21,"nodeType":"1562","messageId":"1575","endLine":78,"endColumn":29},{"ruleId":"1573","severity":1,"message":"1576","line":79,"column":25,"nodeType":"1562","messageId":"1575","endLine":79,"endColumn":26},{"ruleId":"1569","severity":1,"message":"1583","line":81,"column":61,"nodeType":"1571","messageId":"1572","endLine":81,"endColumn":63},{"ruleId":"1569","severity":1,"message":"1583","line":11,"column":44,"nodeType":"1571","messageId":"1572","endLine":11,"endColumn":46},{"ruleId":"1560","severity":1,"message":"1568","line":32,"column":17,"nodeType":"1562","messageId":"1563","endLine":32,"endColumn":25},{"ruleId":"1584","severity":1,"message":"1585","line":132,"column":28,"nodeType":"1586","messageId":"1587","endLine":132,"endColumn":29,"suggestions":"1588"},{"ruleId":"1584","severity":1,"message":"1585","line":132,"column":44,"nodeType":"1586","messageId":"1587","endLine":132,"endColumn":45,"suggestions":"1589"},{"ruleId":"1590","severity":1,"message":"1591","line":307,"column":9,"nodeType":"1592","messageId":"1572","endLine":307,"endColumn":25},{"ruleId":"1584","severity":1,"message":"1585","line":93,"column":28,"nodeType":"1586","messageId":"1587","endLine":93,"endColumn":29,"suggestions":"1593"},{"ruleId":"1584","severity":1,"message":"1585","line":93,"column":44,"nodeType":"1586","messageId":"1587","endLine":93,"endColumn":45,"suggestions":"1594"},{"ruleId":"1584","severity":1,"message":"1585","line":101,"column":30,"nodeType":"1586","messageId":"1587","endLine":101,"endColumn":31,"suggestions":"1595"},{"ruleId":"1584","severity":1,"message":"1585","line":101,"column":46,"nodeType":"1586","messageId":"1587","endLine":101,"endColumn":47,"suggestions":"1596"},{"ruleId":"1569","severity":1,"message":"1570","line":203,"column":40,"nodeType":"1571","messageId":"1572","endLine":203,"endColumn":42},{"ruleId":"1569","severity":1,"message":"1570","line":207,"column":36,"nodeType":"1571","messageId":"1572","endLine":207,"endColumn":38},{"ruleId":"1560","severity":1,"message":"1597","line":9,"column":10,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":19},{"ruleId":"1560","severity":1,"message":"1598","line":14,"column":8,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":13},{"ruleId":"1599","severity":1,"message":"1600","line":209,"column":29,"nodeType":"1601","endLine":209,"endColumn":199},{"ruleId":"1569","severity":1,"message":"1570","line":209,"column":85,"nodeType":"1571","messageId":"1572","endLine":209,"endColumn":87},{"ruleId":"1569","severity":1,"message":"1583","line":217,"column":45,"nodeType":"1571","messageId":"1572","endLine":217,"endColumn":47},{"ruleId":"1569","severity":1,"message":"1583","line":230,"column":45,"nodeType":"1571","messageId":"1572","endLine":230,"endColumn":47},{"ruleId":"1569","severity":1,"message":"1583","line":245,"column":50,"nodeType":"1571","messageId":"1572","endLine":245,"endColumn":52},{"ruleId":"1602","severity":1,"message":"1603","line":297,"column":25,"nodeType":"1601","endLine":302,"endColumn":26},{"ruleId":"1560","severity":1,"message":"1604","line":2,"column":10,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1605","line":3,"column":8,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1606","line":4,"column":10,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1607","line":6,"column":8,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1608","line":18,"column":10,"nodeType":"1562","messageId":"1563","endLine":18,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1609","line":22,"column":8,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":19},{"ruleId":"1560","severity":1,"message":"1610","line":24,"column":25,"nodeType":"1562","messageId":"1563","endLine":24,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1611","line":25,"column":10,"nodeType":"1562","messageId":"1563","endLine":25,"endColumn":42},{"ruleId":"1569","severity":1,"message":"1583","line":107,"column":53,"nodeType":"1571","messageId":"1572","endLine":107,"endColumn":55},{"ruleId":"1560","severity":1,"message":"1612","line":175,"column":13,"nodeType":"1562","messageId":"1563","endLine":175,"endColumn":17},{"ruleId":"1569","severity":1,"message":"1570","line":211,"column":29,"nodeType":"1571","messageId":"1572","endLine":211,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1570","line":219,"column":29,"nodeType":"1571","messageId":"1572","endLine":219,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":246,"column":31,"nodeType":"1571","messageId":"1572","endLine":246,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1583","line":266,"column":62,"nodeType":"1571","messageId":"1572","endLine":266,"endColumn":64},{"ruleId":"1569","severity":1,"message":"1583","line":267,"column":62,"nodeType":"1571","messageId":"1572","endLine":267,"endColumn":64},{"ruleId":"1569","severity":1,"message":"1583","line":285,"column":29,"nodeType":"1571","messageId":"1572","endLine":285,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":303,"column":29,"nodeType":"1571","messageId":"1572","endLine":303,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":315,"column":23,"nodeType":"1571","messageId":"1572","endLine":315,"endColumn":25},{"ruleId":"1569","severity":1,"message":"1583","line":316,"column":23,"nodeType":"1571","messageId":"1572","endLine":316,"endColumn":25},{"ruleId":"1569","severity":1,"message":"1583","line":317,"column":21,"nodeType":"1571","messageId":"1572","endLine":317,"endColumn":23},{"ruleId":"1569","severity":1,"message":"1570","line":324,"column":24,"nodeType":"1571","messageId":"1572","endLine":324,"endColumn":26},{"ruleId":"1569","severity":1,"message":"1583","line":342,"column":30,"nodeType":"1571","messageId":"1572","endLine":342,"endColumn":32},{"ruleId":"1569","severity":1,"message":"1583","line":360,"column":86,"nodeType":"1571","messageId":"1572","endLine":360,"endColumn":88},{"ruleId":"1569","severity":1,"message":"1583","line":375,"column":104,"nodeType":"1571","messageId":"1572","endLine":375,"endColumn":106},{"ruleId":"1569","severity":1,"message":"1583","line":389,"column":96,"nodeType":"1571","messageId":"1572","endLine":389,"endColumn":98},{"ruleId":"1569","severity":1,"message":"1583","line":404,"column":53,"nodeType":"1571","messageId":"1572","endLine":404,"endColumn":55},{"ruleId":"1569","severity":1,"message":"1570","line":440,"column":30,"nodeType":"1571","messageId":"1572","endLine":440,"endColumn":32},{"ruleId":"1569","severity":1,"message":"1570","line":440,"column":56,"nodeType":"1571","messageId":"1572","endLine":440,"endColumn":58},{"ruleId":"1569","severity":1,"message":"1583","line":477,"column":54,"nodeType":"1571","messageId":"1572","endLine":477,"endColumn":56},{"ruleId":"1569","severity":1,"message":"1583","line":535,"column":55,"nodeType":"1571","messageId":"1572","endLine":535,"endColumn":57},{"ruleId":"1569","severity":1,"message":"1583","line":538,"column":53,"nodeType":"1571","messageId":"1572","endLine":538,"endColumn":55},{"ruleId":"1569","severity":1,"message":"1583","line":560,"column":40,"nodeType":"1571","messageId":"1572","endLine":560,"endColumn":42},{"ruleId":"1569","severity":1,"message":"1570","line":566,"column":31,"nodeType":"1571","messageId":"1572","endLine":566,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1583","line":586,"column":44,"nodeType":"1571","messageId":"1572","endLine":586,"endColumn":46},{"ruleId":"1569","severity":1,"message":"1570","line":591,"column":39,"nodeType":"1571","messageId":"1572","endLine":591,"endColumn":41},{"ruleId":"1573","severity":1,"message":"1613","line":593,"column":29,"nodeType":"1562","messageId":"1575","endLine":593,"endColumn":51},{"ruleId":"1573","severity":1,"message":"1613","line":619,"column":29,"nodeType":"1562","messageId":"1575","endLine":619,"endColumn":51},{"ruleId":"1573","severity":1,"message":"1614","line":689,"column":17,"nodeType":"1562","messageId":"1575","endLine":689,"endColumn":18},{"ruleId":"1573","severity":1,"message":"1614","line":707,"column":17,"nodeType":"1562","messageId":"1575","endLine":707,"endColumn":18},{"ruleId":"1599","severity":1,"message":"1600","line":749,"column":69,"nodeType":"1601","endLine":749,"endColumn":138},{"ruleId":"1560","severity":1,"message":"1615","line":2,"column":8,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":12},{"ruleId":"1560","severity":1,"message":"1616","line":3,"column":8,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1617","line":4,"column":8,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1618","line":5,"column":8,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1619","line":7,"column":10,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1620","line":13,"column":5,"nodeType":"1562","messageId":"1563","endLine":13,"endColumn":10},{"ruleId":"1560","severity":1,"message":"1621","line":14,"column":5,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":11},{"ruleId":"1560","severity":1,"message":"1622","line":16,"column":5,"nodeType":"1562","messageId":"1563","endLine":16,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1623","line":20,"column":5,"nodeType":"1562","messageId":"1563","endLine":20,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1624","line":21,"column":5,"nodeType":"1562","messageId":"1563","endLine":21,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1625","line":23,"column":5,"nodeType":"1562","messageId":"1563","endLine":23,"endColumn":20},{"ruleId":"1560","severity":1,"message":"1626","line":24,"column":5,"nodeType":"1562","messageId":"1563","endLine":24,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1627","line":24,"column":16,"nodeType":"1562","messageId":"1563","endLine":24,"endColumn":30},{"ruleId":"1560","severity":1,"message":"1628","line":29,"column":8,"nodeType":"1562","messageId":"1563","endLine":29,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1629","line":32,"column":8,"nodeType":"1562","messageId":"1563","endLine":32,"endColumn":27},{"ruleId":"1560","severity":1,"message":"1630","line":33,"column":8,"nodeType":"1562","messageId":"1563","endLine":33,"endColumn":16},{"ruleId":"1560","severity":1,"message":"1631","line":69,"column":5,"nodeType":"1562","messageId":"1563","endLine":69,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1632","line":70,"column":5,"nodeType":"1562","messageId":"1563","endLine":70,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1633","line":71,"column":5,"nodeType":"1562","messageId":"1563","endLine":71,"endColumn":18},{"ruleId":"1569","severity":1,"message":"1570","line":342,"column":87,"nodeType":"1571","messageId":"1572","endLine":342,"endColumn":89},{"ruleId":"1560","severity":1,"message":"1634","line":4,"column":27,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":33},{"ruleId":"1560","severity":1,"message":"1635","line":9,"column":8,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":18},{"ruleId":"1577","severity":1,"message":"1578","line":179,"column":89,"nodeType":"1579","messageId":"1580","endLine":179,"endColumn":91},{"ruleId":"1560","severity":1,"message":"1636","line":2,"column":28,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":35},{"ruleId":"1560","severity":1,"message":"1637","line":3,"column":9,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":12},{"ruleId":"1560","severity":1,"message":"1638","line":3,"column":14,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":25},{"ruleId":"1560","severity":1,"message":"1639","line":3,"column":35,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":45},{"ruleId":"1560","severity":1,"message":"1640","line":5,"column":10,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1641","line":6,"column":8,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1642","line":10,"column":5,"nodeType":"1562","messageId":"1563","endLine":10,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1643","line":14,"column":5,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":12},{"ruleId":"1569","severity":1,"message":"1583","line":76,"column":47,"nodeType":"1571","messageId":"1572","endLine":76,"endColumn":49},{"ruleId":"1569","severity":1,"message":"1583","line":77,"column":59,"nodeType":"1571","messageId":"1572","endLine":77,"endColumn":61},{"ruleId":"1569","severity":1,"message":"1583","line":78,"column":61,"nodeType":"1571","messageId":"1572","endLine":78,"endColumn":63},{"ruleId":"1569","severity":1,"message":"1583","line":103,"column":40,"nodeType":"1571","messageId":"1572","endLine":103,"endColumn":42},{"ruleId":"1569","severity":1,"message":"1583","line":109,"column":38,"nodeType":"1571","messageId":"1572","endLine":109,"endColumn":40},{"ruleId":"1569","severity":1,"message":"1583","line":116,"column":38,"nodeType":"1571","messageId":"1572","endLine":116,"endColumn":40},{"ruleId":"1569","severity":1,"message":"1583","line":116,"column":86,"nodeType":"1571","messageId":"1572","endLine":116,"endColumn":88},{"ruleId":"1569","severity":1,"message":"1583","line":128,"column":33,"nodeType":"1571","messageId":"1572","endLine":128,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1583","line":253,"column":80,"nodeType":"1571","messageId":"1572","endLine":253,"endColumn":82},{"ruleId":"1569","severity":1,"message":"1583","line":290,"column":78,"nodeType":"1571","messageId":"1572","endLine":290,"endColumn":80},{"ruleId":"1560","severity":1,"message":"1644","line":2,"column":43,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":52},{"ruleId":"1560","severity":1,"message":"1639","line":2,"column":80,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":90},{"ruleId":"1560","severity":1,"message":"1620","line":2,"column":92,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":97},{"ruleId":"1560","severity":1,"message":"1640","line":4,"column":10,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1645","line":7,"column":10,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":20},{"ruleId":"1569","severity":1,"message":"1583","line":35,"column":41,"nodeType":"1571","messageId":"1572","endLine":35,"endColumn":43},{"ruleId":"1569","severity":1,"message":"1583","line":50,"column":71,"nodeType":"1571","messageId":"1572","endLine":50,"endColumn":73},{"ruleId":"1569","severity":1,"message":"1583","line":51,"column":64,"nodeType":"1571","messageId":"1572","endLine":51,"endColumn":66},{"ruleId":"1569","severity":1,"message":"1583","line":52,"column":67,"nodeType":"1571","messageId":"1572","endLine":52,"endColumn":69},{"ruleId":"1560","severity":1,"message":"1646","line":4,"column":10,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1638","line":4,"column":43,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":54},{"ruleId":"1577","severity":1,"message":"1581","line":45,"column":39,"nodeType":"1579","messageId":"1582","endLine":45,"endColumn":41},{"ruleId":"1577","severity":1,"message":"1581","line":53,"column":39,"nodeType":"1579","messageId":"1582","endLine":53,"endColumn":41},{"ruleId":"1577","severity":1,"message":"1581","line":65,"column":39,"nodeType":"1579","messageId":"1582","endLine":65,"endColumn":41},{"ruleId":"1647","severity":1,"message":"1648","line":166,"column":25,"nodeType":"1579","messageId":"1649","endLine":171,"endColumn":20},{"ruleId":"1577","severity":1,"message":"1581","line":213,"column":39,"nodeType":"1579","messageId":"1582","endLine":213,"endColumn":41},{"ruleId":"1577","severity":1,"message":"1581","line":250,"column":37,"nodeType":"1579","messageId":"1582","endLine":250,"endColumn":39},{"ruleId":"1647","severity":1,"message":"1648","line":383,"column":17,"nodeType":"1579","messageId":"1649","endLine":389,"endColumn":12},{"ruleId":"1573","severity":1,"message":"1576","line":397,"column":22,"nodeType":"1562","messageId":"1575","endLine":397,"endColumn":23},{"ruleId":"1647","severity":1,"message":"1648","line":411,"column":23,"nodeType":"1579","messageId":"1649","endLine":416,"endColumn":18},{"ruleId":"1569","severity":1,"message":"1583","line":428,"column":60,"nodeType":"1571","messageId":"1572","endLine":428,"endColumn":62},{"ruleId":"1590","severity":1,"message":"1650","line":537,"column":5,"nodeType":"1592","messageId":"1572","endLine":537,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1641","line":19,"column":8,"nodeType":"1562","messageId":"1563","endLine":19,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1651","line":26,"column":11,"nodeType":"1562","messageId":"1563","endLine":26,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1652","line":27,"column":11,"nodeType":"1562","messageId":"1563","endLine":27,"endColumn":19},{"ruleId":"1577","severity":1,"message":"1581","line":155,"column":35,"nodeType":"1579","messageId":"1582","endLine":155,"endColumn":37},{"ruleId":"1577","severity":1,"message":"1581","line":31,"column":43,"nodeType":"1579","messageId":"1582","endLine":31,"endColumn":45},{"ruleId":"1569","severity":1,"message":"1570","line":35,"column":44,"nodeType":"1571","messageId":"1572","endLine":35,"endColumn":46},{"ruleId":"1577","severity":1,"message":"1581","line":44,"column":43,"nodeType":"1579","messageId":"1582","endLine":44,"endColumn":45},{"ruleId":"1569","severity":1,"message":"1570","line":51,"column":44,"nodeType":"1571","messageId":"1572","endLine":51,"endColumn":46},{"ruleId":"1577","severity":1,"message":"1581","line":60,"column":43,"nodeType":"1579","messageId":"1582","endLine":60,"endColumn":45},{"ruleId":"1569","severity":1,"message":"1570","line":66,"column":44,"nodeType":"1571","messageId":"1572","endLine":66,"endColumn":46},{"ruleId":"1569","severity":1,"message":"1570","line":79,"column":44,"nodeType":"1571","messageId":"1572","endLine":79,"endColumn":46},{"ruleId":"1569","severity":1,"message":"1570","line":146,"column":70,"nodeType":"1571","messageId":"1572","endLine":146,"endColumn":72},{"ruleId":"1569","severity":1,"message":"1570","line":159,"column":117,"nodeType":"1571","messageId":"1572","endLine":159,"endColumn":119},{"ruleId":"1569","severity":1,"message":"1570","line":169,"column":124,"nodeType":"1571","messageId":"1572","endLine":169,"endColumn":126},{"ruleId":"1569","severity":1,"message":"1570","line":180,"column":91,"nodeType":"1571","messageId":"1572","endLine":180,"endColumn":93},{"ruleId":"1560","severity":1,"message":"1610","line":13,"column":25,"nodeType":"1562","messageId":"1563","endLine":13,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1653","line":3,"column":10,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":33},{"ruleId":"1560","severity":1,"message":"1654","line":5,"column":10,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":20},{"ruleId":"1569","severity":1,"message":"1570","line":13,"column":30,"nodeType":"1571","messageId":"1572","endLine":13,"endColumn":32},{"ruleId":"1569","severity":1,"message":"1570","line":17,"column":29,"nodeType":"1571","messageId":"1572","endLine":17,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1655","line":32,"column":9,"nodeType":"1562","messageId":"1563","endLine":32,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1651","line":40,"column":11,"nodeType":"1562","messageId":"1563","endLine":40,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1656","line":50,"column":13,"nodeType":"1562","messageId":"1563","endLine":50,"endColumn":18},{"ruleId":"1569","severity":1,"message":"1583","line":57,"column":33,"nodeType":"1571","messageId":"1572","endLine":57,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1583","line":65,"column":29,"nodeType":"1571","messageId":"1572","endLine":65,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":65,"column":65,"nodeType":"1571","messageId":"1572","endLine":65,"endColumn":67},{"ruleId":"1569","severity":1,"message":"1583","line":65,"column":92,"nodeType":"1571","messageId":"1572","endLine":65,"endColumn":94},{"ruleId":"1569","severity":1,"message":"1583","line":66,"column":56,"nodeType":"1571","messageId":"1572","endLine":66,"endColumn":58},{"ruleId":"1569","severity":1,"message":"1583","line":75,"column":40,"nodeType":"1571","messageId":"1572","endLine":75,"endColumn":42},{"ruleId":"1573","severity":1,"message":"1576","line":77,"column":21,"nodeType":"1562","messageId":"1575","endLine":77,"endColumn":22},{"ruleId":"1573","severity":1,"message":"1657","line":79,"column":21,"nodeType":"1562","messageId":"1575","endLine":79,"endColumn":29},{"ruleId":"1573","severity":1,"message":"1658","line":80,"column":21,"nodeType":"1562","messageId":"1575","endLine":80,"endColumn":25},{"ruleId":"1569","severity":1,"message":"1583","line":83,"column":29,"nodeType":"1571","messageId":"1572","endLine":83,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":83,"column":65,"nodeType":"1571","messageId":"1572","endLine":83,"endColumn":67},{"ruleId":"1569","severity":1,"message":"1583","line":83,"column":92,"nodeType":"1571","messageId":"1572","endLine":83,"endColumn":94},{"ruleId":"1569","severity":1,"message":"1583","line":84,"column":56,"nodeType":"1571","messageId":"1572","endLine":84,"endColumn":58},{"ruleId":"1569","severity":1,"message":"1583","line":94,"column":40,"nodeType":"1571","messageId":"1572","endLine":94,"endColumn":42},{"ruleId":"1573","severity":1,"message":"1576","line":96,"column":21,"nodeType":"1562","messageId":"1575","endLine":96,"endColumn":22},{"ruleId":"1573","severity":1,"message":"1657","line":98,"column":21,"nodeType":"1562","messageId":"1575","endLine":98,"endColumn":29},{"ruleId":"1573","severity":1,"message":"1658","line":99,"column":21,"nodeType":"1562","messageId":"1575","endLine":99,"endColumn":25},{"ruleId":"1569","severity":1,"message":"1583","line":102,"column":29,"nodeType":"1571","messageId":"1572","endLine":102,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":102,"column":56,"nodeType":"1571","messageId":"1572","endLine":102,"endColumn":58},{"ruleId":"1569","severity":1,"message":"1583","line":103,"column":56,"nodeType":"1571","messageId":"1572","endLine":103,"endColumn":58},{"ruleId":"1569","severity":1,"message":"1583","line":112,"column":40,"nodeType":"1571","messageId":"1572","endLine":112,"endColumn":42},{"ruleId":"1573","severity":1,"message":"1576","line":114,"column":21,"nodeType":"1562","messageId":"1575","endLine":114,"endColumn":22},{"ruleId":"1573","severity":1,"message":"1657","line":116,"column":21,"nodeType":"1562","messageId":"1575","endLine":116,"endColumn":29},{"ruleId":"1573","severity":1,"message":"1658","line":117,"column":21,"nodeType":"1562","messageId":"1575","endLine":117,"endColumn":25},{"ruleId":"1569","severity":1,"message":"1583","line":120,"column":29,"nodeType":"1571","messageId":"1572","endLine":120,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":121,"column":56,"nodeType":"1571","messageId":"1572","endLine":121,"endColumn":58},{"ruleId":"1569","severity":1,"message":"1583","line":130,"column":40,"nodeType":"1571","messageId":"1572","endLine":130,"endColumn":42},{"ruleId":"1573","severity":1,"message":"1576","line":132,"column":21,"nodeType":"1562","messageId":"1575","endLine":132,"endColumn":22},{"ruleId":"1569","severity":1,"message":"1583","line":134,"column":52,"nodeType":"1571","messageId":"1572","endLine":134,"endColumn":54},{"ruleId":"1659","severity":1,"message":"1660","line":143,"column":8,"nodeType":"1661","endLine":143,"endColumn":29,"suggestions":"1662"},{"ruleId":"1569","severity":1,"message":"1583","line":151,"column":49,"nodeType":"1571","messageId":"1572","endLine":151,"endColumn":51},{"ruleId":"1569","severity":1,"message":"1583","line":151,"column":77,"nodeType":"1571","messageId":"1572","endLine":151,"endColumn":79},{"ruleId":"1560","severity":1,"message":"1653","line":3,"column":10,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":33},{"ruleId":"1560","severity":1,"message":"1656","line":17,"column":13,"nodeType":"1562","messageId":"1563","endLine":17,"endColumn":18},{"ruleId":"1569","severity":1,"message":"1583","line":20,"column":33,"nodeType":"1571","messageId":"1572","endLine":20,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1583","line":28,"column":29,"nodeType":"1571","messageId":"1572","endLine":28,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":28,"column":61,"nodeType":"1571","messageId":"1572","endLine":28,"endColumn":63},{"ruleId":"1569","severity":1,"message":"1583","line":28,"column":88,"nodeType":"1571","messageId":"1572","endLine":28,"endColumn":90},{"ruleId":"1577","severity":1,"message":"1581","line":34,"column":35,"nodeType":"1579","messageId":"1582","endLine":34,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":38,"column":29,"nodeType":"1571","messageId":"1572","endLine":38,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":38,"column":61,"nodeType":"1571","messageId":"1572","endLine":38,"endColumn":63},{"ruleId":"1569","severity":1,"message":"1583","line":38,"column":88,"nodeType":"1571","messageId":"1572","endLine":38,"endColumn":90},{"ruleId":"1569","severity":1,"message":"1583","line":51,"column":40,"nodeType":"1571","messageId":"1572","endLine":51,"endColumn":42},{"ruleId":"1573","severity":1,"message":"1663","line":52,"column":17,"nodeType":"1562","messageId":"1575","endLine":52,"endColumn":30},{"ruleId":"1573","severity":1,"message":"1576","line":53,"column":21,"nodeType":"1562","messageId":"1575","endLine":53,"endColumn":22},{"ruleId":"1573","severity":1,"message":"1657","line":55,"column":21,"nodeType":"1562","messageId":"1575","endLine":55,"endColumn":29},{"ruleId":"1573","severity":1,"message":"1658","line":56,"column":21,"nodeType":"1562","messageId":"1575","endLine":56,"endColumn":25},{"ruleId":"1569","severity":1,"message":"1583","line":59,"column":29,"nodeType":"1571","messageId":"1572","endLine":59,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":59,"column":65,"nodeType":"1571","messageId":"1572","endLine":59,"endColumn":67},{"ruleId":"1569","severity":1,"message":"1583","line":59,"column":92,"nodeType":"1571","messageId":"1572","endLine":59,"endColumn":94},{"ruleId":"1573","severity":1,"message":"1664","line":65,"column":17,"nodeType":"1562","messageId":"1575","endLine":65,"endColumn":30},{"ruleId":"1577","severity":1,"message":"1581","line":66,"column":35,"nodeType":"1579","messageId":"1582","endLine":66,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":70,"column":29,"nodeType":"1571","messageId":"1572","endLine":70,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":70,"column":65,"nodeType":"1571","messageId":"1572","endLine":70,"endColumn":67},{"ruleId":"1569","severity":1,"message":"1583","line":70,"column":92,"nodeType":"1571","messageId":"1572","endLine":70,"endColumn":94},{"ruleId":"1569","severity":1,"message":"1583","line":83,"column":40,"nodeType":"1571","messageId":"1572","endLine":83,"endColumn":42},{"ruleId":"1573","severity":1,"message":"1663","line":84,"column":17,"nodeType":"1562","messageId":"1575","endLine":84,"endColumn":30},{"ruleId":"1573","severity":1,"message":"1576","line":85,"column":21,"nodeType":"1562","messageId":"1575","endLine":85,"endColumn":22},{"ruleId":"1573","severity":1,"message":"1657","line":87,"column":21,"nodeType":"1562","messageId":"1575","endLine":87,"endColumn":29},{"ruleId":"1573","severity":1,"message":"1658","line":88,"column":21,"nodeType":"1562","messageId":"1575","endLine":88,"endColumn":25},{"ruleId":"1569","severity":1,"message":"1583","line":91,"column":29,"nodeType":"1571","messageId":"1572","endLine":91,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":91,"column":56,"nodeType":"1571","messageId":"1572","endLine":91,"endColumn":58},{"ruleId":"1573","severity":1,"message":"1664","line":97,"column":17,"nodeType":"1562","messageId":"1575","endLine":97,"endColumn":30},{"ruleId":"1577","severity":1,"message":"1581","line":98,"column":35,"nodeType":"1579","messageId":"1582","endLine":98,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":101,"column":29,"nodeType":"1571","messageId":"1572","endLine":101,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":101,"column":56,"nodeType":"1571","messageId":"1572","endLine":101,"endColumn":58},{"ruleId":"1569","severity":1,"message":"1583","line":113,"column":40,"nodeType":"1571","messageId":"1572","endLine":113,"endColumn":42},{"ruleId":"1573","severity":1,"message":"1663","line":114,"column":17,"nodeType":"1562","messageId":"1575","endLine":114,"endColumn":30},{"ruleId":"1573","severity":1,"message":"1576","line":115,"column":21,"nodeType":"1562","messageId":"1575","endLine":115,"endColumn":22},{"ruleId":"1573","severity":1,"message":"1657","line":117,"column":21,"nodeType":"1562","messageId":"1575","endLine":117,"endColumn":29},{"ruleId":"1573","severity":1,"message":"1658","line":118,"column":21,"nodeType":"1562","messageId":"1575","endLine":118,"endColumn":25},{"ruleId":"1569","severity":1,"message":"1583","line":121,"column":29,"nodeType":"1571","messageId":"1572","endLine":121,"endColumn":31},{"ruleId":"1573","severity":1,"message":"1664","line":127,"column":17,"nodeType":"1562","messageId":"1575","endLine":127,"endColumn":30},{"ruleId":"1577","severity":1,"message":"1581","line":128,"column":35,"nodeType":"1579","messageId":"1582","endLine":128,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":131,"column":29,"nodeType":"1571","messageId":"1572","endLine":131,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":143,"column":40,"nodeType":"1571","messageId":"1572","endLine":143,"endColumn":42},{"ruleId":"1573","severity":1,"message":"1663","line":144,"column":17,"nodeType":"1562","messageId":"1575","endLine":144,"endColumn":30},{"ruleId":"1569","severity":1,"message":"1570","line":145,"column":27,"nodeType":"1571","messageId":"1572","endLine":145,"endColumn":29},{"ruleId":"1569","severity":1,"message":"1570","line":145,"column":61,"nodeType":"1571","messageId":"1572","endLine":145,"endColumn":63},{"ruleId":"1573","severity":1,"message":"1576","line":146,"column":25,"nodeType":"1562","messageId":"1575","endLine":146,"endColumn":26},{"ruleId":"1573","severity":1,"message":"1664","line":152,"column":17,"nodeType":"1562","messageId":"1575","endLine":152,"endColumn":30},{"ruleId":"1577","severity":1,"message":"1581","line":153,"column":35,"nodeType":"1579","messageId":"1582","endLine":153,"endColumn":37},{"ruleId":"1659","severity":1,"message":"1665","line":167,"column":8,"nodeType":"1661","endLine":167,"endColumn":29,"suggestions":"1666"},{"ruleId":"1560","severity":1,"message":"1634","line":2,"column":82,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":88},{"ruleId":"1560","severity":1,"message":"1667","line":3,"column":10,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1668","line":4,"column":10,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":20},{"ruleId":"1560","severity":1,"message":"1669","line":6,"column":10,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":16},{"ruleId":"1560","severity":1,"message":"1670","line":6,"column":18,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":26},{"ruleId":"1560","severity":1,"message":"1641","line":8,"column":8,"nodeType":"1562","messageId":"1563","endLine":8,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1671","line":9,"column":23,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":34},{"ruleId":"1577","severity":1,"message":"1578","line":67,"column":44,"nodeType":"1579","messageId":"1580","endLine":67,"endColumn":46},{"ruleId":"1569","severity":1,"message":"1583","line":73,"column":24,"nodeType":"1571","messageId":"1572","endLine":73,"endColumn":26},{"ruleId":"1577","severity":1,"message":"1578","line":76,"column":40,"nodeType":"1579","messageId":"1580","endLine":76,"endColumn":42},{"ruleId":"1569","severity":1,"message":"1583","line":77,"column":31,"nodeType":"1571","messageId":"1572","endLine":77,"endColumn":33},{"ruleId":"1577","severity":1,"message":"1578","line":84,"column":37,"nodeType":"1579","messageId":"1580","endLine":84,"endColumn":39},{"ruleId":"1569","severity":1,"message":"1583","line":88,"column":36,"nodeType":"1571","messageId":"1572","endLine":88,"endColumn":38},{"ruleId":"1569","severity":1,"message":"1583","line":88,"column":74,"nodeType":"1571","messageId":"1572","endLine":88,"endColumn":76},{"ruleId":"1569","severity":1,"message":"1583","line":88,"column":111,"nodeType":"1571","messageId":"1572","endLine":88,"endColumn":113},{"ruleId":"1577","severity":1,"message":"1581","line":95,"column":23,"nodeType":"1579","messageId":"1582","endLine":95,"endColumn":25},{"ruleId":"1659","severity":1,"message":"1672","line":99,"column":8,"nodeType":"1661","endLine":99,"endColumn":34,"suggestions":"1673"},{"ruleId":"1569","severity":1,"message":"1583","line":190,"column":235,"nodeType":"1571","messageId":"1572","endLine":190,"endColumn":237},{"ruleId":"1569","severity":1,"message":"1583","line":24,"column":33,"nodeType":"1571","messageId":"1572","endLine":24,"endColumn":35},{"ruleId":"1577","severity":1,"message":"1581","line":25,"column":35,"nodeType":"1579","messageId":"1582","endLine":25,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":28,"column":29,"nodeType":"1571","messageId":"1572","endLine":28,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":28,"column":61,"nodeType":"1571","messageId":"1572","endLine":28,"endColumn":63},{"ruleId":"1569","severity":1,"message":"1583","line":28,"column":88,"nodeType":"1571","messageId":"1572","endLine":28,"endColumn":90},{"ruleId":"1569","severity":1,"message":"1583","line":35,"column":40,"nodeType":"1571","messageId":"1572","endLine":35,"endColumn":42},{"ruleId":"1577","severity":1,"message":"1581","line":37,"column":35,"nodeType":"1579","messageId":"1582","endLine":37,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":40,"column":29,"nodeType":"1571","messageId":"1572","endLine":40,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":40,"column":67,"nodeType":"1571","messageId":"1572","endLine":40,"endColumn":69},{"ruleId":"1569","severity":1,"message":"1583","line":40,"column":108,"nodeType":"1571","messageId":"1572","endLine":40,"endColumn":110},{"ruleId":"1569","severity":1,"message":"1583","line":47,"column":40,"nodeType":"1571","messageId":"1572","endLine":47,"endColumn":42},{"ruleId":"1577","severity":1,"message":"1581","line":48,"column":35,"nodeType":"1579","messageId":"1582","endLine":48,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":51,"column":29,"nodeType":"1571","messageId":"1572","endLine":51,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":51,"column":68,"nodeType":"1571","messageId":"1572","endLine":51,"endColumn":70},{"ruleId":"1569","severity":1,"message":"1583","line":58,"column":40,"nodeType":"1571","messageId":"1572","endLine":58,"endColumn":42},{"ruleId":"1577","severity":1,"message":"1581","line":59,"column":35,"nodeType":"1579","messageId":"1582","endLine":59,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":62,"column":29,"nodeType":"1571","messageId":"1572","endLine":62,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":69,"column":40,"nodeType":"1571","messageId":"1572","endLine":69,"endColumn":42},{"ruleId":"1577","severity":1,"message":"1581","line":70,"column":35,"nodeType":"1579","messageId":"1582","endLine":70,"endColumn":37},{"ruleId":"1659","severity":1,"message":"1674","line":77,"column":8,"nodeType":"1661","endLine":77,"endColumn":29,"suggestions":"1675"},{"ruleId":"1569","severity":1,"message":"1583","line":85,"column":50,"nodeType":"1571","messageId":"1572","endLine":85,"endColumn":52},{"ruleId":"1569","severity":1,"message":"1583","line":85,"column":78,"nodeType":"1571","messageId":"1572","endLine":85,"endColumn":80},{"ruleId":"1569","severity":1,"message":"1583","line":20,"column":33,"nodeType":"1571","messageId":"1572","endLine":20,"endColumn":35},{"ruleId":"1577","severity":1,"message":"1581","line":21,"column":35,"nodeType":"1579","messageId":"1582","endLine":21,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":24,"column":29,"nodeType":"1571","messageId":"1572","endLine":24,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":24,"column":61,"nodeType":"1571","messageId":"1572","endLine":24,"endColumn":63},{"ruleId":"1569","severity":1,"message":"1583","line":24,"column":88,"nodeType":"1571","messageId":"1572","endLine":24,"endColumn":90},{"ruleId":"1569","severity":1,"message":"1583","line":31,"column":40,"nodeType":"1571","messageId":"1572","endLine":31,"endColumn":42},{"ruleId":"1577","severity":1,"message":"1581","line":32,"column":35,"nodeType":"1579","messageId":"1582","endLine":32,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":35,"column":29,"nodeType":"1571","messageId":"1572","endLine":35,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":35,"column":71,"nodeType":"1571","messageId":"1572","endLine":35,"endColumn":73},{"ruleId":"1569","severity":1,"message":"1583","line":35,"column":114,"nodeType":"1571","messageId":"1572","endLine":35,"endColumn":116},{"ruleId":"1569","severity":1,"message":"1583","line":40,"column":40,"nodeType":"1571","messageId":"1572","endLine":40,"endColumn":42},{"ruleId":"1577","severity":1,"message":"1581","line":41,"column":35,"nodeType":"1579","messageId":"1582","endLine":41,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":44,"column":29,"nodeType":"1571","messageId":"1572","endLine":44,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":44,"column":64,"nodeType":"1571","messageId":"1572","endLine":44,"endColumn":66},{"ruleId":"1569","severity":1,"message":"1583","line":49,"column":40,"nodeType":"1571","messageId":"1572","endLine":49,"endColumn":42},{"ruleId":"1577","severity":1,"message":"1581","line":50,"column":35,"nodeType":"1579","messageId":"1582","endLine":50,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":53,"column":29,"nodeType":"1571","messageId":"1572","endLine":53,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":58,"column":40,"nodeType":"1571","messageId":"1572","endLine":58,"endColumn":42},{"ruleId":"1577","severity":1,"message":"1581","line":59,"column":35,"nodeType":"1579","messageId":"1582","endLine":59,"endColumn":37},{"ruleId":"1659","severity":1,"message":"1674","line":66,"column":8,"nodeType":"1661","endLine":66,"endColumn":29,"suggestions":"1676"},{"ruleId":"1659","severity":1,"message":"1677","line":50,"column":8,"nodeType":"1661","endLine":50,"endColumn":10,"suggestions":"1678"},{"ruleId":"1577","severity":1,"message":"1581","line":23,"column":36,"nodeType":"1579","messageId":"1582","endLine":23,"endColumn":38},{"ruleId":"1577","severity":1,"message":"1578","line":86,"column":51,"nodeType":"1579","messageId":"1580","endLine":86,"endColumn":53},{"ruleId":"1569","severity":1,"message":"1583","line":90,"column":25,"nodeType":"1571","messageId":"1572","endLine":90,"endColumn":27},{"ruleId":"1569","severity":1,"message":"1583","line":90,"column":43,"nodeType":"1571","messageId":"1572","endLine":90,"endColumn":45},{"ruleId":"1569","severity":1,"message":"1583","line":90,"column":63,"nodeType":"1571","messageId":"1572","endLine":90,"endColumn":65},{"ruleId":"1659","severity":1,"message":"1679","line":95,"column":8,"nodeType":"1661","endLine":95,"endColumn":15,"suggestions":"1680"},{"ruleId":"1569","severity":1,"message":"1583","line":145,"column":139,"nodeType":"1571","messageId":"1572","endLine":145,"endColumn":141},{"ruleId":"1569","severity":1,"message":"1583","line":147,"column":137,"nodeType":"1571","messageId":"1572","endLine":147,"endColumn":139},{"ruleId":"1560","severity":1,"message":"1681","line":1,"column":17,"nodeType":"1562","messageId":"1563","endLine":1,"endColumn":20},{"ruleId":"1560","severity":1,"message":"1671","line":11,"column":23,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":34},{"ruleId":"1560","severity":1,"message":"1682","line":17,"column":10,"nodeType":"1562","messageId":"1563","endLine":17,"endColumn":15},{"ruleId":"1569","severity":1,"message":"1583","line":60,"column":27,"nodeType":"1571","messageId":"1572","endLine":60,"endColumn":29},{"ruleId":"1569","severity":1,"message":"1583","line":64,"column":37,"nodeType":"1571","messageId":"1572","endLine":64,"endColumn":39},{"ruleId":"1577","severity":1,"message":"1581","line":119,"column":23,"nodeType":"1579","messageId":"1582","endLine":119,"endColumn":25},{"ruleId":"1577","severity":1,"message":"1581","line":123,"column":31,"nodeType":"1579","messageId":"1582","endLine":123,"endColumn":33},{"ruleId":"1577","severity":1,"message":"1581","line":129,"column":43,"nodeType":"1579","messageId":"1582","endLine":129,"endColumn":45},{"ruleId":"1577","severity":1,"message":"1578","line":196,"column":37,"nodeType":"1579","messageId":"1580","endLine":196,"endColumn":39},{"ruleId":"1577","severity":1,"message":"1581","line":223,"column":35,"nodeType":"1579","messageId":"1582","endLine":223,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":226,"column":25,"nodeType":"1571","messageId":"1572","endLine":226,"endColumn":27},{"ruleId":"1569","severity":1,"message":"1583","line":226,"column":58,"nodeType":"1571","messageId":"1572","endLine":226,"endColumn":60},{"ruleId":"1569","severity":1,"message":"1583","line":226,"column":91,"nodeType":"1571","messageId":"1572","endLine":226,"endColumn":93},{"ruleId":"1569","severity":1,"message":"1583","line":226,"column":124,"nodeType":"1571","messageId":"1572","endLine":226,"endColumn":126},{"ruleId":"1569","severity":1,"message":"1583","line":228,"column":29,"nodeType":"1571","messageId":"1572","endLine":228,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":228,"column":55,"nodeType":"1571","messageId":"1572","endLine":228,"endColumn":57},{"ruleId":"1577","severity":1,"message":"1581","line":230,"column":47,"nodeType":"1579","messageId":"1582","endLine":230,"endColumn":49},{"ruleId":"1647","severity":1,"message":"1683","line":252,"column":27,"nodeType":"1579","messageId":"1649","endLine":263,"endColumn":12},{"ruleId":"1577","severity":1,"message":"1581","line":252,"column":35,"nodeType":"1579","messageId":"1582","endLine":252,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":255,"column":19,"nodeType":"1571","messageId":"1572","endLine":255,"endColumn":21},{"ruleId":"1569","severity":1,"message":"1583","line":255,"column":46,"nodeType":"1571","messageId":"1572","endLine":255,"endColumn":48},{"ruleId":"1569","severity":1,"message":"1583","line":255,"column":72,"nodeType":"1571","messageId":"1572","endLine":255,"endColumn":74},{"ruleId":"1577","severity":1,"message":"1581","line":258,"column":47,"nodeType":"1579","messageId":"1582","endLine":258,"endColumn":49},{"ruleId":"1577","severity":1,"message":"1581","line":284,"column":33,"nodeType":"1579","messageId":"1582","endLine":284,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1583","line":287,"column":23,"nodeType":"1571","messageId":"1572","endLine":287,"endColumn":25},{"ruleId":"1569","severity":1,"message":"1583","line":287,"column":56,"nodeType":"1571","messageId":"1572","endLine":287,"endColumn":58},{"ruleId":"1569","severity":1,"message":"1583","line":287,"column":89,"nodeType":"1571","messageId":"1572","endLine":287,"endColumn":91},{"ruleId":"1569","severity":1,"message":"1583","line":287,"column":122,"nodeType":"1571","messageId":"1572","endLine":287,"endColumn":124},{"ruleId":"1569","severity":1,"message":"1583","line":288,"column":26,"nodeType":"1571","messageId":"1572","endLine":288,"endColumn":28},{"ruleId":"1569","severity":1,"message":"1583","line":288,"column":55,"nodeType":"1571","messageId":"1572","endLine":288,"endColumn":57},{"ruleId":"1577","severity":1,"message":"1581","line":291,"column":47,"nodeType":"1579","messageId":"1582","endLine":291,"endColumn":49},{"ruleId":"1647","severity":1,"message":"1683","line":311,"column":27,"nodeType":"1579","messageId":"1649","endLine":322,"endColumn":12},{"ruleId":"1577","severity":1,"message":"1581","line":311,"column":35,"nodeType":"1579","messageId":"1582","endLine":311,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":314,"column":19,"nodeType":"1571","messageId":"1572","endLine":314,"endColumn":21},{"ruleId":"1569","severity":1,"message":"1583","line":314,"column":49,"nodeType":"1571","messageId":"1572","endLine":314,"endColumn":51},{"ruleId":"1569","severity":1,"message":"1583","line":314,"column":78,"nodeType":"1571","messageId":"1572","endLine":314,"endColumn":80},{"ruleId":"1577","severity":1,"message":"1581","line":317,"column":47,"nodeType":"1579","messageId":"1582","endLine":317,"endColumn":49},{"ruleId":"1577","severity":1,"message":"1581","line":348,"column":31,"nodeType":"1579","messageId":"1582","endLine":348,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1583","line":351,"column":15,"nodeType":"1571","messageId":"1572","endLine":351,"endColumn":17},{"ruleId":"1569","severity":1,"message":"1583","line":351,"column":41,"nodeType":"1571","messageId":"1572","endLine":351,"endColumn":43},{"ruleId":"1577","severity":1,"message":"1581","line":354,"column":43,"nodeType":"1579","messageId":"1582","endLine":354,"endColumn":45},{"ruleId":"1577","severity":1,"message":"1581","line":381,"column":29,"nodeType":"1579","messageId":"1582","endLine":381,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":384,"column":21,"nodeType":"1571","messageId":"1572","endLine":384,"endColumn":23},{"ruleId":"1569","severity":1,"message":"1583","line":389,"column":21,"nodeType":"1571","messageId":"1572","endLine":389,"endColumn":23},{"ruleId":"1569","severity":1,"message":"1583","line":395,"column":21,"nodeType":"1571","messageId":"1572","endLine":395,"endColumn":23},{"ruleId":"1569","severity":1,"message":"1583","line":395,"column":42,"nodeType":"1571","messageId":"1572","endLine":395,"endColumn":44},{"ruleId":"1569","severity":1,"message":"1583","line":397,"column":28,"nodeType":"1571","messageId":"1572","endLine":397,"endColumn":30},{"ruleId":"1569","severity":1,"message":"1583","line":399,"column":31,"nodeType":"1571","messageId":"1572","endLine":399,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1583","line":409,"column":37,"nodeType":"1571","messageId":"1572","endLine":409,"endColumn":39},{"ruleId":"1569","severity":1,"message":"1583","line":409,"column":71,"nodeType":"1571","messageId":"1572","endLine":409,"endColumn":73},{"ruleId":"1577","severity":1,"message":"1581","line":411,"column":29,"nodeType":"1579","messageId":"1582","endLine":411,"endColumn":31},{"ruleId":"1577","severity":1,"message":"1581","line":413,"column":33,"nodeType":"1579","messageId":"1582","endLine":413,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1583","line":417,"column":27,"nodeType":"1571","messageId":"1572","endLine":417,"endColumn":29},{"ruleId":"1569","severity":1,"message":"1583","line":417,"column":54,"nodeType":"1571","messageId":"1572","endLine":417,"endColumn":56},{"ruleId":"1569","severity":1,"message":"1583","line":417,"column":81,"nodeType":"1571","messageId":"1572","endLine":417,"endColumn":83},{"ruleId":"1577","severity":1,"message":"1581","line":424,"column":26,"nodeType":"1579","messageId":"1582","endLine":424,"endColumn":28},{"ruleId":"1577","severity":1,"message":"1581","line":426,"column":33,"nodeType":"1579","messageId":"1582","endLine":426,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1583","line":430,"column":27,"nodeType":"1571","messageId":"1572","endLine":430,"endColumn":29},{"ruleId":"1569","severity":1,"message":"1583","line":430,"column":54,"nodeType":"1571","messageId":"1572","endLine":430,"endColumn":56},{"ruleId":"1569","severity":1,"message":"1583","line":430,"column":81,"nodeType":"1571","messageId":"1572","endLine":430,"endColumn":83},{"ruleId":"1569","severity":1,"message":"1583","line":437,"column":23,"nodeType":"1571","messageId":"1572","endLine":437,"endColumn":25},{"ruleId":"1569","severity":1,"message":"1583","line":437,"column":44,"nodeType":"1571","messageId":"1572","endLine":437,"endColumn":46},{"ruleId":"1569","severity":1,"message":"1583","line":439,"column":30,"nodeType":"1571","messageId":"1572","endLine":439,"endColumn":32},{"ruleId":"1569","severity":1,"message":"1583","line":441,"column":33,"nodeType":"1571","messageId":"1572","endLine":441,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1583","line":452,"column":31,"nodeType":"1571","messageId":"1572","endLine":452,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1583","line":453,"column":37,"nodeType":"1571","messageId":"1572","endLine":453,"endColumn":39},{"ruleId":"1577","severity":1,"message":"1581","line":454,"column":31,"nodeType":"1579","messageId":"1582","endLine":454,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1583","line":457,"column":23,"nodeType":"1571","messageId":"1572","endLine":457,"endColumn":25},{"ruleId":"1569","severity":1,"message":"1583","line":457,"column":43,"nodeType":"1571","messageId":"1572","endLine":457,"endColumn":45},{"ruleId":"1569","severity":1,"message":"1583","line":462,"column":23,"nodeType":"1571","messageId":"1572","endLine":462,"endColumn":25},{"ruleId":"1569","severity":1,"message":"1583","line":462,"column":47,"nodeType":"1571","messageId":"1572","endLine":462,"endColumn":49},{"ruleId":"1569","severity":1,"message":"1583","line":470,"column":23,"nodeType":"1571","messageId":"1572","endLine":470,"endColumn":25},{"ruleId":"1569","severity":1,"message":"1583","line":470,"column":44,"nodeType":"1571","messageId":"1572","endLine":470,"endColumn":46},{"ruleId":"1569","severity":1,"message":"1583","line":472,"column":30,"nodeType":"1571","messageId":"1572","endLine":472,"endColumn":32},{"ruleId":"1569","severity":1,"message":"1583","line":474,"column":33,"nodeType":"1571","messageId":"1572","endLine":474,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1583","line":486,"column":29,"nodeType":"1571","messageId":"1572","endLine":486,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":487,"column":35,"nodeType":"1571","messageId":"1572","endLine":487,"endColumn":37},{"ruleId":"1577","severity":1,"message":"1581","line":488,"column":29,"nodeType":"1579","messageId":"1582","endLine":488,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":491,"column":21,"nodeType":"1571","messageId":"1572","endLine":491,"endColumn":23},{"ruleId":"1569","severity":1,"message":"1583","line":491,"column":41,"nodeType":"1571","messageId":"1572","endLine":491,"endColumn":43},{"ruleId":"1569","severity":1,"message":"1583","line":496,"column":21,"nodeType":"1571","messageId":"1572","endLine":496,"endColumn":23},{"ruleId":"1569","severity":1,"message":"1583","line":496,"column":45,"nodeType":"1571","messageId":"1572","endLine":496,"endColumn":47},{"ruleId":"1569","severity":1,"message":"1583","line":502,"column":21,"nodeType":"1571","messageId":"1572","endLine":502,"endColumn":23},{"ruleId":"1569","severity":1,"message":"1583","line":502,"column":42,"nodeType":"1571","messageId":"1572","endLine":502,"endColumn":44},{"ruleId":"1569","severity":1,"message":"1583","line":504,"column":28,"nodeType":"1571","messageId":"1572","endLine":504,"endColumn":30},{"ruleId":"1569","severity":1,"message":"1583","line":506,"column":31,"nodeType":"1571","messageId":"1572","endLine":506,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1583","line":528,"column":45,"nodeType":"1571","messageId":"1572","endLine":528,"endColumn":47},{"ruleId":"1569","severity":1,"message":"1583","line":528,"column":83,"nodeType":"1571","messageId":"1572","endLine":528,"endColumn":85},{"ruleId":"1659","severity":1,"message":"1684","line":548,"column":6,"nodeType":"1661","endLine":548,"endColumn":65,"suggestions":"1685"},{"ruleId":"1560","severity":1,"message":"1686","line":7,"column":8,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":18},{"ruleId":"1569","severity":1,"message":"1583","line":41,"column":74,"nodeType":"1571","messageId":"1572","endLine":41,"endColumn":76},{"ruleId":"1569","severity":1,"message":"1583","line":51,"column":50,"nodeType":"1571","messageId":"1572","endLine":51,"endColumn":52},{"ruleId":"1569","severity":1,"message":"1583","line":60,"column":55,"nodeType":"1571","messageId":"1572","endLine":60,"endColumn":57},{"ruleId":"1687","severity":1,"message":"1688","line":218,"column":33,"nodeType":"1689","messageId":"1690","endLine":218,"endColumn":64},{"ruleId":"1560","severity":1,"message":"1620","line":4,"column":8,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1691","line":5,"column":8,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1692","line":6,"column":8,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":28},{"ruleId":"1560","severity":1,"message":"1686","line":7,"column":8,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":18},{"ruleId":"1569","severity":1,"message":"1570","line":61,"column":34,"nodeType":"1571","messageId":"1572","endLine":61,"endColumn":36},{"ruleId":"1569","severity":1,"message":"1583","line":85,"column":38,"nodeType":"1571","messageId":"1572","endLine":85,"endColumn":40},{"ruleId":"1573","severity":1,"message":"1693","line":23,"column":21,"nodeType":"1562","messageId":"1575","endLine":23,"endColumn":29},{"ruleId":"1573","severity":1,"message":"1694","line":24,"column":21,"nodeType":"1562","messageId":"1575","endLine":24,"endColumn":28},{"ruleId":"1573","severity":1,"message":"1695","line":34,"column":21,"nodeType":"1562","messageId":"1575","endLine":34,"endColumn":27},{"ruleId":"1573","severity":1,"message":"1696","line":35,"column":21,"nodeType":"1562","messageId":"1575","endLine":35,"endColumn":26},{"ruleId":"1560","severity":1,"message":"1697","line":10,"column":15,"nodeType":"1562","messageId":"1563","endLine":10,"endColumn":19},{"ruleId":"1560","severity":1,"message":"1698","line":11,"column":10,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1699","line":12,"column":10,"nodeType":"1562","messageId":"1563","endLine":12,"endColumn":21},{"ruleId":"1560","severity":1,"message":"1671","line":12,"column":23,"nodeType":"1562","messageId":"1563","endLine":12,"endColumn":34},{"ruleId":"1560","severity":1,"message":"1700","line":13,"column":9,"nodeType":"1562","messageId":"1563","endLine":13,"endColumn":20},{"ruleId":"1569","severity":1,"message":"1583","line":144,"column":76,"nodeType":"1571","messageId":"1572","endLine":144,"endColumn":78},{"ruleId":"1560","severity":1,"message":"1701","line":5,"column":10,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":26},{"ruleId":"1569","severity":1,"message":"1583","line":28,"column":28,"nodeType":"1571","messageId":"1572","endLine":28,"endColumn":30},{"ruleId":"1569","severity":1,"message":"1570","line":29,"column":29,"nodeType":"1571","messageId":"1572","endLine":29,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1702","line":1,"column":17,"nodeType":"1562","messageId":"1563","endLine":1,"endColumn":25},{"ruleId":"1560","severity":1,"message":"1699","line":3,"column":24,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":35},{"ruleId":"1659","severity":1,"message":"1677","line":12,"column":8,"nodeType":"1661","endLine":12,"endColumn":10,"suggestions":"1703"},{"ruleId":"1659","severity":1,"message":"1677","line":172,"column":8,"nodeType":"1661","endLine":172,"endColumn":10,"suggestions":"1704"},{"ruleId":"1577","severity":1,"message":"1581","line":54,"column":35,"nodeType":"1579","messageId":"1582","endLine":54,"endColumn":37},{"ruleId":"1577","severity":1,"message":"1578","line":494,"column":86,"nodeType":"1579","messageId":"1580","endLine":494,"endColumn":88},{"ruleId":"1577","severity":1,"message":"1578","line":517,"column":38,"nodeType":"1579","messageId":"1580","endLine":517,"endColumn":40},{"ruleId":"1569","severity":1,"message":"1583","line":521,"column":36,"nodeType":"1571","messageId":"1572","endLine":521,"endColumn":38},{"ruleId":"1569","severity":1,"message":"1583","line":521,"column":70,"nodeType":"1571","messageId":"1572","endLine":521,"endColumn":72},{"ruleId":"1569","severity":1,"message":"1583","line":521,"column":103,"nodeType":"1571","messageId":"1572","endLine":521,"endColumn":105},{"ruleId":"1577","severity":1,"message":"1578","line":528,"column":38,"nodeType":"1579","messageId":"1580","endLine":528,"endColumn":40},{"ruleId":"1569","severity":1,"message":"1583","line":532,"column":38,"nodeType":"1571","messageId":"1572","endLine":532,"endColumn":40},{"ruleId":"1569","severity":1,"message":"1583","line":532,"column":71,"nodeType":"1571","messageId":"1572","endLine":532,"endColumn":73},{"ruleId":"1577","severity":1,"message":"1578","line":539,"column":38,"nodeType":"1579","messageId":"1580","endLine":539,"endColumn":40},{"ruleId":"1569","severity":1,"message":"1583","line":543,"column":37,"nodeType":"1571","messageId":"1572","endLine":543,"endColumn":39},{"ruleId":"1577","severity":1,"message":"1578","line":550,"column":38,"nodeType":"1579","messageId":"1580","endLine":550,"endColumn":40},{"ruleId":"1577","severity":1,"message":"1581","line":564,"column":24,"nodeType":"1579","messageId":"1582","endLine":564,"endColumn":26},{"ruleId":"1659","severity":1,"message":"1705","line":575,"column":8,"nodeType":"1661","endLine":575,"endColumn":71,"suggestions":"1706"},{"ruleId":"1560","severity":1,"message":"1636","line":2,"column":28,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":35},{"ruleId":"1560","severity":1,"message":"1637","line":3,"column":9,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":12},{"ruleId":"1560","severity":1,"message":"1638","line":3,"column":14,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":25},{"ruleId":"1560","severity":1,"message":"1639","line":3,"column":35,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":45},{"ruleId":"1560","severity":1,"message":"1640","line":5,"column":10,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1641","line":6,"column":8,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1642","line":10,"column":5,"nodeType":"1562","messageId":"1563","endLine":10,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1643","line":14,"column":5,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":12},{"ruleId":"1569","severity":1,"message":"1583","line":70,"column":40,"nodeType":"1571","messageId":"1572","endLine":70,"endColumn":42},{"ruleId":"1569","severity":1,"message":"1583","line":76,"column":38,"nodeType":"1571","messageId":"1572","endLine":76,"endColumn":40},{"ruleId":"1569","severity":1,"message":"1583","line":83,"column":38,"nodeType":"1571","messageId":"1572","endLine":83,"endColumn":40},{"ruleId":"1569","severity":1,"message":"1583","line":83,"column":86,"nodeType":"1571","messageId":"1572","endLine":83,"endColumn":88},{"ruleId":"1569","severity":1,"message":"1583","line":95,"column":33,"nodeType":"1571","messageId":"1572","endLine":95,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1583","line":214,"column":80,"nodeType":"1571","messageId":"1572","endLine":214,"endColumn":82},{"ruleId":"1569","severity":1,"message":"1583","line":249,"column":78,"nodeType":"1571","messageId":"1572","endLine":249,"endColumn":80},{"ruleId":"1560","severity":1,"message":"1640","line":4,"column":10,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1641","line":5,"column":8,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1642","line":9,"column":5,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1643","line":13,"column":5,"nodeType":"1562","messageId":"1563","endLine":13,"endColumn":12},{"ruleId":"1560","severity":1,"message":"1707","line":15,"column":5,"nodeType":"1562","messageId":"1563","endLine":15,"endColumn":14},{"ruleId":"1569","severity":1,"message":"1583","line":62,"column":59,"nodeType":"1571","messageId":"1572","endLine":62,"endColumn":61},{"ruleId":"1560","severity":1,"message":"1634","line":6,"column":72,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":78},{"ruleId":"1560","severity":1,"message":"1708","line":7,"column":10,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1709","line":7,"column":25,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":68,"column":37,"nodeType":"1571","messageId":"1572","endLine":68,"endColumn":39},{"ruleId":"1569","severity":1,"message":"1583","line":81,"column":44,"nodeType":"1571","messageId":"1572","endLine":81,"endColumn":46},{"ruleId":"1560","severity":1,"message":"1637","line":3,"column":9,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":12},{"ruleId":"1560","severity":1,"message":"1638","line":3,"column":14,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":25},{"ruleId":"1560","severity":1,"message":"1639","line":3,"column":35,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":45},{"ruleId":"1560","severity":1,"message":"1640","line":5,"column":10,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1642","line":10,"column":5,"nodeType":"1562","messageId":"1563","endLine":10,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1643","line":14,"column":5,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":12},{"ruleId":"1560","severity":1,"message":"1710","line":28,"column":7,"nodeType":"1562","messageId":"1563","endLine":28,"endColumn":20},{"ruleId":"1711","severity":1,"message":"1712","line":70,"column":5,"nodeType":"1566","messageId":"1572","endLine":84,"endColumn":6},{"ruleId":"1569","severity":1,"message":"1570","line":108,"column":34,"nodeType":"1571","messageId":"1572","endLine":108,"endColumn":36},{"ruleId":"1569","severity":1,"message":"1583","line":122,"column":34,"nodeType":"1571","messageId":"1572","endLine":122,"endColumn":36},{"ruleId":"1569","severity":1,"message":"1583","line":220,"column":47,"nodeType":"1571","messageId":"1572","endLine":220,"endColumn":49},{"ruleId":"1569","severity":1,"message":"1583","line":221,"column":59,"nodeType":"1571","messageId":"1572","endLine":221,"endColumn":61},{"ruleId":"1569","severity":1,"message":"1583","line":222,"column":61,"nodeType":"1571","messageId":"1572","endLine":222,"endColumn":63},{"ruleId":"1569","severity":1,"message":"1570","line":237,"column":38,"nodeType":"1571","messageId":"1572","endLine":237,"endColumn":40},{"ruleId":"1569","severity":1,"message":"1583","line":361,"column":80,"nodeType":"1571","messageId":"1572","endLine":361,"endColumn":82},{"ruleId":"1569","severity":1,"message":"1583","line":420,"column":80,"nodeType":"1571","messageId":"1572","endLine":420,"endColumn":82},{"ruleId":"1560","severity":1,"message":"1637","line":3,"column":9,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":12},{"ruleId":"1560","severity":1,"message":"1638","line":3,"column":14,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":25},{"ruleId":"1560","severity":1,"message":"1639","line":3,"column":35,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":45},{"ruleId":"1560","severity":1,"message":"1640","line":5,"column":10,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":15},{"ruleId":"1560","severity":1,"message":"1642","line":10,"column":5,"nodeType":"1562","messageId":"1563","endLine":10,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1643","line":14,"column":5,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":12},{"ruleId":"1560","severity":1,"message":"1710","line":28,"column":5,"nodeType":"1562","messageId":"1563","endLine":28,"endColumn":18},{"ruleId":"1569","severity":1,"message":"1583","line":94,"column":40,"nodeType":"1571","messageId":"1572","endLine":94,"endColumn":42},{"ruleId":"1569","severity":1,"message":"1583","line":100,"column":38,"nodeType":"1571","messageId":"1572","endLine":100,"endColumn":40},{"ruleId":"1569","severity":1,"message":"1583","line":107,"column":35,"nodeType":"1571","messageId":"1572","endLine":107,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":107,"column":80,"nodeType":"1571","messageId":"1572","endLine":107,"endColumn":82},{"ruleId":"1569","severity":1,"message":"1583","line":113,"column":30,"nodeType":"1571","messageId":"1572","endLine":113,"endColumn":32},{"ruleId":"1569","severity":1,"message":"1583","line":113,"column":72,"nodeType":"1571","messageId":"1572","endLine":113,"endColumn":74},{"ruleId":"1569","severity":1,"message":"1570","line":126,"column":34,"nodeType":"1571","messageId":"1572","endLine":126,"endColumn":36},{"ruleId":"1569","severity":1,"message":"1583","line":155,"column":33,"nodeType":"1571","messageId":"1572","endLine":155,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1583","line":339,"column":80,"nodeType":"1571","messageId":"1572","endLine":339,"endColumn":82},{"ruleId":"1569","severity":1,"message":"1583","line":374,"column":78,"nodeType":"1571","messageId":"1572","endLine":374,"endColumn":80},{"ruleId":"1569","severity":1,"message":"1583","line":408,"column":81,"nodeType":"1571","messageId":"1572","endLine":408,"endColumn":83},{"ruleId":"1560","severity":1,"message":"1713","line":5,"column":8,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":24},{"ruleId":"1560","severity":1,"message":"1714","line":11,"column":3,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":7},{"ruleId":"1560","severity":1,"message":"1715","line":11,"column":9,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1646","line":11,"column":19,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":23},{"ruleId":"1569","severity":1,"message":"1583","line":74,"column":38,"nodeType":"1571","messageId":"1572","endLine":74,"endColumn":40},{"ruleId":"1569","severity":1,"message":"1583","line":87,"column":36,"nodeType":"1571","messageId":"1572","endLine":87,"endColumn":38},{"ruleId":"1569","severity":1,"message":"1583","line":100,"column":44,"nodeType":"1571","messageId":"1572","endLine":100,"endColumn":46},{"ruleId":"1569","severity":1,"message":"1583","line":132,"column":44,"nodeType":"1571","messageId":"1572","endLine":132,"endColumn":46},{"ruleId":"1569","severity":1,"message":"1583","line":173,"column":74,"nodeType":"1571","messageId":"1572","endLine":173,"endColumn":76},{"ruleId":"1569","severity":1,"message":"1570","line":183,"column":87,"nodeType":"1571","messageId":"1572","endLine":183,"endColumn":89},{"ruleId":"1560","severity":1,"message":"1634","line":6,"column":72,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":78},{"ruleId":"1560","severity":1,"message":"1639","line":3,"column":40,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":50},{"ruleId":"1560","severity":1,"message":"1716","line":10,"column":10,"nodeType":"1562","messageId":"1563","endLine":10,"endColumn":29},{"ruleId":"1560","severity":1,"message":"1642","line":13,"column":5,"nodeType":"1562","messageId":"1563","endLine":13,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1643","line":17,"column":5,"nodeType":"1562","messageId":"1563","endLine":17,"endColumn":12},{"ruleId":"1560","severity":1,"message":"1717","line":37,"column":7,"nodeType":"1562","messageId":"1563","endLine":37,"endColumn":22},{"ruleId":"1569","severity":1,"message":"1583","line":71,"column":41,"nodeType":"1571","messageId":"1572","endLine":71,"endColumn":43},{"ruleId":"1569","severity":1,"message":"1583","line":84,"column":50,"nodeType":"1571","messageId":"1572","endLine":84,"endColumn":52},{"ruleId":"1569","severity":1,"message":"1570","line":103,"column":77,"nodeType":"1571","messageId":"1572","endLine":103,"endColumn":79},{"ruleId":"1569","severity":1,"message":"1583","line":140,"column":40,"nodeType":"1571","messageId":"1572","endLine":140,"endColumn":42},{"ruleId":"1569","severity":1,"message":"1583","line":153,"column":38,"nodeType":"1571","messageId":"1572","endLine":153,"endColumn":40},{"ruleId":"1569","severity":1,"message":"1570","line":166,"column":34,"nodeType":"1571","messageId":"1572","endLine":166,"endColumn":36},{"ruleId":"1569","severity":1,"message":"1570","line":170,"column":33,"nodeType":"1571","messageId":"1572","endLine":170,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1583","line":193,"column":46,"nodeType":"1571","messageId":"1572","endLine":193,"endColumn":48},{"ruleId":"1569","severity":1,"message":"1583","line":205,"column":46,"nodeType":"1571","messageId":"1572","endLine":205,"endColumn":48},{"ruleId":"1569","severity":1,"message":"1583","line":221,"column":74,"nodeType":"1571","messageId":"1572","endLine":221,"endColumn":76},{"ruleId":"1569","severity":1,"message":"1583","line":222,"column":59,"nodeType":"1571","messageId":"1572","endLine":222,"endColumn":61},{"ruleId":"1569","severity":1,"message":"1570","line":291,"column":96,"nodeType":"1571","messageId":"1572","endLine":291,"endColumn":98},{"ruleId":"1569","severity":1,"message":"1583","line":305,"column":119,"nodeType":"1571","messageId":"1572","endLine":305,"endColumn":121},{"ruleId":"1569","severity":1,"message":"1583","line":307,"column":108,"nodeType":"1571","messageId":"1572","endLine":307,"endColumn":110},{"ruleId":"1569","severity":1,"message":"1583","line":312,"column":120,"nodeType":"1571","messageId":"1572","endLine":312,"endColumn":122},{"ruleId":"1569","severity":1,"message":"1583","line":314,"column":109,"nodeType":"1571","messageId":"1572","endLine":314,"endColumn":111},{"ruleId":"1569","severity":1,"message":"1583","line":322,"column":119,"nodeType":"1571","messageId":"1572","endLine":322,"endColumn":121},{"ruleId":"1569","severity":1,"message":"1583","line":324,"column":108,"nodeType":"1571","messageId":"1572","endLine":324,"endColumn":110},{"ruleId":"1569","severity":1,"message":"1583","line":329,"column":120,"nodeType":"1571","messageId":"1572","endLine":329,"endColumn":122},{"ruleId":"1569","severity":1,"message":"1583","line":331,"column":109,"nodeType":"1571","messageId":"1572","endLine":331,"endColumn":111},{"ruleId":"1569","severity":1,"message":"1583","line":338,"column":96,"nodeType":"1571","messageId":"1572","endLine":338,"endColumn":98},{"ruleId":"1569","severity":1,"message":"1583","line":360,"column":91,"nodeType":"1571","messageId":"1572","endLine":360,"endColumn":93},{"ruleId":"1569","severity":1,"message":"1583","line":362,"column":80,"nodeType":"1571","messageId":"1572","endLine":362,"endColumn":82},{"ruleId":"1569","severity":1,"message":"1583","line":367,"column":92,"nodeType":"1571","messageId":"1572","endLine":367,"endColumn":94},{"ruleId":"1569","severity":1,"message":"1583","line":369,"column":81,"nodeType":"1571","messageId":"1572","endLine":369,"endColumn":83},{"ruleId":"1569","severity":1,"message":"1570","line":408,"column":74,"nodeType":"1571","messageId":"1572","endLine":408,"endColumn":76},{"ruleId":"1569","severity":1,"message":"1583","line":409,"column":99,"nodeType":"1571","messageId":"1572","endLine":409,"endColumn":101},{"ruleId":"1569","severity":1,"message":"1570","line":419,"column":109,"nodeType":"1571","messageId":"1572","endLine":419,"endColumn":111},{"ruleId":"1560","severity":1,"message":"1636","line":2,"column":28,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":35},{"ruleId":"1560","severity":1,"message":"1637","line":2,"column":54,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":57},{"ruleId":"1560","severity":1,"message":"1638","line":2,"column":59,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":70},{"ruleId":"1560","severity":1,"message":"1639","line":2,"column":80,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":90},{"ruleId":"1569","severity":1,"message":"1583","line":67,"column":68,"nodeType":"1571","messageId":"1572","endLine":67,"endColumn":70},{"ruleId":"1569","severity":1,"message":"1583","line":78,"column":28,"nodeType":"1571","messageId":"1572","endLine":78,"endColumn":30},{"ruleId":"1569","severity":1,"message":"1583","line":92,"column":29,"nodeType":"1571","messageId":"1572","endLine":92,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":100,"column":28,"nodeType":"1571","messageId":"1572","endLine":100,"endColumn":30},{"ruleId":"1569","severity":1,"message":"1583","line":108,"column":26,"nodeType":"1571","messageId":"1572","endLine":108,"endColumn":28},{"ruleId":"1569","severity":1,"message":"1570","line":114,"column":26,"nodeType":"1571","messageId":"1572","endLine":114,"endColumn":28},{"ruleId":"1569","severity":1,"message":"1570","line":114,"column":48,"nodeType":"1571","messageId":"1572","endLine":114,"endColumn":50},{"ruleId":"1569","severity":1,"message":"1583","line":122,"column":31,"nodeType":"1571","messageId":"1572","endLine":122,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1570","line":128,"column":31,"nodeType":"1571","messageId":"1572","endLine":128,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1570","line":134,"column":27,"nodeType":"1571","messageId":"1572","endLine":134,"endColumn":29},{"ruleId":"1569","severity":1,"message":"1583","line":142,"column":26,"nodeType":"1571","messageId":"1572","endLine":142,"endColumn":28},{"ruleId":"1569","severity":1,"message":"1583","line":150,"column":28,"nodeType":"1571","messageId":"1572","endLine":150,"endColumn":30},{"ruleId":"1569","severity":1,"message":"1583","line":158,"column":25,"nodeType":"1571","messageId":"1572","endLine":158,"endColumn":27},{"ruleId":"1569","severity":1,"message":"1583","line":164,"column":30,"nodeType":"1571","messageId":"1572","endLine":164,"endColumn":32},{"ruleId":"1569","severity":1,"message":"1583","line":164,"column":56,"nodeType":"1571","messageId":"1572","endLine":164,"endColumn":58},{"ruleId":"1569","severity":1,"message":"1583","line":179,"column":31,"nodeType":"1571","messageId":"1572","endLine":179,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1570","line":186,"column":34,"nodeType":"1571","messageId":"1572","endLine":186,"endColumn":36},{"ruleId":"1569","severity":1,"message":"1583","line":209,"column":35,"nodeType":"1571","messageId":"1572","endLine":209,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1570","line":277,"column":63,"nodeType":"1571","messageId":"1572","endLine":277,"endColumn":65},{"ruleId":"1569","severity":1,"message":"1570","line":282,"column":61,"nodeType":"1571","messageId":"1572","endLine":282,"endColumn":63},{"ruleId":"1569","severity":1,"message":"1583","line":310,"column":127,"nodeType":"1571","messageId":"1572","endLine":310,"endColumn":129},{"ruleId":"1560","severity":1,"message":"1636","line":2,"column":28,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":35},{"ruleId":"1560","severity":1,"message":"1637","line":2,"column":54,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":57},{"ruleId":"1560","severity":1,"message":"1638","line":2,"column":59,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":70},{"ruleId":"1560","severity":1,"message":"1639","line":2,"column":80,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":90},{"ruleId":"1560","severity":1,"message":"1642","line":9,"column":5,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1643","line":13,"column":5,"nodeType":"1562","messageId":"1563","endLine":13,"endColumn":12},{"ruleId":"1569","severity":1,"message":"1583","line":132,"column":23,"nodeType":"1571","messageId":"1572","endLine":132,"endColumn":25},{"ruleId":"1569","severity":1,"message":"1583","line":140,"column":68,"nodeType":"1571","messageId":"1572","endLine":140,"endColumn":70},{"ruleId":"1573","severity":1,"message":"1576","line":148,"column":17,"nodeType":"1562","messageId":"1575","endLine":148,"endColumn":18},{"ruleId":"1569","severity":1,"message":"1583","line":150,"column":74,"nodeType":"1571","messageId":"1572","endLine":150,"endColumn":76},{"ruleId":"1569","severity":1,"message":"1583","line":160,"column":28,"nodeType":"1571","messageId":"1572","endLine":160,"endColumn":30},{"ruleId":"1569","severity":1,"message":"1583","line":174,"column":29,"nodeType":"1571","messageId":"1572","endLine":174,"endColumn":31},{"ruleId":"1569","severity":1,"message":"1583","line":182,"column":28,"nodeType":"1571","messageId":"1572","endLine":182,"endColumn":30},{"ruleId":"1569","severity":1,"message":"1583","line":190,"column":26,"nodeType":"1571","messageId":"1572","endLine":190,"endColumn":28},{"ruleId":"1569","severity":1,"message":"1570","line":197,"column":26,"nodeType":"1571","messageId":"1572","endLine":197,"endColumn":28},{"ruleId":"1569","severity":1,"message":"1570","line":197,"column":48,"nodeType":"1571","messageId":"1572","endLine":197,"endColumn":50},{"ruleId":"1569","severity":1,"message":"1583","line":205,"column":31,"nodeType":"1571","messageId":"1572","endLine":205,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1570","line":211,"column":31,"nodeType":"1571","messageId":"1572","endLine":211,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1570","line":217,"column":27,"nodeType":"1571","messageId":"1572","endLine":217,"endColumn":29},{"ruleId":"1569","severity":1,"message":"1583","line":225,"column":26,"nodeType":"1571","messageId":"1572","endLine":225,"endColumn":28},{"ruleId":"1569","severity":1,"message":"1583","line":233,"column":28,"nodeType":"1571","messageId":"1572","endLine":233,"endColumn":30},{"ruleId":"1569","severity":1,"message":"1583","line":241,"column":25,"nodeType":"1571","messageId":"1572","endLine":241,"endColumn":27},{"ruleId":"1569","severity":1,"message":"1583","line":247,"column":30,"nodeType":"1571","messageId":"1572","endLine":247,"endColumn":32},{"ruleId":"1569","severity":1,"message":"1583","line":247,"column":56,"nodeType":"1571","messageId":"1572","endLine":247,"endColumn":58},{"ruleId":"1569","severity":1,"message":"1583","line":262,"column":31,"nodeType":"1571","messageId":"1572","endLine":262,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1570","line":269,"column":34,"nodeType":"1571","messageId":"1572","endLine":269,"endColumn":36},{"ruleId":"1569","severity":1,"message":"1583","line":339,"column":34,"nodeType":"1571","messageId":"1572","endLine":339,"endColumn":36},{"ruleId":"1569","severity":1,"message":"1583","line":364,"column":127,"nodeType":"1571","messageId":"1572","endLine":364,"endColumn":129},{"ruleId":"1560","severity":1,"message":"1718","line":3,"column":10,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":24},{"ruleId":"1560","severity":1,"message":"1637","line":4,"column":10,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1622","line":4,"column":15,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1645","line":5,"column":10,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":20},{"ruleId":"1560","severity":1,"message":"1719","line":20,"column":5,"nodeType":"1562","messageId":"1563","endLine":20,"endColumn":10},{"ruleId":"1560","severity":1,"message":"1720","line":21,"column":5,"nodeType":"1562","messageId":"1563","endLine":21,"endColumn":12},{"ruleId":"1560","severity":1,"message":"1721","line":22,"column":5,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1722","line":24,"column":5,"nodeType":"1562","messageId":"1563","endLine":24,"endColumn":16},{"ruleId":"1560","severity":1,"message":"1723","line":25,"column":5,"nodeType":"1562","messageId":"1563","endLine":25,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1724","line":26,"column":5,"nodeType":"1562","messageId":"1563","endLine":26,"endColumn":21},{"ruleId":"1560","severity":1,"message":"1725","line":5,"column":9,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":19},{"ruleId":"1560","severity":1,"message":"1726","line":11,"column":10,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1727","line":11,"column":16,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":26},{"ruleId":"1560","severity":1,"message":"1636","line":11,"column":28,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":35},{"ruleId":"1560","severity":1,"message":"1644","line":11,"column":43,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":52},{"ruleId":"1560","severity":1,"message":"1638","line":11,"column":59,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":70},{"ruleId":"1569","severity":1,"message":"1583","line":51,"column":25,"nodeType":"1571","messageId":"1572","endLine":51,"endColumn":27},{"ruleId":"1560","severity":1,"message":"1726","line":9,"column":10,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1727","line":9,"column":16,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":26},{"ruleId":"1560","severity":1,"message":"1636","line":9,"column":28,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":35},{"ruleId":"1560","severity":1,"message":"1644","line":9,"column":43,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":52},{"ruleId":"1560","severity":1,"message":"1638","line":9,"column":59,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":70},{"ruleId":"1569","severity":1,"message":"1583","line":88,"column":70,"nodeType":"1571","messageId":"1572","endLine":88,"endColumn":72},{"ruleId":"1569","severity":1,"message":"1583","line":115,"column":21,"nodeType":"1571","messageId":"1572","endLine":115,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1598","line":2,"column":80,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":85},{"ruleId":"1560","severity":1,"message":"1610","line":4,"column":25,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1728","line":6,"column":20,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1583","line":52,"column":45,"nodeType":"1571","messageId":"1572","endLine":52,"endColumn":47},{"ruleId":"1569","severity":1,"message":"1583","line":85,"column":37,"nodeType":"1571","messageId":"1572","endLine":85,"endColumn":39},{"ruleId":"1569","severity":1,"message":"1583","line":87,"column":35,"nodeType":"1571","messageId":"1572","endLine":87,"endColumn":37},{"ruleId":"1569","severity":1,"message":"1583","line":100,"column":27,"nodeType":"1571","messageId":"1572","endLine":100,"endColumn":29},{"ruleId":"1569","severity":1,"message":"1583","line":119,"column":45,"nodeType":"1571","messageId":"1572","endLine":119,"endColumn":47},{"ruleId":"1569","severity":1,"message":"1583","line":155,"column":53,"nodeType":"1571","messageId":"1572","endLine":155,"endColumn":55},{"ruleId":"1659","severity":1,"message":"1677","line":172,"column":8,"nodeType":"1661","endLine":172,"endColumn":10,"suggestions":"1729"},{"ruleId":"1560","severity":1,"message":"1644","line":2,"column":43,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":52},{"ruleId":"1560","severity":1,"message":"1667","line":4,"column":10,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1610","line":4,"column":25,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1620","line":5,"column":8,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1641","line":7,"column":8,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":13},{"ruleId":"1564","severity":1,"message":"1565","line":10,"column":5,"nodeType":"1566","messageId":"1567","endLine":12,"endColumn":6},{"ruleId":"1569","severity":1,"message":"1583","line":39,"column":75,"nodeType":"1571","messageId":"1572","endLine":39,"endColumn":77},{"ruleId":"1560","severity":1,"message":"1622","line":16,"column":29,"nodeType":"1562","messageId":"1563","endLine":16,"endColumn":37},{"ruleId":"1560","severity":1,"message":"1624","line":18,"column":8,"nodeType":"1562","messageId":"1563","endLine":18,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1700","line":23,"column":10,"nodeType":"1562","messageId":"1563","endLine":23,"endColumn":21},{"ruleId":"1560","severity":1,"message":"1730","line":26,"column":10,"nodeType":"1562","messageId":"1563","endLine":26,"endColumn":20},{"ruleId":"1560","severity":1,"message":"1709","line":27,"column":25,"nodeType":"1562","messageId":"1563","endLine":27,"endColumn":37},{"ruleId":"1560","severity":1,"message":"1731","line":44,"column":5,"nodeType":"1562","messageId":"1563","endLine":44,"endColumn":21},{"ruleId":"1560","severity":1,"message":"1732","line":45,"column":5,"nodeType":"1562","messageId":"1563","endLine":45,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1733","line":46,"column":5,"nodeType":"1562","messageId":"1563","endLine":46,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1652","line":53,"column":11,"nodeType":"1562","messageId":"1563","endLine":53,"endColumn":19},{"ruleId":"1560","severity":1,"message":"1734","line":55,"column":12,"nodeType":"1562","messageId":"1563","endLine":55,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1735","line":78,"column":11,"nodeType":"1562","messageId":"1563","endLine":78,"endColumn":24},{"ruleId":"1577","severity":1,"message":"1581","line":80,"column":35,"nodeType":"1579","messageId":"1582","endLine":80,"endColumn":37},{"ruleId":"1560","severity":1,"message":"1736","line":90,"column":11,"nodeType":"1562","messageId":"1563","endLine":90,"endColumn":21},{"ruleId":"1569","severity":1,"message":"1583","line":98,"column":42,"nodeType":"1571","messageId":"1572","endLine":98,"endColumn":44},{"ruleId":"1569","severity":1,"message":"1570","line":221,"column":37,"nodeType":"1571","messageId":"1572","endLine":221,"endColumn":39},{"ruleId":"1569","severity":1,"message":"1583","line":291,"column":60,"nodeType":"1571","messageId":"1572","endLine":291,"endColumn":62},{"ruleId":"1569","severity":1,"message":"1583","line":293,"column":53,"nodeType":"1571","messageId":"1572","endLine":293,"endColumn":55},{"ruleId":"1569","severity":1,"message":"1583","line":300,"column":65,"nodeType":"1571","messageId":"1572","endLine":300,"endColumn":67},{"ruleId":"1569","severity":1,"message":"1583","line":302,"column":58,"nodeType":"1571","messageId":"1572","endLine":302,"endColumn":60},{"ruleId":"1569","severity":1,"message":"1583","line":316,"column":48,"nodeType":"1571","messageId":"1572","endLine":316,"endColumn":50},{"ruleId":"1599","severity":1,"message":"1600","line":317,"column":124,"nodeType":"1601","endLine":317,"endColumn":211},{"ruleId":"1569","severity":1,"message":"1583","line":330,"column":80,"nodeType":"1571","messageId":"1572","endLine":330,"endColumn":82},{"ruleId":"1569","severity":1,"message":"1583","line":332,"column":73,"nodeType":"1571","messageId":"1572","endLine":332,"endColumn":75},{"ruleId":"1569","severity":1,"message":"1583","line":338,"column":85,"nodeType":"1571","messageId":"1572","endLine":338,"endColumn":87},{"ruleId":"1569","severity":1,"message":"1583","line":340,"column":78,"nodeType":"1571","messageId":"1572","endLine":340,"endColumn":80},{"ruleId":"1569","severity":1,"message":"1583","line":351,"column":102,"nodeType":"1571","messageId":"1572","endLine":351,"endColumn":104},{"ruleId":"1569","severity":1,"message":"1583","line":371,"column":88,"nodeType":"1571","messageId":"1572","endLine":371,"endColumn":90},{"ruleId":"1569","severity":1,"message":"1583","line":382,"column":84,"nodeType":"1571","messageId":"1572","endLine":382,"endColumn":86},{"ruleId":"1569","severity":1,"message":"1583","line":384,"column":77,"nodeType":"1571","messageId":"1572","endLine":384,"endColumn":79},{"ruleId":"1569","severity":1,"message":"1583","line":392,"column":85,"nodeType":"1571","messageId":"1572","endLine":392,"endColumn":87},{"ruleId":"1569","severity":1,"message":"1583","line":394,"column":78,"nodeType":"1571","messageId":"1572","endLine":394,"endColumn":80},{"ruleId":"1569","severity":1,"message":"1583","line":406,"column":84,"nodeType":"1571","messageId":"1572","endLine":406,"endColumn":86},{"ruleId":"1569","severity":1,"message":"1583","line":408,"column":77,"nodeType":"1571","messageId":"1572","endLine":408,"endColumn":79},{"ruleId":"1569","severity":1,"message":"1583","line":416,"column":85,"nodeType":"1571","messageId":"1572","endLine":416,"endColumn":87},{"ruleId":"1569","severity":1,"message":"1583","line":418,"column":78,"nodeType":"1571","messageId":"1572","endLine":418,"endColumn":80},{"ruleId":"1569","severity":1,"message":"1583","line":500,"column":54,"nodeType":"1571","messageId":"1572","endLine":500,"endColumn":56},{"ruleId":"1560","severity":1,"message":"1737","line":509,"column":17,"nodeType":"1562","messageId":"1563","endLine":509,"endColumn":24},{"ruleId":"1569","severity":1,"message":"1583","line":531,"column":58,"nodeType":"1571","messageId":"1572","endLine":531,"endColumn":60},{"ruleId":"1569","severity":1,"message":"1583","line":533,"column":45,"nodeType":"1571","messageId":"1572","endLine":533,"endColumn":47},{"ruleId":"1560","severity":1,"message":"1639","line":6,"column":10,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":20},{"ruleId":"1560","severity":1,"message":"1738","line":6,"column":30,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":35},{"ruleId":"1560","severity":1,"message":"1739","line":11,"column":8,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1740","line":15,"column":8,"nodeType":"1562","messageId":"1563","endLine":15,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1691","line":16,"column":8,"nodeType":"1562","messageId":"1563","endLine":16,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1692","line":17,"column":8,"nodeType":"1562","messageId":"1563","endLine":17,"endColumn":28},{"ruleId":"1560","severity":1,"message":"1716","line":20,"column":10,"nodeType":"1562","messageId":"1563","endLine":20,"endColumn":29},{"ruleId":"1560","severity":1,"message":"1741","line":22,"column":5,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":9},{"ruleId":"1569","severity":1,"message":"1583","line":153,"column":47,"nodeType":"1571","messageId":"1572","endLine":153,"endColumn":49},{"ruleId":"1569","severity":1,"message":"1583","line":156,"column":45,"nodeType":"1571","messageId":"1572","endLine":156,"endColumn":47},{"ruleId":"1569","severity":1,"message":"1583","line":213,"column":43,"nodeType":"1571","messageId":"1572","endLine":213,"endColumn":45},{"ruleId":"1569","severity":1,"message":"1583","line":216,"column":41,"nodeType":"1571","messageId":"1572","endLine":216,"endColumn":43},{"ruleId":"1569","severity":1,"message":"1583","line":234,"column":31,"nodeType":"1571","messageId":"1572","endLine":234,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1583","line":241,"column":78,"nodeType":"1571","messageId":"1572","endLine":241,"endColumn":80},{"ruleId":"1569","severity":1,"message":"1583","line":254,"column":70,"nodeType":"1571","messageId":"1572","endLine":254,"endColumn":72},{"ruleId":"1569","severity":1,"message":"1583","line":261,"column":79,"nodeType":"1571","messageId":"1572","endLine":261,"endColumn":81},{"ruleId":"1569","severity":1,"message":"1583","line":274,"column":75,"nodeType":"1571","messageId":"1572","endLine":274,"endColumn":77},{"ruleId":"1569","severity":1,"message":"1583","line":310,"column":31,"nodeType":"1571","messageId":"1572","endLine":310,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1570","line":317,"column":33,"nodeType":"1571","messageId":"1572","endLine":317,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1583","line":340,"column":53,"nodeType":"1571","messageId":"1572","endLine":340,"endColumn":55},{"ruleId":"1569","severity":1,"message":"1583","line":352,"column":26,"nodeType":"1571","messageId":"1572","endLine":352,"endColumn":28},{"ruleId":"1569","severity":1,"message":"1583","line":375,"column":144,"nodeType":"1571","messageId":"1572","endLine":375,"endColumn":146},{"ruleId":"1569","severity":1,"message":"1570","line":529,"column":75,"nodeType":"1571","messageId":"1572","endLine":529,"endColumn":77},{"ruleId":"1569","severity":1,"message":"1583","line":553,"column":74,"nodeType":"1571","messageId":"1572","endLine":553,"endColumn":76},{"ruleId":"1569","severity":1,"message":"1583","line":577,"column":70,"nodeType":"1571","messageId":"1572","endLine":577,"endColumn":72},{"ruleId":"1569","severity":1,"message":"1583","line":605,"column":86,"nodeType":"1571","messageId":"1572","endLine":605,"endColumn":88},{"ruleId":"1569","severity":1,"message":"1570","line":635,"column":85,"nodeType":"1571","messageId":"1572","endLine":635,"endColumn":87},{"ruleId":"1560","severity":1,"message":"1644","line":4,"column":8,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1742","line":7,"column":8,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":25},{"ruleId":"1560","severity":1,"message":"1639","line":8,"column":8,"nodeType":"1562","messageId":"1563","endLine":8,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1715","line":9,"column":8,"nodeType":"1562","messageId":"1563","endLine":9,"endColumn":16},{"ruleId":"1560","severity":1,"message":"1743","line":10,"column":8,"nodeType":"1562","messageId":"1563","endLine":10,"endColumn":19},{"ruleId":"1560","severity":1,"message":"1744","line":11,"column":8,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1745","line":13,"column":10,"nodeType":"1562","messageId":"1563","endLine":13,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1610","line":14,"column":25,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1644","line":2,"column":43,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":52},{"ruleId":"1560","severity":1,"message":"1738","line":2,"column":80,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":85},{"ruleId":"1560","severity":1,"message":"1667","line":4,"column":10,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1610","line":4,"column":25,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1746","line":5,"column":10,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1641","line":8,"column":8,"nodeType":"1562","messageId":"1563","endLine":8,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1598","line":2,"column":80,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":85},{"ruleId":"1560","severity":1,"message":"1610","line":4,"column":25,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1728","line":6,"column":20,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1583","line":26,"column":47,"nodeType":"1571","messageId":"1572","endLine":26,"endColumn":49},{"ruleId":"1569","severity":1,"message":"1583","line":61,"column":37,"nodeType":"1571","messageId":"1572","endLine":61,"endColumn":39},{"ruleId":"1569","severity":1,"message":"1583","line":69,"column":27,"nodeType":"1571","messageId":"1572","endLine":69,"endColumn":29},{"ruleId":"1560","severity":1,"message":"1644","line":2,"column":43,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":52},{"ruleId":"1560","severity":1,"message":"1610","line":4,"column":25,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1641","line":7,"column":8,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":13},{"ruleId":"1564","severity":1,"message":"1565","line":10,"column":5,"nodeType":"1566","messageId":"1567","endLine":12,"endColumn":6},{"ruleId":"1747","severity":1,"message":"1748","line":26,"column":9,"nodeType":"1749","messageId":"1750","endLine":32,"endColumn":10},{"ruleId":"1751","severity":1,"message":"1752","line":30,"column":13,"nodeType":"1753","messageId":"1754","endLine":31,"endColumn":67},{"ruleId":"1560","severity":1,"message":"1637","line":2,"column":54,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":57},{"ruleId":"1560","severity":1,"message":"1638","line":2,"column":59,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":70},{"ruleId":"1560","severity":1,"message":"1639","line":2,"column":80,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":90},{"ruleId":"1560","severity":1,"message":"1667","line":4,"column":10,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1610","line":4,"column":25,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1620","line":5,"column":8,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1755","line":6,"column":10,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1739","line":13,"column":8,"nodeType":"1562","messageId":"1563","endLine":13,"endColumn":17},{"ruleId":"1560","severity":1,"message":"1692","line":16,"column":8,"nodeType":"1562","messageId":"1563","endLine":16,"endColumn":28},{"ruleId":"1560","severity":1,"message":"1691","line":17,"column":8,"nodeType":"1562","messageId":"1563","endLine":17,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1756","line":18,"column":8,"nodeType":"1562","messageId":"1563","endLine":18,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1740","line":19,"column":8,"nodeType":"1562","messageId":"1563","endLine":19,"endColumn":22},{"ruleId":"1569","severity":1,"message":"1583","line":51,"column":68,"nodeType":"1571","messageId":"1572","endLine":51,"endColumn":70},{"ruleId":"1569","severity":1,"message":"1583","line":51,"column":110,"nodeType":"1571","messageId":"1572","endLine":51,"endColumn":112},{"ruleId":"1573","severity":1,"message":"1576","line":102,"column":17,"nodeType":"1562","messageId":"1575","endLine":102,"endColumn":18},{"ruleId":"1569","severity":1,"message":"1583","line":143,"column":44,"nodeType":"1571","messageId":"1572","endLine":143,"endColumn":46},{"ruleId":"1569","severity":1,"message":"1583","line":174,"column":31,"nodeType":"1571","messageId":"1572","endLine":174,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1583","line":181,"column":78,"nodeType":"1571","messageId":"1572","endLine":181,"endColumn":80},{"ruleId":"1569","severity":1,"message":"1583","line":200,"column":70,"nodeType":"1571","messageId":"1572","endLine":200,"endColumn":72},{"ruleId":"1569","severity":1,"message":"1583","line":207,"column":79,"nodeType":"1571","messageId":"1572","endLine":207,"endColumn":81},{"ruleId":"1569","severity":1,"message":"1583","line":220,"column":75,"nodeType":"1571","messageId":"1572","endLine":220,"endColumn":77},{"ruleId":"1569","severity":1,"message":"1583","line":257,"column":31,"nodeType":"1571","messageId":"1572","endLine":257,"endColumn":33},{"ruleId":"1569","severity":1,"message":"1570","line":264,"column":34,"nodeType":"1571","messageId":"1572","endLine":264,"endColumn":36},{"ruleId":"1569","severity":1,"message":"1583","line":304,"column":47,"nodeType":"1571","messageId":"1572","endLine":304,"endColumn":49},{"ruleId":"1569","severity":1,"message":"1583","line":307,"column":45,"nodeType":"1571","messageId":"1572","endLine":307,"endColumn":47},{"ruleId":"1573","severity":1,"message":"1576","line":375,"column":17,"nodeType":"1562","messageId":"1575","endLine":375,"endColumn":18},{"ruleId":"1569","severity":1,"message":"1583","line":407,"column":43,"nodeType":"1571","messageId":"1572","endLine":407,"endColumn":45},{"ruleId":"1569","severity":1,"message":"1583","line":410,"column":41,"nodeType":"1571","messageId":"1572","endLine":410,"endColumn":43},{"ruleId":"1569","severity":1,"message":"1583","line":436,"column":85,"nodeType":"1571","messageId":"1572","endLine":436,"endColumn":87},{"ruleId":"1569","severity":1,"message":"1583","line":446,"column":77,"nodeType":"1571","messageId":"1572","endLine":446,"endColumn":79},{"ruleId":"1569","severity":1,"message":"1583","line":483,"column":20,"nodeType":"1571","messageId":"1572","endLine":483,"endColumn":22},{"ruleId":"1569","severity":1,"message":"1583","line":492,"column":26,"nodeType":"1571","messageId":"1572","endLine":492,"endColumn":28},{"ruleId":"1569","severity":1,"message":"1583","line":518,"column":127,"nodeType":"1571","messageId":"1572","endLine":518,"endColumn":129},{"ruleId":"1569","severity":1,"message":"1570","line":681,"column":62,"nodeType":"1571","messageId":"1572","endLine":681,"endColumn":64},{"ruleId":"1569","severity":1,"message":"1583","line":683,"column":79,"nodeType":"1571","messageId":"1572","endLine":683,"endColumn":81},{"ruleId":"1569","severity":1,"message":"1583","line":701,"column":91,"nodeType":"1571","messageId":"1572","endLine":701,"endColumn":93},{"ruleId":"1569","severity":1,"message":"1583","line":733,"column":66,"nodeType":"1571","messageId":"1572","endLine":733,"endColumn":68},{"ruleId":"1569","severity":1,"message":"1583","line":763,"column":66,"nodeType":"1571","messageId":"1572","endLine":763,"endColumn":68},{"ruleId":"1569","severity":1,"message":"1583","line":791,"column":78,"nodeType":"1571","messageId":"1572","endLine":791,"endColumn":80},{"ruleId":"1569","severity":1,"message":"1570","line":820,"column":81,"nodeType":"1571","messageId":"1572","endLine":820,"endColumn":83},{"ruleId":"1659","severity":1,"message":"1757","line":79,"column":7,"nodeType":"1661","endLine":79,"endColumn":27,"suggestions":"1758"},{"ruleId":"1659","severity":1,"message":"1757","line":89,"column":7,"nodeType":"1661","endLine":89,"endColumn":26,"suggestions":"1759"},{"ruleId":"1659","severity":1,"message":"1757","line":99,"column":7,"nodeType":"1661","endLine":99,"endColumn":28,"suggestions":"1760"},{"ruleId":"1659","severity":1,"message":"1757","line":129,"column":7,"nodeType":"1661","endLine":129,"endColumn":78,"suggestions":"1761"},{"ruleId":"1560","severity":1,"message":"1641","line":11,"column":8,"nodeType":"1562","messageId":"1563","endLine":11,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1731","line":30,"column":5,"nodeType":"1562","messageId":"1563","endLine":30,"endColumn":21},{"ruleId":"1560","severity":1,"message":"1732","line":31,"column":5,"nodeType":"1562","messageId":"1563","endLine":31,"endColumn":18},{"ruleId":"1560","severity":1,"message":"1733","line":32,"column":5,"nodeType":"1562","messageId":"1563","endLine":32,"endColumn":18},{"ruleId":"1569","severity":1,"message":"1583","line":47,"column":53,"nodeType":"1571","messageId":"1572","endLine":47,"endColumn":55},{"ruleId":"1569","severity":1,"message":"1583","line":74,"column":62,"nodeType":"1571","messageId":"1572","endLine":74,"endColumn":64},{"ruleId":"1569","severity":1,"message":"1583","line":76,"column":44,"nodeType":"1571","messageId":"1572","endLine":76,"endColumn":46},{"ruleId":"1560","severity":1,"message":"1726","line":3,"column":10,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1727","line":3,"column":16,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":26},{"ruleId":"1560","severity":1,"message":"1762","line":3,"column":28,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":33},{"ruleId":"1560","severity":1,"message":"1644","line":3,"column":41,"nodeType":"1562","messageId":"1563","endLine":3,"endColumn":50},{"ruleId":"1560","severity":1,"message":"1763","line":4,"column":5,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1764","line":4,"column":16,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":30},{"ruleId":"1560","severity":1,"message":"1634","line":4,"column":32,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":38},{"ruleId":"1560","severity":1,"message":"1639","line":4,"column":40,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":50},{"ruleId":"1560","severity":1,"message":"1765","line":5,"column":5,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":10},{"ruleId":"1560","severity":1,"message":"1766","line":5,"column":12,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":20},{"ruleId":"1560","severity":1,"message":"1626","line":5,"column":22,"nodeType":"1562","messageId":"1563","endLine":5,"endColumn":31},{"ruleId":"1560","severity":1,"message":"1640","line":6,"column":10,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":15},{"ruleId":"1569","severity":1,"message":"1583","line":26,"column":46,"nodeType":"1571","messageId":"1572","endLine":26,"endColumn":48},{"ruleId":"1569","severity":1,"message":"1583","line":51,"column":53,"nodeType":"1571","messageId":"1572","endLine":51,"endColumn":55},{"ruleId":"1569","severity":1,"message":"1570","line":132,"column":96,"nodeType":"1571","messageId":"1572","endLine":132,"endColumn":98},{"ruleId":"1569","severity":1,"message":"1570","line":151,"column":98,"nodeType":"1571","messageId":"1572","endLine":151,"endColumn":100},{"ruleId":"1560","severity":1,"message":"1767","line":6,"column":21,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":25},{"ruleId":"1560","severity":1,"message":"1768","line":6,"column":27,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":35},{"ruleId":"1560","severity":1,"message":"1769","line":6,"column":37,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":51},{"ruleId":"1560","severity":1,"message":"1770","line":6,"column":53,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":65},{"ruleId":"1560","severity":1,"message":"1771","line":14,"column":8,"nodeType":"1562","messageId":"1563","endLine":14,"endColumn":26},{"ruleId":"1569","severity":1,"message":"1583","line":48,"column":44,"nodeType":"1571","messageId":"1572","endLine":48,"endColumn":46},{"ruleId":"1569","severity":1,"message":"1583","line":61,"column":44,"nodeType":"1571","messageId":"1572","endLine":61,"endColumn":46},{"ruleId":"1569","severity":1,"message":"1583","line":200,"column":33,"nodeType":"1571","messageId":"1572","endLine":200,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1583","line":201,"column":33,"nodeType":"1571","messageId":"1572","endLine":201,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1583","line":215,"column":33,"nodeType":"1571","messageId":"1572","endLine":215,"endColumn":35},{"ruleId":"1569","severity":1,"message":"1583","line":216,"column":36,"nodeType":"1571","messageId":"1572","endLine":216,"endColumn":38},{"ruleId":"1569","severity":1,"message":"1583","line":217,"column":63,"nodeType":"1571","messageId":"1572","endLine":217,"endColumn":65},{"ruleId":"1569","severity":1,"message":"1583","line":269,"column":40,"nodeType":"1571","messageId":"1572","endLine":269,"endColumn":42},{"ruleId":"1569","severity":1,"message":"1583","line":270,"column":44,"nodeType":"1571","messageId":"1572","endLine":270,"endColumn":46},{"ruleId":"1560","severity":1,"message":"1764","line":15,"column":8,"nodeType":"1562","messageId":"1563","endLine":15,"endColumn":22},{"ruleId":"1560","severity":1,"message":"1671","line":18,"column":10,"nodeType":"1562","messageId":"1563","endLine":18,"endColumn":21},{"ruleId":"1560","severity":1,"message":"1772","line":22,"column":10,"nodeType":"1562","messageId":"1563","endLine":22,"endColumn":22},{"ruleId":"1569","severity":1,"message":"1583","line":137,"column":57,"nodeType":"1571","messageId":"1572","endLine":137,"endColumn":59},{"ruleId":"1569","severity":1,"message":"1583","line":160,"column":67,"nodeType":"1571","messageId":"1572","endLine":160,"endColumn":69},{"ruleId":"1569","severity":1,"message":"1583","line":162,"column":56,"nodeType":"1571","messageId":"1572","endLine":162,"endColumn":58},{"ruleId":"1569","severity":1,"message":"1583","line":169,"column":72,"nodeType":"1571","messageId":"1572","endLine":169,"endColumn":74},{"ruleId":"1569","severity":1,"message":"1583","line":171,"column":61,"nodeType":"1571","messageId":"1572","endLine":171,"endColumn":63},{"ruleId":"1569","severity":1,"message":"1583","line":178,"column":86,"nodeType":"1571","messageId":"1572","endLine":178,"endColumn":88},{"ruleId":"1569","severity":1,"message":"1583","line":198,"column":52,"nodeType":"1571","messageId":"1572","endLine":198,"endColumn":54},{"ruleId":"1599","severity":1,"message":"1600","line":199,"column":109,"nodeType":"1601","endLine":199,"endColumn":192},{"ruleId":"1569","severity":1,"message":"1583","line":217,"column":105,"nodeType":"1571","messageId":"1572","endLine":217,"endColumn":107},{"ruleId":"1569","severity":1,"message":"1583","line":222,"column":99,"nodeType":"1571","messageId":"1572","endLine":222,"endColumn":101},{"ruleId":"1569","severity":1,"message":"1583","line":224,"column":88,"nodeType":"1571","messageId":"1572","endLine":224,"endColumn":90},{"ruleId":"1569","severity":1,"message":"1583","line":230,"column":108,"nodeType":"1571","messageId":"1572","endLine":230,"endColumn":110},{"ruleId":"1569","severity":1,"message":"1583","line":232,"column":97,"nodeType":"1571","messageId":"1572","endLine":232,"endColumn":99},{"ruleId":"1560","severity":1,"message":"1726","line":2,"column":10,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":14},{"ruleId":"1560","severity":1,"message":"1727","line":2,"column":16,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":26},{"ruleId":"1560","severity":1,"message":"1644","line":2,"column":43,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":52},{"ruleId":"1560","severity":1,"message":"1638","line":2,"column":59,"nodeType":"1562","messageId":"1563","endLine":2,"endColumn":70},{"ruleId":"1560","severity":1,"message":"1667","line":4,"column":10,"nodeType":"1562","messageId":"1563","endLine":4,"endColumn":23},{"ruleId":"1560","severity":1,"message":"1620","line":6,"column":8,"nodeType":"1562","messageId":"1563","endLine":6,"endColumn":13},{"ruleId":"1560","severity":1,"message":"1755","line":7,"column":10,"nodeType":"1562","messageId":"1563","endLine":7,"endColumn":18},{"ruleId":"1659","severity":1,"message":"1677","line":55,"column":6,"nodeType":"1661","endLine":55,"endColumn":8,"suggestions":"1773"},{"ruleId":"1659","severity":1,"message":"1677","line":51,"column":6,"nodeType":"1661","endLine":51,"endColumn":8,"suggestions":"1774"},{"ruleId":"1659","severity":1,"message":"1677","line":105,"column":8,"nodeType":"1661","endLine":105,"endColumn":10,"suggestions":"1775"},"no-native-reassign",["1776"],"no-negated-in-lhs",["1777"],"no-unused-vars","'FiChevronRight' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'joinType' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-redeclare","'newState' is already defined.","redeclared","'i' is already defined.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","Expected '===' and instead saw '=='.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["1778","1779"],["1780","1781"],"no-dupe-keys","Duplicate key 'updateShiftTypes'.","ObjectExpression",["1782","1783"],["1784","1785"],["1786","1787"],["1788","1789"],"'FiXSquare' is defined but never used.","'Alert' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'DataGrid' is defined but never used.","'GoodTable' is defined but never used.","'NavLink' is defined but never used.","'SearchBar' is defined but never used.","'inputAdornmentClasses' is defined but never used.","'SortByTable' is defined but never used.","'BiEdit' is defined but never used.","'MdOutlineIntegrationInstructions' is defined but never used.","'name' is assigned a value but never used.","'currentproductJoinType' is already defined.","'m' is already defined.","'Page' is defined but never used.","'Label' is defined but never used.","'Scrollbar' is defined but never used.","'SearchNotFound' is defined but never used.","'sentenceCase' is defined but never used.","'Stack' is defined but never used.","'Avatar' is defined but never used.","'Checkbox' is defined but never used.","'Container' is defined but never used.","'Typography' is defined but never used.","'TablePagination' is defined but never used.","'TableHead' is defined but never used.","'TableSortLabel' is defined but never used.","'EmployeeToolbar' is defined but never used.","'EmployeeTableHeader' is defined but never used.","'USERLIST' is defined but never used.","'selected' is assigned a value but never used.","'filterName' is assigned a value but never used.","'filteredUsers' is assigned a value but never used.","'Button' is defined but never used.","'exampleImg' is defined but never used.","'Divider' is defined but never used.","'Box' is defined but never used.","'CardContent' is defined but never used.","'InputLabel' is defined but never used.","'Image' is defined but never used.","'axios' is defined but never used.","'productTypes' is assigned a value but never used.","'typeSet' is assigned a value but never used.","'TextField' is defined but never used.","'withStyles' is defined but never used.","'Grid' is defined but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","unsafeRefs","Duplicate key 'InfomationBillEdit'.","'listReciept' is assigned a value but never used.","'infoUser' is assigned a value but never used.","'RiMoneyDollarCircleFill' is defined but never used.","'BsCashCoin' is defined but never used.","'salary' is assigned a value but never used.","'money' is assigned a value but never used.","'realDate' is already defined.","'date' is already defined.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'listTimeKeeping' and 'nowTime'. Either include them or remove the dependency array.","ArrayExpression",["1790"],"'importProduct' is already defined.","'exportProduct' is already defined.","React Hook React.useEffect has missing dependencies: 'listProduct', 'listReciept', and 'nowTime'. Either include them or remove the dependency array.",["1791"],"'BiPlusMedical' is defined but never used.","'IconButton' is defined but never used.","'FiEdit' is defined but never used.","'FiTrash2' is defined but never used.","'useDispatch' is defined but never used.","React Hook React.useEffect has a missing dependency: 'listReceipt'. Either include it or remove the dependency array.",["1792"],"React Hook React.useEffect has missing dependencies: 'listReciept' and 'nowTime'. Either include them or remove the dependency array.",["1793"],["1794"],"React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["1795"],"React Hook React.useEffect has a missing dependency: 'listReciept'. Either include it or remove the dependency array.",["1796"],"'now' is defined but never used.","'title' is assigned a value but never used.","Function declared in a loop contains unsafe references to variable(s) 'moneyDoanhThu', 'moneyTienGoc'.","React Hook React.useEffect has missing dependencies: 'DateInMonth', 'DateInWeek', 'DateInYear', 'GrowthPercent', 'nowTime', 'totalMoneyInMonth', and 'totalMoneyInWeek'. Either include them or remove the dependency array.",["1797"],"'TimePicker' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'AdapterDateFns' is defined but never used.","'LocalizationProvider' is defined but never used.","'fromHour' is already defined.","'fromMin' is already defined.","'toHour' is already defined.","'toMin' is already defined.","'blue' is defined but never used.","'CgDanger' is defined but never used.","'useSelector' is defined but never used.","'TiArrowBack' is defined but never used.","'FaCommentsDollar' is defined but never used.","'useState' is defined but never used.",["1798"],["1799"],"React Hook React.useEffect has missing dependencies: 'dispatch' and 'listMAHD'. Either include them or remove the dependency array.",["1800"],"'listUsers' is assigned a value but never used.","'AiOutlineEdit' is defined but never used.","'AiFillDelete' is defined but never used.","'listDayInWeek' is assigned a value but never used.","no-dupe-class-members","Duplicate name 'getCurrentDateTime'.","'moreVerticalFill' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'GiConsoleController' is defined but never used.","'StyledTextField' is assigned a value but never used.","'visuallyHidden' is defined but never used.","'order' is assigned a value but never used.","'orderBy' is assigned a value but never used.","'rowCount' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'onRequestSort' is assigned a value but never used.","'onSelectAllClick' is assigned a value but never used.","'GiPayMoney' is defined but never used.","'Card' is defined but never used.","'CardHeader' is defined but never used.","'GiVampireCape' is defined but never used.",["1801"],"'fontWeight' is defined but never used.","'listProductInfor' is assigned a value but never used.","'joinTypeInfor' is assigned a value but never used.","'listTypeInfor' is assigned a value but never used.","'statusSelectReplace' is assigned a value but never used.","'countQuantity' is assigned a value but never used.","'handleOpen' is assigned a value but never used.","'classes' is assigned a value but never used.","'Modal' is defined but never used.","'GoodImage' is defined but never used.","'DateTimePicker' is defined but never used.","'Link' is defined but never used.","'DesktopDatePicker' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'IoIosAdd' is defined but never used.","'TiDelete' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'GiCancel' is defined but never used.","'DatePicker' is defined but never used.","React Hook React.useCallback has a missing dependency: 'inputProps'. Either include it or remove the dependency array.",["1802"],["1803"],["1804"],["1805"],"'Table' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'Paper' is defined but never used.","'TableRow' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemButton' is defined but never used.","'ListItemText' is defined but never used.","'AddEmployeeToShift' is defined but never used.","'StaticRouter' is defined but never used.",["1806"],["1807"],["1808"],"no-global-assign","no-unsafe-negation",{"messageId":"1809","fix":"1810","desc":"1811"},{"messageId":"1812","fix":"1813","desc":"1814"},{"messageId":"1809","fix":"1815","desc":"1811"},{"messageId":"1812","fix":"1816","desc":"1814"},{"messageId":"1809","fix":"1817","desc":"1811"},{"messageId":"1812","fix":"1818","desc":"1814"},{"messageId":"1809","fix":"1819","desc":"1811"},{"messageId":"1812","fix":"1820","desc":"1814"},{"messageId":"1809","fix":"1821","desc":"1811"},{"messageId":"1812","fix":"1822","desc":"1814"},{"messageId":"1809","fix":"1823","desc":"1811"},{"messageId":"1812","fix":"1824","desc":"1814"},{"desc":"1825","fix":"1826"},{"desc":"1827","fix":"1828"},{"desc":"1829","fix":"1830"},{"desc":"1831","fix":"1832"},{"desc":"1831","fix":"1833"},{"desc":"1834","fix":"1835"},{"desc":"1836","fix":"1837"},{"desc":"1838","fix":"1839"},{"desc":"1834","fix":"1840"},{"desc":"1834","fix":"1841"},{"desc":"1842","fix":"1843"},{"desc":"1834","fix":"1844"},{"desc":"1845","fix":"1846"},{"desc":"1845","fix":"1847"},{"desc":"1845","fix":"1848"},{"desc":"1849","fix":"1850"},{"desc":"1834","fix":"1851"},{"desc":"1834","fix":"1852"},{"desc":"1834","fix":"1853"},"removeEscape",{"range":"1854","text":"1855"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1856","text":"1857"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1858","text":"1855"},{"range":"1859","text":"1857"},{"range":"1860","text":"1855"},{"range":"1861","text":"1857"},{"range":"1862","text":"1855"},{"range":"1863","text":"1857"},{"range":"1864","text":"1855"},{"range":"1865","text":"1857"},{"range":"1866","text":"1855"},{"range":"1867","text":"1857"},"Update the dependencies array to be: [listTimeKeeping, nowTime, typeHeaderDashboard]",{"range":"1868","text":"1869"},"Update the dependencies array to be: [listProduct, listReciept, nowTime, typeHeaderDashboard]",{"range":"1870","text":"1871"},"Update the dependencies array to be: [typeCheck, value1, value, listReceipt]",{"range":"1872","text":"1873"},"Update the dependencies array to be: [listReciept, nowTime, typeHeaderDashboard]",{"range":"1874","text":"1875"},{"range":"1876","text":"1875"},"Update the dependencies array to be: [dispatch]",{"range":"1877","text":"1878"},"Update the dependencies array to be: [listReciept, value]",{"range":"1879","text":"1880"},"Update the dependencies array to be: [typeTimeDashboard, growth, typeMonth, typeYear, regulation, nowTime, DateInYear, GrowthPercent, DateInWeek, totalMoneyInWeek, totalMoneyInMonth, DateInMonth]",{"range":"1881","text":"1882"},{"range":"1883","text":"1878"},{"range":"1884","text":"1878"},"Update the dependencies array to be: [typeReciept, typeByDate, listReciept, statusSelectAll, search, dispatch, listMAHD]",{"range":"1885","text":"1886"},{"range":"1887","text":"1878"},"Update the dependencies array to be: [inputProps]",{"range":"1888","text":"1889"},{"range":"1890","text":"1889"},{"range":"1891","text":"1889"},"Update the dependencies array to be: [cancelOnEscape, inputProps, handleRequestSearch, handleCancel]",{"range":"1892","text":"1893"},{"range":"1894","text":"1878"},{"range":"1895","text":"1878"},{"range":"1896","text":"1878"},[6143,6144],"",[6143,6143],"\\",[6159,6160],[6159,6159],[3129,3130],[3129,3129],[3145,3146],[3145,3145],[3598,3599],[3598,3598],[3614,3615],[3614,3614],[6571,6592],"[listTimeKeeping, nowTime, typeHeaderDashboard]",[7551,7572],"[listProduct, listReciept, nowTime, typeHeaderDashboard]",[3581,3607],"[typeCheck, value1, value, listReceipt]",[3150,3171],"[listReciept, nowTime, typeHeaderDashboard]",[2782,2803],[1555,1557],"[dispatch]",[2849,2856],"[listReciept, value]",[19551,19610],"[typeTimeDashboard, growth, typeMonth, typeYear, regulation, nowTime, DateInYear, GrowthPercent, DateInWeek, totalMoneyInWeek, totalMoneyInMonth, DateInMonth]",[322,324],[5811,5813],[28560,28623],"[typeReciept, typeByDate, listReciept, statusSelectAll, search, dispatch, listMAHD]",[5811,5813],[2067,2087],"[inputProps]",[2288,2307],[2525,2546],[3292,3363],"[cancelOnEscape, inputProps, handleRequestSearch, handleCancel]",[1535,1537],[1468,1470],[2265,2267]]