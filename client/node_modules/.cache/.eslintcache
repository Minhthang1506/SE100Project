[{"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\index.js":"1","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\App.js":"2","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Store.js":"3","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\LoginStatusReducer.js":"4","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ProvinceReducer.js":"5","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeStatusReducer.js":"6","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\DistrictReducer.js":"7","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ObjectEditShiftReducer.js":"8","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RoleReducer.js":"9","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ConfirmModalReducer.js":"10","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListProductReducer.js":"11","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\typeProductReducer.js":"12","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUserReducer.js":"13","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListShiftReducer.js":"14","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\chooseTypeProduct.js":"15","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeProductValueReducer.js":"16","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\AlertReducer.js":"17","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUpdateProduct.js":"18","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DirectionURL.js":"19","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditShiftReducer.js":"20","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddShiftReducer.js":"21","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDeleteConfirmReducer.js":"22","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusConfirmReducer.js":"23","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateGoodReducer.js":"24","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusIsAddTypeReducer.js":"25","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddTypeReducer.js":"26","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusModalConfirmPassword.js":"27","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDarkModeReducer.js":"28","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditTypeReducer.js":"29","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusYesConfirmReducer.js":"30","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusPayMoneyStatus.js":"31","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateEmployeeReducer.js":"32","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\StatusShowHistoryRecieptReducer.js":"33","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddEmployeeReducer.js":"34","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\ListRecieptReducer.js":"35","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\InfomationBillEdit.js":"36","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\ShoppingBagsReducer.js":"37","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\employeeSackedListReducer.js":"38","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\employeeListReducer.js":"39","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\StatusEditInfomationBill.js":"40","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\TypeByDate.js":"41","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\StatusSelectAll.js":"42","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\ListRecieptDelete.js":"43","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\TypeReciept.js":"44","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\currentEditEmployeeReducer.js":"45","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Body.js":"46","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Login.js":"47","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\ForgotPassword.js":"48","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\LoginWithEmployee.js":"49","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Register.js":"50","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DashboardURL.js":"51","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\ModalConfirmPassword.js":"52","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Partials\\SideNavBar.js":"53","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodManager.js":"54","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeeManager.js":"55","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodImport.js":"56","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\DashBoard.js":"57","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\ReiceiptManager.js":"58","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\SellProduct.js":"59","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Profile.js":"60","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\EditTypeModal.js":"61","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Regulation.js":"62","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ModalAdd.js":"63","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ListShift.js":"64","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ChangePassword.js":"65","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileSetting.js":"66","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileDetail.js":"67","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\AddTypeModal.js":"68","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\DarkMode.js":"69","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileHeader.js":"70","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\HistoryReciept.js":"71","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Print.js":"72","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ShoppingBags.js":"73","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Tabs.js":"74","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\DateReciept.js":"75","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\TableReciept.js":"76","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\ControlReciept.js":"77","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\StatusReceiptType.js":"78","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButton.js":"79","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\Statistic.js":"80","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\ConfirmModal.js":"81","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\TableReciept.js":"82","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ComponentToPrint.js":"83","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UnShiftEmployee.js":"84","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\FixedCalendar.js":"85","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateEmployeeModal.js":"86","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddEmployeeModal.js":"87","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\PayMoneyModal.js":"88","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\fakeData.js":"89","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeTableHeader.js":"90","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\BaseOptionChart.js":"91","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\FixedCalendarCell.js":"92","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeMoreMenu.js":"93","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\SackedEmployeeMenu.js":"94","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeToolbar.js":"95","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\SearchNotFound.js":"96","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Scrollbar.js":"97","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Label.js":"98","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Page.js":"99","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\SearchBar.js":"100","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\UpdateGoodModal.js":"101","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodTable.js":"102","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\TableRow.js":"103","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\SearchReducer.js":"104","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\SearchReceipt.js":"105","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\addNextWeekTimeKeepingStatus.js":"106","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\nextWeekTimeKeepingReducer.js":"107","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\listShiftAssignReducer.js":"108","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\updateNextWeekTimeKeepingStatus.js":"109","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\addTimeKeepingStatus.js":"110","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\updateNextWeekTimeKeepingValue.js":"111","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\listTimeKeepingReducer.js":"112","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\updateTimeKeepingStatus.js":"113","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\updateTimeKeeperValue.js":"114","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\TimekeepingTable.js":"115","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddTimeKeeperModal.js":"116","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\NoJobEmployee.js":"117","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateTimeKeepingModal.js":"118","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddNextWeekTimeKeeping.js":"119","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateNextWeekTimeKeeping.js":"120","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Dashboard\\TypeTimeDashboard.js":"121","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\DaiLyMoneyTracking.js":"122","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButtonDashboard.js":"123","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Dashboard\\TypeHeaderDashboard.js":"124","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\TotalMoney.js":"125","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\ErrorReceipt.js":"126"},{"size":309,"mtime":1634653035214,"results":"127","hashOfConfig":"128"},{"size":4298,"mtime":1637652861606,"results":"129","hashOfConfig":"128"},{"size":6353,"mtime":1637413091460,"results":"130","hashOfConfig":"128"},{"size":295,"mtime":1634653035195,"results":"131","hashOfConfig":"128"},{"size":384,"mtime":1634653035196,"results":"132","hashOfConfig":"128"},{"size":343,"mtime":1634653035200,"results":"133","hashOfConfig":"128"},{"size":376,"mtime":1634661219450,"results":"134","hashOfConfig":"128"},{"size":340,"mtime":1634653035196,"results":"135","hashOfConfig":"128"},{"size":316,"mtime":1634653035196,"results":"136","hashOfConfig":"128"},{"size":482,"mtime":1634653035193,"results":"137","hashOfConfig":"128"},{"size":715,"mtime":1637075276218,"results":"138","hashOfConfig":"128"},{"size":731,"mtime":1637075276219,"results":"139","hashOfConfig":"128"},{"size":3180,"mtime":1637150093400,"results":"140","hashOfConfig":"128"},{"size":1176,"mtime":1637150597242,"results":"141","hashOfConfig":"128"},{"size":360,"mtime":1635428539250,"results":"142","hashOfConfig":"128"},{"size":668,"mtime":1635260224145,"results":"143","hashOfConfig":"128"},{"size":670,"mtime":1635349470393,"results":"144","hashOfConfig":"128"},{"size":558,"mtime":1637075276217,"results":"145","hashOfConfig":"128"},{"size":2219,"mtime":1634653035202,"results":"146","hashOfConfig":"128"},{"size":312,"mtime":1634653035198,"results":"147","hashOfConfig":"128"},{"size":303,"mtime":1634653035196,"results":"148","hashOfConfig":"128"},{"size":390,"mtime":1634653035198,"results":"149","hashOfConfig":"128"},{"size":303,"mtime":1634653035197,"results":"150","hashOfConfig":"128"},{"size":323,"mtime":1635428539248,"results":"151","hashOfConfig":"128"},{"size":372,"mtime":1634653035198,"results":"152","hashOfConfig":"128"},{"size":304,"mtime":1634653035197,"results":"153","hashOfConfig":"128"},{"size":370,"mtime":1634653035199,"results":"154","hashOfConfig":"128"},{"size":302,"mtime":1634653035197,"results":"155","hashOfConfig":"128"},{"size":309,"mtime":1634653035198,"results":"156","hashOfConfig":"128"},{"size":350,"mtime":1634653035200,"results":"157","hashOfConfig":"128"},{"size":324,"mtime":1634653035199,"results":"158","hashOfConfig":"128"},{"size":339,"mtime":1634653035199,"results":"159","hashOfConfig":"128"},{"size":341,"mtime":1636018498899,"results":"160","hashOfConfig":"128"},{"size":324,"mtime":1634653035196,"results":"161","hashOfConfig":"128"},{"size":3267,"mtime":1637120333159,"results":"162","hashOfConfig":"128"},{"size":357,"mtime":1636272916157,"results":"163","hashOfConfig":"128"},{"size":1333,"mtime":1636811971103,"results":"164","hashOfConfig":"128"},{"size":1796,"mtime":1637075276213,"results":"165","hashOfConfig":"128"},{"size":2587,"mtime":1637075276212,"results":"166","hashOfConfig":"128"},{"size":341,"mtime":1636272406917,"results":"167","hashOfConfig":"128"},{"size":340,"mtime":1636611050856,"results":"168","hashOfConfig":"128"},{"size":382,"mtime":1637048575528,"results":"169","hashOfConfig":"128"},{"size":629,"mtime":1636694738193,"results":"170","hashOfConfig":"128"},{"size":541,"mtime":1636615262019,"results":"171","hashOfConfig":"128"},{"size":901,"mtime":1636472317541,"results":"172","hashOfConfig":"128"},{"size":1613,"mtime":1637241667533,"results":"173","hashOfConfig":"128"},{"size":13075,"mtime":1637652828156,"results":"174","hashOfConfig":"128"},{"size":12897,"mtime":1637652831849,"results":"175","hashOfConfig":"128"},{"size":8950,"mtime":1637652820348,"results":"176","hashOfConfig":"128"},{"size":15584,"mtime":1637652811159,"results":"177","hashOfConfig":"128"},{"size":1758,"mtime":1636533344072,"results":"178","hashOfConfig":"128"},{"size":1956,"mtime":1634653035172,"results":"179","hashOfConfig":"128"},{"size":12168,"mtime":1637239780710,"results":"180","hashOfConfig":"128"},{"size":5988,"mtime":1636472317532,"results":"181","hashOfConfig":"128"},{"size":31393,"mtime":1637075276196,"results":"182","hashOfConfig":"128"},{"size":31229,"mtime":1637075276207,"results":"183","hashOfConfig":"128"},{"size":3578,"mtime":1637414328191,"results":"184","hashOfConfig":"128"},{"size":2070,"mtime":1637326283272,"results":"185","hashOfConfig":"128"},{"size":16319,"mtime":1637652495249,"results":"186","hashOfConfig":"128"},{"size":3941,"mtime":1637652776115,"results":"187","hashOfConfig":"128"},{"size":7839,"mtime":1636472317534,"results":"188","hashOfConfig":"128"},{"size":7722,"mtime":1637652744978,"results":"189","hashOfConfig":"128"},{"size":14683,"mtime":1637652783500,"results":"190","hashOfConfig":"128"},{"size":7801,"mtime":1637652787119,"results":"191","hashOfConfig":"128"},{"size":9836,"mtime":1637652793570,"results":"192","hashOfConfig":"128"},{"size":1157,"mtime":1636638477062,"results":"193","hashOfConfig":"128"},{"size":20228,"mtime":1637652771658,"results":"194","hashOfConfig":"128"},{"size":8567,"mtime":1637075276206,"results":"195","hashOfConfig":"128"},{"size":3134,"mtime":1634653035174,"results":"196","hashOfConfig":"128"},{"size":4445,"mtime":1637652754872,"results":"197","hashOfConfig":"128"},{"size":1162,"mtime":1636640740329,"results":"198","hashOfConfig":"128"},{"size":8529,"mtime":1637652684993,"results":"199","hashOfConfig":"128"},{"size":3648,"mtime":1637212737043,"results":"200","hashOfConfig":"128"},{"size":1359,"mtime":1637050313449,"results":"201","hashOfConfig":"128"},{"size":9090,"mtime":1637068963318,"results":"202","hashOfConfig":"128"},{"size":27097,"mtime":1637653867416,"results":"203","hashOfConfig":"128"},{"size":12643,"mtime":1637069218116,"results":"204","hashOfConfig":"128"},{"size":4129,"mtime":1636639477504,"results":"205","hashOfConfig":"128"},{"size":3103,"mtime":1637654284297,"results":"206","hashOfConfig":"128"},{"size":20023,"mtime":1637656252206,"results":"207","hashOfConfig":"128"},{"size":3507,"mtime":1634653035163,"results":"208","hashOfConfig":"128"},{"size":17723,"mtime":1637240960610,"results":"209","hashOfConfig":"128"},{"size":6924,"mtime":1637240176784,"results":"210","hashOfConfig":"128"},{"size":10329,"mtime":1637075276203,"results":"211","hashOfConfig":"128"},{"size":4964,"mtime":1637075276199,"results":"212","hashOfConfig":"128"},{"size":21068,"mtime":1637075276204,"results":"213","hashOfConfig":"128"},{"size":21420,"mtime":1637075276197,"results":"214","hashOfConfig":"128"},{"size":10046,"mtime":1637075276201,"results":"215","hashOfConfig":"128"},{"size":698,"mtime":1636472317531,"results":"216","hashOfConfig":"128"},{"size":2923,"mtime":1636602355360,"results":"217","hashOfConfig":"128"},{"size":5647,"mtime":1637248290597,"results":"218","hashOfConfig":"128"},{"size":9566,"mtime":1637075276200,"results":"219","hashOfConfig":"128"},{"size":5041,"mtime":1637075276198,"results":"220","hashOfConfig":"128"},{"size":5021,"mtime":1637075276202,"results":"221","hashOfConfig":"128"},{"size":2489,"mtime":1634653035159,"results":"222","hashOfConfig":"128"},{"size":0,"mtime":1634653035161,"results":"223","hashOfConfig":"128"},{"size":1541,"mtime":1634653035161,"results":"224","hashOfConfig":"128"},{"size":2458,"mtime":1634653035160,"results":"225","hashOfConfig":"128"},{"size":482,"mtime":1634653035160,"results":"226","hashOfConfig":"128"},{"size":5541,"mtime":1634653035165,"results":"227","hashOfConfig":"128"},{"size":33701,"mtime":1636472317539,"results":"228","hashOfConfig":"128"},{"size":7657,"mtime":1637075276207,"results":"229","hashOfConfig":"128"},{"size":11400,"mtime":1637075276208,"results":"230","hashOfConfig":"128"},{"size":372,"mtime":1636795594837,"results":"231","hashOfConfig":"128"},{"size":910,"mtime":1637653057624,"results":"232","hashOfConfig":"128"},{"size":380,"mtime":1637075276210,"results":"233","hashOfConfig":"128"},{"size":2316,"mtime":1637075276214,"results":"234","hashOfConfig":"128"},{"size":2361,"mtime":1637075276213,"results":"235","hashOfConfig":"128"},{"size":395,"mtime":1637075276215,"results":"236","hashOfConfig":"128"},{"size":339,"mtime":1637075276211,"results":"237","hashOfConfig":"128"},{"size":996,"mtime":1637075276215,"results":"238","hashOfConfig":"128"},{"size":3068,"mtime":1637075276214,"results":"239","hashOfConfig":"128"},{"size":354,"mtime":1637075276216,"results":"240","hashOfConfig":"128"},{"size":921,"mtime":1637075276216,"results":"241","hashOfConfig":"128"},{"size":8366,"mtime":1637075276202,"results":"242","hashOfConfig":"128"},{"size":16319,"mtime":1637075276198,"results":"243","hashOfConfig":"128"},{"size":4224,"mtime":1637075276201,"results":"244","hashOfConfig":"128"},{"size":18605,"mtime":1637075276205,"results":"245","hashOfConfig":"128"},{"size":20141,"mtime":1637075276197,"results":"246","hashOfConfig":"128"},{"size":20024,"mtime":1637075276204,"results":"247","hashOfConfig":"128"},{"size":423,"mtime":1637654077164,"results":"248","hashOfConfig":"128"},{"size":4125,"mtime":1637410743445,"results":"249","hashOfConfig":"128"},{"size":3785,"mtime":1637654209248,"results":"250","hashOfConfig":"128"},{"size":433,"mtime":1637654129162,"results":"251","hashOfConfig":"128"},{"size":3331,"mtime":1637418463641,"results":"252","hashOfConfig":"128"},{"size":3064,"mtime":1637414604573,"results":"253","hashOfConfig":"128"},{"filePath":"254","messages":"255","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},"1ieljoc",{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"275","messages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"277","messages":"278","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"287","messages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"325","usedDeprecatedRules":"256"},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"330","usedDeprecatedRules":"256"},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"335","usedDeprecatedRules":"256"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"354","messages":"355","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"256"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"365","usedDeprecatedRules":"256"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"256"},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"256"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"374","usedDeprecatedRules":"256"},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385","usedDeprecatedRules":"256"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"400","usedDeprecatedRules":"256"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"407","usedDeprecatedRules":"256"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"416","usedDeprecatedRules":"256"},{"filePath":"417","messages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"425","messages":"426","errorCount":0,"fatalErrorCount":0,"warningCount":73,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"427","messages":"428","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"429","usedDeprecatedRules":"256"},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"432","usedDeprecatedRules":"256"},{"filePath":"433","messages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"435","usedDeprecatedRules":"256"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"438","usedDeprecatedRules":"256"},{"filePath":"439","messages":"440","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"441","usedDeprecatedRules":"256"},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"444","usedDeprecatedRules":"256"},{"filePath":"445","messages":"446","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"447","usedDeprecatedRules":"256"},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"450","usedDeprecatedRules":"256"},{"filePath":"451","messages":"452","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"453","messages":"454","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"455","usedDeprecatedRules":"256"},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"460","usedDeprecatedRules":"256"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"463","usedDeprecatedRules":"256"},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466","usedDeprecatedRules":"256"},{"filePath":"467","messages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"477","messages":"478","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"479","usedDeprecatedRules":"256"},{"filePath":"480","messages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"256"},{"filePath":"483","messages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"485","usedDeprecatedRules":"256"},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"256"},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"497","usedDeprecatedRules":"256"},{"filePath":"498","messages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"500","messages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"504","messages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"506","messages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"256"},{"filePath":"509","messages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"256"},{"filePath":"513","messages":"514","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"515","usedDeprecatedRules":"256"},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"518","usedDeprecatedRules":"256"},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521","usedDeprecatedRules":"256"},{"filePath":"522","messages":"523","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524","usedDeprecatedRules":"256"},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"527","usedDeprecatedRules":"256"},{"filePath":"528","messages":"529","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"530","usedDeprecatedRules":"256"},{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535","usedDeprecatedRules":"256"},{"filePath":"536","messages":"537","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"540","messages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542","usedDeprecatedRules":"256"},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545","usedDeprecatedRules":"256"},"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\index.js",[],["546","547"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\App.js",["548","549"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Store.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\LoginStatusReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ProvinceReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeStatusReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\DistrictReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ObjectEditShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RoleReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ConfirmModalReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListProductReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\typeProductReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUserReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\ListShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\chooseTypeProduct.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\TypeProductValueReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\AlertReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\InfoUpdateProduct.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DirectionURL.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddShiftReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDeleteConfirmReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusConfirmReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateGoodReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusIsAddTypeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddTypeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusModalConfirmPassword.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusDarkModeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusEditTypeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusYesConfirmReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusPayMoneyStatus.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusUpdateEmployeeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\StatusShowHistoryRecieptReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Status\\StatusAddEmployeeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\ListRecieptReducer.js",["550","551","552"],"const listRecieptInitialState = [],\r\n    listRecieptReducer = (state = listRecieptInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"UPDATE_RECIEPT_USER\":\r\n                action.listReciept.map(value => {\r\n                    let data = {\r\n                        MAHD: value._id.receiptID,\r\n                        name:  value.employeeID.name,\r\n                        idUser: value.employeeID._id.employeeID ? value.employeeID._id.employeeID : '',\r\n                        date: value.createAt,\r\n                        discount: value.discount,\r\n                        totalMoney: value.totalMoney,\r\n                        totalFinalMoney: value.totalFinalMoney,\r\n                        listProduct: value.listItem,\r\n                        time: value.timeCreate,\r\n                        isEdit: value.isEdit,\r\n                        oldBill: value.oldBill,\r\n                        deleted: value.deleted ? value.deleted : false,\r\n                    }\r\n                    state.push(data)\r\n                })\r\n                return state;\r\n            case \"ADD_RECIEPT\":\r\n                return [...state, action.newReciept]\r\n            case \"EDIT_SHOPPING_BAGS\":\r\n                return state.filter((value) => {\r\n                    if (value.MAHD === action.MAHD) {\r\n                        value.isEdit = true\r\n                    }\r\n                    return value;\r\n                })\r\n            case \"DELETE_RECIEPT\":\r\n                return state.filter((value) => {\r\n                    if (value.MAHD === action.MAHD) {\r\n                        value.deleted = true\r\n                    }\r\n                    return value;\r\n                })\r\n            case \"DELETE_ONE_RECIEPT\":\r\n                return state.filter((value) => {\r\n                    if (value.MAHD !== action.MAHD) {\r\n                        return value\r\n                    }\r\n                })\r\n            case \"DELETE_MAHD_SELECTED_RECIEPT\":\r\n                return state.filter(value => {\r\n                    action.listMAHD.map(value1 => {\r\n                        if (value.MAHD === value1) {\r\n                            value.deleted = true\r\n                        }\r\n                    })\r\n                    return value\r\n                })\r\n            case \"DELETE_MAHD_INVOICE_RECIEPT\":\r\n                return state.filter(value => {\r\n                    return !value.deleted\r\n                })\r\n            case \"RESTONE_ONE_RECIEPT\":\r\n                return state.filter(value => {\r\n                    if (value.MAHD === action.MAHD) {\r\n                        value.deleted = false;\r\n                    }\r\n                    return value\r\n                })\r\n            case \"RESTONE_ALL_RECIEPT\":\r\n                return state.filter(value => {\r\n                    value.deleted = false;\r\n                    return value\r\n                })\r\n            case \"DELETE_ALL_RECIEPT\":\r\n                return state.filter(value => {\r\n                    value.deleted = true\r\n                    return value;\r\n                })\r\n            case \"RESET_ALL_RECIEPT_USER\":\r\n                return [];\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default listRecieptReducer;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\InfomationBillEdit.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\ShoppingBagsReducer.js",["553"],"const shoppingBagsInitialState = [],\r\n    shoppingBagsReducer = (state = shoppingBagsInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"ADD_NEW_PRODUCT_SHOPPING_BAGS\": \r\n                return [...state, action.newProduct];\r\n            case \"RAISE_QUANTITY_SHOPPING_BAGS\":\r\n                return state.map(value => {\r\n                    if (value.product.name === action.name) {\r\n                        value.quantity += 1;\r\n                    }\r\n                    return value\r\n                })\r\n            case \"REDUCE_QUANTITY_SHOPPING_BAGS\":\r\n                return state.map(value => {\r\n                    if (value.product.name === action.name) {\r\n                        value.quantity -= 1;\r\n                    }\r\n                    return value\r\n                })\r\n            case \"DELETE_PRODUCT_SHOPPING_BAGS\":\r\n                return state.filter((value) => {\r\n                    if (value.product.name !== action.name) {\r\n                        return value;\r\n                    } \r\n                })\r\n            case \"RESET_SHOPPING_BAGS\":\r\n                return state = [];\r\n            case \"INFO_SHOPPING_BAGS_EDIT\":\r\n                return action.listProduct\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default shoppingBagsReducer;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\employeeSackedListReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\employeeListReducer.js",["554","555","556"],"const listEmployeeInitialState = {\r\n    employees: [\r\n        // {\r\n        //     _id: { \r\n        //         employeeID: '3', \r\n        //         storeID: '19522006@gm.uit.edu.vn' \r\n        //     },\r\n        //     managerID: '19522006@gm.uit.edu.vn',\r\n        //     password: '1212',\r\n        //     firstName: '1212',\r\n        //     lastName: '1212',\r\n        //     phoneNumber: '1212',\r\n        //     dateOfBirth: \"2021-11-20T00:00:00.000Z\",\r\n        //     email: '12121',\r\n        //     address: '1212',\r\n        //     cardID: '1212',\r\n        //     startDate: \"2021-11-26T00:00:00.000Z\",\r\n        //     deleted: false,\r\n        //     __v: 0\r\n        // },\r\n    ]\r\n}\r\n\r\nconst  listEmployeeReducer = (state = listEmployeeInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"GET_EMPLOYEE\":\r\n                state.employees = action.employees;\r\n                return state;\r\n            case \"ADD_EMPLOYEE\":\r\n                return {\r\n                    employees : [...state.employees, action.employees ]\r\n                }\r\n            case \"UPDATE_EMPLOYEE\":\r\n                {\r\n                    var newState = [];\r\n                    for(var i = 0 ; i < state.employees.length ; i ++)\r\n                    {\r\n                        if(i != action.index)\r\n                        {\r\n                            newState.push(state.employees[i]);\r\n                        }\r\n                        else \r\n                        {\r\n                            newState.push(action.data);\r\n                        }\r\n                    }\r\n                    console.log(\"newState\", newState);\r\n                    return {\r\n                        employees : newState\r\n                    }\r\n\r\n                }\r\n                case \"DELETE_EMPLOYEE\":\r\n                {\r\n                    console.log(\"action\", action);\r\n                    var newState = [];\r\n                    for(var i = 0 ; i < state.employees.length ; i ++)\r\n                    {\r\n                        if(state.employees[i]._id.employeeID !== action.id)\r\n                        {\r\n                            newState.push(state.employees[i]);\r\n                        }\r\n                        else {\r\n                            console.log(\"Kiếm đc cái xoá rồi\")\r\n                        }\r\n                    }\r\n                    return {\r\n                        employees : newState\r\n                    }\r\n\r\n                }\r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default listEmployeeReducer;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\SellProduct\\StatusEditInfomationBill.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\TypeByDate.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\StatusSelectAll.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\ListRecieptDelete.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\TypeReciept.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\currentEditEmployeeReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Body.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Login.js",["557","558","559"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\ForgotPassword.js",["560","561","562"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\LoginWithEmployee.js",["563","564"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Login\\Register.js",["565","566","567"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Router\\DashboardURL.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\ModalConfirmPassword.js",["568"],"import React from 'react';\r\nimport {Card,CardHeader,Divider,CardContent,Grid,TextField,Box,Button} from '@mui/material';\r\nimport {BiPlusMedical} from 'react-icons/bi'\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nfunction ModalConfirmPassword(props) {\r\n\r\n    const statusConfirmPassword = useSelector(state => state.statusConfirmPassword)\r\n    const dispatch = useDispatch();\r\n\r\n    const handleCancel = () => {\r\n        dispatch({\r\n            type:\"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Card className=\"card-confirm-password\" style={{ minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }}>\r\n            <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm password\" />\r\n            <Divider />\r\n            <CardContent>\r\n                <Grid container spacing={2}>\r\n                    <Grid item md={12} xs={12}>\r\n                        <TextField\r\n                            id=\"outlined-basic\"\r\n                            variant=\"outlined\"\r\n                            fullWidth\r\n                            label=\"Your password\"\r\n                            required\r\n                            type=\"password\"\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </CardContent>\r\n            <Divider />\r\n            <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                <Button style={{ backgroundColor: 'yellowgreen' }} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                    Xác nhận\r\n                </Button>\r\n                <Button style={{ backgroundColor: 'red' }} onClick={() => handleCancel()} variant=\"contained\" startIcon={<GiCancel />}>\r\n                    Hủy\r\n                </Button>\r\n            </Box>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default ModalConfirmPassword;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Partials\\SideNavBar.js",["569","570","571","572","573","574"],"import React, { Component } from 'react';\r\n\r\nimport { connect } from 'react-redux';\r\nimport {\r\n    AiOutlineDashboard,\r\n    AiFillDashboard,\r\n    AiOutlineContainer,\r\n    AiFillContainer\r\n} from \"react-icons/ai\";\r\nimport { Button } from '@mui/material';\r\nimport { BsInfoCircleFill } from \"react-icons/bs\";\r\nimport {\r\n    IoPeopleOutline,\r\n    IoPeopleSharp,\r\n    IoReceiptOutline,\r\n    IoReceiptSharp,\r\n} from \"react-icons/io5\";\r\nimport { ImCheckboxUnchecked, ImCheckboxChecked } from \"react-icons/im\"\r\nimport { IoIosArrowBack } from \"react-icons/io\";\r\nimport { RiProfileFill, RiProfileLine } from \"react-icons/ri\";\r\nimport { FaSignOutAlt } from \"react-icons/fa\";\r\nimport { GiSellCard } from 'react-icons/gi'\r\nimport Avatar from '../../img/avatar_default.jpg';\r\nimport { NavLink } from 'react-router-dom';\r\nimport '../../css/SideNavBar.css';\r\nimport axios from 'axios';\r\n\r\nclass SideNavBar extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            change: true,\r\n            attendance: false,\r\n        }\r\n        this.getInitialScreen();\r\n    }\r\n    active = ['active', '', '', '', '', ''];\r\n\r\n    changeIndex(index) {\r\n        for (var i = 0; i < this.active.length; i++) {\r\n            this.active[i] = '';\r\n        }\r\n        this.active[index] = 'active';\r\n        this.setState({ change: !this.state.change });\r\n    }\r\n\r\n    getInitialScreen() {\r\n        var link = window.location.href;\r\n        link = link.substring(link.lastIndexOf('/') + 1);\r\n\r\n        for (var i = 0; i < this.active.length; i++) {\r\n            this.active[i] = '';\r\n        }\r\n\r\n        switch (link) {\r\n            case \"profile\":\r\n                this.active[1] = 'active';\r\n                break;\r\n            case \"employeemanager\":\r\n                this.active[2] = 'active';\r\n                break;\r\n            case \"goodmanager\":\r\n                this.active[3] = 'active';\r\n                break;\r\n            case \"import\":\r\n                this.active[3] = 'active';\r\n                break;\r\n            case \"receiptmanager\":\r\n                this.active[4] = 'active';\r\n                break;\r\n            case \"sellproduct\":\r\n                this.active[5] = 'active';\r\n                break;\r\n            default:\r\n                this.active[0] = 'active';\r\n                break;\r\n        }\r\n        this.setState({ change: !this.state.change });\r\n    }\r\n\r\n    attendance = () => {\r\n        this.setState({\r\n            attendance: true,\r\n        })\r\n        this.props.hideAlert()\r\n        this.props.showAlert('Attendanced success', 'success')\r\n    }\r\n\r\n    logOut = () => {\r\n        localStorage.setItem('token', null)\r\n        this.props.resetInfoUser()\r\n        this.props.resetRecieptUser()\r\n        this.props.resetShiftUser()\r\n        this.props.changeLoginStatus()\r\n    }\r\n\r\n    attendance = () => {\r\n        var time = new Date();\r\n        let a = ((time.getHours() > 12) ? time.getHours() - 12 : time.getHours()) + \":\" + time.getMinutes() +\" \"+ ((time.getHours() > 12) ? \"PM\" : \"AM\");\r\n        axios.post('http://localhost:5000/api/employee/time-keeping',{\r\n            token: localStorage.getItem('token'),\r\n            data: {\r\n                email: this.props.infoUser.employeeID,\r\n                time: a,\r\n            }\r\n        }).then(res => {\r\n            console.log(res)\r\n            localStorage.setItem('token', res.data.token)\r\n            this.props.showAlert(res.data.message, 'success')\r\n            this.setState({\r\n                attendance: true\r\n            })\r\n        }).catch(err => {\r\n            this.props.showAlert(err.response.data.message, 'error')\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const navbarContainer = document.querySelector('.navbar-container');\r\n        return (\r\n            <div\r\n                class=\"navbar-container\"\r\n                style={{\r\n                    width: 0,\r\n                }}\r\n            >\r\n                <div style={{ backgroundColor: !this.props.statusDarkmode ? '#fafafa' : '#37474f' }} class=\"navibar sidebar\">\r\n                    <div className=\"nav-icon\" >\r\n                        <IoIosArrowBack\r\n                            size={20}\r\n                        />\r\n                    </div>\r\n                    <div class=\"nav-heading\">\r\n                        <div style={{ backgroundColor: !this.props.statusDarkmode ? '#cfd8dc' : '#455a64' }} class=\"navbar-heading-container\">\r\n                            <img src={this.props.infoUser.avatar ? this.props.infoUser.avatar : Avatar} style={{ width: 40, height: 40, borderRadius: '100%' }}></img>\r\n                            <span style={{ color: !this.props.statusDarkmode ? 'black' : 'white', fontWeight: '700' }} class=\"user-name\">{this.props.infoUser.lastName + \" \" + this.props.infoUser.firstName}</span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"nav-container\">\r\n                        {\r\n                            this.props.role == true ? (null)\r\n                                : (<div style={{ justifyContent: 'center', display: 'flex', marginBottom: '10px' }}>\r\n                                    <Button onClick={() => this.attendance()} style={{ backgroundColor: this.state.attendance ? '#b9f6ca' : '#e0e0e0', color: '#424242' }}>\r\n                                        {!this.state.attendance ? (<ImCheckboxUnchecked style={{ marginRight: '10px' }}></ImCheckboxUnchecked>)\r\n                                            : (<ImCheckboxChecked style={{ marginRight: '10px', color: '#1b5e20' }}></ImCheckboxChecked>)\r\n                                        }\r\n\r\n                                        {this.state.attendance ? 'attendanced' : 'attendance'}\r\n                                    </Button>\r\n                                </div>\r\n                                )\r\n                        }\r\n                        {\r\n                            this.props.role == true ?\r\n                                (<NavLink className={\"nav-item \" + this.active[0]} to=\"/dashboard\"\r\n                                    onClick={() => this.changeIndex(0)}\r\n                                >\r\n                                    <AiOutlineDashboard class=\"nav-item-icon\" />\r\n                                    <AiFillDashboard class=\"nav-item-icon icon-activate\" />\r\n                                    <span className=\"nav-item-lable\">Dashboard</span>\r\n                                </NavLink>) : (null)\r\n                        }\r\n                        <NavLink to=\"/profile\" className={\"nav-item \" + this.active[1]} href=\"#\"\r\n                            onClick={() => this.changeIndex(1)}\r\n                        >\r\n                            <RiProfileLine class=\"nav-item-icon\" />\r\n                            <RiProfileFill class=\"nav-item-icon icon-activate\" />\r\n                            <span className=\"nav-item-lable\">Profile</span>\r\n                        </NavLink>\r\n\r\n                        {\r\n                            this.props.role === true ?\r\n                                (\r\n                                    <div>\r\n                                        <NavLink\r\n                                            to=\"/employeemanager\"\r\n                                            className={\"nav-item \" + this.active[2]}\r\n                                            href=\"#\"\r\n                                            onClick={() => this.changeIndex(2)}\r\n                                        >\r\n                                            <IoPeopleOutline class=\"nav-item-icon\" />\r\n                                            <IoPeopleSharp class=\"nav-item-icon icon-activate\" />\r\n                                            <span className=\"nav-item-lable\">Employee Manager</span>\r\n                                        </NavLink>\r\n                                        <NavLink\r\n                                            to=\"/goodmanager\"\r\n                                            className={\"nav-item \" + this.active[3]}\r\n                                            href=\"#\"\r\n                                            onClick={() => this.changeIndex(3)}\r\n                                        >\r\n                                            <AiOutlineContainer className=\"nav-item-icon\" />\r\n                                            <AiFillContainer className=\"nav-item-icon icon-activate\" />\r\n                                            <span className=\"nav-item-lable\">Goods Manager</span>\r\n                                        </NavLink>\r\n                                        <NavLink\r\n                                            to=\"/receiptmanager\"\r\n                                            className={\"nav-item \" + this.active[4]}\r\n                                            href=\"#\"\r\n                                            onClick={() => this.changeIndex(4)}\r\n                                        >\r\n                                            <IoReceiptOutline class=\"nav-item-icon\" />\r\n                                            <IoReceiptSharp class=\"nav-item-icon icon-activate\" />\r\n                                            <span className=\"nav-item-lable\">Receipt Manager</span>\r\n                                        </NavLink>\r\n                                    </div>\r\n                                ) : (null)\r\n                        }\r\n\r\n                        <NavLink to=\"/sellproduct\" className={\"nav-item \" + this.active[5]} href='#'\r\n                            onClick={() => this.changeIndex(5)}\r\n                        >\r\n                            <GiSellCard class=\"nav-item-icon\" />\r\n                            <GiSellCard class=\"nav-item-icon icon-activate\" />\r\n                            <span className=\"nav-item-lable\">Sell Product</span>\r\n                        </NavLink>\r\n                    </div>\r\n\r\n                    <div class=\"nav-footer\">\r\n                        <a\r\n                            to=\"/login\"\r\n                            onClick={() => this.logOut()}\r\n                            className={\"nav-item \"}\r\n                            style={{ flex: 5 }}\r\n                        >\r\n                            <FaSignOutAlt class=\"nav-item-icon\" />\r\n                            <span className=\"nav-item-lable\">Sign out</span>\r\n                        </a>\r\n                        <a href=\"#\" className={\"nav-item \"} onClick={() => this.props.changeConfirmPasswordTest()} style={{ flex: 4 }}>\r\n                            <BsInfoCircleFill class=\"nav-item-icon\" />\r\n                            <span className=\"nav-item-lable\">About</span>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        isLogin: state.loginStatus,\r\n        infoUser: state.infoUser,\r\n        role: state.role,\r\n        statusDarkmode: state.statusDarkmode\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeLoginStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_LOGIN_STATUS\",\r\n            })\r\n        },\r\n        resetShiftUser: () => {\r\n            dispatch({\r\n                type:\"RESET_SHIFT_USER\"\r\n            })\r\n        },\r\n        resetRecieptUser: () => {\r\n            dispatch({\r\n                type: \"RESET_ALL_RECIEPT_USER\",\r\n            })\r\n        },\r\n        changeConfirmPasswordTest: () => {\r\n            dispatch({\r\n                type: \"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\r\n            })\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        resetInfoUser: () => {\r\n            dispatch({\r\n                type: \"RESET_INFO_USER\"\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SideNavBar);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodManager.js",["575"],"import { Component } from 'react';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport GoodTable from './GoodPartials/GoodTable';\r\nimport { NavLink } from 'react-router-dom';\r\nimport Button from '@mui/material/Button';\r\nimport SearchBar from './GoodPartials/SearchBar';\r\nimport {connect} from 'react-redux'\r\nimport AddTypeModal from './GoodPartials/AddTypeModal';\r\nimport '../css/GoodManager.css';\r\nimport ConfirmModal from './GoodPartials/ConfirmModal';\r\nimport UpdateGoodModal from './GoodPartials/UpdateGoodModal';\r\nimport EditTypeModal from './GoodPartials/EditTypeModal';\r\n\r\nclass GoodManager extends Component {\r\n    \r\n    handleAdd() {\r\n        this.props.changeAddTypeStatus();\r\n        this.props.setAddTypeStatus();\r\n    }\r\n    handleConfirm(){\r\n        this.props.changeConfirmStatus();\r\n        this.props.unsetDelete();\r\n    }\r\n    handleConfirmDelete(){\r\n        this.props.changeConfirmStatus();\r\n        this.props.setDeleteConfirm();\r\n    }\r\n    handleUpdateGood() {\r\n        this.props.changeUpdateGoodStatus();\r\n    }\r\n    handleEditType() {\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div style={{height: '100%', width: '100%', marginTop: '40px', marginBottom: '40px', paddingBottom: '40px' }}>\r\n                    <div style={{display: 'flex'}}>\r\n                        <Button variant=\"contained\">\r\n                            <NavLink style={{color: '#fff', textDecoration: 'none'}} to=\"/goodmanager/import\">Import</NavLink>\r\n                        </Button>\r\n                        <SearchBar style={{height: '120px'}}/>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleAdd()} variant=\"contained\">\r\n                            add type\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleEditType()} variant=\"contained\">\r\n                            edit type\r\n                        </Button>\r\n                        {/* <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleConfirmDelete()} variant=\"contained\">\r\n                            Delete\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleConfirm()} variant=\"contained\">\r\n                            Edit\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleUpdateGood()} variant=\"contained\">\r\n                            Update Good\r\n                        </Button> */}\r\n\r\n                     </div>\r\n\r\n                    <GoodTable />\r\n\r\n                    {/* Đây là phần modal */}\r\n                    {this.props.addTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <AddTypeModal></AddTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.confirmStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                            <ConfirmModal></ConfirmModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.updateGoodStatus ? (\r\n                        <div \r\n                            className=\"modal-add\"\r\n                        >\r\n                            <div onClick={() => {this.props.changeUpdateGoodStatus();}} className=\"modal-overlay\"></div>\r\n                            <UpdateGoodModal\r\n                                style={{\r\n                                    marginTop: 0\r\n                                }}\r\n                            >\r\n                            </UpdateGoodModal>\r\n                        </div>\r\n                    ): null}\r\n                     {this.props.editTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeEditTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <EditTypeModal></EditTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        deleteStatus: state.deleteStatus,\r\n        updateGoodStatus: state.updateGoodStatus,\r\n        editTypeStatus: state.editTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        unsetDelete: () => {\r\n            dispatch({\r\n                type: \"UNSET_DELETE_STATUS\",\r\n            })\r\n        },\r\n        changeUpdateGoodStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\r\n            })\r\n        },\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            })\r\n        },\r\n        setAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        setDeleteConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_DELETE_GOOD\",\r\n            }); \r\n        },\r\n        \r\n    }\r\n}\r\nexport default connect(mapStateToProps , mapDispatchToProps)(GoodManager);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeeManager.js",["576","577","578","579","580","581","582","583","584","585","586","587","588","589"],"import React, { Component } from 'react';\r\nimport Page from './EmployeePartials/Page';\r\nimport Label from './EmployeePartials/Label';\r\nimport Scrollbar from './EmployeePartials/Scrollbar';\r\nimport SearchNotFound from './EmployeePartials/SearchNotFound';\r\nimport { Icon } from '@iconify/react';\r\nimport { sentenceCase } from 'change-case';\r\nimport {connect} from 'react-redux'\r\nimport plusFill from '@iconify/icons-eva/plus-fill';\r\nimport {\r\n    Card,\r\n    Table,\r\n    Stack,\r\n    Avatar,\r\n    Button,\r\n    Checkbox,\r\n    TableRow,\r\n    TableBody,\r\n    TableCell,\r\n    Container,\r\n    Typography,\r\n    TableContainer,\r\n    TablePagination\r\n} from '@mui/material';\r\nimport EmployeeToolbar from './EmployeePartials/EmployeeToolbar';\r\nimport EmployeeMoreMenu from './EmployeePartials/EmployeeMoreMenu';\r\nimport SackedEmployeeMenu from './EmployeePartials/SackedEmployeeMenu';\r\nimport EmployeeTableHeader from './EmployeePartials/EmployeeTableHeader';\r\nimport USERLIST from './EmployeePartials/fakeData'\r\nimport AddEmployeeModal from './EmployeePartials/AddEmployeeModal';\r\nimport UpdateEmployeeModal from './EmployeePartials/UpdateEmployeeModal';\r\nimport PayMoneyModal from './EmployeePartials/PayMoneyModal';\r\nimport FixedCalendar from './EmployeePartials/FixedCalendar';\r\nimport UnShiftEmployee from './EmployeePartials/UnShiftEmployee';\r\nimport AddNextWeekTimeKeepingModal from './EmployeePartials/AddNextWeekTimeKeeping';\r\nimport UpdateNextWeekTimeKeepingModal from './EmployeePartials/UpdateNextWeekTimeKeeping';\r\nimport NoJobEmployee from './EmployeePartials/NoJobEmployee';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport TimekeepingTable from './EmployeePartials/TimekeepingTable';\r\nimport AddTimeKeepingModal from './EmployeePartials/AddTimeKeeperModal';\r\nimport UpdateTimeKeepingModal from './EmployeePartials/UpdateTimeKeepingModal';\r\n\r\nimport axios from 'axios';\r\n\r\nfunction EmployeeObj(employeeID, managerID, password, firstName, lastName, \r\n    phoneNumber, dateOfBirth, email, address, cardID, startDate, endDate) {\r\n    return {\r\n        employeeID: employeeID,\r\n        managerID: managerID,\r\n        password: password,\r\n        firstName: firstName,\r\n        lastName: lastName,\r\n        phoneNumber: phoneNumber,\r\n        dateOfBirth: dateOfBirth,\r\n        email: email,\r\n        address: address,\r\n        cardID: cardID,\r\n        startDate: startDate,\r\n        endDate: endDate,\r\n    };\r\n}\r\n\r\nconst TABLE_HEAD = [\r\n    { id: 'ID', label: 'ID', alignRight: false },\r\n    { id: 'firstName', label: 'Name', alignRight: false },\r\n    { id: 'lastName', label: 'Last Name', alignRight: false },\r\n    { id: 'old', label: 'Old', alignRight: false },\r\n    { id: 'gender', label: 'Gender', alignRight: false },\r\n    { id: 'province', label: 'Province', alignRight: false },\r\n    { id: 'phoneNumber', label: 'Phone', alignRight: false },\r\n    { id: 'email', label: 'Email', alignRight: false },\r\n    { id: 'adress', label: 'Adress', alignRight: false },\r\n    { id: '' }\r\n];\r\n\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '80px',\r\n    } \r\n})\r\n\r\nvar selected = [];\r\nvar filterName = \"\";\r\nvar filteredUsers = [];\r\nvar listUsers = [];\r\nvar page = 5;\r\nvar rowsPerPage = 5;\r\nclass EmployeeManager extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            change: false,\r\n        }; \r\n        //this.getAllEmployee();\r\n        // this.getAllEmployee();\r\n        this.getSackedEmployee();\r\n    }\r\n\r\n    handleFilterByName(event){\r\n        filterName = event.target.value;\r\n    }\r\n\r\n    addEmployee () {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    // Dữ liệu mà Tài sẽ trả về khi get, còn khi post, delete, put thì chỉ trả về email với token thôi\r\n\r\n    sampleData = {\r\n        email: \"\",\r\n        token: \"\",\r\n        employees: [\r\n            {\r\n                _id: {\r\n                    employeeID: \"0\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n                managerID: \"19522006@gm.uit.edu.vn\",\r\n                password: \"abc123\",\r\n                firstName: \"Antonio\",\r\n                lastName: \"Rudiger\",\r\n                phoneNumber: \"03232323232\",\r\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\r\n                email: \"1912@gmail.com\",\r\n                address: \"Wherever\",\r\n                cardID: \"2511098589\",\r\n                startDate: \"2021-11-02T00:00:00.000Z\",\r\n                endDate: \"\",\r\n            },\r\n            {\r\n                _id: {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n                managerID: \"19522006@gm.uit.edu.vn\",\r\n                password: \"abc123\",\r\n                firstName: \"Antonio\",\r\n                lastName: \"Rudiger\",\r\n                phoneNumber: \"03232323232\",\r\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\r\n                email: \"1911@gmail.com\",\r\n                address: \"Wherever\",\r\n                cardID: \"25110985819\",\r\n                startDate: \"2021-11-02T00:00:00.000Z\",\r\n                endDate: \"2021-11-31T00:00:00.000Z\",\r\n            }\r\n        ]\r\n    }\r\n    // Lấy danh sách các nhân viên\r\n    async getAllEmployee () {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/employee/`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                alert(err)\r\n            })\r\n        listUsers = [];\r\n        for(var i = 0; i < result.length; i++)\r\n        {\r\n            listUsers.push(result[i]);\r\n        }\r\n        // Thêm vào cái redux\r\n        this.props.getEmployee(listUsers);\r\n        this.setState({change: !this.state.change});\r\n    }\r\n    // Thêm nhân viên\r\n    addEmployeeToDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n                managerID: \"19522006@gm.uit.edu.vn\",\r\n                password: \"abc123\",\r\n                firstName: \"Antonio\",\r\n                lastName: \"Rudiger\",\r\n                phoneNumber: \"03232323232\",\r\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\r\n                email: \"1911@gmail.com\",\r\n                address: \"Wherever\",\r\n                cardID: \"25110985819\",\r\n                startDate: \"2021-11-02T00:00:00.000Z\",\r\n                endDate: \"2021-11-31T00:00:00.000Z\",\r\n            }   \r\n        }\r\n        axios.post(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu thành công\")\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                console.log(err);\r\n            })\r\n    }\r\n    // Xoá nhân viên\r\n    deleteEmployeeFromDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee:\r\n            [\r\n                {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\", \r\n                },\r\n            ]\r\n            \r\n        }\r\n        axios.delete(`http://localhost:5000/api/employee`,{data: data})\r\n            .then(res => {\r\n                alert(\"delete employee(s) success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n    }\r\n    // Sửa nhân viên\r\n    updateEmployee()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n                managerID: \"19522006@gm.uit.edu.vn\",\r\n                password: \"abc123\",\r\n                firstName: \"Antonio\",\r\n                lastName: \"Rudiger Christensen\",\r\n                phoneNumber: \"03232323232\",\r\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\r\n                email: \"1911@gmail.com\",\r\n                address: \"Wherever\",\r\n                cardID: \"25110985819\",\r\n                startDate: \"2021-11-02T00:00:00.000Z\",\r\n                endDate: \"2021-11-31T00:00:00.000Z\",\r\n            }\r\n        }\r\n        axios.put(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Update success\");\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    async getSackedEmployee () {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/employee/delete`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                // alert(\"Lấy hết đc product ròi anh chai\");\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        this.props.getSackedEmployee(result);\r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    backToWork() {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee:\r\n            [\r\n                {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\", \r\n                },\r\n            ]\r\n            \r\n        }\r\n        axios.patch(`http://localhost:5000/api/employee/delete`, data)\r\n            .then(res => {\r\n                alert(\"back to work success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n    }\r\n\r\n    // Xoá nhân viên hoàn toàn\r\n    deleteEmployeePermantlyFromDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee:\r\n            [\r\n                {\r\n                    employeeID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\", \r\n                },\r\n            ]\r\n            \r\n        }\r\n        axios.delete(`http://localhost:5000/api/employee/delete`,{data: data})\r\n            .then(res => {\r\n                alert(\"delete permantly employee(s) success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div\r\n                style={{display: 'block', overflowY: 'auto', height: '100vh'}}\r\n            >\r\n                <div>\r\n                    <Button\r\n                        onClick={() => {this.getAllEmployee()}}\r\n                        variant=\"contained\"\r\n                    >\r\n                        Get Employee\r\n                    </Button>\r\n                    {/* <Button\r\n                        onClick={() => this.addEmployeeToDatabase()}\r\n                        variant=\"contained\"\r\n                    >\r\n                        Add Employee\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => this.updateEmployee()}\r\n                        variant=\"contained\"\r\n                    >\r\n                        Update Employee\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => this.deleteEmployeeFromDatabase()}\r\n                        variant=\"contained\"\r\n                    >\r\n                        Delete Employee\r\n                    </Button> */}\r\n                    <Button\r\n                        onClick={() => this.getSackedEmployee()}\r\n                        variant=\"contained\"\r\n                    >\r\n                        Get Sacked Employee\r\n                    </Button>\r\n                    {/* <Button\r\n                        onClick={() => this.backToWork()}\r\n                        variant=\"contained\"\r\n                    >\r\n                        Back To Work\r\n                    </Button>\r\n                    <Button\r\n                        onClick={() => this.deleteEmployeePermantlyFromDatabase()}\r\n                        variant=\"contained\"\r\n                    >\r\n                        Delete Permantly\r\n                    </Button> */}\r\n                </div>\r\n                <Container\r\n                    style={{marginTop: 20, }}\r\n                >\r\n                    <span\r\n                        style = {{\r\n                            color: \"#fff\",\r\n                            padding: 12,\r\n                            border: '1px solid cyan',\r\n                            backgroundColor: '#222'\r\n                        }}\r\n                    >\r\n                        Current Employee\r\n                    </span>\r\n                    <Button\r\n                        variant='contained'\r\n                        startIcon={<Icon icon={plusFill} />}\r\n                        onClick={() => this.addEmployee()}\r\n                    >\r\n                        New User\r\n                    </Button>\r\n\r\n                    <Card>\r\n                    {/* <EmployeeToolbar\r\n                        numSelected={selected.length}\r\n                        filterName={filterName}\r\n                        // onFilterName={this.handleFilterByName(event)}\r\n                    /> */}\r\n                    <TableContainer style ={{maxHeight:'500px',overflowY: 'scroll'}}>\r\n                        <Table>\r\n                            <EmployeeTableHeader\r\n                                // order={order}\r\n                                // orderBy={orderBy}\r\n                                headLabel={TABLE_HEAD}\r\n                                rowCount={USERLIST.length}\r\n                                numSelected={selected.length}\r\n                                // onRequestSort={handleRequestSort}\r\n                                // onSelectAllClick={handleSelectAllClick}\r\n                            />\r\n                            <TableBody\r\n                                style={{height: '100%', width: '100%'}}\r\n                            >\r\n                            {\r\n                                this.props.listEmployee.employees.map((row) => {\r\n                                return (\r\n                                    <TableRow\r\n                                        hover\r\n                                        // key={id}\r\n                                        tabIndex={-1}\r\n                                        role=\"checkbox\"\r\n                                        // selected={isItemSelected}\r\n                                        // aria-checked={isItemSelected}\r\n                                    >\r\n                                        <TableCell padding=\"checkbox\">\r\n                                            <Checkbox\r\n                                            // checked={isItemSelected}\r\n                                            // onChange={(event) => handleClick(event, name)}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">\r\n                                            {row._id.employeeID}\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} component=\"th\" scope=\"row\" padding=\"none\">\r\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n                                            {/* <Avatar alt={row.firstName} src={avatarUrl} /> */}\r\n                                            <Typography variant=\"subtitle2\" noWrap>\r\n                                                {row.firstName}\r\n                                            </Typography>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.lastName}</TableCell>  \r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">\r\n                                            {row.dateOfBirth.indexOf('T') != -1 ? row.dateOfBirth.substring(0,row.dateOfBirth.indexOf('T')): row.dateOfBirth}\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{\"gender\"}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{\"province\"}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.phoneNumber}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.email}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.address}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell}align=\"right\">\r\n                                            <EmployeeMoreMenu\r\n                                                data={row._id.employeeID}    \r\n                                            >\r\n                                            </EmployeeMoreMenu>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n\r\n                    {/* <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={USERLIST.length}\r\n                        // rowsPerPage={rowsPerPage}\r\n                        // page={page}\r\n                        // onPageChange={handleChangePage}\r\n                        // onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    /> */}\r\n                    </Card>\r\n                </Container>\r\n                <FixedCalendar/>\r\n                <NoJobEmployee></NoJobEmployee>\r\n                <UnShiftEmployee/>\r\n                <TimekeepingTable></TimekeepingTable> \r\n                \r\n\r\n                {/* Sacked EMployee */}\r\n                <Container\r\n                    style={{marginTop: 20, }}\r\n                >\r\n                    <span\r\n                        style = {{\r\n                            color: \"#fff\",\r\n                            padding: 12,\r\n                            border: '1px solid red',\r\n                            backgroundColor: 'red'\r\n                        }}\r\n                    >\r\n                        Sacked Employee\r\n                    </span>\r\n\r\n                    <Card>\r\n                    {/* <EmployeeToolbar\r\n                        numSelected={selected.length}\r\n                        filterName={filterName}\r\n                        // onFilterName={this.handleFilterByName(event)}\r\n                    /> */}\r\n                    <TableContainer style ={{maxHeight:'500px',overflowY: 'scroll'}}>\r\n                        <Table>\r\n                            <EmployeeTableHeader\r\n                                // order={order}\r\n                                // orderBy={orderBy}\r\n                                headLabel={TABLE_HEAD}\r\n                                rowCount={USERLIST.length}\r\n                                numSelected={selected.length}\r\n                                // onRequestSort={handleRequestSort}\r\n                                // onSelectAllClick={handleSelectAllClick}\r\n                            />\r\n                            <TableBody\r\n                                style={{height: '100%', width: '100%'}}\r\n                            >\r\n                            {\r\n                                this.props.listSackedEmployee.employees.map((row) => {\r\n                                return (\r\n                                    <TableRow\r\n                                        hover\r\n                                        // key={id}\r\n                                        tabIndex={-1}\r\n                                        role=\"checkbox\"\r\n                                        // selected={isItemSelected}\r\n                                        // aria-checked={isItemSelected}\r\n                                    >\r\n                                        <TableCell className = {classes.goodTable_Cell} padding=\"checkbox\">\r\n                                            <Checkbox\r\n                                            // checked={isItemSelected}\r\n                                            // onChange={(event) => handleClick(event, name)}\r\n                                            />\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">\r\n                                            {row._id.employeeID}\r\n                                        </TableCell>\r\n                                        <TableCell component=\"th\" scope=\"row\" padding=\"none\">\r\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\r\n                                            {/* <Avatar alt={row.firstName} src={avatarUrl} /> */}\r\n                                            <Typography variant=\"subtitle2\" noWrap>\r\n                                                {row.firstName}\r\n                                            </Typography>\r\n                                            </Stack>\r\n                                        </TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.lastName}</TableCell>  \r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.dateOfBirth.substring(0,row.dateOfBirth.indexOf('T'))}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{\"gender\"}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{\"province\"}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.phoneNumber}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.email}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.address}</TableCell>\r\n                                        <TableCell className = {classes.goodTable_Cell} align=\"right\">\r\n                                            <SackedEmployeeMenu\r\n                                                data={row._id.employeeID}    \r\n                                            >\r\n                                            </SackedEmployeeMenu>\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                );\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n\r\n                    {/* <TablePagination\r\n                        rowsPerPageOptions={[5, 10, 25]}\r\n                        component=\"div\"\r\n                        count={USERLIST.length}\r\n                        // rowsPerPage={rowsPerPage}\r\n                        // page={page}\r\n                        // onPageChange={handleChangePage}\r\n                        // onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    /> */}\r\n                    </Card>\r\n                </Container>\r\n\r\n\r\n                {/* Đây là phần modal */}\r\n                {this.props.addEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeAddEmployeeStatus();}} className=\"modal-overlay\"></div>\r\n                        <AddEmployeeModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </AddEmployeeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.updateEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeUpdateEmployeeStatus();}} \r\n                            className=\"modal-overlay\"\r\n                        />\r\n                        <UpdateEmployeeModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </UpdateEmployeeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.payEmployeeStatus ? (\r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changePayEmployeeStatus();}} className=\"modal-overlay\"></div>\r\n                        <PayMoneyModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </PayMoneyModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.statusAddNextWeekTimeKeeping \r\n                ? \r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeAddNextWeekTimeKeepingStatus();}} className=\"modal-overlay\"></div>\r\n                        <AddNextWeekTimeKeepingModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </AddNextWeekTimeKeepingModal>\r\n                    </div>\r\n                : null\r\n                }\r\n                {this.props.statusUpdateNextWeekTimeKeeping \r\n                ? \r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeUpdateNextWeekTimeKeepingStatus();}} className=\"modal-overlay\"></div>\r\n                        <UpdateNextWeekTimeKeepingModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </UpdateNextWeekTimeKeepingModal>\r\n                    </div>\r\n                : null\r\n                }\r\n                {this.props.statusAddTimeKeeping \r\n                ? \r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeAddTimeKeepingStatus()}} className=\"modal-overlay\"></div>\r\n                        <AddTimeKeepingModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </AddTimeKeepingModal>\r\n                    </div>\r\n                : null\r\n                }\r\n                {this.props.statusUpdateTimeKeeping \r\n                ? \r\n                    <div \r\n                        className=\"modal-add\"\r\n                    >\r\n                        <div onClick={() => {this.props.changeUpdateTimeKeepingStatus();}} className=\"modal-overlay\"></div>\r\n                        <UpdateTimeKeepingModal\r\n                            style={{\r\n                                marginTop: 0\r\n                            }}\r\n                        >\r\n                        </UpdateTimeKeepingModal>\r\n                    </div>\r\n                : null\r\n                }\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\r\n        payEmployeeStatus: state.payEmployeeStatus,\r\n        infoUser: state.infoUser,\r\n        listEmployee: state.listEmployee,\r\n        listSackedEmployee: state.listSackedEmployee,\r\n        statusAddNextWeekTimeKeeping: state.statusAddNextWeekTimeKeeping,\r\n        statusUpdateNextWeekTimeKeeping: state.statusUpdateNextWeekTimeKeeping,\r\n        statusAddTimeKeeping: state.statusAddTimeKeeping,\r\n        statusUpdateTimeKeeping: state.statusUpdateTimeKeeping,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changePayEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        getSackedEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE_SACKED\",\r\n                employees: data,\r\n            });\r\n        },\r\n        changeAddNextWeekTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateNextWeekTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        changeAddTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n    }\r\n}\r\nexport default connect(mapStateToProps , mapDispatchToProps)((withStyles(styles, {withTheme: true}))(EmployeeManager));\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodImport.js",["590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606","607","608"],"import React, { Component } from 'react';\r\nimport { TextField } from '@mui/material';\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { InputLabel, Button, Modal, Grid, Card, CardHeader} from '@mui/material';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { connect } from 'react-redux';\r\nimport GoodImage from '../../img/good-example.jpg';\r\nimport AddTypeModal from './AddTypeModal';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport ConfirmModal from './ConfirmModal';\r\nimport { GiConsoleController } from 'react-icons/gi';\r\nimport {\r\n    Link\r\n} from \"react-router-dom\";\r\n// Use for save type\r\nvar productTypes =[];\r\nvar listTypeInfor = [];\r\n\r\nvar listProductInfor = [];\r\n\r\n// Use for choose type:\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass GoodImport extends Component {\r\n    imgUrl= 'none';\r\n    dateTime= Date.now();\r\n    currentDateTime = '2021-01-02';\r\n    finishUpImage = true;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n            change: false,\r\n        }; \r\n        this.loadAllType(); \r\n        this.loadAllGood();\r\n\r\n        this.currentDateTime = this.getCurrentDateTime();\r\n        typeSet = [];\r\n    }\r\n    \r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    handleAdd(){\r\n        this.props.changeAddTypeStatus();\r\n        this.props.setAddTypeStatus();\r\n    }\r\n    \r\n    async profileImageChange(fileChangeEvent) {\r\n        this.setState({\r\n            imageSelect: fileChangeEvent.target.files[0],\r\n        })\r\n        this.finishUpImage = false;\r\n        const file = fileChangeEvent.target.files[0];\r\n        const { type } = file;\r\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\r\n        } else {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", fileChangeEvent.target.files[0])\r\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\r\n            await axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\r\n                .then(res => {\r\n                    this.imgUrl=res.data.url;\r\n                    this.setState({\r\n                        change: 'true'\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"Thất bại\");\r\n                })\r\n        }\r\n        this.finishUpImage = true;\r\n    }\r\n\r\n    async importGood(e) {\r\n        // Ngăn chuyển trang\r\n        var isContinue = this.checkConstraint();\r\n        if(!isContinue)\r\n        {\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n        // Thêm hàng hoá\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            product: {\r\n                _id: {\r\n                    productID: this.generatedID,\r\n                    importDate: document.querySelector('input[name=\"importDate\"]').value,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: document.querySelector('input[name=\"goodName\"]').value,\r\n                quantity: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                remain: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\r\n                sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\r\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\r\n                imgUrl: this.imgUrl,\r\n                unit: document.querySelector('input[name=\"unit\"]').value,\r\n            }   \r\n        }\r\n        console.log(data);\r\n\r\n        axios.post(`http://localhost:5000/api/product`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu thành công\")\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                console.log(err);\r\n            })\r\n\r\n        //Thêm vào bảng joinType nữa\r\n\r\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\r\n        for(var i = 0 ; i < typeSet.length ; i++)\r\n        {\r\n            const data1 = {\r\n                token: localStorage.getItem('token'),\r\n                productJoinType: {\r\n                    _id : {\r\n                        productID: this.generatedID,\r\n                        typeID: typeSet[i], \r\n                        importDate: document.querySelector('input[name=\"importDate\"]').value,\r\n                        storeID: this.props.infoUser.email,\r\n                    }\r\n                }\r\n            }\r\n            axios.post(`http://localhost:5000/api/product/join`, data1)\r\n                .then(res => {\r\n                    console.log(\"lưu vô bảng join thành công\");\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                })\r\n        }\r\n        \r\n\r\n        // console.log(data);\r\n    }\r\n    \r\n    checkConstraint = () => {\r\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\r\n        // Constraint 1: Check name\r\n        var productName =  document.querySelector('input[name=\"goodName\"]').value;\r\n        if(productName.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Tên sản phẩm không được trống\",\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 2: Check quantity\r\n        if(document.querySelector('input[name=\"goodQuantity\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value) <= 0) \r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\r\n            alert('Số lượng sản phẩm phải lớn hơn 0');\r\n            return false;\r\n        }\r\n        // Constraint 3: check Unit\r\n        if(document.querySelector('input[name=\"unit\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\r\n            alert('Đơn vị của sản phẩm không được trống');\r\n            return false;\r\n        }\r\n        // Constraint 4: Check import Price\r\n        if(document.querySelector('input[name=\"originalPrice\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Giá nhập không được trống\",\"warning\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <= 0) \r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('Giá nhập phải lớn hơn 0',\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 5: check sell Price\r\n        if(document.querySelector('input[name=\"sellPrice\"]').value.length == 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert(\"Giá bán không được trống\",\"warning\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"sellPrice\"]').value) <= 0) \r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('Giá bán phải lớn hơn 0',\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 6: Ngày nhập phải nhỏ  hơn ngày hết hạn\r\n        if (\r\n            (\r\n                new Date(document.querySelector('input[name=\"importDate\"]').value).getTime()\r\n                - \r\n                new Date(document.querySelector('input[name=\"expiredDate\"]').value).getTime()\r\n            ) >= 0)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('Không thể nhập hàng hết hạn',\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 7: Check giá gốc nhỏ hơn giá bán\r\n        if(\r\n            parseInt(document.querySelector('input[name=\"sellPrice\"]').value) \r\n            - \r\n            parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <=0\r\n            ) \r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('Giá bán phải lớn hơn giá gốc',\"warning\");\r\n            return false;\r\n        }\r\n        // Constraint 8: check xem đã  up ảnh lên xong chưa\r\n        if(this.finishUpImage == false)\r\n        {\r\n            this.props.hideAlert();\r\n            this.props.showAlert('Ảnh chưa được upload xong',\"warning\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        listTypeInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n        productTypes=[];\r\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\r\n        {\r\n            productTypes.push(listTypeInfor[i].name);\r\n        }\r\n\r\n        this.props.getProductType(result);\r\n        console.log(\"listType\", this.props.typeProduct.state);\r\n        this.setState({change: true});\r\n    }\r\n\r\n    async loadAllGood() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                // alert(\"Lấy hết đc product ròi anh chai\");\r\n                result = res.data.data;\r\n                console.log(res.data.data);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Get data và lưu các tên Type vào dữ liệU\r\n        //Get data và lưu các tên Type vào bảng\r\n        listProductInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listProductInfor.push(result[i]);\r\n        }\r\n        if(listProductInfor.length>0)\r\n        {\r\n            this.generatedID = parseInt(listProductInfor[listProductInfor.length-1]._id.productID) + 1;\r\n        } \r\n        else this.generatedID = 0;\r\n        this.props.getProductToReducer(listProductInfor);\r\n        this.setState({change: false});\r\n    }\r\n\r\n    generatedID = 0;\r\n\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName='';\r\n        for(var i = 0; i<listTypeInfor.length;i++)\r\n        {   \r\n            if(listTypeInfor[i]._id.typeID == typeID)\r\n            {\r\n                typeName = listTypeInfor[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    foundTypeInSet(typeID) {\r\n        for(var i = 0 ; i < typeSet.length; i++)\r\n        {\r\n            if(typeSet[i]==typeID._id.typeID) return true;\r\n        }\r\n        return false;\r\n    }\r\n    render() {\r\n        \r\n        return(\r\n            <div \r\n                style={{ \r\n                    display: 'block', height: \"900px\", overflowY: 'auto ', backgroundColor: 'rgb(221,235,255)'   \r\n                }}\r\n            >   \r\n                <div className=\"good-import-header\"></div>\r\n                <Grid className=\"import-container\" style={{height: '79vh', overflowY: 'scroll'}} container spacing={2}>\r\n                    <Grid item md={3}  \r\n                        style={{\r\n                            display: 'flex', \r\n                            justifyContent:'center', \r\n                            flexDirection:'column',\r\n                            alignItems:'center',\r\n                            paddingLeft: '30px'\r\n                        }}\r\n                    >   \r\n                        <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden', marginTop: '15px ' }}>\r\n                            <Image style={{width: '240px',height: '240px', padding: '10px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                        </label>\r\n                        {/* Ẩn đi */}\r\n                        <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                    </Grid>\r\n                    <Grid item md={9}>\r\n\r\n                        <Card \r\n                            style={{\r\n                                marginRight: '18px',\r\n                            }}\r\n                        >\r\n                            <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"ADD GOOD\" />\r\n                            <Grid container md={12}>\r\n                                <Grid item md={6} \r\n                                    className='input-item'\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\"\r\n                                        style={{\r\n                                            width: '130px'\r\n                                        }}\r\n                                    >\r\n                                        ID\r\n                                    </div>\r\n                                    <StyledTextField\r\n                                        classname='input-box' \r\n                                        type=\"text\" \r\n                                        // class=\"input-val\" \r\n                                        style = {{width: '60%'}} \r\n                                        fullWidth \r\n                                        size=\"small\" \r\n                                        name=\"goodID\" \r\n                                        variant=\"outlined\"\r\n                                        value={this.generatedID}\r\n                                        readOnly={true}\r\n                                        disabled={true}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={6} \r\n                                    className='input-item'\r\n                                    style={{\r\n                                        marginLeft: 0,\r\n                                        paddingLeft: 0,\r\n                                    }}\r\n                                >\r\n                                    <div className=\"input-label\" style={{width: 110}}>Import Date</div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'   \r\n                                        type=\"date\" \r\n                                        style = {{width: '68%'}} \r\n                                        fullWidth\r\n                                        name=\"importDate\"\r\n                                        size=\"small\"\r\n                                        variant=\"outlined\"\r\n                                        defaultValue={this.currentDateTime}\r\n                                    />\r\n                                </Grid>\r\n                                \r\n                                <Grid item md={6} \r\n                                    className='input-item'\r\n                                >\r\n                                    <div className=\"input-label\"style={{width: '130px'}}>Name</div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'   \r\n                                        type=\"text\" \r\n                                        // class=\"input-val\" \r\n                                        style = {{width: '60%'}} \r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        name=\"goodName\" \r\n                                        variant=\"outlined\" \r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={4}\r\n                                    className='input-item'\r\n                                    style={{padding: '0px', marginLeft: '0px'}}\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\" \r\n                                        style={{width: '120px'}}\r\n                                    >\r\n                                        Quantity\r\n                                    </div>\r\n                                    <StyledTextField\r\n                                        style = {{width: '60%'}} \r\n                                        fullWidth\r\n                                        name=\"goodQuantity\" \r\n                                        variant=\"outlined\"\r\n                                        type=\"number\"\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={2}\r\n                                    className='input-item'\r\n                                    style={{\r\n                                        paddingRight: 12\r\n                                    }}\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\"\r\n                                        style={{\r\n                                            marginLeft: 0,\r\n                                            paddingLeft: 4,\r\n                                            width: 40\r\n                                        }}\r\n                                    >\r\n                                        Unit\r\n                                    </div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'\r\n                                        style = {{width: '100%', marginLeft: '4px'}} \r\n                                        fullWidth\r\n                                        variant=\"outlined\"\r\n                                        type=\"text\" \r\n                                        name=\"unit\" \r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={6}\r\n                                    className='input-item'\r\n                                >\r\n                                    <div className=\"input-label\" style={{width: 128}}>Original Price</div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'\r\n                                        style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \r\n                                        fullWidth\r\n                                        name=\"originalPrice\" \r\n                                        variant=\"outlined\"\r\n                                        type=\"number\" \r\n                                    />\r\n                                    đ\r\n                                </Grid>\r\n                                <Grid item md={6}\r\n                                    className='input-item'\r\n                                    style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\"\r\n                                        style={{width: '130px'}}\r\n                                    >\r\n                                        Sell Price\r\n                                    </div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'\r\n                                        style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \r\n                                        fullWidth\r\n                                        name=\"sellPrice\" \r\n                                        variant=\"outlined\"\r\n                                        type=\"number\" \r\n                                    />\r\n                                    đ\r\n                                </Grid>\r\n                                <Grid item md={7} \r\n                                    className='input-item'\r\n                                >\r\n                                    <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\r\n                                    <StyledTextField\r\n                                        classname='input-box'   \r\n                                        type=\"date\" \r\n                                        style = {{width: '70%'}} \r\n                                        fullWidth\r\n                                        size=\"small\"\r\n                                        name=\"expiredDate\" \r\n                                        variant=\"outlined\"\r\n                                        defaultValue={this.currentDateTime}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={10}\r\n                                    className='input-item'\r\n                                >\r\n                                    <div \r\n                                        className=\"input-label\"\r\n                                        style={{width:132}}\r\n                                    >\r\n                                        Product Type\r\n                                    </div>\r\n                                    <FormControl sx={{ minWidth: 120 }}>\r\n                                        {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                        <Select\r\n                                            value={this.state.type}\r\n                                            onChange={(event) => {\r\n                                                this.setState({type: event.target.value});\r\n                                                if(!typeSet.includes(event.target.value))\r\n                                                {\r\n                                                    typeSet.push(event.target.value);\r\n                                                }\r\n                                                this.setState({change: !this.state.change})\r\n                                            }}\r\n                                            style={{\r\n                                                height: 36,\r\n                                            }}\r\n                                        >\r\n                                            {\r\n                                                this.props.typeProduct.state.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                : this.props.typeProduct.state.map((type) =>\r\n                                                    ! this.foundTypeInSet(type) \r\n                                                    ? <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\r\n                                                    : null\r\n                                                )\r\n                                            }   \r\n                                        </Select> \r\n                                    </FormControl>\r\n                                    <Button onClick={() => this.handleAdd()}>\r\n                                        <AiFillPlusCircle\r\n                                            size={28}\r\n                                            style={{\r\n                                                fontSize: 28,\r\n                                                margin: 0,\r\n                                                padding: 0,\r\n                                                width: 28,\r\n                                                height: 28\r\n                                            }}    \r\n                                        />\r\n                                    </Button>\r\n                                    <div className='all-type-container'>\r\n                                        {\r\n                                            Array.from(typeSet).map((type) =>\r\n                                                <div className='type-container'>\r\n                                                    \r\n                                                    <CancelIcon\r\n                                                        className='close-icon'\r\n                                                        size={10}\r\n                                                        onClick={() => {\r\n                                                            typeSet = typeSet.filter(function(item) {\r\n                                                                return item != type;\r\n                                                            })\r\n                                                            console.log(typeSet);\r\n                                                            this.setState({type: 'none'});\r\n                                                        }}\r\n                                            \r\n                                                    />\r\n                                                    <span className='type-title'>\r\n                                                        {this.getTypeNamebyTypeID(type)}\r\n                                                    </span>\r\n                                                </div>\r\n                                                \r\n                                            )\r\n                                        }\r\n                                    </div>\r\n                                </Grid>\r\n                                {/* <Grid item md={10}\r\n                                    className='input-item'\r\n                                >\r\n\r\n                                </Grid> */}\r\n                                <Grid item md={2}\r\n                                    className='input-item'\r\n                                >\r\n                                    <Link to=\"/goodmanager\" className=\"btn btn-primary\" onClick={(e) => this.importGood(e)}>\r\n                                        IMPORT\r\n                                    </Link>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Card>\r\n                    </Grid>\r\n                    <Grid item sm={12} md={12} >\r\n                        \r\n                    </Grid>\r\n                </Grid> \r\n                    \r\n                {this.props.addTypeStatus ? (\r\n                    <div className=\"modal-add\">\r\n                        <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                        <AddTypeModal></AddTypeModal>\r\n                    </div>\r\n                ): null}\r\n                {this.props.confirmStatus ? (\r\n                    <div className=\"modal-add\">\r\n                        <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                        <ConfirmModal></ConfirmModal>\r\n                    </div>\r\n                ): null}\r\n            </div>\r\n        );        \r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        typeProduct: state.typeProduct\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        updateAvatar: (avatar) => {\r\n            dispatch({\r\n                type: \"UPDATE_AVATAR\",\r\n                avatar: avatar\r\n            })\r\n        },\r\n        setAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_IMPORT_GOOD\",\r\n            });\r\n        },\r\n        showAlert: (message, typeMessage) => {\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: message,\r\n                typeMessage: typeMessage,\r\n            })\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n        },\r\n        getProductToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_AND_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        getProductType: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GoodImport);\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\DashBoard.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\ReiceiptManager.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\SellProduct.js",["609"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Profile.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\EditTypeModal.js",["610","611","612","613"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit} from 'react-icons/bi';\r\nimport { TiDelete } from \"react-icons/ti\";\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\nimport AddTypeModal from './AddTypeModal';\r\n\r\nvar productTypes =[];\r\nvar listTypeInfor = [];\r\n\r\nclass EditTypeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.loadAllType();\r\n        this.state = {\r\n            change: false\r\n        }\r\n    }\r\n    confirm = () => {\r\n        // Thực hiện các lệnh xử lý tại đây\r\n        this.props.changeConfirmStatus();\r\n    }\r\n    cancel = () => {\r\n        // this.props.changeConfirmStatus();\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    edit = (type) => {\r\n        this.props.changeAddTypeStatus();\r\n        this.props.setEditTypeStatus();\r\n        this.props.typeToUpdate(type);\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    async delete(type){\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productTypes:\r\n            [\r\n                {\r\n                    typeID: type._id.typeID,\r\n                    storeID: type._id.storeID\r\n                }\r\n            ]\r\n                \r\n        }\r\n        await axios.delete(`http://localhost:5000/api/product/type`,{data: data})\r\n            .then(res => {\r\n                console.log(\"delete success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                // alert(\"Lỗi gì cmnr\")\r\n            })\r\n        // Ở đây mình phải cập nhật join nữa\r\n        // Phải get tất cả cái join mà có cái type là type hiện tại\r\n        var allJoinMatch = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n                \"_id.typeID\": type._id.typeID,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, \r\n        {\r\n            params: {...data1}\r\n        })\r\n            .then(res => {\r\n                allJoinMatch = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n\r\n        var allProductJoin = [];\r\n        for(var i = 0 ; i < allJoinMatch.length; i++)\r\n        {\r\n            allProductJoin.push({\r\n                productID: allJoinMatch[i]._id.productID,\r\n                typeID: type._id.typeID,\r\n                importDate: allJoinMatch[i]._id.importDate,\r\n                storeID: this.props.infoUser.email,\r\n                \r\n            });\r\n        }\r\n        \r\n        const dataJoin = {\r\n            token: localStorage.getItem('token'),\r\n            productJoinTypes: allProductJoin,      \r\n        }\r\n\r\n        console.log(dataJoin);\r\n\r\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\r\n            .then(res => {\r\n                console.log(\"delete join success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n\r\n        this.loadAllType();\r\n        this.setState({change: !this.state.change})\r\n    }\r\n    \r\n\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err); // 401 ở đây\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        listTypeInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n        productTypes=[];\r\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\r\n        {\r\n            productTypes.push(listTypeInfor[i].name);\r\n        }\r\n        this.setState({change: true});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"All Good Type\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid container item md={12} xs={12} spacing={0}>\r\n                                { listTypeInfor.map((type) => (\r\n                                    <Grid item md={3} style={{border:'1px solid #333', padding: 4}}>\r\n                                        <span>{type.name}</span>\r\n                                        <BiEdit onClick={() => this.edit(type)}/>\r\n                                        <TiDelete onClick={() => this.delete(type)}/>\r\n                                    </Grid>\r\n                                ))}\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Thoát\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n                {/* {this.props.addTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <AddTypeModal></AddTypeModal>\r\n                        </div>\r\n                    ): null} */}\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        editTypeStatus: state.editTypeStatus,\r\n        addTypeStatus: state.addTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        infoUser: state.infoUser,\r\n        typeProductValue: state.typeProductValue,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        setEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"SET_EDIT_TYPE_STATUS\",\r\n            })\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        typeToUpdate: (data) => {\r\n            dispatch({\r\n                type: \"UPDATE_PRODUCT_TYPE\",\r\n                _id: {\r\n                    typeID: data._id.typeID,\r\n                    storeID: data._id.storeID,\r\n                },\r\n                name: data.name\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTypeModal);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\Regulation.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ModalAdd.js",["614","615","616","617"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ListShift.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ChangePassword.js",["618","619","620"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileSetting.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileDetail.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\AddTypeModal.js",["621","622","623","624","625","626","627","628"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Alert } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel, GiVampireCape } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nvar listTypeInfor = [];\r\n\r\nclass AddTypeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            change: 'false'\r\n        }\r\n        this.loadInitialData();\r\n        this.getAllTypeList();\r\n    }\r\n    storeID = \"\";\r\n    typeList = [];\r\n\r\n    async getAllTypeList(){\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        console.log(data.token);\r\n        // alert(data.token);\r\n        console.log(data.filter);\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n    }\r\n    addType = () => {\r\n        var newTypeName = document.querySelector('input[name=\"typeName\"]').value.trim();\r\n        if(this.checkConstraint(newTypeName)==false)  return;\r\n        var genTypeID = 0;\r\n        if(listTypeInfor.length>0)\r\n        {\r\n            genTypeID = parseInt(listTypeInfor[listTypeInfor.length-1]._id.typeID) + 1;\r\n        } \r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productType: {\r\n                _id:{\r\n                    typeID: genTypeID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: newTypeName,\r\n            }    \r\n        }\r\n        axios.post(`http://localhost:5000/api/product/type`, data)\r\n            .then(res => {\r\n                alert(\"Save success\");\r\n                //TODO: Cập nhật token ở đây nữa\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        this.props.changeAddTypeStatus();\r\n    }\r\n    \r\n    checkConstraint(typeName) {\r\n        //Constraint 1: Check name\r\n        for(var i=0;i<listTypeInfor.length;i++)\r\n        {\r\n            if(listTypeInfor[i].name==typeName)\r\n            {\r\n                if(!this.props.isAddTypeStatus && typeName.trim()==this.props.typeProductValue.name)\r\n                {\r\n                    alert(\"Không đổi tên à anh zai\");\r\n                    return false;\r\n                }\r\n                alert(\"Trùng tên rồi anh chai\");\r\n                return false;\r\n            }\r\n            \r\n        }        \r\n        // Constraint 2: Not blank\r\n        if(typeName.length==0)\r\n        {\r\n            alert(\"Không nhập gì à anh chai\")\r\n            return false;\r\n        }\r\n        return true;\r\n\r\n    }\r\n    cancel = () => {\r\n        this.props.changeAddTypeStatus();\r\n    }\r\n\r\n    handle = () => {\r\n        if (this.props.isAddTypeStatus)\r\n            this.addType();\r\n        else \r\n            this.editType();\r\n    }\r\n\r\n    editType = () => {\r\n        var newTypeName = this.typeName;\r\n        if(this.checkConstraint(newTypeName)==false) return;\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            productType: {\r\n                _id: {\r\n                    typeID: this.props.typeProductValue._id.typeID,\r\n                    storeID: this.props.infoUser.email,\r\n                }, \r\n                name: newTypeName,\r\n            }\r\n        }\r\n        // alert(data.product.name)\r\n        axios.put(`http://localhost:5000/api/product/type`, data)\r\n            .then(res => {\r\n                // Có khi mình sẽ cập nhật type ở dây\r\n                console.log(\"Update success\");\r\n                alert('update được rồi anh trai')\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(\"Lỗi gì cmnr\")\r\n            })\r\n        this.props.changeAddTypeStatus();\r\n        this.props.changeEditTypeStatus();\r\n    }\r\n    typeName = \"\";\r\n    loadInitialData = () => {\r\n        if (this.props.isAddTypeStatus) {\r\n            \r\n        }\r\n        else\r\n        {\r\n            this.typeName = this.props.typeProductValue.name;\r\n            this.setState({change: true});\r\n        } \r\n    }\r\n\r\n    changeTypeName(e)\r\n    {\r\n        this.typeName = e.target.value;\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader \r\n                        style={{ color: 'blue', backgroundColor: '#efeeef', textAlign: 'center' }} \r\n                        title={this.props.isAddTypeStatus? \"Add Type\" : \"Edit Type\"}\r\n                        />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid \r\n                            container \r\n                            spacing={2}\r\n                            justifyContent={'center'}\r\n                            alignItems={'center'}\r\n                        >\r\n                            <Grid item md={2} xs={12}>\r\n                                TypeName\r\n                            </Grid>\r\n                            <Grid item md={10} xs={12}>\r\n                                <TextField\r\n                                    id=\"outlined-basic\"\r\n                                    variant=\"outlined\"\r\n                                    fullWidth\r\n                                    required\r\n                                    type=\"text\"\r\n                                    name=\"typeName\"\r\n                                    defaultValue={this.typeName}\r\n                                    onChange={(e) => this.changeTypeName(e)}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button \r\n                            style={{ backgroundColor: 'yellowgreen' }} \r\n                            // onClick={() => this.addShift()} \r\n                            onClick={() => this.handle()}\r\n                            variant=\"contained\" \r\n                            startIcon={<BiPlusMedical />}\r\n                        >\r\n                            Xác nhận\r\n                        </Button>\r\n                        <Button \r\n                            style={{ backgroundColor: 'red' }} \r\n                            // onClick={() => this.editShift()}\r\n                            onClick={() => this.cancel()}\r\n                            variant=\"contained\" \r\n                            startIcon={<GiCancel />}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        infoUser: state.infoUser,\r\n        typeProductValue: state.typeProductValue\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeEditTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\r\n            });\r\n        },\r\n        changeAddTypeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TYPE_STATUS\",\r\n            });\r\n        },\r\n        addTypeToReducer: (data) => {\r\n            dispatch({\r\n                type: \"ADD_TYPE\",\r\n                data: data,\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTypeModal);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\DarkMode.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Profile\\ProfileHeader.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\HistoryReciept.js",["629","630"],"import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport CollapsibleTable from './TableReciept'\r\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\r\n\r\nfunction HistoryReciept(props) {\r\n\r\n    const darkmode = useSelector(state => state.statusDarkmode)\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div style={{ overflow: 'hidden' }} className=\"modal-history-reciept\">\r\n            <div onClick={() => { dispatch({ type: \"CHANGE_HISTORY_RECIEPT_STATUS\" }) }} className=\"modal-overlay\"></div>\r\n            <div className=\"history-list-receipt\">\r\n                <Card>\r\n                    <CardHeader style={{ color: !darkmode ? '#0091ea' : 'white', backgroundColor: !darkmode ? '#efeeef' : '#455a64' }} title=\"History Reciept\" />\r\n                    <Divider></Divider>\r\n                </Card>\r\n                <div id=\"choses-product\" style={{ margin: '30px', height: '82%', overflow: 'hidden', overflowY: 'scroll' }}>\r\n                    <CollapsibleTable></CollapsibleTable>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HistoryReciept;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Print.js",["631","632","633"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ShoppingBags.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\Tabs.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\DateReciept.js",["634"],"import React from 'react';\r\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport TextField from '@mui/material/TextField';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select from '@mui/material/Select';\r\n\r\n\r\nfunction DataReciept(props) {\r\n    const dispatch = useDispatch()\r\n    const typeByDate = useSelector(state => state.typeByDate)\r\n    const [value, setValue] = React.useState(new Date());\r\n    const [value1, setValue1] = React.useState('all');\r\n    const darkmode = useSelector(state => state.statusDarkmode)\r\n\r\n    const selectDate = () => {\r\n        const data = {\r\n            type: \"typeByDate\",\r\n            day: value.getDate(),\r\n            month: value.getMonth() + 1,\r\n            year: value.getFullYear(),\r\n        }\r\n        dispatch({\r\n            type: \"TYPE_BY_DATE\",\r\n            typeByDate: data,\r\n        })\r\n    }\r\n\r\n    const changeTime = (newValue) => {\r\n        if (newValue) {\r\n            setValue(newValue);\r\n        }\r\n        if (typeByDate.type === 'typeByDate') {\r\n            const data = {\r\n                type: \"typeByDate\",\r\n                day: newValue.getDate(),\r\n                month: newValue.getMonth() + 1,\r\n                year: newValue.getFullYear(),\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        }\r\n    }\r\n\r\n    const selectType = () => {\r\n        if (value1 === 'all') {\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: { type: 'all' },\r\n            })\r\n        } else if (value1 === 'yesterday') {\r\n            let yesterday = new Date()\r\n            const data = {\r\n                type: \"yesterday\",\r\n                day: yesterday.getDate() - 1,\r\n                month: yesterday.getMonth() + 1,\r\n                year: yesterday.getFullYear(),\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        } else if (value1 === 'today') {\r\n            let today = new Date()\r\n            const data = {\r\n                type: \"today\",\r\n                day: today.getDate(),\r\n                month: today.getMonth() + 1,\r\n                year: today.getFullYear(),\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        } else if (value1 === 'lastmonth') {\r\n            let today = new Date()\r\n            const data = {\r\n                type: \"lastmonth\",\r\n                month: today.getMonth(),\r\n                year: today.getFullYear(),\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        } else if (value1 === 'lastyear') {\r\n            let today = new Date()\r\n            const data = {\r\n                type: \"lastyear\",\r\n                year: today.getFullYear() - 1,\r\n            }\r\n            dispatch({\r\n                type: \"TYPE_BY_DATE\",\r\n                typeByDate: data,\r\n            })\r\n        }\r\n    }\r\n\r\n    const changeType = (e) => {\r\n        setValue1(e.target.value)\r\n        if (typeByDate.type === 'all' || typeByDate.type === 'yesterday' || typeByDate.type === 'today' || typeByDate.type === 'lastmonth' || typeByDate.type === 'lastyear') {\r\n            if (e.target.value === 'all') {\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: { type: 'all' },\r\n                })\r\n            }\r\n            if (e.target.value === 'yesterday') {\r\n                let yesterday = new Date()\r\n                let data = {\r\n                    type: \"yesterday\",\r\n                    day: yesterday.getDate() - 1,\r\n                    month: yesterday.getMonth() + 1,\r\n                    year: yesterday.getFullYear(),\r\n                }\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: data,\r\n                })\r\n            }\r\n            if (e.target.value === 'today') {\r\n                let today = new Date()\r\n                const data = {\r\n                    type: \"today\",\r\n                    day: today.getDate(),\r\n                    month: today.getMonth() + 1,\r\n                    year: today.getFullYear(),\r\n                }\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: data,\r\n                })\r\n            }\r\n            if (e.target.value === 'lastmonth') {\r\n                let today = new Date()\r\n                const data = {\r\n                    type: \"lastmonth\",\r\n                    month: today.getMonth(),\r\n                    year: today.getFullYear(),\r\n                }\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: data,\r\n                })\r\n            }\r\n            if (e.target.value === 'lastyear') {\r\n                let today = new Date()\r\n                const data = {\r\n                    type: \"lastyear\",\r\n                    year: today.getFullYear() - 1,\r\n                }\r\n                dispatch({\r\n                    type: \"TYPE_BY_DATE\",\r\n                    typeByDate: data,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        dispatch({\r\n            type: \"TYPE_BY_DATE\",\r\n            typeByDate: { type: 'all' },\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n        <Grid container spacing={2}>\r\n            <Grid item md={12} sm={12}  >\r\n                <Card>\r\n                    <CardHeader style={{ color: !darkmode ? '#0091ea' :'white', backgroundColor: !darkmode ? '#efeeef' :'#455a64'}} title=\"Date\" />\r\n                    <Divider></Divider>\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <div className=\"form-check\">\r\n                                        <input onClick={() => selectType()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault2\" defaultChecked />\r\n                                        <FormControl fullWidth>\r\n                                            <InputLabel id=\"demo-simple-select-label\">Group by</InputLabel>\r\n                                            <Select\r\n                                                labelId=\"demo-simple-select-label\"\r\n                                                id=\"demo-simple-select\"\r\n                                                value={value1}\r\n                                                label=\"Option\"\r\n                                                onChange={(e) => changeType(e)}\r\n                                            >\r\n                                                <MenuItem value='all'>All</MenuItem>\r\n                                                <MenuItem value='today'>Today</MenuItem>\r\n                                                <MenuItem value='yesterday'>Yesterday</MenuItem>\r\n                                                <MenuItem value='lastmonth'>Last month</MenuItem>\r\n                                                <MenuItem value='lastyear'>Last year</MenuItem>\r\n                                            </Select>\r\n                                        </FormControl>\r\n                                    </div>\r\n                                </Grid>\r\n                                <Grid item md={12} sm={12}>\r\n                                    <div className=\"form-check\">\r\n                                        <input onClick={() => selectDate()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\" />\r\n                                        <DesktopDatePicker\r\n                                            label=\"Ngày\"\r\n                                            value={value}\r\n                                            minDate={new Date('2017-01-01')}\r\n                                            onChange={(newValue) => changeTime(newValue)}\r\n                                            renderInput={(params) => <TextField {...params} />}\r\n                                        />\r\n                                    </div>\r\n                                </Grid>\r\n                            </LocalizationProvider>\r\n                        </Grid>\r\n                    </CardContent>\r\n                </Card>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default DataReciept;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\TableReciept.js",["635","636","637","638","639","640","641","642","643","644","645","646","647","648"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\ControlReciept.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\StatusReceiptType.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButton.js",["649"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\Statistic.js",["650","651","652","653","654","655","656","657","658","659","660","661","662","663","664","665","666","667","668","669","670","671","672","673","674","675","676","677","678","679","680","681","682","683","684","685","686","687","688","689","690","691","692","693","694","695","696","697","698","699","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714","715","716","717","718","719","720","721","722"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\ConfirmModal.js",["723","724","725","726","727","728"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport axios from 'axios';\r\n\r\nclass ConfirmModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    confirm = () => {\r\n        // Thực hiện các lệnh xử lý tại đây\r\n        this.props.changeConfirmStatus();\r\n        this.props.setConfirm();\r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeConfirmStatus();\r\n        this.props.setQuit();\r\n    }\r\n\r\n    getMessage = ()  => {\r\n        var message = \"Cái này chưa code\";\r\n        switch(this.props.confirmCode)\r\n        {\r\n            case 'confirm-delete-good':\r\n                message = \"Are you sure to delete this product ?\";\r\n            case 'confirm-import-good':\r\n                message = \"Are you sure to import this product ?\";\r\n        }\r\n        return (\r\n            <div>\r\n                {message}\r\n            </div>\r\n        );\r\n    }\r\n    render() {\r\n        console.log(this.props.objectEditShift);\r\n        return (\r\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm\" />\r\n                    <Divider />\r\n                    <CardContent>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item md={12} xs={12}>\r\n                                {this.getMessage()}\r\n                            </Grid>\r\n                            <Grid item md={12} xs={12}>\r\n                                <Stack spacing={3}>\r\n                                   \r\n                                </Stack>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </CardContent>\r\n                    <Divider />\r\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\r\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.confirm()} variant=\"contained\" startIcon={<BiPlusMedical />}>\r\n                            Xác nhận\r\n                        </Button>\r\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\r\n                            Hủy\r\n                        </Button>\r\n                    </Box>\r\n                </Card>\r\n            </form>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        confirmStatus: state.confirmStatus,\r\n        deleteStatus: state.deleteStatus,\r\n        confirmCode: state.confirmCode,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setConfirm: () => {\r\n            dispatch({\r\n                type: \"CONFIRM\",\r\n            });\r\n        },\r\n        setQuit: () => {\r\n            dispatch({\r\n                type: \"QUIT\",\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmModal);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\TableReciept.js",["729"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport { Grid, Box } from '@mui/material';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport {red} from '@mui/material/colors'\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Typography from '@mui/material/Typography';\r\nimport Paper from '@mui/material/Paper';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { FiEdit } from 'react-icons/fi'\r\nimport axios from 'axios';\r\n\r\n\r\nfunction Row(props) {\r\n    const { row } = props;\r\n    const [open, setOpen] = React.useState(false);\r\n    const dispatch = useDispatch();\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const infoUser = useSelector(state => state.infoUser)\r\n    const statusEditInfoBill = useSelector(state => state.statusEditInfoBill)\r\n    const editReciept = (MAHD) => {\r\n        let objectInfoBill = [];\r\n        listReciept.map(value => {\r\n            if (value.MAHD === MAHD) {\r\n                objectInfoBill = value\r\n            }\r\n            return value;\r\n        })\r\n        if (!statusEditInfoBill) {\r\n            axios.post('http://localhost:5000/api/sell-product/edit-reciept',{\r\n                MAHD: MAHD,\r\n                token: localStorage.getItem('token'),\r\n                email: infoUser.email,\r\n            }).then(res => {\r\n                if (res.status === 200) {\r\n                    localStorage.setItem('token', res.data.token)\r\n                    dispatch({\r\n                        type: \"EDIT_SHOPPING_BAGS\",\r\n                        MAHD: MAHD,\r\n                    })\r\n                    dispatch({\r\n                        type: \"INFO_SHOPPING_BAGS_EDIT\",\r\n                        listProduct: objectInfoBill.listProduct,\r\n                    })\r\n                    dispatch({\r\n                        type: \"ADD_INFO_BILL_EDIT\",\r\n                        InfoBill: objectInfoBill,\r\n                    })\r\n                    dispatch({\r\n                        type: \"CHANGE_EDIT_INFOMATION_STATUS\",\r\n                    })\r\n                    dispatch({\r\n                        type: \"CHANGE_HISTORY_RECIEPT_STATUS\"\r\n                    })\r\n                }\r\n            }).catch(err => {\r\n                dispatch({\r\n                    type: \"CHANGE_LOGIN_STATUS\",\r\n                })\r\n                dispatch({\r\n                    type: \"HIDE_ALERT\",\r\n                })\r\n                dispatch({\r\n                    type: \"SHOW_ALERT\",\r\n                    message: 'Login timeout, signin again',\r\n                    typeMessage: 'warning',\r\n                })\r\n            })\r\n            \r\n        } else {\r\n            dispatch({\r\n                type: \"HIDE_ALERT\",\r\n            })\r\n            dispatch({\r\n                type: \"SHOW_ALERT\",\r\n                message: \"Con` don hang` cho` !\",\r\n                typeMessage: \"warning\"\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const TypeReciept = (isEdit, isDelete) => {\r\n        if (isDelete) {\r\n            return red[400]\r\n        } else if (isEdit) {\r\n            return '#f4f492'\r\n        } else {\r\n            return '#a6ffa6'\r\n        }\r\n    }\r\n\r\n    const StatusTypeReciept = (isEdit, isDelete) => {\r\n        if (isDelete) {\r\n            return 'Đã xóa'\r\n        } else if (isEdit) {\r\n            return 'Đổi trả'\r\n        } else {\r\n            return 'Thành công'\r\n        }\r\n    }\r\n\r\n    const showEdit = (isEdit, isDelete) => {\r\n        if (isEdit || isDelete) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    const countQuantity = () => {\r\n        let count = 0;\r\n        row.listProduct.map(value => {\r\n            count += value.quantity;\r\n        })\r\n        return count;\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <TableRow style={{ backgroundColor: TypeReciept(row.isEdit, row.deleted), borderWidth: open ? '2px' : null, borderStyle:'solid', borderColor: '#90a4ae #90a4ae transparent #90a4ae'  }} sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n                <TableCell>\r\n                    <IconButton\r\n                        aria-label=\"expand row\"\r\n                        size=\"small\"\r\n                        onClick={() => setOpen(!open)}\r\n                    >\r\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                    </IconButton>\r\n                </TableCell>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                    {row.MAHD}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{row.date}</TableCell>\r\n                <TableCell align=\"right\">{row.totalMoney}</TableCell>\r\n                <TableCell align=\"right\">{row.discount}</TableCell>\r\n                <TableCell align=\"right\">{row.totalFinalMoney}</TableCell>\r\n                <TableCell>\r\n                    {!showEdit(row.isEdit, row.deleted) ? (\r\n                        <IconButton onClick={() => editReciept(row.MAHD)} color=\"secondary\" aria-label=\"fingerprint\">\r\n                            <FiEdit />\r\n                        </IconButton>\r\n                    ) : null}\r\n                </TableCell>\r\n            </TableRow>\r\n            <TableRow style={{borderWidth: open ? '2px' : null, borderStyle:'solid', borderColor: 'transparent #90a4ae #90a4ae #90a4ae'  }}>\r\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={12}>\r\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\r\n                        <Box sx={{ margin: 1 }}>\r\n                            <Typography style={{ fontWeight: '600' }} variant=\"h6\" gutterBottom component=\"div\">\r\n                                Detail Recipet\r\n                            </Typography>\r\n                            <Grid container spacing={3}>\r\n                                <Grid item  lg={6} md={12} xs={12}>\r\n                                    <Table size=\"small\" aria-label=\"purchases\">\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                <TableCell>#</TableCell>\r\n                                                <TableCell>Name</TableCell>\r\n                                                <TableCell>Quantity</TableCell>\r\n                                                <TableCell align=\"right\">Price</TableCell>\r\n                                                <TableCell align=\"right\">Total Price</TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            {row.listProduct.map((value, key) => (\r\n                                                <TableRow key={value.name}>\r\n                                                    <TableCell>\r\n                                                        {key + 1}\r\n                                                    </TableCell>\r\n                                                    <TableCell>{value.product.name}</TableCell>\r\n                                                    <TableCell>{value.quantity}</TableCell>\r\n                                                    <TableCell align=\"right\">{value.product.sellPrice.toLocaleString()}</TableCell>\r\n                                                    <TableCell align=\"right\">\r\n                                                        {(value.quantity * value.product.sellPrice).toLocaleString()}\r\n                                                    </TableCell>\r\n                                                </TableRow>\r\n                                            ))}\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </Grid>\r\n                                <Grid style={{borderLeft: '1px solid black', marginTop: '15px'}} item lg={6} md={12} xs={12}>\r\n                                    <Grid container spacing={3}>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Mã hóa đơn:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.MAHD}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Trạng thái:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{StatusTypeReciept(row.isEdit, row.isDelete)}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Thời gian:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.date}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Giờ:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.time}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Mã HD củ:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.oldBill ? row.oldBill.MAHD : \"Không có\"}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Người bán:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.name}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Tổng số lượng:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{countQuantity()}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Tổng tiền hàng:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.totalMoney.toLocaleString()}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>Giảm giá (%):</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0' }}>{row.discount}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                        <Grid item md={6} xs={6}>\r\n                                            <Grid container>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>TỔNG:</p>\r\n                                                </Grid>\r\n                                                <Grid item md={6} xs={6}>\r\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>{row.totalFinalMoney.toLocaleString()}</p>\r\n                                                </Grid>\r\n                                            </Grid>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Box>\r\n                    </Collapse>\r\n                </TableCell>\r\n            </TableRow>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nRow.propTypes = {\r\n    row: PropTypes.shape({\r\n        calories: PropTypes.number.isRequired,\r\n        carbs: PropTypes.number.isRequired,\r\n        fat: PropTypes.number.isRequired,\r\n        history: PropTypes.arrayOf(\r\n            PropTypes.shape({\r\n                amount: PropTypes.number.isRequired,\r\n                customerId: PropTypes.string.isRequired,\r\n                date: PropTypes.string.isRequired,\r\n            }),\r\n        ).isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        price: PropTypes.number.isRequired,\r\n        protein: PropTypes.number.isRequired,\r\n    }).isRequired,\r\n};\r\n\r\n\r\nexport default function CollapsibleTable() {\r\n\r\n    const listReciept = useSelector(state => state.listReciept)\r\n\r\n    return (\r\n        <TableContainer  style={{overflowX: 'hidden'}} component={Paper}>\r\n            <Table aria-label=\"collapsible table\">\r\n                <TableHead>\r\n                    <TableRow style={{ backgroundColor: 'black', color: 'white' }}>\r\n                        <TableCell />\r\n                        <TableCell >Mã HĐ</TableCell>\r\n                        <TableCell align=\"right\">Ngày hóa đơn</TableCell>\r\n                        <TableCell align=\"right\">Tổng hóa đơn</TableCell>\r\n                        <TableCell align=\"right\">Giảm giá</TableCell>\r\n                        <TableCell align=\"right\">Khách hàng trả</TableCell>\r\n                        <TableCell />\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {listReciept ?\r\n                        listReciept.map((row) => (\r\n                            <Row key={row.MAHD} row={row} />\r\n                        )) : null\r\n                    }\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    );\r\n}\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\SellProduct\\ComponentToPrint.js",["730","731","732"],"import React from 'react';\r\n\r\n\r\n\r\nclass ComponentToPrint extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            date: new Date(),\r\n        }\r\n    }\r\n\r\n    minute = 1000 * 60;\r\n    hour = this.minute * 60;\r\n    day = this.hour * 24;\r\n    year = this.day * 365;\r\n\r\n    makeCode = (length) => {\r\n        var result = '';\r\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n        var charactersLength = characters.length;\r\n        for (var i = 0; i < length; i++) {\r\n            result += characters.charAt(Math.floor(Math.random() *\r\n                charactersLength));\r\n        }\r\n        return result;\r\n    }\r\n\r\n    totalMoney = () => {\r\n        let total = 0;\r\n        this.props.shoppingBags.map(value => {\r\n            total += value.quantity * value.product.sellPrice;\r\n        })\r\n        return total.toLocaleString();\r\n    }\r\n\r\n    reduceTotalMoney = () => {\r\n        let total = 0;\r\n        this.props.shoppingBags.map(value => {\r\n            total += value.quantity * value.product.sellPrice;\r\n        })\r\n        if (total !== 0) {\r\n            total = total*this.props.percentDiscount/100\r\n        }\r\n        return total.toLocaleString()\r\n    }\r\n\r\n    finalTotalMoney = () => {\r\n        let total = 0;\r\n        this.props.shoppingBags.map(value => {\r\n            total += value.quantity * value.product.sellPrice;\r\n        })\r\n        if (total !== 0 && this.props.percentDiscount !== 0) {\r\n            total -= total*this.props.percentDiscount/100\r\n        }\r\n        return total.toLocaleString();\r\n    }\r\n\r\n    dateFunction = () => {\r\n        let month = this.state.date.getMonth()+1;\r\n        return \"  \" + this.state.date.getDate() + \" / \" + month + \" / \" + this.state.date.getFullYear()\r\n    }\r\n\r\n    render() {\r\n        \r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <h1 style={{ textAlign: 'center' }}>{this.props.infoUser.storeName}</h1>\r\n                </div>\r\n                <div style={{ borderBottom: '1px solid #00000059' }} className=\"col-12\">\r\n                    <p style={{ textAlign: 'center', marginBottom: '0' }}>{this.props.infoUser.address}</p>\r\n                    <p style={{ textAlign: 'center' }}>{this.props.infoUser.district + ' ' + this.props.infoUser.province}</p>\r\n                    <p style={{ textAlign: 'center' }}>{\"SĐT: \" + this.props.infoUser.tel}</p>\r\n                </div>\r\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\r\n                    <h4 style={{ textAlign: 'center' }}>HÓA ĐƠN THANH TOÁN</h4>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <p style={{ textAlign: 'center', fontWeight: '400' }}>Số HĐ: {this.props.MAHD}</p>\r\n                    <div style={{ margin: '0 5px' }} className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <p style={{ fontWeight: '700' }}>Date:\r\n                                <span style={{ fontWeight: '400' }}>\r\n                                    {this.dateFunction()}\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <p style={{ fontWeight: '700' }}>Time:\r\n                                <span style={{ fontWeight: '400' }}>\r\n                                    {\"  \" + this.state.date.getHours() + \":\" + this.state.date.getMinutes()}\r\n                                </span>\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <p style={{ fontWeight: '700', margin: '0 17px' }}>\r\n                        Cashier:\r\n                        <span style={{ fontWeight: '400' }}>\r\n                            {\"  Admin\"}\r\n                        </span>\r\n                    </p>\r\n                </div>\r\n                <table style={{ margin: '0 10px' }} class=\"table\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">#</th>\r\n                            <th scope=\"col\">Name</th>\r\n                            <th scope=\"col\">Quantity</th>\r\n                            <th scope=\"col\">Price</th>\r\n                            <th scope=\"col\">Total money</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.props.shoppingBags ? this.props.shoppingBags.map((value, key) => (\r\n                            <tr>\r\n                                <td>{key + 1}</td>\r\n                                <td>{value.product.name}</td>\r\n                                <td>{value.quantity}</td>\r\n                                <td>{value.product.sellPrice}</td>\r\n                                <td>{value.quantity * value.product.sellPrice}</td>\r\n                            </tr>\r\n                        ))\r\n                        : null}\r\n                    </tbody>\r\n                </table>\r\n                <div style={{marginTop: '20px'}} className=\"col-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'end' }}>Total :</h6>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'start' }}>{this.totalMoney()}đ</h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'end' }}>Discount :</h6>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h6 style={{ textAlign: 'start' }}>-{this.reduceTotalMoney()}đ</h6>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <h5 style={{ textAlign: 'end' }}>TOTAL FINAL :</h5>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <h5 style={{ textAlign: 'start' }}>{this.finalTotalMoney()}đ</h5>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\r\n                    <h6 style={{ textAlign: 'center',fontStyle: 'italic ' }}>Xin cảm ơn quý khách</h6>\r\n                    <h6 style={{ textAlign: 'center',fontStyle: 'italic ' }}>hẹn gặp lại!</h6>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ComponentToPrint;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UnShiftEmployee.js",["733","734","735","736","737","738","739","740"],"import {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { Icon } from '@iconify/react';\r\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport '../../css/EmployeeManager.css'\r\n// material\r\nimport { Paper, TableContainer, Table, \r\n  TableHead, TableCell, TableRow, Button,\r\n  Menu, MenuItem, Grid\r\n} from '@mui/material';\r\nimport { AiOutlineEdit, AiFillDelete } from \"react-icons/ai\";\r\n// ----------------------------------------------------------------------\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    } \r\n})\r\n\r\nclass UnShiftEmployee extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: false\r\n    }\r\n    this.getAllNextWeekTimeKeeping();\r\n    console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\r\n  }\r\n\r\n  async getAllNextWeekTimeKeeping()\r\n  {\r\n    var result = [];\r\n    const data = {\r\n      token: localStorage.getItem('token'),\r\n      filter: {\r\n          \"_id.storeID\": this.props.infoUser.email,\r\n      }   \r\n    }\r\n    await axios.get(`http://localhost:5000/api/employee/off-day`, {\r\n        params: {...data}\r\n    })\r\n        .then(res => {\r\n            result = res.data.data;\r\n            console.log(\"Báo nghỉ\", res.data.data);\r\n            this.props.getEmployeeDayOff(result);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            alert(err)\r\n        })\r\n  }\r\n\r\n  getShiftNameAndTime(shiftID)\r\n  {\r\n      var shifts= this.props.listShift;\r\n      for(var i = 0 ; i < shifts.length ; i++)\r\n      {\r\n          if(shifts[i]._id.shiftID == shiftID)\r\n          {\r\n              return shifts[i].name + ' (' + shifts[i].timeFrom + ' - ' + shifts[i].timeEnd +') ';\r\n          }\r\n      }\r\n      return \"Can't get shift\";\r\n  }\r\n\r\n  getEmployeeNameByID(employeeID)\r\n  {\r\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n      {\r\n          var currentEmployee = this.props.listEmployee.employees[i];\r\n          if(currentEmployee._id.employeeID==employeeID)\r\n          {\r\n            return currentEmployee.firstName;\r\n          }\r\n      }\r\n      return \"Can't get name\";\r\n  }\r\n\r\n  reload()\r\n  {\r\n    this.setState({change: !this.state.change})\r\n  }\r\n\r\n  openOption = false;\r\n\r\n  handleClose ()\r\n  {\r\n      this.openOption = false;\r\n      this.setState({change: !this.state.change});\r\n  }\r\n\r\n  handleOpen()\r\n  {\r\n      this.openOption = true;\r\n      alert(\"Ấn vào mở rồi\")\r\n      this.setState({change: !this.state.change});\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div style={{marginTop: 0, padding: 24}}>\r\n          <span\r\n              style={{\r\n                  color: '#fff',\r\n                  backgroundColor: 'blue',\r\n                  padding: 10,\r\n              }}\r\n          >CHANGE TIMEKEEPING</span> \r\n          <TableContainer component={Paper} >\r\n                <Table className={classes.goodTable} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='80px' rowSpan={2}>Day</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" rowSpan={2}>Shift</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" rowSpan={2}>Real Date</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" colSpan={2}>Withdraw</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" colSpan={2}>Change</TableCell>\r\n                        </TableRow>\r\n                        <TableRow>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\r\n                        </TableRow>\r\n                        {\r\n                          this.props.nextWeekTimeKeeping.map((item) => \r\n                          <TableRow\r\n                              style={{\r\n                                position: 'relative',\r\n                              }}\r\n                          >\r\n                              <TableCell className={classes.goodTable_Cell}>{item._id.dateInWeek}</TableCell>\r\n                              <TableCell className={classes.goodTable_Cell}>{this.getShiftNameAndTime(item._id.shiftType._id.shiftID)}</TableCell>\r\n                              <TableCell className={classes.goodTable_Cell}>\r\n                                  {item._id.realDate ? item._id.realDate.indexOf('T') !=-1 ? item._id.realDate.substring(0,item._id.realDate.indexOf('T') ) : item._id.realDate : \"Loading...\"}\r\n                              </TableCell>\r\n                              <TableCell className={classes.goodTable_Cell}>{item._id.employee._id.employeeID}</TableCell>\r\n                              <TableCell className={classes.goodTable_Cell}>{this.getEmployeeNameByID(item._id.employee._id.employeeID)}</TableCell>\r\n                              <TableCell className={classes.goodTable_Cell}>{item.alternativeEmployee._id.employeeID}</TableCell>\r\n                              <TableCell className={classes.goodTable_Cell}>{this.getEmployeeNameByID(item.alternativeEmployee._id.employeeID)}</TableCell>\r\n                              <TableCell width={60} className={classes.goodTable_Cell} >\r\n                                  <div style={{display: 'flex'}}>\r\n                                      <AiOutlineEdit size={20} \r\n                                        onClick={() =>\r\n                                          {\r\n                                            this.props.changeUpdateNextWeekTimeKeepingStatus();\r\n                                            this.props.changeUpdateNextWeekTimeKeepingValue(item);\r\n                                          }\r\n                                        }\r\n                                      />\r\n                                      <AiFillDelete size={20} \r\n                                          onClick={() => \r\n                                              {\r\n                                                  const data = {\r\n                                                      token: localStorage.getItem('token'),   \r\n                                                      offDay: {\r\n                                                          _id: item._id\r\n                                                      }\r\n                                                  }\r\n                                                  console.log(\"data.offDay._id\", data.offDay._id)\r\n                                                  axios.delete(`http://localhost:5000/api/employee/off-day`,{data: data})\r\n                                                    .then(res => {\r\n                                                        alert(\"success\");\r\n                                                    })\r\n                                                    .catch(err => {\r\n                                                        alert(err);\r\n                                                    })\r\n                                                  this.props.deleteNextWeekTimeKeeping(item);\r\n                                              }\r\n                                            // this.props.changeUpdateNextWeekTimeKeepingStatus();\r\n                                            \r\n                                            // this.props.changeUpdateNextWeekTimeKeepingValue(item);\r\n                                          }\r\n                                      />\r\n                                    </div>      \r\n                              </TableCell> \r\n                          </TableRow> \r\n                          )\r\n                        }\r\n                    </TableHead>\r\n                    \r\n                </Table>\r\n            </TableContainer>\r\n              \r\n            <Button \r\n              variant=\"contained\"\r\n              onClick={() => this.props.changeAddNextWeekTimeKeepingStatus()}\r\n            >\r\n              Add</Button>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    nextWeekTimeKeeping: state.nextWeekTimeKeeping,\r\n    listEmployee: state.listEmployee,\r\n    listShift: state.listShift,\r\n    infoUser: state.infoUser,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    changeAddNextWeekTimeKeepingStatus: () => {\r\n      dispatch({\r\n          type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n      });\r\n    },\r\n    changeUpdateNextWeekTimeKeepingStatus: () => {\r\n      dispatch({\r\n          type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n      });\r\n    },\r\n    changeUpdateNextWeekTimeKeepingValue: (data) => {\r\n      dispatch({\r\n        type: \"SET_UPDATE_NEXT_WEEK_TIMEKEEPER_VALUE\",\r\n        data: data\r\n      });\r\n    },\r\n    deleteNextWeekTimeKeeping: (data) => {\r\n      dispatch({\r\n        type: \"DELETE_NEXT_WEEK_TIMEKEEPER\",\r\n        data: data\r\n      });\r\n      console.log(\"data\", data)\r\n    },\r\n    getEmployeeDayOff: (data) => {\r\n      dispatch({\r\n        type: \"SET_NEXT_WEEK_TIMEKEEPER\",\r\n        data: data\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(UnShiftEmployee));","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\FixedCalendar.js",["741"],"import {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { withStyles } from '@material-ui/styles';\r\n// material\r\nimport { Paper, TableContainer, Table, TableHead, TableCell, TableRow, Button } from '@mui/material';\r\nimport FixedTableCell from './FixedCalendarCell';\r\n\r\n// ----------------------------------------------------------------------\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '80px',\r\n    } \r\n})\r\n\r\nclass FixedCalendar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: 'false'\r\n    }\r\n    this.getAllShiftAssign();\r\n  }\r\n  async getAllShiftAssign()\r\n  {\r\n    var result = [];\r\n    const data = {\r\n      token: localStorage.getItem('token'),\r\n      filter: {\r\n          \"_id.storeID\": this.props.infoUser.email,\r\n      }   \r\n    }\r\n    await axios.get(`http://localhost:5000/api/employee/shift-assign`, {\r\n        params: {...data}\r\n    })\r\n        .then(res => {\r\n            result = res.data.data;\r\n            this.props.setShiftAssign(result);\r\n        })\r\n        .catch(err => {\r\n            console.log(err);\r\n            alert(err)\r\n        })\r\n  }\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <div style={{marginTop: 10, padding: 24, maxHeight: 600}}> \r\n          <TableContainer component={Paper}>\r\n              <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                  <TableHead>\r\n                      <TableRow>\r\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Shift</TableCell>\r\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Mon</TableCell>\r\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Tue</TableCell>\r\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Wed</TableCell>\r\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Thu</TableCell>\r\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Fri</TableCell>\r\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Sat</TableCell>\r\n                          <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Sun</TableCell>\r\n                      </TableRow>\r\n                  </TableHead>\r\n                      {\r\n                          this.props.listShift.map((shift) => \r\n                          (\r\n                              <TableRow>\r\n                                  <TableCell className={classes.goodTable_Cell} width={100}>{shift.timeFrom + '-' + shift.timeEnd}</TableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Monday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Tuesday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Wednesday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Thursday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Friday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Saturday'}></FixedTableCell>\r\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Sunday'}></FixedTableCell>\r\n                              </TableRow>\r\n                          ))\r\n                      }\r\n              </Table>\r\n          </TableContainer>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        listShift: state.listShift,\r\n        infoUser: state.infoUser,\r\n        listShiftAssign: state.listShiftAssign,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n      setShiftAssign: (data) => {\r\n          dispatch({\r\n              type: \"SET_SHIFT_ASSIGN\",\r\n              data: data,\r\n          });\r\n      }\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(FixedCalendar));","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateEmployeeModal.js",["742","743","744","745","746","747","748","749","750","751","752","753","754","755","756","757","758"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass UpdateEmployeeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n        }; \r\n        this.loadInitialData();\r\n    }\r\n    \r\n\r\n    cancel = () => {\r\n        \r\n    }\r\n\r\n    findIndexInListEmployee(employeeID) {\r\n        for(var i = 0; i < this.props.listEmployee.employees.length ; i++)\r\n        {\r\n            if(this.props.listEmployee.employees[i]._id.employeeID == employeeID)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    checkConstraint() {\r\n        //Constraint 2: Password không được có dưới 6 ký tự\r\n        var password = document.querySelector('input[name=\"password\"]').value.trim();\r\n        if(password.length == 0)\r\n        {\r\n            alert(\"Password không được rỗng\");\r\n            return false;\r\n        }\r\n        if(password.length < 6)\r\n        {\r\n            alert(\"Password không được có dưới 6 ký tự\");\r\n            return false;\r\n        }\r\n        // Constraint 3: FirstName không được trống\r\n        var firstName =  document.querySelector('input[name=\"firstName\"]').value.trim();\r\n        if(firstName.length == 0)\r\n        {\r\n            alert('Tên riêng không được rỗng');\r\n            return false;\r\n        }\r\n        // Constraint 4: lastName không được trống\r\n        var lastName =  document.querySelector('input[name=\"lastName\"]').value.trim();\r\n        if(lastName.length == 0)\r\n        {\r\n            alert('Họ không được trống');\r\n            return false;\r\n        }\r\n        // Constraint 5: Số ID card không được để trống\r\n        var cardID= document.querySelector('input[name=\"cardID\"]').value.trim();\r\n        if(cardID.length == 0)\r\n        {\r\n            alert(\"Số id card không được để trống\");\r\n            return false;\r\n        }\r\n        // Constrain 6:Số điện thoại không được để trống và phải lớn hơn 6 ký tự\r\n        var phoneNumber= document.querySelector('input[name=\"phoneNumber\"]').value;\r\n        if(phoneNumber.length == 0)\r\n        {\r\n            alert(\"Số điện thoại không được để trống\");\r\n            return false;\r\n        }\r\n        if(phoneNumber.length < 6)\r\n        {\r\n            alert(\"Số điện thoại không được dưới 6 ký tự\");\r\n            return false;\r\n        }\r\n        // Constrain 7:Địa chỉ không được để trống\r\n        var address = document.querySelector('input[name=\"adress\"]').value;\r\n        if(address.length==0)\r\n        {\r\n            alert(\"Địa chỉ không được để trống\");\r\n            return false;\r\n        }\r\n        // Constraint 8: Ngày sinh không được để trống\r\n        var birthDay = document.querySelector('input[name=\"birthDay\"]').value;\r\n        if(birthDay.length == 0)\r\n        {\r\n            alert(\"Ngày sinh không được để trống\");\r\n            return false;\r\n        }\r\n        // Constraint 9: Email không được để trống\r\n        var email = document.querySelector('input[name=\"email\"]').value.trim();\r\n        if(email.length == 0)\r\n        {\r\n            alert(\"Email không dược để trống\");\r\n            return false;\r\n        }\r\n        if(email.indexOf('@')==-1 || email.indexOf('@')==email.length-1)\r\n        {\r\n            alert(\"Email không hợp lệ\");\r\n            return false;\r\n        }\r\n        // Constraint 10: Ngày sinh không thể lớn hơn ngày bất đầu làm\r\n        var startDate = document.querySelector('input[name=\"startDate\"]').value;\r\n        if(!this.isGreater(startDate, birthDay))\r\n        {\r\n            alert(\"Ngày sinh không thể lớn hơn ngày bất đầu làm\");\r\n            return false;\r\n        }\r\n\r\n\r\n        alert(\"Đã check hết các constraint\")\r\n        return true;\r\n    }\r\n\r\n    isGreater(dateString1, dateString2){\r\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\r\n    }\r\n\r\n    async updateEmployee(){\r\n        if(this.checkConstraint() == false) return;\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: this.id,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                managerID: this.props.infoUser.email,\r\n                password: document.querySelector('input[name=\"password\"]').value,\r\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\r\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\r\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\r\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\r\n                email: document.querySelector('input[name=\"email\"]').value,\r\n                address: document.querySelector('input[name=\"adress\"]').value,\r\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\r\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\r\n            }   \r\n        }\r\n        console.log(\"index\", this.findIndexInListEmployee(this.id));\r\n        console.log(data);\r\n        await axios.put(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Update success\");\r\n                \r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        this.props.updateEmployeeRedux(data.employee, this.findIndexInListEmployee(this.id))\r\n        this.props.changeUpdateEmployeeStatus();\r\n    }\r\n\r\n    id = \"\";\r\n    password = \"\";\r\n    firstName = \"\";\r\n    lastName = \"\";\r\n    cardID = \"\";\r\n    phoneNumber = \"\";\r\n    address = \"\";\r\n    email = \"\";\r\n    startDate = \"\";\r\n    birthDay = \"\";\r\n\r\n\r\n    loadInitialData() {\r\n        var currentEmployee = this.props.currentEditEmployee.state;\r\n        console.log(\"currentEmployee\", currentEmployee);\r\n        this.id = currentEmployee._id.employeeID;\r\n        this.password = currentEmployee.password;\r\n        this.firstName = currentEmployee.firstName;\r\n        this.lastName = currentEmployee.lastName;\r\n        this.cardID = currentEmployee.cardID;\r\n        this.phoneNumber = currentEmployee.phoneNumber;\r\n        this.address = currentEmployee.address;\r\n        this.email = currentEmployee.email;\r\n        this.startDate = currentEmployee.startDate;\r\n        if(this.startDate!=null)\r\n        {\r\n            this.startDate = this.startDate.substring(0, this.startDate.indexOf('T'));\r\n        }\r\n        this.birthDay = currentEmployee.dateOfBirth;\r\n        if(this.birthDay!=null)\r\n        {\r\n            this.birthDay = this.birthDay.substring(0, this.birthDay.indexOf('T'));\r\n        }\r\n        this.setState({change: !this.state.change})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"UPDATE EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                               <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            value={this.id}\r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>Password</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"password\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.password}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"firstName\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.firstName}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"lastName\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.lastName}\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"number\" \r\n                                            name=\"cardID\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.cardID}\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"number\" \r\n                                            name=\"phoneNumber\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.phoneNumber}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Adress</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"adress\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.address}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>StartDate</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\"\r\n                                            name=\"startDate\"\r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.startDate}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"email\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.email}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\" \r\n                                            // class=\"input-val\"\r\n                                            name=\"birthDay\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.birthDay}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.updateEmployee()}>\r\n                                            UPDATE\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        currentEditEmployee: state.currentEditEmployee,\r\n        infoUser: state.infoUser,\r\n        listEmployee: state.listEmployee,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        changeUpdateEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        updateEmployeeRedux: (data, index) => {\r\n            dispatch({\r\n                type: \"UPDATE_EMPLOYEE\",\r\n                data: data,\r\n                index: index,\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateEmployeeModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddEmployeeModal.js",["759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nvar listUsers = [];\r\n\r\nclass AddEmployeeModal extends Component {\r\n\r\n    genID = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n        };\r\n        listUsers = [];\r\n        this.getAllEmployee(); \r\n    }\r\n\r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    async getAllEmployee () {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/employee/`, {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                // console.log(err);\r\n                alert(err)\r\n            })\r\n        listUsers = [];\r\n        for(var i = 0; i < result.length; i++)\r\n        {\r\n            listUsers.push(result[i]);\r\n        }\r\n        this.props.getEmployee(listUsers);\r\n        if(listUsers.length > 0)\r\n        {\r\n            this.genID = parseInt(listUsers[listUsers.length - 1]._id.employeeID) + 1;\r\n            console.log(this.genID);\r\n        }\r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    isGreater(dateString1, dateString2){\r\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\r\n    }\r\n\r\n    checkConstraint() {\r\n        // Constraint 1: ID trống hoặc bị trùng\r\n        var id  = document.querySelector('input[name=\"ID\"]').value;\r\n        if( id.length == 0)\r\n        {\r\n            alert(\"Không thể nhập id rỗng\");\r\n            return false;\r\n        }\r\n        for(var i = 0; i < this.props.listEmployee.employees.length ; i++)\r\n        {\r\n            if(this.props.listEmployee.employees[i]._id.employeeID == id)\r\n            {\r\n                alert(\"ID đã bị trùng\");\r\n                return false;\r\n            }\r\n        }\r\n        // Trùng ID sa thải\r\n        for(var i = 0; i < this.props.listSackedEmployee.employees.length ; i++)\r\n        {\r\n            if(this.props.listSackedEmployee.employees[i]._id.employeeID == id)\r\n            {\r\n                alert(\"ID đã bị trùng với nhân viên đã sai thải\");\r\n                return false;\r\n            }\r\n        }\r\n\r\n        //Constraint 2: Password không được có dưới 6 ký tự\r\n        var password = document.querySelector('input[name=\"password\"]').value.trim();\r\n        if(password.length == 0)\r\n        {\r\n            alert(\"Password không được rỗng\");\r\n            return false;\r\n        }\r\n        if(password.length < 6)\r\n        {\r\n            alert(\"Password không được có dưới 6 ký tự\");\r\n            return false;\r\n        }\r\n        // Constraint 3: FirstName không được trống\r\n        var firstName =  document.querySelector('input[name=\"firstName\"]').value.trim();\r\n        if(firstName.length == 0)\r\n        {\r\n            alert('Tên riêng không được rỗng');\r\n            return false;\r\n        }\r\n        // Constraint 4: lastName không được trống\r\n        var lastName =  document.querySelector('input[name=\"lastName\"]').value.trim();\r\n        if(lastName.length == 0)\r\n        {\r\n            alert('Họ không được trống');\r\n            return false;\r\n        }\r\n        // Constraint 5: Số ID card không được để trống\r\n        var cardID= document.querySelector('input[name=\"cardID\"]').value.trim();\r\n        if(cardID.length == 0)\r\n        {\r\n            alert(\"Số id card không được để trống\");\r\n            return false;\r\n        }\r\n        // Constrain 6:Số điện thoại không được để trống và phải lớn hơn 6 ký tự\r\n        var phoneNumber= document.querySelector('input[name=\"phoneNumber\"]').value;\r\n        if(phoneNumber.length == 0)\r\n        {\r\n            alert(\"Số điện thoại không được để trống\");\r\n            return false;\r\n        }\r\n        if(phoneNumber.length < 6)\r\n        {\r\n            alert(\"Số điện thoại không được dưới 6 ký tự\");\r\n            return false;\r\n        }\r\n        // Constrain 7:Địa chỉ không được để trống\r\n        var address = document.querySelector('input[name=\"adress\"]').value;\r\n        if(address.length==0)\r\n        {\r\n            alert(\"Địa chỉ không được để trống\");\r\n            return false;\r\n        }\r\n        // Constraint 8: Ngày sinh không được để trống\r\n        var birthDay = document.querySelector('input[name=\"birthDay\"]').value;\r\n        if(birthDay.length == 0)\r\n        {\r\n            alert(\"Ngày sinh không được để trống\");\r\n            return false;\r\n        }\r\n        // Constraint 9: Email không được để trống\r\n        var email = document.querySelector('input[name=\"email\"]').value.trim();\r\n        if(email.length == 0)\r\n        {\r\n            alert(\"Email không dược để trống\");\r\n            return false;\r\n        }\r\n        if(email.indexOf('@')==-1 || email.indexOf('@')==email.length-1)\r\n        {\r\n            alert(\"Email không hợp lệ\");\r\n            return false;\r\n        }\r\n        // Constraint 10: Ngày sinh không thể lớn hơn ngày bất đầu làm\r\n        var startDate = document.querySelector('input[name=\"startDate\"]').value;\r\n        if(!this.isGreater(startDate, birthDay))\r\n        {\r\n            alert(\"Ngày sinh không thể lớn hơn ngày bất đầu làm\");\r\n            return false;\r\n        }\r\n\r\n\r\n        alert(\"Đã check hết các constraint\")\r\n        return true;\r\n    }\r\n    // Thêm nhân viên\r\n    async addEmployeeToDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: document.querySelector('input[name=\"ID\"]').value,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                managerID: this.props.infoUser.email,\r\n                password: document.querySelector('input[name=\"password\"]').value,\r\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\r\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\r\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\r\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\r\n                email: document.querySelector('input[name=\"email\"]').value,\r\n                address: document.querySelector('input[name=\"adress\"]').value,\r\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\r\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\r\n                // endDate: \"2021-11-31T00:00:00.000Z\",\r\n            }   \r\n        }\r\n        console.log(data);\r\n        await axios.post(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu thành công\")\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                console.log(err);\r\n            })\r\n        // Thêm vào redux\r\n        this.props.addEmployee(data.employee);\r\n        \r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        if(this.checkConstraint()==false) return;\r\n        this.addEmployeeToDatabase();\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"ADD EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        {/* <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid> */}\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            name='ID'\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"  \r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>Password</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"password\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"firstName\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"lastName\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"number\" \r\n                                            name=\"cardID\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"number\" \r\n                                            name=\"phoneNumber\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Adress</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"adress\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>StartDate</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\"\r\n                                            name=\"startDate\"\r\n                                            defaultValue={this.getCurrentDateTime()}\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            name=\"email\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\" \r\n                                            // class=\"input-val\"\r\n                                            name=\"birthDay\"\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.addEmployee()}>\r\n                                            Add\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listEmployee: state.listEmployee,\r\n        listSackedEmployee: state.listSackedEmployee,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        addEmployee: (data) => {\r\n            dispatch({\r\n                type: \"ADD_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEmployeeModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\PayMoneyModal.js",["781","782","783","784","785","786","787","788","789","790","791","792","793","794","795","796","797","798","799","800","801"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Table, Grid, TextField, \r\n    TableCell, TableContainer, Button, InputLabel,\r\n    Paper, TableRow, TableHead } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    } \r\n})\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\n\r\nclass PayEmployeeModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            goodID : \"\",\r\n            change: false,\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n        }; \r\n        console.log(\"listTimeKeeper\", this.props.listTimeKeeper);\r\n    }\r\n\r\n    getShiftInforByID(shiftID)\r\n    {\r\n        var listShift = this.props.listShift;\r\n        for(var i = 0 ; i < listShift.length; i++)\r\n        {\r\n            if(listShift[i]._id.shiftID == shiftID)\r\n            {\r\n                return listShift[i].name + ' (' + listShift[i].timeFrom + '-' + listShift[i].timeEnd + ')';\r\n            }\r\n        }\r\n        return \"Can't get shift\";\r\n    }\r\n\r\n    getEmployeeFullNameByID(employeeID)\r\n    {\r\n            for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n            {\r\n                var currentEmployee = this.props.listEmployee.employees[i];\r\n                if(currentEmployee._id.employeeID==employeeID)\r\n                {\r\n                        return currentEmployee.lastName + ' ' + currentEmployee.firstName;\r\n                }\r\n            }\r\n        return \"Can't get name\";\r\n    }\r\n\r\n    payEmployee(){\r\n        alert(\"Confirm password\");\r\n        // viết api để trả lương ở đây\r\n        this.props.changePayEmployeeStatus();\r\n    }\r\n    \r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"PAY EMPLOYEE\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            {/* <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input> */}\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                     <TableContainer component={Paper}>\r\n                                            <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                                                <TableHead>\r\n                                                    <TableRow>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='180px'>Day</TableCell>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='80px'>Date Of Week</TableCell>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\" >Shift</TableCell>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\r\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Salary</TableCell>\r\n                                                        {/* <TableCell className={classes.goodTable_Cell_Header} align=\"center\"></TableCell> */}\r\n                                                    </TableRow>\r\n                                                    {\r\n                                                        this.props.listTimeKeeper.map((timeKeeper)=>\r\n                                                            (\r\n                                                            <TableRow>\r\n                                                                <TableCell className={classes.goodTable_Cell}>{timeKeeper.realDate}</TableCell>\r\n                                                                <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.dateInWeek}</TableCell>\r\n                                                                <TableCell className={classes.goodTable_Cell}>{this.getShiftInforByID(timeKeeper._id.shiftType._id.shiftID)}</TableCell>\r\n                                                                <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.employee._id.employeeID}</TableCell>\r\n                                                                <TableCell className={classes.goodTable_Cell}>\r\n                                                                    {this.getEmployeeFullNameByID(timeKeeper._id.employee._id.employeeID)}\r\n                                                                </TableCell>\r\n                                                                <TableCell className={classes.goodTable_Cell}>\r\n                                                                    Salary\r\n                                                                </TableCell>\r\n                                                            </TableRow>\r\n                                                            )\r\n                                                        )\r\n                                                    }\r\n                                                </TableHead>\r\n                                            </Table>\r\n                                    </TableContainer>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.payEmployee()}>\r\n                                            Pay employee\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        listTimeKeeper: state.listTimeKeeping,\r\n        listShift: state.listShift,\r\n        listEmployee: state.listEmployee,\r\n        infoUser: state.infoUser\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changePayEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(PayEmployeeModal));\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\fakeData.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeTableHeader.js",["802","803","804","805","806","807","808","809"],"import PropTypes from 'prop-types';\r\n// material\r\nimport { visuallyHidden } from '@mui/utils';\r\nimport { Box, Checkbox, TableRow, TableCell, TableHead, TableSortLabel } from '@mui/material';\r\nimport { withStyles } from '@material-ui/styles';\r\n// ----------------------------------------------------------------------\r\n\r\nEmployeeTableHeader.propTypes = {\r\n  order: PropTypes.oneOf(['asc', 'desc']),\r\n  orderBy: PropTypes.string,\r\n  rowCount: PropTypes.number,\r\n  headLabel: PropTypes.array,\r\n  numSelected: PropTypes.number,\r\n  onRequestSort: PropTypes.func,\r\n  onSelectAllClick: PropTypes.func\r\n};\r\nconst styles = theme =>  ({\r\n  goodTable: {                                     \r\n      borderWidth: '1px',\r\n      borderColor: '#ccc',\r\n      borderStyle: 'solid'\r\n  },\r\n  goodTable_Cell_Header: {                                     \r\n      borderWidth: '1px',\r\n      borderColor: '#ccc',\r\n      borderStyle: 'solid',\r\n      height: '40px',\r\n  },\r\n  goodTable_Cell: {                                     \r\n      borderWidth: '1px',\r\n      borderColor: '#ccc',\r\n      borderStyle: 'solid',\r\n      height: '80px',\r\n  } \r\n})\r\n\r\nfunction EmployeeTableHeader( props){\r\n  const {\r\n    order,\r\n    orderBy,\r\n    rowCount,\r\n    headLabel,\r\n    numSelected,\r\n    onRequestSort,\r\n    onSelectAllClick} = props;\r\n  // const createSortHandler = (property) => (event) => {\r\n  //   onRequestSort(event, property);\r\n  // };\r\n  const {classes} =  props;\r\n  // console.log(\"headLabel\", headLabel);\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\" className = {classes.goodTable_Cell_Header}>\r\n          <Checkbox\r\n            // indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            // checked={rowCount > 0 && numSelected === rowCount}\r\n            // onChange={onSelectAllClick}\r\n          />\r\n        </TableCell>\r\n        {headLabel.map((headCell) => (\r\n          <TableCell\r\n            className = {classes.goodTable_Cell_Header}\r\n            // key={headCell.id}\r\n            // align={headCell.alignRight ? 'right' : 'left'}\r\n            // sortDirection={orderBy === headCell.id ? order : false}\r\n          >\r\n            <TableSortLabel\r\n              // hideSortIcon\r\n              // active={orderBy === headCell.id}\r\n              // direction={orderBy === headCell.id ? order : 'asc'}\r\n              // onClick={createSortHandler(headCell.id)}\r\n              style={{\r\n                color: '#333'\r\n              }}\r\n            >\r\n              {headCell.label}\r\n              {/* {orderBy === headCell.id ? (\r\n                <Box sx={{ ...visuallyHidden }}>\r\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\r\n                </Box>\r\n              ) : null} */}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nexport default withStyles( styles )( EmployeeTableHeader );","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\BaseOptionChart.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\FixedCalendarCell.js",["810","811","812","813","814","815","816","817"],"import {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { withStyles } from '@material-ui/styles';\r\n// material\r\nimport { TableCell, List, ListItem, ListItemButton, ListItemText} from '@mui/material';\r\nimport '../../css/EmployeeManager.css';\r\n\r\n//icon\r\nimport { IoIosAdd,} from \"react-icons/io\";\r\nimport {  AiFillCloseCircle} from \"react-icons/ai\";\r\n// ----------------------------------------------------------------------\r\nconst styles = theme =>  ({\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '80px',\r\n    } \r\n})\r\n\r\nclass FixedCalendarCell extends Component {\r\n  isOpen=false;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: false\r\n    }\r\n    \r\n  }\r\n\r\n \r\n\r\n  handleChange() {\r\n    this.isOpen = !this.isOpen;\r\n    this.setState({change : !this.state.change})\r\n  }\r\n\r\n  getEmployeeNameByID(employeeID)\r\n  {\r\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n      {\r\n          var currentEmployee = this.props.listEmployee.employees[i];\r\n          if(currentEmployee._id.employeeID==employeeID)\r\n          {\r\n            return currentEmployee.firstName;\r\n          }\r\n      }\r\n      return \"Can't get name\";\r\n  }\r\n\r\n  getCurrentDateTime()\r\n  {\r\n      var currentDate = new Date();\r\n      var day = (currentDate.toString().split(' '))[2];\r\n      if(day.length < 2)\r\n      {\r\n          day = '0' + day;\r\n      }\r\n      var month = (new Date().getMonth() + 1).toString();\r\n      if(month.length<2)\r\n      {\r\n          month = '0' + month;\r\n      }\r\n      return new Date().getFullYear() + '-' + month + '-' + day;\r\n  }\r\n\r\n  async addThisShiftAssign(employeeID)\r\n  {\r\n      const data = {\r\n          token: localStorage.getItem('token'),\r\n          shiftAssign: {\r\n            _id: {\r\n              dateInWeek: this.props.dayIndex,\r\n              storeID: this.props.infoUser.email,\r\n              shiftType: {\r\n                  _id: {\r\n                      shiftID: this.props.shiftID,\r\n                      storeID: this.props.infoUser.email,\r\n                  },\r\n              },\r\n              employee: {\r\n                  _id: {\r\n                      employeeID: employeeID,\r\n                      storeID: this.props.infoUser.email,\r\n                  },\r\n              },\r\n            },\r\n          }\r\n          \r\n      }\r\n      await axios.post(`http://localhost:5000/api/employee/shift-assign`, data)\r\n        .then(res => {\r\n            alert(\"Lưu thành công\")\r\n        })\r\n        .catch(err => {\r\n            alert(err);\r\n            console.log(err);\r\n        })\r\n      this.handleChange();\r\n      this.props.AddShiftAssign(data.shiftAssign);\r\n  }\r\n\r\n  removeShift(employeeID)\r\n  {\r\n    const data1 = {\r\n        token: localStorage.getItem('token'),\r\n        shiftAssign: {\r\n          _id: {\r\n            dateInWeek: this.props.dayIndex,\r\n            storeID: this.props.infoUser.email,\r\n            shiftType: {\r\n                _id: {\r\n                    shiftID: this.props.shiftID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n            },\r\n            employee: {\r\n                _id: {\r\n                    employeeID: employeeID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n            },\r\n          }\r\n      },\r\n    }\r\n      axios.delete(`http://localhost:5000/api/employee/shift-assign`,{data: data1})\r\n      .then(res => {\r\n          alert(\"success\");\r\n      })\r\n      .catch(err => {\r\n          alert(err);\r\n      })\r\n      const data = {\r\n          _id: {\r\n            dateInWeek: this.props.dayIndex,\r\n            storeID: this.props.infoUser.email,\r\n            shiftType: {\r\n                _id: {\r\n                    shiftID: this.props.shiftID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n            },\r\n            employee: {\r\n                _id: {\r\n                    employeeID: employeeID,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n            },\r\n        },\r\n      }\r\n      \r\n      console.log(\"data\", data);\r\n      this.props.RemoveShiftAssign(data);\r\n      \r\n  }\r\n\r\n  findShiftInShiftAssign()\r\n  {\r\n      var listShiftAssign = this.props.listShiftAssign;\r\n      for(var i = 0 ; i < listShiftAssign.length ; i++)\r\n      {\r\n          if(this.props.shiftID == listShiftAssign[i]._id.shiftType._id.shiftID && \r\n            this.props.dayIndex == listShiftAssign[i]._id.dateInWeek)\r\n            { \r\n                return true;\r\n            }\r\n      }\r\n      return false;\r\n  }\r\n\r\n  findEmployeeInShift(employeeID)\r\n  {\r\n      var listShiftAssign = this.props.listShiftAssign;\r\n      for(var i = 0 ; i < listShiftAssign.length; i++)\r\n      {\r\n          if(this.props.shiftID == listShiftAssign[i]._id.shiftType._id.shiftID \r\n            && this.props.dayIndex == listShiftAssign[i]._id.dateInWeek\r\n            && listShiftAssign[i]._id.employee._id.employeeID == employeeID)\r\n          return true;\r\n      }\r\n      return false;\r\n  }\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n        <TableCell \r\n            className={classes.goodTable_Cell} \r\n            style={{\r\n                position: 'relative',\r\n                backgroundColor: !this.findShiftInShiftAssign() ?'#ff6057': '#b3cde0',\r\n                height: '80px',\r\n            }}\r\n            // ref={this.myRef}    \r\n        >\r\n            <div\r\n                style={{\r\n                    position: 'absolute',\r\n                    right: 0,\r\n                    top: 0,\r\n                    borderRadius: '50%',\r\n                    backgroundColor: '#fff',\r\n                    width: 22,\r\n                    height: 22,\r\n                    textAlign: 'center'\r\n                }}\r\n                className='add-employee-to-shift-button'\r\n            >\r\n                <IoIosAdd \r\n                    size={30}\r\n                    style={{\r\n                        position: 'absolute',\r\n                        right: -4,\r\n                        top: -3,\r\n                    }}\r\n                    color='#0096FF'\r\n                    onClick={() => this.handleChange()}\r\n                >    \r\n                </IoIosAdd>\r\n                \r\n            </div>\r\n            {\r\n              this.props.listShiftAssign.map((item) => \r\n                (\r\n                  ( this.props.shiftID == item._id.shiftType._id.shiftID && this.props.dayIndex == item._id.dateInWeek )\r\n                  ? <div style={{\r\n                            backgroundColor: \"#fff\", \r\n                            padding: 10, \r\n                            maxWidth: 100,\r\n                            position: 'relative',\r\n                            marginBottom: 4\r\n                            }}\r\n                    >\r\n                      <span>\r\n                          {item._id.employee._id.employeeID + ' - ' \r\n                          + this.getEmployeeNameByID(item._id.employee._id.employeeID)}\r\n                      </span>\r\n                      <AiFillCloseCircle\r\n                          style={{\r\n                            color: 'red',\r\n                            position: 'absolute',\r\n                            right: 0, \r\n                            top: 0,\r\n                          }} \r\n                          size={20}\r\n                          onClick={() => this.removeShift(item._id.employee._id.employeeID)}\r\n                      ></AiFillCloseCircle>\r\n                    </div>\r\n                  : null\r\n                )\r\n              )\r\n            }\r\n            {\r\n              this.isOpen \r\n              ? \r\n              // Đây là cái bảng chọn nhân viên\r\n              <List \r\n                style={{\r\n                  position: 'absolute',\r\n                  right: 0,\r\n                  top: 20,\r\n                  zIndex: 10,\r\n                  maxHeight: 100,\r\n                  overflowY: 'auto',\r\n                  width: 140,\r\n                  backgroundColor: '#fff',\r\n                }}\r\n              >\r\n                {\r\n                  this.props.listEmployee.employees.map((item) =>\r\n                    this.findEmployeeInShift(item._id.employeeID) ? null :\r\n                    <ListItem disablePadding height={30} onClick={() => this.addThisShiftAssign(item._id.employeeID)}>\r\n                        <ListItemButton>\r\n                            <ListItemText>\r\n                                {item._id.employeeID + ' - ' + item.firstName}\r\n                            </ListItemText>\r\n                        </ListItemButton>\r\n                    </ListItem>\r\n                  )\r\n                }\r\n              </List>\r\n              : null\r\n            }\r\n\r\n        </TableCell>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n      listEmployee: state.listEmployee,\r\n      listShiftAssign: state.listShiftAssign,\r\n      infoUser: state.infoUser,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    AddShiftAssign: (data) => {\r\n      dispatch({\r\n          type: \"ADD_NEW_SHIFT_ASSIGN\",\r\n          data: data,\r\n      });\r\n    },\r\n    RemoveShiftAssign: (data) => {\r\n      dispatch({\r\n          type: \"DELETE_SHIFT_ASSIGN\",\r\n          data: data,\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(FixedCalendarCell));","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeMoreMenu.js",["818"],"import { Icon } from '@iconify/react';\r\nimport editFill from '@iconify/icons-eva/edit-fill';\r\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\r\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\r\nimport {GiPayMoney} from \"react-icons/gi\";\r\nimport {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\n// material\r\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nclass EmployeeMoreMenu extends Component {\r\n  currentEmployee = {};\r\n\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: 'false'\r\n    }\r\n    this.myRef = React.createRef();\r\n  }\r\n  setIsOpen(val) {\r\n    this.isOpen = val;\r\n    this.setState({change: val});\r\n    \r\n  }\r\n\r\n  edit() {\r\n    this.getEmployeeByID(this.props.data);\r\n    // console.log(\"send nude\", this.currentEmployee);\r\n    this.props.setUpdateEmployee(this.currentEmployee);\r\n    this.props.changeUpdateEmployeeStatus();\r\n  }\r\n\r\n  delete() {\r\n    const data = {\r\n      token: localStorage.getItem('token'),\r\n      employee:\r\n      [\r\n          {\r\n              employeeID: this.props.data,\r\n              storeID: this.props.infoUser.email, \r\n          },\r\n      ] \r\n    }\r\n    console.log(data);\r\n\r\n    axios.delete(`http://localhost:5000/api/employee`,{data: data})\r\n        .then(res => {\r\n            alert(\"delete employee(s) success\");\r\n        })\r\n        .catch(err => {\r\n            alert(err);\r\n        })\r\n    \r\n    // Delete redux\r\n    this.props.deleteEmployeeRedux(this.props.data);\r\n    //Move to sacked\r\n    this.props.deleteEmployeeToSackRedux(this.currentEmployee)\r\n  }\r\n\r\n  getEmployeeByID(employeeID) {\r\n    var listEmployee = this.props.listEmployee.employees;\r\n    console.log(listEmployee);\r\n    for(var i = 0; i < listEmployee.length ; i++)\r\n    {\r\n      if(employeeID == listEmployee[i]._id.employeeID)\r\n      {\r\n        this.currentEmployee = listEmployee[i];\r\n        return listEmployee[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  isOpen=false;\r\n  render() {\r\n    return (\r\n      <>\r\n        <IconButton ref={this.myRef} onClick={() => this.setIsOpen(true)}>\r\n          <Icon icon={moreVerticalFill} width={20} height={20} />\r\n        </IconButton>\r\n  \r\n        <Menu\r\n          style={{\r\n            position: 'absolute',\r\n            bottom: 0,\r\n            left: 0,\r\n          }}\r\n          open={this.isOpen}\r\n          onClose={() => this.setIsOpen(false)}\r\n          anchorEl={this.myRef.current}\r\n          // PaperProps={{\r\n          //   sx: { width: 200, maxWidth: '100%' }\r\n          // }}\r\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n          transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n        >\r\n          <MenuItem sx={{ color: 'text.secondary' }}\r\n            onClick={() => this.delete()}\r\n          >\r\n            <ListItemIcon>\r\n              <Icon icon={trash2Outline} width={24} height={24} />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n  \r\n          <MenuItem sx={{ color: 'text.secondary' }}\r\n            onClick={() => this.edit()}\r\n          >\r\n            <ListItemIcon>\r\n              <Icon icon={editFill} width={24} height={24} />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Edit\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n          <MenuItem sx={{ color: 'text.secondary' }}\r\n            onClick={()=> this.props.changePayEmployeeStatus()}\r\n          >\r\n            <ListItemIcon>\r\n              <GiPayMoney size={24}/> \r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Pay money\" primaryTypographyProps={{ variant: 'body2' }} />\r\n          </MenuItem>\r\n        </Menu>\r\n      </>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n    updateEmployeeStatus: state.updateEmpoyeeStatus,\r\n    payEmployeeStatus: state.payEmployeeStatus,\r\n    listEmployee: state.listEmployee,\r\n    infoUser: state.infoUser,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n      changeUpdateEmployeeStatus: () => {\r\n          dispatch({\r\n              type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\r\n          });\r\n      },\r\n      changePayEmployeeStatus: () => {\r\n        dispatch({\r\n            type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\r\n        });\r\n      },\r\n      setUpdateEmployee: (currentEmployee) => {\r\n        dispatch({\r\n          type: \"SET_UPDATE_EMPLOYEE\",\r\n          data: currentEmployee\r\n        });\r\n      }, \r\n      deleteEmployeeRedux: (id) => {\r\n        dispatch({\r\n          type: \"DELETE_EMPLOYEE\",\r\n          id: id\r\n        });\r\n      },\r\n      deleteEmployeeToSackRedux: (data) => {\r\n        dispatch({\r\n          type: \"DELETE_EMPLOYEE_SACKED\",\r\n          data: data\r\n        });\r\n      }\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\SackedEmployeeMenu.js",["819","820"],"import { Icon } from '@iconify/react';\r\nimport editFill from '@iconify/icons-eva/edit-fill';\r\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\r\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\r\nimport {GiPayMoney} from \"react-icons/gi\";\r\nimport {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\n// material\r\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nclass EmployeeMoreMenu extends Component {\r\n  currentEmployee = {};\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n        change: 'false'\r\n        }\r\n        this.myRef = React.createRef();\r\n    }\r\n    setIsOpen(val) {\r\n        this.isOpen = val;\r\n        this.setState({change: val});\r\n        \r\n    }\r\n\r\n    getSackedEmployeeByID(employeeID) {\r\n        var listEmployee = this.props.listSackedEmployee.employees;\r\n        console.log(listEmployee);\r\n        for(var i = 0; i < listEmployee.length ; i++)\r\n        {\r\n          if(employeeID == listEmployee[i]._id.employeeID)\r\n          {\r\n            return listEmployee[i];\r\n          }\r\n        }\r\n    }\r\n\r\n    backToWork() {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee:\r\n            [\r\n                {\r\n                    employeeID: this.props.data,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n            ]\r\n            \r\n        }\r\n        axios.patch(`http://localhost:5000/api/employee/delete`, data)\r\n            .then(res => {\r\n                alert(\"back to work success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n\r\n        // Xoá khỏi redux sacked\r\n        this.props.backToWorkSackedEmployee(this.props.data);\r\n\r\n        // Thêm vào redux ko sacked\r\n        this.props.addEmployee(this.getSackedEmployeeByID(this.props.data));\r\n    }\r\n\r\n    delete() {\r\n        const data = {\r\n        token: localStorage.getItem('token'),\r\n        employee:\r\n        [\r\n            {\r\n                employeeID: this.props.data,\r\n                storeID: this.props.infoUser.email, \r\n            },\r\n        ] \r\n        }\r\n        console.log(data);\r\n\r\n        axios.delete(`http://localhost:5000/api/employee/delete`,{data: data})\r\n            .then(res => {\r\n                alert(\"delete permantly employee(s) success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n    }\r\n\r\n    isOpen=false;\r\n    render() {\r\n        return (\r\n        <>\r\n            <IconButton ref={this.myRef} onClick={() => this.setIsOpen(true)}>\r\n            <Icon icon={moreVerticalFill} width={20} height={20} />\r\n            </IconButton>\r\n    \r\n            <Menu\r\n            style={{\r\n                position: 'absolute',\r\n                bottom: 0,\r\n                left: 0,\r\n            }}\r\n            open={this.isOpen}\r\n            onClose={() => this.setIsOpen(false)}\r\n            anchorEl={this.myRef.current}\r\n            // PaperProps={{\r\n            //   sx: { width: 200, maxWidth: '100%' }\r\n            // }}\r\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\r\n            >\r\n            <MenuItem sx={{ color: 'text.secondary' }}\r\n                onClick={() => this.delete()}\r\n            >\r\n                <ListItemIcon>\r\n                <Icon icon={trash2Outline} width={24} height={24} />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\r\n            </MenuItem>\r\n    \r\n            <MenuItem sx={{ color: 'text.secondary' }}\r\n                onClick={() => this.backToWork()}\r\n            >\r\n                <ListItemIcon>\r\n                <Icon icon={editFill} width={24} height={24} />\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Return\" primaryTypographyProps={{ variant: 'body2' }} />\r\n            </MenuItem>\r\n            </Menu>\r\n        </>\r\n        );\r\n    }\r\n    \r\n    }\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\r\n        payEmployeeStatus: state.payEmployeeStatus,\r\n        listEmployee: state.listEmployee,\r\n        infoUser: state.infoUser,\r\n        listSackedEmployee: state.listSackedEmployee,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        backToWorkSackedEmployee: (id) => {\r\n            dispatch({\r\n                type: \"RETURN_TO_WORK\",\r\n                id: id\r\n            });\r\n        },\r\n        addEmployee: (data) => {\r\n            dispatch({\r\n                type: \"ADD_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\EmployeeToolbar.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\SearchNotFound.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Scrollbar.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Label.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\Page.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\SearchBar.js",["821","822","823","824"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { MdClear} from \"react-icons/md\";\r\nimport { AiOutlineSearch } from \"react-icons/ai\";\r\nimport { withStyles } from '@material-ui/styles';\r\nimport classNames from \"classnames\";\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n    // height: theme.spacing(6),\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    height: \"80px\",\r\n  },\r\n//   iconButton: {\r\n//     color: theme.palette.action.active,\r\n//     transform: \"scale(1, 1)\",\r\n//     transition: theme.transitions.create([\"transform\", \"color\"], {\r\n//       duration: theme.transitions.duration.shorter,\r\n//       easing: theme.transitions.easing.easeInOut,\r\n//     }),\r\n//   },\r\n  iconButtonHidden: {\r\n    transform: \"scale(0, 0)\",\r\n    \"& > $icon\": {\r\n      opacity: 0,\r\n    },\r\n  },\r\n  searchIconButton: {\r\n    // marginRight: theme.spacing(-6),\r\n  },\r\n//   icon: {\r\n//     transition: theme.transitions.create([\"opacity\"], {\r\n//       duration: theme.transitions.duration.shorter,\r\n//       easing: theme.transitions.easing.easeInOut,\r\n//     }),\r\n//   },\r\n  input: {\r\n    width: \"100%\",\r\n  },\r\n  searchContainer: {\r\n    margin: \"4px 8px 4px 8px\",\r\n    height: \"40px\",\r\n    // width: `calc(100% - ${theme.spacing(6 + 4)}px)`, // 6 button + 4 margin\r\n  },\r\n});\r\nconst SearchBar = React.forwardRef(\r\n  (\r\n    {\r\n      cancelOnEscape,\r\n      className,\r\n      classes,\r\n      closeIcon,\r\n      disabled,\r\n      onCancelSearch,\r\n      onRequestSearch,\r\n      searchIcon,\r\n      style,\r\n      ...inputProps\r\n    },\r\n    ref\r\n  ) => {\r\n    const inputRef = React.useRef();\r\n    const [value, setValue] = React.useState(inputProps.value);\r\n\r\n    React.useEffect(() => {\r\n      setValue(inputProps.value);\r\n    }, [inputProps.value]);\r\n\r\n    const handleFocus = React.useCallback(\r\n      (e) => {\r\n        if (inputProps.onFocus) {\r\n          inputProps.onFocus(e);\r\n        }\r\n      },\r\n      [inputProps.onFocus]\r\n    );\r\n\r\n    const handleBlur = React.useCallback(\r\n      (e) => {\r\n        setValue((v) => v.trim());\r\n        if (inputProps.onBlur) {\r\n          inputProps.onBlur(e);\r\n        }\r\n      },\r\n      [inputProps.onBlur]\r\n    );\r\n\r\n    const handleInput = React.useCallback(\r\n      (e) => {\r\n        setValue(e.target.value);\r\n        if (inputProps.onChange) {\r\n          inputProps.onChange(e.target.value);\r\n        }\r\n      },\r\n      [inputProps.onChange]\r\n    );\r\n\r\n    const handleCancel = React.useCallback(() => {\r\n      setValue(\"\");\r\n      if (onCancelSearch) {\r\n        onCancelSearch();\r\n      }\r\n    }, [onCancelSearch]);\r\n\r\n    const handleRequestSearch = React.useCallback(() => {\r\n      if (onRequestSearch) {\r\n        onRequestSearch(value);\r\n      }\r\n    }, [onRequestSearch, value]);\r\n\r\n    const handleKeyUp = React.useCallback(\r\n      (e) => {\r\n        if (e.charCode === 13 || e.key === \"Enter\") {\r\n          handleRequestSearch();\r\n        } else if (\r\n          cancelOnEscape &&\r\n          (e.charCode === 27 || e.key === \"Escape\")\r\n        ) {\r\n          handleCancel();\r\n        }\r\n        if (inputProps.onKeyUp) {\r\n          inputProps.onKeyUp(e);\r\n        }\r\n      },\r\n      [handleRequestSearch, cancelOnEscape, handleCancel, inputProps.onKeyUp]\r\n    );\r\n\r\n    React.useImperativeHandle(ref, () => ({\r\n      focus: () => {\r\n        inputRef.current.focus();\r\n      },\r\n      blur: () => {\r\n        inputRef.current.blur();\r\n      },\r\n    }));\r\n\r\n    return (\r\n      <Paper className={classNames(classes.root, className)} style={{height: '40px'}}>\r\n        <div className={classes.searchContainer}>\r\n          <Input\r\n            {...inputProps}\r\n            inputRef={inputRef}\r\n            onBlur={handleBlur}\r\n            value={value}\r\n            onChange={handleInput}\r\n            onKeyUp={handleKeyUp}\r\n            onFocus={handleFocus}\r\n            fullWidth\r\n            className={classes.input}\r\n            disableUnderline\r\n            disabled={disabled}\r\n          />\r\n        </div>\r\n        <IconButton\r\n          onClick={handleRequestSearch}\r\n          className={classNames(classes.iconButton, classes.searchIconButton, {\r\n            [classes.iconButtonHidden]: value !== \"\",\r\n          })}\r\n          disabled={disabled}\r\n        >\r\n          {React.cloneElement(searchIcon, {\r\n            classes: { root: classes.icon },\r\n          })}\r\n        </IconButton>\r\n        <IconButton\r\n          onClick={handleCancel}\r\n          className={classNames(classes.iconButton, {\r\n            [classes.iconButtonHidden]: value === \"\",\r\n          })}\r\n          disabled={disabled}\r\n        >\r\n          {React.cloneElement(closeIcon, {\r\n            classes: { root: classes.icon },\r\n          })}\r\n        </IconButton>\r\n      </Paper>\r\n    );\r\n  }\r\n);\r\n\r\nSearchBar.defaultProps = {\r\n  className: \"\",\r\n  closeIcon: <MdClear/>,\r\n  disabled: false,\r\n  placeholder: \"Search\",\r\n  searchIcon: <AiOutlineSearch />,\r\n  style: null,\r\n  value: \"\",\r\n};\r\n\r\nSearchBar.propTypes = {\r\n  cancelOnEscape: PropTypes.bool,\r\n  classes: PropTypes.object.isRequired,\r\n  className: PropTypes.string,\r\n  closeIcon: PropTypes.node,\r\n  disabled: PropTypes.bool,\r\n  onCancelSearch: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n  onRequestSearch: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  searchIcon: PropTypes.node,\r\n  style: PropTypes.object,\r\n  value: PropTypes.string,\r\n};\r\n\r\nexport default withStyles(styles)(SearchBar);","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\UpdateGoodModal.js",["825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841","842","843","844","845","846","847","848","849","850","851"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\r\nimport Stack from '@mui/material/Stack';\r\nimport { GiCancel } from 'react-icons/gi'\r\nimport Select from '@mui/material/Select';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport GoodImage from './goodExample.jpg';\r\nimport AddTypeModal from './AddTypeModal';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\nimport DateTimePicker from '@mui/lab/DateTimePicker';\r\nimport { AiFillPlusCircle} from \"react-icons/ai\";\r\nimport CancelIcon from '@mui/icons-material/Cancel';\r\nimport ConfirmModal from './ConfirmModal';\r\n\r\nvar productTypes =[];\r\nvar listTypeInfor=[];\r\n// typeSet chứa id của các cái type\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nclass UpdateGoodModal extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            goodID : \"\",\r\n            change: false,\r\n            imageSelect: \"null\",\r\n            type:'none',\r\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\r\n        }; \r\n        typeSet = [];\r\n        this.loadInitialData();\r\n        this.loadAllType();\r\n        this.loadCurrentTypes();\r\n        \r\n    }\r\n    imgUrl='none';\r\n    goodID='';\r\n    importDate='';\r\n    name='';\r\n    imgUrl='';\r\n    quantity = 0;\r\n    remain = 0;\r\n    unit = \"\";\r\n    importPrice = \"\";\r\n    sellPrice = \"\";\r\n    expire =\"\";\r\n    finishUpImage = true;\r\n\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        listTypeInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n        productTypes=[];\r\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\r\n        {\r\n            productTypes.push(listTypeInfor[i].name);\r\n        }\r\n        this.setState({change: true});\r\n    }\r\n\r\n    async loadCurrentTypes() {\r\n        // Get hết các cái join của sản phẩm\r\n        var allJoinMatch = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n                \"_id.productID\": this.goodID,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, \r\n        {\r\n            params: {...data1}\r\n        })\r\n            .then(res => {\r\n                allJoinMatch = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        console.log(\"Các join\",allJoinMatch);\r\n        // Thêm vào trên cái bảng typeSet\r\n        for(var i = 0 ; i < allJoinMatch.length ; i ++)\r\n        {\r\n            typeSet.push(allJoinMatch[i]._id.typeID);\r\n        }\r\n        this.setState({change: !this.state.change});\r\n    }\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName='';\r\n        for(var i = 0; i<listTypeInfor.length;i++)\r\n        {   \r\n            if(listTypeInfor[i]._id.typeID == typeID)\r\n            {\r\n                typeName = listTypeInfor[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    checkConstraint = () => {\r\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\r\n        // Constraint 1: Check name\r\n        var productName =  document.querySelector('input[name=\"goodName\"]').value;\r\n        if(productName.length == 0)\r\n        {\r\n            alert(\"Tên sản phẩm không được trống\");\r\n            return false;\r\n        }\r\n        // Constraint 2: Check quantity\r\n        if(document.querySelector('input[name=\"goodQuantity\"]').value.length == 0)\r\n        {\r\n            alert(\"Số lượng sản phẩm không được trống\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value) <= 0) \r\n        {\r\n            alert('Số lượng sản phẩm phải lớn hơn 0');\r\n            return false;\r\n        }\r\n        // Constraint 3: check Unit\r\n        if(document.querySelector('input[name=\"unit\"]').value.length == 0)\r\n        {\r\n            alert('Đơn vị của sản phẩm không được trống');\r\n            return false;\r\n        }\r\n        // Constraint 4: Check import Price\r\n        if(document.querySelector('input[name=\"originalPrice\"]').value.length == 0)\r\n        {\r\n            alert(\"Giá nhập không được trống\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <= 0) \r\n        {\r\n            alert('Giá nhập phải lớn hơn 0');\r\n            return false;\r\n        }\r\n        // Constraint 5: check sell Price\r\n        if(document.querySelector('input[name=\"sellPrice\"]').value.length == 0)\r\n        {\r\n            alert(\"Giá bán không được trống\");\r\n            return false;\r\n        }\r\n        else if(parseInt(document.querySelector('input[name=\"sellPrice\"]').value) <= 0) \r\n        {\r\n            alert('Giá bán phải lớn hơn 0');\r\n            return false;\r\n        }\r\n        // Constraint 6: Ngày nhập phải nhỏ  hơn ngày hết hạn và ngày hết hạn, ngày nhập phải khác null\r\n        if (\r\n            (\r\n                new Date(document.querySelector('input[name=\"importDate\"]').value).getTime()\r\n                - \r\n                new Date(document.querySelector('input[name=\"expiredDate\"]').value).getTime()\r\n            ) >= 0\r\n        )\r\n        {\r\n            alert('Không thể nhập hàng hết hạn');\r\n            return false;\r\n        }\r\n        // Constraint 7: Check giá gốc nhỏ hơn giá bán\r\n        if(\r\n            parseInt(document.querySelector('input[name=\"sellPrice\"]').value) \r\n            - \r\n            parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <=0\r\n            ) \r\n        {\r\n            alert('Giá bán phải lớn hơn giá gốc');\r\n            return false;\r\n        }\r\n        // Constraint 8: check xem đã  up ảnh lên xong chưa\r\n        if(this.finishUpImage == false)\r\n        {\r\n            alert('Ảnh chưa được upload xong');\r\n            return false;\r\n        }\r\n        alert('Constraint đã check đầy đủ');\r\n        return true;\r\n    }\r\n    async updateGood() {\r\n        var isContinue = this.checkConstraint();\r\n        if(!isContinue)\r\n        {\r\n            return;\r\n        }\r\n        this.props.changeUpdateGoodStatus();\r\n        var productInfo = this.props.infoUpdate;\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            product: {\r\n                _id: {\r\n                    productID: document.querySelector('input[name=\"goodID\"]').value,\r\n                    importDate: productInfo._id.importDate,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                name: this.name,\r\n                quantity: this.quantity,\r\n                // remain: document.querySelector('input[name=\"goodQuantity\"]').value,\r\n                importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\r\n                sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\r\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\r\n                imgUrl: this.imgUrl,\r\n                unit: document.querySelector('input[name=\"unit\"]').value,\r\n            }\r\n        }\r\n        console.log(\"Updategood\",data);\r\n        axios.put(`http://localhost:5000/api/product`, data)\r\n            .then(res => {\r\n                console.log(\"Update success\");\r\n                alert('Đã update thành công sản phẩm')\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n            })\r\n        // Get hết các cái join của sản phẩm\r\n        var allJoinMatch = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n                \"_id.productID\": this.goodID,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, \r\n        {\r\n            params: {...data1}\r\n        })\r\n            .then(res => {\r\n                allJoinMatch = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        console.log(allJoinMatch);\r\n        // Xoá các join liên quan đến sản phẩm\r\n        var allProductJoin = [];\r\n        for(var i = 0 ; i < allJoinMatch.length; i++)\r\n        {\r\n            allProductJoin.push({\r\n                productID: this.goodID,\r\n                typeID: allJoinMatch[i]._id.typeID,\r\n                importDate: allJoinMatch[i]._id.importDate,\r\n                storeID: this.props.infoUser.email,\r\n            });\r\n        }\r\n        const dataJoin = {\r\n            token: localStorage.getItem('token'),\r\n            productJoinTypes: allProductJoin,      \r\n        }\r\n\r\n        console.log(dataJoin);\r\n\r\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\r\n            .then(res => {\r\n                console.log(\"delete join success\");\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n            })\r\n        // Thêm các cái hiện tại\r\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\r\n        for(var i = 0 ; i < typeSet.length ; i++)\r\n        {\r\n            const data1 = {\r\n                token: localStorage.getItem('token'),\r\n                productJoinType: {\r\n                    _id : {\r\n                        productID: this.goodID,\r\n                        typeID: typeSet[i], \r\n                        importDate: productInfo._id.importDate,\r\n                        storeID: this.props.infoUser.email,\r\n                    }\r\n                }\r\n            }\r\n            axios.post(`http://localhost:5000/api/product/join`, data1)\r\n                .then(res => {\r\n                    console.log(\"lưu vô bảng join thành công\");\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                })\r\n        }\r\n    }\r\n\r\n\r\n    cancel = () => {\r\n        this.props.changeUpdateGoodStatus();\r\n    }\r\n\r\n    loadInitialData = () => {\r\n        // Load các dữ liệu ban đầu của form ở đây để mà update nhưng mà bị lỗi 401 mẹ\r\n        //Xử lý sampleData\r\n        var productInfo = this.props.infoUpdate;\r\n        console.log(this.props.infoUpdate);\r\n\r\n        this.goodID = (productInfo._id.productID == null) ? '' : productInfo._id.productID;\r\n        this.importDate = productInfo._id.importDate;\r\n        this.importDate = this.importDate == null ? '' :this.importDate.substring(0, this.importDate.indexOf('T'));\r\n        this.name = productInfo.name == null ? '' : productInfo.name;\r\n        this.imgUrl = productInfo.imgUrl == null ? '' : productInfo.imgUrl;\r\n        this.quantity = productInfo.quantity == null ? '' : productInfo.quantity;\r\n        // this.remain = productInfo.remain;\r\n        this.unit = productInfo.unit == null ? '' : productInfo.unit;\r\n        this.importPrice = productInfo.importPrice == null ? '' : productInfo.importPrice;\r\n        this.sellPrice = productInfo.sellPrice == null ? '' : productInfo.sellPrice;\r\n        this.expire = productInfo.expires; //substring(0,productInfo.expire.indexOf('T'));\r\n        this.expire = this.expire == null ? '' :this.expire.substring(0, this.expire.indexOf('T'));\r\n        console.log(\"this.expire\",this.expire );\r\n        this.setState({change: !this.state.change});\r\n    }\r\n\r\n    profileImageChange = (fileChangeEvent) => {\r\n        this.setState({\r\n            imageSelect: fileChangeEvent.target.files[0],\r\n        })\r\n        this.finishUpImage = false;\r\n        const file = fileChangeEvent.target.files[0];\r\n        const { type } = file;\r\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\r\n        } else {\r\n            const formData = new FormData();\r\n            formData.append(\"file\", fileChangeEvent.target.files[0])\r\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\r\n            axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\r\n                .then(res => {\r\n                    this.imgUrl=res.data.url;\r\n                    this.setState({\r\n                        change: 'true'\r\n                    });\r\n                })\r\n                .catch(err => {\r\n                    console.log(\"Thất bại\");\r\n                })\r\n        }\r\n        this.finishUpImage = true;\r\n    }\r\n\r\n    changeName = (e) => {\r\n        this.name = e.target.value;\r\n    }\r\n\r\n    changeValue = (e, variable) =>\r\n    {\r\n        if(variable=='quantity')\r\n        {\r\n            this.quantity = e.target.value;\r\n        }\r\n    }\r\n\r\n    foundTypeInSet(typeID) {\r\n        for(var i = 0 ; i < typeSet.length; i++)\r\n        {\r\n            if(typeSet[i]==typeID._id.typeID) return true;\r\n        }\r\n        return false;\r\n    }\r\n    render() {\r\n        \r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"UPDATE GOOD\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}  \r\n                            style={{\r\n                                display: 'flex', \r\n                                justifyContent:'center', \r\n                                flexDirection:'column',\r\n                                alignItems:'center',\r\n                                marginTop: '0px'\r\n                            }}\r\n                        >   \r\n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\r\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\r\n                            </label>\r\n                            {/* Ẩn đi */}\r\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\r\n                        </Grid>\r\n                        <Grid item md={12}>\r\n\r\n                            <Card \r\n                            >\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            ID\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            name=\"goodID\" \r\n                                            variant=\"outlined\" \r\n                                            value={this.goodID}\r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                        style={{\r\n                                            marginLeft: 0,\r\n                                            paddingLeft: 0\r\n                                        }}\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 128}}>Import Date</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\" \r\n                                            style = {{width: '68%'}} \r\n                                            fullWidth\r\n                                            name=\"importDate\"\r\n                                            size=\"small\"\r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.importDate}\r\n                                            readOnly={true}\r\n                                            disabled={true}\r\n                                        />\r\n                                    </Grid>\r\n                                    \r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\"style={{width: '114px'}}>Name</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"text\" \r\n                                            // class=\"input-val\" \r\n                                            style = {{width: '100%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            name=\"goodName\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.name}\r\n                                            onChange={(e) => this.changeName(e)} \r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                        style={{padding: '0px', marginLeft: '0px'}}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\" \r\n                                            style={{width: '100px'}}\r\n                                        >\r\n                                            Quantity\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            style = {{width: '60%'}} \r\n                                            fullWidth\r\n                                            name=\"goodQuantity\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\" \r\n                                            defaultValue={this.quantity}\r\n                                            onChange={(e) => this.changeValue(e, 'quantity')}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                        style={{\r\n                                            paddingRight: 24\r\n                                        }}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                marginLeft: 0,\r\n                                                paddingLeft: 4\r\n                                            }}\r\n                                        >\r\n                                            Unit\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '100%', marginLeft: '4px'}} \r\n                                            fullWidth\r\n                                            variant=\"outlined\"\r\n                                            type=\"text\" \r\n                                            name=\"unit\" \r\n                                            defaultValue={this.unit}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 128}}>Original Price</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"originalPrice\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\"\r\n                                            defaultValue={this.importPrice}\r\n                                        />\r\n                                        đ\r\n                                    </Grid>\r\n                                    <Grid item md={6}\r\n                                        className='input-item'\r\n                                        style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{width: '96px'}}\r\n                                        >\r\n                                            Sell Price\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"sellPrice\" \r\n                                            variant=\"outlined\"\r\n                                            type=\"number\" \r\n                                            defaultValue={this.sellPrice}\r\n                                        />\r\n                                        đ\r\n                                    </Grid>\r\n                                    <Grid item md={7} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\r\n                                        <StyledTextField\r\n                                            classname='input-box'   \r\n                                            type=\"date\" \r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth\r\n                                            size=\"small\"\r\n                                            name=\"expiredDate\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.expire} \r\n                                        />\r\n                                        {/* <StyledTextField\r\n                                            classname='input-box'\r\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \r\n                                            fullWidth\r\n                                            name=\"sellPrice\" \r\n                                            variant=\"outlined\"\r\n                                            value={this.expire}\r\n                                        /> */}\r\n                                    </Grid>\r\n                                    <Grid item md={10}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{width:132}}\r\n                                        >\r\n                                            Product Type\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 120 }}>\r\n                                        {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                        <Select\r\n                                            value={this.state.type}\r\n                                            onChange={(event) => {\r\n                                                this.setState({type: event.target.value});\r\n                                                if(!typeSet.includes(event.target.value))\r\n                                                {\r\n                                                    typeSet.push(event.target.value);\r\n                                                }\r\n                                            }}\r\n                                            style={{\r\n                                                height: 36,\r\n                                            }}\r\n                                        >\r\n                                            {\r\n                                                listTypeInfor.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                : listTypeInfor.map((type) =>\r\n                                                    ! this.foundTypeInSet(type) \r\n                                                    ? <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\r\n                                                    : null\r\n                                                )\r\n                                            }   \r\n                                        </Select> \r\n                                    </FormControl>\r\n                                        <Button onClick={() => this.handleAdd()}>\r\n                                            <AiFillPlusCircle\r\n                                                size={28}\r\n                                                style={{\r\n                                                    fontSize: 28,\r\n                                                    margin: 0,\r\n                                                    padding: 0,\r\n                                                    width: 28,\r\n                                                    height: 28\r\n                                                }}    \r\n                                            />\r\n                                        </Button>\r\n                                        <div className='all-type-container'>\r\n                                            {\r\n                                                Array.from(typeSet).map((type) =>\r\n                                                    <div item md={7} className='type-container'>\r\n                                                        <CancelIcon\r\n                                                            className='close-icon'\r\n                                                            size={10}\r\n                                                            onClick={() => {\r\n                                                                typeSet = typeSet.filter(function(item) {\r\n                                                                    return item != type;\r\n                                                                })\r\n                                                                console.log(typeSet);\r\n                                                                this.setState({type: 'none'});\r\n                                                            }}\r\n                                                \r\n                                                        />\r\n                                                        <span className='type-title'>\r\n                                                            {this.getTypeNamebyTypeID(type)}\r\n                                                        </span>\r\n                                                    </div>\r\n                                                    \r\n                                                )\r\n                                            }\r\n                                        </div>\r\n                                    </Grid>\r\n                                    {/* <Grid item md={10}\r\n                                        className='input-item'\r\n                                    >\r\n\r\n                                    </Grid> */}\r\n                                    <Grid item md={2}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.updateGood()}>\r\n                                            UPDATE\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                        \r\n                    {this.props.addTypeStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\r\n                            <AddTypeModal></AddTypeModal>\r\n                        </div>\r\n                    ): null}\r\n                    {this.props.confirmStatus ? (\r\n                        <div className=\"modal-add\">\r\n                            <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\r\n                            <ConfirmModal></ConfirmModal>\r\n                        </div>\r\n                    ): null}\r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        updateGoodStatus: state.updateGoodStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUpdate: state.infoUpdate,\r\n        infoUser: state.infoUser,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeUpdateGoodStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\r\n            });\r\n        },\r\n        changeConfirmStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_CONFIRM_STATUS\",\r\n            });\r\n        },\r\n        setUpdateConfirm: () => {\r\n            dispatch({\r\n                type: \"SET_CONFIRM_UPDATE_GOOD\",\r\n            }); \r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateGoodModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\GoodTable.js",["852","853","854","855"],"import * as React from 'react';\r\nimport { Component } from 'react';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport Paper from '@mui/material/Paper';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport axios from 'axios';\r\nimport { connect } from 'react-redux';\r\nimport GoodRow from './TableRow';\r\n\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    } \r\n})\r\n\r\n\r\nvar listProductInfor = [];\r\nvar joinTypeInfor = [];\r\nvar listTypeInfor = [];\r\n\r\nclass GoodTable extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            update: false\r\n        }\r\n        this.loadAllType();\r\n        this.loadAllGood();\r\n        console.log(this.props.listProduct.state);\r\n    }\r\n    removeProduct= (row) => {\r\n        // Đây là xử lý ở phía dữ liệu, có thể await gì đó.\r\n        // Xử lý ở phía giao diện(tạm)\r\n\r\n        // Đây là câu lệnh để update nhẹ\r\n        this.setState({update: this.state.update})\r\n    }\r\n    async loadAllGood() {\r\n        var resultProduct = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }\r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/`, {\r\n            params: { ...data }\r\n        })\r\n            .then(res => {\r\n                resultProduct = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Get hết từ cái productjoinType\r\n        var result = [];\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n        await axios.get(`http://localhost:5000/api/product/join`, {\r\n            params: { ...data1 }\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n                localStorage.getItem('token', res.data.token);\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err)\r\n            })\r\n        // Lấy các cái jointype\r\n        var joinTypeInfor = [];\r\n        for (let i = 0; i < result.length; i++) {\r\n            joinTypeInfor.push(result[i]);\r\n        }\r\n        console.log(\"joinTypeInfor\", joinTypeInfor);\r\n\r\n        var listProductInfor = [];\r\n        for (let i = 0; i < resultProduct.length; i++) {\r\n            var typeIDList = [];\r\n            var joinType = '';\r\n            for (var j = 0; j < joinTypeInfor.length; j++) {\r\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\r\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) \r\n                {\r\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\r\n                    joinType = joinType + ' ' + this.getTypeNamebyTypeID(joinTypeInfor[j]._id.typeID);\r\n                }\r\n            }\r\n\r\n            listProductInfor.push(\r\n                {\r\n                    ...resultProduct[i],\r\n                    typeIDList: typeIDList,\r\n                    joinType: joinType\r\n                });\r\n\r\n            // rows.push(\r\n            //     createData((i+1), obj._id.productID, obj.name, obj.quantity, \r\n            //         obj.importPrice, obj.sellPrice, obj._id.importDate, joinType, \r\n            //         obj.imgUrl, obj.unit, obj.expires, obj._id.storeID)\r\n            // );\r\n            \r\n        }\r\n        this.props.getProductToReducer(listProductInfor);\r\n        this.setState({ change: !this.state.change });\r\n    }\r\n    async loadAllType() {\r\n        var result = [];\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            filter: {\r\n                \"_id.storeID\": this.props.infoUser.email,\r\n            }   \r\n        }\r\n\r\n        await axios.get(`http://localhost:5000/api/product/type`, \r\n        {\r\n            params: {...data}\r\n        })\r\n            .then(res => {\r\n                result = res.data.data;\r\n            })\r\n            .catch(err => {\r\n                console.log(err);\r\n                alert(err);\r\n            })\r\n        //Get data và lưu các tên Type vào bảng\r\n        listTypeInfor=[];\r\n        for(var i=0; i < result.length ; i++)\r\n        {\r\n            listTypeInfor.push(result[i]);\r\n        }\r\n\r\n        this.setState({change: true});\r\n    }\r\n    getTypeNamebyTypeID (typeID) {\r\n        var typeName='';\r\n        for(var i = 0; i<listTypeInfor.length;i++)\r\n        {   \r\n            if(listTypeInfor[i]._id.typeID == typeID)\r\n            {\r\n                typeName = listTypeInfor[i].name;\r\n                break;\r\n            }\r\n        }\r\n        return typeName;\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div style={{height: '550px', width: '100%', overflowY: 'scroll'}}>\r\n                <TableContainer component={Paper}>\r\n                    <Table className={classes.goodTable} aria-label=\"collapsible table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ID</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">GoodName</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Quantity</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Sell Price</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ImportTime</TableCell>\r\n                                <TableCell className={classes.goodTable_Cell}/>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {\r\n                                this.props.listProduct.state == undefined ? (null):\r\n                                this.props.listProduct.state.map((product) => (\r\n                                    <GoodRow data={product} />\r\n                                ))\r\n                            }   \r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        listProduct: state.listProduct,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        getProductToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_AND_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(GoodTable));\r\n","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\GoodPartials\\TableRow.js",["856","857","858","859","860"],"import * as React from 'react';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Image } from 'cloudinary-react';\r\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport Collapse from '@mui/material/Collapse';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { withStyles } from '@material-ui/styles';\r\nimport GoodImage from './goodExample.jpg';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TableRow from '@mui/material/TableRow';\r\nimport { useDispatch } from 'react-redux'\r\nimport axios from 'axios';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst styles = theme =>  ({\r\n    goodTable_Cell:{\r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: 4,\r\n        color: '#333'\r\n    }\r\n});\r\n\r\n\r\n\r\nclass GoodRow extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state ={\r\n            update: false,\r\n            change: false,\r\n        }\r\n        \r\n    }\r\n    isOpen = false;\r\n    row = {};\r\n    setOpen(value) {\r\n        this.isOpen = value;\r\n        this.setState({change: !this.state.change});\r\n        console.log(\"this.isOpen\",this.isOpen)\r\n    }\r\n\r\n    async deleteProduct() {\r\n        // Xoá sản phẩm\r\n        // const data = {\r\n        //     token: localStorage.getItem('token'),\r\n        //     products:\r\n        //     [\r\n        //         {\r\n        //             productID: row.id,\r\n        //             importDate: row.importTime,\r\n        //             storeID: row.storeID,\r\n        //         }\r\n        //     ]\r\n            \r\n        // }\r\n        // axios.delete(`http://localhost:5000/api/product`,{data: data})\r\n        //     .then(res => {\r\n        //         alert(\"delete product success\");\r\n        //     })\r\n        //     .catch(err => {\r\n        //         alert(err);\r\n        //     })\r\n        \r\n        // // Get hết các cái join của sản phẩm\r\n        // var allJoinMatch = [];\r\n        // const data1 = {\r\n        //     token: localStorage.getItem('token'),\r\n        //     filter: {\r\n        //         \"_id.storeID\": row.storeID,\r\n        //         \"_id.productID\": row.id,\r\n        //     }   \r\n        // }\r\n        // await axios.get(`http://localhost:5000/api/product/join`, \r\n        // {\r\n        //     params: {...data1}\r\n        // })\r\n        //     .then(res => {\r\n        //         allJoinMatch = res.data.data;\r\n        //     })\r\n        //     .catch(err => {\r\n        //         console.log(err);\r\n        //         alert(err);\r\n        //     })\r\n        // console.log(allJoinMatch);\r\n        // // Xoá các join liên quan đến sản phẩm\r\n        // var allProductJoin = [];\r\n        // for(var i = 0 ; i < allJoinMatch.length; i++)\r\n        // {\r\n        //     allProductJoin.push({\r\n        //         productID: row.id,\r\n        //         typeID: allJoinMatch[i]._id.typeID,\r\n        //         importDate: allJoinMatch[i]._id.importDate,\r\n        //         storeID: row.storeID,\r\n        //     });\r\n        // }\r\n        // const dataJoin = {\r\n        //     token: localStorage.getItem('token'),\r\n        //     productJoinTypes: allProductJoin,      \r\n        // }\r\n\r\n        // console.log(dataJoin);\r\n\r\n        // await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\r\n        //     .then(res => {\r\n        //         console.log(\"delete join success\");\r\n        //     })\r\n        //     .catch(err => {\r\n        //         alert(err);\r\n        //     })\r\n\r\n        // Tạm thời\r\n        // window.location.reload();\r\n    }\r\n    render () {\r\n        const { classes } = this.props;\r\n        const row = this.props.data;\r\n        console.log(row);\r\n        return (\r\n            <React.Fragment>\r\n            <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\r\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row._id.productID}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.name}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.quantity}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.sellPrice}</TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\r\n                    {/* {row.importTime == null ? '' : row.importTime.substring(0,row.importTime.indexOf('T'))} */}\r\n                    {row._id.importDate == null ? '': row._id.importDate.substring(0,row._id.importDate.indexOf('T'))}\r\n                </TableCell>\r\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\r\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => this.setOpen(!this.isOpen)}>\r\n                        {this.isOpen ? (<KeyboardArrowUpIcon />) : (<KeyboardArrowDownIcon />)}\r\n                    </IconButton>\r\n                </TableCell>\r\n            </TableRow>\r\n            {\r\n                // this.isOpen ?\r\n                true ?\r\n                <TableRow>\r\n                    <TableCell className={classes.goodTable_Cell} style={{ padding: 0, height: 100}} colSpan={8}>\r\n                        {/* <Collapse in={open} timeout=\"auto\" unmountOnExit> */}\r\n                        <Collapse in={true} timeout=\"auto\" unmountOnExit>\r\n                            <Box sx={{ margin: 1 }}>\r\n                                <Typography variant=\"h6\" gutterBottom component=\"div\">\r\n                                    Other information\r\n                                </Typography>\r\n                                <div style={{display: 'flex'}}>\r\n                                    {  \r\n                                        row.imgUrl == \"none\"\r\n                                        ? <div style={{width: '100px', height: '100px', objectFit:'cover'}}><img src={GoodImage} style={{width: '100px', height: '100px', objectFit:'cover'}}/></div>\r\n                                        \r\n                                        : <div style={{width: '100px', height: '100px', objectFit:'cover'}}><Image style={{width: '100px', height: '100px', objectFit:'cover'}} cloudName=\"databaseimg\" publicId={row.imgUrl}>{row.imgUrl}</Image></div>\r\n                                    }\r\n                                    <Table>\r\n                                        <TableHead>\r\n                                            <TableRow>\r\n                                                <TableCell className={classes.goodTable_Cell}><div style={{color: '#333'}}>Expired Day</div></TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}><div  style={{color: '#333'}}>Original Price</div></TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div  style={{color: '#333'}}>Good Remain</div></TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div  style={{color: '#333'}}>Product Type</div></TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div style={{color: '#333'}}>Unit</div></TableCell>\r\n                                            </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                            <TableRow>\r\n                                                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">\r\n                                                    {/* {row.hidden.expires == null ? '': row.hidden.expires.substring(0,row.hidden.expires.indexOf('T'))} */}\r\n                                                    {row.expires == null ? '': row.expires.substring(0,row.expires.indexOf('T'))}\r\n                                                </TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}>{row.importPrice}</TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}>{row.remain}</TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}>{row.joinType}</TableCell>\r\n                                                <TableCell className={classes.goodTable_Cell}>{row.unit}</TableCell>\r\n                                            </TableRow>\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                    <div className=\"button-container\">\r\n                                        <Button \r\n                                            onClick={() => {\r\n                                                // Truyền cái data vào trong hàm đây luôn\r\n                                                const data = row;\r\n                                                this.props.updateProduct(data);\r\n                                                this.props.openUpdateModal();\r\n                                            }}\r\n                                            variant=\"contained\"\r\n                                        >\r\n                                            Update\r\n                                        </Button>\r\n                                        <Button \r\n                                            variant=\"contained\"\r\n                                            onClick={() => this.deleteProduct()}\r\n                                        >\r\n                                            Delete\r\n                                            \r\n                                        </Button>\r\n                                    </div>\r\n                                </div>  \r\n                            </Box>\r\n                        </Collapse>\r\n                    </TableCell>\r\n                </TableRow>\r\n                : null\r\n            }\r\n            \r\n            </React.Fragment>\r\n        ); \r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addTypeStatus: state.addTypeStatus,\r\n        infoUser: state.infoUser,\r\n        isAddTypeStatus: state.isAddTypeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        listProduct: state.listProduct,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        getProductToReducer: (data) => {\r\n            dispatch({\r\n                type: \"GET_PRODUCT_AND_TYPE\",\r\n                data: data\r\n            });\r\n        },\r\n        updateProduct: (data) => {\r\n            dispatch({type: \"UPDATE_GOOD_DATA\", data});\r\n        },\r\n        openUpdateModal: (data) => {\r\n            dispatch({ type: \"CHANGE_UPDATE_GOOD_STATUS\", });\r\n        }\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(GoodRow));","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\RecieptManager\\SearchReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\RecieptManager\\SearchReceipt.js",["861","862","863"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\addNextWeekTimeKeepingStatus.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\nextWeekTimeKeepingReducer.js",["864"],"const nextWeekTimeKeepingInitialState =\r\n    \r\n[\r\n    {\r\n        _id: {\r\n            dateInWeek: \"T6\",\r\n            storeID: \"19522006@gm.uit.edu.vn\",\r\n            shiftType: {\r\n                _id: {\r\n                    shiftID: \"1\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n            },\r\n            employee: {\r\n                _id: {\r\n                    employeeID: \"2\",\r\n                    storeID: \"19522006@gm.uit.edu.vn\",\r\n                },\r\n            },\r\n        },\r\n        alternativeEmployee: {\r\n            _id: {\r\n                employeeID: \"3\",\r\n                storeID: \"19522006@gm.uit.edu.vn\",\r\n            },\r\n        },\r\n        realDate: \"2021-12-04\",\r\n    }\r\n];\r\n\r\nconst nextWeekTimeKeepingReducer = (state = nextWeekTimeKeepingInitialState, action) => {\r\n        switch (action.type) {\r\n            case \"SET_NEXT_WEEK_TIMEKEEPER\":\r\n                return action.data;\r\n            case \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\":\r\n                return [...state, action.data]\r\n            case \"UPDATE_NEXT_WEEK_TIMEKEEPER\":\r\n                {\r\n                    var newState = [];\r\n                    for(var i = 0 ; i < state.length ; i ++)\r\n                    {\r\n                        if(i != action.index)\r\n                        {\r\n                            newState.push(state[i]);\r\n                        }\r\n                        else \r\n                        {\r\n                            newState.push(action.data);\r\n                        }\r\n                    }\r\n                    return newState;\r\n                }\r\n            case \"DELETE_NEXT_WEEK_TIMEKEEPER\":\r\n            {\r\n                console.log(action.data._id.dateInWeek);\r\n                return state.filter((value, key) => \r\n                (\r\n                    value._id.dateInWeek !== action.data._id.dateInWeek \r\n                    || value._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \r\n                    || value._id.employee._id.employeeID !== action.data._id.employee._id.employeeID\r\n                    || value._id.realDate !== action.data._id.realDate\r\n                ));\r\n            }\r\n                \r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default nextWeekTimeKeepingReducer;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\listShiftAssignReducer.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\updateNextWeekTimeKeepingStatus.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\addTimeKeepingStatus.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\updateNextWeekTimeKeepingValue.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\listTimeKeepingReducer.js",["865","866","867"],"const listTimeKeepingInitialState =   \r\n[\r\n    // {\r\n    //     _id: {\r\n    //         dateInWeek: 'T7',\r\n    //         storeID: '19522006@gm.uit.edu.vn',\r\n    //         shiftType: {\r\n    //             _id: {\r\n    //                 shiftID: 'v908tB',\r\n    //                 storeID: '19522006@gm.uit.edu.vn',\r\n    //             },\r\n    //         },\r\n    //         employee: {\r\n    //             _id: {\r\n    //                 employeeID: '1',\r\n    //                 storeID: '19522006@gm.uit.edu.vn',\r\n    //             },\r\n    //         },\r\n    //     },\r\n    //     realDate: '2021-11-11',\r\n    //     isPaidSalary: false,\r\n    //     createdAt: '2021-01-02',\r\n    // }\r\n    \r\n];\r\n\r\nconst listTimeKeepingReducer = (state = listTimeKeepingInitialState, action) => {\r\n        switch (action.type) {\r\n            // case \"SET_NEXT_WEEK_TIMEKEEPER\":\r\n            //     return{\r\n            //         state: action.data\r\n            //     }\r\n            case \"ADD_NEW_TIME_KEEPER\":\r\n                return [...state, action.data]\r\n            case \"UPDATE_TIMEKEEPER\":\r\n                {\r\n                    var newState = [];\r\n                    for(var i = 0 ; i < state.length ; i ++)\r\n                    {\r\n                        if(i != action.index)\r\n                        {\r\n                            newState.push(state[i]);\r\n                        }\r\n                        else \r\n                        {\r\n                            newState.push(action.data);\r\n                        }\r\n                    }\r\n                    return newState;\r\n                }\r\n            case \"DELETE_TIMEKEEPER\":\r\n                {\r\n                    console.log(\"action\", action);\r\n                    var newState = [];\r\n                    for(var i = 0 ; i < state.length ; i ++)\r\n                    {\r\n                        if(state[i]._id.dateInWeek !== action.data._id.dateInWeek \r\n                            || state[i]._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \r\n                            || state[i]._id.employee._id.employeeID !== action.data._id.employee._id.employeeID)\r\n                        {\r\n                            newState.push(state[i]);\r\n                        }\r\n                        else {\r\n                            console.log(\"Kiếm đc cái xoá rồi\")\r\n                        }\r\n                    }\r\n                    return newState;\r\n\r\n                    // return state.filter((value, key) => \r\n                    //     (\r\n                    //         value._id.dateInWeek !== action.data._id.dateInWeek \r\n                    //         || value._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \r\n                    //         || value._id.employee._id.employeeID !== action.data._id.employee._id.employeeID \r\n                    //     )\r\n                    // );\r\n                }\r\n               \r\n                \r\n            default:\r\n                return state\r\n        }\r\n    }\r\n\r\nexport default listTimeKeepingReducer;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\updateTimeKeepingStatus.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Employee\\updateTimeKeeperValue.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\TimekeepingTable.js",["868","869","870","871","872","873","874"],"import {connect} from 'react-redux';\r\nimport React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport { withStyles } from '@material-ui/styles';\r\n// material\r\nimport { Paper, TableContainer, Table, TableHead, TableCell, TableRow, Button} from '@mui/material';\r\nimport { AiOutlineEdit, AiFillDelete } from \"react-icons/ai\";\r\n// ----------------------------------------------------------------------\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '40px',\r\n    } \r\n})\r\n\r\nclass TimeKeepingTable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state= {\r\n      change: 'false'\r\n    }\r\n    this.getAllTimeKeeping()\r\n  }\r\n\r\n  getAllTimeKeeping()\r\n  {\r\n    const data = {\r\n      token: localStorage.getItem('token'),\r\n      filter: {\r\n          \"_id.storeID\": this.props.infoUser.email,\r\n      }   \r\n    }\r\n    // await axios.get(`http://localhost:5000/api/????`, {\r\n    //     params: {...data}\r\n    // })\r\n    //     .then(res => {\r\n    //         // alert(\"Lấy hết đc product ròi anh chai\");\r\n    //         result = res.data.data;\r\n    //         console.log(res.data.data);\r\n    //     })\r\n    //     .catch(err => {\r\n    //         console.log(err);\r\n    //         alert(err)\r\n    //     })\r\n  }\r\n\r\n  getShiftInforByID(shiftID)\r\n  {\r\n      var listShift = this.props.listShift;\r\n      for(var i = 0 ; i < listShift.length; i++)\r\n      {\r\n        if(listShift[i]._id.shiftID == shiftID)\r\n        {\r\n            return listShift[i].name + ' (' + listShift[i].timeFrom + '-' + listShift[i].timeEnd + ')';\r\n        }\r\n      }\r\n      return \"Can't get shift\";\r\n  }\r\n\r\n  getEmployeeFullNameByID(employeeID)\r\n  {\r\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\r\n      {\r\n          var currentEmployee = this.props.listEmployee.employees[i];\r\n          if(currentEmployee._id.employeeID==employeeID)\r\n          {\r\n            return currentEmployee.lastName + ' ' + currentEmployee.firstName;\r\n          }\r\n      }\r\n      return \"Can't get name\";\r\n  }\r\n  render() {\r\n    const { classes } = this.props;\r\n    return ( \r\n      <div style={{marginTop: 0, padding: 24}}> \r\n          <span\r\n              style={{\r\n                  color: '#fff',\r\n                  backgroundColor: 'blue',\r\n                  padding: 10,\r\n              }}\r\n          >ALL TIMEKEEPING</span>\r\n          <TableContainer component={Paper}>\r\n                <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='180px'>Day</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='80px'>Date Of Week</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" >Shift</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\r\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\r\n                            {/* <TableCell className={classes.goodTable_Cell_Header} align=\"center\"></TableCell> */}\r\n                        </TableRow>\r\n                        {\r\n                            this.props.listTimeKeeper.map((timeKeeper)=>\r\n                                (\r\n                                  <TableRow>\r\n                                    <TableCell className={classes.goodTable_Cell}>{timeKeeper.realDate}</TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.dateInWeek}</TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell}>{this.getShiftInforByID(timeKeeper._id.shiftType._id.shiftID)}</TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.employee._id.employeeID}</TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell}>\r\n                                        {this.getEmployeeFullNameByID(timeKeeper._id.employee._id.employeeID)}\r\n                                    </TableCell>\r\n                                    {/* <TableCell className={classes.goodTable_Cell}>\r\n                                      <div style={{display: 'flex'}}>\r\n                                        <AiOutlineEdit size={20} \r\n                                            onClick={() =>\r\n                                              {\r\n                                                this.props.changeUpdateTimeKeepingStatus();\r\n                                                this.props.changeUpdateTimeKeepingValue(timeKeeper);\r\n                                              }\r\n                                            }\r\n                                          />\r\n                                          <AiFillDelete size={20} \r\n                                            onClick={() => \r\n                                                {\r\n                                                    // axios.delete(`http://localhost:5000/api/????`,{data: data})\r\n                                                    //   .then(res => {\r\n                                                    //       alert(\"success\");\r\n                                                    //   })\r\n                                                    //   .catch(err => {\r\n                                                    //       alert(err);\r\n                                                    //   })\r\n                                                    this.props.deleteTimeKeeping(timeKeeper);\r\n                                                    console.log(this.props.listTimeKeeper);\r\n                                                }\r\n                                                \r\n                                              // this.props.changeUpdateNextWeekTimeKeepingStatus();\r\n                                              \r\n                                              // this.props.changeUpdateNextWeekTimeKeepingValue(item);\r\n                                            }\r\n                                        />\r\n                                      </div>\r\n                                    </TableCell> */}\r\n                                </TableRow>\r\n                                )\r\n                            )\r\n                        }\r\n                    </TableHead>\r\n                </Table>\r\n          </TableContainer>\r\n            {/* <Button \r\n                variant=\"contained\"\r\n                onClick={() => this.props.changeAddTimeKeepingStatus()}\r\n            >\r\n              Add\r\n            </Button> */}\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {\r\n      listTimeKeeper: state.listTimeKeeping,\r\n      listShift: state.listShift,\r\n      listEmployee: state.listEmployee,\r\n      infoUser: state.infoUser\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n  return {\r\n    changeAddTimeKeepingStatus: () => {\r\n      dispatch({\r\n          type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\r\n      });\r\n    },\r\n    changeUpdateTimeKeepingStatus: () => {\r\n      dispatch({\r\n          type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\r\n      });\r\n    },\r\n    changeUpdateTimeKeepingValue: (data) => {\r\n      dispatch({\r\n        type: \"SET_UPDATE_TIMEKEEPER_VALUE\",\r\n        data: data\r\n      });\r\n    },\r\n    deleteTimeKeeping: (data) => {\r\n      console.log(\"data\", data)\r\n      dispatch({\r\n        type: \"DELETE_TIMEKEEPER\",\r\n        data: data\r\n      });\r\n      \r\n    },\r\n  }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(TimeKeepingTable));","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddTimeKeeperModal.js",["875","876","877","878","879","880","881","882","883","884","885","886","887","888"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, \r\n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nvar listDayInWeek = [\r\n    {ID:'T2',name:'Thứ hai'}, \r\n    {ID:'T3',name:'Thứ ba'}, \r\n    {ID:'T4',name:'Thứ tư'}, \r\n    {ID:'T5',name:'Thứ năm'}, \r\n    {ID:'T6',name:'Thứ sáu'}, \r\n    {ID:'T7',name:'Thứ bảy'}, \r\n    {ID:'CN',name:'Chủ nhật'}\r\n];\r\nclass AddTimeKeepingModal extends Component {\r\n\r\n    genID = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n            timeKeepingID: '',\r\n            alterID: '',\r\n            dayChosed: '',\r\n            shiftID: '',\r\n        };\r\n    }\r\n\r\n    // Thêm nhân viên\r\n    async addEmployeeToDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: document.querySelector('input[name=\"ID\"]').value,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                managerID: this.props.infoUser.email,\r\n                password: document.querySelector('input[name=\"password\"]').value,\r\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\r\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\r\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\r\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\r\n                email: document.querySelector('input[name=\"email\"]').value,\r\n                address: document.querySelector('input[name=\"adress\"]').value,\r\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\r\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\r\n                // endDate: \"2021-11-31T00:00:00.000Z\",\r\n            }   \r\n        }\r\n        console.log(data);\r\n        await axios.post(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu thành công\")\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    // cancel = () => {\r\n    //     this.props.changeAddNextWeekTimeKeepingStatus();\r\n    // }\r\n\r\n    // addEmployee = () => {\r\n    //     this.addEmployeeToDatabase();\r\n    //     this.props.changeAddEmployeeStatus();\r\n    // }\r\n\r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    checkContraint() {\r\n        if(this.state.dayChosed.length == 0)\r\n        {\r\n            alert(\"Chưa chọn ngày nào trong tuần\");\r\n            return false;\r\n        }\r\n        if(this.state.shiftID.length == 0)\r\n        {\r\n            alert(\"Chưa chọn ca nào\");\r\n            return false;\r\n        }\r\n        console.log(this.state.timeKeepingID );\r\n        if( this.state.timeKeepingID == undefined || this.state.timeKeepingID.length == 0)\r\n        {\r\n            alert(\"Chưa chọn nhân viên nào để chấm công\"); \r\n            return false;\r\n        }\r\n        // Có CSDL thì báo xem có trùng với cái cũ ko nữa\r\n        \r\n        alert(\"Đã check hết constraint\");\r\n        return true;\r\n    }\r\n\r\n\r\n    addChange() {\r\n        if(this.checkContraint()==false);\r\n        const data = {\r\n            _id: {\r\n                dateInWeek: this.state.dayChosed,\r\n                storeID: this.props.infoUser.email,\r\n                shiftType: {\r\n                    _id: {\r\n                        shiftID: this.state.shiftID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n                employee: {\r\n                    _id: {\r\n                        employeeID: this.state.timeKeepingID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n            },\r\n            realDate: document.querySelector('input[name=\"realDate\"]').value,\r\n        };\r\n        // await axios.post(`http://localhost:5000/api/????``, data)\r\n        //   .then(res => {\r\n        //       console.log(\"Save success\");\r\n        //       alert(\"Lưu thành công\")\r\n        //   })\r\n        //   .catch(err => {\r\n        //       alert(err);\r\n        //       console.log(err);\r\n        //   })\r\n        this.props.addNewTimeKeeper(data);\r\n        this.props.changeAddTimeKeepingStatus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \r\n                    title=\"Change TimeKeeper\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            Real Date\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"date\" \r\n                                            name='realDate'\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.getCurrentDateTime()}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Choose Day in week\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 120 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({dayChosed: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    listDayInWeek.map((item) =>\r\n                                                        <MenuItem value={item.ID}>\r\n                                                            {item.name}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n\r\n                                    <Grid item md={8} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>\r\n                                            Choose Shift\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 220 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({shiftID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                    : this.props.listShift.map((shift) =>\r\n                                                        <MenuItem value={shift._id.shiftID}>\r\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            TimeKeeping Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({timeKeepingID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        !(this.state.alterID == item._id.employeeID) ?\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                        : null\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.addChange()}>\r\n                                            Add Change\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listShift: state.listShift,\r\n        listEmployee: state.listEmployee,\r\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        addNewTimeKeeper: (data) => {\r\n            dispatch({\r\n                type: \"ADD_NEW_TIME_KEEPER\",\r\n                data: data,\r\n            });\r\n        } \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTimeKeepingModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\NoJobEmployee.js",["889","890","891","892","893","894"],"import React, { Component } from 'react';\r\nimport { Table, TableCell, TableContainer, TableRow, TableHead, Paper} from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nvar listUsers = [];\r\n\r\nconst styles = theme =>  ({\r\n    goodTable: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid'\r\n    },\r\n    goodTable_Cell_Header: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '20px',\r\n    },\r\n    goodTable_Cell: {                                     \r\n        borderWidth: '1px',\r\n        borderColor: '#ccc',\r\n        borderStyle: 'solid',\r\n        height: '80px',\r\n    } \r\n})\r\n\r\nclass NoJobEmployee extends Component {\r\n\r\n    genID = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n        };\r\n        listUsers = [];\r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        this.addEmployeeToDatabase();\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    findEmployeeInAssign(employeeID)\r\n    {\r\n        var shiftAssign = this.props.listShiftAssign;\r\n        for(var i = 0 ; i < shiftAssign.length; i++)\r\n        {\r\n            if(shiftAssign[i]._id.employee._id.employeeID == employeeID)\r\n            {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div style={{padding: 24}}>\r\n                <span style={{backgroundColor: 'blue', color: '#fff', padding: 10}}>\r\n                    NOJOB EMPLOYEE\r\n                </span>\r\n               \r\n                <TableContainer component={Paper} style={{width: 400}} >\r\n                    <Table>\r\n                        <TableHead>\r\n                                <TableRow>\r\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\" style={{height: 30}}>ID</TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Employee</TableCell>\r\n                                </TableRow>\r\n                        </TableHead>\r\n                        {\r\n\r\n                            this.props.listEmployee.employees.map((item) => \r\n                                !this.findEmployeeInAssign(item._id.employeeID)\r\n                                ?<TableRow>\r\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\" style={{height: 30}}>{item._id.employeeID}</TableCell>\r\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\">{item.firstName + ' ' + item.lastName}</TableCell>\r\n                                </TableRow>\r\n                                :(null)\r\n                            )\r\n                        }\r\n                        \r\n                    </Table>\r\n                </TableContainer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listEmployee: state.listEmployee,\r\n        listShiftAssign: state.listShiftAssign,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddEmployeeStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles, {withTheme: true})(NoJobEmployee));\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateTimeKeepingModal.js",["895","896","897","898","899","900","901","902","903","904","905","906","907","908","909","910","911"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, \r\n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nvar listDayInWeek = [\r\n    {ID:'T2',name:'Thứ hai'}, \r\n    {ID:'T3',name:'Thứ ba'}, \r\n    {ID:'T4',name:'Thứ tư'}, \r\n    {ID:'T5',name:'Thứ năm'}, \r\n    {ID:'T6',name:'Thứ sáu'}, \r\n    {ID:'T7',name:'Thứ bảy'}, \r\n    {ID:'CN',name:'Chủ nhật'}\r\n];\r\n\r\nclass UpdateTimeKeepingModal extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n            timeKeepingID: '',\r\n            dayChosed: '',\r\n            shiftID: '',\r\n        };\r\n        this.loadInitialData()\r\n    }\r\n\r\n    // Thêm nhân viên\r\n    async addEmployeeToDatabase()\r\n    {\r\n        const data = {\r\n            token: localStorage.getItem('token'),\r\n            employee: {\r\n                _id: {\r\n                    employeeID: document.querySelector('input[name=\"ID\"]').value,\r\n                    storeID: this.props.infoUser.email,\r\n                },\r\n                managerID: this.props.infoUser.email,\r\n                password: document.querySelector('input[name=\"password\"]').value,\r\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\r\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\r\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\r\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\r\n                email: document.querySelector('input[name=\"email\"]').value,\r\n                address: document.querySelector('input[name=\"adress\"]').value,\r\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\r\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\r\n                // endDate: \"2021-11-31T00:00:00.000Z\",\r\n            }   \r\n        }\r\n        console.log(data);\r\n        await axios.post(`http://localhost:5000/api/employee`, data)\r\n            .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu thành công\")\r\n            })\r\n            .catch(err => {\r\n                alert(err);\r\n                console.log(err);\r\n            })\r\n    }\r\n\r\n    // cancel = () => {\r\n    //     this.props.changeAddNextWeekTimeKeepingStatus();\r\n    // }\r\n\r\n    // addEmployee = () => {\r\n    //     this.addEmployeeToDatabase();\r\n    //     this.props.changeAddEmployeeStatus();\r\n    // }\r\n    realDate = '';\r\n    shiftID = '';\r\n    dayChosed = '';\r\n    timeKeepingID = '';\r\n    loadInitialData()\r\n    {\r\n        console.log(this.props.updateTimeKeepingValue.state);\r\n        this.realDate = this.props.updateTimeKeepingValue.state.realDate;\r\n        this.shiftID = this.props.updateTimeKeepingValue.state._id.shiftType._id.shiftID;\r\n        this.timeKeepingID = this.props.updateTimeKeepingValue.state._id.employee._id.employeeID;\r\n        this.dayChosed= this.props.updateTimeKeepingValue.state._id.dateInWeek;\r\n        this.setState({\r\n            shiftID : this.props.updateTimeKeepingValue.state._id.shiftType._id.shiftID,\r\n            dayChosed: this.props.updateTimeKeepingValue.state._id.dateInWeek,\r\n            timeKeepingID: this.props.updateTimeKeepingValue.state._id.employee._id.employeeID,\r\n        });\r\n    }\r\n\r\n    findIndexCurrentKeepingInRedux(id)\r\n    {\r\n        //Đụng đến nếu sửa bảng\r\n        var listToSearch = this.props.listTimeKeeper;\r\n        for(var i = 0 ; i < listToSearch.length ; i ++)\r\n        {\r\n            if(listToSearch[i]._id.dateInWeek == id.dateInWeek && \r\n                listToSearch[i]._id.shiftType._id.shiftID == id.shiftType._id.shiftID&& \r\n                listToSearch[i]._id.employee._id.employeeID == id.employee._id.employeeID)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    checkContraint() {\r\n        if(this.dayChosed.length == 0)\r\n        {\r\n            alert(\"Chưa chọn ngày nào trong tuần\");\r\n            return false;\r\n        }\r\n        if(this.shiftID.length == 0)\r\n        {\r\n            alert(\"Chưa chọn ca nào\");\r\n            return false;\r\n        }\r\n        // console.log(this.state.timeKeepingID );\r\n        if( this.timeKeepingID == undefined || this.timeKeepingID.length == 0)\r\n        {\r\n            alert(\"Chưa chọn nhân viên nào để chấm công\"); \r\n            return false;\r\n        }\r\n        // Có CSDL thì báo xem có trùng với cái cũ ko nữa\r\n        \r\n        alert(\"Đã check hết constraint\");\r\n        return true;\r\n    }\r\n\r\n\r\n    UpdateChange() {\r\n        if(this.checkContraint()==false) return;\r\n        const data = {\r\n            _id: {\r\n                dateInWeek: this.dayChosed,\r\n                storeID: this.props.infoUser.email,\r\n                shiftType: {\r\n                    _id: {\r\n                        shiftID: this.shiftID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n                employee: {\r\n                    _id: {\r\n                        employeeID: this.timeKeepingID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n            },\r\n            realDate: document.querySelector('input[name=\"realDate\"]').value,\r\n        };\r\n        // axios.put(`http://localhost:5000/api/????`, data)\r\n        //     .then(res => {\r\n        //         console.log(\"Update success\");\r\n        //         alert('Đã update thành công sản phẩm')\r\n        //     })\r\n        //     .catch(err => {\r\n        //         console.log(err);\r\n        //     })\r\n        this.props.updateTimeKeeper(data, this.findIndexCurrentKeepingInRedux(data._id));\r\n        console.log(data);\r\n        this.props.changeUpdateTimeKeepingStatus();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \r\n                    title=\"Update TimeKeeper\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            Real Date\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"date\" \r\n                                            name='realDate'\r\n                                            readOnly={true}\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.realDate}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Choose Day in week\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 120 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                readOnly={true}\r\n                                                value = {this.dayChosed}\r\n                                                onChange={(event) => {\r\n                                                    this.dayChosed = event.target.value;\r\n                                                    this.setState({dayChosed: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    listDayInWeek.map((item) =>\r\n                                                        <MenuItem value={item.ID}>\r\n                                                            {item.name}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n\r\n                                    <Grid item md={8} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>\r\n                                            Choose Shift\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 220 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                readOnly={true}\r\n                                                value={this.shiftID}\r\n                                                onChange={(event) => {\r\n                                                    this.shiftID = event.target.value;\r\n                                                    this.setState({shiftID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                    : this.props.listShift.map((shift) =>\r\n                                                        <MenuItem value={shift._id.shiftID}>\r\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            TimeKeeping Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                readOnly={true}\r\n                                                value={this.timeKeepingID}\r\n                                                onChange={(event) => {\r\n                                                    this.timeKeepingID = event.target.value;\r\n                                                    this.setState({timeKeepingID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        !(this.state.alterID == item._id.employeeID) ?\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                        : null\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.UpdateChange()}>\r\n                                            Update Change\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        listTimeKeeper: state.listTimeKeeping,\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listShift: state.listShift,\r\n        listEmployee: state.listEmployee,\r\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\r\n        updateTimeKeepingValue: state.updateTimeKeepingValue,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeUpdateTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        addNewTimeKeeper: (data) => {\r\n            dispatch({\r\n                type: \"ADD_NEW_TIME_KEEPER\",\r\n                data: data,\r\n            });\r\n        }, \r\n        updateTimeKeeper: (data, indexOfVal) => {\r\n            dispatch({\r\n                type: \"UPDATE_TIMEKEEPER\",\r\n                data: data,\r\n                index: indexOfVal\r\n            });\r\n        }, \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateTimeKeepingModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\AddNextWeekTimeKeeping.js",["912","913","914","915","916","917","918","919","920","921","922","923","924","925","926","927","928"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, \r\n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nvar listDayInWeek = [\r\n    {ID:'Monday',name:'Thứ hai'}, \r\n    {ID:'Tuesday',name:'Thứ ba'}, \r\n    {ID:'Wednesday',name:'Thứ tư'}, \r\n    {ID:'Thursday',name:'Thứ năm'}, \r\n    {ID:'Friday',name:'Thứ sáu'}, \r\n    {ID:'Saturday',name:'Thứ bảy'}, \r\n    {ID:'Sunday',name:'Chủ nhật'}\r\n];\r\nclass AddNextWeekTimeKeepingModal extends Component {\r\n\r\n    genID = 0;\r\n    dayChosed = '';\r\n    constructor(props) {\r\n        super(props);\r\n        this.dayChosed = this.getDayInWeek(this.getCurrentDateTime());\r\n        this.state = {\r\n            change: false,\r\n            withdrawID: '',\r\n            alterID: '',\r\n            dayChosed: this.getDayInWeek(this.getCurrentDateTime()),\r\n            shiftID: '',\r\n        };\r\n        \r\n    }\r\n\r\n    cancel = () => {\r\n        this.props.changeAddNextWeekTimeKeepingStatus();\r\n    }\r\n\r\n    addEmployee = () => {\r\n        this.addEmployeeToDatabase();\r\n        this.props.changeAddEmployeeStatus();\r\n    }\r\n\r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    isGreater(dateString1, dateString2){\r\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\r\n    }\r\n\r\n    checkContraint() {\r\n        if(this.state.dayChosed.length == 0)\r\n        {\r\n            alert(\"Chưa chọn ngày nào trong tuần\");\r\n            return false;\r\n        }\r\n        if(this.state.shiftID.length == 0)\r\n        {\r\n            alert(\"Chưa chọn ca nào\");\r\n            return false;\r\n        }\r\n        console.log(this.state.withdrawID );\r\n        if( this.state.withdrawID == undefined || this.state.withdrawID.length == 0)\r\n        {\r\n            alert(\"Chưa chọn nhân viên nào nghỉ\"); \r\n            return false;\r\n        }\r\n        if(this.state.alterID== undefined || this.state.alterID.length == 0)\r\n        {\r\n            alert(\"Chưa chọn nhân viên nào thay thế\");\r\n            return false;\r\n        }\r\n        if(!this.isGreater(document.querySelector('input[name=\"realDate\"]').value, this.getCurrentDateTime() ))\r\n        {\r\n            alert(\"Ngày nhập phải nhỏ hơn ngày báo nghỉ\");\r\n            return false;\r\n        }   \r\n\r\n        // Có CSDL thì báo xem có trùng với cái cũ ko nữa\r\n        \r\n        alert(\"Đã check hết constraint\");\r\n        return true;\r\n    }\r\n    getDayInWeek(date) {\r\n        const d = new Date(date);\r\n    \r\n        const weekday = new Array(7);\r\n        weekday[0] = \"Sunday\";\r\n        weekday[1] = \"Monday\";\r\n        weekday[2] = \"Tuesday\";\r\n        weekday[3] = \"Wednesday\";\r\n        weekday[4] = \"Thursday\";\r\n        weekday[5] = \"Friday\";\r\n        weekday[6] = \"Saturday\";\r\n    \r\n        return weekday[d.getDay()];\r\n    }\r\n\r\n    async addChange() {\r\n        if(this.checkContraint()==false) return ;\r\n        const data1 = {\r\n            token: localStorage.getItem('token'),\r\n            offDay: {\r\n                _id: {\r\n                    dateInWeek: this.state.dayChosed,\r\n                    storeID: this.props.infoUser.email,\r\n                    shiftType: {\r\n                        _id: {\r\n                            shiftID: this.state.shiftID,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    employee: {\r\n                        _id: {\r\n                            employeeID: this.state.withdrawID,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\r\n                },\r\n                alternativeEmployee: {\r\n                    _id: {\r\n                        employeeID: this.state.alterID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n                \r\n            }\r\n        };\r\n        await axios.post(`http://localhost:5000/api/employee/off-day`, data1)\r\n          .then(res => {\r\n              console.log(\"Save success\");\r\n              alert(\"Lưu thành công\")\r\n              const data = {\r\n                _id: {\r\n                    dateInWeek: this.state.dayChosed,\r\n                    storeID: this.props.infoUser.email,\r\n                    shiftType: {\r\n                        _id: {\r\n                            shiftID: this.state.shiftID,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    employee: {\r\n                        _id: {\r\n                            employeeID: this.state.withdrawID,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\r\n                },\r\n                alternativeEmployee: {\r\n                    _id: {\r\n                        employeeID: this.state.alterID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n                \r\n            };\r\n            \r\n            this.props.addNewChange(data);\r\n            console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\r\n            this.props.changeAddNextWeekTimeKeepingStatus();\r\n          })\r\n          .catch(err => {\r\n                console.log(\"err.response.data.message\", err.response.data.message);\r\n                if(err.response.data.message)\r\n                {\r\n                    alert(err.response.data.message);\r\n                }\r\n                console.log(err);\r\n          })\r\n        \r\n        // console.log(this.props.nextWeekTimeKeeping)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \r\n                    title=\"Change NextWEEK TimeKeeper\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            Real Date\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"date\" \r\n                                            name='realDate'\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.getCurrentDateTime()}\r\n                                            onChange={(event) => {\r\n                                                this.dayChosed = this.getDayInWeek(event.target.value);\r\n                                                this.setState({dayChosed: this.getDayInWeek(event.target.value)});\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Choose Day in week\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 120 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                value={this.dayChosed}\r\n                                                onChange={(event) => {\r\n                                                    this.dayChosed = event.target.value;\r\n                                                    this.setState({dayChosed: event.target.value});\r\n\r\n                                                }}\r\n                                                readOnly={true}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    listDayInWeek.map((item) =>\r\n                                                        <MenuItem value={item.ID}>\r\n                                                            {item.name}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n\r\n                                    <Grid item md={8} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>\r\n                                            Choose Shift\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 220 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({shiftID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                    : this.props.listShift.map((shift) =>\r\n                                                        <MenuItem value={shift._id.shiftID}>\r\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Widraw Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({withdrawID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        !(this.state.alterID == item._id.employeeID) ?\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                        : null\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Alter Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                // value={this.state.type}\r\n                                                onChange={(event) => {\r\n                                                    this.setState({alterID: event.target.value});\r\n                                                    // if(!typeSet.includes(event.target.value))\r\n                                                    // {\r\n                                                    //     typeSet.push(event.target.value);\r\n                                                    // }\r\n                                                    // this.setState({change: !this.state.change})\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        !(this.state.withdrawID == item._id.employeeID) ?\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                        : null\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.addChange()}>\r\n                                            Add Change\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listShift: state.listShift,\r\n        listEmployee: state.listEmployee,\r\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeAddNextWeekTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        addNewChange: (data) => {\r\n            dispatch({\r\n                type: \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\",\r\n                data: data,\r\n            });\r\n        } \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNextWeekTimeKeepingModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\EmployeePartials\\UpdateNextWeekTimeKeeping.js",["929","930","931","932","933","934","935","936","937","938","939","940","941"],"import React, { Component } from 'react';\r\nimport { Card, CardHeader, Divider, Grid, TextField, \r\n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\r\nimport { connect } from 'react-redux'\r\nimport { Image } from 'cloudinary-react';\r\nimport axios from 'axios';\r\nimport '../../css/GoodManager.css';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\nvar productTypes =[\r\n    'food', 'detergent', 'cuisine'\r\n];\r\n\r\nvar typeSet = [];\r\n\r\nconst StyledTextField = withStyles((theme) => ({\r\n    root: {\r\n      \"& .MuiInputBase-root\": {\r\n        height: 36,\r\n        \"& input\": {\r\n          textAlign: \"right\",\r\n          marginLeft: '4px',\r\n        }\r\n      }\r\n    }\r\n  }))(TextField);\r\n\r\nvar listDayInWeek = [\r\n    {ID:'Monday',name:'Thứ hai'}, \r\n    {ID:'Tuesday',name:'Thứ ba'}, \r\n    {ID:'Wednesday',name:'Thứ tư'}, \r\n    {ID:'Thursday',name:'Thứ năm'}, \r\n    {ID:'Friday',name:'Thứ sáu'}, \r\n    {ID:'Saturday',name:'Thứ bảy'}, \r\n    {ID:'Sunday',name:'Chủ nhật'}\r\n];\r\n\r\nclass UpdateNextWeekTimeKeepingModal extends Component {\r\n\r\n    genID = 0;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            change: false,\r\n            withdrawID: '',\r\n            alterID: '',\r\n            dayChosed: '',\r\n            shiftID: '',\r\n        };\r\n        this.loadInitialData();\r\n    }\r\n\r\n    getCurrentDateTime()\r\n    {\r\n        var currentDate = new Date();\r\n        var day = (currentDate.toString().split(' '))[2];\r\n        if(day.length < 2)\r\n        {\r\n            day = '0' + day;\r\n        }\r\n        var month = (new Date().getMonth() + 1).toString();\r\n        if(month.length<2)\r\n        {\r\n            month = '0' + month;\r\n        }\r\n        return new Date().getFullYear() + '-' + month + '-' + day;\r\n    }\r\n\r\n    async updateChange() {\r\n        console.log(\"Vô được hàm cập nhập rồi\")\r\n        console.log(\"id giá trị hiện tại\", )\r\n        // Xoá cái hiện tại đi cái đã\r\n        const data = {\r\n            token: localStorage.getItem('token'),   \r\n            offDay: {\r\n                _id: this.props.updateNextWeekTimeKeepingValue._id\r\n            }\r\n        }\r\n\r\n        await axios.delete(`http://localhost:5000/api/employee/off-day`,{data: data})\r\n          .then(res => {\r\n              alert(\"success\");\r\n          })\r\n          .catch(err => {\r\n              alert(err);\r\n          })\r\n        this.props.deleteNextWeekTimeKeeping(this.props.updateNextWeekTimeKeepingValue);\r\n        console.log(\"Xoá được rồi\");\r\n        const dataUpdate = {\r\n            token: localStorage.getItem('token'),\r\n            offDay: {\r\n                _id: {\r\n                    dateInWeek: this.currentdayChosed,\r\n                    storeID: this.props.infoUser.email,\r\n                    shiftType: {\r\n                        _id: {\r\n                            shiftID: this.currentShipChosed,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    employee: {\r\n                        _id: {\r\n                            employeeID: this.currentWidrawID,\r\n                            storeID: this.props.infoUser.email,\r\n                        },\r\n                    },\r\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\r\n                },\r\n                alternativeEmployee: {\r\n                    _id: {\r\n                        employeeID: this.currentAlterID,\r\n                        storeID: this.props.infoUser.email,\r\n                    },\r\n                },\r\n            }    \r\n        };\r\n        console.log(\"dataUpdate\", dataUpdate);\r\n        await axios.post(`http://localhost:5000/api/employee/off-day`, dataUpdate)\r\n          .then(res => {\r\n                console.log(\"Save success\");\r\n                alert(\"Lưu thành công\"); \r\n                this.props.addNewChange(dataUpdate.offDay);\r\n                console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\r\n        })\r\n        .catch(err => {\r\n            alert(err);\r\n            console.log(err);\r\n            if(err.response.data.message)\r\n            {\r\n                alert(err.response.data.message);\r\n            }\r\n            // Nếu lỗi thì thêm lại\r\n            this.props.addNewChange(this.props.updateNextWeekTimeKeepingValue);\r\n            axios.post(`http://localhost:5000/api/employee/off-day`, {\r\n                token: localStorage.getItem('token'),\r\n                offDay: this.props.updateNextWeekTimeKeepingValue,\r\n            })\r\n            .then(res => {\r\n                  console.log(\"Save success\");\r\n                  alert(\"Lưu lại thành công\"); \r\n                })\r\n                .catch(err => {\r\n                    // alert(err);\r\n                    if(err.response.data.message)\r\n                    {\r\n                        alert(err.response.data.message);\r\n                    }\r\n                });\r\n        })\r\n        // var indexOfData = this.findIndexCurrentNextTimeKeepingInRedux(data._id)\r\n        // this.props.changeUpdateNextWeekTimeKeeping(data, indexOfData);\r\n\r\n        this.props.changeUpdateNextWeekTimeKeepingStatus();\r\n    }\r\n\r\n    findIndexCurrentNextTimeKeepingInRedux(id)\r\n    {\r\n        //Đụng đến nếu sửa bảng\r\n        var listToSearch = this.props.nextWeekTimeKeeping;\r\n        for(var i = 0 ; i < listToSearch.length ; i ++)\r\n        {\r\n            if(listToSearch[i]._id.dateInWeek == id.dateInWeek && \r\n                listToSearch[i]._id.shiftType._id.shiftID == id.shiftType._id.shiftID&& \r\n                listToSearch[i]._id.employee._id.employeeID == id.employee._id.employeeID)\r\n            {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    realDate = '';\r\n    currentdayChosed = '';\r\n    currentShipChosed = '';\r\n    currentWidrawID = '';\r\n    loadInitialData() {\r\n        var val = this.props.updateNextWeekTimeKeepingValue;\r\n        this.realDate = val._id.realDate;\r\n        if(this.realDate.indexOf('T')!=-1) this.realDate = this.realDate.substring(0, this.realDate.indexOf('T'));\r\n        this.currentdayChosed = val._id.dateInWeek;\r\n        this.currentShipChosed = val._id.shiftType._id.shiftID;\r\n        this.currentWidrawID = val._id.employee._id.employeeID;\r\n        this.currentAlterID = val.alternativeEmployee._id.employeeID;\r\n        this.setState({\r\n            change : !this.state.change,\r\n            shiftID: this.currentShipChosed,\r\n            dayChosed: this.currentdayChosed,\r\n            withdrawID: this.currentWidrawID,\r\n            alterID: this.currentAlterID,\r\n        });\r\n    }\r\n\r\n    getDayInWeek(date) {\r\n        const d = new Date(date);\r\n    \r\n        const weekday = new Array(7);\r\n        weekday[0] = \"Sunday\";\r\n        weekday[1] = \"Monday\";\r\n        weekday[2] = \"Tuesday\";\r\n        weekday[3] = \"Wednesday\";\r\n        weekday[4] = \"Thursday\";\r\n        weekday[5] = \"Friday\";\r\n        weekday[6] = \"Saturday\";\r\n    \r\n        return weekday[d.getDay()];\r\n    }\r\n    render() {\r\n        return (\r\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\r\n                <Card>\r\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \r\n                    title=\"Update Change TimeKeeper\" />\r\n                        <div \r\n                        style={{ \r\n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \r\n                        }}\r\n                    >   \r\n                    <Grid className=\"import-container\" container >\r\n                        <Grid item md={12}>\r\n\r\n                            <Card>\r\n                                \r\n                                <Grid container md={12}>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div \r\n                                            className=\"input-label\"\r\n                                            style={{\r\n                                                width: '116px'\r\n                                            }}\r\n                                        >\r\n                                            Real Date\r\n                                        </div>\r\n                                        <StyledTextField\r\n                                            classname='input-box' \r\n                                            type=\"date\" \r\n                                            name='realDate'\r\n                                            style = {{width: '70%'}} \r\n                                            fullWidth \r\n                                            size=\"small\" \r\n                                            variant=\"outlined\"\r\n                                            defaultValue={this.realDate}\r\n                                            onChange={(event) => {\r\n                                                console.log(\"new Date\",event.target.value)\r\n                                                this.currentdayChosed = this.getDayInWeek(event.target.value);\r\n                                                this.setState({dayChosed: this.getDayInWeek(event.target.value)});\r\n                                            }}\r\n                                        />\r\n                                    </Grid>\r\n                                    <Grid item md={6} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Choose Day in week\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 120 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                value={this.currentdayChosed}\r\n                                                onChange={(event) => {\r\n                                                    this.currentdayChosed = event.target.value;\r\n                                                    this.setState({dayChosed: event.target.value});\r\n                                                }}\r\n                                                readOnly = {true}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    listDayInWeek.map((item) =>\r\n                                                        <MenuItem value={item.ID}>\r\n                                                            {item.name}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n\r\n                                    <Grid item md={8} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '114px'}}>\r\n                                            Choose Shift\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 220 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                value={this.currentShipChosed}\r\n                                                onChange={(event) => {\r\n                                                    this.currentShipChosed = event.target.value;\r\n                                                    this.setState({shiftID: event.target.value});\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\r\n                                                    : this.props.listShift.map((shift) =>\r\n                                                        <MenuItem value={shift._id.shiftID}>\r\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Widraw Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                value={this.currentWidrawID}\r\n                                                onChange={(event) => {\r\n                                                    this.currentWidrawID = event.target.value;\r\n                                                    this.setState({withdrawID: event.target.value});\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={12} \r\n                                        className='input-item'\r\n                                    >\r\n                                        <div className=\"input-label\" style={{width: '220px'}}>\r\n                                            Alter Employee\r\n                                        </div>\r\n                                        <FormControl sx={{ minWidth: 320 }}>\r\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\r\n                                            <Select\r\n                                                value={this.currentAlterID}\r\n                                                onChange={(event) => {\r\n                                                    this.currentAlterID = event.target.value;\r\n                                                    this.setState({alterID: event.target.value});\r\n                                                }}\r\n                                                style={{\r\n                                                    height: 36,\r\n                                                }}\r\n                                            >\r\n                                                {\r\n                                                    this.props.listEmployee.employees.map((item) =>\r\n                                                        !(this.currentWidrawID == item._id.employeeID) ?\r\n                                                        <MenuItem value={item._id.employeeID}>\r\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\r\n                                                        </MenuItem>\r\n                                                        : null\r\n                                                    )\r\n                                                }   \r\n                                            </Select> \r\n                                        </FormControl>\r\n                                    </Grid>\r\n                                    <Grid item md={9}></Grid>\r\n                                    <Grid item md={3}\r\n                                        className='input-item'\r\n                                    >\r\n                                        <Button variant=\"contained\" onClick={() => this.updateChange()}>\r\n                                            Add Change\r\n                                        </Button>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </Card>\r\n                        </Grid>\r\n                        <Grid item sm={12} md={12} >\r\n                            \r\n                        </Grid>\r\n                    </Grid> \r\n                </div>\r\n                </Card>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n    return {\r\n        addEmployeeStatus: state.addEmployeeStatus,\r\n        confirmStatus: state.confirmStatus,\r\n        infoUser: state.infoUser,\r\n        listShift: state.listShift,\r\n        listEmployee: state.listEmployee,\r\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\r\n        updateNextWeekTimeKeepingValue: state.updateNextWeekTimeKeepingValue,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => {\r\n    return {\r\n        changeUpdateNextWeekTimeKeepingStatus: () => {\r\n            dispatch({\r\n                type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\r\n            });\r\n        },\r\n        getEmployee: (data) => {\r\n            dispatch({\r\n                type: \"GET_EMPLOYEE\",\r\n                employees: data,\r\n            });\r\n        },\r\n        addNewChange: (data) => {\r\n            dispatch({\r\n                type: \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\",\r\n                data: data,\r\n            });\r\n        },\r\n        \r\n        changeUpdateNextWeekTimeKeeping: (data, indexOfData) => {\r\n            dispatch({\r\n                type: \"UPDATE_NEXT_WEEK_TIMEKEEPER\",\r\n                data: data,\r\n                index: indexOfData,\r\n            });\r\n        },\r\n        deleteNextWeekTimeKeeping: (data) => {\r\n            dispatch({\r\n              type: \"DELETE_NEXT_WEEK_TIMEKEEPER\",\r\n              data: data\r\n            });\r\n            console.log(\"data\", data)\r\n          },\r\n        \r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateNextWeekTimeKeepingModal);\r\n\r\n               ","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Dashboard\\TypeTimeDashboard.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\DaiLyMoneyTracking.js",["942","943","944","945","946"],"import React from 'react';\r\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\r\nimport { Grid, TextField } from '@mui/material';\r\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\r\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\r\nimport { useSelector } from 'react-redux'\r\n\r\n\r\nfunction DaiLyMoneyTracking(props) {\r\n    const [value, setValue] = React.useState(new Date());\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const [dailyListReciept, setDailiListReciept] = React.useState([]);\r\n    const changeTime = (newValue) => {\r\n        if (newValue) {\r\n            setValue(newValue);\r\n        }\r\n    }\r\n\r\n\r\n    React.useEffect(() => {\r\n        let day = value.getDate()\r\n        let month = value.getMonth() + 1;\r\n        let year = value.getFullYear()\r\n        let arrListReciept\r\n        arrListReciept = listReciept.filter(value => {\r\n            let data = value.date;\r\n            data = data.replace(/\\s/g, \"\");\r\n            data = data.split(\"/\");\r\n            if (data[0] == day && data[1] == month && data[2] == year) {\r\n                return value\r\n            }\r\n        })\r\n        setDailiListReciept(arrListReciept)\r\n    }, [value])\r\n\r\n    return (\r\n        <div style={{ backgroundColor: 'white', borderRadius: '4px', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', overflow: 'hidden', marginBottom: '30px' }}>\r\n            <div style={{ height: 'auto', width: '90%', margin: 'auto', paddingTop: '20px' }}>\r\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                    <DesktopDatePicker\r\n                        label=\"Date\"\r\n                        value={value}\r\n                        minDate={new Date('2017-01-01')}\r\n                        onChange={(newValue) => changeTime(newValue)}\r\n                        renderInput={(params) => <TextField style={{ width: '100%' }} {...params} />}\r\n                    />\r\n                </LocalizationProvider>\r\n            </div>\r\n            <div id=\"choses-product\" style={{ backgroundColor: 'white', height: '500px', width: '80%', overflow: 'hidden', margin: 'auto', overflowY: 'scroll', marginTop: '20px' }}>\r\n                <ul style={{ textDecoration: 'none', listStyle: 'none', paddingLeft: '0' }}>\r\n                    {\r\n                        dailyListReciept.length !== 0 ? dailyListReciept.map(value => (\r\n                            <li style={{ borderBottom: '1px #0000004d solid', marginBottom: '5px', paddingBottom: '5px' }}>\r\n                                <Grid container spacing={2}>\r\n                                    <Grid item sm={6} md={6}>\r\n                                        <div>{value.deleted ? \"Hủy hóa đơn\" : \"Thành công\"}</div>\r\n                                        <div style={{ fontWeight: '700', color: value.deleted ? \"red\" : \"green\" }}>{value.deleted ? \"-\" : \"+\"} {value.totalFinalMoney}</div>\r\n                                    </Grid>\r\n                                    <Grid style={{ display: 'flex', justifyContent: 'center' }} item sm={6} md={3}>\r\n                                        <div style={{ color: '#00000075', paddingLeft: '10px', fontSize: '1rem' }}>{value.name}</div>\r\n                                    </Grid>\r\n                                    <Grid style={{ display: 'flex', justifyContent: 'center' }} item sm={6} md={3}>\r\n                                        <div style={{ color: '#00000075', paddingLeft: '10px', fontSize: '1rem' }}>{value.time}</div>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            </li>\r\n                        )) : (\r\n                            <div style={{ justifyContent: 'center', display: 'flex', marginTop: '100px', color: 'rgba(0,0,0,0.5)' }}>\r\n                                <h2>\r\n                                    You have not sold any invoices today\r\n                                </h2>\r\n                            </div>\r\n                        )\r\n                    }\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DaiLyMoneyTracking;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\GroupButtonDashboard.js",["947"],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Reducer\\Dashboard\\TypeHeaderDashboard.js",[],"D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\TotalMoney.js",["948","949","950","951","952","953","954","955","956","957","958","959","960","961","962","963","964","965","966","967"],"import React from 'react';\r\nimport { Typography } from '@mui/material';\r\nimport { RiMoneyDollarCircleFill } from 'react-icons/ri'\r\nimport { useSelector } from 'react-redux'\r\n\r\nfunction TotalMoney(props) {\r\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const [totalMoney, setTotalMoney] = React.useState('')\r\n\r\n    let nowTime = new Date()\r\n\r\n    React.useEffect(() => {\r\n        let money = 0;\r\n        let currentMonth = nowTime.getMonth() + 1;\r\n\r\n        if (typeHeaderDashboard == 'Today') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[0] == nowTime.getDate() && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\r\n                    if(!value.deleted) {\r\n                        money += value.totalFinalMoney\r\n                    }\r\n                }\r\n            })\r\n            setTotalMoney(money)\r\n        } else if (typeHeaderDashboard == 'Yesterday') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[0] == nowTime.getDate() - 1 && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\r\n                    if(!value.deleted){\r\n                        money += value.totalFinalMoney\r\n                    }\r\n                }\r\n            })\r\n            setTotalMoney(money)\r\n        } else if (typeHeaderDashboard == 'Month') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\r\n                    if(!value.deleted) {\r\n                        money += value.totalFinalMoney\r\n                    }\r\n                }\r\n            })\r\n            setTotalMoney(money)\r\n        } else if (typeHeaderDashboard == 'Year') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[2] == nowTime.getFullYear()) {\r\n                    if(!value.deleted) {\r\n                        money += value.totalFinalMoney\r\n                    }\r\n                }\r\n            })\r\n            setTotalMoney(money)\r\n        } else if (typeHeaderDashboard == 'All') {\r\n            listReciept.map(value => {\r\n                if(!value.deleted) {\r\n                    money += value.totalFinalMoney\r\n                }\r\n            })\r\n            setTotalMoney(money)\r\n        }\r\n    }, [typeHeaderDashboard])\r\n\r\n    return (\r\n        <div className=\"dashboard-css\">\r\n            <div className=\"dashboard-item-img\" style={{ marginBottom: '30px' }}>\r\n                <RiMoneyDollarCircleFill className=\"dashboard-item-icon\"></RiMoneyDollarCircleFill>\r\n            </div>\r\n            <Typography style={{ marginBottom: '10px' }} variant=\"h6\">{totalMoney.toLocaleString()} VNĐ  \r\n            </Typography>\r\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                Total money\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TotalMoney;","D:\\UIT\\Nam3_HKI\\SE100Project\\client\\src\\Components\\Dashboard\\ErrorReceipt.js",["968","969","970","971","972","973","974","975","976","977","978","979","980","981","982","983","984","985","986","987"],"import React from 'react';\r\nimport { Typography } from '@mui/material';\r\nimport { FaReceipt } from 'react-icons/fa'\r\nimport { useSelector } from 'react-redux'\r\n\r\nfunction ErrorReceipt(props) {\r\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\r\n    const listReciept = useSelector(state => state.listReciept)\r\n    const [index, setIndex] = React.useState(0)\r\n    let nowTime = new Date()\r\n    React.useEffect(() => {\r\n        let errorReciept = 0;\r\n        let currentMonth = nowTime.getMonth() + 1;\r\n        if (typeHeaderDashboard == 'Today') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[0] == nowTime.getDate() && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\r\n                    if (value.deleted) {\r\n                        errorReciept++\r\n                    }\r\n                }\r\n            })\r\n            setIndex(errorReciept)\r\n        } else if (typeHeaderDashboard == 'Yesterday') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[0] == nowTime.getDate() - 1 && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\r\n                    if(value.deleted) errorReciept++\r\n                }\r\n            })\r\n            setIndex(errorReciept)\r\n        } else if (typeHeaderDashboard == 'Month') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\r\n                    if (value.deleted) errorReciept++\r\n                }\r\n            })\r\n            setIndex(errorReciept)\r\n        } else if (typeHeaderDashboard == 'Year') {\r\n            listReciept.map(value => {\r\n                let date = value.date.replace(/\\s/g, \"\");\r\n                date = date.split(\"/\");\r\n                if (date[2] == nowTime.getFullYear()) {\r\n                    if (value.deleted) errorReciept++\r\n                }\r\n            })\r\n            setIndex(errorReciept)\r\n        } else if (typeHeaderDashboard == 'All') {\r\n            listReciept.map(value => {\r\n                if (value.deleted) {\r\n                    errorReciept++\r\n                }\r\n            })\r\n            setIndex(errorReciept)\r\n        }\r\n    }, [typeHeaderDashboard])\r\n\r\n    return (\r\n        <div className=\"dashboard-css error-receipt\">\r\n            <div className=\"dashboard-item-img error-receipt\" style={{ marginBottom: '30px' }}>\r\n                <FaReceipt className=\"dashboard-item-icon error-receipt\"></FaReceipt>\r\n            </div>\r\n            <Typography style={{ marginBottom: '10px' }} variant=\"h4\">{index}</Typography>\r\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\r\n                Error receipt\r\n            </Typography>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ErrorReceipt;",{"ruleId":"988","replacedBy":"989"},{"ruleId":"990","replacedBy":"991"},{"ruleId":"992","severity":1,"message":"993","line":10,"column":10,"nodeType":"994","messageId":"995","endLine":10,"endColumn":24},{"ruleId":"996","severity":1,"message":"997","line":13,"column":3,"nodeType":"998","messageId":"999","endLine":15,"endColumn":4},{"ruleId":"1000","severity":1,"message":"1001","line":5,"column":46,"nodeType":"1002","messageId":"1003","endLine":5,"endColumn":48},{"ruleId":"1000","severity":1,"message":"1004","line":40,"column":45,"nodeType":"1002","messageId":"1005","endLine":40,"endColumn":47},{"ruleId":"1000","severity":1,"message":"1001","line":47,"column":48,"nodeType":"1002","messageId":"1003","endLine":47,"endColumn":50},{"ruleId":"1000","severity":1,"message":"1004","line":21,"column":45,"nodeType":"1002","messageId":"1005","endLine":21,"endColumn":47},{"ruleId":"1006","severity":1,"message":"1007","line":38,"column":30,"nodeType":"1008","messageId":"1009","endLine":38,"endColumn":32},{"ruleId":"1010","severity":1,"message":"1011","line":56,"column":25,"nodeType":"994","messageId":"1012","endLine":56,"endColumn":33},{"ruleId":"1010","severity":1,"message":"1013","line":57,"column":29,"nodeType":"994","messageId":"1012","endLine":57,"endColumn":30},{"ruleId":"1014","severity":1,"message":"1015","line":94,"column":28,"nodeType":"1016","messageId":"1017","endLine":94,"endColumn":29,"suggestions":"1018"},{"ruleId":"1014","severity":1,"message":"1015","line":94,"column":44,"nodeType":"1016","messageId":"1017","endLine":94,"endColumn":45,"suggestions":"1019"},{"ruleId":"1020","severity":1,"message":"1021","line":279,"column":9,"nodeType":"1022","messageId":"1009","endLine":279,"endColumn":25},{"ruleId":"992","severity":1,"message":"1023","line":6,"column":8,"nodeType":"994","messageId":"995","endLine":6,"endColumn":15},{"ruleId":"1014","severity":1,"message":"1015","line":96,"column":28,"nodeType":"1016","messageId":"1017","endLine":96,"endColumn":29,"suggestions":"1024"},{"ruleId":"1014","severity":1,"message":"1015","line":96,"column":44,"nodeType":"1016","messageId":"1017","endLine":96,"endColumn":45,"suggestions":"1025"},{"ruleId":"992","severity":1,"message":"1026","line":9,"column":10,"nodeType":"994","messageId":"995","endLine":9,"endColumn":19},{"ruleId":"992","severity":1,"message":"1027","line":14,"column":8,"nodeType":"994","messageId":"995","endLine":14,"endColumn":13},{"ruleId":"992","severity":1,"message":"1023","line":13,"column":8,"nodeType":"994","messageId":"995","endLine":13,"endColumn":15},{"ruleId":"1014","severity":1,"message":"1015","line":105,"column":30,"nodeType":"1016","messageId":"1017","endLine":105,"endColumn":31,"suggestions":"1028"},{"ruleId":"1014","severity":1,"message":"1015","line":105,"column":46,"nodeType":"1016","messageId":"1017","endLine":105,"endColumn":47,"suggestions":"1029"},{"ruleId":"992","severity":1,"message":"1030","line":9,"column":11,"nodeType":"994","messageId":"995","endLine":9,"endColumn":32},{"ruleId":"992","severity":1,"message":"1031","line":119,"column":15,"nodeType":"994","messageId":"995","endLine":119,"endColumn":30},{"ruleId":"1032","severity":1,"message":"1033","line":135,"column":29,"nodeType":"1034","endLine":135,"endColumn":161},{"ruleId":"1006","severity":1,"message":"1035","line":141,"column":45,"nodeType":"1008","messageId":"1009","endLine":141,"endColumn":47},{"ruleId":"1006","severity":1,"message":"1035","line":154,"column":45,"nodeType":"1008","messageId":"1009","endLine":154,"endColumn":47},{"ruleId":"1036","severity":1,"message":"1037","line":219,"column":25,"nodeType":"1034","endLine":224,"endColumn":26},{"ruleId":"1036","severity":1,"message":"1038","line":228,"column":25,"nodeType":"1034","endLine":228,"endColumn":136},{"ruleId":"992","severity":1,"message":"1039","line":2,"column":10,"nodeType":"994","messageId":"995","endLine":2,"endColumn":18},{"ruleId":"992","severity":1,"message":"1040","line":2,"column":8,"nodeType":"994","messageId":"995","endLine":2,"endColumn":12},{"ruleId":"992","severity":1,"message":"1041","line":3,"column":8,"nodeType":"994","messageId":"995","endLine":3,"endColumn":13},{"ruleId":"992","severity":1,"message":"1042","line":4,"column":8,"nodeType":"994","messageId":"995","endLine":4,"endColumn":17},{"ruleId":"992","severity":1,"message":"1043","line":5,"column":8,"nodeType":"994","messageId":"995","endLine":5,"endColumn":22},{"ruleId":"992","severity":1,"message":"1044","line":7,"column":10,"nodeType":"994","messageId":"995","endLine":7,"endColumn":22},{"ruleId":"992","severity":1,"message":"1045","line":14,"column":5,"nodeType":"994","messageId":"995","endLine":14,"endColumn":11},{"ruleId":"992","severity":1,"message":"1046","line":23,"column":5,"nodeType":"994","messageId":"995","endLine":23,"endColumn":20},{"ruleId":"992","severity":1,"message":"1047","line":25,"column":8,"nodeType":"994","messageId":"995","endLine":25,"endColumn":23},{"ruleId":"992","severity":1,"message":"1048","line":45,"column":10,"nodeType":"994","messageId":"995","endLine":45,"endColumn":21},{"ruleId":"992","severity":1,"message":"1049","line":97,"column":5,"nodeType":"994","messageId":"995","endLine":97,"endColumn":15},{"ruleId":"992","severity":1,"message":"1050","line":98,"column":5,"nodeType":"994","messageId":"995","endLine":98,"endColumn":18},{"ruleId":"992","severity":1,"message":"1051","line":100,"column":5,"nodeType":"994","messageId":"995","endLine":100,"endColumn":9},{"ruleId":"992","severity":1,"message":"1052","line":101,"column":5,"nodeType":"994","messageId":"995","endLine":101,"endColumn":16},{"ruleId":"1006","severity":1,"message":"1007","line":466,"column":75,"nodeType":"1008","messageId":"1009","endLine":466,"endColumn":77},{"ruleId":"992","severity":1,"message":"1053","line":6,"column":10,"nodeType":"994","messageId":"995","endLine":6,"endColumn":20},{"ruleId":"992","severity":1,"message":"1054","line":6,"column":30,"nodeType":"994","messageId":"995","endLine":6,"endColumn":35},{"ruleId":"992","severity":1,"message":"1055","line":11,"column":8,"nodeType":"994","messageId":"995","endLine":11,"endColumn":17},{"ruleId":"992","severity":1,"message":"1056","line":15,"column":8,"nodeType":"994","messageId":"995","endLine":15,"endColumn":22},{"ruleId":"992","severity":1,"message":"1057","line":16,"column":8,"nodeType":"994","messageId":"995","endLine":16,"endColumn":22},{"ruleId":"992","severity":1,"message":"1058","line":17,"column":8,"nodeType":"994","messageId":"995","endLine":17,"endColumn":28},{"ruleId":"992","severity":1,"message":"1059","line":20,"column":10,"nodeType":"994","messageId":"995","endLine":20,"endColumn":29},{"ruleId":"1006","severity":1,"message":"1035","line":185,"column":31,"nodeType":"1008","messageId":"1009","endLine":185,"endColumn":33},{"ruleId":"1006","severity":1,"message":"1035","line":192,"column":78,"nodeType":"1008","messageId":"1009","endLine":192,"endColumn":80},{"ruleId":"1006","severity":1,"message":"1035","line":206,"column":70,"nodeType":"1008","messageId":"1009","endLine":206,"endColumn":72},{"ruleId":"1006","severity":1,"message":"1035","line":214,"column":79,"nodeType":"1008","messageId":"1009","endLine":214,"endColumn":81},{"ruleId":"1006","severity":1,"message":"1035","line":227,"column":75,"nodeType":"1008","messageId":"1009","endLine":227,"endColumn":77},{"ruleId":"1006","severity":1,"message":"1035","line":263,"column":31,"nodeType":"1008","messageId":"1009","endLine":263,"endColumn":33},{"ruleId":"1010","severity":1,"message":"1013","line":299,"column":17,"nodeType":"994","messageId":"1012","endLine":299,"endColumn":18},{"ruleId":"1006","severity":1,"message":"1035","line":351,"column":44,"nodeType":"1008","messageId":"1009","endLine":351,"endColumn":46},{"ruleId":"1006","severity":1,"message":"1035","line":363,"column":26,"nodeType":"1008","messageId":"1009","endLine":363,"endColumn":28},{"ruleId":"1006","severity":1,"message":"1035","line":387,"column":140,"nodeType":"1008","messageId":"1009","endLine":387,"endColumn":142},{"ruleId":"1006","severity":1,"message":"1035","line":579,"column":84,"nodeType":"1008","messageId":"1009","endLine":579,"endColumn":86},{"ruleId":"1006","severity":1,"message":"1007","line":610,"column":77,"nodeType":"1008","messageId":"1009","endLine":610,"endColumn":79},{"ruleId":"1000","severity":1,"message":"1004","line":185,"column":89,"nodeType":"1002","messageId":"1005","endLine":185,"endColumn":91},{"ruleId":"992","severity":1,"message":"1060","line":2,"column":43,"nodeType":"994","messageId":"995","endLine":2,"endColumn":52},{"ruleId":"992","severity":1,"message":"1061","line":4,"column":10,"nodeType":"994","messageId":"995","endLine":4,"endColumn":23},{"ruleId":"992","severity":1,"message":"1062","line":9,"column":8,"nodeType":"994","messageId":"995","endLine":9,"endColumn":20},{"ruleId":"1010","severity":1,"message":"1013","line":137,"column":17,"nodeType":"994","messageId":"1012","endLine":137,"endColumn":18},{"ruleId":"1010","severity":1,"message":"1063","line":23,"column":21,"nodeType":"994","messageId":"1012","endLine":23,"endColumn":29},{"ruleId":"1010","severity":1,"message":"1064","line":24,"column":21,"nodeType":"994","messageId":"1012","endLine":24,"endColumn":28},{"ruleId":"1010","severity":1,"message":"1065","line":34,"column":21,"nodeType":"994","messageId":"1012","endLine":34,"endColumn":27},{"ruleId":"1010","severity":1,"message":"1066","line":35,"column":21,"nodeType":"994","messageId":"1012","endLine":35,"endColumn":26},{"ruleId":"992","severity":1,"message":"1067","line":5,"column":10,"nodeType":"994","messageId":"995","endLine":5,"endColumn":26},{"ruleId":"1006","severity":1,"message":"1035","line":28,"column":28,"nodeType":"1008","messageId":"1009","endLine":28,"endColumn":30},{"ruleId":"1006","severity":1,"message":"1007","line":29,"column":29,"nodeType":"1008","messageId":"1009","endLine":29,"endColumn":31},{"ruleId":"992","severity":1,"message":"1027","line":2,"column":80,"nodeType":"994","messageId":"995","endLine":2,"endColumn":85},{"ruleId":"992","severity":1,"message":"1068","line":4,"column":25,"nodeType":"994","messageId":"995","endLine":4,"endColumn":31},{"ruleId":"992","severity":1,"message":"1069","line":6,"column":20,"nodeType":"994","messageId":"995","endLine":6,"endColumn":33},{"ruleId":"1006","severity":1,"message":"1035","line":52,"column":45,"nodeType":"1008","messageId":"1009","endLine":52,"endColumn":47},{"ruleId":"1006","severity":1,"message":"1035","line":83,"column":37,"nodeType":"1008","messageId":"1009","endLine":83,"endColumn":39},{"ruleId":"1006","severity":1,"message":"1035","line":85,"column":66,"nodeType":"1008","messageId":"1009","endLine":85,"endColumn":68},{"ruleId":"1006","severity":1,"message":"1035","line":96,"column":27,"nodeType":"1008","messageId":"1009","endLine":96,"endColumn":29},{"ruleId":"1006","severity":1,"message":"1035","line":117,"column":45,"nodeType":"1008","messageId":"1009","endLine":117,"endColumn":47},{"ruleId":"992","severity":1,"message":"1070","line":4,"column":10,"nodeType":"994","messageId":"995","endLine":4,"endColumn":14},{"ruleId":"992","severity":1,"message":"1071","line":4,"column":43,"nodeType":"994","messageId":"995","endLine":4,"endColumn":54},{"ruleId":"1000","severity":1,"message":"1001","line":44,"column":39,"nodeType":"1002","messageId":"1003","endLine":44,"endColumn":41},{"ruleId":"1000","severity":1,"message":"1001","line":52,"column":39,"nodeType":"1002","messageId":"1003","endLine":52,"endColumn":41},{"ruleId":"1000","severity":1,"message":"1001","line":64,"column":39,"nodeType":"1002","messageId":"1003","endLine":64,"endColumn":41},{"ruleId":"1072","severity":1,"message":"1073","line":172,"column":8,"nodeType":"1074","endLine":172,"endColumn":10,"suggestions":"1075"},{"ruleId":"1000","severity":1,"message":"1001","line":52,"column":35,"nodeType":"1002","messageId":"1003","endLine":52,"endColumn":37},{"ruleId":"1000","severity":1,"message":"1004","line":462,"column":86,"nodeType":"1002","messageId":"1005","endLine":462,"endColumn":88},{"ruleId":"1000","severity":1,"message":"1004","line":485,"column":38,"nodeType":"1002","messageId":"1005","endLine":485,"endColumn":40},{"ruleId":"1006","severity":1,"message":"1035","line":489,"column":36,"nodeType":"1008","messageId":"1009","endLine":489,"endColumn":38},{"ruleId":"1006","severity":1,"message":"1035","line":489,"column":70,"nodeType":"1008","messageId":"1009","endLine":489,"endColumn":72},{"ruleId":"1006","severity":1,"message":"1035","line":489,"column":103,"nodeType":"1008","messageId":"1009","endLine":489,"endColumn":105},{"ruleId":"1000","severity":1,"message":"1004","line":496,"column":38,"nodeType":"1002","messageId":"1005","endLine":496,"endColumn":40},{"ruleId":"1006","severity":1,"message":"1035","line":500,"column":38,"nodeType":"1008","messageId":"1009","endLine":500,"endColumn":40},{"ruleId":"1006","severity":1,"message":"1035","line":500,"column":71,"nodeType":"1008","messageId":"1009","endLine":500,"endColumn":73},{"ruleId":"1000","severity":1,"message":"1004","line":507,"column":38,"nodeType":"1002","messageId":"1005","endLine":507,"endColumn":40},{"ruleId":"1006","severity":1,"message":"1035","line":511,"column":37,"nodeType":"1008","messageId":"1009","endLine":511,"endColumn":39},{"ruleId":"1000","severity":1,"message":"1004","line":518,"column":38,"nodeType":"1002","messageId":"1005","endLine":518,"endColumn":40},{"ruleId":"1000","severity":1,"message":"1001","line":532,"column":24,"nodeType":"1002","messageId":"1003","endLine":532,"endColumn":26},{"ruleId":"1072","severity":1,"message":"1076","line":543,"column":8,"nodeType":"1074","endLine":543,"endColumn":71,"suggestions":"1077"},{"ruleId":"1072","severity":1,"message":"1073","line":50,"column":6,"nodeType":"1074","endLine":50,"endColumn":8,"suggestions":"1078"},{"ruleId":"992","severity":1,"message":"1079","line":1,"column":17,"nodeType":"994","messageId":"995","endLine":1,"endColumn":20},{"ruleId":"992","severity":1,"message":"1080","line":9,"column":23,"nodeType":"994","messageId":"995","endLine":9,"endColumn":34},{"ruleId":"992","severity":1,"message":"1081","line":11,"column":10,"nodeType":"994","messageId":"995","endLine":11,"endColumn":14},{"ruleId":"992","severity":1,"message":"1082","line":16,"column":10,"nodeType":"994","messageId":"995","endLine":16,"endColumn":15},{"ruleId":"1000","severity":1,"message":"1001","line":176,"column":23,"nodeType":"1002","messageId":"1003","endLine":176,"endColumn":25},{"ruleId":"1000","severity":1,"message":"1001","line":180,"column":31,"nodeType":"1002","messageId":"1003","endLine":180,"endColumn":33},{"ruleId":"1000","severity":1,"message":"1001","line":186,"column":43,"nodeType":"1002","messageId":"1003","endLine":186,"endColumn":45},{"ruleId":"1000","severity":1,"message":"1004","line":248,"column":37,"nodeType":"1002","messageId":"1005","endLine":248,"endColumn":39},{"ruleId":"1000","severity":1,"message":"1001","line":274,"column":33,"nodeType":"1002","messageId":"1003","endLine":274,"endColumn":35},{"ruleId":"1006","severity":1,"message":"1035","line":277,"column":23,"nodeType":"1008","messageId":"1009","endLine":277,"endColumn":25},{"ruleId":"1006","severity":1,"message":"1035","line":277,"column":56,"nodeType":"1008","messageId":"1009","endLine":277,"endColumn":58},{"ruleId":"1006","severity":1,"message":"1035","line":277,"column":89,"nodeType":"1008","messageId":"1009","endLine":277,"endColumn":91},{"ruleId":"1006","severity":1,"message":"1035","line":277,"column":122,"nodeType":"1008","messageId":"1009","endLine":277,"endColumn":124},{"ruleId":"1006","severity":1,"message":"1035","line":279,"column":27,"nodeType":"1008","messageId":"1009","endLine":279,"endColumn":29},{"ruleId":"1006","severity":1,"message":"1035","line":279,"column":53,"nodeType":"1008","messageId":"1009","endLine":279,"endColumn":55},{"ruleId":"1000","severity":1,"message":"1001","line":281,"column":45,"nodeType":"1002","messageId":"1003","endLine":281,"endColumn":47},{"ruleId":"1083","severity":1,"message":"1084","line":297,"column":27,"nodeType":"1002","messageId":"1085","endLine":308,"endColumn":12},{"ruleId":"1000","severity":1,"message":"1001","line":297,"column":35,"nodeType":"1002","messageId":"1003","endLine":297,"endColumn":37},{"ruleId":"1006","severity":1,"message":"1035","line":300,"column":19,"nodeType":"1008","messageId":"1009","endLine":300,"endColumn":21},{"ruleId":"1006","severity":1,"message":"1035","line":300,"column":46,"nodeType":"1008","messageId":"1009","endLine":300,"endColumn":48},{"ruleId":"1006","severity":1,"message":"1035","line":300,"column":72,"nodeType":"1008","messageId":"1009","endLine":300,"endColumn":74},{"ruleId":"1000","severity":1,"message":"1001","line":303,"column":47,"nodeType":"1002","messageId":"1003","endLine":303,"endColumn":49},{"ruleId":"1000","severity":1,"message":"1001","line":326,"column":33,"nodeType":"1002","messageId":"1003","endLine":326,"endColumn":35},{"ruleId":"1006","severity":1,"message":"1035","line":329,"column":23,"nodeType":"1008","messageId":"1009","endLine":329,"endColumn":25},{"ruleId":"1006","severity":1,"message":"1035","line":329,"column":56,"nodeType":"1008","messageId":"1009","endLine":329,"endColumn":58},{"ruleId":"1006","severity":1,"message":"1035","line":329,"column":89,"nodeType":"1008","messageId":"1009","endLine":329,"endColumn":91},{"ruleId":"1006","severity":1,"message":"1035","line":329,"column":122,"nodeType":"1008","messageId":"1009","endLine":329,"endColumn":124},{"ruleId":"1006","severity":1,"message":"1035","line":330,"column":23,"nodeType":"1008","messageId":"1009","endLine":330,"endColumn":25},{"ruleId":"1006","severity":1,"message":"1035","line":330,"column":49,"nodeType":"1008","messageId":"1009","endLine":330,"endColumn":51},{"ruleId":"1000","severity":1,"message":"1001","line":333,"column":47,"nodeType":"1002","messageId":"1003","endLine":333,"endColumn":49},{"ruleId":"1083","severity":1,"message":"1084","line":349,"column":27,"nodeType":"1002","messageId":"1085","endLine":360,"endColumn":12},{"ruleId":"1000","severity":1,"message":"1001","line":349,"column":35,"nodeType":"1002","messageId":"1003","endLine":349,"endColumn":37},{"ruleId":"1006","severity":1,"message":"1035","line":352,"column":19,"nodeType":"1008","messageId":"1009","endLine":352,"endColumn":21},{"ruleId":"1006","severity":1,"message":"1035","line":352,"column":46,"nodeType":"1008","messageId":"1009","endLine":352,"endColumn":48},{"ruleId":"1006","severity":1,"message":"1035","line":352,"column":72,"nodeType":"1008","messageId":"1009","endLine":352,"endColumn":74},{"ruleId":"1000","severity":1,"message":"1001","line":355,"column":47,"nodeType":"1002","messageId":"1003","endLine":355,"endColumn":49},{"ruleId":"1000","severity":1,"message":"1001","line":388,"column":31,"nodeType":"1002","messageId":"1003","endLine":388,"endColumn":33},{"ruleId":"1006","severity":1,"message":"1035","line":391,"column":15,"nodeType":"1008","messageId":"1009","endLine":391,"endColumn":17},{"ruleId":"1006","severity":1,"message":"1035","line":391,"column":48,"nodeType":"1008","messageId":"1009","endLine":391,"endColumn":50},{"ruleId":"1000","severity":1,"message":"1001","line":394,"column":43,"nodeType":"1002","messageId":"1003","endLine":394,"endColumn":45},{"ruleId":"1000","severity":1,"message":"1001","line":415,"column":27,"nodeType":"1002","messageId":"1003","endLine":415,"endColumn":29},{"ruleId":"1000","severity":1,"message":"1001","line":417,"column":31,"nodeType":"1002","messageId":"1003","endLine":417,"endColumn":33},{"ruleId":"1006","severity":1,"message":"1035","line":421,"column":25,"nodeType":"1008","messageId":"1009","endLine":421,"endColumn":27},{"ruleId":"1006","severity":1,"message":"1035","line":421,"column":52,"nodeType":"1008","messageId":"1009","endLine":421,"endColumn":54},{"ruleId":"1006","severity":1,"message":"1035","line":421,"column":79,"nodeType":"1008","messageId":"1009","endLine":421,"endColumn":81},{"ruleId":"1000","severity":1,"message":"1001","line":429,"column":24,"nodeType":"1002","messageId":"1003","endLine":429,"endColumn":26},{"ruleId":"1000","severity":1,"message":"1001","line":431,"column":31,"nodeType":"1002","messageId":"1003","endLine":431,"endColumn":33},{"ruleId":"1006","severity":1,"message":"1035","line":435,"column":25,"nodeType":"1008","messageId":"1009","endLine":435,"endColumn":27},{"ruleId":"1006","severity":1,"message":"1035","line":435,"column":52,"nodeType":"1008","messageId":"1009","endLine":435,"endColumn":54},{"ruleId":"1006","severity":1,"message":"1035","line":435,"column":79,"nodeType":"1008","messageId":"1009","endLine":435,"endColumn":81},{"ruleId":"1006","severity":1,"message":"1035","line":442,"column":21,"nodeType":"1008","messageId":"1009","endLine":442,"endColumn":23},{"ruleId":"1006","severity":1,"message":"1035","line":442,"column":42,"nodeType":"1008","messageId":"1009","endLine":442,"endColumn":44},{"ruleId":"1006","severity":1,"message":"1035","line":444,"column":28,"nodeType":"1008","messageId":"1009","endLine":444,"endColumn":30},{"ruleId":"1006","severity":1,"message":"1035","line":446,"column":31,"nodeType":"1008","messageId":"1009","endLine":446,"endColumn":33},{"ruleId":"1006","severity":1,"message":"1035","line":456,"column":21,"nodeType":"1008","messageId":"1009","endLine":456,"endColumn":23},{"ruleId":"1006","severity":1,"message":"1035","line":456,"column":40,"nodeType":"1008","messageId":"1009","endLine":456,"endColumn":42},{"ruleId":"1000","severity":1,"message":"1001","line":460,"column":29,"nodeType":"1002","messageId":"1003","endLine":460,"endColumn":31},{"ruleId":"1006","severity":1,"message":"1035","line":463,"column":21,"nodeType":"1008","messageId":"1009","endLine":463,"endColumn":23},{"ruleId":"1006","severity":1,"message":"1035","line":463,"column":48,"nodeType":"1008","messageId":"1009","endLine":463,"endColumn":50},{"ruleId":"1006","severity":1,"message":"1035","line":468,"column":21,"nodeType":"1008","messageId":"1009","endLine":468,"endColumn":23},{"ruleId":"1006","severity":1,"message":"1035","line":468,"column":45,"nodeType":"1008","messageId":"1009","endLine":468,"endColumn":47},{"ruleId":"1006","severity":1,"message":"1035","line":474,"column":21,"nodeType":"1008","messageId":"1009","endLine":474,"endColumn":23},{"ruleId":"1006","severity":1,"message":"1035","line":474,"column":42,"nodeType":"1008","messageId":"1009","endLine":474,"endColumn":44},{"ruleId":"1006","severity":1,"message":"1035","line":476,"column":28,"nodeType":"1008","messageId":"1009","endLine":476,"endColumn":30},{"ruleId":"1006","severity":1,"message":"1035","line":478,"column":31,"nodeType":"1008","messageId":"1009","endLine":478,"endColumn":33},{"ruleId":"1000","severity":1,"message":"1001","line":491,"column":29,"nodeType":"1002","messageId":"1003","endLine":491,"endColumn":31},{"ruleId":"1006","severity":1,"message":"1035","line":494,"column":21,"nodeType":"1008","messageId":"1009","endLine":494,"endColumn":23},{"ruleId":"1006","severity":1,"message":"1035","line":499,"column":21,"nodeType":"1008","messageId":"1009","endLine":499,"endColumn":23},{"ruleId":"1006","severity":1,"message":"1035","line":505,"column":21,"nodeType":"1008","messageId":"1009","endLine":505,"endColumn":23},{"ruleId":"1006","severity":1,"message":"1035","line":505,"column":42,"nodeType":"1008","messageId":"1009","endLine":505,"endColumn":44},{"ruleId":"1006","severity":1,"message":"1035","line":507,"column":28,"nodeType":"1008","messageId":"1009","endLine":507,"endColumn":30},{"ruleId":"1006","severity":1,"message":"1035","line":509,"column":31,"nodeType":"1008","messageId":"1009","endLine":509,"endColumn":33},{"ruleId":"1072","severity":1,"message":"1086","line":544,"column":6,"nodeType":"1074","endLine":544,"endColumn":33,"suggestions":"1087"},{"ruleId":"992","severity":1,"message":"1060","line":2,"column":43,"nodeType":"994","messageId":"995","endLine":2,"endColumn":52},{"ruleId":"992","severity":1,"message":"1068","line":4,"column":25,"nodeType":"994","messageId":"995","endLine":4,"endColumn":31},{"ruleId":"992","severity":1,"message":"1088","line":7,"column":8,"nodeType":"994","messageId":"995","endLine":7,"endColumn":13},{"ruleId":"996","severity":1,"message":"997","line":10,"column":5,"nodeType":"998","messageId":"999","endLine":12,"endColumn":6},{"ruleId":"1089","severity":1,"message":"1090","line":26,"column":9,"nodeType":"1091","messageId":"1092","endLine":32,"endColumn":10},{"ruleId":"1093","severity":1,"message":"1094","line":30,"column":13,"nodeType":"1095","messageId":"1096","endLine":31,"endColumn":67},{"ruleId":"1000","severity":1,"message":"1001","line":119,"column":35,"nodeType":"1002","messageId":"1003","endLine":119,"endColumn":37},{"ruleId":"1000","severity":1,"message":"1001","line":31,"column":43,"nodeType":"1002","messageId":"1003","endLine":31,"endColumn":45},{"ruleId":"1000","severity":1,"message":"1001","line":39,"column":43,"nodeType":"1002","messageId":"1003","endLine":39,"endColumn":45},{"ruleId":"1000","severity":1,"message":"1001","line":50,"column":43,"nodeType":"1002","messageId":"1003","endLine":50,"endColumn":45},{"ruleId":"992","severity":1,"message":"1097","line":4,"column":10,"nodeType":"994","messageId":"995","endLine":4,"endColumn":14},{"ruleId":"992","severity":1,"message":"1098","line":5,"column":8,"nodeType":"994","messageId":"995","endLine":5,"endColumn":24},{"ruleId":"992","severity":1,"message":"1099","line":11,"column":3,"nodeType":"994","messageId":"995","endLine":11,"endColumn":7},{"ruleId":"992","severity":1,"message":"1100","line":11,"column":9,"nodeType":"994","messageId":"995","endLine":11,"endColumn":17},{"ruleId":"992","severity":1,"message":"1070","line":11,"column":19,"nodeType":"994","messageId":"995","endLine":11,"endColumn":23},{"ruleId":"1006","severity":1,"message":"1035","line":73,"column":36,"nodeType":"1008","messageId":"1009","endLine":73,"endColumn":38},{"ruleId":"1006","severity":1,"message":"1035","line":86,"column":44,"nodeType":"1008","messageId":"1009","endLine":86,"endColumn":46},{"ruleId":"1006","severity":1,"message":"1007","line":151,"column":87,"nodeType":"1008","messageId":"1009","endLine":151,"endColumn":89},{"ruleId":"992","severity":1,"message":"1101","line":6,"column":72,"nodeType":"994","messageId":"995","endLine":6,"endColumn":78},{"ruleId":"992","severity":1,"message":"1102","line":2,"column":28,"nodeType":"994","messageId":"995","endLine":2,"endColumn":35},{"ruleId":"992","severity":1,"message":"1103","line":2,"column":54,"nodeType":"994","messageId":"995","endLine":2,"endColumn":57},{"ruleId":"992","severity":1,"message":"1071","line":2,"column":59,"nodeType":"994","messageId":"995","endLine":2,"endColumn":70},{"ruleId":"992","severity":1,"message":"1053","line":2,"column":80,"nodeType":"994","messageId":"995","endLine":2,"endColumn":90},{"ruleId":"1006","severity":1,"message":"1035","line":39,"column":68,"nodeType":"1008","messageId":"1009","endLine":39,"endColumn":70},{"ruleId":"1006","severity":1,"message":"1035","line":50,"column":28,"nodeType":"1008","messageId":"1009","endLine":50,"endColumn":30},{"ruleId":"1006","severity":1,"message":"1035","line":62,"column":29,"nodeType":"1008","messageId":"1009","endLine":62,"endColumn":31},{"ruleId":"1006","severity":1,"message":"1035","line":69,"column":28,"nodeType":"1008","messageId":"1009","endLine":69,"endColumn":30},{"ruleId":"1006","severity":1,"message":"1035","line":76,"column":26,"nodeType":"1008","messageId":"1009","endLine":76,"endColumn":28},{"ruleId":"1006","severity":1,"message":"1035","line":83,"column":31,"nodeType":"1008","messageId":"1009","endLine":83,"endColumn":33},{"ruleId":"1006","severity":1,"message":"1035","line":95,"column":26,"nodeType":"1008","messageId":"1009","endLine":95,"endColumn":28},{"ruleId":"1006","severity":1,"message":"1035","line":102,"column":28,"nodeType":"1008","messageId":"1009","endLine":102,"endColumn":30},{"ruleId":"1006","severity":1,"message":"1035","line":109,"column":25,"nodeType":"1008","messageId":"1009","endLine":109,"endColumn":27},{"ruleId":"1006","severity":1,"message":"1035","line":114,"column":30,"nodeType":"1008","messageId":"1009","endLine":114,"endColumn":32},{"ruleId":"1006","severity":1,"message":"1035","line":114,"column":56,"nodeType":"1008","messageId":"1009","endLine":114,"endColumn":58},{"ruleId":"1006","severity":1,"message":"1035","line":137,"column":35,"nodeType":"1008","messageId":"1009","endLine":137,"endColumn":37},{"ruleId":"1006","severity":1,"message":"1035","line":228,"column":127,"nodeType":"1008","messageId":"1009","endLine":228,"endColumn":129},{"ruleId":"992","severity":1,"message":"1102","line":2,"column":28,"nodeType":"994","messageId":"995","endLine":2,"endColumn":35},{"ruleId":"992","severity":1,"message":"1103","line":2,"column":54,"nodeType":"994","messageId":"995","endLine":2,"endColumn":57},{"ruleId":"992","severity":1,"message":"1071","line":2,"column":59,"nodeType":"994","messageId":"995","endLine":2,"endColumn":70},{"ruleId":"992","severity":1,"message":"1053","line":2,"column":80,"nodeType":"994","messageId":"995","endLine":2,"endColumn":90},{"ruleId":"992","severity":1,"message":"1104","line":4,"column":10,"nodeType":"994","messageId":"995","endLine":4,"endColumn":15},{"ruleId":"992","severity":1,"message":"1105","line":9,"column":5,"nodeType":"994","messageId":"995","endLine":9,"endColumn":17},{"ruleId":"992","severity":1,"message":"1106","line":13,"column":5,"nodeType":"994","messageId":"995","endLine":13,"endColumn":12},{"ruleId":"1006","severity":1,"message":"1035","line":98,"column":23,"nodeType":"1008","messageId":"1009","endLine":98,"endColumn":25},{"ruleId":"1006","severity":1,"message":"1035","line":105,"column":68,"nodeType":"1008","messageId":"1009","endLine":105,"endColumn":70},{"ruleId":"1010","severity":1,"message":"1013","line":112,"column":17,"nodeType":"994","messageId":"1012","endLine":112,"endColumn":18},{"ruleId":"1006","severity":1,"message":"1035","line":114,"column":74,"nodeType":"1008","messageId":"1009","endLine":114,"endColumn":76},{"ruleId":"1006","severity":1,"message":"1035","line":123,"column":28,"nodeType":"1008","messageId":"1009","endLine":123,"endColumn":30},{"ruleId":"1006","severity":1,"message":"1035","line":135,"column":29,"nodeType":"1008","messageId":"1009","endLine":135,"endColumn":31},{"ruleId":"1006","severity":1,"message":"1035","line":142,"column":28,"nodeType":"1008","messageId":"1009","endLine":142,"endColumn":30},{"ruleId":"1006","severity":1,"message":"1035","line":149,"column":26,"nodeType":"1008","messageId":"1009","endLine":149,"endColumn":28},{"ruleId":"1006","severity":1,"message":"1035","line":156,"column":31,"nodeType":"1008","messageId":"1009","endLine":156,"endColumn":33},{"ruleId":"1006","severity":1,"message":"1035","line":168,"column":26,"nodeType":"1008","messageId":"1009","endLine":168,"endColumn":28},{"ruleId":"1006","severity":1,"message":"1035","line":175,"column":28,"nodeType":"1008","messageId":"1009","endLine":175,"endColumn":30},{"ruleId":"1006","severity":1,"message":"1035","line":182,"column":25,"nodeType":"1008","messageId":"1009","endLine":182,"endColumn":27},{"ruleId":"1006","severity":1,"message":"1035","line":187,"column":30,"nodeType":"1008","messageId":"1009","endLine":187,"endColumn":32},{"ruleId":"1006","severity":1,"message":"1035","line":187,"column":56,"nodeType":"1008","messageId":"1009","endLine":187,"endColumn":58},{"ruleId":"1006","severity":1,"message":"1035","line":247,"column":34,"nodeType":"1008","messageId":"1009","endLine":247,"endColumn":36},{"ruleId":"992","severity":1,"message":"1053","line":3,"column":40,"nodeType":"994","messageId":"995","endLine":3,"endColumn":50},{"ruleId":"992","severity":1,"message":"1061","line":6,"column":10,"nodeType":"994","messageId":"995","endLine":6,"endColumn":23},{"ruleId":"992","severity":1,"message":"1068","line":6,"column":25,"nodeType":"994","messageId":"995","endLine":6,"endColumn":31},{"ruleId":"992","severity":1,"message":"1107","line":7,"column":8,"nodeType":"994","messageId":"995","endLine":7,"endColumn":13},{"ruleId":"992","severity":1,"message":"1108","line":8,"column":10,"nodeType":"994","messageId":"995","endLine":8,"endColumn":18},{"ruleId":"992","severity":1,"message":"1109","line":9,"column":8,"nodeType":"994","messageId":"995","endLine":9,"endColumn":14},{"ruleId":"992","severity":1,"message":"1100","line":10,"column":8,"nodeType":"994","messageId":"995","endLine":10,"endColumn":16},{"ruleId":"992","severity":1,"message":"1110","line":11,"column":8,"nodeType":"994","messageId":"995","endLine":11,"endColumn":19},{"ruleId":"992","severity":1,"message":"1104","line":12,"column":10,"nodeType":"994","messageId":"995","endLine":12,"endColumn":15},{"ruleId":"992","severity":1,"message":"1088","line":13,"column":8,"nodeType":"994","messageId":"995","endLine":13,"endColumn":13},{"ruleId":"992","severity":1,"message":"1058","line":16,"column":8,"nodeType":"994","messageId":"995","endLine":16,"endColumn":28},{"ruleId":"992","severity":1,"message":"1057","line":17,"column":8,"nodeType":"994","messageId":"995","endLine":17,"endColumn":22},{"ruleId":"992","severity":1,"message":"1111","line":18,"column":8,"nodeType":"994","messageId":"995","endLine":18,"endColumn":18},{"ruleId":"992","severity":1,"message":"1056","line":19,"column":8,"nodeType":"994","messageId":"995","endLine":19,"endColumn":22},{"ruleId":"992","severity":1,"message":"1112","line":20,"column":10,"nodeType":"994","messageId":"995","endLine":20,"endColumn":26},{"ruleId":"992","severity":1,"message":"1113","line":21,"column":8,"nodeType":"994","messageId":"995","endLine":21,"endColumn":18},{"ruleId":"992","severity":1,"message":"1105","line":23,"column":5,"nodeType":"994","messageId":"995","endLine":23,"endColumn":17},{"ruleId":"992","severity":1,"message":"1106","line":27,"column":5,"nodeType":"994","messageId":"995","endLine":27,"endColumn":12},{"ruleId":"992","severity":1,"message":"1114","line":47,"column":7,"nodeType":"994","messageId":"995","endLine":47,"endColumn":22},{"ruleId":"1006","severity":1,"message":"1035","line":79,"column":41,"nodeType":"1008","messageId":"1009","endLine":79,"endColumn":43},{"ruleId":"1006","severity":1,"message":"1035","line":92,"column":50,"nodeType":"1008","messageId":"1009","endLine":92,"endColumn":52},{"ruleId":"992","severity":1,"message":"1115","line":3,"column":10,"nodeType":"994","messageId":"995","endLine":3,"endColumn":24},{"ruleId":"992","severity":1,"message":"1103","line":4,"column":10,"nodeType":"994","messageId":"995","endLine":4,"endColumn":13},{"ruleId":"992","severity":1,"message":"1116","line":39,"column":5,"nodeType":"994","messageId":"995","endLine":39,"endColumn":10},{"ruleId":"992","severity":1,"message":"1117","line":40,"column":5,"nodeType":"994","messageId":"995","endLine":40,"endColumn":12},{"ruleId":"992","severity":1,"message":"1118","line":41,"column":5,"nodeType":"994","messageId":"995","endLine":41,"endColumn":13},{"ruleId":"992","severity":1,"message":"1119","line":43,"column":5,"nodeType":"994","messageId":"995","endLine":43,"endColumn":16},{"ruleId":"992","severity":1,"message":"1120","line":44,"column":5,"nodeType":"994","messageId":"995","endLine":44,"endColumn":18},{"ruleId":"992","severity":1,"message":"1121","line":45,"column":5,"nodeType":"994","messageId":"995","endLine":45,"endColumn":21},{"ruleId":"1006","severity":1,"message":"1035","line":45,"column":44,"nodeType":"1008","messageId":"1009","endLine":45,"endColumn":46},{"ruleId":"1006","severity":1,"message":"1035","line":164,"column":33,"nodeType":"1008","messageId":"1009","endLine":164,"endColumn":35},{"ruleId":"1006","severity":1,"message":"1035","line":165,"column":33,"nodeType":"1008","messageId":"1009","endLine":165,"endColumn":35},{"ruleId":"1006","severity":1,"message":"1035","line":178,"column":33,"nodeType":"1008","messageId":"1009","endLine":178,"endColumn":35},{"ruleId":"1006","severity":1,"message":"1035","line":179,"column":36,"nodeType":"1008","messageId":"1009","endLine":179,"endColumn":38},{"ruleId":"1006","severity":1,"message":"1035","line":180,"column":63,"nodeType":"1008","messageId":"1009","endLine":180,"endColumn":65},{"ruleId":"1006","severity":1,"message":"1035","line":226,"column":40,"nodeType":"1008","messageId":"1009","endLine":226,"endColumn":42},{"ruleId":"1006","severity":1,"message":"1035","line":226,"column":97,"nodeType":"1008","messageId":"1009","endLine":226,"endColumn":99},{"ruleId":"1006","severity":1,"message":"1035","line":70,"column":21,"nodeType":"1008","messageId":"1009","endLine":70,"endColumn":23},{"ruleId":"992","severity":1,"message":"1122","line":5,"column":9,"nodeType":"994","messageId":"995","endLine":5,"endColumn":19},{"ruleId":"1006","severity":1,"message":"1035","line":36,"column":25,"nodeType":"1008","messageId":"1009","endLine":36,"endColumn":27},{"ruleId":"1072","severity":1,"message":"1123","line":79,"column":7,"nodeType":"1074","endLine":79,"endColumn":27,"suggestions":"1124"},{"ruleId":"1072","severity":1,"message":"1123","line":89,"column":7,"nodeType":"1074","endLine":89,"endColumn":26,"suggestions":"1125"},{"ruleId":"1072","severity":1,"message":"1123","line":99,"column":7,"nodeType":"1074","endLine":99,"endColumn":28,"suggestions":"1126"},{"ruleId":"1072","severity":1,"message":"1123","line":129,"column":7,"nodeType":"1074","endLine":129,"endColumn":78,"suggestions":"1127"},{"ruleId":"992","severity":1,"message":"1102","line":2,"column":28,"nodeType":"994","messageId":"995","endLine":2,"endColumn":35},{"ruleId":"992","severity":1,"message":"1103","line":2,"column":54,"nodeType":"994","messageId":"995","endLine":2,"endColumn":57},{"ruleId":"992","severity":1,"message":"1071","line":2,"column":59,"nodeType":"994","messageId":"995","endLine":2,"endColumn":70},{"ruleId":"992","severity":1,"message":"1053","line":2,"column":80,"nodeType":"994","messageId":"995","endLine":2,"endColumn":90},{"ruleId":"992","severity":1,"message":"1061","line":4,"column":10,"nodeType":"994","messageId":"995","endLine":4,"endColumn":23},{"ruleId":"992","severity":1,"message":"1068","line":4,"column":25,"nodeType":"994","messageId":"995","endLine":4,"endColumn":31},{"ruleId":"992","severity":1,"message":"1107","line":5,"column":8,"nodeType":"994","messageId":"995","endLine":5,"endColumn":13},{"ruleId":"992","severity":1,"message":"1108","line":6,"column":10,"nodeType":"994","messageId":"995","endLine":6,"endColumn":18},{"ruleId":"992","severity":1,"message":"1055","line":13,"column":8,"nodeType":"994","messageId":"995","endLine":13,"endColumn":17},{"ruleId":"992","severity":1,"message":"1058","line":16,"column":8,"nodeType":"994","messageId":"995","endLine":16,"endColumn":28},{"ruleId":"992","severity":1,"message":"1057","line":17,"column":8,"nodeType":"994","messageId":"995","endLine":17,"endColumn":22},{"ruleId":"992","severity":1,"message":"1111","line":18,"column":8,"nodeType":"994","messageId":"995","endLine":18,"endColumn":18},{"ruleId":"992","severity":1,"message":"1056","line":19,"column":8,"nodeType":"994","messageId":"995","endLine":19,"endColumn":22},{"ruleId":"1010","severity":1,"message":"1013","line":98,"column":17,"nodeType":"994","messageId":"1012","endLine":98,"endColumn":18},{"ruleId":"1006","severity":1,"message":"1035","line":138,"column":44,"nodeType":"1008","messageId":"1009","endLine":138,"endColumn":46},{"ruleId":"1006","severity":1,"message":"1035","line":151,"column":31,"nodeType":"1008","messageId":"1009","endLine":151,"endColumn":33},{"ruleId":"1006","severity":1,"message":"1035","line":157,"column":78,"nodeType":"1008","messageId":"1009","endLine":157,"endColumn":80},{"ruleId":"1006","severity":1,"message":"1035","line":168,"column":70,"nodeType":"1008","messageId":"1009","endLine":168,"endColumn":72},{"ruleId":"1006","severity":1,"message":"1035","line":174,"column":79,"nodeType":"1008","messageId":"1009","endLine":174,"endColumn":81},{"ruleId":"1006","severity":1,"message":"1035","line":185,"column":75,"nodeType":"1008","messageId":"1009","endLine":185,"endColumn":77},{"ruleId":"1006","severity":1,"message":"1035","line":218,"column":31,"nodeType":"1008","messageId":"1009","endLine":218,"endColumn":33},{"ruleId":"1010","severity":1,"message":"1013","line":309,"column":17,"nodeType":"994","messageId":"1012","endLine":309,"endColumn":18},{"ruleId":"1006","severity":1,"message":"1035","line":391,"column":20,"nodeType":"1008","messageId":"1009","endLine":391,"endColumn":22},{"ruleId":"1006","severity":1,"message":"1035","line":400,"column":26,"nodeType":"1008","messageId":"1009","endLine":400,"endColumn":28},{"ruleId":"1006","severity":1,"message":"1035","line":426,"column":127,"nodeType":"1008","messageId":"1009","endLine":426,"endColumn":129},{"ruleId":"1006","severity":1,"message":"1035","line":630,"column":69,"nodeType":"1008","messageId":"1009","endLine":630,"endColumn":71},{"ruleId":"1006","severity":1,"message":"1007","line":660,"column":81,"nodeType":"1008","messageId":"1009","endLine":660,"endColumn":83},{"ruleId":"992","severity":1,"message":"1128","line":30,"column":5,"nodeType":"994","messageId":"995","endLine":30,"endColumn":21},{"ruleId":"992","severity":1,"message":"1129","line":31,"column":5,"nodeType":"994","messageId":"995","endLine":31,"endColumn":18},{"ruleId":"1006","severity":1,"message":"1035","line":158,"column":44,"nodeType":"1008","messageId":"1009","endLine":158,"endColumn":46},{"ruleId":"1006","severity":1,"message":"1035","line":185,"column":62,"nodeType":"1008","messageId":"1009","endLine":185,"endColumn":64},{"ruleId":"992","severity":1,"message":"1130","line":15,"column":8,"nodeType":"994","messageId":"995","endLine":15,"endColumn":22},{"ruleId":"992","severity":1,"message":"1080","line":18,"column":10,"nodeType":"994","messageId":"995","endLine":18,"endColumn":21},{"ruleId":"992","severity":1,"message":"1088","line":19,"column":8,"nodeType":"994","messageId":"995","endLine":19,"endColumn":13},{"ruleId":"1006","severity":1,"message":"1035","line":158,"column":52,"nodeType":"1008","messageId":"1009","endLine":158,"endColumn":54},{"ruleId":"1032","severity":1,"message":"1033","line":159,"column":109,"nodeType":"1034","endLine":159,"endColumn":192},{"ruleId":"992","severity":1,"message":"1131","line":1,"column":17,"nodeType":"994","messageId":"995","endLine":1,"endColumn":25},{"ruleId":"992","severity":1,"message":"1132","line":3,"column":24,"nodeType":"994","messageId":"995","endLine":3,"endColumn":35},{"ruleId":"1072","severity":1,"message":"1073","line":12,"column":8,"nodeType":"1074","endLine":12,"endColumn":10,"suggestions":"1133"},{"ruleId":"1006","severity":1,"message":"1007","line":42,"column":30,"nodeType":"1008","messageId":"1009","endLine":42,"endColumn":32},{"ruleId":"1006","severity":1,"message":"1007","line":40,"column":30,"nodeType":"1008","messageId":"1009","endLine":40,"endColumn":32},{"ruleId":"1010","severity":1,"message":"1011","line":54,"column":25,"nodeType":"994","messageId":"1012","endLine":54,"endColumn":33},{"ruleId":"1010","severity":1,"message":"1013","line":55,"column":29,"nodeType":"994","messageId":"1012","endLine":55,"endColumn":30},{"ruleId":"992","severity":1,"message":"1088","line":3,"column":8,"nodeType":"994","messageId":"995","endLine":3,"endColumn":13},{"ruleId":"992","severity":1,"message":"1101","line":6,"column":72,"nodeType":"994","messageId":"995","endLine":6,"endColumn":78},{"ruleId":"992","severity":1,"message":"1134","line":7,"column":10,"nodeType":"994","messageId":"995","endLine":7,"endColumn":23},{"ruleId":"992","severity":1,"message":"1135","line":7,"column":25,"nodeType":"994","messageId":"995","endLine":7,"endColumn":37},{"ruleId":"992","severity":1,"message":"1136","line":40,"column":11,"nodeType":"994","messageId":"995","endLine":40,"endColumn":15},{"ruleId":"1006","severity":1,"message":"1035","line":65,"column":37,"nodeType":"1008","messageId":"1009","endLine":65,"endColumn":39},{"ruleId":"1006","severity":1,"message":"1035","line":78,"column":44,"nodeType":"1008","messageId":"1009","endLine":78,"endColumn":46},{"ruleId":"992","severity":1,"message":"1102","line":2,"column":28,"nodeType":"994","messageId":"995","endLine":2,"endColumn":35},{"ruleId":"992","severity":1,"message":"1103","line":3,"column":9,"nodeType":"994","messageId":"995","endLine":3,"endColumn":12},{"ruleId":"992","severity":1,"message":"1071","line":3,"column":14,"nodeType":"994","messageId":"995","endLine":3,"endColumn":25},{"ruleId":"992","severity":1,"message":"1053","line":3,"column":35,"nodeType":"994","messageId":"995","endLine":3,"endColumn":45},{"ruleId":"992","severity":1,"message":"1104","line":5,"column":10,"nodeType":"994","messageId":"995","endLine":5,"endColumn":15},{"ruleId":"992","severity":1,"message":"1105","line":10,"column":5,"nodeType":"994","messageId":"995","endLine":10,"endColumn":17},{"ruleId":"992","severity":1,"message":"1106","line":14,"column":5,"nodeType":"994","messageId":"995","endLine":14,"endColumn":12},{"ruleId":"1006","severity":1,"message":"1035","line":114,"column":40,"nodeType":"1008","messageId":"1009","endLine":114,"endColumn":42},{"ruleId":"1006","severity":1,"message":"1035","line":119,"column":38,"nodeType":"1008","messageId":"1009","endLine":119,"endColumn":40},{"ruleId":"1006","severity":1,"message":"1035","line":125,"column":38,"nodeType":"1008","messageId":"1009","endLine":125,"endColumn":40},{"ruleId":"1006","severity":1,"message":"1035","line":125,"column":86,"nodeType":"1008","messageId":"1009","endLine":125,"endColumn":88},{"ruleId":"1006","severity":1,"message":"1035","line":138,"column":33,"nodeType":"1008","messageId":"1009","endLine":138,"endColumn":35},{"ruleId":"1006","severity":1,"message":"1035","line":266,"column":80,"nodeType":"1008","messageId":"1009","endLine":266,"endColumn":82},{"ruleId":"1006","severity":1,"message":"1035","line":301,"column":78,"nodeType":"1008","messageId":"1009","endLine":301,"endColumn":80},{"ruleId":"992","severity":1,"message":"1104","line":4,"column":10,"nodeType":"994","messageId":"995","endLine":4,"endColumn":15},{"ruleId":"992","severity":1,"message":"1088","line":5,"column":8,"nodeType":"994","messageId":"995","endLine":5,"endColumn":13},{"ruleId":"992","severity":1,"message":"1105","line":9,"column":5,"nodeType":"994","messageId":"995","endLine":9,"endColumn":17},{"ruleId":"992","severity":1,"message":"1106","line":13,"column":5,"nodeType":"994","messageId":"995","endLine":13,"endColumn":12},{"ruleId":"992","severity":1,"message":"1137","line":15,"column":5,"nodeType":"994","messageId":"995","endLine":15,"endColumn":14},{"ruleId":"1006","severity":1,"message":"1035","line":64,"column":59,"nodeType":"1008","messageId":"1009","endLine":64,"endColumn":61},{"ruleId":"992","severity":1,"message":"1102","line":2,"column":28,"nodeType":"994","messageId":"995","endLine":2,"endColumn":35},{"ruleId":"992","severity":1,"message":"1103","line":3,"column":9,"nodeType":"994","messageId":"995","endLine":3,"endColumn":12},{"ruleId":"992","severity":1,"message":"1071","line":3,"column":14,"nodeType":"994","messageId":"995","endLine":3,"endColumn":25},{"ruleId":"992","severity":1,"message":"1053","line":3,"column":35,"nodeType":"994","messageId":"995","endLine":3,"endColumn":45},{"ruleId":"992","severity":1,"message":"1104","line":5,"column":10,"nodeType":"994","messageId":"995","endLine":5,"endColumn":15},{"ruleId":"992","severity":1,"message":"1105","line":10,"column":5,"nodeType":"994","messageId":"995","endLine":10,"endColumn":17},{"ruleId":"992","severity":1,"message":"1106","line":14,"column":5,"nodeType":"994","messageId":"995","endLine":14,"endColumn":12},{"ruleId":"1006","severity":1,"message":"1035","line":119,"column":47,"nodeType":"1008","messageId":"1009","endLine":119,"endColumn":49},{"ruleId":"1006","severity":1,"message":"1035","line":120,"column":59,"nodeType":"1008","messageId":"1009","endLine":120,"endColumn":61},{"ruleId":"1006","severity":1,"message":"1035","line":121,"column":61,"nodeType":"1008","messageId":"1009","endLine":121,"endColumn":63},{"ruleId":"1006","severity":1,"message":"1035","line":146,"column":34,"nodeType":"1008","messageId":"1009","endLine":146,"endColumn":36},{"ruleId":"1006","severity":1,"message":"1035","line":151,"column":32,"nodeType":"1008","messageId":"1009","endLine":151,"endColumn":34},{"ruleId":"1006","severity":1,"message":"1035","line":157,"column":32,"nodeType":"1008","messageId":"1009","endLine":157,"endColumn":34},{"ruleId":"1006","severity":1,"message":"1035","line":157,"column":74,"nodeType":"1008","messageId":"1009","endLine":157,"endColumn":76},{"ruleId":"1006","severity":1,"message":"1035","line":170,"column":33,"nodeType":"1008","messageId":"1009","endLine":170,"endColumn":35},{"ruleId":"1006","severity":1,"message":"1035","line":303,"column":80,"nodeType":"1008","messageId":"1009","endLine":303,"endColumn":82},{"ruleId":"1006","severity":1,"message":"1035","line":340,"column":78,"nodeType":"1008","messageId":"1009","endLine":340,"endColumn":80},{"ruleId":"992","severity":1,"message":"1102","line":2,"column":28,"nodeType":"994","messageId":"995","endLine":2,"endColumn":35},{"ruleId":"992","severity":1,"message":"1103","line":3,"column":9,"nodeType":"994","messageId":"995","endLine":3,"endColumn":12},{"ruleId":"992","severity":1,"message":"1071","line":3,"column":14,"nodeType":"994","messageId":"995","endLine":3,"endColumn":25},{"ruleId":"992","severity":1,"message":"1053","line":3,"column":35,"nodeType":"994","messageId":"995","endLine":3,"endColumn":45},{"ruleId":"992","severity":1,"message":"1104","line":5,"column":10,"nodeType":"994","messageId":"995","endLine":5,"endColumn":15},{"ruleId":"992","severity":1,"message":"1105","line":10,"column":5,"nodeType":"994","messageId":"995","endLine":10,"endColumn":17},{"ruleId":"992","severity":1,"message":"1106","line":14,"column":5,"nodeType":"994","messageId":"995","endLine":14,"endColumn":12},{"ruleId":"1006","severity":1,"message":"1035","line":84,"column":40,"nodeType":"1008","messageId":"1009","endLine":84,"endColumn":42},{"ruleId":"1006","severity":1,"message":"1035","line":89,"column":38,"nodeType":"1008","messageId":"1009","endLine":89,"endColumn":40},{"ruleId":"1006","severity":1,"message":"1035","line":95,"column":35,"nodeType":"1008","messageId":"1009","endLine":95,"endColumn":37},{"ruleId":"1006","severity":1,"message":"1035","line":95,"column":80,"nodeType":"1008","messageId":"1009","endLine":95,"endColumn":82},{"ruleId":"1006","severity":1,"message":"1035","line":100,"column":30,"nodeType":"1008","messageId":"1009","endLine":100,"endColumn":32},{"ruleId":"1006","severity":1,"message":"1035","line":100,"column":72,"nodeType":"1008","messageId":"1009","endLine":100,"endColumn":74},{"ruleId":"1006","severity":1,"message":"1035","line":132,"column":33,"nodeType":"1008","messageId":"1009","endLine":132,"endColumn":35},{"ruleId":"1006","severity":1,"message":"1035","line":307,"column":80,"nodeType":"1008","messageId":"1009","endLine":307,"endColumn":82},{"ruleId":"1006","severity":1,"message":"1035","line":342,"column":78,"nodeType":"1008","messageId":"1009","endLine":342,"endColumn":80},{"ruleId":"1006","severity":1,"message":"1035","line":376,"column":81,"nodeType":"1008","messageId":"1009","endLine":376,"endColumn":83},{"ruleId":"992","severity":1,"message":"1102","line":2,"column":28,"nodeType":"994","messageId":"995","endLine":2,"endColumn":35},{"ruleId":"992","severity":1,"message":"1103","line":3,"column":9,"nodeType":"994","messageId":"995","endLine":3,"endColumn":12},{"ruleId":"992","severity":1,"message":"1071","line":3,"column":14,"nodeType":"994","messageId":"995","endLine":3,"endColumn":25},{"ruleId":"992","severity":1,"message":"1053","line":3,"column":35,"nodeType":"994","messageId":"995","endLine":3,"endColumn":45},{"ruleId":"992","severity":1,"message":"1104","line":5,"column":10,"nodeType":"994","messageId":"995","endLine":5,"endColumn":15},{"ruleId":"992","severity":1,"message":"1105","line":10,"column":5,"nodeType":"994","messageId":"995","endLine":10,"endColumn":17},{"ruleId":"992","severity":1,"message":"1106","line":14,"column":5,"nodeType":"994","messageId":"995","endLine":14,"endColumn":12},{"ruleId":"1006","severity":1,"message":"1035","line":164,"column":47,"nodeType":"1008","messageId":"1009","endLine":164,"endColumn":49},{"ruleId":"1006","severity":1,"message":"1035","line":165,"column":59,"nodeType":"1008","messageId":"1009","endLine":165,"endColumn":61},{"ruleId":"1006","severity":1,"message":"1035","line":166,"column":61,"nodeType":"1008","messageId":"1009","endLine":166,"endColumn":63},{"ruleId":"1006","severity":1,"message":"1007","line":181,"column":38,"nodeType":"1008","messageId":"1009","endLine":181,"endColumn":40},{"ruleId":"1006","severity":1,"message":"1035","line":302,"column":80,"nodeType":"1008","messageId":"1009","endLine":302,"endColumn":82},{"ruleId":"1006","severity":1,"message":"1035","line":361,"column":80,"nodeType":"1008","messageId":"1009","endLine":361,"endColumn":82},{"ruleId":"1000","severity":1,"message":"1004","line":25,"column":51,"nodeType":"1002","messageId":"1005","endLine":25,"endColumn":53},{"ruleId":"1006","severity":1,"message":"1035","line":29,"column":25,"nodeType":"1008","messageId":"1009","endLine":29,"endColumn":27},{"ruleId":"1006","severity":1,"message":"1035","line":29,"column":43,"nodeType":"1008","messageId":"1009","endLine":29,"endColumn":45},{"ruleId":"1006","severity":1,"message":"1035","line":29,"column":63,"nodeType":"1008","messageId":"1009","endLine":29,"endColumn":65},{"ruleId":"1072","severity":1,"message":"1138","line":34,"column":8,"nodeType":"1074","endLine":34,"endColumn":15,"suggestions":"1139"},{"ruleId":"1072","severity":1,"message":"1073","line":50,"column":8,"nodeType":"1074","endLine":50,"endColumn":10,"suggestions":"1140"},{"ruleId":"1006","severity":1,"message":"1035","line":17,"column":33,"nodeType":"1008","messageId":"1009","endLine":17,"endColumn":35},{"ruleId":"1000","severity":1,"message":"1001","line":18,"column":35,"nodeType":"1002","messageId":"1003","endLine":18,"endColumn":37},{"ruleId":"1006","severity":1,"message":"1035","line":21,"column":29,"nodeType":"1008","messageId":"1009","endLine":21,"endColumn":31},{"ruleId":"1006","severity":1,"message":"1035","line":21,"column":61,"nodeType":"1008","messageId":"1009","endLine":21,"endColumn":63},{"ruleId":"1006","severity":1,"message":"1035","line":21,"column":88,"nodeType":"1008","messageId":"1009","endLine":21,"endColumn":90},{"ruleId":"1006","severity":1,"message":"1035","line":28,"column":40,"nodeType":"1008","messageId":"1009","endLine":28,"endColumn":42},{"ruleId":"1000","severity":1,"message":"1001","line":29,"column":35,"nodeType":"1002","messageId":"1003","endLine":29,"endColumn":37},{"ruleId":"1006","severity":1,"message":"1035","line":32,"column":29,"nodeType":"1008","messageId":"1009","endLine":32,"endColumn":31},{"ruleId":"1006","severity":1,"message":"1035","line":32,"column":65,"nodeType":"1008","messageId":"1009","endLine":32,"endColumn":67},{"ruleId":"1006","severity":1,"message":"1035","line":32,"column":92,"nodeType":"1008","messageId":"1009","endLine":32,"endColumn":94},{"ruleId":"1006","severity":1,"message":"1035","line":39,"column":40,"nodeType":"1008","messageId":"1009","endLine":39,"endColumn":42},{"ruleId":"1000","severity":1,"message":"1001","line":40,"column":35,"nodeType":"1002","messageId":"1003","endLine":40,"endColumn":37},{"ruleId":"1006","severity":1,"message":"1035","line":43,"column":29,"nodeType":"1008","messageId":"1009","endLine":43,"endColumn":31},{"ruleId":"1006","severity":1,"message":"1035","line":43,"column":56,"nodeType":"1008","messageId":"1009","endLine":43,"endColumn":58},{"ruleId":"1006","severity":1,"message":"1035","line":50,"column":40,"nodeType":"1008","messageId":"1009","endLine":50,"endColumn":42},{"ruleId":"1000","severity":1,"message":"1001","line":51,"column":35,"nodeType":"1002","messageId":"1003","endLine":51,"endColumn":37},{"ruleId":"1006","severity":1,"message":"1035","line":54,"column":29,"nodeType":"1008","messageId":"1009","endLine":54,"endColumn":31},{"ruleId":"1006","severity":1,"message":"1035","line":61,"column":40,"nodeType":"1008","messageId":"1009","endLine":61,"endColumn":42},{"ruleId":"1000","severity":1,"message":"1001","line":62,"column":35,"nodeType":"1002","messageId":"1003","endLine":62,"endColumn":37},{"ruleId":"1072","severity":1,"message":"1141","line":69,"column":8,"nodeType":"1074","endLine":69,"endColumn":29,"suggestions":"1142"},{"ruleId":"1006","severity":1,"message":"1035","line":14,"column":33,"nodeType":"1008","messageId":"1009","endLine":14,"endColumn":35},{"ruleId":"1000","severity":1,"message":"1001","line":15,"column":35,"nodeType":"1002","messageId":"1003","endLine":15,"endColumn":37},{"ruleId":"1006","severity":1,"message":"1035","line":18,"column":29,"nodeType":"1008","messageId":"1009","endLine":18,"endColumn":31},{"ruleId":"1006","severity":1,"message":"1035","line":18,"column":61,"nodeType":"1008","messageId":"1009","endLine":18,"endColumn":63},{"ruleId":"1006","severity":1,"message":"1035","line":18,"column":88,"nodeType":"1008","messageId":"1009","endLine":18,"endColumn":90},{"ruleId":"1006","severity":1,"message":"1035","line":25,"column":40,"nodeType":"1008","messageId":"1009","endLine":25,"endColumn":42},{"ruleId":"1000","severity":1,"message":"1001","line":26,"column":35,"nodeType":"1002","messageId":"1003","endLine":26,"endColumn":37},{"ruleId":"1006","severity":1,"message":"1035","line":29,"column":29,"nodeType":"1008","messageId":"1009","endLine":29,"endColumn":31},{"ruleId":"1006","severity":1,"message":"1035","line":29,"column":65,"nodeType":"1008","messageId":"1009","endLine":29,"endColumn":67},{"ruleId":"1006","severity":1,"message":"1035","line":29,"column":92,"nodeType":"1008","messageId":"1009","endLine":29,"endColumn":94},{"ruleId":"1006","severity":1,"message":"1035","line":34,"column":40,"nodeType":"1008","messageId":"1009","endLine":34,"endColumn":42},{"ruleId":"1000","severity":1,"message":"1001","line":35,"column":35,"nodeType":"1002","messageId":"1003","endLine":35,"endColumn":37},{"ruleId":"1006","severity":1,"message":"1035","line":38,"column":29,"nodeType":"1008","messageId":"1009","endLine":38,"endColumn":31},{"ruleId":"1006","severity":1,"message":"1035","line":38,"column":56,"nodeType":"1008","messageId":"1009","endLine":38,"endColumn":58},{"ruleId":"1006","severity":1,"message":"1035","line":43,"column":40,"nodeType":"1008","messageId":"1009","endLine":43,"endColumn":42},{"ruleId":"1000","severity":1,"message":"1001","line":44,"column":35,"nodeType":"1002","messageId":"1003","endLine":44,"endColumn":37},{"ruleId":"1006","severity":1,"message":"1035","line":47,"column":29,"nodeType":"1008","messageId":"1009","endLine":47,"endColumn":31},{"ruleId":"1006","severity":1,"message":"1035","line":52,"column":40,"nodeType":"1008","messageId":"1009","endLine":52,"endColumn":42},{"ruleId":"1000","severity":1,"message":"1001","line":53,"column":35,"nodeType":"1002","messageId":"1003","endLine":53,"endColumn":37},{"ruleId":"1072","severity":1,"message":"1141","line":60,"column":8,"nodeType":"1074","endLine":60,"endColumn":29,"suggestions":"1143"},"no-native-reassign",["1144"],"no-negated-in-lhs",["1145"],"no-unused-vars","'FiChevronRight' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a value to be returned at the end of arrow function.","expectedAtEnd","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-redeclare","'newState' is already defined.","redeclared","'i' is already defined.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["1146","1147"],["1148","1149"],"no-dupe-keys","Duplicate key 'updateShiftTypes'.","ObjectExpression","'emailjs' is defined but never used.",["1150","1151"],["1152","1153"],"'FiXSquare' is defined but never used.","'Alert' is defined but never used.",["1154","1155"],["1156","1157"],"'statusConfirmPassword' is assigned a value but never used.","'navbarContainer' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","Expected '===' and instead saw '=='.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'DataGrid' is defined but never used.","'Page' is defined but never used.","'Label' is defined but never used.","'Scrollbar' is defined but never used.","'SearchNotFound' is defined but never used.","'sentenceCase' is defined but never used.","'Avatar' is defined but never used.","'TablePagination' is defined but never used.","'EmployeeToolbar' is defined but never used.","'EmployeeObj' is defined but never used.","'filterName' is assigned a value but never used.","'filteredUsers' is assigned a value but never used.","'page' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","'InputLabel' is defined but never used.","'Modal' is defined but never used.","'GoodImage' is defined but never used.","'DateTimePicker' is defined but never used.","'AdapterDateFns' is defined but never used.","'LocalizationProvider' is defined but never used.","'GiConsoleController' is defined but never used.","'TextField' is defined but never used.","'BiPlusMedical' is defined but never used.","'AddTypeModal' is defined but never used.","'fromHour' is already defined.","'fromMin' is already defined.","'toHour' is already defined.","'toMin' is already defined.","'FaCommentsDollar' is defined but never used.","'BiEdit' is defined but never used.","'GiVampireCape' is defined but never used.","'Grid' is defined but never used.","'CardContent' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["1158"],"React Hook React.useEffect has missing dependencies: 'dispatch' and 'listMAHD'. Either include them or remove the dependency array.",["1159"],["1160"],"'now' is defined but never used.","'useDispatch' is defined but never used.","'date' is defined but never used.","'title' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'moneyDoanhThu', 'moneyTienGoc'.","unsafeRefs","React Hook React.useEffect has missing dependencies: 'DateInMonth', 'DateInWeak', 'DateInYear', 'GrowthPercent', 'listReciept', 'totalMoneyInMonth', and 'totalMoneyInWeak'. Either include them or remove the dependency array.",["1161"],"'axios' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","'Icon' is defined but never used.","'moreVerticalFill' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","'Button' is defined but never used.","'Divider' is defined but never used.","'Box' is defined but never used.","'Image' is defined but never used.","'productTypes' is assigned a value but never used.","'typeSet' is assigned a value but never used.","'Stack' is defined but never used.","'GiCancel' is defined but never used.","'Select' is defined but never used.","'FormControl' is defined but never used.","'DatePicker' is defined but never used.","'AiFillPlusCircle' is defined but never used.","'CancelIcon' is defined but never used.","'StyledTextField' is assigned a value but never used.","'visuallyHidden' is defined but never used.","'order' is assigned a value but never used.","'orderBy' is assigned a value but never used.","'rowCount' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'onRequestSort' is assigned a value but never used.","'onSelectAllClick' is assigned a value but never used.","'GiPayMoney' is defined but never used.","React Hook React.useCallback has a missing dependency: 'inputProps'. Either include it or remove the dependency array.",["1162"],["1163"],["1164"],["1165"],"'listProductInfor' is assigned a value but never used.","'joinTypeInfor' is assigned a value but never used.","'TableContainer' is defined but never used.","'useState' is defined but never used.","'useSelector' is defined but never used.",["1166"],"'AiOutlineEdit' is defined but never used.","'AiFillDelete' is defined but never used.","'data' is assigned a value but never used.","'listUsers' is assigned a value but never used.","React Hook React.useEffect has a missing dependency: 'listReciept'. Either include it or remove the dependency array.",["1167"],["1168"],"React Hook React.useEffect has missing dependencies: 'listReciept' and 'nowTime'. Either include them or remove the dependency array.",["1169"],["1170"],"no-global-assign","no-unsafe-negation",{"messageId":"1171","fix":"1172","desc":"1173"},{"messageId":"1174","fix":"1175","desc":"1176"},{"messageId":"1171","fix":"1177","desc":"1173"},{"messageId":"1174","fix":"1178","desc":"1176"},{"messageId":"1171","fix":"1179","desc":"1173"},{"messageId":"1174","fix":"1180","desc":"1176"},{"messageId":"1171","fix":"1181","desc":"1173"},{"messageId":"1174","fix":"1182","desc":"1176"},{"messageId":"1171","fix":"1183","desc":"1173"},{"messageId":"1174","fix":"1184","desc":"1176"},{"messageId":"1171","fix":"1185","desc":"1173"},{"messageId":"1174","fix":"1186","desc":"1176"},{"desc":"1187","fix":"1188"},{"desc":"1189","fix":"1190"},{"desc":"1187","fix":"1191"},{"desc":"1192","fix":"1193"},{"desc":"1194","fix":"1195"},{"desc":"1194","fix":"1196"},{"desc":"1194","fix":"1197"},{"desc":"1198","fix":"1199"},{"desc":"1187","fix":"1200"},{"desc":"1201","fix":"1202"},{"desc":"1187","fix":"1203"},{"desc":"1204","fix":"1205"},{"desc":"1204","fix":"1206"},"removeEscape",{"range":"1207","text":"1208"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1209","text":"1210"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1211","text":"1208"},{"range":"1212","text":"1210"},{"range":"1213","text":"1208"},{"range":"1214","text":"1210"},{"range":"1215","text":"1208"},{"range":"1216","text":"1210"},{"range":"1217","text":"1208"},{"range":"1218","text":"1210"},{"range":"1219","text":"1208"},{"range":"1220","text":"1210"},"Update the dependencies array to be: [dispatch]",{"range":"1221","text":"1222"},"Update the dependencies array to be: [typeReciept, typeByDate, listReciept, statusSelectAll, search, dispatch, listMAHD]",{"range":"1223","text":"1224"},{"range":"1225","text":"1222"},"Update the dependencies array to be: [typeTimeDashboard, growth, listReciept, DateInWeak, totalMoneyInWeak, GrowthPercent, totalMoneyInMonth, DateInMonth, DateInYear]",{"range":"1226","text":"1227"},"Update the dependencies array to be: [inputProps]",{"range":"1228","text":"1229"},{"range":"1230","text":"1229"},{"range":"1231","text":"1229"},"Update the dependencies array to be: [cancelOnEscape, inputProps, handleRequestSearch, handleCancel]",{"range":"1232","text":"1233"},{"range":"1234","text":"1222"},"Update the dependencies array to be: [listReciept, value]",{"range":"1235","text":"1236"},{"range":"1237","text":"1222"},"Update the dependencies array to be: [listReciept, nowTime, typeHeaderDashboard]",{"range":"1238","text":"1239"},{"range":"1240","text":"1239"},[4178,4179],"",[4178,4178],"\\",[4194,4195],[4194,4194],[3233,3234],[3233,3233],[3249,3250],[3249,3249],[3704,3705],[3704,3704],[3720,3721],[3720,3720],[5811,5813],"[dispatch]",[25784,25847],"[typeReciept, typeByDate, listReciept, statusSelectAll, search, dispatch, listMAHD]",[1472,1474],[19576,19603],"[typeTimeDashboard, growth, listReciept, DateInWeak, totalMoneyInWeak, GrowthPercent, totalMoneyInMonth, DateInMonth, DateInYear]",[2067,2087],"[inputProps]",[2288,2307],[2525,2546],[3292,3363],"[cancelOnEscape, inputProps, handleRequestSearch, handleCancel]",[322,324],[1195,1202],"[listReciept, value]",[1555,1557],[2731,2752],"[listReciept, nowTime, typeHeaderDashboard]",[2489,2510]]