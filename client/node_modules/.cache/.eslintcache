[{"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/index.js":"1","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/App.js":"2","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Store.js":"3","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/InfoUserReducer.js":"4","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/LoginStatusReducer.js":"5","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/TypeStatusReducer.js":"6","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ProvinceReducer.js":"7","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/DistrictReducer.js":"8","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ListProductReducer.js":"9","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/typeProductReducer.js":"10","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ObjectEditShiftReducer.js":"11","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/chooseTypeProduct.js":"12","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ConfirmModalReducer.js":"13","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/TypeProductValueReducer.js":"14","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RoleReducer.js":"15","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/InfoUpdateProduct.js":"16","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/AlertReducer.js":"17","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ListShiftReducer.js":"18","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DirectionURL.js":"19","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusEditTypeReducer.js":"20","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusConfirmReducer.js":"21","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusYesConfirmReducer.js":"22","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusDarkModeReducer.js":"23","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusModalConfirmPassword.js":"24","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddEmployeeReducer.js":"25","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusUpdateGoodReducer.js":"26","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddTypeReducer.js":"27","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddShiftReducer.js":"28","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusDeleteConfirmReducer.js":"29","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/GoodManager/AddGoodStatus.js":"30","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusUpdateEmployeeReducer.js":"31","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusPayMoneyStatus.js":"32","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusEditShiftReducer.js":"33","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/GoodManager/UpdateTypeStatus.js":"34","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/ShoppingBagsReducer.js":"35","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/InfomationBillEdit.js":"36","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/StatusShowHistoryRecieptReducer.js":"37","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/employeeListReducer.js":"38","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/currentEditEmployeeReducer.js":"39","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/StatusEditInfomationBill.js":"40","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/employeeSackedListReducer.js":"41","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateNextWeekTimeKeepingStatus.js":"42","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateTimeKeepingStatus.js":"43","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/nextWeekTimeKeepingReducer.js":"44","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateTimeKeeperValue.js":"45","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/addNextWeekTimeKeepingStatus.js":"46","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/listTimeKeepingReducer.js":"47","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/currentEmployeeViewValue.js":"48","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/addTimeKeepingStatus.js":"49","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/listShiftAssignReducer.js":"50","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/ListRecieptDelete.js":"51","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/SearchReducer.js":"52","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/TypeReciept.js":"53","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/TypeByDate.js":"54","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/StatusSelectAll.js":"55","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateNextWeekTimeKeepingValue.js":"56","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/ListRecieptReducer.js":"57","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Dashboard/TypeHeaderDashboard.js":"58","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Dashboard/YearSelectReducer.js":"59","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/StatusModalAddCoupon.js":"60","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/ListCoupon.js":"61","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/StatusEditCoupon.js":"62","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Dashboard/TypeTimeDashboard.js":"63","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/ObjectEditCoupon.js":"64","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Dashboard/MonthSelectReducer.js":"65","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Body.js":"66","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Login.js":"67","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Register.js":"68","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/ForgotPassword.js":"69","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/LoginWithEmployee.js":"70","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DashboardURL.js":"71","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/ModalConfirmPassword.js":"72","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Partials/SideNavBar.js":"73","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodManager.js":"74","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeeManager.js":"75","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/DashBoard.js":"76","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/ReiceiptManager.js":"77","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/Profile.js":"78","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/SellProduct.js":"79","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateTimeKeepingModal.js":"80","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddTimeKeeperModal.js":"81","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/HistoryReciept.js":"82","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/ShoppingBags.js":"83","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/SearchReceipt.js":"84","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/Print.js":"85","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/TableReciept.js":"86","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/ComponentToPrint.js":"87","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/Tabs.js":"88","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileSetting.js":"89","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ModalAddCoupon.js":"90","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/ControlReciept.js":"91","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/DateReciept.js":"92","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/SalaryStats.js":"93","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/StatusReceiptType.js":"94","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/Regulation.js":"95","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ModalAdd.js":"96","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileCoupon.js":"97","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/ProductStatis.js":"98","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ListShift.js":"99","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileHeader.js":"100","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileDetail.js":"101","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateNextWeekTimeKeeping.js":"102","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/NoJobEmployee.js":"103","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/TimekeepingTable.js":"104","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ChangePassword.js":"105","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddNextWeekTimeKeeping.js":"106","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/FixedCalendar.js":"107","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UnShiftEmployee.js":"108","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/TableReciept.js":"109","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/PayMoneyModal.js":"110","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateEmployeeModal.js":"111","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeTableHeader.js":"112","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/SackedEmployeeMenu.js":"113","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/ErrorReceipt.js":"114","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddEmployeeModal.js":"115","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/fakeData.js":"116","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/DaiLyMoneyTracking.js":"117","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/Statistic.js":"118","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/GroupButtonDashboard.js":"119","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/TotalMoney.js":"120","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeMoreMenu.js":"121","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeToolbar.js":"122","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/SearchNotFound.js":"123","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Scrollbar.js":"124","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Label.js":"125","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Page.js":"126","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/AddGoodModal.js":"127","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/UpdateTypeModal.js":"128","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/ConfirmModal.js":"129","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/EditTypeModal.js":"130","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/UpdateGoodModal.js":"131","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/AddTypeModal.js":"132","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/SearchBar.js":"133","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/GoodTable.js":"134","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/DarkMode.js":"135","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/FixedCalendarCell.js":"136","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/TableRow.js":"137","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/OptionMonth.js":"138","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/OptionYear.js":"139","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/BaseOptionChart.js":"140","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/GroupButton.js":"141"},{"size":295,"mtime":1633526918199,"results":"142","hashOfConfig":"143"},{"size":5363,"mtime":1638277719588,"results":"144","hashOfConfig":"143"},{"size":7166,"mtime":1638277719569,"results":"145","hashOfConfig":"143"},{"size":3099,"mtime":1637646892564,"results":"146","hashOfConfig":"143"},{"size":284,"mtime":1633526918189,"results":"147","hashOfConfig":"143"},{"size":331,"mtime":1633861365892,"results":"148","hashOfConfig":"143"},{"size":372,"mtime":1634554437218,"results":"149","hashOfConfig":"143"},{"size":364,"mtime":1634708338277,"results":"150","hashOfConfig":"143"},{"size":2597,"mtime":1638277106499,"results":"151","hashOfConfig":"143"},{"size":1567,"mtime":1638277106500,"results":"152","hashOfConfig":"143"},{"size":330,"mtime":1634050541311,"results":"153","hashOfConfig":"143"},{"size":349,"mtime":1635745215659,"results":"154","hashOfConfig":"143"},{"size":468,"mtime":1634555131980,"results":"155","hashOfConfig":"143"},{"size":643,"mtime":1634797384962,"results":"156","hashOfConfig":"143"},{"size":304,"mtime":1634554437218,"results":"157","hashOfConfig":"143"},{"size":533,"mtime":1637134171174,"results":"158","hashOfConfig":"143"},{"size":643,"mtime":1635403823793,"results":"159","hashOfConfig":"143"},{"size":1136,"mtime":1638277719531,"results":"160","hashOfConfig":"143"},{"size":2136,"mtime":1633861365892,"results":"161","hashOfConfig":"143"},{"size":299,"mtime":1634554437220,"results":"162","hashOfConfig":"143"},{"size":293,"mtime":1634554437219,"results":"163","hashOfConfig":"143"},{"size":338,"mtime":1634555131981,"results":"164","hashOfConfig":"143"},{"size":292,"mtime":1634050541312,"results":"165","hashOfConfig":"143"},{"size":360,"mtime":1634554437221,"results":"166","hashOfConfig":"143"},{"size":314,"mtime":1634651182398,"results":"167","hashOfConfig":"143"},{"size":313,"mtime":1635414209104,"results":"168","hashOfConfig":"143"},{"size":294,"mtime":1634554437218,"results":"169","hashOfConfig":"143"},{"size":293,"mtime":1633939930791,"results":"170","hashOfConfig":"143"},{"size":378,"mtime":1634554437220,"results":"171","hashOfConfig":"143"},{"size":298,"mtime":1638277106498,"results":"172","hashOfConfig":"143"},{"size":329,"mtime":1634651182404,"results":"173","hashOfConfig":"143"},{"size":314,"mtime":1634651182400,"results":"174","hashOfConfig":"143"},{"size":302,"mtime":1634050541312,"results":"175","hashOfConfig":"143"},{"size":313,"mtime":1638277106499,"results":"176","hashOfConfig":"143"},{"size":1299,"mtime":1636911108353,"results":"177","hashOfConfig":"143"},{"size":347,"mtime":1636527068502,"results":"178","hashOfConfig":"143"},{"size":331,"mtime":1636527068504,"results":"179","hashOfConfig":"143"},{"size":2511,"mtime":1637134171169,"results":"180","hashOfConfig":"143"},{"size":869,"mtime":1636527068501,"results":"181","hashOfConfig":"143"},{"size":331,"mtime":1636527068504,"results":"182","hashOfConfig":"143"},{"size":2335,"mtime":1638277106495,"results":"183","hashOfConfig":"143"},{"size":385,"mtime":1637134171171,"results":"184","hashOfConfig":"143"},{"size":344,"mtime":1637134171172,"results":"185","hashOfConfig":"143"},{"size":2247,"mtime":1637134171171,"results":"186","hashOfConfig":"143"},{"size":887,"mtime":1637134171172,"results":"187","hashOfConfig":"143"},{"size":370,"mtime":1637134171162,"results":"188","hashOfConfig":"143"},{"size":2919,"mtime":1638277106495,"results":"189","hashOfConfig":"143"},{"size":380,"mtime":1638277106494,"results":"190","hashOfConfig":"143"},{"size":329,"mtime":1637134171164,"results":"191","hashOfConfig":"143"},{"size":2295,"mtime":1637134171170,"results":"192","hashOfConfig":"143"},{"size":613,"mtime":1636911108350,"results":"193","hashOfConfig":"143"},{"size":360,"mtime":1636911108351,"results":"194","hashOfConfig":"143"},{"size":527,"mtime":1636697502427,"results":"195","hashOfConfig":"143"},{"size":328,"mtime":1636697502426,"results":"196","hashOfConfig":"143"},{"size":370,"mtime":1637134171180,"results":"197","hashOfConfig":"143"},{"size":960,"mtime":1637134171171,"results":"198","hashOfConfig":"143"},{"size":3252,"mtime":1638277719533,"results":"199","hashOfConfig":"143"},{"size":421,"mtime":1638277719529,"results":"200","hashOfConfig":"143"},{"size":486,"mtime":1638277719530,"results":"201","hashOfConfig":"143"},{"size":324,"mtime":1638277719532,"results":"202","hashOfConfig":"143"},{"size":1303,"mtime":1638277719531,"results":"203","hashOfConfig":"143"},{"size":375,"mtime":1638277719532,"results":"204","hashOfConfig":"143"},{"size":413,"mtime":1638277719530,"results":"205","hashOfConfig":"143"},{"size":316,"mtime":1638277719531,"results":"206","hashOfConfig":"143"},{"size":418,"mtime":1638277719529,"results":"207","hashOfConfig":"143"},{"size":1563,"mtime":1638277106464,"results":"208","hashOfConfig":"143"},{"size":14541,"mtime":1638277719580,"results":"209","hashOfConfig":"143"},{"size":15231,"mtime":1638277719514,"results":"210","hashOfConfig":"143"},{"size":12603,"mtime":1638277719513,"results":"211","hashOfConfig":"143"},{"size":8728,"mtime":1638277719514,"results":"212","hashOfConfig":"143"},{"size":1538,"mtime":1638277106501,"results":"213","hashOfConfig":"143"},{"size":1908,"mtime":1634554437210,"results":"214","hashOfConfig":"143"},{"size":11878,"mtime":1638277106482,"results":"215","hashOfConfig":"143"},{"size":12468,"mtime":1638277106475,"results":"216","hashOfConfig":"143"},{"size":27713,"mtime":1638277106469,"results":"217","hashOfConfig":"143"},{"size":3720,"mtime":1638277106466,"results":"218","hashOfConfig":"143"},{"size":2022,"mtime":1638277106486,"results":"219","hashOfConfig":"143"},{"size":5019,"mtime":1638277719519,"results":"220","hashOfConfig":"143"},{"size":15968,"mtime":1638277719572,"results":"221","hashOfConfig":"143"},{"size":18190,"mtime":1637134171139,"results":"222","hashOfConfig":"143"},{"size":15952,"mtime":1637134171130,"results":"223","hashOfConfig":"143"},{"size":1136,"mtime":1636697502419,"results":"224","hashOfConfig":"143"},{"size":3573,"mtime":1638277106490,"results":"225","hashOfConfig":"143"},{"size":889,"mtime":1638277719524,"results":"226","hashOfConfig":"143"},{"size":11393,"mtime":1638277769469,"results":"227","hashOfConfig":"143"},{"size":18264,"mtime":1638277719528,"results":"228","hashOfConfig":"143"},{"size":6750,"mtime":1638277719527,"results":"229","hashOfConfig":"143"},{"size":1295,"mtime":1638277106493,"results":"230","hashOfConfig":"143"},{"size":1116,"mtime":1636697502415,"results":"231","hashOfConfig":"143"},{"size":10864,"mtime":1638277719518,"results":"232","hashOfConfig":"143"},{"size":12339,"mtime":1637134171154,"results":"233","hashOfConfig":"143"},{"size":8866,"mtime":1637134171154,"results":"234","hashOfConfig":"143"},{"size":5473,"mtime":1638277106468,"results":"235","hashOfConfig":"143"},{"size":4034,"mtime":1636697502417,"results":"236","hashOfConfig":"143"},{"size":7539,"mtime":1638277719523,"results":"237","hashOfConfig":"143"},{"size":14340,"mtime":1638277719517,"results":"238","hashOfConfig":"143"},{"size":5941,"mtime":1638277719519,"results":"239","hashOfConfig":"143"},{"size":8086,"mtime":1638277106467,"results":"240","hashOfConfig":"143"},{"size":7614,"mtime":1638277719516,"results":"241","hashOfConfig":"143"},{"size":4333,"mtime":1638277719522,"results":"242","hashOfConfig":"143"},{"size":19771,"mtime":1638277719521,"results":"243","hashOfConfig":"143"},{"size":19580,"mtime":1637134171138,"results":"244","hashOfConfig":"143"},{"size":4090,"mtime":1637134171134,"results":"245","hashOfConfig":"143"},{"size":9023,"mtime":1638277106473,"results":"246","hashOfConfig":"143"},{"size":9569,"mtime":1638277719515,"results":"247","hashOfConfig":"143"},{"size":19699,"mtime":1637134171130,"results":"248","hashOfConfig":"143"},{"size":4928,"mtime":1638277106471,"results":"249","hashOfConfig":"143"},{"size":11183,"mtime":1638277106473,"results":"250","hashOfConfig":"143"},{"size":28002,"mtime":1638277719526,"results":"251","hashOfConfig":"143"},{"size":12055,"mtime":1638277106472,"results":"252","hashOfConfig":"143"},{"size":22210,"mtime":1638277106474,"results":"253","hashOfConfig":"143"},{"size":2833,"mtime":1636527623015,"results":"254","hashOfConfig":"143"},{"size":5167,"mtime":1638277106473,"results":"255","hashOfConfig":"143"},{"size":3192,"mtime":1638277719510,"results":"256","hashOfConfig":"143"},{"size":22481,"mtime":1638277106470,"results":"257","hashOfConfig":"143"},{"size":678,"mtime":1636297938177,"results":"258","hashOfConfig":"143"},{"size":5132,"mtime":1638277741144,"results":"259","hashOfConfig":"143"},{"size":22852,"mtime":1638277719511,"results":"260","hashOfConfig":"143"},{"size":3808,"mtime":1638277719583,"results":"261","hashOfConfig":"143"},{"size":3584,"mtime":1638277744580,"results":"262","hashOfConfig":"143"},{"size":6108,"mtime":1638277106470,"results":"263","hashOfConfig":"143"},{"size":2399,"mtime":1634651182377,"results":"264","hashOfConfig":"143"},{"size":0,"mtime":1634651182383,"results":"265","hashOfConfig":"143"},{"size":1478,"mtime":1634651182382,"results":"266","hashOfConfig":"143"},{"size":2373,"mtime":1634651182378,"results":"267","hashOfConfig":"143"},{"size":462,"mtime":1634651182380,"results":"268","hashOfConfig":"143"},{"size":31566,"mtime":1638277106476,"results":"269","hashOfConfig":"143"},{"size":11360,"mtime":1638277106480,"results":"270","hashOfConfig":"143"},{"size":3407,"mtime":1634555131980,"results":"271","hashOfConfig":"143"},{"size":6605,"mtime":1638277106478,"results":"272","hashOfConfig":"143"},{"size":34239,"mtime":1638277106480,"results":"273","hashOfConfig":"143"},{"size":6703,"mtime":1638277106477,"results":"274","hashOfConfig":"143"},{"size":5332,"mtime":1634554437193,"results":"275","hashOfConfig":"143"},{"size":4011,"mtime":1638277106478,"results":"276","hashOfConfig":"143"},{"size":3038,"mtime":1634554437211,"results":"277","hashOfConfig":"143"},{"size":9780,"mtime":1638277106471,"results":"278","hashOfConfig":"143"},{"size":11837,"mtime":1638277106479,"results":"279","hashOfConfig":"143"},{"size":4319,"mtime":1638277719510,"results":"280","hashOfConfig":"143"},{"size":3141,"mtime":1638277719511,"results":"281","hashOfConfig":"143"},{"size":5404,"mtime":1638277106464,"results":"282","hashOfConfig":"143"},{"size":2992,"mtime":1638277719510,"results":"283","hashOfConfig":"143"},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1evuik7",{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"288"},{"filePath":"289","messages":"290","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"301","messages":"302","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"306"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"319","messages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"323","messages":"324","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"333","messages":"334","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"364"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"376","messages":"377","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"378"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"385"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"406"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"415"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"422","messages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"428"},{"filePath":"429","messages":"430","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"431"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434"},{"filePath":"435","messages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448"},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454"},{"filePath":"455","messages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"457","messages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"459","messages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"461"},{"filePath":"462","messages":"463","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"464"},{"filePath":"465","messages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"467"},{"filePath":"468","messages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"470"},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475"},{"filePath":"476","messages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478"},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"481"},{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"484"},{"filePath":"485","messages":"486","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491"},{"filePath":"492","messages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"496"},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":34,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499"},{"filePath":"500","messages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"504","messages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506"},{"filePath":"507","messages":"508","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"509"},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":"512"},{"filePath":"513","messages":"514","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"515","messages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521"},{"filePath":"522","messages":"523","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524"},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"527"},{"filePath":"528","messages":"529","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"530"},{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"533"},{"filePath":"534","messages":"535","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"536"},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"539"},{"filePath":"540","messages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542"},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545"},{"filePath":"546","messages":"547","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"548"},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551"},{"filePath":"552","messages":"553","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"557"},{"filePath":"558","messages":"559","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"560"},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"565"},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":87,"fixableErrorCount":0,"fixableWarningCount":0,"source":"568"},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"571"},{"filePath":"572","messages":"573","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"574"},{"filePath":"575","messages":"576","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"577"},{"filePath":"578","messages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"584","messages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"590"},{"filePath":"591","messages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"593"},{"filePath":"594","messages":"595","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"599"},{"filePath":"600","messages":"601","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"602"},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"605"},{"filePath":"606","messages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"608"},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"611"},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"614","messages":"615","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"616"},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"619"},{"filePath":"620","messages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"622"},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625"},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630"},"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/index.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/App.js",["631","632","633"],"import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nimport DirectionURL from './Router/DirectionURL';\nimport './css/App.css'\nimport { connect } from 'react-redux'\nimport axios from 'axios';\nimport Alert from '@mui/material/Alert';\nimport { FiChevronRight, FiXSquare } from \"react-icons/fi\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  loadAllGood(dataProduct, dataJoin) {\n    var resultProduct = dataProduct;\n    var joinTypeInfor = dataJoin;\n \n    var listProductInfor = [];\n    for (let i = 0; i < resultProduct.length; i++) {\n        var typeIDList = [];\n        var joinType = '';\n        for (var j = 0; j < joinTypeInfor.length; j++) {\n            if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\n                resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) \n            {\n                typeIDList.push(joinTypeInfor[j]._id.typeID);\n            }\n        }\n\n        listProductInfor.push(\n            {\n                ...resultProduct[i],\n                typeIDList: typeIDList,\n            });\n    }\n    this.props.getProductToReducer(listProductInfor);\n  }\n\n  async componentWillMount() {\n    if (localStorage.getItem('token') && localStorage.getItem('token') !== \"\") {\n      axios.post(`http://localhost:5000/refresh`, {\n        token: localStorage.getItem('token'),\n      })\n        .then(res => {\n          if (res.status === 200) {\n            if (res.data.data.isEmployee === false) {\n              this.props.setRole()\n              localStorage.setItem('token', res.data.token);\n              this.props.updateProfile(res.data.data);\n              this.props.updateRecieptUser(res.data.data.receipts)\n              this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n              this.props.updateShiftTypes(res.data.data.shiftTypes)\n              this.props.changeLoginStatus();\n              this.props.getEmployee(res.data.data.employees);\n              // Phi\n              this.props.getTimeKeeping(res.data.data.timeKeeping);\n              this.loadAllGood(res.data.data.products, res.data.data.productJoinTypes);\n            } else {\n              this.props.setRoleEmployee()\n              localStorage.setItem('token', res.data.token);\n              this.props.updateProfileEployee(res.data.data.employee[0], res.data.data.manager[0], res.data.data.store[0].storeName);\n              this.props.updateAvatar(res.data.data.employee[0].imgUrl ? res.data.data.employee[0].imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n              this.props.updateRecieptUser(res.data.data.receipts);\n              this.props.changeLoginStatus();\n              this.props.showAlert(res.data.message, \"success\");\n            }\n\n          }\n        })\n        .catch(err => {\n        })\n    }\n  }\n\n  autoHideAlert = () => {\n    setTimeout(() => this.props.hideAlert(), 4000);\n  }\n\n  render() {\n    return (\n      <Router>\n        <DirectionURL></DirectionURL>\n        {this.props.alertReducer.status ? this.autoHideAlert() : null}\n        {this.props.alertReducer.status ? <Alert style={{ cursor: 'pointer' }} onClick={() => this.props.hideAlert()} className=\"message-error\" severity={this.props.alertReducer.typeMessage}>{this.props.alertReducer.message} — check it out! <FiXSquare></FiXSquare></Alert> : null}\n      </Router>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    isLogin: state.loginStatus,\n    alertReducer: state.alert,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    changeLoginStatus: () => {\n      dispatch({\n        type: \"CHANGE_LOGIN_STATUS\",\n      });\n    },\n    updateProvince: (data) => {\n      dispatch({\n        type: \"UPDATE_DATA\",\n        data: data,\n      })\n    },\n    updateRecieptUser: (data) => {\n      dispatch({\n        type: \"UPDATE_RECIEPT_USER\",\n        listReciept: data,\n      })\n    },\n    updateProfile: (data) => {\n      dispatch({\n        type: \"UPDATA_DATA_USER\",\n        data: data,\n      })\n    },\n    updateAvatar: (avatar) => {\n      dispatch({\n        type: \"UPDATE_AVATAR\",\n        avatar: avatar,\n      })\n    },\n    updateShiftTypes: (shiftTypes) => {\n      dispatch({\n        type: \"UPDATE_DATA_SHIFT_USER\",\n        shiftTypes: shiftTypes,\n      })\n    },\n    hideAlert: () => {\n      dispatch({\n        type: \"HIDE_ALERT\",\n      })\n    },\n    getEmployee: (data) => {\n      dispatch({\n        type: \"GET_EMPLOYEE\",\n        employees: data,\n      });\n    },\n    setRole: () => {\n      dispatch({\n        type: \"ADMIN_ROLE\"\n      });\n    },\n    updateProfileEployee: (data, data1, storeName) => {\n      dispatch({\n        type: \"UPDATA_DATA_EMPLOYEE\",\n        data: data,\n        data1: data1,\n        storeName: storeName,\n      })\n    },\n    setRoleEmployee: () => {\n      dispatch({\n        type: \"EMPLOYEE_ROLE\",\n      });\n    },\n    getTimeKeeping: (data) => {\n      dispatch({\n        type: \"GET_TIMEKEEPER\",\n        data: data\n      });  \n    },\n    getProductToReducer: (data) => {\n      dispatch({\n          type: \"GET_PRODUCT_AND_TYPE\",\n          data: data\n      });\n  },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Store.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/InfoUserReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/LoginStatusReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/TypeStatusReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ProvinceReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/DistrictReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ListProductReducer.js",["634","635","636","637","638","639","640"],"\nconst listProductInitialState = [\n    {\n        _id: {\n            productID: \"\", \n            importDate: \"\", \n            storeID: \"\",\n        },\n        name: \"\", \n        imgUrl: \"\", \n        quantity: \"\", \n        remain: \"\", \n        unit: \"\",\n        importPrice: \"\", \n        sellPrice: \"\", \n        expires: \"\",\n        typeIDList: [],\n    },\n],\n\n    listProductReducer = (state = listProductInitialState, action) => {\n        switch (action.type) {\n            case \"GET_PRODUCT_AND_TYPE\":\n                return {\n                    state: action.data\n                }\n            case \"ADD_PRODUCT\":\n                return {\n                    state: [...state.state, action.data]\n                }\n            case \"UPDATE_PRODUCT\":\n                var newState = [];\n                for(var i = 0 ; i < state.state.length; i++)\n                {\n                    if(state.state[i]._id.productID != action.data._id.productID)\n                    {\n                        newState.push(state.state[i]);\n                    }\n                    else \n                    {\n                        newState.push(action.data);\n                    }\n                }\n                return {\n                    state: newState\n                }\n            case \"DELETE_PRODUCT\":\n                var newState = [];\n                for(var i = 0 ; i < state.state.length; i++)\n                {\n                    if(state.state[i]._id.productID != action.data._id.productID)\n                    {\n                        newState.push(state.state[i]);\n                    }\n                    else \n                    {\n                        \n                    }\n                }\n                return {\n                    state: newState\n                }\n            case \"DECREASE_REMAIN_PRODUCT\": \n            {\n                var newState = [];\n                for(var i = 0 ; i < state.state.length; i++)\n                {\n                    if(state.state[i]._id.productID != action.data._id.productID)\n                    {\n                        newState.push(state.state[i]);\n                    }\n                    else \n                    {\n                        var decreaseVal = state.state[i];\n                        decreaseVal.remain = action.data.remain;\n                        newState.push(decreaseVal);\n                    }\n                }\n                return {\n                    state: newState\n                }\n            }\n            default:\n                return state\n        }\n    }\n\nexport default listProductReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/typeProductReducer.js",["641","642","643","644"],"\nconst typeProductInitialState = [\n    {\n        _id: {\n            typeID: \"\",\n            storeID: \"\",\n        },\n        name: \"\",\n    },\n],\n\n    typeProductReducer = (state = typeProductInitialState, action) => {\n        switch (action.type) {\n            case \"GET_PRODUCT_TYPE\":\n                return action.data;\n            case \"ADD_TYPE\":\n                return [...state, action.data];\n            case \"UPDATE_TYPE\":\n            {\n                var newState = [];\n                for(var i = 0 ; i < state.length ; i ++)\n                {\n                    if(state[i]._id.typeID != action.data._id.typeID)\n                    {\n                        newState.push(state[i]);\n                    }\n                    else \n                    {\n                        newState.push(action.data);\n                    }\n                }\n                return newState;\n            }\n            case \"DELETE_TYPE\":\n            {\n                console.log(\"action.data\", action.data);\n                var newState = [];\n                for(var i = 0 ; i < state.length ; i ++)\n                {\n                    if(state[i]._id.typeID != action.data.typeID)\n                    {\n                        newState.push(state[i]);\n                    }\n                    else \n                    {\n                        console.log(\"Xoá được \")\n                    }\n                }\n                return newState;\n            }\n\n            default:\n                return state\n        }\n    }\n\nexport default typeProductReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ObjectEditShiftReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/chooseTypeProduct.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ConfirmModalReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/TypeProductValueReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RoleReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/InfoUpdateProduct.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/AlertReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/ListShiftReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DirectionURL.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusEditTypeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusConfirmReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusYesConfirmReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusDarkModeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusModalConfirmPassword.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddEmployeeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusUpdateGoodReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddTypeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusAddShiftReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusDeleteConfirmReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/GoodManager/AddGoodStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusUpdateEmployeeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusPayMoneyStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Status/StatusEditShiftReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/GoodManager/UpdateTypeStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/ShoppingBagsReducer.js",["645"],"const shoppingBagsInitialState = [],\n    shoppingBagsReducer = (state = shoppingBagsInitialState, action) => {\n        switch (action.type) {\n            case \"ADD_NEW_PRODUCT_SHOPPING_BAGS\": \n                return [...state, action.newProduct];\n            case \"RAISE_QUANTITY_SHOPPING_BAGS\":\n                return state.map(value => {\n                    if (value.product.name === action.name) {\n                        value.quantity += 1;\n                    }\n                    return value\n                })\n            case \"REDUCE_QUANTITY_SHOPPING_BAGS\":\n                return state.map(value => {\n                    if (value.product.name === action.name) {\n                        value.quantity -= 1;\n                    }\n                    return value\n                })\n            case \"DELETE_PRODUCT_SHOPPING_BAGS\":\n                return state.filter((value) => {\n                    if (value.product.name !== action.name) {\n                        return value;\n                    } \n                })\n            case \"RESET_SHOPPING_BAGS\":\n                return state = [];\n            case \"INFO_SHOPPING_BAGS_EDIT\":\n                return action.listProduct\n            default:\n                return state\n        }\n    }\n\nexport default shoppingBagsReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/InfomationBillEdit.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/StatusShowHistoryRecieptReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/employeeListReducer.js",["646","647","648"],"const listEmployeeInitialState = {\n    employees: [\n        // {\n        //     _id: { \n        //         employeeID: '3', \n        //         storeID: '19522006@gm.uit.edu.vn' \n        //     },\n        //     managerID: '19522006@gm.uit.edu.vn',\n        //     password: '1212',\n        //     firstName: '1212',\n        //     lastName: '1212',\n        //     phoneNumber: '1212',\n        //     dateOfBirth: \"2021-11-20T00:00:00.000Z\",\n        //     email: '12121',\n        //     address: '1212',\n        //     cardID: '1212',\n        //     startDate: \"2021-11-26T00:00:00.000Z\",\n        //     deleted: false,\n        //     __v: 0\n        // },\n    ]\n}\n\nconst  listEmployeeReducer = (state = listEmployeeInitialState, action) => {\n        switch (action.type) {\n            case \"GET_EMPLOYEE\":\n                state.employees = action.employees;\n                return state;\n            case \"ADD_EMPLOYEE\":\n                return {\n                    employees : [...state.employees, action.employees ]\n                }\n            case \"UPDATE_EMPLOYEE\":\n                {\n                    var newState = [];\n                    for(var i = 0 ; i < state.employees.length ; i ++)\n                    {\n                        if(i != action.index)\n                        {\n                            newState.push(state.employees[i]);\n                        }\n                        else \n                        {\n                            newState.push(action.data);\n                        }\n                    }\n                    console.log(\"newState\", newState);\n                    return {\n                        employees : newState\n                    }\n\n                }\n                case \"DELETE_EMPLOYEE\":\n                {\n                    console.log(\"action\", action);\n                    var newState = [];\n                    for(var i = 0 ; i < state.employees.length ; i ++)\n                    {\n                        if(state.employees[i]._id.employeeID !== action.id)\n                        {\n                            newState.push(state.employees[i]);\n                        }\n                        else {\n                            console.log(\"Kiếm đc cái xoá rồi\")\n                        }\n                    }\n                    return {\n                        employees : newState\n                    }\n\n                }\n            default:\n                return state\n        }\n    }\n\nexport default listEmployeeReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/currentEditEmployeeReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/StatusEditInfomationBill.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/employeeSackedListReducer.js",["649","650"],"const listSackedEmployeeInitialState = {\n    employees: [\n        {\n            _id: { \n                employeeID: '3', \n                storeID: '19522006@gm.uit.edu.vn' \n            },\n            managerID: '19522006@gm.uit.edu.vn',\n            password: '1212',\n            firstName: '1212',\n            lastName: '1212',\n            phoneNumber: '1212',\n            dateOfBirth: \"2021-11-20T00:00:00.000Z\",\n            email: '12121',\n            address: '1212',\n            cardID: '1212',\n            startDate: \"2021-11-26T00:00:00.000Z\",\n            deleted: false,\n            __v: 0\n        },\n    ]\n}\n\nconst  listSackedEmployeeReducer = (state = listSackedEmployeeInitialState, action) => {\n        switch (action.type) {\n            case \"GET_EMPLOYEE_SACKED\":\n                state.employees = action.employees;\n                return state;\n            case \"DELETE_EMPLOYEE_SACKED\":\n                console.log(\"action\", action);\n                return {\n                    employees: [...state.employees, action.data]\n                };\n            case \"RETURN_TO_WORK\":\n            {\n                var newState = [];\n                for(var i = 0 ; i < state.employees.length ; i ++)\n                {\n                    if(state.employees[i]._id.employeeID !== action.id)\n                    {\n                        newState.push(state.employees[i]);\n                    }\n                    else {\n                        console.log(\"Kiếm đc cái xoá rồi\")\n                    }\n                }\n                return {\n                    employees : newState\n                }\n            }\n            case \"DELETE_PERMANTLY_EMPLOYEE\":\n            {\n                var newState = [];\n                for(var i = 0 ; i < state.employees.length ; i ++)\n                {\n                    if(state.employees[i]._id.employeeID !== action.employeeID)\n                    {\n                        newState.push(state.employees[i]);\n                    }\n                    else {\n                        console.log(\"Kiếm đc cái xoá rồi\")\n                    }\n                }\n                return {\n                    employees : newState\n                }\n            }\n            default:\n                return state\n        }\n    }\n\nexport default listSackedEmployeeReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateNextWeekTimeKeepingStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateTimeKeepingStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/nextWeekTimeKeepingReducer.js",["651"],"const nextWeekTimeKeepingInitialState =\n    \n[\n    {\n        _id: {\n            dateInWeek: \"T6\",\n            storeID: \"19522006@gm.uit.edu.vn\",\n            shiftType: {\n                _id: {\n                    shiftID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n            },\n            employee: {\n                _id: {\n                    employeeID: \"2\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n            },\n        },\n        alternativeEmployee: {\n            _id: {\n                employeeID: \"3\",\n                storeID: \"19522006@gm.uit.edu.vn\",\n            },\n        },\n        realDate: \"2021-12-04\",\n    }\n];\n\nconst nextWeekTimeKeepingReducer = (state = nextWeekTimeKeepingInitialState, action) => {\n        switch (action.type) {\n            case \"SET_NEXT_WEEK_TIMEKEEPER\":\n                return action.data;\n            case \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\":\n                return [...state, action.data]\n            case \"UPDATE_NEXT_WEEK_TIMEKEEPER\":\n                {\n                    var newState = [];\n                    for(var i = 0 ; i < state.length ; i ++)\n                    {\n                        if(i != action.index)\n                        {\n                            newState.push(state[i]);\n                        }\n                        else \n                        {\n                            newState.push(action.data);\n                        }\n                    }\n                    return newState;\n                }\n            case \"DELETE_NEXT_WEEK_TIMEKEEPER\":\n            {\n                console.log(action.data._id.dateInWeek);\n                return state.filter((value, key) => \n                (\n                    value._id.dateInWeek !== action.data._id.dateInWeek \n                    || value._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \n                    || value._id.employee._id.employeeID !== action.data._id.employee._id.employeeID\n                    || value._id.realDate !== action.data._id.realDate\n                ));\n            }\n                \n            default:\n                return state\n        }\n    }\n\nexport default nextWeekTimeKeepingReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateTimeKeeperValue.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/addNextWeekTimeKeepingStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/listTimeKeepingReducer.js",["652","653","654"],"const listTimeKeepingInitialState =   \n[\n    // {\n    //     _id: {\n    //         dateInWeek: 'T7',\n    //         storeID: '19522006@gm.uit.edu.vn',\n    //         shiftType: {\n    //             _id: {\n    //                 shiftID: 'v908tB',\n    //                 storeID: '19522006@gm.uit.edu.vn',\n    //             },\n    //         },\n    //         employee: {\n    //             _id: {\n    //                 employeeID: '1',\n    //                 storeID: '19522006@gm.uit.edu.vn',\n    //             },\n    //         },\n    //     },\n    //     realDate: '2021-11-11',\n    //     isPaidSalary: false,\n    //     createdAt: '2021-01-02',\n    // }\n    \n];\n\nconst listTimeKeepingReducer = (state = listTimeKeepingInitialState, action) => {\n        switch (action.type) {\n            case \"GET_TIMEKEEPER\":\n                return action.data;\n            case \"ADD_NEW_TIME_KEEPER\":\n                return [...state, action.data];\n            case \"UPDATE_TIMEKEEPER\":\n                {\n                    var newState = [];\n                    for(var i = 0 ; i < state.length ; i ++)\n                    {\n                        if(i != action.index)\n                        {\n                            newState.push(state[i]);\n                        }\n                        else \n                        {\n                            newState.push(action.data);\n                        }\n                    }\n                    return newState;\n                }\n            case \"DELETE_TIMEKEEPER\":\n                {\n                    console.log(\"action\", action);\n                    var newState = [];\n                    for(var i = 0 ; i < state.length ; i ++)\n                    {\n                        if(state[i]._id.dateInWeek !== action.data._id.dateInWeek \n                            || state[i]._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \n                            || state[i]._id.employee._id.employeeID !== action.data._id.employee._id.employeeID)\n                        {\n                            newState.push(state[i]);\n                        }\n                        else {\n                            console.log(\"Kiếm đc cái xoá rồi\")\n                        }\n                    }\n                    return newState;\n\n                    // return state.filter((value, key) => \n                    //     (\n                    //         value._id.dateInWeek !== action.data._id.dateInWeek \n                    //         || value._id.shiftType._id.shiftID !== action.data._id.shiftType._id.shiftID \n                    //         || value._id.employee._id.employeeID !== action.data._id.employee._id.employeeID \n                    //     )\n                    // );\n                }\n               \n                \n            default:\n                return state\n        }\n    }\n\nexport default listTimeKeepingReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/currentEmployeeViewValue.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/addTimeKeepingStatus.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/listShiftAssignReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/ListRecieptDelete.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/SearchReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/TypeReciept.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/TypeByDate.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/RecieptManager/StatusSelectAll.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Employee/updateNextWeekTimeKeepingValue.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/SellProduct/ListRecieptReducer.js",["655","656","657"],"const listRecieptInitialState = [],\n    listRecieptReducer = (state = listRecieptInitialState, action) => {\n        switch (action.type) {\n            case \"UPDATE_RECIEPT_USER\":\n                action.listReciept.map(value => {\n                    let data = {\n                        MAHD: value._id.receiptID,\n                        name: value.employeeID.name,\n                        idUser: value.employeeID._id.employeeID ? value.employeeID._id.employeeID : '',\n                        date: value.createAt,\n                        discount: value.discount,\n                        totalMoney: value.totalMoney,\n                        totalFinalMoney: value.totalFinalMoney,\n                        listProduct: value.listItem,\n                        time: value.timeCreate,\n                        isEdit: value.isEdit,\n                        oldBill: value.oldBill,\n                        deleted: value.deleted ? value.deleted : false,\n                        coupon: value.coupon ? value.coupon : null\n                    }\n                    state.push(data)\n                })\n                return state;\n            case \"ADD_RECIEPT\":\n                return [...state, action.newReciept]\n            case \"EDIT_SHOPPING_BAGS\":\n                return state.filter((value) => {\n                    if (value.MAHD === action.MAHD) {\n                        value.isEdit = true\n                    }\n                    return value;\n                })\n            case \"DELETE_RECIEPT\":\n                return state.filter((value) => {\n                    if (value.MAHD === action.MAHD) {\n                        value.deleted = true\n                    }\n                    return value;\n                })\n            case \"DELETE_ONE_RECIEPT\":\n                return state.filter((value) => {\n                    if (value.MAHD !== action.MAHD) {\n                        return value\n                    }\n                })\n            case \"DELETE_MAHD_SELECTED_RECIEPT\":\n                return state.filter(value => {\n                    action.listMAHD.map(value1 => {\n                        if (value.MAHD === value1) {\n                            value.deleted = true\n                        }\n                    })\n                    return value\n                })\n            case \"DELETE_MAHD_INVOICE_RECIEPT\":\n                return state.filter(value => {\n                    return !value.deleted\n                })\n            case \"RESTONE_ONE_RECIEPT\":\n                return state.filter(value => {\n                    if (value.MAHD === action.MAHD) {\n                        value.deleted = false;\n                    }\n                    return value\n                })\n            case \"RESTONE_ALL_RECIEPT\":\n                return state.filter(value => {\n                    value.deleted = false;\n                    return value\n                })\n            case \"DELETE_ALL_RECIEPT\":\n                return state.filter(value => {\n                    value.deleted = true\n                    return value;\n                })\n            case \"RESET_ALL_RECIEPT_USER\":\n                return [];\n            default:\n                return state\n        }\n    }\n\nexport default listRecieptReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Dashboard/TypeHeaderDashboard.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Dashboard/YearSelectReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/StatusModalAddCoupon.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/ListCoupon.js",["658"],"\nconst listCouponInitialState = [],\nlistCouponReducer = (state = listCouponInitialState, action) => {\n    switch (action.type) {\n        case \"DELETE_COUPON\":\n            return state.filter((value, key) => (value.idCoupon !== action.idCoupon));\n        case \"ADD_COUPON\":\n            return [...state, action.data]\n        case \"EDIT_COUPON\":\n            return state.map(value => {\n                if(value.idCoupon == action.data.idCoupon) {\n                    value.name = action.data.name\n                    value.percent = action.data.percent\n                    value.minTotal = action.data.minTotal\n                    value.timeFrom = action.data.timeFrom\n                    value.timeEnd = action.data.timeEnd\n                }\n                return value\n            })\n        // case \"OBJECT_UPDATE_SHIFT\":\n        //     state.forEach(item => {\n        //         if(item._id.shiftID === action.data.id) {\n        //             item.name = action.data.description;\n        //             item.salary = action.data.salary;\n        //             item.timeFrom = action.data.from;\n        //             item.timeEnd = action.data.to;\n        //         }\n        //     })\n        //     return state\n        default:\n            return state\n    }\n}\n\nexport default listCouponReducer;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/StatusEditCoupon.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Dashboard/TypeTimeDashboard.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Profile/ObjectEditCoupon.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Reducer/Dashboard/MonthSelectReducer.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Body.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Login.js",["659","660","661","662"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../css/Login.css'\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\nimport { FiChevronRight } from \"react-icons/fi\";\nimport { BiUser } from \"react-icons/bi\";\nimport { Avatar } from '@mui/material'\nimport { IconContext } from \"react-icons\";\nimport { GoogleLogin } from 'react-google-login';\nimport axios from 'axios';\n\n\nclass Login extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            appId: \"543752153590340\",\n            clientId: \"826925109796-mi95l41fi57bdlolpvnfdg5bpt9oc81h.apps.googleusercontent.com\",\n        }\n    }\n\n    loadAllGood(dataProduct, dataJoin) {\n        var resultProduct = dataProduct;\n        var joinTypeInfor = dataJoin;\n     \n        var listProductInfor = [];\n        for (let i = 0; i < resultProduct.length; i++) {\n            var typeIDList = [];\n            var joinType = '';\n            for (var j = 0; j < joinTypeInfor.length; j++) {\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) \n                {\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\n                }\n            }\n    \n            listProductInfor.push(\n                {\n                    ...resultProduct[i],\n                    typeIDList: typeIDList,\n                });\n        }\n        this.props.getProductToReducer(listProductInfor);\n      }\n\n    // Login with google\n    onLoginSuccess = async (res) => {\n        this.props.setRole();\n        await axios.post(`http://localhost:5000/sign-in-with-google`, res.profileObj)\n            .then(res => {\n                switch (res.data.status) {\n                    case 1:\n                        localStorage.setItem('token', res.data.token);\n                        this.props.updateProfile(res.data.data);\n                        this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n                        this.props.updateShiftTypes(res.data.data.shiftTypes);\n                        this.props.updateRecieptUser(res.data.data.receipts);\n                        this.props.changeLoginStatus();\n                        this.props.getTimeKeeping(res.data.data.timeKeeping);\n                        this.loadAllGood(res.data.data.products, res.data.data.productJoinTypes);\n                        this.props.hideAlert();\n                        this.props.showAlert(res.data.message, \"success\");\n                        break;\n                    case -1:\n                        this.props.hideAlert();\n                        this.props.showAlert(res.data.message, \"error\");\n                        break;\n                    default:\n                        break;\n                }\n            })\n            .catch(err => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Error, server don't active\", \"error\");\n            })\n    }\n\n    // Check để thay đổi trạng thái đã login hay chưa\n    isLoginCheck = async (e) => {\n        this.props.setRole();\n        if (this.blurEmail() && this.blurPassword()) {\n            await axios.post(`http://localhost:5000/sign-in-with-gmail-password`, {\n                email: document.querySelector('#email').value,\n                password: document.getElementById('password').value,\n            })\n                .then(res => {\n                    switch (res.data.status) {\n                        case 1:\n                            localStorage.setItem('token', res.data.token);\n                            this.props.updateProfile(res.data.data);\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n                            this.props.updateShiftTypes(res.data.data.shiftTypes);\n                            this.props.updateRecieptUser(res.data.data.receipts);\n                            this.props.changeLoginStatus();\n                            this.props.getEmployee(res.data.data.employees);\n                            this.props.getTimeKeeping(res.data.data.timeKeeping);\n                            this.loadAllGood(res.data.data.products, res.data.data.productJoinTypes);\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"success\");\n                            break;\n                        case -1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"error\");\n                            break;\n                        default:\n                            break;\n                    }\n                })\n                .catch(err => {\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Error system\", \"error\");\n                })\n        }\n    }\n\n    // Handle user : blur , change in input\n    blurEmail = () => {\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        const event = document.querySelector('#email');\n        let elementValue = event.value;\n        const formGroup = event.parentElement.parentElement;\n        // check validate\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        let elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    componentWillMount() {\n        document.title = 'Login'\n    }\n\n    render() {\n        const enterPress = this.isLoginCheck;\n        document.onkeydown = function (e) {\n            switch (e.which) {\n                case 13:\n                    try\n                    {\n                        enterPress(e);\n                    }\n                    catch(err) \n                    {\n                        console.log(\"Alo lỗi mẹ rồi\")\n                    }\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return (\n            <div className=\"Login\">\n                <div className=\"form-login\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <BiUser></BiUser>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Login</div>\n                                <NavLink to=\"/register\" className=\"auth-form__switch-btn\">Register <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight></NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"auth-form__support\">\n                                    <span className=\"auth-form__support-forget\">\n                                        <NavLink to=\"/forgot\" className=\"auth-form__switch-btn\">Forgot password</NavLink>\n                                    </span>\n                                    <span className=\"auth-form__help-separate\" />\n                                    <span className=\"auth-form__support-need-support\">Need help?</span>\n                                </div>\n                                <div className=\"auth-form__support\">\n                                    <GoogleLogin\n                                        className=\"auth-form__support-google\"\n                                        clientId={this.state.clientId}\n                                        buttonText=\"Login with Google\"\n                                        onSuccess={this.onLoginSuccess}\n                                        onFailure={this.onFailureSuccess}\n                                        cookiePolicy={'single_host_origin'}\n                                    />\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div to=\"/home\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <NavLink to=\"/employee\" id=\"navlink\" className=\"auth-form__btn-log-in auth-form__switch-btn auth-form-employee\">\n                                        Employee\n                                        <FiChevronRight className=\"auth-form__arrow-return\"></FiChevronRight>\n                                    </NavLink>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        updateProfile: (data) => {\n            dispatch({\n                type: \"UPDATA_DATA_USER\",\n                data: data,\n            })\n        },\n        setRole: () => {\n            dispatch({\n                type: \"ADMIN_ROLE\"\n            });\n        },\n        updateAvatar: (avatar) => {\n            dispatch({\n                type: \"UPDATE_AVATAR\",\n                avatar: avatar,\n            })\n        },\n        updateShiftTypes: (shiftTypes) => {\n            dispatch({\n                type: \"UPDATE_DATA_SHIFT_USER\",\n                shiftTypes: shiftTypes,\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n          },\n        updateShiftTypes: (shiftTypes) => {\n            dispatch({\n                type: \"UPDATE_DATA_SHIFT_USER\",\n                shiftTypes: shiftTypes,\n            })\n        },\n        updateRecieptUser: (data) => {\n            dispatch({\n                type: \"UPDATE_RECIEPT_USER\",\n                listReciept: data,\n            })\n        },\n        getTimeKeeping: (data) => {\n            dispatch({\n              type: \"GET_TIMEKEEPER\",\n              data: data\n            });  \n          },\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/Register.js",["663","664","665"],"import React, { Component } from 'react';\nimport '../../css/Login.css'\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport { connect } from 'react-redux';\nimport Avatar from '@mui/material/Avatar'\nimport { IconContext } from \"react-icons\";\nimport { FiChevronLeft, FiUserPlus } from \"react-icons/fi\";\nimport { BsFillEnvelopeFill, BsLockFill, BsCodeSlash } from \"react-icons/bs\";\nimport { FaPhoneSquare } from \"react-icons/fa\";\nimport axios from 'axios';\nimport emailjs from 'emailjs-com';\nvar bcrypt = require('bcryptjs');\n\n\nclass Register extends Component {\n    constructor(props) {\n\n        super(props);\n        this.state = {\n            code: \"\",\n            statusSendCode: true,\n        }\n    }\n\n\n    // Send code tới người dùng\n    sendCode = (a = this.makeCode(6)) => {\n        this.setState({\n            code: \"123456\"\n        })\n        // this.setState({\n        //     code: a,\n        // })\n        // emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\n        // emailjs.send(\"gmail_main\", \"template_plasdgf\", {\n        //     To_mail: `${document.getElementById('email').value}`,\n        //     code: `${a}`,\n        // })\n        //     .then((response) => {\n        //         console.log('SUCCESS!', response.status, response.text);\n        //     }, (err) => {\n        //         console.log('FAILED...', err);\n        //     });\n    }\n\n    // status SignUp \n    SignUp = (e) => {\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword() && this.blurTel()) {\n            axios.post(`http://localhost:5000/register-with-email`, {\n                email: document.getElementById('email').value,\n                password: this.hash(document.getElementById('password').value),\n                tel: document.getElementById('tel').value,\n            })\n                .then(res => {\n                    switch (res.data.status) {\n                        case 1:\n                            localStorage.setItem('token', res.data.token);\n                            this.props.updateProfile(res.data.data);\n                            this.props.updateAvatar(res.data.data.manager.imgUrl ? res.data.data.manager.imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n                            this.props.changeLoginStatus();\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"success\");\n\n                            break;\n                        case -1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"error\");\n                            break;\n                        default:\n                            break;\n                    }\n                })\n                .catch(err => {\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Error system\", \"error\");\n                })\n\n        }\n    }\n\n\n    // Tạo mã code cho người dùng xác nhận\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    // Hashpassword\n    hash = (pass) => {\n        var hash = bcrypt.hashSync(pass, 12)\n        return hash;\n    }\n\n\n    // Handle user : blur, change in input\n    blurEmail = () => {\n        const regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        const e = document.getElementById('email');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            this.setState({\n                statusSendCode: false,\n            })\n            return true;\n        }\n    }\n\n    blurCode = () => {\n        const e = document.getElementById('code');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (this.state.code === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\n            return false\n        } else if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\n            return false\n        } else if (elementValue !== this.state.code) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\n            return false\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurRePassword = () => {\n        const e = document.getElementById('re-password')\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (document.getElementById('password').value !== elementValue) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true\n        }\n    }\n\n    blurTel = () => {\n        const e = document.getElementById('tel');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        const regex = /^\\d+$/;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Phone is not in the correct format\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    componentWillMount() {\n        document.title = 'Register'\n    }\n\n    render() {\n        const enterPress = this.SignUp;\n        document.onkeydown = function (e) {\n            switch (e.which) {\n                case 13:\n                    enterPress(e);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return (\n            <div className=\"Login\">\n                <div className=\"form-register\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <FiUserPlus></FiUserPlus>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Register</div>\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Login</NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/register-submit\" method=\"post\" id=\"register-form\">\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"VD: abc@gmail.com\" type=\"text\" />\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND CODE</button>\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"re-password\" id=\"re-password\" placeholder=\"Emter re-password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <FaPhoneSquare className=\"input-custom-icon\" ></FaPhoneSquare>\n                                        </span>\n                                        <input className=\"form-control\" onBlur={(e) => this.blurTel(e)} onChange={(e) => this.changeInput(e)} name=\"tel\" rules=\"required\" id=\"tel\" placeholder=\"Ex: 0303030303\" type=\"tel\" />\n\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"register-description\">Bằng cách ấn vào nút\n                                    <span className=\"register-description__keyword\">“ĐĂNG KÝ”</span>\n                                    , tôi đồng ý với\n                                    <span className=\"register-description__keyword\">Điều Khoản Sử Dụng</span> và\n                                    <div className=\"register-description__keyword\"> Chính Sách Bảo Mật</div>\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div onClick={(e) => this.SignUp(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign Up</div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div >\n            </div >\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        updateProfile: (data) => {\n            dispatch({\n                type: \"UPDATA_DATA_USER\",\n                data: data,\n            })\n        },\n        updateAvatar: (avatar) => {\n            dispatch({\n                type: \"UPDATE_AVATAR\",\n                avatar: avatar,\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/ForgotPassword.js",["666","667","668"],"import React, { Component } from 'react';\nimport Avatar from '@mui/material/Avatar'\nimport { IconContext } from \"react-icons\";\nimport { FiSend } from \"react-icons/fi\";\nimport { BsFillEnvelopeFill, BsLockFill, BsBoxArrowInLeft, BsCodeSlash } from \"react-icons/bs\";\nimport emailjs from 'emailjs-com';\nimport axios from 'axios';\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport { connect } from 'react-redux';\nvar bcrypt = require('bcryptjs');\n\n\nclass ForgotPassword extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            code: \"\",\n            statusSendCode: true,\n        }\n    }\n\n\n    // Send code tới người dùng\n    sendCode = (a = this.makeCode(6)) => {\n        this.setState({\n            code: \"123456\"\n        })\n        // this.setState({\n        //     code: a,\n        // })\n        // emailjs.init(\"user_K1g5N5hUDI0rjsa1uRoI4\");\n        // emailjs.send(\"gmail_main\", \"template_plasdgf\", {\n        //     To_mail: `${document.querySelector('#email').value}`,\n        //     code: `${a}`,\n        // })\n        //     .then((response) => {\n        //         console.log('SUCCESS!', response.status, response.text);\n        //     }, (err) => {\n        //         console.log('FAILED...', err);\n        //     });\n    }\n\n    // Tạo code để xác nhận\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    // Hashpassword\n    hash = (pass) => {\n        var hash = bcrypt.hashSync(pass, 12)\n        return hash;\n    }\n\n    //Check tìm lại mật khẩu\n    findPassword = (e) => {\n        if (this.blurEmail() && this.blurCode() && this.blurPassword() && this.blurRePassword()) {\n            const form = document.getElementById('findpass-form');\n            axios.post(`http://localhost:5000/find-password`, {\n                email: document.querySelector('#email').value,\n                password: this.hash(document.getElementById('password').value),\n            })\n                .then(res => {\n                    form.reset();\n                    switch (res.data.status) {\n                        case 1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"success\");\n                            break;\n                        case -1:\n                            this.props.hideAlert();\n                            this.props.showAlert(res.data.message, \"error\");\n                            break;\n                        default:\n                            break;\n                    }\n                })\n                .catch(err => {\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Error system\", \"error\");\n                })\n        }\n    }\n\n\n    // Handle user blue change in input\n    blurEmail = () => {\n        var regex = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n        const event = document.querySelector('#email');\n        const elementValue = event.value;\n        const formGroup = event.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false;\n        } else if (!regex.test(elementValue)) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Email is not in the correct format\";\n            this.setState({\n                statusSendCode: true,\n            })\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            this.setState({\n                statusSendCode: false,\n            })\n            return true;\n        }\n    }\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurCode = () => {\n        const e = document.getElementById('code');\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (this.state.code === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please press Send Code\"\n            return false\n        } else if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter code here\"\n            return false\n        } else if (elementValue !== this.state.code) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Code is incorrect\"\n            return false\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    blurRePassword = () => {\n        const e = document.getElementById('re-password')\n        const elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else if (document.getElementById('password').value !== elementValue) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Re-password not correct\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    componentWillMount() {\n        document.title = 'Find password'\n    }\n\n    render() {\n        const enterPress = this.findPassword;\n        document.onkeydown = function (e) {\n            switch (e.which) {\n                case 13:\n                    enterPress(e);\n                    break;\n                default:\n                    break;\n            }\n        }\n        return (\n            <div className=\"Login\">\n                <div className=\"form-findpass\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <FiSend></FiSend>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Find password</div>\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"><BsBoxArrowInLeft className=\"arrow-return\"></BsBoxArrowInLeft></NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/findpass-submit?_method=PUT\" method=\"POST\" id=\"findpass-form\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\" className=\"form-label\">Email</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"email\" rules=\"required|email\" id=\"email\" placeholder=\"Ex: abc@gmail.com\" type=\"text\" />\n                                        <button type=\"button\" disabled={this.state.statusSendCode} onClick={() => this.sendCode()} class=\"btn btn-primary disabel send-code\">SEND</button>\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"code\" className=\"form-label\">Code</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsCodeSlash className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurCode()} name=\"code\" rules=\"required|email\" id=\"code\" placeholder=\"Ex: ABC321\" type=\"text\" />\n\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">New password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurPassword()} name=\"password\" rules=\"required|min:6\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">Re-password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurRePassword()} name=\"password\" rules=\"required|min:6\" id=\"re-password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div onClick={(e) => this.findPassword(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Find Password</div>\n                                </div>\n\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        }\n    }\n}\n\n\n\nexport default connect(mapDispatchToProps)(ForgotPassword);\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Login/LoginWithEmployee.js",["669","670"],"import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport {\n    NavLink\n} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '../../css/Login.css'\nimport { BsFillEnvelopeFill, BsLockFill } from \"react-icons/bs\";\nimport { FiXSquare, FiChevronLeft } from \"react-icons/fi\";\nimport { FaUserTie } from 'react-icons/fa'\nimport { Avatar } from '@mui/material'\nimport { IconContext } from \"react-icons\";\nimport axios from 'axios';\nimport Alert from '@mui/material/Alert';\n\nclass LoginWithEmployee extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n\n        }\n    }\n\n\n\n\n    // Check để thay đổi trạng thái đã login hay chưa\n    isLoginCheck = async (e) => {\n        this.props.setRole();\n        if (this.blurEmail() && this.blurPassword()) {\n            await axios.post(`http://localhost:5000/sign-in-employee`, {\n                email: document.querySelector('#username').value,\n                password: document.getElementById('password').value,\n            })\n                .then(res => {\n                    if (res.status === 200) {\n                        localStorage.setItem('token', res.data.token);\n                        this.props.updateProfile(res.data.data.employee[0], res.data.data.manager[0], res.data.data.store[0].storeName);\n                        this.props.updateAvatar(res.data.data.employee[0].imgUrl ? res.data.data.employee[0].imgUrl : \"https://res.cloudinary.com/databaseimg/image/upload/v1634091995/sample.jpg\");\n                        this.props.updateRecieptUser(res.data.data.receipts);\n                        this.props.changeLoginStatus();\n                        this.props.hideAlert();\n                        this.props.showAlert(\"Login successfully\", \"success\");\n                    }\n                })\n                .catch(err => {\n                    this.props.hideAlert();\n                    this.props.showAlert(\"The email IS NOT registered or you entered the WRONG password.\", \"error\");\n                    return;\n                })\n            // Get các thông tin để thêm vào redux\n            \n        }\n    }\n\n\n    // Handle user : blur , change in input\n    blurEmail = () => {\n        const event = document.querySelector('#username');\n        let elementValue = event.value;\n        const formGroup = event.parentElement.parentElement;\n        // check validate\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n\n    blurPassword = () => {\n        const e = document.getElementById('password');\n        let elementValue = e.value;\n        const formGroup = e.parentElement.parentElement;\n        if (elementValue === \"\") {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Please enter this field\"\n            return false;\n        } else if (e.value.length < 6) {\n            formGroup.className = 'invalid form-group'\n            formGroup.querySelector('.form-message').innerText = \"Enter at least 6 characters\";\n            return false;\n        } else {\n            formGroup.classList.remove('invalid');\n            formGroup.querySelector('.form-message').innerText = \"\";\n            return true;\n        }\n    }\n\n    changeInput = (e) => {\n        const formGroup = e.target.parentElement.parentElement;\n        formGroup.classList.remove('invalid');\n        formGroup.querySelector('.form-message').innerText = \"\";\n    }\n\n    componentWillMount() {\n        document.title = 'Employee'\n    }\n\n    render() {\n        const enterPress = this.isLoginCheck;\n        document.onkeydown = function (e) {\n            switch (e.which) {\n                case 13:\n                    enterPress(e);\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        return (\n            <div className=\"Login\">\n                <div className=\"form-login\">\n                    <div className=\"auth-form\">\n                        <Avatar className=\"auth-form__avatar\">\n                            <IconContext.Provider value={{ color: \"blue\", size: \"3em\", className: \"global-class-name\" }}>\n                                <FaUserTie></FaUserTie>\n                            </IconContext.Provider>\n                        </Avatar>\n                        <div className=\"auth-form__container\">\n                            <div className=\"auth-form__header\">\n                                <div className=\"auth-form__heading\">Employee</div>\n                                <NavLink to=\"/login\" className=\"auth-form__switch-btn\"> <FiChevronLeft className=\"auth-form__arrow-return\"></FiChevronLeft>Login</NavLink>\n                            </div>\n                        </div>\n                        <div className=\"auth-form__body\">\n                            <form action=\"/login-submit\" method=\"POST\" id=\"login-form\">\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"email\" className=\"form-label\">Username</label>\n                                    <div className=\"input-custom\">\n                                        <span><BsFillEnvelopeFill className=\"input-custom-icon\" /></span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={() => this.blurEmail()} name=\"username\" id=\"username\" placeholder=\"VD: phuoc123\" type=\"text\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <label htmlFor=\"password\" className=\"form-label\">Password</label>\n                                    <div className=\"input-custom\">\n                                        <span>\n                                            <BsLockFill className=\"input-custom-icon\" ></BsLockFill>\n                                        </span>\n                                        <input className=\"form-control\" onChange={(e) => this.changeInput(e)} onBlur={(e) => this.blurPassword(e)} name=\"password\" id=\"password\" placeholder=\"Emter password\" type=\"password\" />\n                                    </div>\n                                    <span className=\"form-message\" />\n                                </div>\n                                <div className=\"auth-form__btn\">\n                                    <div to=\"/sellproduct\" id=\"navlink\" onClick={(e) => this.isLoginCheck(e)} className=\"auth-form__btn-log-in auth-form__switch-btn\">Sign In</div>\n                                </div>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        setRole: () => {\n            dispatch({\n                type: \"EMPLOYEE_ROLE\",\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        updateProfile: (data, data1, storeName) => {\n            dispatch({\n                type: \"UPDATA_DATA_EMPLOYEE\",\n                data: data,\n                data1: data1,\n                storeName: storeName,\n            })\n        },\n        setProfile: (data) => {\n            dispatch({\n                type: \"SET_DATA_USER\",\n                data: data,\n            })\n        },\n        updateAvatar: (avatar) => {\n            dispatch({\n                type: \"UPDATE_AVATAR\",\n                avatar: avatar,\n            })\n        },\n        updateRecieptUser: (data) => {\n            dispatch({\n                type: \"UPDATE_RECIEPT_USER\",\n                listReciept: data,\n            })\n        },\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginWithEmployee);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Router/DashboardURL.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/ModalConfirmPassword.js",["671"],"import React from 'react';\nimport {Card,CardHeader,Divider,CardContent,Grid,TextField,Box,Button} from '@mui/material';\nimport {BiPlusMedical} from 'react-icons/bi'\nimport { GiCancel } from 'react-icons/gi'\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ModalConfirmPassword(props) {\n\n    const statusConfirmPassword = useSelector(state => state.statusConfirmPassword)\n    const dispatch = useDispatch();\n\n    const handleCancel = () => {\n        dispatch({\n            type:\"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\n        })\n    }\n\n    return (\n        <Card className=\"card-confirm-password\" style={{ minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }}>\n            <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm password\" />\n            <Divider />\n            <CardContent>\n                <Grid container spacing={2}>\n                    <Grid item md={12} xs={12}>\n                        <TextField\n                            id=\"outlined-basic\"\n                            variant=\"outlined\"\n                            fullWidth\n                            label=\"Your password\"\n                            required\n                            type=\"password\"\n                        />\n                    </Grid>\n                </Grid>\n            </CardContent>\n            <Divider />\n            <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                <Button style={{ backgroundColor: 'yellowgreen' }} variant=\"contained\" startIcon={<BiPlusMedical />}>\n                    Xác nhận\n                </Button>\n                <Button style={{ backgroundColor: 'red' }} onClick={() => handleCancel()} variant=\"contained\" startIcon={<GiCancel />}>\n                    Hủy\n                </Button>\n            </Box>\n        </Card>\n    );\n}\n\nexport default ModalConfirmPassword;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Partials/SideNavBar.js",["672","673","674","675","676","677"],"import React, { Component } from 'react';\n\nimport { connect } from 'react-redux';\nimport {\n    AiOutlineDashboard,\n    AiFillDashboard,\n    AiOutlineContainer,\n    AiFillContainer\n} from \"react-icons/ai\";\nimport { Button } from '@mui/material';\nimport { BsInfoCircleFill } from \"react-icons/bs\";\nimport {\n    IoPeopleOutline,\n    IoPeopleSharp,\n    IoReceiptOutline,\n    IoReceiptSharp,\n} from \"react-icons/io5\";\nimport { ImCheckboxUnchecked, ImCheckboxChecked } from \"react-icons/im\"\nimport { IoIosArrowBack } from \"react-icons/io\";\nimport { RiProfileFill, RiProfileLine } from \"react-icons/ri\";\nimport { FaSignOutAlt } from \"react-icons/fa\";\nimport { GiSellCard } from 'react-icons/gi'\nimport Avatar from '../../img/avatar_default.jpg';\nimport { NavLink } from 'react-router-dom';\nimport '../../css/SideNavBar.css';\nimport axios from 'axios';\n\nclass SideNavBar extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            change: true,\n            attendance: false,\n        }\n        this.getInitialScreen();\n    }\n    active = ['active', '', '', '', '', ''];\n\n    changeIndex(index) {\n        for (var i = 0; i < this.active.length; i++) {\n            this.active[i] = '';\n        }\n        this.active[index] = 'active';\n        this.setState({ change: !this.state.change });\n    }\n\n    getInitialScreen() {\n        var link = window.location.href;\n        link = link.substring(link.lastIndexOf('/') + 1);\n\n        for (var i = 0; i < this.active.length; i++) {\n            this.active[i] = '';\n        }\n\n        switch (link) {\n            case \"profile\":\n                this.active[1] = 'active';\n                break;\n            case \"employeemanager\":\n                this.active[2] = 'active';\n                break;\n            case \"goodmanager\":\n                this.active[3] = 'active';\n                break;\n            case \"import\":\n                this.active[3] = 'active';\n                break;\n            case \"receiptmanager\":\n                this.active[4] = 'active';\n                break;\n            case \"sellproduct\":\n                this.active[5] = 'active';\n                break;\n            default:\n                this.active[0] = 'active';\n                break;\n        }\n        this.setState({ change: !this.state.change });\n    }\n\n    attendance = () => {\n        this.setState({\n            attendance: true,\n        })\n        this.props.hideAlert()\n        this.props.showAlert('Attendanced success', 'success')\n    }\n\n    logOut = () => {\n        localStorage.setItem('token', null)\n        this.props.resetInfoUser()\n        this.props.resetRecieptUser()\n        this.props.resetShiftUser()\n        this.props.changeLoginStatus()\n    }\n\n    attendance = () => {\n        var time = new Date();\n        let a = ((time.getHours() > 12) ? time.getHours() - 12 : time.getHours()) + \":\" + time.getMinutes() +\" \"+ ((time.getHours() > 12) ? \"PM\" : \"AM\");\n        axios.post('http://localhost:5000/api/employee/time-keeping',{\n            token: localStorage.getItem('token'),\n            data: {\n                email: this.props.infoUser.employeeID,\n                time: a,\n            }\n        }).then(res => {\n            console.log(res)\n            localStorage.setItem('token', res.data.token)\n            this.props.showAlert(res.data.message, 'success')\n            this.setState({\n                attendance: true\n            })\n        }).catch(err => {\n            this.props.showAlert(err.response.data.message, 'error')\n        })\n    }\n\n    render() {\n        const navbarContainer = document.querySelector('.navbar-container');\n        return (\n            <div\n                class=\"navbar-container\"\n                style={{\n                    width: 0,\n                }}\n            >\n                <div style={{ backgroundColor: !this.props.statusDarkmode ? '#fafafa' : '#37474f' }} class=\"navibar sidebar\">\n                    <div className=\"nav-icon\" >\n                        <IoIosArrowBack\n                            size={20}\n                        />\n                    </div>\n                    <div class=\"nav-heading\">\n                        <div style={{ backgroundColor: !this.props.statusDarkmode ? '#cfd8dc' : '#455a64' }} class=\"navbar-heading-container\">\n                            <img src={this.props.infoUser.avatar ? this.props.infoUser.avatar : Avatar} style={{ width: 40, height: 40, borderRadius: '100%' }}></img>\n                            <span style={{ color: !this.props.statusDarkmode ? 'black' : 'white', fontWeight: '700' }} class=\"user-name\">{this.props.infoUser.lastName + \" \" + this.props.infoUser.firstName}</span>\n                        </div>\n                    </div>\n                    <div class=\"nav-container\">\n                        {\n                            this.props.role == true ? (null)\n                                : (<div style={{ justifyContent: 'center', display: 'flex', marginBottom: '10px' }}>\n                                    <Button onClick={() => this.attendance()} style={{ backgroundColor: this.state.attendance ? '#b9f6ca' : '#e0e0e0', color: '#424242' }}>\n                                        {!this.state.attendance ? (<ImCheckboxUnchecked style={{ marginRight: '10px' }}></ImCheckboxUnchecked>)\n                                            : (<ImCheckboxChecked style={{ marginRight: '10px', color: '#1b5e20' }}></ImCheckboxChecked>)\n                                        }\n\n                                        {this.state.attendance ? 'attendanced' : 'attendance'}\n                                    </Button>\n                                </div>\n                                )\n                        }\n                        {\n                            this.props.role == true ?\n                                (<NavLink className={\"nav-item \" + this.active[0]} to=\"/dashboard\"\n                                    onClick={() => this.changeIndex(0)}\n                                >\n                                    <AiOutlineDashboard class=\"nav-item-icon\" />\n                                    <AiFillDashboard class=\"nav-item-icon icon-activate\" />\n                                    <span className=\"nav-item-lable\">Dashboard</span>\n                                </NavLink>) : (null)\n                        }\n                        <NavLink to=\"/profile\" className={\"nav-item \" + this.active[1]} href=\"#\"\n                            onClick={() => this.changeIndex(1)}\n                        >\n                            <RiProfileLine class=\"nav-item-icon\" />\n                            <RiProfileFill class=\"nav-item-icon icon-activate\" />\n                            <span className=\"nav-item-lable\">Profile</span>\n                        </NavLink>\n\n                        {\n                            this.props.role === true ?\n                                (\n                                    <div>\n                                        <NavLink\n                                            to=\"/employeemanager\"\n                                            className={\"nav-item \" + this.active[2]}\n                                            href=\"#\"\n                                            onClick={() => this.changeIndex(2)}\n                                        >\n                                            <IoPeopleOutline class=\"nav-item-icon\" />\n                                            <IoPeopleSharp class=\"nav-item-icon icon-activate\" />\n                                            <span className=\"nav-item-lable\">Employee Manager</span>\n                                        </NavLink>\n                                        <NavLink\n                                            to=\"/goodmanager\"\n                                            className={\"nav-item \" + this.active[3]}\n                                            href=\"#\"\n                                            onClick={() => this.changeIndex(3)}\n                                        >\n                                            <AiOutlineContainer className=\"nav-item-icon\" />\n                                            <AiFillContainer className=\"nav-item-icon icon-activate\" />\n                                            <span className=\"nav-item-lable\">Goods Manager</span>\n                                        </NavLink>\n                                        <NavLink\n                                            to=\"/receiptmanager\"\n                                            className={\"nav-item \" + this.active[4]}\n                                            href=\"#\"\n                                            onClick={() => this.changeIndex(4)}\n                                        >\n                                            <IoReceiptOutline class=\"nav-item-icon\" />\n                                            <IoReceiptSharp class=\"nav-item-icon icon-activate\" />\n                                            <span className=\"nav-item-lable\">Receipt Manager</span>\n                                        </NavLink>\n                                    </div>\n                                ) : (null)\n                        }\n\n                        <NavLink to=\"/sellproduct\" className={\"nav-item \" + this.active[5]} href='#'\n                            onClick={() => this.changeIndex(5)}\n                        >\n                            <GiSellCard class=\"nav-item-icon\" />\n                            <GiSellCard class=\"nav-item-icon icon-activate\" />\n                            <span className=\"nav-item-lable\">Sell Product</span>\n                        </NavLink>\n                    </div>\n\n                    <div class=\"nav-footer\">\n                        <a\n                            to=\"/login\"\n                            onClick={() => this.logOut()}\n                            className={\"nav-item \"}\n                            style={{ flex: 5 }}\n                        >\n                            <FaSignOutAlt class=\"nav-item-icon\" />\n                            <span className=\"nav-item-lable\">Sign out</span>\n                        </a>\n                        <a href=\"#\" className={\"nav-item \"} onClick={() => this.props.changeConfirmPasswordTest()} style={{ flex: 4 }}>\n                            <BsInfoCircleFill class=\"nav-item-icon\" />\n                            <span className=\"nav-item-lable\">About</span>\n                        </a>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        isLogin: state.loginStatus,\n        infoUser: state.infoUser,\n        role: state.role,\n        statusDarkmode: state.statusDarkmode\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            })\n        },\n        resetShiftUser: () => {\n            dispatch({\n                type:\"RESET_SHIFT_USER\"\n            })\n        },\n        resetRecieptUser: () => {\n            dispatch({\n                type: \"RESET_ALL_RECIEPT_USER\",\n            })\n        },\n        changeConfirmPasswordTest: () => {\n            dispatch({\n                type: \"CHANGE_MODAL_CONFIRM_PASSWORD_STATUS\",\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        resetInfoUser: () => {\n            dispatch({\n                type: \"RESET_INFO_USER\"\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SideNavBar);\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodManager.js",["678","679","680","681"],"import { Component } from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport GoodTable from './GoodPartials/GoodTable';\nimport { NavLink } from 'react-router-dom';\nimport Button from '@mui/material/Button';\nimport SearchBar from './GoodPartials/SearchBar';\nimport {connect} from 'react-redux'\nimport AddTypeModal from './GoodPartials/AddTypeModal';\nimport '../css/GoodManager.css';\nimport ConfirmModal from './GoodPartials/ConfirmModal';\nimport UpdateGoodModal from './GoodPartials/UpdateGoodModal';\nimport EditTypeModal from './GoodPartials/EditTypeModal';\nimport AddGoodModal from './GoodPartials/AddGoodModal';\nimport axios from 'axios';\nimport UpdateTypeModal from './GoodPartials/UpdateTypeModal';\nimport XLSX from 'xlsx';\n\nclass GoodManager extends Component {\n    constructor(props) {\n        super(props);\n        this.loadAllType(); \n        this.loadAllGood();\n    }\n\n    async loadAllGood() {\n        var resultProduct = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }\n        }\n        await axios.get(`http://localhost:5000/api/product/`, {\n            params: { ...data }\n        })\n            .then(res => {\n                resultProduct = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err)\n            })\n        // Get hết từ cái productjoinType\n        var result = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, {\n            params: { ...data1 }\n        })\n            .then(res => {\n                result = res.data.data;\n                localStorage.getItem('token', res.data.token);\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err)\n            })\n        // Lấy các cái jointype\n        var joinTypeInfor = [];\n        for (let i = 0; i < result.length; i++) {\n            joinTypeInfor.push(result[i]);\n        }\n        console.log(\"joinTypeInfor\", joinTypeInfor);\n\n        var listProductInfor = [];\n        for (let i = 0; i < resultProduct.length; i++) {\n            var typeIDList = [];\n            var joinType = '';\n            for (var j = 0; j < joinTypeInfor.length; j++) {\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) \n                {\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\n                    joinType = joinType + ' ' + this.getTypeNamebyTypeID(joinTypeInfor[j]._id.typeID);\n                }\n            }\n\n            listProductInfor.push(\n                {\n                    ...resultProduct[i],\n                    typeIDList: typeIDList,\n                    joinType: joinType\n                });\n        }\n        this.props.getProductToReducer(listProductInfor);\n    }\n\n    getTypeNamebyTypeID (typeID) {\n        var typeName=\"Null\";\n        console.log(\"typeList\", this.props.typeProduct);\n        for(var i = 0; i < this.props.typeProduct.length;i++)\n        {   \n            if(this.props.typeProduct[i]._id.typeID == typeID)\n            {\n                typeName = this.props.typeProduct[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    async loadAllType() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        this.props.getProductType(result);\n    }\n    handleAdd() {\n        this.props.changeAddTypeStatus();\n        this.props.setAddTypeStatus();\n    }\n    handleConfirm(){\n        this.props.changeConfirmStatus();\n        this.props.unsetDelete();\n    }\n    handleConfirmDelete(){\n        this.props.changeConfirmStatus();\n        this.props.setDeleteConfirm();\n    }\n    handleUpdateGood() {\n        this.props.changeUpdateGoodStatus();\n    }\n    handleEditType() {\n        this.props.changeEditTypeStatus();\n    }\n\n    componentWillMount() {\n        document.title = 'Product Manager'\n    }   \n\n    uploadExcel(e){\n        e.preventDefault();\n        var f;\n        try {\n            // console.log(\"e\", e.target.files[0]);\n            f = e.target.files[0];\n        }\n        catch(e) {\n            console.log(e);\n            return;\n        }   \n        var name = f.name;\n        const reader = new FileReader();\n        reader.onload = (evt) => { // evt = on_file_select event\n            /* Parse data */\n            const bstr = evt.target.result;\n            const wb = XLSX.read(bstr, {type:'binary'});\n            /* Get first worksheet */\n            const wsname = wb.SheetNames[0];\n            const ws = wb.Sheets[wsname];\n            /* Convert array of arrays */\n            const data = XLSX.utils.sheet_to_csv(ws, {header:1});\n            /* Update state */\n            console.log(\"Data>>>\"+data);\n        };\n        reader.readAsBinaryString(f);\n    }\n\n    render() {\n        return (\n            <div>\n                <div style={{height: '100%', width: '100%', marginTop: '40px', marginBottom: '40px', paddingBottom: '40px' }}>\n                    <div style={{display: 'flex'}}>\n                        <Button variant=\"contained\">\n                            <Button style={{color: '#fff', textDecoration: 'none'}} onClick={() => this.props.changeStatusAddGood()}>Import</Button>\n                        </Button>\n                        <SearchBar style={{height: '120px'}}/>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleAdd()} variant=\"contained\">\n                            add type\n                        </Button>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleEditType()} variant=\"contained\">\n                            edit type\n                        </Button>\n                        <label for=\"upload-excel\">\n                            Load Excel\n                        </label>\n                        <input id=\"upload-excel\" type=\"file\" style={{display: 'none'}} accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\" onChange={(e) => this.uploadExcel(e)}></input>\n                        {/* <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleConfirmDelete()} variant=\"contained\">\n                            Delete\n                        </Button>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleConfirm()} variant=\"contained\">\n                            Edit\n                        </Button>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.handleUpdateGood()} variant=\"contained\">\n                            Update Good\n                        </Button> */}\n\n                     </div>\n\n                    <GoodTable />\n\n                    {/* Đây là phần modal */}\n\n                    {this.props.addTypeStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\n                            <AddTypeModal></AddTypeModal>\n                        </div>\n                    ): null}\n                    {this.props.confirmStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\n                            <ConfirmModal></ConfirmModal>\n                        </div>\n                    ): null}\n                    {this.props.updateGoodStatus ? (\n                        <div \n                            className=\"modal-add\"\n                        >\n                            <div onClick={() => {this.props.changeUpdateGoodStatus();}} className=\"modal-overlay\"></div>\n                            <UpdateGoodModal\n                                style={{\n                                    marginTop: 0\n                                }}\n                            >\n                            </UpdateGoodModal>\n                        </div>\n                    ): null}\n                     {this.props.editTypeStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeEditTypeStatus();}} className=\"modal-overlay\"></div>\n                            <EditTypeModal></EditTypeModal>\n                        </div>\n                    ): null}\n                    {this.props.editTypeStatus ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeEditTypeStatus();}} className=\"modal-overlay\"></div>\n                            <EditTypeModal></EditTypeModal>\n                        </div>\n                    ): null}\n                    {this.props.statusAddGood ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeStatusAddGood();}} className=\"modal-overlay\"></div>\n                            <AddGoodModal></AddGoodModal>\n                        </div>\n                    ): null}\n                    {this.props.statusUpdateType ? (\n                        <div className=\"modal-add\">\n                            <div onClick={() => {this.props.changeStatusUpdateType();}} className=\"modal-overlay\"></div>\n                            <UpdateTypeModal></UpdateTypeModal>\n                        </div>\n                    ): null}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        confirmStatus: state.confirmStatus,\n        deleteStatus: state.deleteStatus,\n        updateGoodStatus: state.updateGoodStatus,\n        editTypeStatus: state.editTypeStatus,\n        isAddTypeStatus: state.isAddTypeStatus,\n        statusAddGood: state.statusAddGood,\n        infoUser: state.infoUser,\n        statusUpdateType: state.statusUpdateType,\n        typeProduct: state.typeProduct,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        unsetDelete: () => {\n            dispatch({\n                type: \"UNSET_DELETE_STATUS\",\n            })\n        },\n        changeUpdateGoodStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\n            })\n        },\n        changeEditTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\n            })\n        },\n        setAddTypeStatus: () => {\n            dispatch({\n                type: \"SET_ADD_TYPE_STATUS\",\n            });\n        },\n        setDeleteConfirm: () => {\n            dispatch({\n                type: \"SET_CONFIRM_DELETE_GOOD\",\n            }); \n        },\n        changeStatusAddGood: () => {\n            dispatch({\n                type: \"CHANGE_ADD_GOOD_STATUS\",\n            }); \n        },\n        getProductType: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_TYPE\",\n                data: data\n            });\n        },\n        changeStatusUpdateType: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_TYPE_STATUS\",\n            }); \n        },\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n    }\n}\nexport default connect(mapStateToProps , mapDispatchToProps)(GoodManager);\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeeManager.js",["682","683","684","685","686","687","688","689","690","691","692","693","694","695"],"import React, { Component } from 'react';\nimport Page from './EmployeePartials/Page';\nimport Label from './EmployeePartials/Label';\nimport Scrollbar from './EmployeePartials/Scrollbar';\nimport SearchNotFound from './EmployeePartials/SearchNotFound';\nimport { Icon } from '@iconify/react';\nimport { sentenceCase } from 'change-case';\nimport {connect} from 'react-redux'\nimport plusFill from '@iconify/icons-eva/plus-fill';\nimport {\n    Card,\n    Table,\n    Stack,\n    Avatar,\n    Button,\n    Checkbox,\n    TableRow,\n    TableBody,\n    TableCell,\n    Container,\n    Typography,\n    TableContainer,\n    TablePagination\n} from '@mui/material';\nimport EmployeeToolbar from './EmployeePartials/EmployeeToolbar';\nimport EmployeeMoreMenu from './EmployeePartials/EmployeeMoreMenu';\nimport SackedEmployeeMenu from './EmployeePartials/SackedEmployeeMenu';\nimport EmployeeTableHeader from './EmployeePartials/EmployeeTableHeader';\nimport USERLIST from './EmployeePartials/fakeData'\nimport AddEmployeeModal from './EmployeePartials/AddEmployeeModal';\nimport UpdateEmployeeModal from './EmployeePartials/UpdateEmployeeModal';\nimport PayMoneyModal from './EmployeePartials/PayMoneyModal';\nimport FixedCalendar from './EmployeePartials/FixedCalendar';\nimport UnShiftEmployee from './EmployeePartials/UnShiftEmployee';\nimport AddNextWeekTimeKeepingModal from './EmployeePartials/AddNextWeekTimeKeeping';\nimport UpdateNextWeekTimeKeepingModal from './EmployeePartials/UpdateNextWeekTimeKeeping';\nimport NoJobEmployee from './EmployeePartials/NoJobEmployee';\nimport { withStyles } from '@material-ui/styles';\nimport TimekeepingTable from './EmployeePartials/TimekeepingTable';\nimport AddTimeKeepingModal from './EmployeePartials/AddTimeKeeperModal';\nimport UpdateTimeKeepingModal from './EmployeePartials/UpdateTimeKeepingModal';\n\nimport axios from 'axios';\n\nfunction EmployeeObj(employeeID, managerID, password, firstName, lastName, \n    phoneNumber, dateOfBirth, email, address, cardID, startDate, endDate) {\n    return {\n        employeeID: employeeID,\n        managerID: managerID,\n        password: password,\n        firstName: firstName,\n        lastName: lastName,\n        phoneNumber: phoneNumber,\n        dateOfBirth: dateOfBirth,\n        email: email,\n        address: address,\n        cardID: cardID,\n        startDate: startDate,\n        endDate: endDate,\n    };\n}\n\nconst TABLE_HEAD = [\n    { id: 'ID', label: 'ID', alignRight: false },\n    { id: 'firstName', label: 'Name', alignRight: false },\n    { id: 'lastName', label: 'Last Name', alignRight: false },\n    { id: 'old', label: 'Old', alignRight: false },\n    { id: 'gender', label: 'Gender', alignRight: false },\n    { id: 'province', label: 'Province', alignRight: false },\n    { id: 'phoneNumber', label: 'Phone', alignRight: false },\n    { id: 'email', label: 'Email', alignRight: false },\n    { id: 'adress', label: 'Adress', alignRight: false },\n    { id: '' }\n];\n\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '80px',\n    } \n})\n\nvar selected = [];\nvar filterName = \"\";\nvar filteredUsers = [];\nvar listUsers = [];\nvar page = 5;\nvar rowsPerPage = 5;\nclass EmployeeManager extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            change: false,\n        }; \n        //this.getAllEmployee();\n        // this.getAllEmployee();\n        this.getSackedEmployee();\n    }\n\n    handleFilterByName(event){\n        filterName = event.target.value;\n    }\n\n    addEmployee () {\n        this.props.changeAddEmployeeStatus();\n    }\n    // Lấy danh sách các nhân viên\n    async getAllEmployee () {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/employee/`, {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                alert(err)\n            })\n        listUsers = [];\n        for(var i = 0; i < result.length; i++)\n        {\n            listUsers.push(result[i]);\n        }\n        // Thêm vào cái redux\n        this.props.getEmployee(listUsers);\n        this.setState({change: !this.state.change});\n    }\n    // Thêm nhân viên\n    addEmployeeToDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n                managerID: \"19522006@gm.uit.edu.vn\",\n                password: \"abc123\",\n                firstName: \"Antonio\",\n                lastName: \"Rudiger\",\n                phoneNumber: \"03232323232\",\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\n                email: \"1911@gmail.com\",\n                address: \"Wherever\",\n                cardID: \"25110985819\",\n                startDate: \"2021-11-02T00:00:00.000Z\",\n                endDate: \"2021-11-31T00:00:00.000Z\",\n            }   \n        }\n        axios.post(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Save success\");\n                alert(\"Lưu thành công\")\n            })\n            .catch(err => {\n                alert(err);\n                console.log(err);\n            })\n    }\n    // Xoá nhân viên\n    deleteEmployeeFromDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee:\n            [\n                {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\", \n                },\n            ]\n            \n        }\n        axios.delete(`http://localhost:5000/api/employee`,{data: data})\n            .then(res => {\n                alert(\"delete employee(s) success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n    }\n    // Sửa nhân viên\n    updateEmployee()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\",\n                },\n                managerID: \"19522006@gm.uit.edu.vn\",\n                password: \"abc123\",\n                firstName: \"Antonio\",\n                lastName: \"Rudiger Christensen\",\n                phoneNumber: \"03232323232\",\n                dateOfBirth: \"2021-11-02T00:00:00.000Z\",\n                email: \"1911@gmail.com\",\n                address: \"Wherever\",\n                cardID: \"25110985819\",\n                startDate: \"2021-11-02T00:00:00.000Z\",\n                endDate: \"2021-11-31T00:00:00.000Z\",\n            }\n        }\n        axios.put(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Update success\");\n            })\n            .catch(err => {\n                console.log(err);\n            })\n    }\n\n    async getSackedEmployee () {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/employee/delete`, {\n            params: {...data}\n        })\n            .then(res => {\n                // alert(\"Lấy hết đc product ròi anh chai\");\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err)\n            })\n        this.props.getSackedEmployee(result);\n        this.setState({change: !this.state.change});\n    }\n\n    backToWork() {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee:\n            [\n                {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\", \n                },\n            ]\n            \n        }\n        axios.patch(`http://localhost:5000/api/employee/delete`, data)\n            .then(res => {\n                alert(\"back to work success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n    }\n\n    // Xoá nhân viên hoàn toàn\n    deleteEmployeePermantlyFromDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee:\n            [\n                {\n                    employeeID: \"1\",\n                    storeID: \"19522006@gm.uit.edu.vn\", \n                },\n            ]\n            \n        }\n        axios.delete(`http://localhost:5000/api/employee/delete`,{data: data})\n            .then(res => {\n                alert(\"delete permantly employee(s) success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n    }\n\n    componentWillMount() {\n        document.title = 'Employee Manager'\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div\n                style={{display: 'block', overflowY: 'auto', height: '100vh'}}\n            >\n                <Container\n                    style={{marginTop: 20, }}\n                >\n                    <span\n                        style = {{\n                            color: \"#fff\",\n                            padding: 12,\n                            border: '1px solid cyan',\n                            backgroundColor: '#222'\n                        }}\n                    >\n                        Current Employee\n                    </span>\n                    <Button\n                        variant='contained'\n                        startIcon={<Icon icon={plusFill} />}\n                        onClick={() => this.addEmployee()}\n                    >\n                        New User\n                    </Button>\n\n                    <Card>\n                    {/* <EmployeeToolbar\n                        numSelected={selected.length}\n                        filterName={filterName}\n                        // onFilterName={this.handleFilterByName(event)}\n                    /> */}\n                    <TableContainer style ={{maxHeight:'500px',overflowY: 'scroll'}}>\n                        <Table>\n                            <EmployeeTableHeader\n                                // order={order}\n                                // orderBy={orderBy}\n                                headLabel={TABLE_HEAD}\n                                rowCount={USERLIST.length}\n                                numSelected={selected.length}\n                                // onRequestSort={handleRequestSort}\n                                // onSelectAllClick={handleSelectAllClick}\n                            />\n                            <TableBody\n                                style={{height: '100%', width: '100%'}}\n                            >\n                            {\n                                this.props.listEmployee.employees.map((row) => {\n                                return (\n                                    <TableRow\n                                        hover\n                                        // key={id}\n                                        tabIndex={-1}\n                                        role=\"checkbox\"\n                                        // selected={isItemSelected}\n                                        // aria-checked={isItemSelected}\n                                    >\n                                        <TableCell padding=\"checkbox\">\n                                            <Checkbox\n                                            // checked={isItemSelected}\n                                            // onChange={(event) => handleClick(event, name)}\n                                            />\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">\n                                            {row._id.employeeID}\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} component=\"th\" scope=\"row\" padding=\"none\">\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n                                            {/* <Avatar alt={row.firstName} src={avatarUrl} /> */}\n                                            <Typography variant=\"subtitle2\" noWrap>\n                                                {row.firstName}\n                                            </Typography>\n                                            </Stack>\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.lastName}</TableCell>  \n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">\n                                            {row.dateOfBirth.indexOf('T') != -1 ? row.dateOfBirth.substring(0,row.dateOfBirth.indexOf('T')): row.dateOfBirth}\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{\"gender\"}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{\"province\"}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.phoneNumber}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.email}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"left\">{row.address}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell}align=\"right\">\n                                            <EmployeeMoreMenu\n                                                data={row._id.employeeID}    \n                                            >\n                                            </EmployeeMoreMenu>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n\n                    {/* <TablePagination\n                        rowsPerPageOptions={[5, 10, 25]}\n                        component=\"div\"\n                        count={USERLIST.length}\n                        // rowsPerPage={rowsPerPage}\n                        // page={page}\n                        // onPageChange={handleChangePage}\n                        // onRowsPerPageChange={handleChangeRowsPerPage}\n                    /> */}\n                    </Card>\n                </Container>\n                <FixedCalendar/>\n                <NoJobEmployee></NoJobEmployee>\n                <UnShiftEmployee/>\n                <TimekeepingTable></TimekeepingTable> \n                \n\n                {/* Sacked EMployee */}\n                <Container\n                    style={{marginTop: 20, }}\n                >\n                    <span\n                        style = {{\n                            color: \"#fff\",\n                            padding: 12,\n                            border: '1px solid red',\n                            backgroundColor: 'red'\n                        }}\n                    >\n                        Sacked Employee\n                    </span>\n\n                    <Card>\n                    {/* <EmployeeToolbar\n                        numSelected={selected.length}\n                        filterName={filterName}\n                        // onFilterName={this.handleFilterByName(event)}\n                    /> */}\n                    <TableContainer style ={{maxHeight:'500px',overflowY: 'scroll'}}>\n                        <Table>\n                            <EmployeeTableHeader\n                                // order={order}\n                                // orderBy={orderBy}\n                                headLabel={TABLE_HEAD}\n                                // rowCount={USERLIST.length}\n                                // numSelected={selected.length}\n                                // onRequestSort={handleRequestSort}\n                                // onSelectAllClick={handleSelectAllClick}\n                            />\n                            <TableBody\n                                style={{height: '100%', width: '100%'}}\n                            >\n                            {\n                                this.props.listSackedEmployee.employees.map((row) => {\n                                    \n                                    // console.log(\"row\", row);\n                                    // if(row == {} || row == null) return (<div></div>);\n                                return (\n                                    <TableRow\n                                        hover\n                                        // key={id}\n                                        tabIndex={-1}\n                                        role=\"checkbox\"\n                                        // selected={isItemSelected}\n                                        // aria-checked={isItemSelected}\n                                    >\n                                        <TableCell className = {classes.goodTable_Cell} padding=\"checkbox\">\n                                            <Checkbox\n                                            // checked={isItemSelected}\n                                            // onChange={(event) => handleClick(event, name)}\n                                            />\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">\n                                            {row._id.employeeID}\n                                        </TableCell>\n                                        <TableCell component=\"th\" scope=\"row\" padding=\"none\">\n                                            <Stack direction=\"row\" alignItems=\"center\" spacing={2}>\n                                            {/* <Avatar alt={row.firstName} src={avatarUrl} /> */}\n                                            <Typography variant=\"subtitle2\" noWrap>\n                                                {row.firstName}\n                                            </Typography>\n                                            </Stack>\n                                        </TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.lastName}</TableCell>  \n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.dateOfBirth.substring(0,row.dateOfBirth.indexOf('T'))}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{\"gender\"}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{\"province\"}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.phoneNumber}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.email}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"left\">{row.address}</TableCell>\n                                        <TableCell className = {classes.goodTable_Cell} align=\"right\">\n                                            <SackedEmployeeMenu\n                                                data={row._id.employeeID}    \n                                            >\n                                            </SackedEmployeeMenu>\n                                        </TableCell>\n                                    </TableRow>\n                                );\n                                })}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n\n                    {/* <TablePagination\n                        rowsPerPageOptions={[5, 10, 25]}\n                        component=\"div\"\n                        count={USERLIST.length}\n                        // rowsPerPage={rowsPerPage}\n                        // page={page}\n                        // onPageChange={handleChangePage}\n                        // onRowsPerPageChange={handleChangeRowsPerPage}\n                    /> */}\n                    </Card>\n                </Container>\n\n\n                {/* Đây là phần modal */}\n                {this.props.addEmployeeStatus ? (\n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeAddEmployeeStatus();}} className=\"modal-overlay\"></div>\n                        <AddEmployeeModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </AddEmployeeModal>\n                    </div>\n                ): null}\n                {this.props.updateEmployeeStatus ? (\n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeUpdateEmployeeStatus();}} \n                            className=\"modal-overlay\"\n                        />\n                        <UpdateEmployeeModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </UpdateEmployeeModal>\n                    </div>\n                ): null}\n                {this.props.payEmployeeStatus ? (\n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changePayEmployeeStatus();}} className=\"modal-overlay\"></div>\n                        <PayMoneyModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </PayMoneyModal>\n                    </div>\n                ): null}\n                {this.props.statusAddNextWeekTimeKeeping \n                ? \n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeAddNextWeekTimeKeepingStatus();}} className=\"modal-overlay\"></div>\n                        <AddNextWeekTimeKeepingModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </AddNextWeekTimeKeepingModal>\n                    </div>\n                : null\n                }\n                {this.props.statusUpdateNextWeekTimeKeeping \n                ? \n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeUpdateNextWeekTimeKeepingStatus();}} className=\"modal-overlay\"></div>\n                        <UpdateNextWeekTimeKeepingModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </UpdateNextWeekTimeKeepingModal>\n                    </div>\n                : null\n                }\n                {this.props.statusAddTimeKeeping \n                ? \n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeAddTimeKeepingStatus()}} className=\"modal-overlay\"></div>\n                        <AddTimeKeepingModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </AddTimeKeepingModal>\n                    </div>\n                : null\n                }\n                {this.props.statusUpdateTimeKeeping \n                ? \n                    <div \n                        className=\"modal-add\"\n                    >\n                        <div onClick={() => {this.props.changeUpdateTimeKeepingStatus();}} className=\"modal-overlay\"></div>\n                        <UpdateTimeKeepingModal\n                            style={{\n                                marginTop: 0\n                            }}\n                        >\n                        </UpdateTimeKeepingModal>\n                    </div>\n                : null\n                }\n            </div>\n            \n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\n        payEmployeeStatus: state.payEmployeeStatus,\n        infoUser: state.infoUser,\n        listEmployee: state.listEmployee,\n        listSackedEmployee: state.listSackedEmployee,\n        statusAddNextWeekTimeKeeping: state.statusAddNextWeekTimeKeeping,\n        statusUpdateNextWeekTimeKeeping: state.statusUpdateNextWeekTimeKeeping,\n        statusAddTimeKeeping: state.statusAddTimeKeeping,\n        statusUpdateTimeKeeping: state.statusUpdateTimeKeeping,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\n            });\n        },\n        changeUpdateEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\n            });\n        },\n        changePayEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        getSackedEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE_SACKED\",\n                employees: data,\n            });\n        },\n        changeAddNextWeekTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\n            });\n        },\n        changeUpdateNextWeekTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\n            });\n        },\n        changeAddTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\n            });\n        },\n        changeUpdateTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\n            });\n        },\n    }\n}\nexport default connect(mapStateToProps , mapDispatchToProps)((withStyles(styles, {withTheme: true}))(EmployeeManager));\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/DashBoard.js",["696","697"],"import React, { Component } from 'react';\nimport '../../css/Dashboard.css'\nimport { Container, Grid } from '@mui/material';\nimport { Typography } from '@mui/material';\nimport { DiApple } from 'react-icons/di'\nimport AppWebsiteVisits from './Statistic';\nimport DaiLyMoneyTracking from './DaiLyMoneyTracking';\nimport GroupButtonDashboard from './GroupButtonDashboard';\nimport TotalMoney from './TotalMoney';\nimport ErrorReceipt from './ErrorReceipt';\nimport ProductStatis from './ProductStatis';\nimport SalaryStats from './SalaryStats';\nclass DashBoard extends Component {\n    \n    renderEventContent = (eventInfo) => {\n        return (\n            <>\n                <b>{eventInfo.timeText}</b>\n                <i>{eventInfo.event.title}</i>\n            </>\n        )\n    }\n\n    componentWillMount() {\n        document.title = 'DashBoard'\n    }\n\n    render() {\n        return (\n            <div id=\"scroll-bar\" className=\"dashboard\" style={{ overflow: 'scroll', overflowX: 'hidden', height: '100vh' }}>\n                <Container style={{ marginTop: '40px' }} maxWidth=\"xl\">\n                    <Grid container spacing={3}>\n                        <Grid item md={12} sm={12}>\n                            <GroupButtonDashboard></GroupButtonDashboard>\n                        </Grid>\n                        <Grid className=\"dashboard-item\" item md={3} sm={12} >\n                            <TotalMoney></TotalMoney>\n                        </Grid>\n                        <Grid className=\"dashboard-item\" item md={3} sm={12} >\n                            {/* <div className=\"dashboard-css sold-good\">\n                                <div className=\"dashboard-item-img sold-good\" style={{ marginBottom: '30px' }}>\n                                    <DiApple className=\"dashboard-item-icon sold-good\"></DiApple>\n                                </div>\n                                <Typography style={{ marginBottom: '10px' }} variant=\"h4\">256</Typography>\n                                <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\n                                    Sold good\n                                </Typography>\n                            </div> */}\n                            <ProductStatis></ProductStatis>\n                        </Grid>\n                        <Grid className=\"dashboard-item\" item md={3} sm={12} >\n                            {/* <div className=\"dashboard-css imported-good\">\n                                <div className=\"dashboard-item-img imported-good\" style={{ marginBottom: '30px' }}>\n                                    <DiApple className=\"dashboard-item-icon imported-good\"></DiApple>\n                                </div>\n                                <Typography style={{ marginBottom: '10px' }} variant=\"h4\">256</Typography>\n                                <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\n                                    Imported good\n                                </Typography>\n                            </div> */}\n                            <SalaryStats></SalaryStats>\n                        </Grid>\n                        <Grid className=\"dashboard-item\" item md={3} sm={12} >\n                            <ErrorReceipt></ErrorReceipt>\n                        </Grid>\n                        <Grid className=\"dashboard-item\" item md={12} sm={12} >\n                            <AppWebsiteVisits></AppWebsiteVisits>\n                        </Grid>\n                        <Grid item md={12} sm={12}>\n                            <DaiLyMoneyTracking></DaiLyMoneyTracking>\n                        </Grid>\n                    </Grid>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default DashBoard;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/ReiceiptManager.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/Profile.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/SellProduct.js",["698"],"import React, { Component } from 'react';\nimport { Container, Grid, Button, CardActionArea, CardActions, CardMedia } from '@mui/material';\nimport '../../css/SellProduct.css'\nimport Tabs from './Tabs'\nimport Box from '@mui/material/Box';\nimport Card from '@mui/material/Card';\nimport CardContent from '@mui/material/CardContent';\nimport Typography from '@mui/material/Typography';\nimport exampleImg from '../../img/good-example.jpg'\nimport { BiPlusMedical } from 'react-icons/bi';\nimport { connect } from 'react-redux'\nimport axios from 'axios';\nimport ShoppingBags from './ShoppingBags';\nimport Printf from './Print'\nimport HistoryReciept from './HistoryReciept';\n\nclass SellProduct extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            change: false,\n            test1: true,\n        }\n        this.storeID = this.props.infoUser.managerID ? this.props.infoUser.managerID : this.props.infoUser.email;\n        this.loadAllType();\n        this.loadAllGood();\n\n    }\n    storeID = \"\";\n    bull = (\n        <Box\n            component=\"span\"\n            sx={{ display: 'inline-block', mx: '2px', transform: 'scale(0.8)' }}\n        >\n            •\n        </Box>\n    );\n\n    AddProduct = (value) => {\n        if (value.remain === 0) {\n            this.props.showAlert('Shout out !', 'warning')\n        } else {\n            var isCheck = false;\n            var currentQuantity;\n            var maxQuantity;\n            this.props.shoppingBags.map(value1 => {\n                if (value1.product.name === value.name) {\n                    isCheck = true;\n                    currentQuantity = value1.quantity\n                    maxQuantity = value.remain\n                }\n                return value;\n            })\n            if (isCheck) {\n                if (currentQuantity < maxQuantity) {\n                    this.props.raiseQuantity(value.name);\n                }\n            } else {\n                const newProduct = {\n                    product: value,\n                    quantity: 1,\n                }\n                this.props.addNewProductToShoppingBags(newProduct);\n            }\n        }\n    }\n\n    async loadAllType() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.storeID,\n            }\n        }\n\n        await axios.get(`http://localhost:5000/api/product/type`,\n            {\n                params: { ...data }\n            })\n            .then(res => {\n                result = res.data.data;\n                localStorage.getItem('token', res.data.token);\n            })\n            .catch(err => {\n                alert(err);\n            })\n        //Get data và lưu các tên Type vào bảng\n        var listTypeInfor = [];\n        for (var i = 0; i < result.length; i++) {\n            listTypeInfor.push(result[i]);\n        }\n        this.props.getTypeToReducer(listTypeInfor);\n        this.setState({ change: !this.state.change });\n    }\n\n    async loadAllGood() {\n        var resultProduct = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.storeID,\n            }\n        }\n        await axios.get(`http://localhost:5000/api/product/`, {\n            params: { ...data }\n        })\n            .then(res => {\n                resultProduct = res.data.data;\n            })\n            .catch(err => {\n                alert(err)\n            })\n        // Get hết từ cái productjoinType\n        var result = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.storeID,\n            }\n        }\n        await axios.get(`http://localhost:5000/api/product/join`, {\n            params: { ...data1 }\n        })\n            .then(res => {\n                result = res.data.data;\n                localStorage.getItem('token', res.data.token);\n            })\n            .catch(err => {\n                alert(err)\n            })\n        // Lấy các cái jointype\n        var joinTypeInfor = [];\n        for (let i = 0; i < result.length; i++) {\n            joinTypeInfor.push(result[i]);\n        }\n\n        var listProductInfor = [];\n        for (let i = 0; i < resultProduct.length; i++) {\n            var typeIDList = [];\n            for (var j = 0; j < joinTypeInfor.length; j++) {\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) {\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\n                }\n            }\n            listProductInfor.push(\n                {\n                    ...resultProduct[i],\n                    typeIDList: typeIDList\n                });\n        }\n        this.props.getProductToReducer(listProductInfor);\n        this.setState({ change: !this.state.change });\n    }\n\n    componentWillMount() {\n        document.title = 'SellProduct'\n    }\n\n    render() {\n        const hideHistory = this.props.hideHistoryReceipt\n        document.onkeydown = function (e) {\n            switch (e.key.charCodeAt()) {\n                case 69:\n                    hideHistory()\n                    break;\n                default:\n                    break;\n            }\n        }\n        return (\n            <div id=\"scroll-bar\" className=\"sell-product\" >\n                <Container style={{ marginBottom: '20px' }} maxWidth=\"xl\">\n                    <Grid container spacing={2}>\n                        <Grid item lg={8} md={12} sm={12}>\n                            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', borderRadius: '8px', marginTop: '20px', backgroundColor: '#ffffff', height: 'calc(100vh - 40px)', overflow: 'hidden' }}>\n                                <div style={{ overflow: 'hidden', marginBottom: '5px' }}>\n                                    <Tabs></Tabs>\n                                </div>\n                                <Container id=\"choses-product\" style={{ height: '94%', overflowY: 'scroll' }} maxWidth=\"xl\">\n                                    <Grid container spacing={2}>\n                                        {(this.props.listProduct.state !== undefined && this.props.listProduct.state.length !== 0)\n                                            ? this.props.listProduct.state.filter(value => {\n                                                if (this.props.chooseTypeProductID === 'all') {\n                                                    return value;\n                                                }\n                                                if (value.typeIDList.includes(this.props.chooseTypeProductID)) {\n                                                    return value;\n                                                }\n                                            }).map(value => (\n                                                <Grid item lg={3} md={4} sm={4} xs={4}>\n                                                    <Card onClick={() => this.AddProduct(value)}>\n                                                        <CardActionArea>\n                                                            <CardMedia\n                                                                style={{ display: (value.remain === 0) ? 'block' : 'none' }}\n                                                                component=\"img\"\n                                                                height=\"140\"\n                                                                image='https://res.cloudinary.com/databaseimg/image/upload/v1637083732/aqd37xtgxukcq3x9eb4q.png'\n                                                                alt=\"green iguana\"\n                                                            />\n                                                            <div style={{ display: (value.remain !== 0) ? 'block' : 'none' }}>\n                                                                {\n                                                                    value.imgUrl === \"none\"\n                                                                        ? <CardMedia\n                                                                            component=\"img\"\n                                                                            height=\"140\"\n                                                                            image={exampleImg}\n                                                                            alt=\"green iguana\"\n                                                                        />\n                                                                        : <CardMedia\n                                                                            component=\"img\"\n                                                                            height=\"140\"\n                                                                            image={value.imgUrl}\n                                                                            alt=\"green iguana\"\n                                                                        />\n                                                                }\n                                                            </div>\n\n                                                            <CardContent style={{ padding: '5px' }}>\n                                                                <Typography style={{ textAlign: 'center' }} gutterBottom variant=\"h6\" component=\"div\">\n                                                                    {value.name}\n                                                                </Typography>\n                                                            </CardContent>\n                                                            <CardContent style={{ textAlign: 'center', margin: '0', padding: '0' }}>\n                                                                <Typography style={{ textAlign: 'center', margin: '0', padding: '0', fontSize: '0.7rem', fontWeight: '700', color: '#00000080' }} gutterBottom variant=\"h6\" component=\"div\">\n                                                                    Quantity: {value.remain}\n                                                                </Typography>\n                                                            </CardContent>\n                                                        </CardActionArea>\n                                                        <CardActions style={{ justifyContent: 'center' }}>\n                                                            <Button style={{ color: 'green', fontWeight: '700' }} endIcon={<BiPlusMedical></BiPlusMedical>} size=\"medium\" color=\"primary\">\n                                                                {value.sellPrice}\n                                                            </Button>\n                                                        </CardActions>\n                                                    </Card>\n                                                </Grid>\n                                            )) : (<div style={{ width: '100%', height: '100%', textAlign: 'center', marginTop: '100px' }}>\n                                                <h3>Không có gì</h3>\n                                            </div>)}\n                                    </Grid>\n                                </Container>\n                            </div>\n                        </Grid>\n                        <Grid item lg={4} md={12}>\n                            <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', borderRadius: '8px', marginTop: '20px', backgroundColor: '#ffffff', height: 'calc(100vh - 40px)', overflow: 'hidden', overflowX: 'hidden' }}>\n                                <div id=\"choses-product\" style={{ backgroundColor: '#e0e0e0', height: '60%', margin: '10px', overflowY: 'scroll', overflowX: 'hidden' }} >\n                                    <Grid sty container spacing={0}>\n                                        {/* Table */}\n                                        <Grid item className=\"customizeTable\" style={{ backgroundColor: '#bdbdbd', alignContent: 'center', justifyContent: 'center', borderBottom: '2px solic black' }} md={12} sm={12}>\n                                            <Grid style={{ textAlign: 'center', alignItems: 'center', justifyItems: 'center', fontWeight: 'bold' }} container spacing={0}>\n                                                <Grid item md={1} sm={1}>\n                                                    #\n                                                </Grid>\n                                                <Grid item md={1} sm={1}>\n                                                </Grid>\n                                                <Grid item md={4} sm={4}>\n                                                    Name\n                                                </Grid>\n                                                <Grid item md={3} sm={3}>\n                                                    Quantity\n                                                </Grid>\n                                                <Grid style={{ fontWeight: '700' }} item md={3} sm={3}>\n                                                    Giá\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        {/* Bắt đầu hóa đơn */}\n                                        <ShoppingBags></ShoppingBags>\n                                    </Grid>\n                                </div>\n                                <div style={{ height: '40%' }}>\n                                    <Printf ></Printf>\n                                </div>\n                            </div>\n                        </Grid>\n                    </Grid>\n                </Container>\n                {this.props.statusShowHistoryReciept ? (\n                    <HistoryReciept></HistoryReciept>\n                ) : null}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        listProduct: state.listProduct,\n        chooseTypeProductID: state.chooseTypeProduct,\n        infoUser: state.infoUser,\n        shoppingBags: state.shoppingBags,\n        statusShowHistoryReciept: state.statusShowHistoryReciept,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_STATUS\",\n            });\n        },\n        getTypeToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_TYPE\",\n                data: data\n            });\n        },\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n        addNewProductToShoppingBags: (newProduct) => {\n            dispatch({\n                type: \"ADD_NEW_PRODUCT_SHOPPING_BAGS\",\n                newProduct: newProduct,\n            })\n        },\n        raiseQuantity: (name) => {\n            dispatch({\n                type: \"RAISE_QUANTITY_SHOPPING_BAGS\",\n                name: name,\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        hideHistoryReceipt:() => {\n            dispatch({\n                type: \"CHANGE_HISTORY_RECIEPT_STATUS\"\n            })\n        }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SellProduct);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateTimeKeepingModal.js",["699","700","701","702","703","704","705","706","707","708","709","710","711","712","713","714","715"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, \n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nvar listDayInWeek = [\n    {ID:'T2',name:'Thứ hai'}, \n    {ID:'T3',name:'Thứ ba'}, \n    {ID:'T4',name:'Thứ tư'}, \n    {ID:'T5',name:'Thứ năm'}, \n    {ID:'T6',name:'Thứ sáu'}, \n    {ID:'T7',name:'Thứ bảy'}, \n    {ID:'CN',name:'Chủ nhật'}\n];\n\nclass UpdateTimeKeepingModal extends Component {\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n            timeKeepingID: '',\n            dayChosed: '',\n            shiftID: '',\n        };\n        this.loadInitialData()\n    }\n\n    // Thêm nhân viên\n    async addEmployeeToDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: document.querySelector('input[name=\"ID\"]').value,\n                    storeID: this.props.infoUser.email,\n                },\n                managerID: this.props.infoUser.email,\n                password: document.querySelector('input[name=\"password\"]').value,\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\n                email: document.querySelector('input[name=\"email\"]').value,\n                address: document.querySelector('input[name=\"adress\"]').value,\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\n                // endDate: \"2021-11-31T00:00:00.000Z\",\n            }   \n        }\n        console.log(data);\n        await axios.post(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Save success\");\n                alert(\"Lưu thành công\")\n            })\n            .catch(err => {\n                alert(err);\n                console.log(err);\n            })\n    }\n\n    // cancel = () => {\n    //     this.props.changeAddNextWeekTimeKeepingStatus();\n    // }\n\n    // addEmployee = () => {\n    //     this.addEmployeeToDatabase();\n    //     this.props.changeAddEmployeeStatus();\n    // }\n    realDate = '';\n    shiftID = '';\n    dayChosed = '';\n    timeKeepingID = '';\n    loadInitialData()\n    {\n        console.log(this.props.updateTimeKeepingValue.state);\n        this.realDate = this.props.updateTimeKeepingValue.state.realDate;\n        this.shiftID = this.props.updateTimeKeepingValue.state._id.shiftType._id.shiftID;\n        this.timeKeepingID = this.props.updateTimeKeepingValue.state._id.employee._id.employeeID;\n        this.dayChosed= this.props.updateTimeKeepingValue.state._id.dateInWeek;\n        this.setState({\n            shiftID : this.props.updateTimeKeepingValue.state._id.shiftType._id.shiftID,\n            dayChosed: this.props.updateTimeKeepingValue.state._id.dateInWeek,\n            timeKeepingID: this.props.updateTimeKeepingValue.state._id.employee._id.employeeID,\n        });\n    }\n\n    findIndexCurrentKeepingInRedux(id)\n    {\n        //Đụng đến nếu sửa bảng\n        var listToSearch = this.props.listTimeKeeper;\n        for(var i = 0 ; i < listToSearch.length ; i ++)\n        {\n            if(listToSearch[i]._id.dateInWeek == id.dateInWeek && \n                listToSearch[i]._id.shiftType._id.shiftID == id.shiftType._id.shiftID&& \n                listToSearch[i]._id.employee._id.employeeID == id.employee._id.employeeID)\n            {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    checkContraint() {\n        if(this.dayChosed.length == 0)\n        {\n            alert(\"Chưa chọn ngày nào trong tuần\");\n            return false;\n        }\n        if(this.shiftID.length == 0)\n        {\n            alert(\"Chưa chọn ca nào\");\n            return false;\n        }\n        // console.log(this.state.timeKeepingID );\n        if( this.timeKeepingID == undefined || this.timeKeepingID.length == 0)\n        {\n            alert(\"Chưa chọn nhân viên nào để chấm công\"); \n            return false;\n        }\n        // Có CSDL thì báo xem có trùng với cái cũ ko nữa\n        \n        alert(\"Đã check hết constraint\");\n        return true;\n    }\n\n\n    UpdateChange() {\n        if(this.checkContraint()==false) return;\n        const data = {\n            _id: {\n                dateInWeek: this.dayChosed,\n                storeID: this.props.infoUser.email,\n                shiftType: {\n                    _id: {\n                        shiftID: this.shiftID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n                employee: {\n                    _id: {\n                        employeeID: this.timeKeepingID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n            },\n            realDate: document.querySelector('input[name=\"realDate\"]').value,\n        };\n        // axios.put(`http://localhost:5000/api/????`, data)\n        //     .then(res => {\n        //         console.log(\"Update success\");\n        //         alert('Đã update thành công sản phẩm')\n        //     })\n        //     .catch(err => {\n        //         console.log(err);\n        //     })\n        this.props.updateTimeKeeper(data, this.findIndexCurrentKeepingInRedux(data._id));\n        console.log(data);\n        this.props.changeUpdateTimeKeepingStatus();\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \n                    title=\"Update TimeKeeper\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            Real Date\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"date\" \n                                            name='realDate'\n                                            readOnly={true}\n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.realDate}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Choose Day in week\n                                        </div>\n                                        <FormControl sx={{ minWidth: 120 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                readOnly={true}\n                                                value = {this.dayChosed}\n                                                onChange={(event) => {\n                                                    this.dayChosed = event.target.value;\n                                                    this.setState({dayChosed: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    listDayInWeek.map((item) =>\n                                                        <MenuItem value={item.ID}>\n                                                            {item.name}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n\n                                    <Grid item md={8} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>\n                                            Choose Shift\n                                        </div>\n                                        <FormControl sx={{ minWidth: 220 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                readOnly={true}\n                                                value={this.shiftID}\n                                                onChange={(event) => {\n                                                    this.shiftID = event.target.value;\n                                                    this.setState({shiftID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\n                                                    : this.props.listShift.map((shift) =>\n                                                        <MenuItem value={shift._id.shiftID}>\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            TimeKeeping Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                readOnly={true}\n                                                value={this.timeKeepingID}\n                                                onChange={(event) => {\n                                                    this.timeKeepingID = event.target.value;\n                                                    this.setState({timeKeepingID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        !(this.state.alterID == item._id.employeeID) ?\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                        : null\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.UpdateChange()}>\n                                            Update Change\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        listTimeKeeper: state.listTimeKeeping,\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listShift: state.listShift,\n        listEmployee: state.listEmployee,\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\n        updateTimeKeepingValue: state.updateTimeKeepingValue,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeUpdateTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        addNewTimeKeeper: (data) => {\n            dispatch({\n                type: \"ADD_NEW_TIME_KEEPER\",\n                data: data,\n            });\n        }, \n        updateTimeKeeper: (data, indexOfVal) => {\n            dispatch({\n                type: \"UPDATE_TIMEKEEPER\",\n                data: data,\n                index: indexOfVal\n            });\n        }, \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateTimeKeepingModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddTimeKeeperModal.js",["716","717","718","719","720","721","722","723","724","725","726","727","728","729"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, \n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nvar listDayInWeek = [\n    {ID:'T2',name:'Thứ hai'}, \n    {ID:'T3',name:'Thứ ba'}, \n    {ID:'T4',name:'Thứ tư'}, \n    {ID:'T5',name:'Thứ năm'}, \n    {ID:'T6',name:'Thứ sáu'}, \n    {ID:'T7',name:'Thứ bảy'}, \n    {ID:'CN',name:'Chủ nhật'}\n];\nclass AddTimeKeepingModal extends Component {\n\n    genID = 0;\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n            timeKeepingID: '',\n            alterID: '',\n            dayChosed: '',\n            shiftID: '',\n        };\n    }\n\n    // Thêm nhân viên\n    async addEmployeeToDatabase()\n    {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: document.querySelector('input[name=\"ID\"]').value,\n                    storeID: this.props.infoUser.email,\n                },\n                managerID: this.props.infoUser.email,\n                password: document.querySelector('input[name=\"password\"]').value,\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\n                email: document.querySelector('input[name=\"email\"]').value,\n                address: document.querySelector('input[name=\"adress\"]').value,\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\n                // endDate: \"2021-11-31T00:00:00.000Z\",\n            }   \n        }\n        console.log(data);\n        await axios.post(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Save success\");\n                alert(\"Lưu thành công\")\n            })\n            .catch(err => {\n                alert(err);\n                console.log(err);\n            })\n    }\n\n    // cancel = () => {\n    //     this.props.changeAddNextWeekTimeKeepingStatus();\n    // }\n\n    // addEmployee = () => {\n    //     this.addEmployeeToDatabase();\n    //     this.props.changeAddEmployeeStatus();\n    // }\n\n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    checkContraint() {\n        if(this.state.dayChosed.length == 0)\n        {\n            alert(\"Chưa chọn ngày nào trong tuần\");\n            return false;\n        }\n        if(this.state.shiftID.length == 0)\n        {\n            alert(\"Chưa chọn ca nào\");\n            return false;\n        }\n        console.log(this.state.timeKeepingID );\n        if( this.state.timeKeepingID == undefined || this.state.timeKeepingID.length == 0)\n        {\n            alert(\"Chưa chọn nhân viên nào để chấm công\"); \n            return false;\n        }\n        // Có CSDL thì báo xem có trùng với cái cũ ko nữa\n        \n        alert(\"Đã check hết constraint\");\n        return true;\n    }\n\n\n    addChange() {\n        if(this.checkContraint()==false);\n        const data = {\n            _id: {\n                dateInWeek: this.state.dayChosed,\n                storeID: this.props.infoUser.email,\n                shiftType: {\n                    _id: {\n                        shiftID: this.state.shiftID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n                employee: {\n                    _id: {\n                        employeeID: this.state.timeKeepingID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n            },\n            realDate: document.querySelector('input[name=\"realDate\"]').value,\n        };\n        // await axios.post(`http://localhost:5000/api/????``, data)\n        //   .then(res => {\n        //       console.log(\"Save success\");\n        //       alert(\"Lưu thành công\")\n        //   })\n        //   .catch(err => {\n        //       alert(err);\n        //       console.log(err);\n        //   })\n        this.props.addNewTimeKeeper(data);\n        this.props.changeAddTimeKeepingStatus();\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \n                    title=\"Change TimeKeeper\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            Real Date\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"date\" \n                                            name='realDate'\n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.getCurrentDateTime()}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Choose Day in week\n                                        </div>\n                                        <FormControl sx={{ minWidth: 120 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({dayChosed: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    listDayInWeek.map((item) =>\n                                                        <MenuItem value={item.ID}>\n                                                            {item.name}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n\n                                    <Grid item md={8} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>\n                                            Choose Shift\n                                        </div>\n                                        <FormControl sx={{ minWidth: 220 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({shiftID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\n                                                    : this.props.listShift.map((shift) =>\n                                                        <MenuItem value={shift._id.shiftID}>\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            TimeKeeping Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({timeKeepingID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        !(this.state.alterID == item._id.employeeID) ?\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                        : null\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.addChange()}>\n                                            Add Change\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listShift: state.listShift,\n        listEmployee: state.listEmployee,\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        addNewTimeKeeper: (data) => {\n            dispatch({\n                type: \"ADD_NEW_TIME_KEEPER\",\n                data: data,\n            });\n        } \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTimeKeepingModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/HistoryReciept.js",["730","731"],"import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux'\nimport CollapsibleTable from './TableReciept'\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\n\nfunction HistoryReciept(props) {\n\n    const darkmode = useSelector(state => state.statusDarkmode)\n    const dispatch = useDispatch();\n\n    return (\n        <div style={{ overflow: 'hidden' }} className=\"modal-history-reciept\">\n            <div onClick={() => { dispatch({ type: \"CHANGE_HISTORY_RECIEPT_STATUS\" }) }} className=\"modal-overlay\"></div>\n            <div className=\"history-list-receipt\">\n                <Card>\n                    <CardHeader style={{ color: !darkmode ? '#0091ea' : 'white', backgroundColor: !darkmode ? '#efeeef' : '#455a64' }} title=\"History Reciept\" />\n                    <Divider></Divider>\n                </Card>\n                <div id=\"choses-product\" style={{ margin: '30px', height: '82%', overflow: 'hidden', overflowY: 'scroll' }}>\n                    <CollapsibleTable></CollapsibleTable>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default HistoryReciept;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/ShoppingBags.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/SearchReceipt.js",["732","733","734"],"import React, { useState } from 'react';\nimport { BiSearchAlt } from 'react-icons/bi'\nimport { useDispatch , useSelector } from 'react-redux'\n\nfunction SearchReceipt(props) {\n    const dispatch = useDispatch();\n\n    React.useEffect(() => {\n        dispatch({\n            type: \"RESET_SEARCH\",\n        })\n    }, [])\n\n    return (\n        <div className=\"search-customize\" style={{ borderRadius: '6px', backgroundColor: 'white', justifyContent: 'center', display: 'flex', marginBottom: '10px', padding: '10px' }}>\n            <BiSearchAlt style={{ fontSize: '1.6rem', marginRight: '10px', marginLeft: '10px' }}></BiSearchAlt>\n            <input onChange={(e) => {dispatch({type:\"CHANGE_SEARCH\", object: e.target.value })}} type=\"text\" style={{ width: '100%', outline: 'none', border: 'none' }} placeholder=\"Theo mã hóa đơn\"></input>\n        </div>\n    );\n}\n\nexport default SearchReceipt;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/Print.js",["735","736","737","738","739","740"],"import React from 'react';\nimport ReactToPrint from 'react-to-print';\nimport { connect } from 'react-redux';\nimport ComponentToPrint from './ComponentToPrint';\nimport axios from 'axios';\n\n\nclass Printf extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      percentDiscount: 0,\n      infoReciept: [],\n      code: '',\n      date: new Date(),\n      MAHD: \"HD\" + this.makeCode(6),\n      moneyReduce: 0,\n      coupon: null,\n    }\n  }\n\n\n  totalMoney = () => {\n    let total = 0;\n    this.props.shoppingBags.map(value => {\n      total += value.quantity * value.product.sellPrice;\n    })\n    return total;\n  }\n\n  reduceMoney = () => {\n    let total = 0;\n    this.props.shoppingBags.map(value => {\n      total += value.quantity * value.product.sellPrice;\n    })\n    if (total !== 0) {\n      total = total * this.state.percentDiscount / 100\n      return total;\n    }\n    return total;\n  }\n\n  totalFinalMoney = () => {\n    let total = 0;\n    this.props.shoppingBags.map(value => {\n      total += value.quantity * value.product.sellPrice;\n    })\n    if (total !== 0) {\n      total -= total * this.state.percentDiscount / 100\n      return total;\n    }\n    return total;\n  }\n\n  makeCode = (length) => {\n    var result = '';\n    var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() *\n        charactersLength));\n    }\n    return result;\n  }\n\n  getProductByID(){\n\n  }\n\n  addReciept = async () => {\n    if (this.props.shoppingBags.length === 0) {\n      this.props.hideAlert()\n      this.props.showAlert(\"Cart empty \", \"warning\")\n    } else {\n      let code = this.makeCode(8);\n      var isContinue = true;\n      this.setState({\n        code: code\n      })\n      const data = {\n        MAHD: code,\n        idUser: this.props.infoUser.employeeID ? this.props.infoUser.employeeID : this.props.infoUser._id,\n        name: this.props.infoUser.lastName + \" \" + this.props.infoUser.firstName,\n        date: this.dateFunction(),\n        discount: this.state.percentDiscount,\n        totalMoney: this.totalMoney(),\n        totalFinalMoney: this.totalFinalMoney(),\n        listProduct: this.props.shoppingBags,\n        time: this.state.date.getHours() + \":\" + this.state.date.getMinutes(),\n        isEdit: false,\n        oldBill: this.props.statusEditInfoBill ? this.props.InfomationBillEdit : null,\n        coupon: this.state.coupon\n      }\n      await axios.post('http://localhost:5000/api/sell-product/add-reciept', {\n        email: this.props.infoUser.managerID ? this.props.infoUser.managerID : this.props.infoUser.email,\n        token: localStorage.getItem('token'),\n        data: data,\n      })\n        .then(res => {\n          if (res.status === 200) {\n            localStorage.setItem('token', res.data.token)\n            if (this.props.statusEditInfoBill) {\n              axios.post('http://localhost:5000/api/sell-product/edit-reciept', {\n                MAHD: this.props.InfomationBillEdit.MAHD,\n                token: localStorage.getItem('token'),\n                email: this.props.infoUser.email,\n              })\n                .then(res => {\n                  this.props.changeStatusEditRecipt()\n                  this.props.editShoppingBar(this.props.InfomationBillEdit.MAHD)\n                })\n                .catch(err => {\n                  this.props.changeLoginStatus();\n                  this.props.hideAlert();\n                  this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n                })\n\n            }\n            this.setState({\n              infoReciept: this.props.shoppingBags,\n            })\n            this.props.hideAlert()\n            this.props.showAlert(\"Print bill success\", \"success\")\n            this.props.addRecieptToHistory(data);\n          }\n        })\n        .catch(err => {\n          this.props.changeLoginStatus();\n          this.props.hideAlert();\n          this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n          isContinue = false;\n        })\n    }\n  }\n\n  CancelEditReiept = () => {\n    this.props.changeStatusEditRecipt()\n    this.props.resetShoppingBag()\n  }\n\n  dateFunction = () => {\n    let month = this.state.date.getMonth() + 1;\n    return \"  \" + this.state.date.getDate() + \" / \" + month + \" / \" + this.state.date.getFullYear()\n  }\n\n  \n  \n  componentWillReceiveProps(nextProps) {\n    let now = new Date()\n    let money = this.totalMoney();\n    let percent = 0;\n    let reduceMoney = 0;\n    this.props.listCoupon.map(value => {\n      let start = new Date(value.timeFrom)\n      let end = new Date(value.timeEnd)\n      if(now - start >= 0 && end - now >= 0) {\n        if (money > Number(value.minTotal)) {\n          let index = money*Number(value.percent)/100;\n          if(index > reduceMoney) {\n            percent = Number(value.percent);\n            reduceMoney = index;\n            this.setState({\n              coupon: value,\n            })\n          }\n        }\n      }\n    })\n    this.setState({\n      percentDiscount: Number(percent),\n    })\n  }\n\n  \n  componentWillMount() {\n    let now = new Date()\n    let money = this.totalMoney();\n    let percent = 0;\n    let reduceMoney = 0;\n    this.props.listCoupon.map(value => {\n      let start = new Date(value.timeFrom)\n      let end = new Date(value.timeEnd)\n      if(now - start >= 0 && end - now >= 0) {\n        if (money > Number(value.minTotal)) {\n          let index = money*Number(value.percent)/100;\n          if(index > reduceMoney) {\n            percent = Number(value.percent);\n            reduceMoney = index;\n            this.setState({\n              coupon: value,\n            })\n          }\n        }\n      }\n    })\n    this.setState({\n      percentDiscount: Number(percent),\n    })\n  }\n  \n\n  render() {\n    const PrintBill = this.addReciept\n    document.onkeydown = function (e) {\n      switch (e.key.charCodeAt()) {\n        case 70:\n          PrintBill()\n          break;\n        default:\n          break;\n      }\n    }\n    return (\n      <div>\n        <div style={{ margin: '0px' }} className=\"row\">\n          <div className=\"col-10 offset-1\">\n            <div className=\"row\">\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\n                <p style={{}}>Total</p>\n              </div>\n              <div className=\"col-5\">\n                <p style={{ textAlign: 'end', marginBottom: '0', fontSize: '1.2rem' }}>{this.totalMoney().toLocaleString()}</p>\n              </div>\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\n                <p>Discount (%)</p>\n              </div>\n              <div style={{ marginBottom: '10px' }} className=\"col-5\">\n                <input disabled value={this.state.percentDiscount}   style={{ fontSize: '1.2rem', border: 'none', outline: 'none', textAlign: 'end', width: '100%', borderBottom: '1px solid black' }} min={0} max={100} type=\"number\"></input>\n              </div>\n              <div style={{ fontSize: '1.2rem' }} className=\"col-7\">\n                <p style={{}}>Reduce</p>\n              </div>\n              <div className=\"col-5\">\n                <p style={{ textAlign: 'end', marginBottom: '0', fontSize: '1.2rem' }}>-{this.reduceMoney().toLocaleString()}</p>\n              </div>\n              <div className=\"col-7\">\n                <p style={{ margin: '0', fontSize: '1.2rem', fontWeight: '700' }}>TOTAL FINAL</p>\n              </div>\n              <div className=\"col-5\">\n                <p style={{ margin: '0', fontSize: '1.2rem', textAlign: 'end', color: 'green', fontWeight: '700' }}>{this.totalFinalMoney().toLocaleString()}</p>\n              </div>\n            </div>\n          </div>\n          {this.props.statusEditInfoBill ? (\n            <div className=\"col-12\">\n              <div className=\"row\">\n                <div onClick={() => this.addReciept()} style={{ cursor: 'pointer' }} className=\"col-8\">\n                  <ReactToPrint\n                    trigger={() => {\n\n                      return <div style={{ marginTop: '10px', borderRadius: '4px', fontWeight: '600', backgroundColor: '#37c737', textAlign: 'center', alignContent: 'center', padding: '15px 0', fontSize: '1.4rem' }}>\n                        SAVE (F9)\n                      </div>;\n                    }}\n                    content={this.props.shoppingBags.length !== 0 ? () => this.componentRef : null}\n                  />\n                </div>\n                <div className=\"col-4\">\n                  <div onClick={() => this.CancelEditReiept()} style={{ width: '100%', marginTop: '10px', borderRadius: '4px', fontWeight: '600', backgroundColor: '#757575', textAlign: 'center', alignContent: 'center', padding: '15px 0', fontSize: '1.4rem', cursor: 'pointer' }} className=\"col-4\">\n                    CANCEL\n                  </div>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div onClick={() => this.addReciept()} style={{ cursor: 'pointer' }} className=\"col-12\">\n              <ReactToPrint\n                trigger={() => {\n\n                  return <div style={{ marginTop: '10px', borderRadius: '4px', fontWeight: '600', backgroundColor: '#37c737', textAlign: 'center', alignContent: 'center', padding: '15px 0', fontSize: '1.4rem' }}>\n                    PAY (F9)\n                  </div>;\n                }}\n                content={this.props.shoppingBags.length !== 0 ? () => this.componentRef : null}\n              />\n            </div>\n          )}\n          <div className=\"col-12\">\n            <p onClick={() => this.props.changeStatusHistoryReciept()} style={{ cursor: 'pointer' }}>(*) Receipt history</p>\n          </div>\n        </div>\n        {/* Ẩn đi */}\n        <div style={{ display: 'none' }}>\n          <ComponentToPrint MAHD={this.state.code} percentDiscount={this.state.percentDiscount} infoUser={this.props.infoUser} shoppingBags={this.props.shoppingBags} ref={el => (this.componentRef = el)} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    infoUser: state.infoUser,\n    shoppingBags: state.shoppingBags,\n    statusEditInfoBill: state.statusEditInfoBill,\n    InfomationBillEdit: state.InfomationBillEdit,\n    listCoupon: state.listCoupon\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    changeStatusHistoryReciept: () => {\n      dispatch({\n        type: \"CHANGE_HISTORY_RECIEPT_STATUS\",\n      });\n    },\n    addRecieptToHistory: (data) => {\n      dispatch({\n        type: \"ADD_RECIEPT\",\n        newReciept: data,\n      });\n    },\n    showAlert: (message, typeMessage) => {\n      dispatch({\n        type: \"SHOW_ALERT\",\n        message: message,\n        typeMessage: typeMessage,\n      })\n    },\n    hideAlert: () => {\n      dispatch({\n        type: \"HIDE_ALERT\",\n      })\n    },\n    resetShoppingBag: () => {\n      dispatch({\n        type: \"RESET_SHOPPING_BAGS\"\n      })\n    },\n    changeStatusEditRecipt: () => {\n      dispatch({\n        type: \"CHANGE_EDIT_INFOMATION_STATUS\"\n      })\n    },\n    changeLoginStatus: () => {\n      dispatch({\n        type: \"CHANGE_LOGIN_STATUS\",\n      });\n    },\n    editShoppingBar: (MAHD) => {\n      dispatch({\n        type: \"EDIT_SHOPPING_BAGS\",\n        MAHD: MAHD,\n      })\n    }\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Printf)","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/TableReciept.js",["741","742","743"],"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Collapse from '@mui/material/Collapse';\nimport IconButton from '@mui/material/IconButton';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport { Grid, Box } from '@mui/material';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport { red } from '@mui/material/colors'\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { FiEdit } from 'react-icons/fi'\nimport axios from 'axios';\n\n\nfunction Row(props) {\n    const { row } = props;\n    const [open, setOpen] = React.useState(false);\n    const dispatch = useDispatch();\n    const listReciept = useSelector(state => state.listReciept)\n    const infoUser = useSelector(state => state.infoUser)\n    const statusEditInfoBill = useSelector(state => state.statusEditInfoBill)\n    const editReciept = (MAHD, coupon) => {\n        if(coupon) {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: \"This bill has used to discount!\",\n                typeMessage: \"warning\"\n            })\n        } else {\n            let objectInfoBill = [];\n            listReciept.map(value => {\n                if (value.MAHD === MAHD) {\n                    objectInfoBill = value\n                }\n                return value;\n            })\n            if (!statusEditInfoBill) {\n                dispatch({\n                    type: \"INFO_SHOPPING_BAGS_EDIT\",\n                    listProduct: objectInfoBill.listProduct,\n                })\n                dispatch({\n                    type: \"ADD_INFO_BILL_EDIT\",\n                    InfoBill: objectInfoBill,\n                })\n                dispatch({\n                    type: \"CHANGE_EDIT_INFOMATION_STATUS\",\n                })\n                dispatch({\n                    type: \"CHANGE_HISTORY_RECIEPT_STATUS\"\n                })\n            } else {\n                dispatch({\n                    type: \"HIDE_ALERT\",\n                })\n                dispatch({\n                    type: \"SHOW_ALERT\",\n                    message: \"You are editing another bill!\",\n                    typeMessage: \"warning\"\n                })\n            }\n        }\n    }\n\n    const TypeReciept = (isEdit, isDelete) => {\n        if (isDelete) {\n            return red[400]\n        } else if (isEdit) {\n            return '#f4f492'\n        } else {\n            return '#a6ffa6'\n        }\n    }\n\n\n    const StatusTypeReciept = (isEdit, isDelete) => {\n        if (isDelete) {\n            return 'Đã xóa'\n        } else if (isEdit) {\n            return 'Đổi trả'\n        } else {\n            return 'Thành công'\n        }\n    }\n\n    const showEdit = (isEdit, isDelete) => {\n        if (isEdit || isDelete) {\n            return true;\n        }\n    }\n\n    const countQuantity = () => {\n        let count = 0;\n        row.listProduct.map(value => {\n            count += value.quantity;\n        })\n        return count;\n    }\n\n    return (\n        <React.Fragment>\n            <TableRow style={{ backgroundColor: TypeReciept(row.isEdit, row.deleted), borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: '#90a4ae #90a4ae transparent #90a4ae' }} sx={{ '& > *': { borderBottom: 'unset' } }}>\n                <TableCell>\n                    <IconButton\n                        aria-label=\"expand row\"\n                        size=\"small\"\n                        onClick={() => setOpen(!open)}\n                    >\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {row.MAHD}\n                </TableCell>\n                <TableCell align=\"right\">{row.date}</TableCell>\n                <TableCell align=\"right\">{row.totalMoney}</TableCell>\n                <TableCell align=\"right\">{row.discount}</TableCell>\n                <TableCell align=\"right\">{row.totalFinalMoney}</TableCell>\n                <TableCell>\n                    {!showEdit(row.isEdit, row.deleted) ? (\n                        <IconButton onClick={() => editReciept(row.MAHD, row.coupon)} color=\"secondary\" aria-label=\"fingerprint\">\n                            <FiEdit />\n                        </IconButton>\n                    ) : null}\n                </TableCell>\n            </TableRow>\n            <TableRow style={{ borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: 'transparent #90a4ae #90a4ae #90a4ae' }}>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={12}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box sx={{ margin: 1 }}>\n                            <Typography style={{ fontWeight: '600' }} variant=\"h6\" gutterBottom component=\"div\">\n                                Detail Recipet\n                            </Typography>\n                            <Grid container spacing={3}>\n                                <Grid item lg={6} md={12} xs={12}>\n                                    <Table size=\"small\" aria-label=\"purchases\">\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell>#</TableCell>\n                                                <TableCell>Name</TableCell>\n                                                <TableCell>Quantity</TableCell>\n                                                <TableCell align=\"right\">Price</TableCell>\n                                                <TableCell align=\"right\">Total Price</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {row.listProduct.map((value, key) => (\n                                                <TableRow key={value.name}>\n                                                    <TableCell>\n                                                        {key + 1}\n                                                    </TableCell>\n                                                    <TableCell>{value.product.name}</TableCell>\n                                                    <TableCell>{value.quantity}</TableCell>\n                                                    <TableCell align=\"right\">{value.product.sellPrice.toLocaleString()}</TableCell>\n                                                    <TableCell align=\"right\">\n                                                        {(value.quantity * value.product.sellPrice).toLocaleString()}\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </Grid>\n                                <Grid style={{ borderLeft: '1px solid black', marginTop: '15px' }} item lg={6} md={12} xs={12}>\n                                    <Grid container spacing={3}>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Mã hóa đơn:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.MAHD}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Trạng thái:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{StatusTypeReciept(row.isEdit, row.isDelete)}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Thời gian:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.date}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Giờ:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.time}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Mã HD củ:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.oldBill ? row.oldBill.MAHD : \"Không có\"}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Người bán:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.name}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Tổng số lượng:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{countQuantity()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Tổng tiền hàng:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.totalMoney.toLocaleString()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Mã coupon:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.coupon? row.coupon.idCoupon : \"Không áp dụng\"}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Tiền giảm:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{(row.totalFinalMoney - row.totalMoney).toLocaleString()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Giảm giá (%):</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.discount}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>TỔNG:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>{row.totalFinalMoney.toLocaleString()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n        </React.Fragment>\n    );\n}\n\nRow.propTypes = {\n    row: PropTypes.shape({\n        calories: PropTypes.number.isRequired,\n        carbs: PropTypes.number.isRequired,\n        fat: PropTypes.number.isRequired,\n        history: PropTypes.arrayOf(\n            PropTypes.shape({\n                amount: PropTypes.number.isRequired,\n                customerId: PropTypes.string.isRequired,\n                date: PropTypes.string.isRequired,\n            }),\n        ).isRequired,\n        name: PropTypes.string.isRequired,\n        price: PropTypes.number.isRequired,\n        protein: PropTypes.number.isRequired,\n    }).isRequired,\n};\n\n\nexport default function CollapsibleTable() {\n\n    const listReciept = useSelector(state => state.listReciept)\n\n    return (\n        <TableContainer style={{ overflowX: 'hidden' }} component={Paper}>\n            <Table aria-label=\"collapsible table\">\n                <TableHead>\n                    <TableRow style={{ backgroundColor: 'black', color: 'white' }}>\n                        <TableCell />\n                        <TableCell >Mã HĐ</TableCell>\n                        <TableCell align=\"right\">Ngày hóa đơn</TableCell>\n                        <TableCell align=\"right\">Tổng hóa đơn</TableCell>\n                        <TableCell align=\"right\">Giảm giá</TableCell>\n                        <TableCell align=\"right\">Khách hàng trả</TableCell>\n                        <TableCell />\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {listReciept ?\n                        listReciept.map((row) => (\n                            <Row key={row.MAHD} row={row} />\n                        )) : null\n                    }\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/ComponentToPrint.js",["744","745","746"],"import React from 'react';\n\n\n\nclass ComponentToPrint extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            date: new Date(),\n        }\n    }\n\n    minute = 1000 * 60;\n    hour = this.minute * 60;\n    day = this.hour * 24;\n    year = this.day * 365;\n\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    totalMoney = () => {\n        let total = 0;\n        this.props.shoppingBags.map(value => {\n            total += value.quantity * value.product.sellPrice;\n        })\n        return total.toLocaleString();\n    }\n\n    reduceTotalMoney = () => {\n        let total = 0;\n        this.props.shoppingBags.map(value => {\n            total += value.quantity * value.product.sellPrice;\n        })\n        if (total !== 0) {\n            total = total*this.props.percentDiscount/100\n        }\n        return total.toLocaleString()\n    }\n\n    finalTotalMoney = () => {\n        let total = 0;\n        this.props.shoppingBags.map(value => {\n            total += value.quantity * value.product.sellPrice;\n        })\n        if (total !== 0 && this.props.percentDiscount !== 0) {\n            total -= total*this.props.percentDiscount/100\n        }\n        return total.toLocaleString();\n    }\n\n    dateFunction = () => {\n        let month = this.state.date.getMonth()+1;\n        return \"  \" + this.state.date.getDate() + \" / \" + month + \" / \" + this.state.date.getFullYear()\n    }\n\n    render() {\n        return (\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <h1 style={{ textAlign: 'center' }}>{this.props.infoUser.storeName}</h1>\n                </div>\n                <div style={{ borderBottom: '1px solid #00000059' }} className=\"col-12\">\n                    <p style={{ textAlign: 'center', marginBottom: '0' }}>{this.props.infoUser.address}</p>\n                    <p style={{ textAlign: 'center' }}>{this.props.infoUser.district + ' ' + this.props.infoUser.province}</p>\n                    <p style={{ textAlign: 'center' }}>{\"SĐT: \" + this.props.infoUser.tel}</p>\n                </div>\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\n                    <h4 style={{ textAlign: 'center' }}>HÓA ĐƠN THANH TOÁN</h4>\n                </div>\n                <div className=\"col-12\">\n                    <p style={{ textAlign: 'center', fontWeight: '400' }}>Số HĐ: {this.props.MAHD}</p>\n                    <div style={{ margin: '0 5px' }} className=\"row\">\n                        <div className=\"col-6\">\n                            <p style={{ fontWeight: '700' }}>Date:\n                                <span style={{ fontWeight: '400' }}>\n                                    {this.dateFunction()}\n                                </span>\n                            </p>\n                        </div>\n                        <div className=\"col-6\">\n                            <p style={{ fontWeight: '700' }}>Time:\n                                <span style={{ fontWeight: '400' }}>\n                                    {\"  \" + this.state.date.getHours() + \":\" + this.state.date.getMinutes()}\n                                </span>\n                            </p>\n                        </div>\n                    </div>\n                    <p style={{ fontWeight: '700', margin: '0 17px' }}>\n                        Cashier:\n                        <span style={{ fontWeight: '400' }}>\n                            {\"  Admin\"}\n                        </span>\n                    </p>\n                </div>\n                <table style={{ margin: '0 10px' }} class=\"table\">\n                    <thead>\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Name</th>\n                            <th scope=\"col\">Quantity</th>\n                            <th scope=\"col\">Price</th>\n                            <th scope=\"col\">Total money</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.props.shoppingBags ? this.props.shoppingBags.map((value, key) => (\n                            <tr>\n                                <td>{key + 1}</td>\n                                <td>{value.product.name}</td>\n                                <td>{value.quantity}</td>\n                                <td>{value.product.sellPrice}</td>\n                                <td>{value.quantity * value.product.sellPrice}</td>\n                            </tr>\n                        ))\n                        : null}\n                    </tbody>\n                </table>\n                <div style={{marginTop: '20px'}} className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-6\">\n                            <h6 style={{ textAlign: 'end' }}>Total :</h6>\n                        </div>\n                        <div className=\"col-6\">\n                            <h6 style={{ textAlign: 'start' }}>{this.totalMoney()}đ</h6>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-6\">\n                            <h6 style={{ textAlign: 'end' }}>Discount :</h6>\n                        </div>\n                        <div className=\"col-6\">\n                            <h6 style={{ textAlign: 'start' }}>-{this.reduceTotalMoney()}đ</h6>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"col-12\">\n                    <div className=\"row\">\n                        <div className=\"col-6\">\n                            <h5 style={{ textAlign: 'end' }}>TOTAL FINAL :</h5>\n                        </div>\n                        <div className=\"col-6\">\n                            <h5 style={{ textAlign: 'start' }}>{this.finalTotalMoney()}đ</h5>\n                        </div>\n                    </div>\n                </div>\n                <div style={{ marginTop: '30px' }} className=\"col-12\">\n                    <h6 style={{ textAlign: 'center',fontStyle: 'italic ' }}>Xin cảm ơn quý khách</h6>\n                    <h6 style={{ textAlign: 'center',fontStyle: 'italic ' }}>hẹn gặp lại!</h6>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ComponentToPrint;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/SellProduct/Tabs.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileSetting.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ModalAddCoupon.js",["747","748","749","750"],"import React from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport TimePicker from '@mui/lab/TimePicker';\nimport { GiCancel } from 'react-icons/gi'\nimport { useSelector, useDispatch } from 'react-redux';\nimport axios from 'axios';\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\n\nfunction ModalAddCoupon(props) {\n    const statusDarkmode = useSelector(state => state.statusDarkmode)\n    const statusEditCoupon = useSelector(state => state.statusEditCoupon)\n    const objectEditCoupon = useSelector(state => state.objectEditCoupon)\n    const infoUser = useSelector(state => state.infoUser)\n    const [timeFrom, setTimeFrom] = React.useState(statusEditCoupon ? new Date(objectEditCoupon.timeFrom) : new Date());\n    const [timeEnd, settimeEnd] = React.useState(statusEditCoupon ? new Date(objectEditCoupon.timeEnd) : new Date());\n    const [isDescription, setIsDescription] = React.useState(false);\n    const [percent, setPercent] = React.useState(statusEditCoupon ? objectEditCoupon.percent : 100);\n    const [isPercent, setIsPercent] = React.useState(false);\n    const [description, setDiscription] = React.useState(statusEditCoupon ? objectEditCoupon.name : \"Discount 2/9\")\n    const [minTotal, setMinTotal] = React.useState(statusEditCoupon ? objectEditCoupon.minTotal : 10000)\n    const [isMinTotal, setIsMinTotal] = React.useState(false)\n    const dispatch = useDispatch()\n\n    const blurDiscription = (e) => {\n        if (e.target.value.length === 0) {\n            setDiscription(e.target.value)\n            setIsDescription(true);\n        } else {\n            setDiscription(e.target.value)\n            setIsDescription(false);\n        }\n    }\n\n    const blurDiscount = (e) => {\n        if (e.target.value > 100 || e.target.value < 0 || e.target.value == \"\") {\n            setIsPercent(true)\n        }\n        else {\n            setIsPercent(false)\n            setPercent(e.target.value)\n        }\n    }\n\n    const blurMinTotal = (e) => {\n        if(e.target.value < 0 || e.target.value == \"\") {\n            setIsMinTotal(true)\n        } else {\n            setIsMinTotal(false)\n            setMinTotal(e.target.value)\n        }\n    }\n\n    const changeTimeFrom = (newValue) => {\n        if (newValue) {\n            setTimeFrom(newValue);\n        }\n    }\n\n    const changetimeEnd = (newValue) => {\n        if (newValue) {\n            settimeEnd(newValue);\n        }\n    }\n\n    const addCoupon = async () => {\n        if (timeEnd - timeFrom > 0) {\n            if (!isPercent && !isDescription && !isMinTotal) {\n                const data = {\n                    idCoupon: makeCode(6),\n                    name: description,\n                    percent: percent,\n                    minTotal: minTotal,\n                    timeFrom: timeFrom,\n                    timeEnd: timeEnd,\n                }\n                await axios.post(`http://localhost:5000/api/profile/add-coupon`, {\n                    token: localStorage.getItem('token'),\n                    email: infoUser.email,\n                    data: data,\n                }).then(res => {\n\n                }).catch(err => {\n                    \n                })\n                console.log(data)\n                dispatch({\n                    type: \"ADD_COUPON\",\n                    data: data\n                })\n                dispatch({\n                    type: \"SHOW_ALERT\",\n                    message: \"Add coupon success\",\n                    typeMessage: \"success\",\n                })\n                dispatch({\n                    type: \"CHANGE_ADD_COUPON_STATUS\"\n                })\n            }\n        } else {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: \"The end date must be greater than the start date\",\n                typeMessage: \"warning\",\n            })\n        }\n    }\n\n    const editCoupon = () => {\n        if (timeEnd - timeFrom > 0) {\n            if (!isPercent && !isDescription) {\n                const data = {\n                    idCoupon: objectEditCoupon.idCoupon,\n                    name: description,\n                    minTotal: minTotal,\n                    percent: percent,\n                    timeFrom: timeFrom,\n                    timeEnd: timeEnd,\n                }\n                dispatch({\n                    type: \"EDIT_COUPON\",\n                    data: data\n                })\n                dispatch({\n                    type: \"SHOW_ALERT\",\n                    message: \"Edit coupon success\",\n                    typeMessage: \"success\",\n                })\n                dispatch({\n                    type: \"CHANGE_ADD_COUPON_STATUS\"\n                })\n                dispatch({\n                    type:\"RESET_EDIT_COUPON_STATUS\"\n                })\n            }\n        } else {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: \"The end date must be greater than the start date\",\n                typeMessage: \"warning\",\n            })\n        }\n    }\n\n    const hanhleCancel = () => {\n        dispatch({\n            type: \"CHANGE_ADD_COUPON_STATUS\"\n        })\n        dispatch({\n            type:\"RESET_EDIT_COUPON_STATUS\"\n        })\n    }\n\n    const makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    return (\n        <form className=\"modal-add-shift\" style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n            <Card>\n                <CardHeader style={{ color: !statusDarkmode ? '#0091ea' : 'white', backgroundColor: !statusDarkmode ? '#efeeef' : '#455a64' }} title=\"Create coupon\" />\n                <Divider />\n                <CardContent>\n                    <Grid container spacing={2}>\n                        <Grid item md={12} xs={12}>\n                            <TextField\n                                id=\"outlined-basic\"\n                                variant=\"outlined\"\n                                fullWidth\n                                id=\"outlined-error-helper-text\"\n                                onBlur={(e) => blurDiscription(e)}\n                                label=\"Coupon description\"\n                                defaultValue={description}\n                                error={isDescription}\n                                helperText={isDescription ? \"Enter something\" : \"\"}\n                                required\n                                type=\"text\"\n                                name=\"disciption\"\n                            />\n                        </Grid>\n                        <Grid item md={12} xs={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                onBlur={(e) => blurDiscount(e)}\n                                label=\"Discount\"\n                                defaultValue={percent}\n                                error={isPercent}\n                                helperText={isPercent ? \"Enter greater than 0 and less than 100\" : \"\"}\n                                type=\"number\"\n                                id=\"outlined-error-helper-text\"\n                                name=\"discount\"\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid item md={12} xs={12}>\n                            <TextField\n                                required\n                                fullWidth\n                                onBlur={(e) => blurMinTotal(e)}\n                                label=\"Minimum Total Amount\"\n                                defaultValue={minTotal}\n                                error={isMinTotal}\n                                helperText={isMinTotal ? \"Enter greater than 0\" : \"\"}\n                                type=\"number\"\n                                id=\"outlined-error-helper-text\"\n                                name=\"discount\"\n                                variant=\"outlined\"\n                            />\n                        </Grid>\n                        <Grid item md={12} xs={12}>\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                <Stack spacing={3}>\n                                    <DesktopDatePicker\n                                        label=\"From\"\n                                        value={timeFrom}\n                                        minDate={new Date('2017-01-01')}\n                                        onChange={(newValue) => changeTimeFrom(newValue)}\n                                        renderInput={(params) => <TextField {...params} />}\n                                    />\n                                    <DesktopDatePicker\n                                        label=\"To\"\n                                        value={timeEnd}\n                                        minDate={new Date('2017-01-01')}\n                                        onChange={(newValue) => changetimeEnd(newValue)}\n                                        renderInput={(params) => <TextField {...params} />}\n                                    />\n                                </Stack>\n                            </LocalizationProvider>\n                        </Grid>\n                    </Grid>\n                </CardContent>\n                <Divider />\n                <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                    {statusEditCoupon ? (\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => editCoupon()} variant=\"contained\" startIcon={<BiEdit />}>\n                            Save\n                        </Button>) : (\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => addCoupon()} variant=\"contained\" startIcon={<BiPlusMedical />}>\n                            Add\n                        </Button>\n                    )}\n\n\n                    <Button style={{ backgroundColor: 'red' }} onClick={(e) => hanhleCancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\n                        Cancel\n                    </Button>\n                </Box>\n            </Card>\n        </form >\n    );\n}\n\nexport default ModalAddCoupon;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/ControlReciept.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/DateReciept.js",["751"],"import React from 'react';\nimport { Grid, Card, CardHeader, Divider, CardContent } from '@mui/material';\nimport { useSelector, useDispatch } from 'react-redux'\nimport TextField from '@mui/material/TextField';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\nimport InputLabel from '@mui/material/InputLabel';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport Select from '@mui/material/Select';\n\n\nfunction DataReciept(props) {\n    const dispatch = useDispatch()\n    const typeByDate = useSelector(state => state.typeByDate)\n    const [value, setValue] = React.useState(new Date());\n    const [value1, setValue1] = React.useState('all');\n    const darkmode = useSelector(state => state.statusDarkmode)\n\n    const selectDate = () => {\n        const data = {\n            type: \"typeByDate\",\n            day: value.getDate(),\n            month: value.getMonth() + 1,\n            year: value.getFullYear(),\n        }\n        dispatch({\n            type: \"TYPE_BY_DATE\",\n            typeByDate: data,\n        })\n    }\n\n    const changeTime = (newValue) => {\n        if (newValue) {\n            setValue(newValue);\n        }\n        if (typeByDate.type === 'typeByDate') {\n            const data = {\n                type: \"typeByDate\",\n                day: newValue.getDate(),\n                month: newValue.getMonth() + 1,\n                year: newValue.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        }\n    }\n\n    const selectType = () => {\n        if (value1 === 'all') {\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: { type: 'all' },\n            })\n        } else if (value1 === 'yesterday') {\n            let yesterday = new Date()\n            const data = {\n                type: \"yesterday\",\n                day: yesterday.getDate() - 1,\n                month: yesterday.getMonth() + 1,\n                year: yesterday.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        } else if (value1 === 'today') {\n            let today = new Date()\n            const data = {\n                type: \"today\",\n                day: today.getDate(),\n                month: today.getMonth() + 1,\n                year: today.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        } else if (value1 === 'lastmonth') {\n            let today = new Date()\n            const data = {\n                type: \"lastmonth\",\n                month: today.getMonth(),\n                year: today.getFullYear(),\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        } else if (value1 === 'lastyear') {\n            let today = new Date()\n            const data = {\n                type: \"lastyear\",\n                year: today.getFullYear() - 1,\n            }\n            dispatch({\n                type: \"TYPE_BY_DATE\",\n                typeByDate: data,\n            })\n        }\n    }\n\n    const changeType = (e) => {\n        setValue1(e.target.value)\n        if (typeByDate.type === 'all' || typeByDate.type === 'yesterday' || typeByDate.type === 'today' || typeByDate.type === 'lastmonth' || typeByDate.type === 'lastyear') {\n            if (e.target.value === 'all') {\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: { type: 'all' },\n                })\n            }\n            if (e.target.value === 'yesterday') {\n                let yesterday = new Date()\n                let data = {\n                    type: \"yesterday\",\n                    day: yesterday.getDate() - 1,\n                    month: yesterday.getMonth() + 1,\n                    year: yesterday.getFullYear(),\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n            if (e.target.value === 'today') {\n                let today = new Date()\n                const data = {\n                    type: \"today\",\n                    day: today.getDate(),\n                    month: today.getMonth() + 1,\n                    year: today.getFullYear(),\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n            if (e.target.value === 'lastmonth') {\n                let today = new Date()\n                const data = {\n                    type: \"lastmonth\",\n                    month: today.getMonth(),\n                    year: today.getFullYear(),\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n            if (e.target.value === 'lastyear') {\n                let today = new Date()\n                const data = {\n                    type: \"lastyear\",\n                    year: today.getFullYear() - 1,\n                }\n                dispatch({\n                    type: \"TYPE_BY_DATE\",\n                    typeByDate: data,\n                })\n            }\n        }\n    }\n\n    React.useEffect(() => {\n        dispatch({\n            type: \"TYPE_BY_DATE\",\n            typeByDate: { type: 'all' },\n        })\n    }, [])\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item md={12} sm={12}  >\n                <Card>\n                    <CardHeader style={{ color: !darkmode ? '#0091ea' :'white', backgroundColor: !darkmode ? '#efeeef' :'#455a64'}} title=\"Date\" />\n                    <Divider></Divider>\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                <Grid item md={12} sm={12}>\n                                    <div className=\"form-check\">\n                                        <input onClick={() => selectType()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault2\" defaultChecked />\n                                        <FormControl fullWidth>\n                                            <InputLabel id=\"demo-simple-select-label\">Group by</InputLabel>\n                                            <Select\n                                                labelId=\"demo-simple-select-label\"\n                                                id=\"demo-simple-select\"\n                                                value={value1}\n                                                label=\"Option\"\n                                                onChange={(e) => changeType(e)}\n                                            >\n                                                <MenuItem value='all'>All</MenuItem>\n                                                <MenuItem value='today'>Today</MenuItem>\n                                                <MenuItem value='yesterday'>Yesterday</MenuItem>\n                                                <MenuItem value='lastmonth'>Last month</MenuItem>\n                                                <MenuItem value='lastyear'>Last year</MenuItem>\n                                            </Select>\n                                        </FormControl>\n                                    </div>\n                                </Grid>\n                                <Grid item md={12} sm={12}>\n                                    <div className=\"form-check\">\n                                        <input onClick={() => selectDate()} style={{ transform: 'translateY(70%)' }} className=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\" />\n                                        <DesktopDatePicker\n                                            label=\"Ngày\"\n                                            value={value}\n                                            minDate={new Date('2017-01-01')}\n                                            onChange={(newValue) => changeTime(newValue)}\n                                            renderInput={(params) => <TextField {...params} />}\n                                        />\n                                    </div>\n                                </Grid>\n                            </LocalizationProvider>\n                        </Grid>\n                    </CardContent>\n                </Card>\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default DataReciept;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/SalaryStats.js",["752","753","754","755","756","757","758","759","760","761","762","763","764","765","766","767","768","769","770","771","772","773","774","775","776","777","778","779","780","781","782","783","784","785"],"import React from 'react';\nimport { Typography } from '@mui/material';\nimport { RiMoneyDollarCircleFill } from 'react-icons/ri'\nimport { useSelector } from 'react-redux'\nimport { BsCashCoin } from \"react-icons/bs\";\nimport { IoCashSharp } from \"react-icons/io5\";\n\nfunction calculateTime(timeFrom, timeEnd)\n{\n    var realTimeFrom, realTimeEnd;\n\n    realTimeFrom = parseInt(timeFrom.substring(0, timeFrom.indexOf(':')));\n    if(timeFrom.indexOf('PM')!=-1) realTimeFrom += 12;\n    var minuteFrom= parseInt(timeFrom.substring(timeFrom.indexOf(':')+1, timeFrom.indexOf(':') + 3));\n\n    realTimeEnd = parseInt(timeEnd.substring(0, timeEnd.indexOf(':')));\n    if(timeEnd.indexOf('PM')!=-1) realTimeEnd += 12;\n    var minuteEnd= parseInt(timeEnd.substring(timeEnd.indexOf(':')+1, timeEnd.indexOf(':') + 3));\n\n    var timeDiff = realTimeEnd - realTimeFrom;\n    \n    if(minuteEnd - minuteFrom < 0)\n    {\n        timeDiff --;\n        minuteEnd += 60;\n    }\n\n    return Math.round(timeDiff + (minuteEnd - minuteFrom) / 60.0);\n}\n\nfunction calculateSalary(shift){\n    var salary = 0;\n    // Tính thời gian của ca làm\n    return shift._id.shiftType.salary * (calculateTime(shift._id.shiftType.timeFrom,shift._id.shiftType.timeEnd));\n}\n\n\nfunction SalaryStats(props) {\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\n    const listReciept = useSelector(state => state.listReciept)\n    const listTimeKeeping = useSelector(state => state.listTimeKeeping)\n    const [totalSalary, setTotalSalary] = React.useState('')\n    const [totalMoney, setTotalMoney] = React.useState('')\n\n    let nowTime = new Date();\n\n    React.useEffect(() => {\n        \n        let money = 0;\n        let currentMonth = nowTime.getMonth() + 1;\n\n        console.log(\"listTimeKeeping\",listTimeKeeping )\n        // if(listTimeKeeping.length>0)\n        //     console.log(calculateSalary(listTimeKeeping[0]));\n\n        if (typeHeaderDashboard == 'Today') {\n            let salary = 0;\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\n            {\n                var realDate = listTimeKeeping[i]._id.realDate.substring(0,listTimeKeeping[i]._id.realDate.indexOf('T'));\n                var date = realDate.split('-');\n                console.log(date);\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\n                if (date[2] == nowTime.getDate() - 1 && date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\n                    salary += calculateSalary(listTimeKeeping[i])\n                }\n            }\n            setTotalSalary(salary);\n        } else if (typeHeaderDashboard == 'Yesterday') {\n            let salary = 0;\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\n            {\n                var realDate = listTimeKeeping[i]._id.realDate.substring(0,listTimeKeeping[i]._id.realDate.indexOf('T'));\n                var date = realDate.split('-');\n                console.log(date);\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\n                if (date[2] == nowTime.getDate() - 2 && date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\n                    salary += calculateSalary(listTimeKeeping[i])\n                }\n            }\n            setTotalSalary(salary);\n\n        } else if (typeHeaderDashboard == 'Month') {\n            let salary = 0;\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\n            {\n                var realDate = listTimeKeeping[i]._id.realDate.substring(0,listTimeKeeping[i]._id.realDate.indexOf('T'));\n                var date = realDate.split('-');\n                console.log(date);\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\n                if (date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\n                    salary += calculateSalary(listTimeKeeping[i])\n                }\n            }\n            setTotalSalary(salary);\n        } else if (typeHeaderDashboard == 'Year') {\n            let salary = 0;\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\n            {\n                var realDate = listTimeKeeping[i]._id.realDate.substring(0,listTimeKeeping[i]._id.realDate.indexOf('T'));\n                var date = realDate.split('-');\n                console.log(date);\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\n                if (date[0] == nowTime.getFullYear()) {\n                    salary += calculateSalary(listTimeKeeping[i])\n                }\n            }\n            setTotalSalary(salary);\n        } else if (typeHeaderDashboard == 'All') {\n            let salary = 0;\n            for(var i = 0 ; i < listTimeKeeping.length; i++)\n            {\n                salary += calculateSalary(listTimeKeeping[i])\n            }\n            setTotalSalary(salary);\n        }\n    }, [typeHeaderDashboard])\n\n    return (\n        <div className=\"dashboard-css sold-good\">\n            <div className=\"dashboard-item-img sold-good\" style={{ marginBottom: '30px'}}>\n                <IoCashSharp className=\"dashboard-item-icon sold-good\"></IoCashSharp>\n            </div>\n            <Typography style={{ marginBottom: '10px' }} variant=\"h6\">{totalSalary.toLocaleString()} VNĐ  \n            </Typography>\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\n                Total salary\n            </Typography>\n        </div>\n    );\n}\n\nexport default SalaryStats;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/StatusReceiptType.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/Regulation.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ModalAdd.js",["786","787","788","789"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport TimePicker from '@mui/lab/TimePicker';\nimport { GiCancel } from 'react-icons/gi'\nimport axios from 'axios';\n\nclass ModalAdd extends Component {\n    constructor(props) {\n        super(props);\n\n        if (this.props.editShiftStatus) {\n            var _timeFrom = new Date();\n            if (this.props.objectEditShift.from.includes(\"PM\")) {\n                var fromHour =  parseInt(this.props.objectEditShift.from.slice(0, this.props.objectEditShift.from.indexOf(':')));\n                var fromMin = parseInt(this.props.objectEditShift.from.slice(this.props.objectEditShift.from.indexOf(':') + 1));\n                _timeFrom.setHours(fromHour + 12, fromMin);\n            } else {\n                var fromHour =  parseInt(this.props.objectEditShift.from.slice(0, this.props.objectEditShift.from.indexOf(':')));\n                var fromMin = parseInt(this.props.objectEditShift.from.slice(this.props.objectEditShift.from.indexOf(':') + 1));\n                _timeFrom.setHours(fromHour , fromMin);\n            }\n           \n            var _timeTo = new Date();\n            if (this.props.objectEditShift.to.includes(\"PM\")) {\n                var toHour = parseInt(this.props.objectEditShift.to.slice(0, this.props.objectEditShift.to.indexOf(':')));\n                var toMin = parseInt(this.props.objectEditShift.to.slice(this.props.objectEditShift.to.indexOf(':') + 1));\n                _timeTo.setHours(toHour + 12, toMin);\n            } else {\n                var toHour = parseInt(this.props.objectEditShift.to.slice(0, this.props.objectEditShift.to.indexOf(':')));\n                var toMin = parseInt(this.props.objectEditShift.to.slice(this.props.objectEditShift.to.indexOf(':') + 1));\n                _timeTo.setHours(toHour, toMin);\n            }\n            \n        }\n\n        this.state = {\n            timeFrom: this.props.editShiftStatus ? _timeFrom : new Date(2018, 5, 35, 0, 0, 0),\n            timeTo: this.props.editShiftStatus ? _timeTo : new Date(2018, 5, 35, 0, 0, 0),\n            isSalary: false,\n            isDescription: false,\n            isTimeTo: false,\n            valueTime: this.props.editShiftStatus ? 1 : null,\n        }\n    }\n\n    descriptionShift = this.props.editShiftStatus ? this.props.objectEditShift.description : \"Ex : abc\"\n    timeFrom = this.props.editShiftStatus ? this.props.objectEditShift.from : \"00:00 AM\"\n    timeTo = this.props.editShiftStatus ? this.props.objectEditShift.to : \"00:00 AM\"\n    salary = this.props.editShiftStatus ? this.props.objectEditShift.salary : 10000\n\n    // Handle user\n    hanhleCancel = (e) => {\n        this.props.changeAddStatus();\n        if (this.props.editShiftStatus) {\n            this.props.changeEditShiftStatus();\n        }\n    }\n\n    changeTimeFrom = (e) => {\n        var hourse = e.getHours()\n        const minutes = e.getMinutes()\n        if (hourse >= 12) {\n            hourse = hourse - 12;\n            this.timeFrom = hourse.toString() + \":\" + minutes.toString() + \" PM\"\n        } else {\n            this.timeFrom = hourse.toString() + \":\" + minutes.toString() + \" AM\"\n        }\n        this.setState({\n            timeFrom: e,\n        })\n    }\n\n    changeTimeTo = (e) => {\n        var hourse = e.getHours()\n        const minutes = e.getMinutes()\n        if (hourse >= 12) {\n            hourse = hourse - 12;\n            this.timeTo = hourse.toString() + \":\" + minutes.toString() + \" PM\"\n        } else {\n            this.timeTo = hourse.toString() + \":\" + minutes.toString() + \" AM\"\n        }\n        this.setState({\n            timeTo: e,\n        })\n    }\n\n    blurDiscription = (e) => {\n        this.descriptionShift = e.target.value;\n        if (e.target.value === \"\") {\n            this.setState({\n                isDescription: true,\n            })\n        } else {\n            this.setState({\n                isDescription: false,\n            })\n        }\n    }\n\n\n    // Tạo code để xác nhận\n    makeCode = (length) => {\n        var result = '';\n        var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n        var charactersLength = characters.length;\n        for (var i = 0; i < length; i++) {\n            result += characters.charAt(Math.floor(Math.random() *\n                charactersLength));\n        }\n        return result;\n    }\n\n    editShift = async () => {\n        if (this.state.timeTo - this.state.timeFrom < 1) {\n            this.props.hideAlert();\n            this.props.showAlert('The time end must be greater than the time start', 'error')\n        }\n        if (!this.state.isSalary && !this.state.isDescription && (this.state.timeTo - this.state.timeFrom > 0)) {\n            var data = {\n                token: localStorage.getItem('token'),\n                idUser: this.props.infoUser.email,\n                id: this.props.objectEditShift.id,\n                salary: this.salary,\n                description: this.descriptionShift,\n                from: this.timeFrom,\n                to: this.timeTo,\n            }\n            await axios.post(`http://localhost:5000/api/profile/update-shift`, data)\n                .then(res => {\n                    if (res.data.token) {\n                        localStorage.setItem('token', res.data.token);\n                        this.props.hideAlert();\n                        this.props.showAlert(\"Edit shift success\", \"success\");\n                        this.props.updateShift(data);\n                    }\n                    this.props.changeEditShiftStatus();\n                    this.props.changeAddStatus();\n                })\n                .catch(err => {\n                    this.props.changeLoginStatus();\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n                })\n\n        }\n    }\n\n    blurSalary = (e) => {\n        if (e.target.value <= -1) {\n            this.setState({\n                isSalary: true,\n            })\n        } else {\n            this.setState({\n                isSalary: false,\n            })\n        }\n        this.salary = e.target.value;\n    }\n\n    // Call API\n    addShift = () => {\n        if (this.state.timeTo - this.state.timeFrom < 1) {\n            this.props.hideAlert();\n            this.props.showAlert('The time end must be greater than the time start', 'error')\n        }\n        if (!this.state.isSalary && !this.state.isDescription && (this.state.timeTo - this.state.timeFrom > 0)) {\n            const code = this.makeCode(6);\n            const data = {\n                idUser: this.props.infoUser.email,\n                id: code,\n                salary: this.salary,\n                description: this.descriptionShift,\n                from: this.timeFrom,\n                to: this.timeTo,\n            }\n            const data1 = {\n                name: this.descriptionShift,\n                salary: this.salary,\n                timeFrom: this.timeFrom,\n                timeEnd: this.timeTo,\n                _id: { shiftID: code }\n            }\n            if (data) {\n                axios.post(`http://localhost:5000/api/profile/add-shift`, {\n                    email: this.props.infoUser.email,\n                    token: localStorage.getItem('token'),\n                    data: data,\n                })\n                    .then(res => {\n                        if (res.data.token) {\n                            this.props.addShift(data1);\n                            localStorage.setItem('token', res.data.token);\n                            this.props.hideAlert();\n                            this.props.showAlert(\"Add shift success\", \"success\");\n                        }\n                        this.props.changeAddStatus();\n                    })\n                    .catch(err => {\n                        this.props.changeLoginStatus();\n                        this.props.hideAlert();\n                        this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n                    })\n            }\n        }\n    }\n\n    render() {\n        return (\n            <form className=\"modal-add-shift\" style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Create shift\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    id=\"outlined-basic\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    defaultValue={(this.props.editShiftStatus ? this.props.objectEditShift.description : this.descriptionShift)}\n                                    onBlur={(e) => this.blurDiscription(e)}\n                                    label=\"Shift description\"\n                                    error={this.state.isDescription}\n                                    helperText={this.state.isDescription ? \"Enter something\" : \"\"}\n                                    required\n                                    type=\"text\"\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    required\n                                    fullWidth\n                                    onBlur={(e) => this.blurSalary(e)}\n                                    label=\"Salary\"\n                                    defaultValue={this.props.editShiftStatus ? this.props.objectEditShift.salary : this.salary}\n                                    error={this.state.isSalary}\n                                    helperText={this.state.isSalary ? \"Greater than 0\" : \"\"}\n                                    type=\"number\"\n                                    id=\"outlined-error-helper-text\"\n                                    name=\"salary\"\n                                    variant=\"outlined\"\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                                    <Stack spacing={3}>\n                                        <TimePicker\n                                            label=\"From\"\n                                            value={this.state.timeFrom}\n                                            onChange={(newValue) => this.changeTimeFrom(newValue)}\n                                            renderInput={(params) => <TextField {...params} />}\n                                        />\n                                        <TimePicker\n                                            label=\"To\"\n                                            value={this.state.timeTo}\n                                            onChange={(newValue) => this.changeTimeTo(newValue)}\n                                            renderInput={(params) => <TextField {...params} />}\n                                        />\n                                    </Stack>\n                                </LocalizationProvider>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        {this.props.editShiftStatus ? (\n                            <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.editShift()} variant=\"contained\" startIcon={<BiEdit />}>\n                                Save\n                            </Button>) : (\n                            <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.addShift()} variant=\"contained\" startIcon={<BiPlusMedical />}>\n                                Add\n                            </Button>\n                        )}\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.hanhleCancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\n                            Cancel\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addStatus: state.addStatus,\n        infoUser: state.infoUser,\n        editShiftStatus: state.editShiftStatus,\n        objectEditShift: state.objectEditShift,\n        statusDarkmode: state.statusDarkmode\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_STATUS\",\n            });\n        },\n        addShift: (data) => {\n            dispatch({\n                type: \"ADD_SHIFT\",\n                newShift: data,\n            })\n        },\n        changeEditShiftStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_SHIFT_STATUS\",\n            })\n        },\n        updateShift: (data) => {\n            dispatch({\n                type: \"OBJECT_UPDATE_SHIFT\",\n                data: data,\n            })\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalAdd);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileCoupon.js",["790"],"import React from 'react';\nimport { Card, CardHeader, Divider, TableBody, TableHead, TableRow, Paper, Box, Button, CardContent, Table, TableCell, TableContainer } from '@mui/material';\nimport { BiPlusMedical } from 'react-icons/bi';\nimport { IconButton } from '@mui/material'\nimport { styled } from '@mui/material/styles';\nimport { FiEdit, FiTrash2 } from 'react-icons/fi'\nimport { tableCellClasses } from '@mui/material/TableCell';\nimport { useSelector, useDispatch } from 'react-redux';\nimport axios from 'axios';\n\nconst StyledTableCell = styled(TableCell)(({ theme }) => ({\n    [`&.${tableCellClasses.head}`]: {\n        backgroundColor: theme.palette.common.black,\n        color: theme.palette.common.white,\n    },\n    [`&.${tableCellClasses.body}`]: {\n        fontSize: 14,\n    },\n}));\n\n\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\n    '&:nth-of-type(odd)': {\n        backgroundColor: theme.palette.action.hover,\n    },\n    // hide last border\n    '&:last-child td, &:last-child th': {\n        border: 0,\n    },\n}));\n\n\n\nfunction ProfileCoupon(props) {\n    const statusDarkmode = useSelector(state => state.statusDarkmode)\n    const dispatch = useDispatch()\n    const listCoupon = useSelector(state => state.listCoupon)\n    const openModalAddCoupon = () => {\n        dispatch({\n            type: \"CHANGE_ADD_COUPON_STATUS\"\n        })\n    }\n\n    const convertTime = (time) => {\n        let date = new Date(time)\n        return date.getDate() + \" / \" + (date.getMonth() + 1) + \" / \" + date.getFullYear()\n    }\n\n    const deleteCoupon = (idCoupon) => {\n        dispatch({\n            type: \"DELETE_COUPON\",\n            idCoupon: idCoupon\n        })\n        dispatch({\n            type: \"SHOW_ALERT\",\n            message: \"Delete coupon success\",\n            typeMessage: \"success\",\n        })\n    }\n    \n    const editCoupon = (data) => {\n        console.log(data)\n        dispatch({\n            type: \"CHANGE_ADD_COUPON_STATUS\"\n        })\n        dispatch({\n            type: \"CHANGE_EDIT_COUPON_STATUS\"\n        })\n        dispatch({\n            type: \"OBJECT_EDIT_COUPON\",\n            objectEditCoupon: data\n        })\n    }\n\n    React.useEffect(() => {\n        console.log(listCoupon)\n    }, [listCoupon])\n\n\n    return (\n        <div style={{ boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px' }}>\n            <Card style={{ position: \"relative\", marginTop: '15px' }}>\n                <CardHeader style={{ color: !statusDarkmode ? '#0091ea' : 'white', backgroundColor: !statusDarkmode ? '#efeeef' : '#455a64' }} title=\"Coupon\" />\n                <Divider />\n                <CardContent>\n                    <TableContainer component={Paper}>\n                        <Table sx={{ minWidth: 700 }} aria-label=\"customized table\">\n                            <TableHead>\n                                <TableRow>\n                                    <StyledTableCell>Coupon name</StyledTableCell>\n                                    <StyledTableCell align=\"center\">Discount</StyledTableCell>\n                                    <StyledTableCell align=\"center\">Min Total</StyledTableCell>\n                                    <StyledTableCell align=\"center\">From</StyledTableCell>\n                                    <StyledTableCell align=\"center\">To</StyledTableCell>\n                                    <StyledTableCell align=\"center\">Edit</StyledTableCell>\n                                    <StyledTableCell align=\"center\">Delete</StyledTableCell>\n                                </TableRow>\n                            </TableHead>\n                            {listCoupon.map(item => {\n                                return (\n                                    <TableBody>\n                                        <StyledTableRow key=\"abc\">\n                                            <StyledTableCell component=\"th\" scope=\"row\">{item.name}</StyledTableCell>\n                                            <StyledTableCell align=\"center\">{item.percent}</StyledTableCell>\n                                            <StyledTableCell align=\"center\">{item.minTotal.toLocaleString()}</StyledTableCell>\n                                            <StyledTableCell align=\"center\">{convertTime(item.timeFrom)}</StyledTableCell>\n                                            <StyledTableCell align=\"center\">{convertTime(item.timeEnd)}</StyledTableCell>\n                                            <StyledTableCell align=\"center\">\n                                                <IconButton onClick={() => editCoupon(item)} name={item.idCoupon} color=\"secondary\" aria-label=\"fingerprint\">\n                                                    <FiEdit />\n                                                </IconButton>\n                                            </StyledTableCell>\n                                            <StyledTableCell  align=\"center\">\n                                                <IconButton onClick={() => deleteCoupon(item.idCoupon)} name={item.idCoupon} style={{ color: 'red' }} aria-label=\"fingerprint\">\n                                                    <FiTrash2 />\n                                                </IconButton>\n                                            </StyledTableCell>\n                                        </StyledTableRow>\n                                    </TableBody>\n                                )\n                            })}\n                        </Table>\n                    </TableContainer>\n                </CardContent>\n                <Divider />\n                <Box className=\"add-shift\" sx={{ display: 'flex', justifyContent: 'flex-end', p: 2 }}>\n                    <Button onClick={() => openModalAddCoupon()} style={{ backgroundColor: 'yellowgreen' }} variant=\"contained\" startIcon={<BiPlusMedical />}>\n                        add\n                    </Button>\n                </Box>\n            </Card>\n        </div>\n    );\n}\n\nexport default ProfileCoupon;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/ProductStatis.js",["791","792","793","794","795","796","797","798","799","800","801","802","803","804","805","806","807","808","809","810","811","812","813","814","815","816","817","818","819","820","821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839","840","841"],"import React from 'react';\nimport { Typography } from '@mui/material';\nimport { RiMoneyDollarCircleFill } from 'react-icons/ri'\nimport { useSelector } from 'react-redux'\nimport { MdImportExport } from \"react-icons/md\";\n\nfunction ProductStatis(props) {\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\n    const listReciept = useSelector(state => state.listReciept)\n    const [totalExport, setTotalExport] = React.useState('')\n    const listProduct = useSelector(state => state.listProduct.state)\n    const [totalImport, setTotalImport] = React.useState('');\n    // console.log(\"listProduct\", listProduct);\n    let nowTime = new Date()\n\n    React.useEffect(() => {\n        let money = 0;\n        let currentMonth = nowTime.getMonth() + 1;\n\n        if (typeHeaderDashboard == 'Today') {\n            var importProduct = 0;\n            for(var i = 0; i < listProduct.length; i++)\n            {\n                var realDate = listProduct[i]._id.importDate.substring(0,listProduct[i]._id.importDate.indexOf('T'));\n                var date = realDate.split('-');\n                // console.log(date);\n                // console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\n                if (date[2] == nowTime.getDate() && date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\n                    importProduct += parseInt(listProduct[i].quantity);\n                }\n            }\n            setTotalImport(importProduct);\n            var exportProduct = 0;\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                console.log(\"val\", value);\n                if (date[0] == nowTime.getDate() && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\n                    // Tính tổng số lượng sản phẩm\n                    var allExport = 0;\n                    for(var j = 0; j < value.listProduct.length; j++)\n                    {\n                        allExport += parseInt(value.listProduct[j].quantity);\n                    }\n                    if(!value.deleted) {\n                        exportProduct += allExport;\n                    }\n                }\n            })\n            setTotalExport(exportProduct)\n        } else if (typeHeaderDashboard == 'Yesterday') {\n            var importProduct = 0;\n            for(var i = 0; i < listProduct.length; i++)\n            {\n                var realDate = listProduct[i]._id.importDate.substring(0,listProduct[i]._id.importDate.indexOf('T'));\n                var date = realDate.split('-');\n                // console.log(date);\n                // console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\n                if (date[2] == nowTime.getDate() - 1 && date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\n                    importProduct += parseInt(listProduct[i].quantity);\n                }\n            }\n            setTotalImport(importProduct);\n\n            var exportProduct =0;\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                console.log(\"val\", value);\n                if (date[0] == nowTime.getDate() - 1 && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\n                    // Tính tổng số lượng sản phẩm\n                    var allExport = 0;\n                    for(var j = 0; j < value.listProduct.length; j++)\n                    {\n                        allExport += parseInt(value.listProduct[j].quantity);\n                    }\n                    if(!value.deleted) {\n                        exportProduct += allExport;\n                    }\n                }\n            })\n            setTotalExport(exportProduct)\n        } else if (typeHeaderDashboard == 'Month') {\n            var importProduct = 0;\n            for(var i = 0; i < listProduct.length; i++)\n            {\n                var realDate = listProduct[i]._id.importDate.substring(0,listProduct[i]._id.importDate.indexOf('T'));\n                var date = realDate.split('-');\n                console.log(date);\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\n                if (date[1] == currentMonth && date[0] == nowTime.getFullYear()) {\n                    importProduct += parseInt(listProduct[i].quantity);\n                }\n            }\n            setTotalImport(importProduct);\n\n            var exportProduct =0;\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\n                    var allExport = 0;\n                    for(var j = 0; j < value.listProduct.length; j++)\n                    {\n                        allExport += parseInt(value.listProduct[j].quantity);\n                    }\n                    if(!value.deleted) {\n                        exportProduct += allExport;\n                    }\n                }\n            })\n            setTotalExport(exportProduct)\n        } else if (typeHeaderDashboard == 'Year') {\n            var importProduct = 0;\n            for(var i = 0; i < listProduct.length; i++)\n            {\n                var realDate = listProduct[i]._id.importDate.substring(0,listProduct[i]._id.importDate.indexOf('T'));\n                var date = realDate.split('-');\n                console.log(date);\n                console.log(nowTime.getDate() - 1,currentMonth,nowTime.getFullYear())\n                if (date[0] == nowTime.getFullYear()) {\n                    importProduct += parseInt(listProduct[i].quantity);\n                }\n            }\n            setTotalImport(importProduct);\n\n            var exportProduct =0;\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[2] == nowTime.getFullYear()) {\n                    var allExport = 0;\n                    for(var j = 0; j < value.listProduct.length; j++)\n                    {\n                        allExport += parseInt(value.listProduct[j].quantity);\n                    }\n                    if(!value.deleted) {\n                        exportProduct += allExport;\n                    }\n                }\n            })\n            setTotalExport(exportProduct)\n        } else if (typeHeaderDashboard == 'All') {\n            var importProduct = 0;\n            if(listProduct!=undefined && listProduct.length != undefined)\n                for(var i = 0; i < listProduct.length; i++)\n                {\n                    importProduct += parseInt(listProduct[i].quantity);\n                }\n            setTotalImport(importProduct);\n            \n            var exportProduct =0;\n            listReciept.map(value => {\n                if(!value.deleted) {\n                    var allExport = 0;\n                    for(var j = 0; j < value.listProduct.length; j++)\n                    {\n                        allExport += parseInt(value.listProduct[j].quantity);\n                    }\n                    if(!value.deleted) {\n                        exportProduct += allExport;\n                    }\n                }\n            })\n            setTotalExport(exportProduct)\n        }\n    }, [typeHeaderDashboard])\n\n    return (\n        <div className=\"dashboard-css imported-good\">\n            <div className=\"dashboard-item-img imported-good\" style={{ marginBottom: '30px' }}>\n                <MdImportExport className=\"dashboard-item-icon imported-good\"></MdImportExport>\n            </div>\n            <Typography style={{ marginBottom: '10px' }} variant=\"h6\">\n                {totalImport.toLocaleString() + '/' + totalExport.toLocaleString()}\n            </Typography>\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\n                Import Product / Sell Product\n            </Typography>\n        </div>\n    );\n}\n\nexport default ProductStatis;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ListShift.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileHeader.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ProfileDetail.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateNextWeekTimeKeeping.js",["842","843","844","845","846","847","848","849","850","851","852","853","854"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, \n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nvar listDayInWeek = [\n    {ID:'Monday',name:'Thứ hai'}, \n    {ID:'Tuesday',name:'Thứ ba'}, \n    {ID:'Wednesday',name:'Thứ tư'}, \n    {ID:'Thursday',name:'Thứ năm'}, \n    {ID:'Friday',name:'Thứ sáu'}, \n    {ID:'Saturday',name:'Thứ bảy'}, \n    {ID:'Sunday',name:'Chủ nhật'}\n];\n\nclass UpdateNextWeekTimeKeepingModal extends Component {\n\n    genID = 0;\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n            withdrawID: '',\n            alterID: '',\n            dayChosed: '',\n            shiftID: '',\n        };\n        this.loadInitialData();\n    }\n\n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    async updateChange() {\n        console.log(\"Vô được hàm cập nhập rồi\")\n        console.log(\"id giá trị hiện tại\", )\n        // Xoá cái hiện tại đi cái đã\n        const data = {\n            token: localStorage.getItem('token'),   \n            offDay: {\n                _id: this.props.updateNextWeekTimeKeepingValue._id\n            }\n        }\n\n        await axios.delete(`http://localhost:5000/api/employee/off-day`,{data: data})\n          .then(res => {\n              alert(\"success\");\n          })\n          .catch(err => {\n              alert(err);\n          })\n        this.props.deleteNextWeekTimeKeeping(this.props.updateNextWeekTimeKeepingValue);\n        console.log(\"Xoá được rồi\");\n        const dataUpdate = {\n            token: localStorage.getItem('token'),\n            offDay: {\n                _id: {\n                    dateInWeek: this.currentdayChosed,\n                    storeID: this.props.infoUser.email,\n                    shiftType: {\n                        _id: {\n                            shiftID: this.currentShipChosed,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    employee: {\n                        _id: {\n                            employeeID: this.currentWidrawID,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\n                },\n                alternativeEmployee: {\n                    _id: {\n                        employeeID: this.currentAlterID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n            }    \n        };\n        console.log(\"dataUpdate\", dataUpdate);\n        await axios.post(`http://localhost:5000/api/employee/off-day`, dataUpdate)\n          .then(res => {\n                console.log(\"Save success\");\n                alert(\"Lưu thành công\"); \n                this.props.addNewChange(dataUpdate.offDay);\n                console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\n        })\n        .catch(err => {\n            alert(err);\n            console.log(err);\n            if(err.response.data.message)\n            {\n                alert(err.response.data.message);\n            }\n            // Nếu lỗi thì thêm lại\n            this.props.addNewChange(this.props.updateNextWeekTimeKeepingValue);\n            axios.post(`http://localhost:5000/api/employee/off-day`, {\n                token: localStorage.getItem('token'),\n                offDay: this.props.updateNextWeekTimeKeepingValue,\n            })\n            .then(res => {\n                  console.log(\"Save success\");\n                  alert(\"Lưu lại thành công\"); \n                })\n                .catch(err => {\n                    // alert(err);\n                    if(err.response.data.message)\n                    {\n                        alert(err.response.data.message);\n                    }\n                });\n        })\n        // var indexOfData = this.findIndexCurrentNextTimeKeepingInRedux(data._id)\n        // this.props.changeUpdateNextWeekTimeKeeping(data, indexOfData);\n\n        this.props.changeUpdateNextWeekTimeKeepingStatus();\n    }\n\n    findIndexCurrentNextTimeKeepingInRedux(id)\n    {\n        //Đụng đến nếu sửa bảng\n        var listToSearch = this.props.nextWeekTimeKeeping;\n        for(var i = 0 ; i < listToSearch.length ; i ++)\n        {\n            if(listToSearch[i]._id.dateInWeek == id.dateInWeek && \n                listToSearch[i]._id.shiftType._id.shiftID == id.shiftType._id.shiftID&& \n                listToSearch[i]._id.employee._id.employeeID == id.employee._id.employeeID)\n            {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    realDate = '';\n    currentdayChosed = '';\n    currentShipChosed = '';\n    currentWidrawID = '';\n    loadInitialData() {\n        var val = this.props.updateNextWeekTimeKeepingValue;\n        this.realDate = val._id.realDate;\n        if(this.realDate.indexOf('T')!=-1) this.realDate = this.realDate.substring(0, this.realDate.indexOf('T'));\n        this.currentdayChosed = val._id.dateInWeek;\n        this.currentShipChosed = val._id.shiftType._id.shiftID;\n        this.currentWidrawID = val._id.employee._id.employeeID;\n        this.currentAlterID = val.alternativeEmployee._id.employeeID;\n        this.setState({\n            change : !this.state.change,\n            shiftID: this.currentShipChosed,\n            dayChosed: this.currentdayChosed,\n            withdrawID: this.currentWidrawID,\n            alterID: this.currentAlterID,\n        });\n    }\n\n    getDayInWeek(date) {\n        const d = new Date(date);\n    \n        const weekday = new Array(7);\n        weekday[0] = \"Sunday\";\n        weekday[1] = \"Monday\";\n        weekday[2] = \"Tuesday\";\n        weekday[3] = \"Wednesday\";\n        weekday[4] = \"Thursday\";\n        weekday[5] = \"Friday\";\n        weekday[6] = \"Saturday\";\n    \n        return weekday[d.getDay()];\n    }\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \n                    title=\"Update Change TimeKeeper\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            Real Date\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"date\" \n                                            name='realDate'\n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.realDate}\n                                            onChange={(event) => {\n                                                console.log(\"new Date\",event.target.value)\n                                                this.currentdayChosed = this.getDayInWeek(event.target.value);\n                                                this.setState({dayChosed: this.getDayInWeek(event.target.value)});\n                                            }}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Choose Day in week\n                                        </div>\n                                        <FormControl sx={{ minWidth: 120 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                value={this.currentdayChosed}\n                                                onChange={(event) => {\n                                                    this.currentdayChosed = event.target.value;\n                                                    this.setState({dayChosed: event.target.value});\n                                                }}\n                                                readOnly = {true}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    listDayInWeek.map((item) =>\n                                                        <MenuItem value={item.ID}>\n                                                            {item.name}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n\n                                    <Grid item md={8} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>\n                                            Choose Shift\n                                        </div>\n                                        <FormControl sx={{ minWidth: 220 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                value={this.currentShipChosed}\n                                                onChange={(event) => {\n                                                    this.currentShipChosed = event.target.value;\n                                                    this.setState({shiftID: event.target.value});\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\n                                                    : this.props.listShift.map((shift) =>\n                                                        <MenuItem value={shift._id.shiftID}>\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Widraw Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                value={this.currentWidrawID}\n                                                onChange={(event) => {\n                                                    this.currentWidrawID = event.target.value;\n                                                    this.setState({withdrawID: event.target.value});\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Alter Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                value={this.currentAlterID}\n                                                onChange={(event) => {\n                                                    this.currentAlterID = event.target.value;\n                                                    this.setState({alterID: event.target.value});\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        !(this.currentWidrawID == item._id.employeeID) ?\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                        : null\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.updateChange()}>\n                                            Add Change\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listShift: state.listShift,\n        listEmployee: state.listEmployee,\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\n        updateNextWeekTimeKeepingValue: state.updateNextWeekTimeKeepingValue,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeUpdateNextWeekTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        addNewChange: (data) => {\n            dispatch({\n                type: \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\",\n                data: data,\n            });\n        },\n        \n        changeUpdateNextWeekTimeKeeping: (data, indexOfData) => {\n            dispatch({\n                type: \"UPDATE_NEXT_WEEK_TIMEKEEPER\",\n                data: data,\n                index: indexOfData,\n            });\n        },\n        deleteNextWeekTimeKeeping: (data) => {\n            dispatch({\n              type: \"DELETE_NEXT_WEEK_TIMEKEEPER\",\n              data: data\n            });\n            console.log(\"data\", data)\n          },\n        \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateNextWeekTimeKeepingModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/NoJobEmployee.js",["855","856","857","858","859","860"],"import React, { Component } from 'react';\nimport { Table, TableCell, TableContainer, TableRow, TableHead, Paper} from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nvar listUsers = [];\n\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '20px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '80px',\n    } \n})\n\nclass NoJobEmployee extends Component {\n\n    genID = 0;\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n        };\n        listUsers = [];\n    }\n\n    cancel = () => {\n        this.props.changeAddEmployeeStatus();\n    }\n\n    addEmployee = () => {\n        this.addEmployeeToDatabase();\n        this.props.changeAddEmployeeStatus();\n    }\n\n    findEmployeeInAssign(employeeID)\n    {\n        var shiftAssign = this.props.listShiftAssign;\n        for(var i = 0 ; i < shiftAssign.length; i++)\n        {\n            if(shiftAssign[i]._id.employee._id.employeeID == employeeID)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div style={{padding: 24}}>\n                <span style={{backgroundColor: 'blue', color: '#fff', padding: 10}}>\n                    NOJOB EMPLOYEE\n                </span>\n               \n                <TableContainer component={Paper} style={{width: 400}} >\n                    <Table>\n                        <TableHead>\n                                <TableRow>\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\" style={{height: 30}}>ID</TableCell>\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Employee</TableCell>\n                                </TableRow>\n                        </TableHead>\n                        {\n\n                            this.props.listEmployee.employees.map((item) => \n                                !this.findEmployeeInAssign(item._id.employeeID)\n                                ?<TableRow>\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\" style={{height: 30}}>{item._id.employeeID}</TableCell>\n                                    <TableCell className={classes.goodTable_Cell_Header} align=\"center\">{item.firstName + ' ' + item.lastName}</TableCell>\n                                </TableRow>\n                                :(null)\n                            )\n                        }\n                        \n                    </Table>\n                </TableContainer>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listEmployee: state.listEmployee,\n        listShiftAssign: state.listShiftAssign,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles, {withTheme: true})(NoJobEmployee));\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/TimekeepingTable.js",["861","862","863","864","865"],"import {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { withStyles } from '@material-ui/styles';\n// material\nimport { Paper, TableContainer, Table, TableHead, TableCell, TableRow, Button} from '@mui/material';\nimport { AiOutlineEdit, AiFillDelete } from \"react-icons/ai\";\n// ----------------------------------------------------------------------\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    } \n})\n\nclass TimeKeepingTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: 'false'\n    }\n    this.getAllTimeKeeping()\n  }\n\n    async getAllTimeKeeping()\n    {\n        var result = [];\n        const data = {\n          token: localStorage.getItem('token'),\n          filter: {\n              \"_id.storeID\": this.props.infoUser.email,\n          }   \n        }\n        await axios.get(`http://localhost:5000/api/employee/time-keeping`, {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n                // console.log(\"điểm danh\", res.data.data);\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err)\n            })\n        // To redux\n        this.props.getTimeKeeping(result);\n    }\n\n  getShiftInforByID(shiftID)\n  {\n      var listShift = this.props.listShift;\n      for(var i = 0 ; i < listShift.length; i++)\n      {\n        if(listShift[i]._id.shiftID == shiftID)\n        {\n            return listShift[i].name + ' (' + listShift[i].timeFrom + '-' + listShift[i].timeEnd + ')';\n        }\n      }\n      return \"Can't get shift\";\n  }\n\n  getEmployeeFullNameByID(employeeID)\n  {\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n      {\n          var currentEmployee = this.props.listEmployee.employees[i];\n          if(currentEmployee._id.employeeID==employeeID)\n          {\n            return currentEmployee.lastName + ' ' + currentEmployee.firstName;\n          }\n      }\n      return \"Can't get name\";\n  }\n  render() {\n    const { classes } = this.props;\n    return ( \n      <div style={{marginTop: 0, padding: 24}}> \n          <span\n              style={{\n                  color: '#fff',\n                  backgroundColor: 'blue',\n                  padding: 10,\n              }}\n          >ALL TIMEKEEPING</span>\n          <TableContainer component={Paper}>\n                <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='180px'>Day</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='80px'>Date Of Week</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" >Shift</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Paid</TableCell>\n                            {/* <TableCell className={classes.goodTable_Cell_Header} align=\"center\"></TableCell> */}\n                        </TableRow>\n                        {\n                            this.props.listTimeKeeper.map((timeKeeper)=>\n                                (\n                                  <TableRow>\n                                    <TableCell className={classes.goodTable_Cell}>\n                                        {timeKeeper._id.realDate.substring(0,timeKeeper._id.realDate.indexOf('T') )}\n                                    </TableCell>\n                                    <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.dateInWeek}</TableCell>\n                                    <TableCell className={classes.goodTable_Cell}>\n                                        {timeKeeper._id.shiftType.name + \" (\"+ timeKeeper._id.shiftType.timeFrom + \n                                          ' - '+  timeKeeper._id.shiftType.timeEnd +')'}\n                                      </TableCell>\n                                    <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.employee._id.employeeID}</TableCell>\n                                    <TableCell className={classes.goodTable_Cell}>\n                                        {timeKeeper._id.employee.firstName + \" \" + timeKeeper._id.employee.lastName}\n                                    </TableCell>\n                                    <TableCell className={classes.goodTable_Cell}>\n                                        {timeKeeper.isPaidSalary.toString()}\n                                    </TableCell>\n                                    {/* <TableCell className={classes.goodTable_Cell}>\n                                      <div style={{display: 'flex'}}>\n                                        <AiOutlineEdit size={20} \n                                            onClick={() =>\n                                              {\n                                                this.props.changeUpdateTimeKeepingStatus();\n                                                this.props.changeUpdateTimeKeepingValue(timeKeeper);\n                                              }\n                                            }\n                                          />\n                                          <AiFillDelete size={20} \n                                            onClick={() => \n                                                {\n                                                    // axios.delete(`http://localhost:5000/api/????`,{data: data})\n                                                    //   .then(res => {\n                                                    //       alert(\"success\");\n                                                    //   })\n                                                    //   .catch(err => {\n                                                    //       alert(err);\n                                                    //   })\n                                                    this.props.deleteTimeKeeping(timeKeeper);\n                                                    console.log(this.props.listTimeKeeper);\n                                                }\n                                                \n                                              // this.props.changeUpdateNextWeekTimeKeepingStatus();\n                                              \n                                              // this.props.changeUpdateNextWeekTimeKeepingValue(item);\n                                            }\n                                        />\n                                      </div>\n                                    </TableCell> */}\n                                </TableRow>\n                                )\n                            )\n                        }\n                    </TableHead>\n                </Table>\n          </TableContainer>\n            {/* <Button \n                variant=\"contained\"\n                onClick={() => this.props.changeAddTimeKeepingStatus()}\n            >\n              Add\n            </Button> */}\n      </div>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n      listTimeKeeper: state.listTimeKeeping,\n      listShift: state.listShift,\n      listEmployee: state.listEmployee,\n      infoUser: state.infoUser\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    changeAddTimeKeepingStatus: () => {\n      dispatch({\n          type: \"CHANGE_ADD_TIMEKEEPING_STATUS\",\n      });\n    },\n    changeUpdateTimeKeepingStatus: () => {\n      dispatch({\n          type: \"CHANGE_UPDATE_TIMEKEEPING_STATUS\",\n      });\n    },\n    changeUpdateTimeKeepingValue: (data) => {\n      dispatch({\n        type: \"SET_UPDATE_TIMEKEEPER_VALUE\",\n        data: data\n      });\n    },\n    deleteTimeKeeping: (data) => {\n      console.log(\"data\", data)\n      dispatch({\n        type: \"DELETE_TIMEKEEPER\",\n        data: data\n      });  \n    },\n    getTimeKeeping: (data) => {\n      dispatch({\n        type: \"GET_TIMEKEEPER\",\n        data: data\n      });  \n    },\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(TimeKeepingTable));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/ChangePassword.js",["866","867","868"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, Button, CardContent } from '@mui/material';\nimport axios from 'axios';\nimport {connect} from 'react-redux'\nimport { FaCommentsDollar } from 'react-icons/fa';\nvar bcrypt = require('bcryptjs');\n\nclass ChangePassword extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isCurPass: false,\n            isNewPass: false,\n            isRePass: false,\n            isChangePass: false,\n        }\n    }\n\n    messCurPass = \"\"\n    messNewPass = \"\"\n    messRePass = \"\"\n    curPass = \"\"\n    newPass = \"\"\n    rePass = \"\"\n\n    // Gọi api change password\n    changePassword = async () => {\n        if(this.props.role == false){ \n            if(this.curPass != this.props.infoUser.password)\n            {\n                this.props.hideAlert();\n                this.props.showAlert(\"Not a correct pass\", \"error\");\n                return;\n            }\n            const data = {\n                token: localStorage.getItem('token'),\n                employee: {\n                    _id: {\n                        employeeID: this.props.infoUser.employeeID,\n                        storeID: this.props.infoUser.managerID,\n                    },\n                    managerID: this.props.infoUser.managerID,\n                    password: this.newPass,\n                    firstName: this.props.infoUser.firstName,\n                    lastName: this.props.infoUser.lastName,\n                    phoneNumber: this.props.infoUser.tel,\n                    email: this.props.infoUser.email,\n                    address: this.props.infoUser.address,\n                    cardID: this.props.infoUser.cardID,\n                }   \n            }\n            axios.put(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                this.props.hideAlert();\n                this.props.showAlert(\"Change password success\", \"success\");\n                this.props.setEmployeePass(this.newPass);\n            })\n            .catch(err => {\n            })\n        }\n        else {\n            const form = document.getElementById('form-change-password');\n            const data = {\n                token: localStorage.getItem('token'),\n                email: this.props.infoUser.email,\n                curPass: this.curPass,\n                newPass: this.hash(this.newPass),\n            }\n            await axios.post(`http://localhost:5000/api/profile/change-password`,data)\n            .then(res => {\n                if (res.data.status === -1) {\n                    this.props.hideAlert();\n                    this.props.showAlert(res.data.message, \"error\");\n                } else {\n                    form.reset();\n                    localStorage.setItem('token', res.data.token);\n                    this.props.hideAlert();\n                    this.props.showAlert(\"Change password success\", \"success\");\n                }\n            })\n            .catch(err => {\n                this.props.changeLoginStatus();\n                this.props.hideAlert();\n                this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n            })\n        }\n        \n    }\n\n    // hash\n    hash = (pass) => {\n        var hash = bcrypt.hashSync(pass, 12)\n        return hash;\n    }\n\n    // Handele : blur, change\n    blurCurPassword = (e) => {\n        this.curPass= e.target.value;\n        if (e.target.value === \"\") {\n            this.setState({\n                isCurPass: false,\n                isChangePass: false,\n            })\n            return;\n        } else if (e.target.value.length < 6) {\n            this.messCurPass = \"Enter at least 6 characters\";\n            this.setState({\n                isCurPass: true,\n                isChangePass: false,\n            })\n        } else {\n            this.messCurPass = \"\";\n            this.setState({\n                isCurPass: false,\n            })\n            if(this.newPass.length>5 && this.newPass === this.rePass){\n                this.setState({\n                    isChangePass: true,\n                })\n            }\n        }\n    }\n\n    blurNewPassword = (e) => {\n        this.blurRePassword(e);\n        this.newPass = e.target.value;\n        if (e.target.value === \"\") {\n            this.setState({\n                isNewPass: false,\n                isChangePass: false,\n            })\n            return;\n        } else if (e.target.value.length < 6) {\n            this.messNewPass = \"Enter at least 6 characters\";\n            this.setState({\n                isNewPass: true,\n            })\n        } else {\n            this.messCurPass = \"\";\n            this.setState({\n                isNewPass: false,\n            })\n            this.blurRePassword(e);\n            if (this.rePass === this.newPass && this.curPass.length > 5){\n                this.setState({\n                    isChangePass: true,\n                })\n            }\n        }\n    }\n\n    blurRePassword = (e) => {\n        this.rePass = document.querySelector('input[name=\"re-password\"]').value\n        if (this.rePass !== this.newPass) {\n            this.messRePass = \"Re-password not correct\";\n            this.setState({\n                isRePass: true,\n                isChangePass: false,\n            })\n        } else {\n            this.messRePass = \"\";\n            this.setState({\n                isRePass: false,\n            })\n            if (this.rePass === this.newPass && this.curPass.length > 5){\n                this.setState({\n                    isChangePass: true,\n                })\n            }\n        }\n    }\n\n    render() {\n        return (\n            <form id=\"form-change-password\" style={{marginBottom: '15px', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: !this.props.statusDarkmode? '#0091ea' :'white', backgroundColor: !this.props.statusDarkmode? '#efeeef' :'#455a64'}} title=\"Change Password\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    variant=\"standard\"\n                                    fullWidth\n                                    name=\"cur-password\"\n                                    label=\"Current password\"\n                                    onBlur={(e) => this.blurCurPassword(e)}\n                                    error={this.state.isCurPass}\n                                    helperText={this.messCurPass}\n                                    type=\"password\"\n                                    required\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    fullWidth\n                                    label=\"New password\"\n                                    name=\"new-password\"\n                                    required\n                                    onBlur={(e) => this.blurNewPassword(e)}\n                                    error={this.state.isNewPass}\n                                    helperText={this.messNewPass}\n                                    type=\"password\"\n                                    variant=\"standard\"\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <TextField\n                                    fullWidth\n                                    label=\"New password again\"\n                                    onBlur={(e) => this.blurRePassword(e)}\n                                    error={this.state.isRePass}\n                                    helperText={this.messRePass}\n                                    name=\"re-password\"\n                                    required\n                                    type=\"password\"\n                                    variant=\"standard\"\n                                />\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'flex-end', p: 2 }}>\n                        <Button color=\"primary\" disabled={!this.state.isChangePass} onClick={() => this.changePassword()} variant=\"contained\">Change</Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        infoUser: state.infoUser,\n        statusDarkmode: state.statusDarkmode,\n        role: state.role,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        changeLoginStatus: () => {\n            dispatch({\n                type: \"CHANGE_LOGIN_STATUS\",\n            });\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        setEmployeePass: (password) => {\n            dispatch({\n                type: \"SET_EMPLOYEE_PASS\",\n                password: password\n            })\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChangePassword);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddNextWeekTimeKeeping.js",["869","870","871","872","873","874","875","876","877","878","879","880","881","882","883","884","885"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, \n        Box, CardContent, Button, InputLabel, FormControl, Select, MenuItem } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nvar listDayInWeek = [\n    {ID:'Monday',name:'Thứ hai'}, \n    {ID:'Tuesday',name:'Thứ ba'}, \n    {ID:'Wednesday',name:'Thứ tư'}, \n    {ID:'Thursday',name:'Thứ năm'}, \n    {ID:'Friday',name:'Thứ sáu'}, \n    {ID:'Saturday',name:'Thứ bảy'}, \n    {ID:'Sunday',name:'Chủ nhật'}\n];\nclass AddNextWeekTimeKeepingModal extends Component {\n\n    genID = 0;\n    dayChosed = '';\n    constructor(props) {\n        super(props);\n        this.dayChosed = this.getDayInWeek(this.getCurrentDateTime());\n        this.state = {\n            change: false,\n            withdrawID: '',\n            alterID: '',\n            dayChosed: this.getDayInWeek(this.getCurrentDateTime()),\n            shiftID: '',\n        };\n        \n    }\n\n    cancel = () => {\n        this.props.changeAddNextWeekTimeKeepingStatus();\n    }\n\n    addEmployee = () => {\n        this.addEmployeeToDatabase();\n        this.props.changeAddEmployeeStatus();\n    }\n\n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    isGreater(dateString1, dateString2){\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\n    }\n\n    checkContraint() {\n        if(this.state.dayChosed.length == 0)\n        {\n            alert(\"Chưa chọn ngày nào trong tuần\");\n            return false;\n        }\n        if(this.state.shiftID.length == 0)\n        {\n            alert(\"Chưa chọn ca nào\");\n            return false;\n        }\n        console.log(this.state.withdrawID );\n        if( this.state.withdrawID == undefined || this.state.withdrawID.length == 0)\n        {\n            alert(\"Chưa chọn nhân viên nào nghỉ\"); \n            return false;\n        }\n        if(this.state.alterID== undefined || this.state.alterID.length == 0)\n        {\n            alert(\"Chưa chọn nhân viên nào thay thế\");\n            return false;\n        }\n        if(!this.isGreater(document.querySelector('input[name=\"realDate\"]').value, this.getCurrentDateTime() ))\n        {\n            alert(\"Ngày nhập phải nhỏ hơn ngày báo nghỉ\");\n            return false;\n        }   \n\n        // Có CSDL thì báo xem có trùng với cái cũ ko nữa\n        \n        alert(\"Đã check hết constraint\");\n        return true;\n    }\n    getDayInWeek(date) {\n        const d = new Date(date);\n    \n        const weekday = new Array(7);\n        weekday[0] = \"Sunday\";\n        weekday[1] = \"Monday\";\n        weekday[2] = \"Tuesday\";\n        weekday[3] = \"Wednesday\";\n        weekday[4] = \"Thursday\";\n        weekday[5] = \"Friday\";\n        weekday[6] = \"Saturday\";\n    \n        return weekday[d.getDay()];\n    }\n\n    async addChange() {\n        if(this.checkContraint()==false) return ;\n        const data1 = {\n            token: localStorage.getItem('token'),\n            offDay: {\n                _id: {\n                    dateInWeek: this.state.dayChosed,\n                    storeID: this.props.infoUser.email,\n                    shiftType: {\n                        _id: {\n                            shiftID: this.state.shiftID,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    employee: {\n                        _id: {\n                            employeeID: this.state.withdrawID,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\n                },\n                alternativeEmployee: {\n                    _id: {\n                        employeeID: this.state.alterID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n                \n            }\n        };\n        await axios.post(`http://localhost:5000/api/employee/off-day`, data1)\n          .then(res => {\n              console.log(\"Save success\");\n              alert(\"Lưu thành công\")\n              const data = {\n                _id: {\n                    dateInWeek: this.state.dayChosed,\n                    storeID: this.props.infoUser.email,\n                    shiftType: {\n                        _id: {\n                            shiftID: this.state.shiftID,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    employee: {\n                        _id: {\n                            employeeID: this.state.withdrawID,\n                            storeID: this.props.infoUser.email,\n                        },\n                    },\n                    realDate: document.querySelector('input[name=\"realDate\"]').value,\n                },\n                alternativeEmployee: {\n                    _id: {\n                        employeeID: this.state.alterID,\n                        storeID: this.props.infoUser.email,\n                    },\n                },\n                \n            };\n            \n            this.props.addNewChange(data);\n            console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\n            this.props.changeAddNextWeekTimeKeepingStatus();\n          })\n          .catch(err => {\n                console.log(\"err.response.data.message\", err.response.data.message);\n                if(err.response.data.message)\n                {\n                    alert(err.response.data.message);\n                }\n                console.log(err);\n          })\n        \n        // console.log(this.props.nextWeekTimeKeeping)\n\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} \n                    title=\"Change NextWEEK TimeKeeper\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            Real Date\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"date\" \n                                            name='realDate'\n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.getCurrentDateTime()}\n                                            onChange={(event) => {\n                                                this.dayChosed = this.getDayInWeek(event.target.value);\n                                                this.setState({dayChosed: this.getDayInWeek(event.target.value)});\n                                            }}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Choose Day in week\n                                        </div>\n                                        <FormControl sx={{ minWidth: 120 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                value={this.dayChosed}\n                                                onChange={(event) => {\n                                                    this.dayChosed = event.target.value;\n                                                    this.setState({dayChosed: event.target.value});\n\n                                                }}\n                                                readOnly={true}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    listDayInWeek.map((item) =>\n                                                        <MenuItem value={item.ID}>\n                                                            {item.name}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n\n                                    <Grid item md={8} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>\n                                            Choose Shift\n                                        </div>\n                                        <FormControl sx={{ minWidth: 220 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({shiftID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listShift.length== 0 ? <MenuItem value={'none'}>None</MenuItem>\n                                                    : this.props.listShift.map((shift) =>\n                                                        <MenuItem value={shift._id.shiftID}>\n                                                            {shift.name + ' (' + shift.timeFrom + ' - ' + shift.timeEnd + ')'}\n                                                        </MenuItem>\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Widraw Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({withdrawID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        !(this.state.alterID == item._id.employeeID) ?\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                        : null\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={12} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '220px'}}>\n                                            Alter Employee\n                                        </div>\n                                        <FormControl sx={{ minWidth: 320 }}>\n                                            {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                            <Select\n                                                // value={this.state.type}\n                                                onChange={(event) => {\n                                                    this.setState({alterID: event.target.value});\n                                                    // if(!typeSet.includes(event.target.value))\n                                                    // {\n                                                    //     typeSet.push(event.target.value);\n                                                    // }\n                                                    // this.setState({change: !this.state.change})\n                                                }}\n                                                style={{\n                                                    height: 36,\n                                                }}\n                                            >\n                                                {\n                                                    this.props.listEmployee.employees.map((item) =>\n                                                        !(this.state.withdrawID == item._id.employeeID) ?\n                                                        <MenuItem value={item._id.employeeID}>\n                                                            {item._id.employeeID + ' - ' + item.firstName + ' ' + item.lastName}\n                                                        </MenuItem>\n                                                        : null\n                                                    )\n                                                }   \n                                            </Select> \n                                        </FormControl>\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.addChange()}>\n                                            Add Change\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listShift: state.listShift,\n        listEmployee: state.listEmployee,\n        nextWeekTimeKeeping: state.nextWeekTimeKeeping,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddNextWeekTimeKeepingStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        addNewChange: (data) => {\n            dispatch({\n                type: \"ADD_NEW_NEXT_WEEK_TIMEKEEPER\",\n                data: data,\n            });\n        } \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddNextWeekTimeKeepingModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/FixedCalendar.js",["886"],"import {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { withStyles } from '@material-ui/styles';\n// material\nimport { Paper, TableContainer, Table, TableHead, TableCell, TableRow, Button } from '@mui/material';\nimport FixedTableCell from './FixedCalendarCell';\n\n// ----------------------------------------------------------------------\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '80px',\n    } \n})\n\nclass FixedCalendar extends Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: 'false'\n    }\n    this.getAllShiftAssign();\n  }\n  async getAllShiftAssign()\n  {\n    var result = [];\n    const data = {\n      token: localStorage.getItem('token'),\n      filter: {\n          \"_id.storeID\": this.props.infoUser.email,\n      }   \n    }\n    await axios.get(`http://localhost:5000/api/employee/shift-assign`, {\n        params: {...data}\n    })\n        .then(res => {\n            result = res.data.data;\n            this.props.setShiftAssign(result);\n        })\n        .catch(err => {\n            console.log(err);\n            alert(err)\n        })\n  }\n  \n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div style={{marginTop: 10, padding: 24, maxHeight: 600}}> \n          <TableContainer component={Paper}>\n              <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n                  <TableHead>\n                      <TableRow>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>\n                                Shift\n                            </TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Mon</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Tue</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Wed</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Thu</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Fri</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Sat</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='12%'>Sun</TableCell>\n                      </TableRow>\n                  </TableHead>\n                      {\n                          this.props.listShift.map((shift) => \n                          (\n                              <TableRow>\n                                  <TableCell className={classes.goodTable_Cell} width={100}>{shift.timeFrom + '-' + shift.timeEnd}</TableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Monday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Tuesday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Wednesday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Thursday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Friday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Saturday'}></FixedTableCell>\n                                  <FixedTableCell shiftID = {shift._id.shiftID} dayIndex = {'Sunday'}></FixedTableCell>\n                              </TableRow>\n                          ))\n                      }\n              </Table>\n          </TableContainer>\n      </div>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        listShift: state.listShift,\n        infoUser: state.infoUser,\n        listShiftAssign: state.listShiftAssign,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n      setShiftAssign: (data) => {\n          dispatch({\n              type: \"SET_SHIFT_ASSIGN\",\n              data: data,\n          });\n      }\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(FixedCalendar));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UnShiftEmployee.js",["887","888","889","890","891","892","893","894","895","896","897"],"import {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Icon } from '@iconify/react';\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\nimport { withStyles } from '@material-ui/styles';\nimport '../../css/EmployeeManager.css'\n// material\nimport { Paper, TableContainer, Table, \n  TableHead, TableCell, TableRow, Button,\n  Menu, MenuItem, Grid\n} from '@mui/material';\nimport { AiOutlineEdit, AiFillDelete } from \"react-icons/ai\";\n// ----------------------------------------------------------------------\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    } \n})\n\nclass UnShiftEmployee extends Component {\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: false\n    }\n    this.getAllNextWeekTimeKeeping();\n    console.log(\"nextweek\", this.props.nextWeekTimeKeeping);\n  }\n\n  async getAllNextWeekTimeKeeping()\n  {\n    var result = [];\n    const data = {\n      token: localStorage.getItem('token'),\n      filter: {\n          \"_id.storeID\": this.props.infoUser.email,\n      }   \n    }\n    await axios.get(`http://localhost:5000/api/employee/off-day`, {\n        params: {...data}\n    })\n        .then(res => {\n            result = res.data.data;\n            console.log(\"Báo nghỉ\", res.data.data);\n            this.props.getEmployeeDayOff(result);\n        })\n        .catch(err => {\n            console.log(err);\n            alert(err)\n        })\n  }\n\n  findShift(shiftID) {\n      var shifts= this.props.listShift;\n        for(var i = 0 ; i < shifts.length ; i++)\n        {\n            if(shifts[i]._id.shiftID == shiftID)\n            {\n                return true;\n            }\n        }\n        return false;\n  }\n\n  getShiftNameAndTime(shiftID)\n  {\n      var shifts= this.props.listShift;\n      for(var i = 0 ; i < shifts.length ; i++)\n      {\n          if(shifts[i]._id.shiftID == shiftID)\n          {\n              return shifts[i].name + ' (' + shifts[i].timeFrom + ' - ' + shifts[i].timeEnd +') ';\n          }\n      }\n      return \"Can't get shift\";\n  }\n\n  getEmployeeNameByID(employeeID)\n  {\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n      {\n          var currentEmployee = this.props.listEmployee.employees[i];\n          if(currentEmployee._id.employeeID==employeeID)\n          {\n            return currentEmployee.firstName;\n          }\n      }\n      return \"This employee was sacked\";\n  }\n\n  reload()\n  {\n    this.setState({change: !this.state.change})\n  }\n\n  openOption = false;\n\n  handleClose ()\n  {\n      this.openOption = false;\n      this.setState({change: !this.state.change});\n  }\n\n  handleOpen()\n  {\n      this.openOption = true;\n      alert(\"Ấn vào mở rồi\")\n      this.setState({change: !this.state.change});\n  }\n\n  findEmployeeNameByID(employeeID)\n  {\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n      {\n          var currentEmployee = this.props.listEmployee.employees[i];\n          if(currentEmployee._id.employeeID==employeeID)\n          {\n            return true;\n          }\n      }\n      return false;\n  }\n\n  render() {\n    const { classes } = this.props;\n    return (\n      <div style={{marginTop: 0, padding: 24}}>\n          <span\n              style={{\n                  color: '#fff',\n                  backgroundColor: 'blue',\n                  padding: 10,\n              }}\n          >CHANGE TIMEKEEPING</span> \n          <TableContainer component={Paper} >\n                <Table className={classes.goodTable} size=\"small\" aria-label=\"a dense table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='80px' rowSpan={2}>Day</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" rowSpan={2}>Shift</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" rowSpan={2}>Real Date</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" colSpan={2}>Withdraw</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\" colSpan={2}>Change</TableCell>\n                        </TableRow>\n                        <TableRow>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\n                            <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\n                        </TableRow>\n                        {\n                          this.props.nextWeekTimeKeeping.map((item) =>\n                          // this.findEmployeeNameByID(item._id.employee._id.employeeID) == false \n                          // || this.findEmployeeNameByID(item.alternativeEmployee._id.employeeID) == false\n                          this.findShift(item._id.shiftType._id.shiftID) == false\n                          ? (null) :\n                          <TableRow\n                              style={{\n                                position: 'relative',\n                              }}\n                          >\n                              <TableCell className={classes.goodTable_Cell}>{item._id.dateInWeek}</TableCell>\n                              <TableCell className={classes.goodTable_Cell}>{this.getShiftNameAndTime(item._id.shiftType._id.shiftID)}</TableCell>\n                              <TableCell className={classes.goodTable_Cell}>\n                                  {item._id.realDate ? item._id.realDate.indexOf('T') !=-1 ? item._id.realDate.substring(0,item._id.realDate.indexOf('T') ) : item._id.realDate : \"Loading...\"}\n                              </TableCell>\n                              <TableCell className={classes.goodTable_Cell}>{item._id.employee._id.employeeID}</TableCell>\n                              <TableCell className={classes.goodTable_Cell}>{this.getEmployeeNameByID(item._id.employee._id.employeeID)}</TableCell>\n                              <TableCell className={classes.goodTable_Cell}>{item.alternativeEmployee._id.employeeID}</TableCell>\n                              <TableCell className={classes.goodTable_Cell} style={{\n                                backgroundColor: this.findEmployeeNameByID(item.alternativeEmployee._id.employeeID) ? '#fff' :'#ff6057' \n                              }}>{this.getEmployeeNameByID(item.alternativeEmployee._id.employeeID)}</TableCell>\n                              <TableCell width={60} className={classes.goodTable_Cell} >\n                                  <div style={{display: 'flex'}}>\n                                      <AiOutlineEdit size={20} \n                                        onClick={() =>\n                                          {\n                                            this.props.changeUpdateNextWeekTimeKeepingStatus();\n                                            this.props.changeUpdateNextWeekTimeKeepingValue(item);\n                                          }\n                                        }\n                                      />\n                                      <AiFillDelete size={20} \n                                          onClick={() => \n                                              {\n                                                  const data = {\n                                                      token: localStorage.getItem('token'),   \n                                                      offDay: {\n                                                          _id: item._id\n                                                      }\n                                                  }\n                                                  console.log(\"data.offDay._id\", data.offDay._id)\n                                                  axios.delete(`http://localhost:5000/api/employee/off-day`,{data: data})\n                                                    .then(res => {\n                                                        alert(\"success\");\n                                                    })\n                                                    .catch(err => {\n                                                        alert(err);\n                                                    })\n                                                  this.props.deleteNextWeekTimeKeeping(item);\n                                              }\n                                            // this.props.changeUpdateNextWeekTimeKeepingStatus();\n                                            \n                                            // this.props.changeUpdateNextWeekTimeKeepingValue(item);\n                                          }\n                                      />\n                                    </div>      \n                              </TableCell> \n                          </TableRow> \n                          )\n                        }\n                    </TableHead>\n                    \n                </Table>\n            </TableContainer>\n              \n            <Button \n              variant=\"contained\"\n              onClick={() => this.props.changeAddNextWeekTimeKeepingStatus()}\n            >\n              Add</Button>\n      </div>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    nextWeekTimeKeeping: state.nextWeekTimeKeeping,\n    listEmployee: state.listEmployee,\n    listShift: state.listShift,\n    infoUser: state.infoUser,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    changeAddNextWeekTimeKeepingStatus: () => {\n      dispatch({\n          type: \"CHANGE_ADD_NEXTWEEK_TIMEKEEPING_STATUS\",\n      });\n    },\n    changeUpdateNextWeekTimeKeepingStatus: () => {\n      dispatch({\n          type: \"CHANGE_UPDATE_NEXTWEEK_TIMEKEEPING_STATUS\",\n      });\n    },\n    changeUpdateNextWeekTimeKeepingValue: (data) => {\n      dispatch({\n        type: \"SET_UPDATE_NEXT_WEEK_TIMEKEEPER_VALUE\",\n        data: data\n      });\n    },\n    deleteNextWeekTimeKeeping: (data) => {\n      dispatch({\n        type: \"DELETE_NEXT_WEEK_TIMEKEEPER\",\n        data: data\n      });\n      console.log(\"data\", data)\n    },\n    getEmployeeDayOff: (data) => {\n      dispatch({\n        type: \"SET_NEXT_WEEK_TIMEKEEPER\",\n        data: data\n      });\n    }\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(UnShiftEmployee));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/RecieptManager/TableReciept.js",["898","899","900","901","902","903","904","905","906","907","908","909","910","911"],"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Collapse from '@mui/material/Collapse';\nimport IconButton from '@mui/material/IconButton';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport { Grid, Box, Button, Checkbox, Modal } from '@mui/material';\nimport { red, lightBlue } from '@mui/material/colors';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport { useSelector, useDispatch } from 'react-redux'\nimport axios from 'axios';\nimport { FiXSquare } from 'react-icons/fi'\nimport { TiArrowBack } from 'react-icons/ti'\n\nfunction Row(props) {\n    const { row } = props;\n    const [open, setOpen] = React.useState(false);\n    const [openModal, setOpenModal] = React.useState(false);\n    const statusSelectAll = useSelector(state => state.statusSelectAll)\n    const infoUser = useSelector(state => state.infoUser)\n    const dispatch = useDispatch();\n    const [statusSelectReplace, setStatusSelectReplace] = React.useState(false);\n\n    const style = {\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n        width: 400,\n        bgcolor: 'background.paper',\n        border: '1px solid #000',\n        borderRadius: '5px',\n        boxShadow: 24,\n        pt: 2,\n        px: 4,\n        pb: 3,\n    };\n\n    React.useEffect(() => {\n        setStatusSelectReplace(statusSelectAll)\n    }, [statusSelectAll])\n\n    const countQuantity = () => {\n        let count = 0;\n        row.listProduct.map(value => {\n            count += value.quantity;\n        })\n        return count;\n    }\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    //Xoa mềm\n    const DeleteReciept = (MAHD, isDelete) => {\n        if (isDelete) {\n            setOpenModal(true)\n        } else {\n            axios.post('http://localhost:5000/api/sell-product/soft-delete', {\n                token: localStorage.getItem('token'),\n                email: infoUser.email,\n                MAHD: MAHD\n            })\n                .then(res => {\n                    if (res.data.status === 1) {\n                        localStorage.setItem('token', res.data.token)\n                        dispatch({\n                            type: \"DELETE_RECIEPT\",\n                            MAHD: MAHD,\n                        })\n                        dispatch({\n                            type: \"HIDE_ALERT\",\n                        })\n                        dispatch({\n                            type: \"SHOW_ALERT\",\n                            message: 'Delete success',\n                            typeMessage: 'success',\n                        })\n                    }\n                })\n                .catch(err => {\n                    dispatch({\n                        type: \"CHANGE_LOGIN_STATUS\",\n                    });\n                    dispatch({\n                        type: \"HIDE_ALERT\",\n                    })\n                    dispatch({\n                        type: \"SHOW_ALERT\",\n                        message: 'Login timeout, signin again',\n                        typeMessage: 'warning',\n                    })\n                })\n            setOpen(!open)\n        }\n    }\n\n    // Xóa vĩnh viễn\n    const PermanentlyDelete = async (MAHD) => {\n        axios.post('http://localhost:5000/api/sell-product/permanently-delete', {\n            token: localStorage.getItem('token'),\n            email: infoUser.email,\n            MAHD: MAHD\n        })\n            .then(res => {\n                if (res.data.status === 1) {\n                    localStorage.setItem('token', res.data.token)\n                    dispatch({\n                        type: \"DELETE_ONE_RECIEPT\",\n                        MAHD: MAHD,\n                    })\n                    dispatch({\n                        type: \"HIDE_ALERT\",\n                    })\n                    dispatch({\n                        type: \"SHOW_ALERT\",\n                        message: 'Delete success',\n                        typeMessage: 'success',\n                    })\n                }\n            })\n            .catch(err => {\n                dispatch({\n                    type: \"CHANGE_LOGIN_STATUS\",\n                });\n                dispatch({\n                    type: \"HIDE_ALERT\",\n                })\n                dispatch({\n                    type: \"SHOW_ALERT\",\n                    message: 'Login timeout, signin again',\n                    typeMessage: 'warning',\n                })\n            })\n        setOpenModal(false)\n    }\n\n    const TypeReciept = (isEdit, isDelete, oldBill) => {\n        if (isDelete) {\n            return red[400]\n        } else if (isEdit) {\n            return '#f4f492'\n        } else if (oldBill) {\n            return '#00897b'\n        } else {\n            return '#a6ffa6'\n        }\n    }\n\n    const StatusTypeReciept = (isEdit, isDelete) => {\n        if (isDelete) {\n            return 'Đã xóa'\n        } else if (isEdit) {\n            return 'Đổi trả'\n        } else {\n            return 'Thành công'\n        }\n    }\n\n    const RestoneReciept = async (MAHD) => {\n        await axios.post('http://localhost:5000/api/sell-product/restone-receipt', {\n            token: localStorage.getItem('token'),\n            email: infoUser.email,\n            MAHD: MAHD\n        })\n            .then(res => {\n                localStorage.setItem('token', res.data.token)\n                if (res.data.status === 1) {\n                    dispatch({\n                        type: 'RESTONE_ONE_RECIEPT',\n                        MAHD: MAHD\n                    })\n                    dispatch({\n                        type: \"HIDE_ALERT\",\n                    })\n                    dispatch({\n                        type: \"SHOW_ALERT\",\n                        message: 'Restone success',\n                        typeMessage: 'success',\n                    })\n                }\n            })\n            .catch(err => {\n                dispatch({\n                    type: \"CHANGE_LOGIN_STATUS\",\n                });\n                dispatch({\n                    type: \"HIDE_ALERT\",\n                })\n                dispatch({\n                    type: \"SHOW_ALERT\",\n                    message: 'Login timeout, signin again',\n                    typeMessage: 'warning',\n                })\n            })\n        setOpen(false);\n    }\n\n    const label = { inputProps: { 'aria-label': 'Checkbox demo' } };\n\n    const ChangeCheckbox = (e, MAHD) => {\n        setStatusSelectReplace(!statusSelectReplace);\n        if (e.target.checked) {\n            dispatch({\n                type: \"ADD_MAHD_RECIEPT\",\n                MAHD: MAHD,\n            })\n        } else {\n            dispatch({\n                type: \"DELETE_MAHD_RECIEPT\",\n                MAHD: MAHD,\n            })\n        }\n    }\n\n    return (\n        <React.Fragment>\n            <TableRow style={{ backgroundColor: TypeReciept(row.isEdit, row.deleted, row.oldBill), borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: '#90a4ae #90a4ae transparent #90a4ae' }} sx={{ '& > *': { borderBottom: 'unset' } }}>\n                <TableCell>\n                    <Checkbox {...label} checked={statusSelectReplace} onChange={(e) => ChangeCheckbox(e, row.MAHD)} color=\"default\" />\n                </TableCell>\n                <TableCell>\n                    <IconButton\n                        aria-label=\"expand row\"\n                        size=\"small\"\n                        onClick={() => setOpen(!open)}\n                    >\n                        {open ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n                    </IconButton>\n                </TableCell>\n                <TableCell component=\"th\" scope=\"row\">\n                    {row.MAHD}\n                </TableCell>\n                <TableCell align=\"right\">{row.date}</TableCell>\n                <TableCell align=\"right\">{row.totalMoney.toLocaleString()}</TableCell>\n                <TableCell align=\"right\">{row.discount}</TableCell>\n                <TableCell align=\"right\">{row.totalFinalMoney.toLocaleString()}</TableCell>\n            </TableRow>\n            <TableRow style={{borderWidth: open ? '2px' : null, borderStyle: 'solid', borderColor: 'transparent #90a4ae #90a4ae #90a4ae' }}>\n                <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={12}>\n                    <Collapse in={open} timeout=\"auto\" unmountOnExit>\n                        <Box sx={{ margin: 1 }}>\n                            <Typography style={{ fontWeight: '600' }} variant=\"h6\" gutterBottom component=\"div\">\n                                Detail Recipet\n                            </Typography>\n                            <Grid container spacing={3}>\n                                <Grid item lg={6} md={12} sm={12} xs={12}>\n                                    <Table size=\"small\" aria-label=\"purchases\">\n                                        <TableHead>\n                                            <TableRow>\n\n                                                <TableCell>#</TableCell>\n                                                <TableCell>Name</TableCell>\n                                                <TableCell>Quantity</TableCell>\n                                                <TableCell align=\"right\">Price</TableCell>\n                                                <TableCell align=\"right\">Total Price</TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            {row.listProduct.map((value, key) => (\n                                                <TableRow key={value.name}>\n                                                    <TableCell>\n                                                        {key + 1}\n                                                    </TableCell>\n                                                    <TableCell>{value.product.name}</TableCell>\n                                                    <TableCell>{value.quantity}</TableCell>\n                                                    <TableCell align=\"right\">{value.product.sellPrice.toLocaleString()}</TableCell>\n                                                    <TableCell align=\"right\">\n                                                        {(value.quantity * value.product.sellPrice).toLocaleString()}\n                                                    </TableCell>\n                                                </TableRow>\n                                            ))}\n                                        </TableBody>\n                                    </Table>\n                                </Grid>\n                                <Grid style={{ borderLeft: '1px solid black', marginTop: '15px' }} item lg={6} md={12} sm={12} xs={12}>\n                                    <Grid container spacing={3}>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Mã hóa đơn:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.MAHD}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Trạng thái:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{StatusTypeReciept(row.isEdit, row.deleted)}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Thời gian:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.date}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Giờ:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.time}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Mã HD củ:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.oldBill ? row.oldBill.MAHD : \"Không có\"}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Người bán:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.name}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Tổng số lượng:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{countQuantity()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Tổng tiền hàng:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.totalMoney.toLocaleString()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Mã coupon:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.coupon? row.coupon.idCoupon : \"Không áp dụng\"}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Tiền giảm:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{(row.totalFinalMoney - row.totalMoney).toLocaleString()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid> \n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>Giảm giá (%):</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0' }}>{row.discount}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                        <Grid item md={6} xs={6}>\n                                            <Grid container>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>TỔNG:</p>\n                                                </Grid>\n                                                <Grid item md={6} xs={6}>\n                                                    <p style={{ marginBottom: '0', fontWeight: '600' }}>{row.totalFinalMoney.toLocaleString()}</p>\n                                                </Grid>\n                                            </Grid>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                                <Grid style={{ marginBottom: '10px' }} item md={12} xs={12}>\n                                    <Grid style={{ justifyContent: 'end' }} container>\n                                        {row.deleted ? (\n                                            <Grid style={{ justifyContent: 'end' }} item md={2} xs={2}>\n                                                <Button onClick={() => RestoneReciept(row.MAHD)} style={{ fontWeight: '700', fontSize: '0.6rem', backgroundColor: '#00bfa5', color: 'white' }}>\n                                                    <TiArrowBack style={{ marginRight: '5px', fontSize: '1rem', transform: 'translateY(-5%)' }}></TiArrowBack>\n                                                    Restone\n                                                </Button>\n                                            </Grid>\n                                        ) : null}\n                                        <Grid style={{ justifyContent: 'end' }} item md={2} xs={2}>\n                                            <Button onClick={() => DeleteReciept(row.MAHD, row.deleted)} style={{ fontWeight: '700', fontSize: '0.6rem', backgroundColor: red[400], color: 'white' }}>\n                                                <FiXSquare style={{ marginRight: '5px', fontSize: '1rem', transform: 'translateY(-5%)' }}></FiXSquare>\n                                                Xóa bỏ\n                                            </Button>\n                                        </Grid>\n                                    </Grid>\n                                </Grid>\n                            </Grid>\n                        </Box>\n                    </Collapse>\n                </TableCell>\n            </TableRow>\n            <Modal\n                open={openModal}\n                onClose={handleClose}\n                aria-labelledby=\"parent-modal-title\"\n                aria-describedby=\"parent-modal-description\"\n            >\n                <Box sx={{ ...style, width: 400 }}>\n                    <h2 style={{ textAlign: 'center' }} id=\"parent-modal-title\">Are you sure to delete?</h2>\n                    <Grid container spacing={2}>\n                        <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\n                            <Button onClick={() => PermanentlyDelete(row.MAHD)} style={{ color: 'white', backgroundColor: red[500] }}>DELETE</Button>\n                        </Grid>\n                        <Grid style={{ justifyContent: 'center', display: 'flex' }} item md={6} sm={6}  >\n                            <Button onClick={() => setOpenModal(false)} style={{ backgroundColor: lightBlue[100] }}>CANCEL</Button>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Modal>\n        </React.Fragment>\n    );\n}\n\nRow.propTypes = {\n    row: PropTypes.shape({\n        calories: PropTypes.number.isRequired,\n        carbs: PropTypes.number.isRequired,\n        fat: PropTypes.number.isRequired,\n        history: PropTypes.arrayOf(\n            PropTypes.shape({\n                amount: PropTypes.number.isRequired,\n                customerId: PropTypes.string.isRequired,\n                date: PropTypes.string.isRequired,\n            }),\n        ).isRequired,\n        name: PropTypes.string.isRequired,\n        price: PropTypes.number.isRequired,\n        protein: PropTypes.number.isRequired,\n    }).isRequired,\n};\n\n\nexport default function CollapsibleTable() {\n    const typeReciept = useSelector(state => state.typeReciept)\n    const listReciept = useSelector(state => state.listReciept)\n    const typeByDate = useSelector(state => state.typeByDate)\n    const [listRecieptReplace, setListRecieptReplace] = React.useState(listReciept);\n    const statusSelectAll = useSelector(state => state.statusSelectAll)\n    const search = useSelector(state => state.search)\n    const dispatch = useDispatch()\n    let listMAHD = []\n    React.useEffect(() => {\n        var list = typeReciept.length === 0 ? listReciept : listReciept.filter(value => {\n            for (var i = 0; i < typeReciept.length; i++) {\n                switch (typeReciept[i]) {\n                    case 'delete':\n                        if (value.deleted) {\n                            return value;\n                        }\n                        break;\n                    case 'return':\n                        if (!value.deleted && value.isEdit) {\n                            return value;\n                        }\n                        break;\n                    default:\n                        if (!value.deleted && !value.isEdit) {\n                            return value;\n                        }\n                        break;\n                }\n            }\n        })\n\n        if (typeByDate.type === 'typeByDate' || typeByDate.type === 'yesterday' || typeByDate.type === 'today') {\n            list = list.filter(value => {\n                let timeMau = value.date;\n                timeMau = timeMau.replace(/\\s/g, \"\");\n                timeMau = timeMau.split(\"/\");\n                if (typeByDate.day == timeMau[0] && typeByDate.month == timeMau[1] && typeByDate.year == timeMau[2]) {\n                    return value;\n                }\n            })\n        }\n\n        if (typeByDate.type === 'lastmonth') {\n            list = list.filter(value => {\n                let timeMau = value.date;\n                timeMau = timeMau.replace(/\\s/g, \"\");\n                timeMau = timeMau.split(\"/\");\n                if (typeByDate.month == timeMau[1] && typeByDate.year == timeMau[2]) {\n                    return value;\n                }\n            })\n        }\n\n        if (typeByDate.type === 'lastyear') {\n            list = list.filter(value => {\n                let timeMau = value.date;\n                timeMau = timeMau.replace(/\\s/g, \"\");\n                timeMau = timeMau.split(\"/\");\n                if (typeByDate.year == timeMau[2]) {\n                    return value;\n                }\n            })\n        }\n\n        if (search.length !== 0) {\n            list = list.filter(value => {\n                let isCheck = true\n                for (let i = 0; i < search.length; i++) {\n                    if (search[0] !== value.MAHD[0]) {\n                        isCheck = false;\n                        break;\n                    }\n                }\n                if (isCheck) {\n                    return value;\n                }\n            })\n        }\n\n        list.map(value => {\n            listMAHD.push(value.MAHD)\n        })\n\n        statusSelectAll ? dispatch({\n            type: \"SELECTED_ALL_RECIEPT\",\n            listMAHD: listMAHD,\n        }) : dispatch({\n            type: \"RESET_MAHD_RECIEPT\"\n        })\n        setListRecieptReplace(list)\n    }, [typeReciept, typeByDate, listReciept, statusSelectAll, search])\n\n\n    return (\n        <TableContainer style={{overflowX: 'hidden',  boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px' }} component={Paper}>\n            <Table aria-label=\"collapsible table\">\n                <TableHead>\n                    <TableRow style={{ backgroundColor: 'black', color: 'white' }}>\n                        <TableCell>\n                        </TableCell>\n                        <TableCell />\n                        <TableCell >Mã HĐ</TableCell>\n                        <TableCell align=\"right\">Ngày hóa đơn</TableCell>\n                        <TableCell align=\"right\">Tổng hóa đơn</TableCell>\n                        <TableCell align=\"right\">Giảm giá</TableCell>\n                        <TableCell align=\"right\">Khách hàng trả</TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {listRecieptReplace ?\n                        listRecieptReplace.map((row) => (\n                            <Row key={row.MAHD} row={row} />\n                        )) : null\n                    }\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/PayMoneyModal.js",["912","913","914","915","916","917","918","919","920","921","922","923","924","925","926","927","928","929","930","931","932","933"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Table, Grid, TextField, \n    TableCell, TableContainer, Button, InputLabel,\n    Paper, TableRow, TableHead } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport DatePicker from '@mui/lab/DatePicker';\nimport DateTimePicker from '@mui/lab/DateTimePicker';\nimport { AiFillPlusCircle} from \"react-icons/ai\";\nimport CancelIcon from '@mui/icons-material/Cancel';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell_Header: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    } \n})\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\n\nclass PayEmployeeModal extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            goodID : \"\",\n            change: false,\n            imageSelect: \"null\",\n            type:'none',\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\n        }; \n        // console.log(\"listTimeKeeper\", this.props.listTimeKeeper);\n        // console.log(\"this.props.employeeID\", this.props.employeeID);\n    }\n\n    getShiftInforByID(shiftID)\n    {\n        var listShift = this.props.listShift;\n        for(var i = 0 ; i < listShift.length; i++)\n        {\n            if(listShift[i]._id.shiftID == shiftID)\n            {\n                return listShift[i].name + ' (' + listShift[i].timeFrom + '-' + listShift[i].timeEnd + ')';\n            }\n        }\n        return \"Can't get shift\";\n    }\n\n    getEmployeeFullNameByID(employeeID)\n    {\n            for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n            {\n                var currentEmployee = this.props.listEmployee.employees[i];\n                if(currentEmployee._id.employeeID==employeeID)\n                {\n                        return currentEmployee.lastName + ' ' + currentEmployee.firstName;\n                }\n            }\n        return \"Can't get name\";\n    }\n\n    exit() {\n        this.props.changePayEmployeeStatus();  \n    }\n\n    payEmployee(){\n        // alert(\"Confirm password\");\n        // viết api để trả lương ở đây\n        // this.props.changePayEmployeeStatus();\n        for(var i =0; i< this.props.listTimeKeeper.length; i++)\n        {\n            if(this.props.listTimeKeeper[i]._id.employee._id.employeeID != this.props.employeeID.id) continue;\n            // Thử api\n            const data = {\n                token: localStorage.getItem('token'),\n                updatedTimeKeeping: {\n                    _id: this.props.listTimeKeeper[i]._id,\n                    isPaidSalary: true,\n                }\n            };\n            axios.put(`http://localhost:5000/api/employee/time-keeping`, data)\n                .then(res => {\n                    console.log(\"Update success\");\n                    alert('Đã update thành công sản phẩm');\n                    \n                })\n                .catch(err => {\n                    console.log(err);\n                })\n        }\n        \n        this.props.changePayEmployeeStatus();    \n        // Cập nhật redux trạng thái trả lương nhiều cái cùng lúc\n\n    }\n    \n    render() {\n        const { classes } = this.props;\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"PAY EMPLOYEE\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                marginTop: '0px'\n                            }}\n                        >   \n                            {/* <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input> */}\n                        </Grid>\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                     <TableContainer component={Paper}>\n                                            <Table className={classes.goodTable} sx={{ minWidth: 650 }} size=\"small\" aria-label=\"a dense table\">\n                                                <TableHead>\n                                                    <TableRow>\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='180px'>Day</TableCell>\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\" width='80px'>Date Of Week</TableCell>\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\" >Shift</TableCell>\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\">ID</TableCell>\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Name</TableCell>\n                                                        <TableCell className={classes.goodTable_Cell_Header} align=\"center\">Salary</TableCell>\n                                                        {/* <TableCell className={classes.goodTable_Cell_Header} align=\"center\"></TableCell> */}\n                                                    </TableRow>\n                                                    {\n                                                        this.props.listTimeKeeper.map((timeKeeper)=>\n                                                        timeKeeper._id.employee._id.employeeID != this.props.employeeID.id ? (null) :\n                                                            (\n                                                            <TableRow>\n                                                                <TableCell className={classes.goodTable_Cell}>\n                                                                    {timeKeeper._id.realDate.substring(0,timeKeeper._id.realDate.indexOf('T') )}\n                                                                </TableCell>\n                                                                <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.dateInWeek}</TableCell>\n                                                                <TableCell className={classes.goodTable_Cell}>\n                                                                    {timeKeeper._id.shiftType.name + \" (\"+ timeKeeper._id.shiftType.timeFrom + \n                                                                    ' - '+  timeKeeper._id.shiftType.timeEnd +')'}\n                                                                </TableCell>\n                                                                <TableCell className={classes.goodTable_Cell}>{timeKeeper._id.employee._id.employeeID}</TableCell>\n                                                                <TableCell className={classes.goodTable_Cell}>\n                                                                    {timeKeeper._id.employee.firstName + \" \" + timeKeeper._id.employee.lastName}\n                                                                </TableCell>\n                                                                <TableCell className={classes.goodTable_Cell}>\n                                                                    {timeKeeper.isPaidSalary.toString()}\n                                                                </TableCell>\n                                                            </TableRow>\n                                                            )\n                                                        )\n                                                    }\n                                                </TableHead>\n                                            </Table>\n                                    </TableContainer>\n                                    <Grid item md={12}\n                                        className='input-item'\n                                        style ={{\n                                            display: 'flex',\n                                            justifyContent: 'space-evenly'\n                                        }}\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.exit()}>\n                                            Exit\n                                        </Button>\n                                        <Button variant=\"contained\" onClick={() => this.payEmployee()}>\n                                            Pay employee\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        listTimeKeeper: state.listTimeKeeping,\n        listShift: state.listShift,\n        listEmployee: state.listEmployee,\n        infoUser: state.infoUser,\n        employeeID: state.currentEmployeeViewValue,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changePayEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\n            });\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(PayEmployeeModal));\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/UpdateEmployeeModal.js",["934","935","936","937","938","939","940","941","942","943","944","945","946","947","948","949","950","951","952","953"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nclass UpdateEmployeeModal extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n        }; \n        this.loadInitialData();\n    }\n    imgUrl = 'none';\n    finishUpImage = true;\n    \n    async profileImageChange(fileChangeEvent) {\n        this.setState({\n            imageSelect: fileChangeEvent.target.files[0],\n        })\n        this.finishUpImage = false;\n        const file = fileChangeEvent.target.files[0];\n        const { type } = file;\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\n        } else {\n            const formData = new FormData();\n            formData.append(\"file\", fileChangeEvent.target.files[0])\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\n            await axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\n                .then(res => {\n                    this.imgUrl=res.data.url;\n                    this.setState({\n                        change: 'true'\n                    });\n                })\n                .catch(err => {\n                    console.log(\"Thất bại\");\n                })\n        }\n        this.finishUpImage = true;\n    }\n\n\n    cancel = () => {\n        \n    }\n\n    findIndexInListEmployee(employeeID) {\n        for(var i = 0; i < this.props.listEmployee.employees.length ; i++)\n        {\n            if(this.props.listEmployee.employees[i]._id.employeeID == employeeID)\n            {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    checkConstraint() {\n        //Constraint 2: Password không được có dưới 6 ký tự\n        var password = document.querySelector('input[name=\"password\"]').value.trim();\n        if(password.length == 0)\n        {\n            alert(\"Password không được rỗng\");\n            return false;\n        }\n        if(password.length < 6)\n        {\n            alert(\"Password không được có dưới 6 ký tự\");\n            return false;\n        }\n        // Constraint 3: FirstName không được trống\n        var firstName =  document.querySelector('input[name=\"firstName\"]').value.trim();\n        if(firstName.length == 0)\n        {\n            alert('Tên riêng không được rỗng');\n            return false;\n        }\n        // Constraint 4: lastName không được trống\n        var lastName =  document.querySelector('input[name=\"lastName\"]').value.trim();\n        if(lastName.length == 0)\n        {\n            alert('Họ không được trống');\n            return false;\n        }\n        // Constraint 5: Số ID card không được để trống\n        var cardID= document.querySelector('input[name=\"cardID\"]').value.trim();\n        if(cardID.length == 0)\n        {\n            alert(\"Số id card không được để trống\");\n            return false;\n        }\n        // Constrain 6:Số điện thoại không được để trống và phải lớn hơn 6 ký tự\n        var phoneNumber= document.querySelector('input[name=\"phoneNumber\"]').value;\n        if(phoneNumber.length == 0)\n        {\n            alert(\"Số điện thoại không được để trống\");\n            return false;\n        }\n        if(phoneNumber.length < 6)\n        {\n            alert(\"Số điện thoại không được dưới 6 ký tự\");\n            return false;\n        }\n        // Constrain 7:Địa chỉ không được để trống\n        var address = document.querySelector('input[name=\"adress\"]').value;\n        if(address.length==0)\n        {\n            alert(\"Địa chỉ không được để trống\");\n            return false;\n        }\n        // Constraint 8: Ngày sinh không được để trống\n        var birthDay = document.querySelector('input[name=\"birthDay\"]').value;\n        if(birthDay.length == 0)\n        {\n            alert(\"Ngày sinh không được để trống\");\n            return false;\n        }\n        // Constraint 9: Email không được để trống\n        var email = document.querySelector('input[name=\"email\"]').value.trim();\n        if(email.length == 0)\n        {\n            alert(\"Email không dược để trống\");\n            return false;\n        }\n        if(email.indexOf('@')==-1 || email.indexOf('@')==email.length-1)\n        {\n            alert(\"Email không hợp lệ\");\n            return false;\n        }\n        // Constraint 10: Ngày sinh không thể lớn hơn ngày bất đầu làm\n        var startDate = document.querySelector('input[name=\"startDate\"]').value;\n        if(!this.isGreater(startDate, birthDay))\n        {\n            alert(\"Ngày sinh không thể lớn hơn ngày bất đầu làm\");\n            return false;\n        }\n        // Constraint 11: Check đã up ảnh xong chưa\n        if(this.finishUpImage == false)\n        {\n            alert(\"Ảnh chưa được upload xong\");\n            return false;\n        }\n\n        alert(\"Đã check hết các constraint\")\n        return true;\n    }\n\n    isGreater(dateString1, dateString2){\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\n    }\n\n    async updateEmployee(){\n        if(this.checkConstraint() == false) return;\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: this.id,\n                    storeID: this.props.infoUser.email,\n                },\n                managerID: this.props.infoUser.email,\n                password: document.querySelector('input[name=\"password\"]').value,\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\n                email: document.querySelector('input[name=\"email\"]').value,\n                address: document.querySelector('input[name=\"adress\"]').value,\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\n                imgUrl: this.imgUrl,\n            }   \n        }\n        // console.log(\"index\", this.findIndexInListEmployee(this.id));\n        console.log(\"updateEmployee\", data);\n        await axios.put(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Update success\");\n                \n            })\n            .catch(err => {\n                console.log(err);\n                this.props.changeLoginStatus();\n                this.props.hideAlert();\n                this.props.showAlert(\"Login timeout, signin again\", \"warning\");\n            })\n        this.props.updateEmployeeRedux(data.employee, this.findIndexInListEmployee(this.id))\n        this.props.changeUpdateEmployeeStatus();\n    }\n\n    id = \"\";\n    password = \"\";\n    firstName = \"\";\n    lastName = \"\";\n    cardID = \"\";\n    phoneNumber = \"\";\n    address = \"\";\n    email = \"\";\n    startDate = \"\";\n    birthDay = \"\";\n\n\n    loadInitialData() {\n        var currentEmployee = this.props.currentEditEmployee.state;\n        // console.log(\"currentEmployee\", currentEmployee);\n        this.id = currentEmployee._id.employeeID;\n        this.password = currentEmployee.password;\n        this.firstName = currentEmployee.firstName;\n        this.lastName = currentEmployee.lastName;\n        this.cardID = currentEmployee.cardID;\n        this.phoneNumber = currentEmployee.phoneNumber;\n        this.address = currentEmployee.address;\n        this.email = currentEmployee.email;\n        this.startDate = currentEmployee.startDate;\n        this.imgUrl = currentEmployee.imgUrl;\n        if(this.startDate!=null && this.startDate.indexOf('T')!=-1)\n        {\n            this.startDate = this.startDate.substring(0, this.startDate.indexOf('T'));\n        }\n        this.birthDay = currentEmployee.dateOfBirth;\n        if(this.birthDay!=null && this.birthDay.indexOf('T')!=-1)\n        {\n            this.birthDay = this.birthDay.substring(0, this.birthDay.indexOf('T'));\n        }\n        this.setState({change: !this.state.change})\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"UPDATE EMPLOYEE\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                marginTop: '0px'\n                            }}\n                        >   \n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            {/* Ẩn đi */}\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                        </Grid>\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                               <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            ID\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"\n                                            value={this.id}\n                                            readOnly={true}\n                                            disabled={true}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>Password</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"password\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.password}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"firstName\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.firstName}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"lastName\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.lastName}\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"number\" \n                                            name=\"cardID\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.cardID}\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"number\" \n                                            name=\"phoneNumber\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.phoneNumber}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Adress</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"adress\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.address}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>StartDate</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\"\n                                            name=\"startDate\"\n                                            style = {{width: '100%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.startDate}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"email\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.email}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\" \n                                            // class=\"input-val\"\n                                            name=\"birthDay\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.birthDay}\n                                        />\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.updateEmployee()}>\n                                            UPDATE\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        currentEditEmployee: state.currentEditEmployee,\n        infoUser: state.infoUser,\n        listEmployee: state.listEmployee,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\n            });\n        },\n        changeUpdateEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\n            });\n        },\n        updateEmployeeRedux: (data, index) => {\n            dispatch({\n                type: \"UPDATE_EMPLOYEE\",\n                data: data,\n                index: index,\n            });\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateEmployeeModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeTableHeader.js",["954","955","956","957","958","959","960","961"],"import PropTypes from 'prop-types';\n// material\nimport { visuallyHidden } from '@mui/utils';\nimport { Box, Checkbox, TableRow, TableCell, TableHead, TableSortLabel } from '@mui/material';\nimport { withStyles } from '@material-ui/styles';\n// ----------------------------------------------------------------------\n\nEmployeeTableHeader.propTypes = {\n  order: PropTypes.oneOf(['asc', 'desc']),\n  orderBy: PropTypes.string,\n  rowCount: PropTypes.number,\n  headLabel: PropTypes.array,\n  numSelected: PropTypes.number,\n  onRequestSort: PropTypes.func,\n  onSelectAllClick: PropTypes.func\n};\nconst styles = theme =>  ({\n  goodTable: {                                     \n      borderWidth: '1px',\n      borderColor: '#ccc',\n      borderStyle: 'solid'\n  },\n  goodTable_Cell_Header: {                                     \n      borderWidth: '1px',\n      borderColor: '#ccc',\n      borderStyle: 'solid',\n      height: '40px',\n  },\n  goodTable_Cell: {                                     \n      borderWidth: '1px',\n      borderColor: '#ccc',\n      borderStyle: 'solid',\n      height: '80px',\n  } \n})\n\nfunction EmployeeTableHeader( props){\n  const {\n    order,\n    orderBy,\n    rowCount,\n    headLabel,\n    numSelected,\n    onRequestSort,\n    onSelectAllClick} = props;\n  // const createSortHandler = (property) => (event) => {\n  //   onRequestSort(event, property);\n  // };\n  const {classes} =  props;\n  // console.log(\"headLabel\", headLabel);\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell padding=\"checkbox\" className = {classes.goodTable_Cell_Header}>\n          <Checkbox\n            // indeterminate={numSelected > 0 && numSelected < rowCount}\n            // checked={rowCount > 0 && numSelected === rowCount}\n            // onChange={onSelectAllClick}\n          />\n        </TableCell>\n        {headLabel.map((headCell) => (\n          <TableCell\n            className = {classes.goodTable_Cell_Header}\n            // key={headCell.id}\n            // align={headCell.alignRight ? 'right' : 'left'}\n            // sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              // hideSortIcon\n              // active={orderBy === headCell.id}\n              // direction={orderBy === headCell.id ? order : 'asc'}\n              // onClick={createSortHandler(headCell.id)}\n              style={{\n                color: '#333'\n              }}\n            >\n              {headCell.label}\n              {/* {orderBy === headCell.id ? (\n                <Box sx={{ ...visuallyHidden }}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null} */}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nexport default withStyles( styles )( EmployeeTableHeader );","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/SackedEmployeeMenu.js",["962","963"],"import { Icon } from '@iconify/react';\nimport editFill from '@iconify/icons-eva/edit-fill';\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\nimport {GiPayMoney} from \"react-icons/gi\";\nimport {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\n// material\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nclass EmployeeMoreMenu extends Component {\n  currentEmployee = {};\n\n\n    constructor(props) {\n        super(props);\n        this.state= {\n        change: 'false'\n        }\n        this.myRef = React.createRef();\n    }\n    setIsOpen(val) {\n        this.isOpen = val;\n        this.setState({change: val});\n        \n    }\n\n    getSackedEmployeeByID(employeeID) {\n        var listEmployee = this.props.listSackedEmployee.employees;\n        console.log(listEmployee);\n        for(var i = 0; i < listEmployee.length ; i++)\n        {\n          if(employeeID == listEmployee[i]._id.employeeID)\n          {\n            return listEmployee[i];\n          }\n        }\n    }\n\n    backToWork() {\n        const data = {\n            token: localStorage.getItem('token'),\n            employee:\n            [\n                {\n                    employeeID: this.props.data,\n                    storeID: this.props.infoUser.email,\n                },\n            ]\n            \n        }\n        axios.patch(`http://localhost:5000/api/employee/delete`, data)\n            .then(res => {\n                alert(\"back to work success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n\n        // Xoá khỏi redux sacked\n        this.props.backToWorkSackedEmployee(this.props.data);\n\n        // Thêm vào redux ko sacked\n        this.props.addEmployee(this.getSackedEmployeeByID(this.props.data));\n    }\n\n    delete() {\n        const data = {\n        token: localStorage.getItem('token'),\n        employee:\n        [\n            {\n                employeeID: this.props.data,\n                storeID: this.props.infoUser.email, \n            },\n        ] \n        }\n        console.log(data);\n\n        axios.delete(`http://localhost:5000/api/employee/delete`,{data: data})\n            .then(res => {\n                alert(\"delete permantly employee(s) success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n\n        // To redux\n        var employeeID = this.props.data;\n        this.props.deletePermantlyEmployee(employeeID);\n    }\n\n    isOpen=false;\n    render() {\n        return (\n        <>\n            <IconButton ref={this.myRef} onClick={() => this.setIsOpen(true)}>\n            <Icon icon={moreVerticalFill} width={20} height={20} />\n            </IconButton>\n    \n            <Menu\n            style={{\n                position: 'absolute',\n                bottom: 0,\n                left: 0,\n            }}\n            open={this.isOpen}\n            onClose={() => this.setIsOpen(false)}\n            anchorEl={this.myRef.current}\n            // PaperProps={{\n            //   sx: { width: 200, maxWidth: '100%' }\n            // }}\n            anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n            transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n            >\n            <MenuItem sx={{ color: 'text.secondary' }}\n                onClick={() => this.delete()}\n            >\n                <ListItemIcon>\n                <Icon icon={trash2Outline} width={24} height={24} />\n                </ListItemIcon>\n                <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\n            </MenuItem>\n    \n            <MenuItem sx={{ color: 'text.secondary' }}\n                onClick={() => this.backToWork()}\n            >\n                <ListItemIcon>\n                <Icon icon={editFill} width={24} height={24} />\n                </ListItemIcon>\n                <ListItemText primary=\"Return\" primaryTypographyProps={{ variant: 'body2' }} />\n            </MenuItem>\n            </Menu>\n        </>\n        );\n    }\n    \n    }\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        updateEmployeeStatus: state.updateEmpoyeeStatus,\n        payEmployeeStatus: state.payEmployeeStatus,\n        listEmployee: state.listEmployee,\n        infoUser: state.infoUser,\n        listSackedEmployee: state.listSackedEmployee,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        backToWorkSackedEmployee: (id) => {\n            dispatch({\n                type: \"RETURN_TO_WORK\",\n                id: id\n            });\n        },\n        addEmployee: (data) => {\n            dispatch({\n                type: \"ADD_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        deletePermantlyEmployee: (employeeID) => {\n            dispatch({\n                type: \"DELETE_PERMANTLY_EMPLOYEE\",\n                employeeID: employeeID,\n            });\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/ErrorReceipt.js",["964","965","966","967","968","969","970","971","972","973","974","975","976","977","978","979","980","981","982","983"],"import React from 'react';\nimport { Typography } from '@mui/material';\nimport { FaReceipt } from 'react-icons/fa'\nimport { useSelector } from 'react-redux'\nimport moment from 'moment'\n\n\nfunction ErrorReceipt(props) {\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\n    const listReciept = useSelector(state => state.listReciept)\n    const [index, setIndex] = React.useState(0)\n    let nowTime = new Date()\n\n    React.useEffect(() => {\n        let errorReciept = 0;\n        let currentMonth = nowTime.getMonth() + 1;\n        let lastMonth = new Date(moment().subtract(1, 'months'))\n        let yesterdayTime = new Date(moment().subtract(1, 'days'))\n\n        if (typeHeaderDashboard == 'Today') {\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[0] == nowTime.getDate() && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\n                    if (value.deleted) {\n                        errorReciept++\n                    }\n                }\n            })\n            setIndex(errorReciept)\n        } else if (typeHeaderDashboard == 'Yesterday') {\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[0] == yesterdayTime.getDate() - 1 && date[1] == yesterdayTime.getMonth() + 1 && date[2] == yesterdayTime.getFullYear()) {\n                    if (value.deleted) errorReciept++\n                }\n            })\n            setIndex(errorReciept)\n        } else if (typeHeaderDashboard == 'Month') {\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[1] == lastMonth.getMonth() && date[2] == lastMonth.getFullYear()) {\n                    if (value.deleted) errorReciept++\n                }\n            })\n            setIndex(errorReciept)\n        } else if (typeHeaderDashboard == 'Year') {\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[2] == nowTime.getFullYear()) {\n                    if (value.deleted) errorReciept++\n                }\n            })\n            setIndex(errorReciept)\n        } else if (typeHeaderDashboard == 'All') {\n            listReciept.map(value => {\n                if (value.deleted) {\n                    errorReciept++\n                }\n            })\n            setIndex(errorReciept)\n        }\n    }, [typeHeaderDashboard])\n\n    return (\n        <div className=\"dashboard-css error-receipt\">\n            <div className=\"dashboard-item-img error-receipt\" style={{ marginBottom: '30px' }}>\n                <FaReceipt className=\"dashboard-item-icon error-receipt\"></FaReceipt>\n            </div>\n            <Typography style={{ marginBottom: '10px' }} variant=\"h4\">{index}</Typography>\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\n                Error receipt\n            </Typography>\n        </div>\n    );\n}\n\nexport default ErrorReceipt;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/AddEmployeeModal.js",["984","985","986","987","988","989","990","991","992","993","994","995","996","997","998","999","1000","1001","1002","1003","1004","1005","1006"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { withStyles } from '@material-ui/styles';\n\nvar productTypes =[\n    'food', 'detergent', 'cuisine'\n];\n\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nvar listUsers = [];\n\nclass AddEmployeeModal extends Component {\n\n    genID = 0;\n    imgUrl = 'none';\n\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            change: false,\n        };\n        listUsers = [];\n        this.getAllEmployee(); \n    }\n\n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    async getAllEmployee () {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/employee/`, {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                // console.log(err);\n                alert(err)\n            })\n        listUsers = [];\n        for(var i = 0; i < result.length; i++)\n        {\n            listUsers.push(result[i]);\n        }\n        this.props.getEmployee(listUsers);\n        if(listUsers.length > 0)\n        {\n            this.genID = parseInt(listUsers[listUsers.length - 1]._id.employeeID) + 1;\n            console.log(this.genID);\n        }\n        this.setState({change: !this.state.change});\n    }\n\n    isGreater(dateString1, dateString2){\n        return (new Date(dateString1).getTime() - new Date(dateString2).getTime()) > 0;\n    }\n\n    finishUpImage = true;\n    async profileImageChange(fileChangeEvent) {\n        this.setState({\n            imageSelect: fileChangeEvent.target.files[0],\n        })\n        this.finishUpImage = false;\n        const file = fileChangeEvent.target.files[0];\n        const { type } = file;\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\n        } else {\n            const formData = new FormData();\n            formData.append(\"file\", fileChangeEvent.target.files[0])\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\n            await axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\n                .then(res => {\n                    this.imgUrl=res.data.url;\n                    this.setState({\n                        change: 'true'\n                    });\n                })\n                .catch(err => {\n                    console.log(\"Thất bại\");\n                })\n        }\n        this.finishUpImage = true;\n    }\n\n    checkConstraint() {\n        // Constraint 1: ID trống hoặc bị trùng\n        var id  = document.querySelector('input[name=\"ID\"]').value;\n        if( id.length == 0)\n        {\n            alert(\"Không thể nhập id rỗng\");\n            return false;\n        }\n        for(var i = 0; i < this.props.listEmployee.employees.length ; i++)\n        {\n            if(this.props.listEmployee.employees[i]._id.employeeID == id)\n            {\n                alert(\"ID đã bị trùng\");\n                return false;\n            }\n        }\n        // Trùng ID sa thải\n        for(var i = 0; i < this.props.listSackedEmployee.employees.length ; i++)\n        {\n            if(this.props.listSackedEmployee.employees[i]._id.employeeID == id)\n            {\n                alert(\"ID đã bị trùng với nhân viên đã sai thải\");\n                return false;\n            }\n        }\n\n        //Constraint 2: Password không được có dưới 6 ký tự\n        var password = document.querySelector('input[name=\"password\"]').value.trim();\n        if(password.length == 0)\n        {\n            alert(\"Password không được rỗng\");\n            return false;\n        }\n        if(password.length < 6)\n        {\n            alert(\"Password không được có dưới 6 ký tự\");\n            return false;\n        }\n        // Constraint 3: FirstName không được trống\n        var firstName =  document.querySelector('input[name=\"firstName\"]').value.trim();\n        if(firstName.length == 0)\n        {\n            alert('Tên riêng không được rỗng');\n            return false;\n        }\n        // Constraint 4: lastName không được trống\n        var lastName =  document.querySelector('input[name=\"lastName\"]').value.trim();\n        if(lastName.length == 0)\n        {\n            alert('Họ không được trống');\n            return false;\n        }\n        // Constraint 5: Số ID card không được để trống\n        var cardID= document.querySelector('input[name=\"cardID\"]').value.trim();\n        if(cardID.length == 0)\n        {\n            alert(\"Số id card không được để trống\");\n            return false;\n        }\n        // Constrain 6:Số điện thoại không được để trống và phải lớn hơn 6 ký tự\n        var phoneNumber= document.querySelector('input[name=\"phoneNumber\"]').value;\n        if(phoneNumber.length == 0)\n        {\n            alert(\"Số điện thoại không được để trống\");\n            return false;\n        }\n        if(phoneNumber.length < 6)\n        {\n            alert(\"Số điện thoại không được dưới 6 ký tự\");\n            return false;\n        }\n        // Constrain 7:Địa chỉ không được để trống\n        var address = document.querySelector('input[name=\"adress\"]').value;\n        if(address.length==0)\n        {\n            alert(\"Địa chỉ không được để trống\");\n            return false;\n        }\n        // Constraint 8: Ngày sinh không được để trống\n        var birthDay = document.querySelector('input[name=\"birthDay\"]').value;\n        if(birthDay.length == 0)\n        {\n            alert(\"Ngày sinh không được để trống\");\n            return false;\n        }\n        // Constraint 9: Email không được để trống\n        var email = document.querySelector('input[name=\"email\"]').value.trim();\n        if(email.length == 0)\n        {\n            alert(\"Email không dược để trống\");\n            return false;\n        }\n        if(email.indexOf('@')==-1 || email.indexOf('@')==email.length-1)\n        {\n            alert(\"Email không hợp lệ\");\n            return false;\n        }\n        // Constraint 10: Ngày sinh không thể lớn hơn ngày bất đầu làm\n        var startDate = document.querySelector('input[name=\"startDate\"]').value;\n        if(!this.isGreater(startDate, birthDay))\n        {\n            alert(\"Ngày sinh không thể lớn hơn ngày bất đầu làm\");\n            return false;\n        }\n        // Constraint 11: Check đã up ảnh xong chưa\n        if(this.finishUpImage == false)\n        {\n            alert(\"Ảnh chưa được upload xong\");\n            return false;\n        }\n\n        alert(\"Đã check hết các constraint\")\n        return true;\n    }\n    // Thêm nhân viên\n    async addEmployeeToDatabase()\n    {\n        var isAddOK = true;\n        const data = {\n            token: localStorage.getItem('token'),\n            employee: {\n                _id: {\n                    employeeID: document.querySelector('input[name=\"ID\"]').value,\n                    storeID: this.props.infoUser.email,\n                },\n                managerID: this.props.infoUser.email,\n                password: document.querySelector('input[name=\"password\"]').value,\n                firstName: document.querySelector('input[name=\"firstName\"]').value,\n                lastName: document.querySelector('input[name=\"lastName\"]').value,\n                phoneNumber: document.querySelector('input[name=\"phoneNumber\"]').value,\n                dateOfBirth: document.querySelector('input[name=\"birthDay\"]').value,\n                email: document.querySelector('input[name=\"email\"]').value,\n                address: document.querySelector('input[name=\"adress\"]').value,\n                cardID: document.querySelector('input[name=\"cardID\"]').value,\n                startDate: document.querySelector('input[name=\"startDate\"]').value,\n                // endDate: \"2021-11-31T00:00:00.000Z\",\n                imgUrl: this.imgUrl,\n            }   \n        }\n        console.log(data);\n        await axios.post(`http://localhost:5000/api/employee`, data)\n            .then(res => {\n                console.log(\"Save success\");\n                alert(\"Lưu thành công\")\n            })\n            .catch(err => {\n                alert(err);\n                if(err.response.data.message)\n                {\n                    alert(err.response.data.message);\n                }\n                console.log(err);\n                isAddOK = false;\n            })\n        // Thêm vào redux\n        if(isAddOK)\n        {\n            this.props.addEmployee(data.employee);\n            this.props.changeAddEmployeeStatus();\n        }\n            \n        \n    }\n\n    cancel = () => {\n        this.props.changeAddEmployeeStatus();\n    }\n\n    addEmployee = () => {\n        if(this.checkConstraint()==false) return;\n        this.addEmployeeToDatabase();\n        \n    }\n    render() {\n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"ADD EMPLOYEE\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                marginTop: '0px'\n                            }}\n                        >   \n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                        </Grid>\n                        <Grid item md={12}>\n\n                            <Card>\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            ID\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            name='ID'\n                                            style = {{width: '70%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            variant=\"outlined\"  \n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: '114px'}}>Password</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"password\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>First Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"firstName\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Last Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"lastName\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>ID CARD</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"number\" \n                                            name=\"cardID\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>PhoneNumber</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"number\" \n                                            name=\"phoneNumber\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Adress</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"adress\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>StartDate</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\"\n                                            name=\"startDate\"\n                                            defaultValue={this.getCurrentDateTime()}\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Email</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            name=\"email\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>BirthDay</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\" \n                                            // class=\"input-val\"\n                                            name=\"birthDay\"\n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                        />\n                                    </Grid>\n                                    <Grid item md={9}></Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.addEmployee()}>\n                                            Add\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                </div>\n                </Card>\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addEmployeeStatus: state.addEmployeeStatus,\n        confirmStatus: state.confirmStatus,\n        infoUser: state.infoUser,\n        listEmployee: state.listEmployee,\n        listSackedEmployee: state.listSackedEmployee,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddEmployeeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_EMPLOYEE_STATUS\",\n            });\n        },\n        getEmployee: (data) => {\n            dispatch({\n                type: \"GET_EMPLOYEE\",\n                employees: data,\n            });\n        },\n        addEmployee: (data) => {\n            dispatch({\n                type: \"ADD_EMPLOYEE\",\n                employees: data,\n            });\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddEmployeeModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/fakeData.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/DaiLyMoneyTracking.js",["1007","1008","1009","1010","1011","1012"],"import React from 'react';\nimport DesktopDatePicker from '@mui/lab/DesktopDatePicker';\nimport { Grid, TextField } from '@mui/material';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport { useSelector } from 'react-redux'\n\n\nfunction DaiLyMoneyTracking(props) {\n    const [value, setValue] = React.useState(new Date());\n    const listReciept = useSelector(state => state.listReciept)\n    const [dailyListReciept, setDailiListReciept] = React.useState([]);\n    const changeTime = (newValue) => {\n        if (newValue) {\n            setValue(newValue);\n        }\n    }\n\n    const totalMoneyDaily = () => {\n        let money = 0\n        dailyListReciept.map(value => {\n            if (!value.deleted) {\n                money += value.totalFinalMoney\n            } else {\n                money -= value.totalFinalMoney\n            }\n        })\n        return money\n    }\n\n    React.useEffect(() => {\n        let day = value.getDate()\n        let month = value.getMonth() + 1;\n        let year = value.getFullYear()\n        let arrListReciept\n        arrListReciept = listReciept.filter(value => {\n            let data = value.date;\n            data = data.replace(/\\s/g, \"\");\n            data = data.split(\"/\");\n            if (data[0] == day && data[1] == month && data[2] == year) {\n                return value\n            }\n        })\n        setDailiListReciept(arrListReciept)\n    }, [value])\n\n    return (\n        <div style={{ backgroundColor: 'white', borderRadius: '4px', boxShadow: 'rgba(0, 0, 0, 0.24) 0px 3px 8px', overflow: 'hidden', marginBottom: '30px' }}>\n            <div style={{ height: 'auto', width: '90%', margin: 'auto', paddingTop: '20px' }}>\n                <LocalizationProvider dateAdapter={AdapterDateFns}>\n                    <DesktopDatePicker\n                        label=\"Date\"\n                        value={value}\n                        minDate={new Date('2017-01-01')}\n                        onChange={(newValue) => changeTime(newValue)}\n                        renderInput={(params) => <TextField style={{ width: '100%' }} {...params} />}\n                    />\n                </LocalizationProvider>\n            </div>\n            <div id=\"choses-product\" style={{ backgroundColor: 'white', height: '500px', width: '80%', overflow: 'hidden', margin: 'auto', overflowY: 'auto', marginTop: '20px', marginBottom: '20px' }}>\n                <ul style={{ textDecoration: 'none', listStyle: 'none', paddingLeft: '0' }}>\n                    {\n                        dailyListReciept.length !== 0 ? dailyListReciept.map(value => (\n                            <li style={{ borderBottom: '1px #0000004d solid', marginBottom: '5px', paddingBottom: '5px' }}>\n                                <Grid container spacing={2}>\n                                    <Grid item sm={6} md={6}>\n                                        <div>{value.deleted ? \"Hủy hóa đơn\" : \"Thành công\"}</div>\n                                        <div style={{ fontWeight: '700', color: value.deleted ? \"red\" : \"green\" }}>{value.deleted ? \"-\" : \"+\"} {value.totalFinalMoney}</div>\n                                    </Grid>\n                                    <Grid style={{ display: 'flex', justifyContent: 'center' }} item sm={6} md={3}>\n                                        <div style={{ color: '#00000075', paddingLeft: '10px', fontSize: '1rem' }}>{value.name}</div>\n                                    </Grid>\n                                    <Grid style={{ display: 'flex', justifyContent: 'center' }} item sm={6} md={3}>\n                                        <div style={{ color: '#00000075', paddingLeft: '10px', fontSize: '1rem' }}>{value.time}</div>\n                                    </Grid>\n                                </Grid>\n                            </li>\n                        )) : (\n                            <div style={{ justifyContent: 'center', display: 'flex', marginTop: '100px', color: 'rgba(0,0,0,0.5)' }}>\n                                <h2>\n                                    You have not sold any invoices today\n                                </h2>\n                            </div>\n                        )\n                    }\n                </ul>\n            </div>\n            <div style={{ height: 'auto', width: '100%', paddingTop: '20px' }}>\n                <Grid container spacing={2}>\n                    <Grid style={{ display: 'flex', justifyContent: 'end' }} item md={2}>\n                        <h5>TOTAL : </h5>\n                    </Grid>\n                    <Grid style={{ display: 'flex', justifyContent: 'start' }} item md={5}>\n                        {totalMoneyDaily() >= 0 ? (\n                            <h5  style={{color:'green', fontWeight: 'bold'}}>{totalMoneyDaily()} VNĐ</h5>\n                        ) : (\n                            <h5 style={{color:'red', fontWeight: 'bold'}}>{totalMoneyDaily()} VNĐ</h5>\n                        )}\n                    </Grid>\n                </Grid>\n            </div>\n        </div>\n    );\n}\n\nexport default DaiLyMoneyTracking;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/Statistic.js",["1013","1014","1015","1016","1017","1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031","1032","1033","1034","1035","1036","1037","1038","1039","1040","1041","1042","1043","1044","1045","1046","1047","1048","1049","1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074","1075","1076","1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087","1088","1089","1090","1091","1092","1093","1094","1095","1096","1097","1098","1099"],"import { merge, now } from 'lodash';\nimport ReactApexChart from 'react-apexcharts';\n// material\nimport { Card, CardHeader, Box } from '@mui/material';\n//\nimport BaseOptionChart from './BaseOptionChart';\nimport SplitButton from './GroupButton';\nimport OptionYear from './OptionYear';\nimport OptionMonth from './OptionMonth';\n// ----------------------------------------------------------------------\nimport { useSelector, useDispatch } from 'react-redux';\nimport React from 'react';\nimport moment from 'moment'\n\nexport default function AppWebsiteVisits() {\n  const [typeDate, setTypeData] = React.useState(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Sartuday', 'Sunday']);\n  const [title, setTitle] = React.useState('last Week')\n  const [tienGoc, setTienGoc] = React.useState([])\n  const [tienDoanhThu, setTienDoanhThu] = React.useState([])\n  const [tienLai, setTienLai] = React.useState([])\n  const [growth, setGrowth] = React.useState('(+100%) than Last Week')\n  const [showOption, setShowOption] = React.useState(false);\n  var CHART_DATA = [\n    {\n      name: 'Tiền gốc',\n      type: 'column',\n      data: tienGoc\n    },\n    {\n      name: 'Doanh thu',\n      type: 'area',\n      data: tienDoanhThu\n    },\n    {\n      name: 'Lợi nhuận',\n      type: 'line',\n      data: tienLai\n    }\n  ];\n  const typeTimeDashboard = useSelector(state => state.typeTimeDashboard)\n  const listReciept = useSelector(state => state.listReciept)\n  const typeMonth = useSelector(state => state.monthSelectDashboard)\n  const typeYear = useSelector(state => state.yearSelectDashboard)\n\n  let nowTime = new Date()\n  const chartOptions = merge(BaseOptionChart(), {\n    stroke: { width: [1, 2, 3] },\n    plotOptions: { bar: { columnWidth: '11%', borderRadius: 4 } },\n    fill: { type: ['solid', 'gradient', 'solid'] },\n    xaxis: {\n      categories: typeDate,\n    },\n    tooltip: {\n      shared: true,\n      intersect: false,\n      y: {\n        formatter: (y) => {\n          if (typeof y !== 'undefined') {\n            return `${y.toFixed(0)} VNĐ`;\n          }\n          return y;\n        }\n      }\n    }\n  });\n\n  const DateInWeek = (type) => {\n    let Week = [];\n    if (type === 'Week') {\n      // Week\n      if (nowTime.getDay() === 0) {\n        for (let i = 0; i < 7; i++) {\n          let nowDate = new Date(moment().subtract(i, 'days'))\n          let date = nowDate.getDate() + \" \" + (nowDate.getMonth() + 1) + \" \" + nowDate.getFullYear();\n          Week.push(date)\n        }\n        return Week\n      } else {\n        for (let i = 0; i < nowTime.getDay(); i++) {\n          let nowDate = new Date(moment().subtract(i, 'days'))\n          let date = nowDate.getDate() + \" \" + (nowDate.getMonth() + 1) + \" \" + nowDate.getFullYear();\n          Week.push(date)\n        }\n        return Week\n      }\n\n    } else {\n      if (nowTime.getDay() === 0) {\n        for (let i = 0; i < 7; i++) {\n          let nowDate = new Date(moment().subtract(i + 7, 'days'))\n          let date = nowDate.getDate() + \" \" + (nowDate.getMonth() + 1) + \" \" + nowDate.getFullYear();\n          Week.push(date)\n        }\n        return Week\n      } else {\n        for (let i = 0; i < 7; i++) {\n          let nowDate = new Date(moment().subtract(i + nowTime.getDay(), 'days'))\n          let date = nowDate.getDate() + \" \" + (nowDate.getMonth() + 1) + \" \" + nowDate.getFullYear();\n          Week.push(date)\n        }\n        return Week\n      }\n    }\n  }\n\n  ///////Week\n  const totalMoneyInWeek = (arrDate, type) => {\n    let arrDoanhThu = []\n    let arrTienGoc = []\n    let arrLai = []\n    arrDate.map(value => {\n      let date = value.split(\" \")\n      let moneyDoanhThu = 0\n      let moneyTienGoc = 0\n      listReciept.map(reciept => {\n        let dateReciept = reciept.date.replace(/\\s/g, \"\");\n        dateReciept = dateReciept.split(\"/\")\n        if (date[0] === dateReciept[0] && date[1] === dateReciept[1] && date[2] === dateReciept[2]) {\n          if (!reciept.deleted) {\n            moneyDoanhThu += reciept.totalFinalMoney;\n            reciept.listProduct.map(value => {\n              moneyTienGoc += value.quantity * value.product.importPrice;\n            })\n          }\n        }\n      })\n      arrTienGoc.unshift(moneyTienGoc)\n      arrDoanhThu.unshift(moneyDoanhThu)\n      arrLai.unshift(moneyDoanhThu - moneyTienGoc)\n    })\n    setTienGoc(arrTienGoc)\n    setTienDoanhThu(arrDoanhThu)\n    setTienLai(arrLai)\n  }\n\n\n  ///////Month\n\n  const DateInMonth = (month123, year123, currentMonth) => {\n    let arrCurrentMonth = [];\n    let arrLastMonth = []\n    let month = new Date(moment().subtract(1, 'months'))\n    let lastMonth = month.getMonth() + 1;\n    let year = nowTime.getFullYear();\n    let monthCurrent = nowTime.getMonth() + 1;\n\n    for (let i = 0; i < 8; i++) {\n      let data\n      if (i === 0) {\n        data = '1/' + monthCurrent\n        arrCurrentMonth.push(data)\n        data = '1/' + month123\n        arrLastMonth.push(data)\n      } else {\n        data = i * 4 + '/' + monthCurrent\n        arrCurrentMonth.push(data)\n        data = i * 4 + '/' + month123\n        arrLastMonth.push(data)\n      }\n    }\n\n    if (currentMonth === true) {\n      //Month\n      let data = new Date(year, nowTime.getMonth() + 1, 0).getDate() + '/' + monthCurrent\n      arrCurrentMonth.push(data)\n      return arrCurrentMonth\n    } else {\n      //Last month\n      let data = new Date(year123, month123, 0).getDate() + '/' + lastMonth\n      arrLastMonth.push(data)\n      return arrLastMonth\n    }\n  }\n\n\n\n\n  const totalMoneyInMonth = (arrDate, currentMonth, month123, year123) => {\n    var newArr\n    let arrDoanhThu = [0]\n    let arrTienGoc = [0]\n    let arrLai = [0]\n    if (currentMonth) {\n      newArr = arrDate.filter(value => {\n        let data = value.replace(/\\s/g, \"\")\n        data = value.split(\"/\");\n        if (nowTime.getDate() >= data[0]) {\n          return value\n        }\n      })\n      if (nowTime.getDate() % 4 !== 0) {\n        let month = nowTime.getMonth() + 1;\n        let a = nowTime.getDate() + \"/\" + month\n        newArr.push(a)\n      }\n      setTypeData(newArr)\n    } else {\n      setTypeData(arrDate)\n    }\n\n\n    if (currentMonth) {\n      for (let i = 1; i <= nowTime.getDate() / 4; i++) {\n        let year = nowTime.getFullYear();\n        let date = newArr[i].replace(/\\s/g, \"\");\n        date = date.split(\"/\")\n        let moneyDoanhThu = 0;\n        let moneyTienGoc = 0;\n        listReciept.map(reciept => {\n          let dateReciept = reciept.date.replace(/\\s/g, \"\");\n          dateReciept = dateReciept.split(\"/\")\n          if (date[0] == dateReciept[0] || date[0] - 1 == dateReciept[0] || date[0] - 2 == dateReciept[0] || date[0] - 3 == dateReciept[0]) {\n            if (!reciept.deleted) {\n              if (date[1] == dateReciept[1] && year == dateReciept[2])\n                moneyDoanhThu += reciept.totalFinalMoney;\n              reciept.listProduct.map(value => {\n                moneyTienGoc += value.quantity * value.product.importPrice;\n              })\n            }\n          }\n        })\n        arrDoanhThu.push(moneyDoanhThu);\n        arrTienGoc.push(moneyTienGoc)\n        arrLai.push(moneyDoanhThu - moneyTienGoc)\n      }\n      if (nowTime.getDate() % 4 !== 0) {\n        let moneyDoanhThu = 0;\n        let moneyTienGoc = 0;\n        for (let i = 4 * (nowTime.getDate() % 4 + 1) + 1; i <= nowTime.getDate(); i++) {\n          let year = nowTime.getFullYear();\n          let month = nowTime.getMonth() + 1;\n          listReciept.map(reciept => {\n            let dateReciept = reciept.date.replace(/\\s/g, \"\");\n            dateReciept = dateReciept.split(\"/\")\n            if (i == dateReciept[0] && month == dateReciept[1] && year == dateReciept[2]) {\n              if (!reciept.deleted) {\n                moneyDoanhThu += reciept.totalFinalMoney;\n                reciept.listProduct.map(value => {\n                  moneyTienGoc += value.quantity * value.product.importPrice;\n                })\n              }\n            }\n          })\n        }\n        arrDoanhThu.push(moneyDoanhThu);\n        arrTienGoc.push(moneyTienGoc)\n        arrLai.push(moneyDoanhThu - moneyTienGoc)\n      }\n\n      setTienGoc(arrTienGoc)\n      setTienDoanhThu(arrDoanhThu)\n      setTienLai(arrLai)\n    } else {\n\n      for (let i = 1; i <= 7; i++) {\n        let date = arrDate[i].replace(/\\s/g, \"\");\n        date = date.split(\"/\")\n        let moneyDoanhThu = 0;\n        let moneyTienGoc = 0;\n        listReciept.map(reciept => {\n          let dateReciept = reciept.date.replace(/\\s/g, \"\");\n          dateReciept = dateReciept.split(\"/\")\n          if (date[0] == dateReciept[0] || date[0] - 1 == dateReciept[0] || date[0] - 2 == dateReciept[0] || date[0] - 3 == dateReciept[0]) {\n            if (month123 == dateReciept[1] && year123 == dateReciept[2]) {\n              if (!reciept.deleted) {\n                moneyDoanhThu += reciept.totalFinalMoney;\n                reciept.listProduct.map(value => {\n                  moneyTienGoc += value.quantity * value.product.importPrice;\n                })\n              }\n            }\n          }\n        })\n        arrDoanhThu.push(moneyDoanhThu);\n        arrTienGoc.push(moneyTienGoc)\n        arrLai.push(moneyDoanhThu - moneyTienGoc)\n      }\n\n      if (new Date(year123, month123, 0).getDate() > 28) {\n        let moneyDoanhThu = 0;\n        let moneyTienGoc = 0;\n        for (let i = 29; i <= new Date(year123, month123, 0).getDate(); i++) {\n          listReciept.map(reciept => {\n            let dateReciept = reciept.date.replace(/\\s/g, \"\");\n            dateReciept = dateReciept.split(\"/\")\n            if (i == dateReciept[0] && month123 == dateReciept[1] && year123 == dateReciept[2]) {\n              if (!reciept.deleted) {\n                moneyDoanhThu += reciept.totalFinalMoney;\n                reciept.listProduct.map(value => {\n                  moneyTienGoc += value.quantity * value.product.importPrice;\n                })\n              }\n            }\n          })\n        }\n        arrDoanhThu.push(moneyDoanhThu);\n        arrTienGoc.push(moneyTienGoc)\n        arrLai.push(moneyDoanhThu - moneyTienGoc)\n      }\n      setTienGoc(arrTienGoc)\n      setTienDoanhThu(arrDoanhThu)\n      setTienLai(arrLai)\n    }\n\n  }\n\n\n  ////// YEAR\n  const DateInYear = (year) => {\n    let arrDoanhThu = []\n    let arrTienGoc = []\n    let arrLai = []\n    for (let i = 1; i <= 12; i++) {\n      let moneyDoanhThu = 0;\n      let moneyTienGoc = 0;\n      listReciept.map(reciept => {\n        let dateReciept = reciept.date.replace(/\\s/g, \"\");\n        dateReciept = dateReciept.split(\"/\")\n        if (i == dateReciept[1] && year == dateReciept[2]) {\n          if (!reciept.deleted) {\n            moneyDoanhThu += reciept.totalFinalMoney;\n            reciept.listProduct.map(value => {\n              moneyTienGoc += value.quantity * value.product.importPrice;\n            })\n          }\n        }\n      })\n      arrDoanhThu.push(moneyDoanhThu);\n      arrTienGoc.push(moneyTienGoc)\n      arrLai.push(moneyDoanhThu - moneyTienGoc)\n      setTienGoc(arrTienGoc)\n      setTienDoanhThu(arrDoanhThu)\n      setTienLai(arrLai)\n    }\n  }\n\n  // // Tắng trưởng của công ty\n  const GrowthPercent = (month, year, type, arrCurrent, arrLast) => {\n    let moneyLast = 0;\n    let moneyCurrent = 0;\n\n    if (month === 0) {\n      listReciept.map(value => {\n        let date = value.date.replace(/\\s/g, \"\")\n        date = date.split(\"/\")\n        if (date[2] == year) {\n          if (!value.deleted) {\n            moneyCurrent += value.totalFinalMoney\n          }\n        }\n        if (date[2] == year - 1) {\n          if (!value.deleted) {\n            moneyLast += value.totalFinalMoney\n          }\n        }\n      })\n      if (moneyLast == 0 && moneyCurrent == 0) {\n        setGrowth('(+0%) than Last Year')\n      } else if (moneyLast == 0) {\n        setGrowth('(+100%) than Last Year')\n      } else if (moneyCurrent == 0) {\n        setGrowth('(+0%) than Last Year')\n      } else {\n        let percent = (moneyCurrent / moneyLast) * 100\n        if (percent >= 100) {\n          setGrowth(`(+${(percent - 100).toFixed(2)}%) than Last Year`)\n        } else {\n          setGrowth(`(-${(100 - percent).toFixed(2)}%) than Last Year`)\n        }\n      }\n    } else if (month !== 0 && month == nowTime.getMonth() + 1 && year == nowTime.getFullYear()) {\n      if (type === 'Week' || type === 'Last Week') {\n        arrCurrent.map(date => {\n          let item = date.split(\" \");\n          listReciept.map(value => {\n            let valueDate = value.date.replace(/\\s/g, \"\")\n            valueDate = valueDate.split(\"/\")\n            if (!value.deleted) {\n              if (item[0] == valueDate[0] && item[1] == valueDate[1] && item[2] == valueDate[2]) {\n                moneyCurrent += value.totalFinalMoney\n              }\n            }\n          })\n        })\n\n        arrLast.map(date => {\n          let item = date.split(\" \");\n          listReciept.map(value => {\n            let valueDate = value.date.replace(/\\s/g, \"\")\n            valueDate = valueDate.split(\"/\")\n            if (!value.deleted) {\n              if (item[0] == valueDate[0] && item[1] == valueDate[1] && item[2] == valueDate[2]) {\n                moneyLast += value.totalFinalMoney\n              }\n            }\n          })\n        })\n\n        if (moneyLast == 0 && moneyCurrent == 0) {\n          setGrowth('(+0%) than Last Week')\n        } else if (moneyLast == 0) {\n          setGrowth('(+100%) than Last Week')\n        } else if (moneyCurrent == 0) {\n          setGrowth('(+0%) than Last Week')\n        } else {\n          let percent = (moneyCurrent / moneyLast) * 100\n          if (percent >= 100) {\n            setGrowth(`(+${(percent - 100).toFixed(2)}%) than Last Week`)\n          } else {\n            setGrowth(`(-${(100 - percent).toFixed(2)}%) than Last Week`)\n          }\n        }\n      } else {\n        let lastMonth = month == 1 ? 12 : month - 1\n        let yearOfLastMonth = month == 1 ? year -1  : year\n        listReciept.map(value => {\n          let date = value.date.replace(/\\s/g, \"\")\n          date = date.split(\"/\")\n          if (date[1] == month && date[2] == year) {\n            if (!value.deleted) {\n              moneyCurrent += value.totalFinalMoney\n            }\n          }\n          if (date[1] == lastMonth && date[2] == yearOfLastMonth) {\n            if (!value.deleted) {\n              moneyLast += value.totalFinalMoney\n            }\n          }\n        })\n\n\n        if (moneyLast == 0 && moneyCurrent == 0) {\n          setGrowth('(+0%) than Last Month')\n        } else if (moneyLast == 0) {\n          setGrowth('(+100%) than Last Month')\n        } else if (moneyCurrent == 0) {\n          setGrowth('(+0%) than Last Month')\n        } else {\n          let percent = (moneyCurrent / moneyLast) * 100\n          if (percent >= 100) {\n            setGrowth(`(+${(percent - 100).toFixed(2)}%) than Last Month`)\n          } else {\n            setGrowth(`(-${(100 - percent).toFixed(2)}%) than Last Month`)\n          }\n        }\n      }\n    } else {\n      let lastMonth = month == 1 ? 12 : month - 1\n      let yearOfLastMonth = month == 1 ? year -1  : year\n      listReciept.map(value => {\n        let date = value.date.replace(/\\s/g, \"\")\n        date = date.split(\"/\")\n        if (date[1] == month && date[2] == year) {\n          if (!value.deleted) {\n            moneyCurrent += value.totalFinalMoney\n          }\n        }\n        if (date[1] == lastMonth && date[2] == yearOfLastMonth) {\n          if (!value.deleted) {\n            moneyLast += value.totalFinalMoney\n          }\n        }\n      })\n      if (moneyLast == 0 && moneyCurrent == 0) {\n        setGrowth('(+0%) than Last Month')\n      } else if (moneyLast == 0) {\n        setGrowth('(+100%) than Last Month')\n      } else if (moneyCurrent == 0) {\n        setGrowth('(+0%) than Last Month')\n      } else {\n        let percent = (moneyCurrent / moneyLast) * 100\n        if (percent >= 100) {\n          setGrowth(`(+${(percent - 100).toFixed(2)}%) than Last Month`)\n        } else {\n          setGrowth(`(-${(100 - percent).toFixed(2)}%) than Last Month`)\n        }\n      }\n    }\n\n\n\n\n\n    // if (type === 'Week' || type === 'Last Week') {\n    //   arrCurrent.map(date => {\n    //     let item = date.split(\" \");\n    //     listReciept.map(value => {\n    //       let valueDate = value.date.replace(/\\s/g, \"\")\n    //       valueDate = valueDate.split(\"/\")\n    //       if (!value.deleted) {\n    //         if (item[0] == valueDate[0] && item[1] == valueDate[1] && item[2] == valueDate[2]) {\n    //           moneyCurrent += value.totalFinalMoney\n    //         }\n    //       }\n    //     })\n    //   })\n\n    //   arrLast.map(date => {\n    //     let item = date.split(\" \");\n    //     listReciept.map(value => {\n    //       let valueDate = value.date.replace(/\\s/g, \"\")\n    //       valueDate = valueDate.split(\"/\")\n    //       if (!value.deleted) {\n    //         if (item[0] == valueDate[0] && item[1] == valueDate[1] && item[2] == valueDate[2]) {\n    //           moneyLast += value.totalFinalMoney\n    //         }\n    //       }\n    //     })\n    //   })\n\n    //   if (moneyLast == 0 && moneyCurrent == 0) {\n    //     setGrowth('(+0%) than Last Week')\n    //   } else if (moneyLast == 0) {\n    //     setGrowth('(+100%) than Last Week')\n    //   } else if (moneyCurrent == 0) {\n    //     setGrowth('(+0%) than Last Week')\n    //   } else {\n    //     let percent = (moneyCurrent / moneyLast) * 100\n    //     if (percent >= 100) {\n    //       setGrowth(`(+${(percent - 100).toFixed(2)}%) than Last Week`)\n    //     } else {\n    //       setGrowth(`(-${(100 - percent).toFixed(2)}%) than Last Week`)\n    //     }\n    //   }\n    // } else if (type == 'Month' || type == 'Last Month') {\n    //   let currentMonth = nowTime.getMonth() + 1\n    //   let lastMonth = nowTime.getMonth()\n    //   let year = nowTime.getFullYear()\n    //   listReciept.map(value => {\n    //     let date = value.date.replace(/\\s/g, \"\")\n    //     date = date.split(\"/\")\n    //     if (date[1] == currentMonth && date[2] == year) {\n    //       if (!value.deleted) {\n    //         moneyCurrent += value.totalFinalMoney\n    //       }\n    //     }\n    //     if (date[1] == lastMonth && date[2] == year) {\n    //       if (!value.deleted) {\n    //         moneyLast += value.totalFinalMoney\n    //       }\n    //     }\n    //   })\n    //   if (moneyLast == 0 && moneyCurrent == 0) {\n    //     setGrowth('(+0%) than Last Month')\n    //   } else if (moneyLast == 0) {\n    //     setGrowth('(+100%) than Last Month')\n    //   } else if (moneyCurrent == 0) {\n    //     setGrowth('(+0%) than Last Month')\n    //   } else {\n    //     let percent = (moneyCurrent / moneyLast) * 100\n    //     if (percent >= 100) {\n    //       setGrowth(`(+${(percent - 100).toFixed(2)}%) than Last Month`)\n    //     } else {\n    //       setGrowth(`(-${(100 - percent).toFixed(2)}%) than Last Month`)\n    //     }\n    //   }\n    // } else {\n    //   let currentYear = nowTime.getFullYear()\n    //   let lastYear = currentYear - 1;\n    //   listReciept.map(value => {\n    //     let date = value.date.replace(/\\s/g, \"\")\n    //     date = date.split(\"/\")\n    //     if (date[2] == currentYear) {\n    //       if (!value.deleted) {\n    //         moneyCurrent += value.totalFinalMoney\n    //       }\n    //     }\n    //     if (date[2] == lastYear) {\n    //       if (!value.deleted) {\n    //         moneyLast += value.totalFinalMoney\n    //       }\n    //     }\n    //   })\n    //   if (moneyLast == 0 && moneyCurrent == 0) {\n    //     setGrowth('(+0%) than Last Year')\n    //   } else if (moneyLast == 0) {\n    //     setGrowth('(+100%) than Last Year')\n    //   } else if (moneyCurrent == 0) {\n    //     setGrowth('(+0%) than Last Year')\n    //   } else {\n    //     let percent = (moneyCurrent / moneyLast) * 100\n    //     if (percent >= 100) {\n    //       setGrowth(`(+${(percent - 100).toFixed(2)}%) than Last Year`)\n    //     } else {\n    //       setGrowth(`(-${(100 - percent).toFixed(2)}%) than Last Year`)\n    //     }\n    //   }\n    // }\n  }\n\n\n  React.useEffect(() => {\n\n    if (typeMonth === 0) {\n      DateInYear(typeYear)\n      GrowthPercent(typeMonth, typeYear, typeTimeDashboard);\n      setTypeData(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']);\n      setShowOption(false);\n      setTitle('last year')\n    } else if (typeMonth !== 0 && typeMonth == nowTime.getMonth() + 1 && typeYear == nowTime.getFullYear()) {\n      setShowOption(true);\n      if (typeTimeDashboard === 'Week' || typeTimeDashboard === 'Last Week') {\n        let arrCurrent = DateInWeek('Week')\n        let arrLast = DateInWeek('Last Week')\n        setTypeData(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Sartuday', 'Sunday'])\n        totalMoneyInWeek(DateInWeek(typeTimeDashboard), typeTimeDashboard);\n        GrowthPercent(typeMonth, typeYear, typeTimeDashboard, arrCurrent, arrLast);\n        setTitle('last Week')\n      } else {\n        setShowOption(true);\n        totalMoneyInMonth(DateInMonth(typeMonth, typeYear, true), true, typeMonth, typeYear)\n        GrowthPercent(typeMonth, typeYear, typeTimeDashboard, '', '');\n      }\n    } else {\n      setShowOption(false);\n      totalMoneyInMonth(DateInMonth(typeMonth, typeYear, false), false, typeMonth, typeYear)\n      GrowthPercent(typeMonth, typeYear, typeTimeDashboard, '', '');\n    }\n\n    // if (typeTimeDashboard === 'Week' || typeTimeDashboard === 'Last Week') {\n    //   let arrCurrent = DateInWeek('Week')\n    //   let arrLast = DateInWeek('Last Week')\n    //   setTypeData(['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Sartuday', 'Sunday'])\n    //   totalMoneyInWeek(DateInWeek(typeTimeDashboard), typeTimeDashboard);\n    //   GrowthPercent(typeTimeDashboard, arrCurrent, arrLast);\n    //   setTitle('last Week')\n    // } else if (typeTimeDashboard === 'Month' || typeTimeDashboard === 'Last Month') {\n    //   totalMoneyInMonth(DateInMonth(typeTimeDashboard), typeTimeDashboard)\n    //   GrowthPercent(typeTimeDashboard);\n    //   setTitle('last month')\n    // } else {\n    //   DateInYear(typeTimeDashboard)\n    //   GrowthPercent(typeTimeDashboard);\n    //   setTypeData(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']);\n    //   setTitle('last year')\n    // }\n  }, [typeTimeDashboard, growth, typeMonth, typeYear])\n\n  return (\n    <Card>\n      <div className=\"titleStatistic\">\n        <CardHeader style={{ fontWeight: '800' }} title=\"Revenue\" subheader={growth} />\n        <div style={{ display: 'flex', justifyContent: 'end' }}>\n          <OptionYear></OptionYear>\n          <OptionMonth></OptionMonth>\n          {showOption ? (\n            <SplitButton></SplitButton>\n          ) : null}\n        </div>\n      </div>\n      <Box sx={{ p: 3, pb: 1 }} dir=\"ltr\">\n        <ReactApexChart type=\"line\" series={CHART_DATA} options={chartOptions} height={364} />\n      </Box>\n    </Card>\n  );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/GroupButtonDashboard.js",["1100"],"import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Grow from '@mui/material/Grow';\nimport Paper from '@mui/material/Paper';\nimport Popper from '@mui/material/Popper';\nimport MenuItem from '@mui/material/MenuItem';\nimport MenuList from '@mui/material/MenuList';\nimport { BiCaretDown } from 'react-icons/bi'\nimport { useDispatch } from 'react-redux';\n\nconst options = ['All', 'Today', 'Yesterday', 'Month', 'Year'];\n\nexport default function SplitButton() {\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n    const dispatch = useDispatch()\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\n\n    const handleClick = () => {\n        console.info(`You clicked ${options[selectedIndex]}`);\n    };\n\n    const handleMenuItemClick = (event, index, option) => {\n        dispatch({\n            type: \"TYPE_HEADER_DASHBOARD\",\n            typeDashboard: option\n        })\n        setSelectedIndex(index);\n        setOpen(false);\n    };\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    React.useEffect(() => {\n        dispatch({\n            type: \"RESET_TYPE_HEADER_DASHBOARD\"\n        })\n    }, [])\n\n    return (\n        <React.Fragment>\n            <ButtonGroup variant=\"contained\" className=\"button-group-customize\" ref={anchorRef} aria-label=\"split button\">\n                <Button onClick={handleClick}>{options[selectedIndex]}</Button>\n                <Button\n                    size=\"small\"\n                    aria-controls={open ? 'split-button-menu' : undefined}\n                    aria-expanded={open ? 'true' : undefined}\n                    aria-label=\"select merge strategy\"\n                    aria-haspopup=\"menu\"\n                    onClick={handleToggle}\n                >\n                    <BiCaretDown />\n                </Button>\n            </ButtonGroup>\n            <Popper\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                transition\n                disablePortal\n                style={{zIndex: 20}}\n            >\n                {({ TransitionProps, placement }) => (\n                    <Grow\n                        {...TransitionProps}\n                        style={{\n                            transformOrigin:\n                                placement === 'bottom' ? 'center top' : 'center bottom',\n                        }}\n                    >\n                        <Paper>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <MenuList id=\"split-button-menu\" style={{zIndex: 500}}>\n                                    {options.map((option, index) => (\n                                        <MenuItem\n                                            key={option}\n                                            selected={index === selectedIndex}\n                                            onClick={(event) => handleMenuItemClick(event, index, option)}\n                                            style={{zIndex: 500}}\n                                        >\n                                            {option}\n                                        </MenuItem>\n                                    ))}\n                                </MenuList>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Grow>\n                )}\n            </Popper>\n        </React.Fragment>\n    );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/TotalMoney.js",["1101","1102","1103","1104","1105","1106","1107","1108","1109","1110","1111","1112","1113","1114","1115","1116","1117","1118","1119","1120"],"import React from 'react';\nimport { Typography } from '@mui/material';\nimport { RiMoneyDollarCircleFill } from 'react-icons/ri'\nimport { useSelector } from 'react-redux'\nimport moment from 'moment'\n\nfunction TotalMoney(props) {\n    const typeHeaderDashboard = useSelector(state => state.typeHeaderDashboard);\n    const listReciept = useSelector(state => state.listReciept)\n    const [totalMoney, setTotalMoney] = React.useState('')\n\n    // console.log(\"ListReceipt\", listReciept);\n    let nowTime = new Date();\n\n    console.log(\"nowTime.getMonth\",moment().subtract(24, 'days').format('l'));\n\n    React.useEffect(() => {\n        let money = 0;\n        let currentMonth = nowTime.getMonth() + 1;\n        let lastMonth = new Date(moment().subtract(1, 'months'))\n        \n        if (typeHeaderDashboard == 'Today') {\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[0] == nowTime.getDate() && date[1] == currentMonth && date[2] == nowTime.getFullYear()) {\n                    if(!value.deleted) {\n                        money += value.totalFinalMoney\n                    }\n                }\n            })\n            setTotalMoney(money)\n        } else if (typeHeaderDashboard == 'Yesterday') {\n            let yesterdayTime = new Date(moment().subtract(1, 'days'))\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[0] == yesterdayTime.getDate() && date[1] == yesterdayTime.getMonth()+1 && date[2] == yesterdayTime.getFullYear()) {\n                    if(!value.deleted){\n                        money += value.totalFinalMoney\n                    }\n                }\n            })\n            setTotalMoney(money)\n        } else if (typeHeaderDashboard == 'Month') {\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[1] == lastMonth.getMonth() + 1 && date[2] == lastMonth.getFullYear()) {\n                    if(!value.deleted) {\n                        money += value.totalFinalMoney\n                    }\n                }\n            })\n            setTotalMoney(money)\n        } else if (typeHeaderDashboard == 'Year') {\n            listReciept.map(value => {\n                let date = value.date.replace(/\\s/g, \"\");\n                date = date.split(\"/\");\n                if (date[2] == nowTime.getFullYear()) {\n                    if(!value.deleted) {\n                        money += value.totalFinalMoney\n                    }\n                }\n            })\n            setTotalMoney(money)\n        } else if (typeHeaderDashboard == 'All') {\n            listReciept.map(value => {\n                if(!value.deleted) {\n                    money += value.totalFinalMoney\n                }\n            })\n            setTotalMoney(money)\n        }\n    }, [typeHeaderDashboard])\n\n    return (\n        <div className=\"dashboard-css\">\n            <div className=\"dashboard-item-img\" style={{ marginBottom: '30px' }}>\n                <RiMoneyDollarCircleFill className=\"dashboard-item-icon\"></RiMoneyDollarCircleFill>\n            </div>\n            <Typography style={{ marginBottom: '10px' }} variant=\"h6\">{totalMoney.toLocaleString()} VNĐ  \n            </Typography>\n            <Typography variant=\"subtitle2\" sx={{ opacity: 0.72 }}>\n                Total money\n            </Typography>\n        </div>\n    );\n}\n\nexport default TotalMoney;","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeMoreMenu.js",["1121","1122"],"import { Icon } from '@iconify/react';\nimport editFill from '@iconify/icons-eva/edit-fill';\nimport trash2Outline from '@iconify/icons-eva/trash-2-outline';\nimport moreVerticalFill from '@iconify/icons-eva/more-vertical-fill';\nimport {GiPayMoney} from \"react-icons/gi\";\nimport {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\n// material\nimport { Menu, MenuItem, IconButton, ListItemIcon, ListItemText } from '@mui/material';\n\n// ----------------------------------------------------------------------\n\nclass EmployeeMoreMenu extends Component {\n  currentEmployee = {};\n\n\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: 'false'\n    }\n    this.myRef = React.createRef();\n    this.getEmployeeByID(this.props.data);\n  }\n  setIsOpen(val) {\n    this.isOpen = val;\n    this.setState({change: val});\n    \n  }\n\n  edit() {\n    this.getEmployeeByID(this.props.data);\n    // console.log(\"send nude\", this.currentEmployee);\n    this.props.setUpdateEmployee(this.currentEmployee);\n    this.props.changeUpdateEmployeeStatus();\n  }\n\n  delete() {\n    const data = {\n      token: localStorage.getItem('token'),\n      employee:\n      [\n          {\n              employeeID: this.props.data,\n              storeID: this.props.infoUser.email, \n          },\n      ] \n    }\n    console.log(data);\n\n    axios.delete(`http://localhost:5000/api/employee`,{data: data})\n        .then(res => {\n            alert(\"delete employee(s) success\");\n        })\n        .catch(err => {\n            alert(err);\n        })\n    \n    //Move to sacked\n    this.props.deleteEmployeeToSackRedux(this.currentEmployee)\n    // Delete redux\n    this.props.deleteEmployeeRedux(this.props.data);\n\n    // Xoá hết shiftAssign\n    for(var i = 0; i < this.props.listShiftAssign.length; i++)\n    {\n        if(this.props.listShiftAssign[i]._id.employee._id.employeeID == this.props.data) \n        {\n          const data1 = {\n            token: localStorage.getItem('token'),\n            shiftAssign: {...this.props.listShiftAssign[i]}\n          }\n          console.log(\"data1\", data1)\n          axios.delete(`http://localhost:5000/api/employee/shift-assign`,{data: data1})\n          .then(res => {\n              // alert(\"success\");\n              // Xoá đi trong redux\n              this.props.RemoveShiftAssign(data1.shiftAssign);\n          })\n          .catch(err => {\n              alert(err);\n          })\n        }\n        \n    }\n\n  }\n\n  getEmployeeByID(employeeID) {\n    var listEmployee = this.props.listEmployee.employees;\n    console.log(listEmployee);\n    for(var i = 0; i < listEmployee.length ; i++)\n    {\n      if(employeeID == listEmployee[i]._id.employeeID)\n      {\n        this.currentEmployee = listEmployee[i];\n        return listEmployee[i];\n      }\n    }\n  }\n\n  viewEmployee()\n  {\n      console.log(\"this.props.data\", this.props.data)\n      this.props.setIDView(this.props.data);\n      this.props.changePayEmployeeStatus();\n  }\n\n  isOpen=false;\n  render() {\n    return (\n      <>\n        <IconButton ref={this.myRef} onClick={() => this.setIsOpen(true)}>\n          <Icon icon={moreVerticalFill} width={20} height={20} />\n        </IconButton>\n  \n        <Menu\n          style={{\n            position: 'absolute',\n            bottom: 0,\n            left: 0,\n          }}\n          open={this.isOpen}\n          onClose={() => this.setIsOpen(false)}\n          anchorEl={this.myRef.current}\n          // PaperProps={{\n          //   sx: { width: 200, maxWidth: '100%' }\n          // }}\n          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n          transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n        >\n          <MenuItem sx={{ color: 'text.secondary' }}\n            onClick={() => this.delete()}\n          >\n            <ListItemIcon>\n              <Icon icon={trash2Outline} width={24} height={24} />\n            </ListItemIcon>\n            <ListItemText primary=\"Delete\" primaryTypographyProps={{ variant: 'body2' }} />\n          </MenuItem>\n  \n          <MenuItem sx={{ color: 'text.secondary' }}\n            onClick={() => this.edit()}\n          >\n            <ListItemIcon>\n              <Icon icon={editFill} width={24} height={24} />\n            </ListItemIcon>\n            <ListItemText primary=\"Edit\" primaryTypographyProps={{ variant: 'body2' }} />\n          </MenuItem>\n          <MenuItem sx={{ color: 'text.secondary' }}\n            onClick={()=> this.viewEmployee()}\n          >\n            <ListItemIcon>\n              <GiPayMoney size={24}/> \n            </ListItemIcon>\n            <ListItemText primary=\"Pay money\" primaryTypographyProps={{ variant: 'body2' }} />\n          </MenuItem>\n        </Menu>\n      </>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    updateEmployeeStatus: state.updateEmpoyeeStatus,\n    payEmployeeStatus: state.payEmployeeStatus,\n    listEmployee: state.listEmployee,\n    infoUser: state.infoUser,\n    listShiftAssign: state.listShiftAssign,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n      changeUpdateEmployeeStatus: () => {\n          dispatch({\n              type: \"CHANGE_UPDATE_EMPLOYEE_STATUS\",\n          });\n      },\n      changePayEmployeeStatus: () => {\n        dispatch({\n            type: \"CHANGE_PAY_EMPLOYEE_STATUS\",\n        });\n      },\n      setUpdateEmployee: (currentEmployee) => {\n        dispatch({\n          type: \"SET_UPDATE_EMPLOYEE\",\n          data: currentEmployee\n        });\n      }, \n      deleteEmployeeRedux: (id) => {\n        dispatch({\n          type: \"DELETE_EMPLOYEE\",\n          id: id\n        });\n      },\n      deleteEmployeeToSackRedux: (data) => {\n        dispatch({\n          type: \"DELETE_EMPLOYEE_SACKED\",\n          data: data\n        });\n      },\n      setIDView: (id) => {\n        dispatch({\n          type: \"SET_ID_EMPLOYEE\",\n          id: id\n        });\n      },\n      RemoveShiftAssign: (data) => {\n        dispatch({\n            type: \"DELETE_SHIFT_ASSIGN\",\n            data: data,\n        });\n      }\n  }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(EmployeeMoreMenu);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/EmployeeToolbar.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/SearchNotFound.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Scrollbar.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Label.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/Page.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/AddGoodModal.js",["1123","1124","1125","1126","1127","1128","1129","1130","1131","1132","1133","1134","1135","1136","1137","1138","1139","1140","1141"],"import React, { Component } from 'react';\nimport { TextField } from '@mui/material';\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport { InputLabel, Button, Modal, Grid, Card, CardHeader, Divider, CardContent} from '@mui/material';\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport { connect } from 'react-redux';\nimport GoodImage from '../../img/good-example.jpg';\nimport AddTypeModal from './AddTypeModal';\nimport { withStyles } from '@material-ui/styles';\nimport { AiFillPlusCircle} from \"react-icons/ai\";\nimport DateTimePicker from '@mui/lab/DateTimePicker';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport ConfirmModal from './ConfirmModal';\nimport { GiConsoleController } from 'react-icons/gi';\nimport {\n    Link\n} from \"react-router-dom\";\n\n// Use for choose type:\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nclass AddGoodModal extends Component {\n    imgUrl= 'none';\n    dateTime= Date.now();\n    currentDateTime = '2021-01-02';\n    finishUpImage = true;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            imageSelect: \"null\",\n            type:'none',\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\n            change: false,\n        }; \n        //this.loadAllType(); \n        // this.loadAllGood();\n\n        this.currentDateTime = this.getCurrentDateTime();\n        typeSet = [];\n        // console.log(\"typeProduct\", this.props.typeProduct);\n        var listProductInfor = this.props.listProduct.state;\n        if(listProductInfor.length > 0)\n        {\n            this.generatedID = parseInt(listProductInfor[listProductInfor.length-1]._id.productID) + 1;\n        } \n        this.setState({change: !this.state.change})\n    }\n    \n    getCurrentDateTime()\n    {\n        var currentDate = new Date();\n        var day = (currentDate.toString().split(' '))[2];\n        if(day.length < 2)\n        {\n            day = '0' + day;\n        }\n        var month = (new Date().getMonth() + 1).toString();\n        if(month.length<2)\n        {\n            month = '0' + month;\n        }\n        return new Date().getFullYear() + '-' + month + '-' + day;\n    }\n\n    handleAdd(){\n        this.props.changeAddTypeStatus();\n        this.props.setAddTypeStatus();\n    }\n    \n    async profileImageChange(fileChangeEvent) {\n        this.setState({\n            imageSelect: fileChangeEvent.target.files[0],\n        })\n        this.finishUpImage = false;\n        const file = fileChangeEvent.target.files[0];\n        const { type } = file;\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\n        } else {\n            const formData = new FormData();\n            formData.append(\"file\", fileChangeEvent.target.files[0])\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\n            await axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\n                .then(res => {\n                    this.imgUrl=res.data.url;\n                    this.setState({\n                        change: 'true'\n                    });\n                })\n                .catch(err => {\n                    console.log(\"Thất bại\");\n                })\n        }\n        this.finishUpImage = true;\n    }\n    async importGood(e) {\n        // Ngăn chuyển trang\n\n        var isContinue = this.checkConstraint();\n        if(!isContinue)\n        {\n            e.preventDefault();\n            return;\n        }\n        // // Thêm hàng hoá\n        const data = {\n            token: localStorage.getItem('token'),\n            product: {\n                _id: {\n                    productID: this.generatedID,\n                    importDate: document.querySelector('input[name=\"importDate\"]').value,\n                    storeID: this.props.infoUser.email,\n                },\n                name: document.querySelector('input[name=\"goodName\"]').value,\n                quantity: document.querySelector('input[name=\"goodQuantity\"]').value,\n                remain: document.querySelector('input[name=\"goodQuantity\"]').value,\n                importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\n                sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\n                imgUrl: this.imgUrl,\n                unit: document.querySelector('input[name=\"unit\"]').value,\n            }   \n        }\n        console.log(data);\n\n        axios.post(`http://localhost:5000/api/product`, data)\n            .then(res => {\n                console.log(\"Save success\");\n                alert(\"Lưu thành công\")\n            })\n            .catch(err => {\n                alert(err);\n                console.log(err);\n            })\n\n        //Thêm vào bảng joinType nữa\n\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\n        for(var i = 0 ; i < typeSet.length ; i++)\n        {\n            const data1 = {\n                token: localStorage.getItem('token'),\n                productJoinType: {\n                    _id : {\n                        productID: this.generatedID,\n                        typeID: typeSet[i], \n                        importDate: document.querySelector('input[name=\"importDate\"]').value,\n                        storeID: this.props.infoUser.email,\n                    }\n                }\n            }\n            axios.post(`http://localhost:5000/api/product/join`, data1)\n                .then(res => {\n                    console.log(\"lưu vô bảng join thành công\");\n                })\n                .catch(err => {\n                    console.log(err);\n                })\n        }\n        this.props.changeStatusAddGood();\n        // Thêm vào redux\n        var dataRedux = {\n            _id: {\n                productID: this.generatedID.toString(),\n                importDate: document.querySelector('input[name=\"importDate\"]').value + 'T00:00:00.000+00:00',\n                storeID: this.props.infoUser.email,\n            },\n            name: document.querySelector('input[name=\"goodName\"]').value,\n            quantity: document.querySelector('input[name=\"goodQuantity\"]').value,\n            remain: document.querySelector('input[name=\"goodQuantity\"]').value,\n            importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\n            sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\n            expires: document.querySelector('input[name=\"expiredDate\"]').value + 'T00:00:00.000+00:00',\n            imgUrl: this.imgUrl,\n            unit: document.querySelector('input[name=\"unit\"]').value,\n            typeIDList: typeSet,\n        }\n        // console.log(\"dataRedux\", dataRedux); \n        this.props.addProductToRedux(dataRedux);\n        // console.log(data);\n        console.log(\"this.props.listProduct.state\", this.props.listProduct.state)\n    }\n    \n    checkConstraint = () => {\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\n        // Constraint 1: Check name\n        var productName =  document.querySelector('input[name=\"goodName\"]').value;\n        if(productName.length == 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Tên sản phẩm không được trống\",\"warning\");\n            return false;\n        }\n        // Constraint 2: Check quantity\n        if(document.querySelector('input[name=\"goodQuantity\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value) <= 0) \n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\n            alert('Số lượng sản phẩm phải lớn hơn 0');\n            return false;\n        }\n        // Constraint 3: check Unit\n        if(document.querySelector('input[name=\"unit\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Số lượng sản phẩm không được trống\",\"warning\");\n            alert('Đơn vị của sản phẩm không được trống');\n            return false;\n        }\n        // Constraint 4: Check import Price\n        if(document.querySelector('input[name=\"originalPrice\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Giá nhập không được trống\",\"warning\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <= 0) \n        {\n            this.props.hideAlert();\n            this.props.showAlert('Giá nhập phải lớn hơn 0',\"warning\");\n            return false;\n        }\n        // Constraint 5: check sell Price\n        if(document.querySelector('input[name=\"sellPrice\"]').value.length == 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert(\"Giá bán không được trống\",\"warning\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"sellPrice\"]').value) <= 0) \n        {\n            this.props.hideAlert();\n            this.props.showAlert('Giá bán phải lớn hơn 0',\"warning\");\n            return false;\n        }\n        // Constraint 6: Ngày nhập phải nhỏ  hơn ngày hết hạn\n        if (\n            (\n                new Date(document.querySelector('input[name=\"importDate\"]').value).getTime()\n                - \n                new Date(document.querySelector('input[name=\"expiredDate\"]').value).getTime()\n            ) >= 0)\n        {\n            this.props.hideAlert();\n            this.props.showAlert('Không thể nhập hàng hết hạn',\"warning\");\n            return false;\n        }\n        // Constraint 7: Check giá gốc nhỏ hơn giá bán\n        if(\n            parseInt(document.querySelector('input[name=\"sellPrice\"]').value) \n            - \n            parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <=0\n            ) \n        {\n            this.props.hideAlert();\n            this.props.showAlert('Giá bán phải lớn hơn giá gốc',\"warning\");\n            return false;\n        }\n        // Constraint 8: check xem đã  up ảnh lên xong chưa\n        if(this.finishUpImage == false)\n        {\n            this.props.hideAlert();\n            this.props.showAlert('Ảnh chưa được upload xong',\"warning\");\n            return false;\n        }\n        return true;\n    }\n\n    generatedID = 0;\n\n    getTypeNamebyTypeID (typeID) {\n        var typeName='Fuck';\n        for(var i = 0; i< this.props.typeProduct.length;i++)\n        {   \n            if(this.props.typeProduct[i]._id.typeID == typeID)\n            {\n                typeName = this.props.typeProduct[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    foundTypeInSet(typeID) {\n        for(var i = 0 ; i < typeSet.length; i++)\n        {\n            if(typeSet[i]==typeID._id.typeID) return true;\n        }\n        return false;\n    }\n    \n    render() {\n        return(\n            <form style={{ zIndex: '10', minWidth: '500px', width: '1000px', justifyContent: 'center', marginTop: '10%' }}>   \n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"ADD GOOD\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid className=\"import-container\" container spacing={2}>\n                        <Grid item md={3}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                paddingLeft: '30px'\n                            }}\n                        >   \n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden', marginTop: '15px ' }}>\n                                <Image style={{width: '240px',height: '240px', padding: '10px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            {/* Ẩn đi */}\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                        </Grid>\n                        <Grid item md={9}>\n                                    <Grid container md={12}>\n                                        <Grid item md={6} \n                                            className='input-item'\n                                        >\n                                            <div \n                                                className=\"input-label\"\n                                                style={{\n                                                    width: '130px'\n                                                }}\n                                            >\n                                                ID\n                                            </div>\n                                            <StyledTextField\n                                                classname='input-box' \n                                                type=\"text\" \n                                                // class=\"input-val\" \n                                                style = {{width: '60%'}} \n                                                fullWidth \n                                                size=\"small\" \n                                                name=\"goodID\" \n                                                variant=\"outlined\"\n                                                value={this.generatedID}\n                                                readOnly={true}\n                                                disabled={true}\n                                            />\n                                        </Grid>\n                                        <Grid item md={6} \n                                            className='input-item'\n                                            style={{\n                                                marginLeft: 0,\n                                                paddingLeft: 0,\n                                            }}\n                                        >\n                                            <div className=\"input-label\" style={{width: 110}}>Import Date</div>\n                                            <StyledTextField\n                                                classname='input-box'   \n                                                type=\"date\" \n                                                style = {{width: '68%'}} \n                                                fullWidth\n                                                name=\"importDate\"\n                                                size=\"small\"\n                                                variant=\"outlined\"\n                                                defaultValue={this.currentDateTime}\n                                            />\n                                        </Grid>\n                                        \n                                        <Grid item md={6} \n                                            className='input-item'\n                                        >\n                                            <div className=\"input-label\"style={{width: '130px'}}>Name</div>\n                                            <StyledTextField\n                                                classname='input-box'   \n                                                type=\"text\" \n                                                // class=\"input-val\" \n                                                style = {{width: '60%'}} \n                                                fullWidth\n                                                size=\"small\"\n                                                name=\"goodName\" \n                                                variant=\"outlined\" \n                                            />\n                                        </Grid>\n                                        <Grid item md={4}\n                                            className='input-item'\n                                            style={{padding: '0px', marginLeft: '0px'}}\n                                        >\n                                            <div \n                                                className=\"input-label\" \n                                                style={{width: '120px'}}\n                                            >\n                                                Quantity\n                                            </div>\n                                            <StyledTextField\n                                                style = {{width: '60%'}} \n                                                fullWidth\n                                                name=\"goodQuantity\" \n                                                variant=\"outlined\"\n                                                type=\"number\"\n                                            />\n                                        </Grid>\n                                        <Grid item md={2}\n                                            className='input-item'\n                                            style={{\n                                                paddingRight: 12\n                                            }}\n                                        >\n                                            <div \n                                                className=\"input-label\"\n                                                style={{\n                                                    marginLeft: 0,\n                                                    paddingLeft: 4,\n                                                    width: 40\n                                                }}\n                                            >\n                                                Unit\n                                            </div>\n                                            <StyledTextField\n                                                classname='input-box'\n                                                style = {{width: '100%', marginLeft: '4px'}} \n                                                fullWidth\n                                                variant=\"outlined\"\n                                                type=\"text\" \n                                                name=\"unit\" \n                                            />\n                                        </Grid>\n                                        <Grid item md={6}\n                                            className='input-item'\n                                        >\n                                            <div className=\"input-label\" style={{width: 128}}>Original Price</div>\n                                            <StyledTextField\n                                                classname='input-box'\n                                                style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \n                                                fullWidth\n                                                name=\"originalPrice\" \n                                                variant=\"outlined\"\n                                                type=\"number\" \n                                            />\n                                            đ\n                                        </Grid>\n                                        <Grid item md={6}\n                                            className='input-item'\n                                            style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\n                                        >\n                                            <div \n                                                className=\"input-label\"\n                                                style={{width: '130px'}}\n                                            >\n                                                Sell Price\n                                            </div>\n                                            <StyledTextField\n                                                classname='input-box'\n                                                style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \n                                                fullWidth\n                                                name=\"sellPrice\" \n                                                variant=\"outlined\"\n                                                type=\"number\" \n                                            />\n                                            đ\n                                        </Grid>\n                                        <Grid item md={7} \n                                            className='input-item'\n                                        >\n                                            <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\n                                            <StyledTextField\n                                                classname='input-box'   \n                                                type=\"date\" \n                                                style = {{width: '70%'}} \n                                                fullWidth\n                                                size=\"small\"\n                                                name=\"expiredDate\" \n                                                variant=\"outlined\"\n                                                defaultValue={this.currentDateTime}\n                                            />\n                                        </Grid>\n                                        <Grid item md={12}\n                                            className='input-item'\n                                        >\n                                            <div \n                                                className=\"input-label\"\n                                                style={{width:132}}\n                                            >\n                                                Product Type\n                                            </div>\n                                            <FormControl sx={{ minWidth: 120 }}>\n                                                <Select\n                                                    value={this.state.type}\n                                                    onChange={(event) => {\n                                                        this.setState({type: event.target.value});\n                                                        if(!typeSet.includes(event.target.value))\n                                                        {\n                                                            typeSet.push(event.target.value);\n                                                        }\n                                                        this.setState({change: !this.state.change})\n                                                    }}\n                                                    style={{\n                                                        height: 36,\n                                                    }}\n                                                >\n                                                    {\n                                                        this.props.typeProduct.length== 0 ? <MenuItem value={'none'}>None</MenuItem>:\n                                                        this.props.typeProduct.map((type) =>\n                                                            this.foundTypeInSet(type) ? null :\n                                                            <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\n                                                        )\n                                                    }   \n                                                </Select> \n                                            </FormControl>\n                                            <Button onClick={() => this.handleAdd()}>\n                                                <AiFillPlusCircle\n                                                    size={28}\n                                                    style={{\n                                                        fontSize: 28,\n                                                        margin: 0,\n                                                        padding: 0,\n                                                        width: 28,\n                                                        height: 28\n                                                    }}    \n                                                />\n                                            </Button>\n                                            <div className='all-type-container'>\n                                                {\n                                                    Array.from(typeSet).map((type) =>\n                                                        <div className='type-container'>\n                                                            \n                                                            <CancelIcon\n                                                                className='close-icon'\n                                                                size={10}\n                                                                onClick={() => {\n                                                                    typeSet = typeSet.filter(function(item) {\n                                                                        return item != type;\n                                                                    })\n                                                                    console.log(typeSet);\n                                                                    this.setState({type: 'none'});\n                                                                }}\n                                                    \n                                                            />\n                                                            <span className='type-title'>\n                                                                {this.getTypeNamebyTypeID(type)}\n                                                            </span>\n                                                        </div>\n                                                        \n                                                    )\n                                                }\n                                            </div>\n                                        </Grid>\n                                    </Grid>\n                            </Grid>\n                        </Grid> \n                    </CardContent>\n                    <Divider />    \n                    <div\n                        style={{\n                            display: 'flex',\n                            justifyContent: 'space-evenly',\n                            margin: 10\n                        }}\n                    >\n                        <Button className=\"btn btn-primary\" variant=\"contained\" onClick={(e) => this.props.changeStatusAddGood()}>\n                            Cancel\n                        </Button>\n                        <Button className=\"btn btn-primary\" variant=\"contained\" onClick={(e) => this.importGood(e)}>\n                            IMPORT\n                        </Button> \n                    </div>\n                                   \n                </Card>    \n                {this.props.addTypeStatus ? (\n                    <div className=\"modal-add\">\n                        <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\n                        <AddTypeModal></AddTypeModal>\n                    </div>\n                ): null}\n                {this.props.confirmStatus ? (\n                    <div className=\"modal-add\">\n                        <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\n                        <ConfirmModal></ConfirmModal>\n                    </div>\n                ): null}\n            </form>\n        );        \n    }\n}\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        infoUser: state.infoUser,\n        isAddTypeStatus: state.isAddTypeStatus,\n        confirmStatus: state.confirmStatus,\n        typeProduct: state.typeProduct,\n        listProduct: state.listProduct,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        updateAvatar: (avatar) => {\n            dispatch({\n                type: \"UPDATE_AVATAR\",\n                avatar: avatar\n            })\n        },\n        setAddTypeStatus: () => {\n            dispatch({\n                type: \"SET_ADD_TYPE_STATUS\",\n            });\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        setConfirm: () => {\n            dispatch({\n                type: \"SET_CONFIRM_IMPORT_GOOD\",\n            });\n        },\n        showAlert: (message, typeMessage) => {\n            dispatch({\n                type: \"SHOW_ALERT\",\n                message: message,\n                typeMessage: typeMessage,\n            })\n        },\n        hideAlert: () => {\n            dispatch({\n                type: \"HIDE_ALERT\",\n            })\n        },\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n        getProductType: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_TYPE\",\n                data: data\n            });\n        },\n        changeStatusAddGood: () => {\n            dispatch({\n                type: \"CHANGE_ADD_GOOD_STATUS\",\n            }); \n        },\n        addProductToRedux: (data) => {\n            dispatch({\n                type: \"ADD_PRODUCT\",\n                data: data,\n            }); \n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddGoodModal);\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/UpdateTypeModal.js",["1142","1143","1144","1145","1146","1147","1148","1149","1150"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Alert } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel, GiVampireCape } from 'react-icons/gi'\nimport axios from 'axios';\n\nvar listTypeInfor = [];\n\nclass UpdateTypeModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state= {\n            change: 'false'\n        }\n        this.loadInitialData();\n        this.getAllTypeList();\n    }\n    storeID = \"\";\n    typeList = [];\n\n    async getAllTypeList(){\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        console.log(data.token);\n        // alert(data.token);\n        console.log(data.filter);\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                alert(err);\n            })\n        //Get data và lưu các tên Type vào bảng\n        for(var i=0; i < result.length ; i++)\n        {\n            listTypeInfor.push(result[i]);\n        }\n    }\n    addType = () => {\n        var newTypeName = document.querySelector('input[name=\"typeName\"]').value.trim();\n        if(this.checkConstraint(newTypeName)==false)  return;\n        var genTypeID = 0;\n        if(listTypeInfor.length>0)\n        {\n            genTypeID = parseInt(listTypeInfor[listTypeInfor.length-1]._id.typeID) + 1;\n        } \n        const data = {\n            token: localStorage.getItem('token'),\n            productType: {\n                _id:{\n                    typeID: genTypeID,\n                    storeID: this.props.infoUser.email,\n                },\n                name: newTypeName,\n            }    \n        }\n        axios.post(`http://localhost:5000/api/product/type`, data)\n            .then(res => {\n                alert(\"Save success\");\n                //TODO: Cập nhật token ở đây nữa\n            })\n            .catch(err => {\n                alert(err);\n            })\n        this.props.changeAddTypeStatus();\n    }\n    \n    checkConstraint(typeName) {\n        //Constraint 1: Check name\n        for(var i=0;i<listTypeInfor.length;i++)\n        {\n            if(listTypeInfor[i].name==typeName)\n            {\n                if(typeName.trim()==this.props.typeProductValue.name)\n                {\n                    alert(\"Không đổi tên à anh zai\");\n                    return false;\n                }\n                alert(\"Trùng tên rồi anh chai\");\n                return false;\n            }\n            \n        }        \n        // Constraint 2: Not blank\n        if(typeName.length==0)\n        {\n            alert(\"Không nhập gì à anh chai\")\n            return false;\n        }\n        return true;\n\n    }\n    cancel = () => {\n        this.props.changeStatusUpdateType();\n    }\n\n    handle = () => {\n        this.editType();\n    }\n\n    editType = () => {\n        var newTypeName = this.typeName;\n        if(this.checkConstraint(newTypeName)==false) return;\n        const data = {\n            token: localStorage.getItem('token'),\n            productType: {\n                _id: {\n                    typeID: this.props.typeProductValue._id.typeID,\n                    storeID: this.props.infoUser.email,\n                }, \n                name: newTypeName,\n            }\n        }\n        // alert(data.product.name)\n        axios.put(`http://localhost:5000/api/product/type`, data)\n            .then(res => {\n                // Có khi mình sẽ cập nhật type ở dây\n                console.log(\"Update success\");\n                alert('update được rồi anh trai')\n            })\n            .catch(err => {\n                console.log(err);\n                alert(\"Lỗi gì cmnr\")\n            })\n        this.props.changeStatusUpdateType();\n        this.props.updateNameToRedux(data.productType);\n        // this.loadAllGood();\n        // console.log(\"Cập nhập redux nào mấy anh\")\n        // this.props.updateNameToProductRedux(data.productType);\n        // this.props.changeEditTypeStatus();\n    }\n\n    getTypeNamebyTypeID (typeID) {\n        var typeName=\"Null\";\n        console.log(\"typeList\", this.props.typeProduct);\n        for(var i = 0; i < this.props.typeProduct.length;i++)\n        {   \n            if(this.props.typeProduct[i]._id.typeID == typeID)\n            {\n                typeName = this.props.typeProduct[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    async loadAllGood() {\n        var resultProduct = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }\n        }\n        await axios.get(`http://localhost:5000/api/product/`, {\n            params: { ...data }\n        })\n            .then(res => {\n                resultProduct = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err)\n            })\n        // Get hết từ cái productjoinType\n        var result = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, {\n            params: { ...data1 }\n        })\n            .then(res => {\n                result = res.data.data;\n                localStorage.getItem('token', res.data.token);\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err)\n            })\n        // Lấy các cái jointype\n        var joinTypeInfor = [];\n        for (let i = 0; i < result.length; i++) {\n            joinTypeInfor.push(result[i]);\n        }\n        console.log(\"joinTypeInfor\", joinTypeInfor);\n\n        var listProductInfor = [];\n        for (let i = 0; i < resultProduct.length; i++) {\n            var typeIDList = [];\n            var joinType = '';\n            for (var j = 0; j < joinTypeInfor.length; j++) {\n                if (resultProduct[i]._id.productID && joinTypeInfor[j]._id.productID &&\n                    resultProduct[i]._id.productID === joinTypeInfor[j]._id.productID) \n                {\n                    typeIDList.push(joinTypeInfor[j]._id.typeID);\n                    joinType = joinType + ' ' + this.getTypeNamebyTypeID(joinTypeInfor[j]._id.typeID);\n                }\n            }\n\n            listProductInfor.push(\n                {\n                    ...resultProduct[i],\n                    typeIDList: typeIDList,\n                    joinType: joinType\n                });\n        }\n        this.props.getProductToReducer(listProductInfor);\n    }\n\n    typeName = \"\";\n    loadInitialData = () => {\n        this.typeName = this.props.typeProductValue.name;\n        this.setState({change: true});\n    }\n\n    changeTypeName(e)\n    {\n        this.typeName = e.target.value;\n    }\n    render() {\n        return (\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader \n                        style={{ color: 'blue', backgroundColor: '#efeeef', textAlign: 'center' }} \n                        title={\"Update Type\"}\n                        />\n                    <Divider />\n                    <CardContent>\n                        <Grid \n                            container \n                            spacing={2}\n                            justifyContent={'center'}\n                            alignItems={'center'}\n                        >\n                            <Grid item md={2} xs={12}>\n                                TypeName\n                            </Grid>\n                            <Grid item md={10} xs={12}>\n                                <TextField\n                                    id=\"outlined-basic\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    required\n                                    type=\"text\"\n                                    name=\"typeName\"\n                                    defaultValue={this.typeName}\n                                    onChange={(e) => this.changeTypeName(e)}\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <Stack spacing={3}>\n                                   \n                                </Stack>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        <Button \n                            style={{ backgroundColor: 'yellowgreen' }} \n                            // onClick={() => this.addShift()} \n                            onClick={() => this.handle()}\n                            variant=\"contained\" \n                            startIcon={<BiPlusMedical />}\n                        >\n                            Xác nhận\n                        </Button>\n                        <Button \n                            style={{ backgroundColor: 'red' }} \n                            // onClick={() => this.editShift()}\n                            onClick={() => this.cancel()}\n                            variant=\"contained\" \n                            startIcon={<GiCancel />}\n                        >\n                            Cancel\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        typeProduct: state.typeProduct,\n        infoUser: state.infoUser,\n        typeProductValue: state.typeProductValue\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeEditTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\n            });\n        },\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        addTypeToReducer: (data) => {\n            dispatch({\n                type: \"ADD_TYPE\",\n                data: data,\n            });\n        },\n         changeStatusUpdateType: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_TYPE_STATUS\",\n            }); \n        },\n        updateNameToRedux: (data) => {\n            dispatch({\n                type: \"UPDATE_TYPE\",\n                data: data,\n            });\n        },\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateTypeModal);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/ConfirmModal.js",["1151","1152","1153","1154","1155","1156"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport axios from 'axios';\n\nclass ConfirmModal extends Component {\n    constructor(props) {\n        super(props);\n    }\n    confirm = () => {\n        // Thực hiện các lệnh xử lý tại đây\n        this.props.changeConfirmStatus();\n        this.props.setConfirm();\n    }\n\n    cancel = () => {\n        this.props.changeConfirmStatus();\n        this.props.setQuit();\n    }\n\n    getMessage = ()  => {\n        var message = \"Cái này chưa code\";\n        switch(this.props.confirmCode)\n        {\n            case 'confirm-delete-good':\n                message = \"Are you sure to delete this product ?\";\n            case 'confirm-import-good':\n                message = \"Are you sure to import this product ?\";\n        }\n        return (\n            <div>\n                {message}\n            </div>\n        );\n    }\n    render() {\n        console.log(this.props.objectEditShift);\n        return (\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"Confirm\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <Grid item md={12} xs={12}>\n                                {this.getMessage()}\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <Stack spacing={3}>\n                                   \n                                </Stack>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        <Button style={{ backgroundColor: 'yellowgreen' }} onClick={() => this.confirm()} variant=\"contained\" startIcon={<BiPlusMedical />}>\n                            Xác nhận\n                        </Button>\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\n                            Hủy\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        confirmStatus: state.confirmStatus,\n        deleteStatus: state.deleteStatus,\n        confirmCode: state.confirmCode,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        setConfirm: () => {\n            dispatch({\n                type: \"CONFIRM\",\n            });\n        },\n        setQuit: () => {\n            dispatch({\n                type: \"QUIT\",\n            });\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmModal);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/EditTypeModal.js",["1157","1158"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit} from 'react-icons/bi';\nimport { TiDelete } from \"react-icons/ti\";\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport axios from 'axios';\n\nclass EditTypeModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            change: false\n        }\n    }\n    confirm = () => {\n        // Thực hiện các lệnh xử lý tại đây\n        this.props.changeConfirmStatus();\n    }\n    cancel = () => {\n        // this.props.changeConfirmStatus();\n        this.props.changeEditTypeStatus();\n    }\n    edit = (type) => {\n        // this.props.setEditTypeStatus();\n        this.props.typeToUpdate(type);\n        // this.props.changeEditTypeStatus();\n        this.props.changeStatusUpdateType();\n    }\n    async delete(type){\n        const data = {\n            token: localStorage.getItem('token'),\n            productTypes:\n            [\n                {\n                    typeID: type._id.typeID,\n                    storeID: type._id.storeID\n                }\n            ]\n                \n        }\n        await axios.delete(`http://localhost:5000/api/product/type`,{data: data})\n            .then(res => {\n                console.log(\"delete success\");\n            })\n            .catch(err => {\n                alert(err);\n                // alert(\"Lỗi gì cmnr\")\n            })\n        this.props.deleteTypeFromRedux(data.productTypes[0]);\n\n        // Ở đây mình phải cập nhật join nữa\n        // Phải get tất cả cái join mà có cái type là type hiện tại\n\n\n        var allJoinMatch = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n                \"_id.typeID\": type._id.typeID,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, \n        {\n            params: {...data1}\n        })\n            .then(res => {\n                allJoinMatch = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n\n        var allProductJoin = [];\n        for(var i = 0 ; i < allJoinMatch.length; i++)\n        {\n            allProductJoin.push({\n                productID: allJoinMatch[i]._id.productID,\n                typeID: type._id.typeID,\n                importDate: allJoinMatch[i]._id.importDate,\n                storeID: this.props.infoUser.email,\n                \n            });\n        }\n        \n        const dataJoin = {\n            token: localStorage.getItem('token'),\n            productJoinTypes: allProductJoin,      \n        }\n\n        console.log(dataJoin);\n\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\n            .then(res => {\n                console.log(\"delete join success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n        this.setState({change: !this.state.change})\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '10', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' }} title=\"All Good Type\" />\n                    <Divider />\n                    <CardContent>\n                        <Grid container spacing={2}>\n                            <Grid container item md={12} xs={12} spacing={0}>\n                                { this.props.typeProduct.map((type) => (\n                                    <Grid item md={3} style={{border:'1px solid #333', padding: 4}}>\n                                        <span>{type.name}</span>\n                                        <BiEdit onClick={() => this.edit(type)}/>\n                                        <TiDelete onClick={() => this.delete(type)}/>\n                                    </Grid>\n                                ))}\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <Stack spacing={3}>\n                                   \n                                </Stack>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        <Button style={{ backgroundColor: 'red' }} onClick={(e) => this.cancel(e)} variant=\"contained\" startIcon={<GiCancel />}>\n                            Thoát\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        editTypeStatus: state.editTypeStatus,\n        addTypeStatus: state.addTypeStatus,\n        isAddTypeStatus: state.isAddTypeStatus,\n        infoUser: state.infoUser,\n        typeProductValue: state.typeProductValue,\n        typeProduct: state.typeProduct,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeEditTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\n            });\n        },\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        setEditTypeStatus: () => {\n            dispatch({\n                type: \"SET_EDIT_TYPE_STATUS\",\n            })\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        typeToUpdate: (data) => {\n            dispatch({\n                type: \"UPDATE_PRODUCT_TYPE\",\n                _id: {\n                    typeID: data._id.typeID,\n                    storeID: data._id.storeID,\n                },\n                name: data.name\n            })\n        },\n        changeStatusUpdateType: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_TYPE_STATUS\",\n            }); \n        },\n        deleteTypeFromRedux: (data) => {\n            dispatch({\n                type: \"DELETE_TYPE\",\n                data: data\n            });\n            \n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditTypeModal);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/UpdateGoodModal.js",["1159","1160","1161","1162","1163","1164","1165","1166","1167","1168","1169","1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181","1182","1183","1184","1185"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, InputLabel } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel } from 'react-icons/gi'\nimport Select from '@mui/material/Select';\nimport MenuItem from '@mui/material/MenuItem';\nimport FormControl from '@mui/material/FormControl';\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport '../../css/GoodManager.css';\nimport GoodImage from './goodExample.jpg';\nimport AddTypeModal from './AddTypeModal';\nimport { withStyles } from '@material-ui/styles';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport DatePicker from '@mui/lab/DatePicker';\nimport DateTimePicker from '@mui/lab/DateTimePicker';\nimport { AiFillPlusCircle} from \"react-icons/ai\";\nimport CancelIcon from '@mui/icons-material/Cancel';\nimport ConfirmModal from './ConfirmModal';\n\nvar productTypes =[];\nvar listTypeInfor=[];\n// typeSet chứa id của các cái type\nvar typeSet = [];\n\nconst StyledTextField = withStyles((theme) => ({\n    root: {\n      \"& .MuiInputBase-root\": {\n        height: 36,\n        \"& input\": {\n          textAlign: \"right\",\n          marginLeft: '4px',\n        }\n      }\n    }\n  }))(TextField);\n\nclass UpdateGoodModal extends Component {\n    constructor(props) {\n        super(props);\n        \n        this.state = {\n            goodID : \"\",\n            change: false,\n            imageSelect: \"null\",\n            type:'none',\n            url: 'http://res.cloudinary.com/databaseimg/image/upload/v1634117795/ubvxisehhpvnu2lbqmeg.png',\n        }; \n        typeSet = [];\n        this.loadInitialData();\n        this.loadAllType();\n        this.loadCurrentTypes();\n        \n    }\n    imgUrl='none';\n    goodID='';\n    importDate='';\n    name='';\n    imgUrl='';\n    quantity = 0;\n    remain = 0;\n    unit = \"\";\n    importPrice = \"\";\n    sellPrice = \"\";\n    expire =\"\";\n    finishUpImage = true;\n\n    async loadAllType() {\n        var result = [];\n        const data = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n            }   \n        }\n\n        await axios.get(`http://localhost:5000/api/product/type`, \n        {\n            params: {...data}\n        })\n            .then(res => {\n                result = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        //Get data và lưu các tên Type vào bảng\n        listTypeInfor=[];\n        for(var i=0; i < result.length ; i++)\n        {\n            listTypeInfor.push(result[i]);\n        }\n        productTypes=[];\n        for(var i=0 ; i< listTypeInfor.length ; i ++)\n        {\n            productTypes.push(listTypeInfor[i].name);\n        }\n        this.setState({change: true});\n    }\n\n    async loadCurrentTypes() {\n        // Get hết các cái join của sản phẩm\n        var allJoinMatch = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n                \"_id.productID\": this.goodID,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, \n        {\n            params: {...data1}\n        })\n            .then(res => {\n                allJoinMatch = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        console.log(\"Các join\",allJoinMatch);\n        // Thêm vào trên cái bảng typeSet\n        for(var i = 0 ; i < allJoinMatch.length ; i ++)\n        {\n            typeSet.push(allJoinMatch[i]._id.typeID);\n        }\n        this.setState({change: !this.state.change});\n    }\n    getTypeNamebyTypeID (typeID) {\n        var typeName='';\n        for(var i = 0; i<listTypeInfor.length;i++)\n        {   \n            if(listTypeInfor[i]._id.typeID == typeID)\n            {\n                typeName = listTypeInfor[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    checkConstraint = () => {\n        // Kiểm tra các constraint ở đây coi thử ổn chưa\n        // Constraint 1: Check name\n        var productName =  document.querySelector('input[name=\"goodName\"]').value;\n        if(productName.length == 0)\n        {\n            alert(\"Tên sản phẩm không được trống\");\n            return false;\n        }\n        // Constraint 2: Check quantity\n        if(document.querySelector('input[name=\"goodQuantity\"]').value.length == 0)\n        {\n            alert(\"Số lượng sản phẩm không được trống\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"goodQuantity\"]').value) <= 0) \n        {\n            alert('Số lượng sản phẩm phải lớn hơn 0');\n            return false;\n        }\n        // Constraint 3: check Unit\n        if(document.querySelector('input[name=\"unit\"]').value.length == 0)\n        {\n            alert('Đơn vị của sản phẩm không được trống');\n            return false;\n        }\n        // Constraint 4: Check import Price\n        if(document.querySelector('input[name=\"originalPrice\"]').value.length == 0)\n        {\n            alert(\"Giá nhập không được trống\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <= 0) \n        {\n            alert('Giá nhập phải lớn hơn 0');\n            return false;\n        }\n        // Constraint 5: check sell Price\n        if(document.querySelector('input[name=\"sellPrice\"]').value.length == 0)\n        {\n            alert(\"Giá bán không được trống\");\n            return false;\n        }\n        else if(parseInt(document.querySelector('input[name=\"sellPrice\"]').value) <= 0) \n        {\n            alert('Giá bán phải lớn hơn 0');\n            return false;\n        }\n        // Constraint 6: Ngày nhập phải nhỏ  hơn ngày hết hạn và ngày hết hạn, ngày nhập phải khác null\n        if (\n            (\n                new Date(document.querySelector('input[name=\"importDate\"]').value).getTime()\n                - \n                new Date(document.querySelector('input[name=\"expiredDate\"]').value).getTime()\n            ) >= 0\n        )\n        {\n            alert('Không thể nhập hàng hết hạn');\n            return false;\n        }\n        // Constraint 7: Check giá gốc nhỏ hơn giá bán\n        if(\n            parseInt(document.querySelector('input[name=\"sellPrice\"]').value) \n            - \n            parseInt(document.querySelector('input[name=\"originalPrice\"]').value) <=0\n            ) \n        {\n            alert('Giá bán phải lớn hơn giá gốc');\n            return false;\n        }\n        // Constraint 8: check xem đã  up ảnh lên xong chưa\n        if(this.finishUpImage == false)\n        {\n            alert('Ảnh chưa được upload xong');\n            return false;\n        }\n        alert('Constraint đã check đầy đủ');\n        return true;\n    }\n\n    handleAdd(){\n        this.props.changeAddTypeStatus();\n    }\n\n    async updateGood() {\n        var isContinue = this.checkConstraint();\n        if(!isContinue)\n        {\n            return;\n        }\n        \n        var productInfo = this.props.infoUpdate;\n        const data = {\n            token: localStorage.getItem('token'),\n            product: {\n                _id: {\n                    productID: document.querySelector('input[name=\"goodID\"]').value,\n                    importDate: productInfo._id.importDate,\n                    storeID: this.props.infoUser.email,\n                },\n                name: this.name,\n                quantity: this.quantity,\n                // remain: document.querySelector('input[name=\"goodQuantity\"]').value,\n                importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\n                sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\n                expires: document.querySelector('input[name=\"expiredDate\"]').value,\n                imgUrl: this.imgUrl,\n                unit: document.querySelector('input[name=\"unit\"]').value,\n            }\n        }\n        console.log(\"Updategood\",data);\n        axios.put(`http://localhost:5000/api/product`, data)\n            .then(res => {\n                console.log(\"Update success\");\n                alert('Đã update thành công sản phẩm')\n            })\n            .catch(err => {\n                console.log(err);\n            })\n        // Get hết các cái join của sản phẩm\n        var allJoinMatch = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": this.props.infoUser.email,\n                \"_id.productID\": this.goodID,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, \n        {\n            params: {...data1}\n        })\n            .then(res => {\n                allJoinMatch = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        console.log(allJoinMatch);\n        // Xoá các join liên quan đến sản phẩm\n        var allProductJoin = [];\n        for(var i = 0 ; i < allJoinMatch.length; i++)\n        {\n            allProductJoin.push({\n                productID: this.goodID,\n                typeID: allJoinMatch[i]._id.typeID,\n                importDate: allJoinMatch[i]._id.importDate,\n                storeID: this.props.infoUser.email,\n            });\n        }\n        const dataJoin = {\n            token: localStorage.getItem('token'),\n            productJoinTypes: allProductJoin,      \n        }\n\n        console.log(dataJoin);\n\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\n            .then(res => {\n                console.log(\"delete join success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n        // Thêm các cái hiện tại\n        // Giờ thêm nhiều type thì phải làm cái này nhiều lần\n        for(var i = 0 ; i < typeSet.length ; i++)\n        {\n            const data1 = {\n                token: localStorage.getItem('token'),\n                productJoinType: {\n                    _id : {\n                        productID: this.goodID,\n                        typeID: typeSet[i], \n                        importDate: productInfo._id.importDate,\n                        storeID: this.props.infoUser.email,\n                    }\n                }\n            }\n            axios.post(`http://localhost:5000/api/product/join`, data1)\n                .then(res => {\n                    console.log(\"lưu vô bảng join thành công\");\n                })\n                .catch(err => {\n                    console.log(err);\n                })\n        }\n\n        // Thêm vào redux\n        var reduxData = {\n            _id: {\n                productID: productInfo._id.productID,\n                importDate: productInfo._id.importDate,\n                storeID: this.props.infoUser.email,\n            },\n            name: this.name,\n            quantity: this.quantity,\n            remain: this.remain,\n            importPrice: document.querySelector('input[name=\"originalPrice\"]').value,\n            sellPrice: document.querySelector('input[name=\"sellPrice\"]').value,\n            expires: document.querySelector('input[name=\"expiredDate\"]').value,\n            imgUrl: this.imgUrl,\n            unit: document.querySelector('input[name=\"unit\"]').value,\n            typeIDList: typeSet,\n        }\n        this.props.updateProductToRedux(reduxData);\n        this.props.changeUpdateGoodStatus();\n    }\n\n    remain = 0;\n\n    cancel = () => {\n        this.props.changeUpdateGoodStatus();\n    }\n\n    loadInitialData = () => {\n        // Load các dữ liệu ban đầu của form ở đây để mà update nhưng mà bị lỗi 401 mẹ\n        //Xử lý sampleData\n        var productInfo = this.props.infoUpdate;\n        console.log(this.props.infoUpdate);\n\n        this.goodID = (productInfo._id.productID == null) ? '' : productInfo._id.productID;\n        this.importDate = productInfo._id.importDate;\n        this.importDate = this.importDate == null ? '' :this.importDate.substring(0, this.importDate.indexOf('T'));\n        this.name = productInfo.name == null ? '' : productInfo.name;\n        this.imgUrl = productInfo.imgUrl == null ? '' : productInfo.imgUrl;\n        this.quantity = productInfo.quantity == null ? '' : productInfo.quantity;\n        this.remain = productInfo.remain;\n        this.unit = productInfo.unit == null ? '' : productInfo.unit;\n        this.importPrice = productInfo.importPrice == null ? '' : productInfo.importPrice;\n        this.sellPrice = productInfo.sellPrice == null ? '' : productInfo.sellPrice;\n        this.expire = productInfo.expires; //substring(0,productInfo.expire.indexOf('T'));\n        this.expire = this.expire == null ? '' :this.expire.substring(0, this.expire.indexOf('T'));\n        console.log(\"this.expire\",this.expire );\n        this.setState({change: !this.state.change});\n    }\n\n    profileImageChange = (fileChangeEvent) => {\n        this.setState({\n            imageSelect: fileChangeEvent.target.files[0],\n        })\n        this.finishUpImage = false;\n        const file = fileChangeEvent.target.files[0];\n        const { type } = file;\n        if (!(type.endsWith('jpeg') || type.endsWith('png') || type.endsWith('jpg') || type.endsWith('gif'))) {\n        } else {\n            const formData = new FormData();\n            formData.append(\"file\", fileChangeEvent.target.files[0])\n            formData.append(\"upload_preset\", \"qqqhcaa3\");\n            axios.post(`https://api.cloudinary.com/v1_1/databaseimg/image/upload`, formData)\n                .then(res => {\n                    this.imgUrl=res.data.url;\n                    this.setState({\n                        change: 'true'\n                    });\n                })\n                .catch(err => {\n                    console.log(\"Thất bại\");\n                })\n        }\n        this.finishUpImage = true;\n    }\n\n    changeName = (e) => {\n        this.name = e.target.value;\n    }\n\n    changeValue = (e, variable) =>\n    {\n        if(variable=='quantity')\n        {\n            this.quantity = e.target.value;\n        }\n    }\n\n    foundTypeInSet(typeID) {\n        for(var i = 0 ; i < typeSet.length; i++)\n        {\n            if(typeSet[i]==typeID._id.typeID) return true;\n        }\n        return false;\n    }\n    render() {\n        \n        return (\n            <form style={{ zIndex: '10', width: '60%', justifyContent: 'center', marginTop: '80px'}} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader style={{ color: 'blue', backgroundColor: '#efeeef' , textAlign: 'center'}} title=\"UPDATE GOOD\" />\n                        <div \n                        style={{ \n                            width: '100%', backgroundColor: 'rgb(221,235,255)'   \n                        }}\n                    >   \n                    <Grid className=\"import-container\" container >\n                        <Grid item md={12}  \n                            style={{\n                                display: 'flex', \n                                justifyContent:'center', \n                                flexDirection:'column',\n                                alignItems:'center',\n                                marginTop: '0px'\n                            }}\n                        >   \n                            <label className=\"profile-header__avatar\" for=\"profile-header-update-avatar\" style={{ overflow: 'hidden' }}>\n                                <Image style={{width: '150px',height: '150px' }} cloudName=\"databaseimg\" publicId={this.imgUrl=='none' ? 'http://res.cloudinary.com/databaseimg/image/upload/v1634358564/b9wj5lcklxitjglymxqh.png' : this.imgUrl}></Image>\n                            </label>\n                            {/* Ẩn đi */}\n                            <input id=\"profile-header-update-avatar\" type=\"file\" style={{ display: 'none' }} accept=\"image/png, image/jpeg\" onChange={(e) => this.profileImageChange(e)}></input>\n                        </Grid>\n                        <Grid item md={12}>\n\n                            <Card \n                            >\n                                \n                                <Grid container md={12}>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                width: '116px'\n                                            }}\n                                        >\n                                            ID\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box' \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '100%'}} \n                                            fullWidth \n                                            size=\"small\" \n                                            name=\"goodID\" \n                                            variant=\"outlined\" \n                                            value={this.goodID}\n                                            readOnly={true}\n                                            disabled={true}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6} \n                                        className='input-item'\n                                        style={{\n                                            marginLeft: 0,\n                                            paddingLeft: 0\n                                        }}\n                                    >\n                                        <div className=\"input-label\" style={{width: 128}}>Import Date</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\" \n                                            style = {{width: '68%'}} \n                                            fullWidth\n                                            name=\"importDate\"\n                                            size=\"small\"\n                                            variant=\"outlined\"\n                                            defaultValue={this.importDate}\n                                            readOnly={true}\n                                            disabled={true}\n                                        />\n                                    </Grid>\n                                    \n                                    <Grid item md={6} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\"style={{width: '114px'}}>Name</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"text\" \n                                            // class=\"input-val\" \n                                            style = {{width: '100%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            name=\"goodName\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.name}\n                                            onChange={(e) => this.changeName(e)} \n                                        />\n                                    </Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                        style={{padding: '0px', marginLeft: '0px'}}\n                                    >\n                                        <div \n                                            className=\"input-label\" \n                                            style={{width: '100px'}}\n                                        >\n                                            Quantity\n                                        </div>\n                                        <StyledTextField\n                                            style = {{width: '60%'}} \n                                            fullWidth\n                                            name=\"goodQuantity\" \n                                            variant=\"outlined\"\n                                            type=\"number\" \n                                            defaultValue={this.quantity}\n                                            onChange={(e) => this.changeValue(e, 'quantity')}\n                                        />\n                                    </Grid>\n                                    <Grid item md={3}\n                                        className='input-item'\n                                        style={{\n                                            paddingRight: 24\n                                        }}\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{\n                                                marginLeft: 0,\n                                                paddingLeft: 4\n                                            }}\n                                        >\n                                            Unit\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box'\n                                            style = {{width: '100%', marginLeft: '4px'}} \n                                            fullWidth\n                                            variant=\"outlined\"\n                                            type=\"text\" \n                                            name=\"unit\" \n                                            defaultValue={this.unit}\n                                        />\n                                    </Grid>\n                                    <Grid item md={6}\n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: 128}}>Original Price</div>\n                                        <StyledTextField\n                                            classname='input-box'\n                                            style = {{width: '60%', marginLeft: '4px', marginRight:'8px'}} \n                                            fullWidth\n                                            name=\"originalPrice\" \n                                            variant=\"outlined\"\n                                            type=\"number\"\n                                            defaultValue={this.importPrice}\n                                        />\n                                        đ\n                                    </Grid>\n                                    <Grid item md={6}\n                                        className='input-item'\n                                        style={{padding: '0px', marginLeft: '0px', paddingRight: 24}}\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{width: '96px'}}\n                                        >\n                                            Sell Price\n                                        </div>\n                                        <StyledTextField\n                                            classname='input-box'\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \n                                            fullWidth\n                                            name=\"sellPrice\" \n                                            variant=\"outlined\"\n                                            type=\"number\" \n                                            defaultValue={this.sellPrice}\n                                        />\n                                        đ\n                                    </Grid>\n                                    <Grid item md={7} \n                                        className='input-item'\n                                    >\n                                        <div className=\"input-label\" style={{width: 132}}>Expired Date</div>\n                                        <StyledTextField\n                                            classname='input-box'   \n                                            type=\"date\" \n                                            style = {{width: '70%'}} \n                                            fullWidth\n                                            size=\"small\"\n                                            name=\"expiredDate\" \n                                            variant=\"outlined\"\n                                            defaultValue={this.expire} \n                                        />\n                                        {/* <StyledTextField\n                                            classname='input-box'\n                                            style = {{width: '80%', marginLeft: '4px',marginRight:'8px'}} \n                                            fullWidth\n                                            name=\"sellPrice\" \n                                            variant=\"outlined\"\n                                            value={this.expire}\n                                        /> */}\n                                    </Grid>\n                                    <Grid item md={10}\n                                        className='input-item'\n                                    >\n                                        <div \n                                            className=\"input-label\"\n                                            style={{width:132}}\n                                        >\n                                            Product Type\n                                        </div>\n                                        <FormControl sx={{ minWidth: 120 }}>\n                                        {/* <InputLabel id=\"select-filled-label\">Type</InputLabel> */}\n                                        <Select\n                                            value={this.state.type}\n                                            onChange={(event) => {\n                                                this.setState({type: event.target.value});\n                                                if(!typeSet.includes(event.target.value))\n                                                {\n                                                    typeSet.push(event.target.value);\n                                                }\n                                            }}\n                                            style={{\n                                                height: 36,\n                                            }}\n                                        >\n                                            {\n                                                this.props.typeProduct.length== 0 ? <MenuItem value={'none'}>None</MenuItem>:\n                                                this.props.typeProduct.map((type) =>\n                                                    this.foundTypeInSet(type) ? null :\n                                                    <MenuItem value={type._id.typeID}>{type.name}</MenuItem>\n                                                )\n                                            }   \n                                        </Select> \n                                    </FormControl>\n                                        <Button onClick={() => this.handleAdd()}>\n                                            <AiFillPlusCircle\n                                                size={28}\n                                                style={{\n                                                    fontSize: 28,\n                                                    margin: 0,\n                                                    padding: 0,\n                                                    width: 28,\n                                                    height: 28\n                                                }}    \n                                            />\n                                        </Button>\n                                        <div className='all-type-container'>\n                                            {\n                                                Array.from(typeSet).map((type) =>\n                                                    <div item md={7} className='type-container'>\n                                                        <CancelIcon\n                                                            className='close-icon'\n                                                            size={10}\n                                                            onClick={() => {\n                                                                typeSet = typeSet.filter(function(item) {\n                                                                    return item != type;\n                                                                })\n                                                                console.log(typeSet);\n                                                                this.setState({type: 'none'});\n                                                            }}\n                                                \n                                                        />\n                                                        <span className='type-title'>\n                                                            {this.getTypeNamebyTypeID(type)}\n                                                        </span>\n                                                    </div>\n                                                    \n                                                )\n                                            }\n                                        </div>\n                                    </Grid>\n                                    {/* <Grid item md={10}\n                                        className='input-item'\n                                    >\n\n                                    </Grid> */}\n                                    <Grid item md={2}\n                                        className='input-item'\n                                    >\n                                        <Button variant=\"contained\" onClick={() => this.updateGood()}>\n                                            UPDATE\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </Card>\n                        </Grid>\n                        <Grid item sm={12} md={12} >\n                            \n                        </Grid>\n                    </Grid> \n                        \n                    \n                </div>\n                </Card>\n                {this.props.addTypeStatus ? (\n                        <div className=\"modal-add\" style={{ zIndex: '12'}}>\n                            <div onClick={() => {this.props.changeAddTypeStatus();}} className=\"modal-overlay\"></div>\n                            <AddTypeModal></AddTypeModal>\n                        </div>\n                    ): null}\n                {this.props.confirmStatus ? (\n                    <div className=\"modal-add\">\n                        <div onClick={() => {this.props.changeConfirmStatus();}} className=\"modal-overlay\"></div>\n                        <ConfirmModal></ConfirmModal>\n                    </div>\n                ): null}\n            </form>\n        )\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        updateGoodStatus: state.updateGoodStatus,\n        confirmStatus: state.confirmStatus,\n        infoUpdate: state.infoUpdate,\n        infoUser: state.infoUser,\n        typeProduct: state.typeProduct,\n        listProduct: state.listProduct,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        changeUpdateGoodStatus: () => {\n            dispatch({\n                type: \"CHANGE_UPDATE_GOOD_STATUS\",\n            });\n        },\n        changeConfirmStatus: () => {\n            dispatch({\n                type: \"CHANGE_CONFIRM_STATUS\",\n            });\n        },\n        setUpdateConfirm: () => {\n            dispatch({\n                type: \"SET_CONFIRM_UPDATE_GOOD\",\n            }); \n        },\n        updateProductToRedux: (data) => {\n            dispatch({\n                type: \"UPDATE_PRODUCT\",\n                data: data,\n            }); \n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateGoodModal);\n\n               ","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/AddTypeModal.js",["1186","1187","1188","1189","1190","1191"],"import React, { Component } from 'react';\nimport { Card, CardHeader, Divider, Grid, TextField, Box, CardContent, Button, Alert } from '@mui/material';\nimport { connect } from 'react-redux'\nimport { BiPlusMedical, BiEdit } from 'react-icons/bi';\nimport Stack from '@mui/material/Stack';\nimport { GiCancel, GiVampireCape } from 'react-icons/gi'\nimport axios from 'axios';\n\nvar listTypeInfor = [];\n\nclass AddTypeModal extends Component {\n    constructor(props) {\n        super(props);\n        this.state= {\n            change: 'false'\n        }\n        // this.getAllTypeList();\n        listTypeInfor = this.props.typeProduct;\n    }\n    storeID = \"\";\n    typeList = [];\n\n    // async getAllTypeList(){\n    //     var result = [];\n    //     const data = {\n    //         token: localStorage.getItem('token'),\n    //         filter: {\n    //             \"_id.storeID\": this.props.infoUser.email,\n    //         }   \n    //     }\n    //     console.log(data.filter);\n    //     await axios.get(`http://localhost:5000/api/product/type`, \n    //     {\n    //         params: {...data}\n    //     })\n    //         .then(res => {\n    //             result = res.data.data;\n    //         })\n    //         .catch(err => {\n    //             alert(err);\n    //         })\n    //     //Get data và lưu các tên Type vào bảng\n    //     for(var i=0; i < result.length ; i++)\n    //     {\n    //         listTypeInfor.push(result[i]);\n    //     }\n    // }\n    addType = () => {\n        if(this.checkConstraint(this.typeName)==false)  return;\n        var genTypeID = 0;\n        if(listTypeInfor.length>0)\n        {\n            genTypeID = parseInt(listTypeInfor[listTypeInfor.length-1]._id.typeID) + 1;\n        } \n        const data = {\n            token: localStorage.getItem('token'),\n            productType: {\n                _id:{\n                    typeID: genTypeID,\n                    storeID: this.props.infoUser.email,\n                },\n                name: this.typeName,\n            }    \n        }\n        axios.post(`http://localhost:5000/api/product/type`, data)\n            .then(res => {\n                alert(\"Save success\");\n                //TODO: Cập nhật token ở đây nữa\n            })\n            .catch(err => {\n                alert(err);\n            })\n        this.props.addTypeToReducer(data.productType);\n        this.props.changeAddTypeStatus();\n    }\n    \n    checkConstraint(typeName) {\n        console.log(\"check name\", typeName);\n        //Constraint 1: Check name\n        for(var i=0;i<listTypeInfor.length;i++)\n        {\n            if(listTypeInfor[i].name==typeName)\n            {\n                alert(\"Trùng tên rồi anh chai\");\n                return false;\n            }\n        }        \n        // Constraint 2: Not blank\n        if(typeName.length==0)\n        {\n            alert(\"Không nhập gì à anh chai\")\n            return false;\n        }\n        return true;\n\n    }\n    cancel = () => {\n        this.props.changeAddTypeStatus();\n    }\n\n    handle = () => {\n        this.addType();\n    }\n    typeName = \"\";\n\n    changeTypeName(e)\n    {\n        this.typeName = e.target.value;\n    }\n\n    render() {\n        return (\n            <form style={{ zIndex: '11', minWidth: '500px', width: '600px', justifyContent: 'center', marginTop: '10%' }} autoComplete=\"off\" noValidate>\n                <Card>\n                    <CardHeader \n                        style={{ color: 'blue', backgroundColor: '#efeeef', textAlign: 'center' }} \n                        title={\"Add Type\"}\n                        />\n                    <Divider />\n                    <CardContent>\n                        <Grid \n                            container \n                            spacing={2}\n                            justifyContent={'center'}\n                            alignItems={'center'}\n                        >\n                            <Grid item md={2} xs={12}>\n                                TypeName\n                            </Grid>\n                            <Grid item md={10} xs={12}>\n                                <TextField\n                                    id=\"outlined-basic\"\n                                    variant=\"outlined\"\n                                    fullWidth\n                                    required\n                                    type=\"text\"\n                                    name=\"typeName\"\n                                    defaultValue={this.typeName}\n                                    onChange={(e) => this.changeTypeName(e)}\n                                />\n                            </Grid>\n                            <Grid item md={12} xs={12}>\n                                <Stack spacing={3}>\n                                   \n                                </Stack>\n                            </Grid>\n                        </Grid>\n                    </CardContent>\n                    <Divider />\n                    <Box sx={{ display: 'flex', justifyContent: 'space-evenly', p: 2 }}>\n                        <Button \n                            style={{ backgroundColor: 'yellowgreen' }} \n                            onClick={() => this.handle()}\n                            variant=\"contained\" \n                            startIcon={<BiPlusMedical />}\n                        >\n                            Add type\n                        </Button>\n                        <Button \n                            style={{ backgroundColor: 'red' }} \n                            // onClick={() => this.editShift()}\n                            onClick={() => this.cancel()}\n                            variant=\"contained\" \n                            startIcon={<GiCancel />}\n                        >\n                            Cancel\n                        </Button>\n                    </Box>\n                </Card>\n            </form>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        infoUser: state.infoUser,\n        typeProductValue: state.typeProductValue,\n        typeProduct: state.typeProduct,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        changeEditTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_EDIT_TYPE_STATUS\",\n            });\n        },\n        changeAddTypeStatus: () => {\n            dispatch({\n                type: \"CHANGE_ADD_TYPE_STATUS\",\n            });\n        },\n        addTypeToReducer: (data) => {\n            dispatch({\n                type: \"ADD_TYPE\",\n                data: data,\n            });\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddTypeModal);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/SearchBar.js",["1192","1193","1194","1195"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Input from \"@material-ui/core/Input\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { MdClear} from \"react-icons/md\";\nimport { AiOutlineSearch } from \"react-icons/ai\";\nimport { withStyles } from '@material-ui/styles';\nimport classNames from \"classnames\";\n\nconst styles = theme => ({\n  root: {\n    // height: theme.spacing(6),\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    height: \"80px\",\n  },\n//   iconButton: {\n//     color: theme.palette.action.active,\n//     transform: \"scale(1, 1)\",\n//     transition: theme.transitions.create([\"transform\", \"color\"], {\n//       duration: theme.transitions.duration.shorter,\n//       easing: theme.transitions.easing.easeInOut,\n//     }),\n//   },\n  iconButtonHidden: {\n    transform: \"scale(0, 0)\",\n    \"& > $icon\": {\n      opacity: 0,\n    },\n  },\n  searchIconButton: {\n    // marginRight: theme.spacing(-6),\n  },\n//   icon: {\n//     transition: theme.transitions.create([\"opacity\"], {\n//       duration: theme.transitions.duration.shorter,\n//       easing: theme.transitions.easing.easeInOut,\n//     }),\n//   },\n  input: {\n    width: \"100%\",\n  },\n  searchContainer: {\n    margin: \"4px 8px 4px 8px\",\n    height: \"40px\",\n    // width: `calc(100% - ${theme.spacing(6 + 4)}px)`, // 6 button + 4 margin\n  },\n});\nconst SearchBar = React.forwardRef(\n  (\n    {\n      cancelOnEscape,\n      className,\n      classes,\n      closeIcon,\n      disabled,\n      onCancelSearch,\n      onRequestSearch,\n      searchIcon,\n      style,\n      ...inputProps\n    },\n    ref\n  ) => {\n    const inputRef = React.useRef();\n    const [value, setValue] = React.useState(inputProps.value);\n\n    React.useEffect(() => {\n      setValue(inputProps.value);\n    }, [inputProps.value]);\n\n    const handleFocus = React.useCallback(\n      (e) => {\n        if (inputProps.onFocus) {\n          inputProps.onFocus(e);\n        }\n      },\n      [inputProps.onFocus]\n    );\n\n    const handleBlur = React.useCallback(\n      (e) => {\n        setValue((v) => v.trim());\n        if (inputProps.onBlur) {\n          inputProps.onBlur(e);\n        }\n      },\n      [inputProps.onBlur]\n    );\n\n    const handleInput = React.useCallback(\n      (e) => {\n        setValue(e.target.value);\n        if (inputProps.onChange) {\n          inputProps.onChange(e.target.value);\n        }\n      },\n      [inputProps.onChange]\n    );\n\n    const handleCancel = React.useCallback(() => {\n      setValue(\"\");\n      if (onCancelSearch) {\n        onCancelSearch();\n      }\n    }, [onCancelSearch]);\n\n    const handleRequestSearch = React.useCallback(() => {\n      if (onRequestSearch) {\n        onRequestSearch(value);\n      }\n    }, [onRequestSearch, value]);\n\n    const handleKeyUp = React.useCallback(\n      (e) => {\n        if (e.charCode === 13 || e.key === \"Enter\") {\n          handleRequestSearch();\n        } else if (\n          cancelOnEscape &&\n          (e.charCode === 27 || e.key === \"Escape\")\n        ) {\n          handleCancel();\n        }\n        if (inputProps.onKeyUp) {\n          inputProps.onKeyUp(e);\n        }\n      },\n      [handleRequestSearch, cancelOnEscape, handleCancel, inputProps.onKeyUp]\n    );\n\n    React.useImperativeHandle(ref, () => ({\n      focus: () => {\n        inputRef.current.focus();\n      },\n      blur: () => {\n        inputRef.current.blur();\n      },\n    }));\n\n    return (\n      <Paper className={classNames(classes.root, className)} style={{height: '40px'}}>\n        <div className={classes.searchContainer}>\n          <Input\n            {...inputProps}\n            inputRef={inputRef}\n            onBlur={handleBlur}\n            value={value}\n            onChange={handleInput}\n            onKeyUp={handleKeyUp}\n            onFocus={handleFocus}\n            fullWidth\n            className={classes.input}\n            disableUnderline\n            disabled={disabled}\n          />\n        </div>\n        <IconButton\n          onClick={handleRequestSearch}\n          className={classNames(classes.iconButton, classes.searchIconButton, {\n            [classes.iconButtonHidden]: value !== \"\",\n          })}\n          disabled={disabled}\n        >\n          {React.cloneElement(searchIcon, {\n            classes: { root: classes.icon },\n          })}\n        </IconButton>\n        <IconButton\n          onClick={handleCancel}\n          className={classNames(classes.iconButton, {\n            [classes.iconButtonHidden]: value === \"\",\n          })}\n          disabled={disabled}\n        >\n          {React.cloneElement(closeIcon, {\n            classes: { root: classes.icon },\n          })}\n        </IconButton>\n      </Paper>\n    );\n  }\n);\n\nSearchBar.defaultProps = {\n  className: \"\",\n  closeIcon: <MdClear/>,\n  disabled: false,\n  placeholder: \"Search\",\n  searchIcon: <AiOutlineSearch />,\n  style: null,\n  value: \"\",\n};\n\nSearchBar.propTypes = {\n  cancelOnEscape: PropTypes.bool,\n  classes: PropTypes.object.isRequired,\n  className: PropTypes.string,\n  closeIcon: PropTypes.node,\n  disabled: PropTypes.bool,\n  onCancelSearch: PropTypes.func,\n  onChange: PropTypes.func,\n  onRequestSearch: PropTypes.func,\n  placeholder: PropTypes.string,\n  searchIcon: PropTypes.node,\n  style: PropTypes.object,\n  value: PropTypes.string,\n};\n\nexport default withStyles(styles)(SearchBar);","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/GoodTable.js",["1196","1197","1198","1199","1200","1201","1202"],"import * as React from 'react';\nimport { Component } from 'react';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { withStyles } from '@material-ui/styles';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport GoodRow from './TableRow';\n\nconst styles = theme =>  ({\n    goodTable: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid'\n    },\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '40px',\n    } \n})\n\n\nvar listProductInfor = [];\nvar joinTypeInfor = [];\nvar listTypeInfor = [];\n\nclass GoodTable extends Component {\n    constructor(props) {\n        super(props);\n        this.state ={\n            update: false\n        }\n        console.log(\"this.props.listProduct.state\", this.props.listProduct.state);\n    }\n    removeProduct= (row) => {\n        // Đây là xử lý ở phía dữ liệu, có thể await gì đó.\n        // Xử lý ở phía giao diện(tạm)\n\n        // Đây là câu lệnh để update nhẹ\n        this.setState({update: this.state.update})\n    }\n\n    getTypeNamebyTypeID (typeID) {\n        var typeName=\"Null\";\n        for(var i = 0; i < this.props.typeProduct.length;i++)\n        {   \n            if(this.props.typeProduct[i]._id.typeID == typeID)\n            {\n                typeName = this.props.typeProduct[i].name;\n                break;\n            }\n        }\n        return typeName;\n    }\n\n    render() {\n        const { classes } = this.props;\n        return (\n            <div style={{height: '550px', width: '100%', overflowY: 'scroll'}}>\n                <TableContainer component={Paper}>\n                    <Table className={classes.goodTable} aria-label=\"collapsible table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ID</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">GoodName</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Quantity</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">Sell Price</TableCell>\n                                <TableCell className={classes.goodTable_Cell} align=\"center\">ImportTime</TableCell>\n                                <TableCell className={classes.goodTable_Cell}/>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {\n                                this.props.listProduct.state == undefined ? (null):\n                                this.props.listProduct.state.map((product) => (\n                                    product==undefined ? null :\n                                    <GoodRow data={product} />\n                                ))\n                            }   \n                        </TableBody>\n                    </Table>\n                </TableContainer>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        infoUser: state.infoUser,\n        isAddTypeStatus: state.isAddTypeStatus,\n        confirmStatus: state.confirmStatus,\n        listProduct: state.listProduct,\n        typeProduct: state.typeProduct,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        \n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(GoodTable));\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Profile/DarkMode.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/EmployeePartials/FixedCalendarCell.js",["1203","1204","1205","1206","1207","1208","1209","1210","1211"],"import {connect} from 'react-redux';\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { withStyles } from '@material-ui/styles';\n// material\nimport { TableCell, List, ListItem, ListItemButton, ListItemText} from '@mui/material';\nimport '../../css/EmployeeManager.css';\n\n//icon\nimport { IoIosAdd,} from \"react-icons/io\";\nimport {  AiFillCloseCircle} from \"react-icons/ai\";\n// ----------------------------------------------------------------------\nconst styles = theme =>  ({\n    goodTable_Cell: {                                     \n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: '80px',\n    } \n})\n\nclass FixedCalendarCell extends Component {\n  isOpen=false;\n\n  constructor(props) {\n    super(props);\n    this.state= {\n      change: false\n    }\n    \n  }\n\n \n\n  handleChange() {\n    this.isOpen = !this.isOpen;\n    this.setState({change : !this.state.change})\n  }\n\n  getEmployeeNameByID(employeeID)\n  {\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n      {\n          var currentEmployee = this.props.listEmployee.employees[i];\n          if(currentEmployee._id.employeeID==employeeID)\n          {\n            return currentEmployee.firstName;\n          }\n      }\n      return \"Can't get name\";\n  }\n\n  findEmployeeNameByID(employeeID)\n  {\n      for(var i = 0 ; i < this.props.listEmployee.employees.length; i++)\n      {\n          var currentEmployee = this.props.listEmployee.employees[i];\n          if(currentEmployee._id.employeeID==employeeID)\n          {\n            return true;\n          }\n      }\n      return false;\n  }\n\n  getCurrentDateTime()\n  {\n      var currentDate = new Date();\n      var day = (currentDate.toString().split(' '))[2];\n      if(day.length < 2)\n      {\n          day = '0' + day;\n      }\n      var month = (new Date().getMonth() + 1).toString();\n      if(month.length<2)\n      {\n          month = '0' + month;\n      }\n      return new Date().getFullYear() + '-' + month + '-' + day;\n  }\n\n  async addThisShiftAssign(employeeID)\n  {\n      const data = {\n          token: localStorage.getItem('token'),\n          shiftAssign: {\n            _id: {\n              dateInWeek: this.props.dayIndex,\n              storeID: this.props.infoUser.email,\n              shiftType: {\n                  _id: {\n                      shiftID: this.props.shiftID,\n                      storeID: this.props.infoUser.email,\n                  },\n              },\n              employee: {\n                  _id: {\n                      employeeID: employeeID,\n                      storeID: this.props.infoUser.email,\n                  },\n              },\n            },\n          }\n          \n      }\n      await axios.post(`http://localhost:5000/api/employee/shift-assign`, data)\n        .then(res => {\n            alert(\"Lưu thành công\")\n        })\n        .catch(err => {\n            alert(err);\n            console.log(err);\n        })\n      this.handleChange();\n      this.props.AddShiftAssign(data.shiftAssign);\n  }\n\n  removeShift(employeeID)\n  {\n    const data1 = {\n        token: localStorage.getItem('token'),\n        shiftAssign: {\n          _id: {\n            dateInWeek: this.props.dayIndex,\n            storeID: this.props.infoUser.email,\n            shiftType: {\n                _id: {\n                    shiftID: this.props.shiftID,\n                    storeID: this.props.infoUser.email,\n                },\n            },\n            employee: {\n                _id: {\n                    employeeID: employeeID,\n                    storeID: this.props.infoUser.email,\n                },\n            },\n          }\n      },\n    }\n      axios.delete(`http://localhost:5000/api/employee/shift-assign`,{data: data1})\n      .then(res => {\n          alert(\"success\");\n      })\n      .catch(err => {\n          alert(err);\n      })\n      const data = {\n          _id: {\n            dateInWeek: this.props.dayIndex,\n            storeID: this.props.infoUser.email,\n            shiftType: {\n                _id: {\n                    shiftID: this.props.shiftID,\n                    storeID: this.props.infoUser.email,\n                },\n            },\n            employee: {\n                _id: {\n                    employeeID: employeeID,\n                    storeID: this.props.infoUser.email,\n                },\n            },\n        },\n      }\n      \n      // console.log(\"data\", data);\n      this.props.RemoveShiftAssign(data);\n      \n  }\n\n  findShiftInShiftAssign()\n  {\n      var listShiftAssign = this.props.listShiftAssign;\n      for(var i = 0 ; i < listShiftAssign.length ; i++)\n      {\n          if(this.props.shiftID == listShiftAssign[i]._id.shiftType._id.shiftID && \n            this.props.dayIndex == listShiftAssign[i]._id.dateInWeek && \n            this.findEmployeeNameByID(listShiftAssign[i]._id.employee._id.employeeID))\n            { \n                return true;\n            }\n      }\n      return false;\n  }\n\n  findEmployeeInShift(employeeID)\n  {\n      var listShiftAssign = this.props.listShiftAssign;\n      for(var i = 0 ; i < listShiftAssign.length; i++)\n      {\n          if(this.props.shiftID == listShiftAssign[i]._id.shiftType._id.shiftID \n            && this.props.dayIndex == listShiftAssign[i]._id.dateInWeek\n            && listShiftAssign[i]._id.employee._id.employeeID == employeeID)\n          return true;\n      }\n      return false;\n  }\n  \n  render() {\n    const { classes } = this.props;\n    return (\n        <TableCell \n            className={classes.goodTable_Cell} \n            style={{\n                position: 'relative',\n                backgroundColor: !this.findShiftInShiftAssign() ?'#ff6057': '#b3cde0',\n                height: '80px',\n            }}\n            // ref={this.myRef}    \n        >\n            <div\n                style={{\n                    position: 'absolute',\n                    right: 0,\n                    top: 0,\n                    borderRadius: '50%',\n                    backgroundColor: '#fff',\n                    width: 22,\n                    height: 22,\n                    textAlign: 'center'\n                }}\n                className='add-employee-to-shift-button'\n            >\n                <IoIosAdd \n                    size={30}\n                    style={{\n                        position: 'absolute',\n                        right: -4,\n                        top: -3,\n                    }}\n                    color='#0096FF'\n                    onClick={() => this.handleChange()}\n                >    \n                </IoIosAdd>\n                \n            </div>\n            { \n              this.props.listShiftAssign.map((item) => \n                (\n                  ( this.props.shiftID == item._id.shiftType._id.shiftID \n                    && this.props.dayIndex == item._id.dateInWeek \n                    && this.findEmployeeNameByID(item._id.employee._id.employeeID))\n                  ? <div style={{\n                            backgroundColor: \"#fff\", \n                            padding: 10, \n                            maxWidth: 100,\n                            position: 'relative',\n                            marginBottom: 4\n                            }}\n                    >\n                      <span>\n                          {item._id.employee._id.employeeID + ' - ' \n                          + this.getEmployeeNameByID(item._id.employee._id.employeeID)}\n                      </span>\n                      <AiFillCloseCircle\n                          style={{\n                            color: 'red',\n                            position: 'absolute',\n                            right: 0, \n                            top: 0,\n                          }} \n                          size={20}\n                          onClick={() => this.removeShift(item._id.employee._id.employeeID)}\n                      ></AiFillCloseCircle>\n                    </div>\n                  : null\n                )\n              )\n            }\n            {\n              this.isOpen \n              ? \n              // Đây là cái bảng chọn nhân viên\n              <List \n                style={{\n                  position: 'absolute',\n                  right: 0,\n                  top: 20,\n                  zIndex: 10,\n                  maxHeight: 100,\n                  overflowY: 'auto',\n                  width: 140,\n                  backgroundColor: '#fff',\n                }}\n              >\n                {\n                  this.props.listEmployee.employees.map((item) =>\n                    this.findEmployeeInShift(item._id.employeeID) ? null :\n                    <ListItem disablePadding height={30} onClick={() => this.addThisShiftAssign(item._id.employeeID)}>\n                        <ListItemButton>\n                            <ListItemText>\n                                {item._id.employeeID + ' - ' + item.firstName}\n                            </ListItemText>\n                        </ListItemButton>\n                    </ListItem>\n                  )\n                }\n              </List>\n              : null\n            }\n\n        </TableCell>\n    );\n  }\n  \n}\nconst mapStateToProps = (state, ownProps) => {\n  return {\n      listEmployee: state.listEmployee,\n      listShiftAssign: state.listShiftAssign,\n      infoUser: state.infoUser,\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    AddShiftAssign: (data) => {\n      dispatch({\n          type: \"ADD_NEW_SHIFT_ASSIGN\",\n          data: data,\n      });\n    },\n    RemoveShiftAssign: (data) => {\n      dispatch({\n          type: \"DELETE_SHIFT_ASSIGN\",\n          data: data,\n      });\n    }\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(FixedCalendarCell));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/GoodPartials/TableRow.js",["1212","1213","1214","1215","1216","1217","1218"],"import * as React from 'react';\nimport Typography from '@mui/material/Typography';\nimport { Image } from 'cloudinary-react';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Collapse from '@mui/material/Collapse';\nimport IconButton from '@mui/material/IconButton';\nimport { withStyles } from '@material-ui/styles';\nimport GoodImage from './goodExample.jpg';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport { useDispatch } from 'react-redux'\nimport axios from 'axios';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\n\nconst styles = theme =>  ({\n    goodTable_Cell:{\n        borderWidth: '1px',\n        borderColor: '#ccc',\n        borderStyle: 'solid',\n        height: 4,\n        color: '#333'\n    }\n});\n\n\n\nclass GoodRow extends Component{\n    constructor(props) {\n        super(props);\n        this.state ={\n            update: false,\n            change: false,\n        }\n        \n    }\n    isOpen = false;\n    row = {};\n    setOpen(value) {\n        this.isOpen = value;\n        this.setState({change: !this.state.change});\n    }\n\n    async deleteProduct(row) {\n        // Xoá sản phẩm\n        console.log(\"row\", row)\n        const data = {\n            token: localStorage.getItem('token'),\n            products:\n            [\n                {\n                    productID: row._id.productID,\n                    importDate: row._id.importDate,\n                    storeID: row._id.storeID,\n                }\n            ]\n            \n        }\n        axios.delete(`http://localhost:5000/api/product`,{data: data})\n            .then(res => {\n                alert(\"delete product success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n        \n        // Get hết các cái join của sản phẩm\n        var allJoinMatch = [];\n        const data1 = {\n            token: localStorage.getItem('token'),\n            filter: {\n                \"_id.storeID\": row._id.storeID,\n                \"_id.productID\": row._id.productID,\n            }   \n        }\n        await axios.get(`http://localhost:5000/api/product/join`, \n        {\n            params: {...data1}\n        })\n            .then(res => {\n                allJoinMatch = res.data.data;\n            })\n            .catch(err => {\n                console.log(err);\n                alert(err);\n            })\n        console.log(allJoinMatch);\n        // Xoá các join liên quan đến sản phẩm\n        var allProductJoin = [];\n        for(var i = 0 ; i < allJoinMatch.length; i++)\n        {\n            allProductJoin.push({\n                productID: row._id.productID,\n                typeID: allJoinMatch[i]._id.typeID,\n                importDate: allJoinMatch[i]._id.importDate,\n                storeID: row._id.storeID,\n            });\n        }\n        const dataJoin = {\n            token: localStorage.getItem('token'),\n            productJoinTypes: allProductJoin,      \n        }\n\n        console.log(dataJoin);\n\n        await axios.delete(`http://localhost:5000/api/product/join`,{data: dataJoin})\n            .then(res => {\n                console.log(\"delete join success\");\n            })\n            .catch(err => {\n                alert(err);\n            })\n        \n        console.log(\"this.props.data\",this.props.data)\n        this.props.deleteProductToRedux(this.props.data);\n    }\n\n    getTypeList(typeList)\n    {\n        var joinType = '';\n        for(var i = 0 ; i < typeList.length; i++)\n        {\n            for(var j = 0 ; j < this.props.typeProduct.length; j++)\n            {\n                if(this.props.typeProduct[j]._id.typeID == typeList[i])\n                {\n                    joinType += \" \" + this.props.typeProduct[j].name;\n                    break;\n                }\n            }\n        }\n        return joinType;\n    }\n\n    render () {\n        const { classes } = this.props;\n        const row = this.props.data;\n        // console.log(row);\n        return (\n            <React.Fragment>\n            <TableRow sx={{ '& > *': { borderBottom: 'unset' } }}>\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row._id.productID}</TableCell>\n                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">{row.name}</TableCell>\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.quantity}</TableCell>\n                <TableCell className={classes.goodTable_Cell} align=\"right\">{row.sellPrice}</TableCell>\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\n                    {/* {row.importTime == null ? '' : row.importTime.substring(0,row.importTime.indexOf('T'))} */}\n                    {row._id.importDate == null ? '': row._id.importDate.indexOf('T')==-1 ? row._id.importDate: row._id.importDate.substring(0,row._id.importDate.indexOf('T'))}\n                </TableCell>\n                <TableCell className={classes.goodTable_Cell} align=\"right\">\n                    <IconButton aria-label=\"expand row\" size=\"small\" onClick={() => this.setOpen(!this.isOpen)}>\n                        {this.isOpen ? (<KeyboardArrowUpIcon />) : (<KeyboardArrowDownIcon />)}\n                    </IconButton>\n                </TableCell>\n            </TableRow>\n            {\n                this.isOpen ?\n                <TableRow>\n                    <TableCell className={classes.goodTable_Cell} style={{ padding: 0, height: 100}} colSpan={8}>\n                        {/* <Collapse in={open} timeout=\"auto\" unmountOnExit> */}\n                        <Collapse in={true} timeout=\"auto\" unmountOnExit>\n                            <Box sx={{ margin: 1 }}>\n                                <Typography variant=\"h6\" gutterBottom component=\"div\">\n                                    Other information\n                                </Typography>\n                                <div style={{display: 'flex'}}>\n                                    {  \n                                        row.imgUrl == \"none\"\n                                        ? <div style={{width: '100px', height: '100px', objectFit:'cover'}}><img src={GoodImage} style={{width: '100px', height: '100px', objectFit:'cover'}}/></div>\n                                        \n                                        : <div style={{width: '100px', height: '100px', objectFit:'cover'}}><Image style={{width: '100px', height: '100px', objectFit:'cover'}} cloudName=\"databaseimg\" publicId={row.imgUrl}>{row.imgUrl}</Image></div>\n                                    }\n                                    <Table>\n                                        <TableHead>\n                                            <TableRow>\n                                                <TableCell className={classes.goodTable_Cell}><div style={{color: '#333'}}>Expired Day</div></TableCell>\n                                                <TableCell className={classes.goodTable_Cell}><div  style={{color: '#333'}}>Original Price</div></TableCell>\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div  style={{color: '#333'}}>Good Remain</div></TableCell>\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div  style={{color: '#333'}}>Product Type</div></TableCell>\n                                                <TableCell className={classes.goodTable_Cell} style={{color: '#333'}}><div style={{color: '#333'}}>Unit</div></TableCell>\n                                            </TableRow>\n                                        </TableHead>\n                                        <TableBody>\n                                            <TableRow>\n                                                <TableCell className={classes.goodTable_Cell} component=\"th\" scope=\"row\">\n                                                    {/* {row.hidden.expires == null ? '': row.hidden.expires.substring(0,row.hidden.expires.indexOf('T'))} */}\n                                                    {row.expires == null ? '': row.expires.indexOf('T') ==-1 ? row.expires : row.expires.substring(0,row.expires.indexOf('T'))}\n                                                </TableCell>\n                                                <TableCell className={classes.goodTable_Cell}>{row.importPrice}</TableCell>\n                                                <TableCell className={classes.goodTable_Cell}>{row.remain}</TableCell>\n                                                <TableCell className={classes.goodTable_Cell}>{this.getTypeList(row.typeIDList)}</TableCell>\n                                                <TableCell className={classes.goodTable_Cell}>{row.unit}</TableCell>\n                                            </TableRow>\n                                        </TableBody>\n                                    </Table>\n                                    <div className=\"button-container\">\n                                        <Button \n                                            onClick={() => {\n                                                // Truyền cái data vào trong hàm đây luôn\n                                                const data = row;\n                                                this.props.updateProduct(data);\n                                                this.props.openUpdateModal();\n                                            }}\n                                            variant=\"contained\"\n                                        >\n                                            Update\n                                        </Button>\n                                        <Button \n                                            variant=\"contained\"\n                                            onClick={() => this.deleteProduct(row)}\n                                        >\n                                            Delete\n                                            \n                                        </Button>\n                                    </div>\n                                </div>  \n                            </Box>\n                        </Collapse>\n                    </TableCell>\n                </TableRow>\n                : null\n            }\n            \n            </React.Fragment>\n        ); \n    }\n}\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        addTypeStatus: state.addTypeStatus,\n        infoUser: state.infoUser,\n        isAddTypeStatus: state.isAddTypeStatus,\n        confirmStatus: state.confirmStatus,\n        listProduct: state.listProduct,\n        typeProduct: state.typeProduct,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        getProductToReducer: (data) => {\n            dispatch({\n                type: \"GET_PRODUCT_AND_TYPE\",\n                data: data\n            });\n        },\n        updateProduct: (data) => {\n            dispatch({type: \"UPDATE_GOOD_DATA\", data});\n        },\n        openUpdateModal: (data) => {\n            dispatch({ type: \"CHANGE_UPDATE_GOOD_STATUS\", });\n        },\n        deleteProductToRedux: (data) => {\n            dispatch({\n                type: \"DELETE_PRODUCT\",\n                data: data,\n            }); \n        },\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)((withStyles(styles, {withTheme: true}))(GoodRow));","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/OptionMonth.js",["1219"],"import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Grow from '@mui/material/Grow';\nimport Paper from '@mui/material/Paper';\nimport Popper from '@mui/material/Popper';\nimport MenuItem from '@mui/material/MenuItem';\nimport MenuList from '@mui/material/MenuList';\nimport { BiCaretDown } from 'react-icons/bi'\nimport { useDispatch } from 'react-redux';\n\nconst options = [\n    {\n        month: 'All',\n        value: 0,\n    },\n    {\n        month: 'Jan',\n        value: 1,\n    },\n    {\n        month: 'Feb',\n        value: 2,\n    },\n    {\n        month: 'Mar',\n        value: 3,\n    },\n    {\n        month: 'Apr',\n        value: 4,\n    },\n    {\n        month: 'May',\n        value: 5,\n    },\n    {\n        month: 'Jun',\n        value: 6,\n    },\n    {\n        month: 'Jul',\n        value: 7,\n    },\n    {\n        month: 'Aug',\n        value: 8,\n    },\n    {\n        month: 'Sep',\n        value: 9,\n    },\n    {\n        month: 'Oct',\n        value: 10,\n    },\n    {\n        month: 'Nov',\n        value: 11,\n    },\n    {\n        month: 'Dec',\n        value: 12,\n    }\n];\n\n\n\nexport default function OptionMonth() {\n    const [open, setOpen] = React.useState(false);\n    const anchorRef = React.useRef(null);\n    const dispatch = useDispatch()\n    const [selectedIndex, setSelectedIndex] = React.useState(0);\n\n    const handleClick = () => {\n        console.info(`You clicked ${options[selectedIndex]}`);\n    };\n\n    const handleMenuItemClick = (event, index, option) => {\n        dispatch({\n            type: \"MONTH_SELECT_DASHBOARD\",\n            typeDashboard: option,\n          })\n        setSelectedIndex(index);\n        setOpen(false);\n    };\n\n    const handleToggle = () => {\n        setOpen((prevOpen) => !prevOpen);\n    };\n\n    const handleClose = (event) => {\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\n            return;\n        }\n\n        setOpen(false);\n    };\n\n    React.useEffect(() => {\n        dispatch({\n            type: \"RESET_MONTH_SELECT_DASHBOARD\"\n        })\n    }, [])\n\n    return (\n        <React.Fragment>\n            <ButtonGroup variant=\"contained\" ref={anchorRef} aria-label=\"split button\">\n                <Button onClick={handleClick}>{options[selectedIndex].month}</Button>\n                <Button\n                    size=\"small\"\n                    aria-controls={open ? 'split-button-menu' : undefined}\n                    aria-expanded={open ? 'true' : undefined}\n                    aria-label=\"select merge strategy\"\n                    aria-haspopup=\"menu\"\n                    onClick={handleToggle}\n                >\n                    <BiCaretDown />\n                </Button>\n            </ButtonGroup>\n            <Popper\n                open={open}\n                anchorEl={anchorRef.current}\n                role={undefined}\n                transition\n                disablePortal\n            >\n                {({ TransitionProps, placement }) => (\n                    <Grow\n                        {...TransitionProps}\n                        style={{\n                            transformOrigin:\n                                placement === 'bottom' ? 'center top' : 'center bottom',\n                        }}\n                    >\n                        <Paper>\n                            <ClickAwayListener onClickAway={handleClose}>\n                                <MenuList id=\"split-button-menu\">\n                                    {options.map((item, index) => (\n                                        <MenuItem\n                                            key={item.value}\n                                            selected={index === selectedIndex}\n                                            onClick={(event) => handleMenuItemClick(event, index, item.value)}\n                                        >\n                                            {item.month}\n                                        </MenuItem>\n                                    ))}\n                                </MenuList>\n                            </ClickAwayListener>\n                        </Paper>\n                    </Grow>\n                )}\n            </Popper>\n        </React.Fragment>\n    );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/OptionYear.js",["1220"],"import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Grow from '@mui/material/Grow';\nimport Paper from '@mui/material/Paper';\nimport Popper from '@mui/material/Popper';\nimport MenuItem from '@mui/material/MenuItem';\nimport MenuList from '@mui/material/MenuList';\nimport {BiCaretDown} from 'react-icons/bi'\nimport { useDispatch } from 'react-redux';\n\nlet options = [];\nlet date = new Date()\nfor(let i = date.getFullYear();i >= 2000; i--) {\n    options.push(i);\n}\n\nexport default function OptionYear() {\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const dispatch = useDispatch()\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\n\n  const handleClick = () => {\n    console.info(`You clicked ${options[selectedIndex]}`);\n  };\n\n  const handleMenuItemClick = (event, index, option) => {\n    console.log(option)\n    dispatch({\n      type: \"YEAR_SELECT_DASHBOARD\",\n      typeDashboard: option,\n    })\n    setSelectedIndex(index);\n    setOpen(false);\n  };\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  React.useEffect(() => {\n    dispatch({\n      type: \"RESET_MONTH_SELECT_DASHBOARD\"\n    })\n  }, [])\n\n  return (\n    <React.Fragment>\n      <ButtonGroup variant=\"contained\" ref={anchorRef} aria-label=\"split button\">\n        <Button onClick={handleClick}>{options[selectedIndex]}</Button>\n        <Button\n          size=\"small\"\n          aria-controls={open ? 'split-button-menu' : undefined}\n          aria-expanded={open ? 'true' : undefined}\n          aria-label=\"select merge strategy\"\n          aria-haspopup=\"menu\"\n          onClick={handleToggle}\n        >\n          <BiCaretDown />\n        </Button>\n      </ButtonGroup>\n      <Popper\n        id=\"choses-product\"\n        open={open}\n        style={{height: '500px', overflowY:'scroll'}}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n      >\n        {({ TransitionProps, placement }) => (\n          <Grow\n            {...TransitionProps}\n            style={{\n              transformOrigin:\n                placement === 'bottom' ? 'center top' : 'center bottom',\n            }}\n          >\n            <Paper>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList id=\"split-button-menu\">\n                  {options.map((option, index) => (\n                    <MenuItem\n                      key={option}\n                      selected={index === selectedIndex}\n                      onClick={(event) => handleMenuItemClick(event, index, option)}\n                    >\n                      {option}\n                    </MenuItem>\n                  ))}\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>\n        )}\n      </Popper>\n    </React.Fragment>\n  );\n}\n","/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/BaseOptionChart.js",[],"/Users/nguyenanhtuan/Desktop/GitHub/SE100Project/client/src/Components/Dashboard/GroupButton.js",["1221"],"import * as React from 'react';\nimport Button from '@mui/material/Button';\nimport ButtonGroup from '@mui/material/ButtonGroup';\nimport ClickAwayListener from '@mui/material/ClickAwayListener';\nimport Grow from '@mui/material/Grow';\nimport Paper from '@mui/material/Paper';\nimport Popper from '@mui/material/Popper';\nimport MenuItem from '@mui/material/MenuItem';\nimport MenuList from '@mui/material/MenuList';\nimport {BiCaretDown} from 'react-icons/bi'\nimport { useDispatch } from 'react-redux';\n\nconst options = ['Month', 'Week' , 'Last Week'];\n\nexport default function SplitButton() {\n  const [open, setOpen] = React.useState(false);\n  const anchorRef = React.useRef(null);\n  const dispatch = useDispatch()\n  const [selectedIndex, setSelectedIndex] = React.useState(0);\n\n  const handleClick = () => {\n    console.info(`You clicked ${options[selectedIndex]}`);\n  };\n\n  const handleMenuItemClick = (event, index, option) => {\n    console.log(option)\n    dispatch({\n      type: \"TYPE_TIME_DASHBOARD\",\n      typeDashboard: option,\n    })\n    setSelectedIndex(index);\n    setOpen(false);\n  };\n\n  const handleToggle = () => {\n    setOpen((prevOpen) => !prevOpen);\n  };\n\n  const handleClose = (event) => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  React.useEffect(() => {\n    dispatch({\n      type: \"RESET_TYPE_TIME_DASHBOARD\"\n    })\n  }, [])\n\n  return (\n    <React.Fragment>\n      <ButtonGroup variant=\"contained\" ref={anchorRef} aria-label=\"split button\">\n        <Button onClick={handleClick}>{options[selectedIndex]}</Button>\n        <Button\n          size=\"small\"\n          aria-controls={open ? 'split-button-menu' : undefined}\n          aria-expanded={open ? 'true' : undefined}\n          aria-label=\"select merge strategy\"\n          aria-haspopup=\"menu\"\n          onClick={handleToggle}\n        >\n          <BiCaretDown />\n        </Button>\n      </ButtonGroup>\n      <Popper\n        open={open}\n        anchorEl={anchorRef.current}\n        role={undefined}\n        transition\n        disablePortal\n      >\n        {({ TransitionProps, placement }) => (\n          <Grow\n            {...TransitionProps}\n            style={{\n              transformOrigin:\n                placement === 'bottom' ? 'center top' : 'center bottom',\n            }}\n          >\n            <Paper>\n              <ClickAwayListener onClickAway={handleClose}>\n                <MenuList id=\"split-button-menu\">\n                  {options.map((option, index) => (\n                    <MenuItem\n                      key={option}\n                      selected={index === selectedIndex}\n                      onClick={(event) => handleMenuItemClick(event, index, option)}\n                    >\n                      {option}\n                    </MenuItem>\n                  ))}\n                </MenuList>\n              </ClickAwayListener>\n            </Paper>\n          </Grow>\n        )}\n      </Popper>\n    </React.Fragment>\n  );\n}\n",{"ruleId":"1222","severity":1,"message":"1223","line":10,"column":10,"nodeType":"1224","messageId":"1225","endLine":10,"endColumn":24},{"ruleId":"1226","severity":1,"message":"1227","line":13,"column":3,"nodeType":"1228","messageId":"1229","endLine":15,"endColumn":4},{"ruleId":"1222","severity":1,"message":"1230","line":24,"column":13,"nodeType":"1224","messageId":"1225","endLine":24,"endColumn":21},{"ruleId":"1231","severity":1,"message":"1232","line":35,"column":53,"nodeType":"1233","messageId":"1234","endLine":35,"endColumn":55},{"ruleId":"1235","severity":1,"message":"1236","line":48,"column":21,"nodeType":"1224","messageId":"1237","endLine":48,"endColumn":29},{"ruleId":"1235","severity":1,"message":"1238","line":49,"column":25,"nodeType":"1224","messageId":"1237","endLine":49,"endColumn":26},{"ruleId":"1231","severity":1,"message":"1232","line":51,"column":53,"nodeType":"1233","messageId":"1234","endLine":51,"endColumn":55},{"ruleId":"1235","severity":1,"message":"1236","line":65,"column":21,"nodeType":"1224","messageId":"1237","endLine":65,"endColumn":29},{"ruleId":"1235","severity":1,"message":"1238","line":66,"column":25,"nodeType":"1224","messageId":"1237","endLine":66,"endColumn":26},{"ruleId":"1231","severity":1,"message":"1232","line":68,"column":53,"nodeType":"1233","messageId":"1234","endLine":68,"endColumn":55},{"ruleId":"1231","severity":1,"message":"1232","line":23,"column":44,"nodeType":"1233","messageId":"1234","endLine":23,"endColumn":46},{"ruleId":"1235","severity":1,"message":"1236","line":37,"column":21,"nodeType":"1224","messageId":"1237","endLine":37,"endColumn":29},{"ruleId":"1235","severity":1,"message":"1238","line":38,"column":25,"nodeType":"1224","messageId":"1237","endLine":38,"endColumn":26},{"ruleId":"1231","severity":1,"message":"1232","line":40,"column":44,"nodeType":"1233","messageId":"1234","endLine":40,"endColumn":46},{"ruleId":"1239","severity":1,"message":"1240","line":21,"column":45,"nodeType":"1241","messageId":"1242","endLine":21,"endColumn":47},{"ruleId":"1231","severity":1,"message":"1232","line":38,"column":30,"nodeType":"1233","messageId":"1234","endLine":38,"endColumn":32},{"ruleId":"1235","severity":1,"message":"1236","line":56,"column":25,"nodeType":"1224","messageId":"1237","endLine":56,"endColumn":33},{"ruleId":"1235","severity":1,"message":"1238","line":57,"column":29,"nodeType":"1224","messageId":"1237","endLine":57,"endColumn":30},{"ruleId":"1235","severity":1,"message":"1236","line":53,"column":21,"nodeType":"1224","messageId":"1237","endLine":53,"endColumn":29},{"ruleId":"1235","severity":1,"message":"1238","line":54,"column":25,"nodeType":"1224","messageId":"1237","endLine":54,"endColumn":26},{"ruleId":"1231","severity":1,"message":"1232","line":42,"column":30,"nodeType":"1233","messageId":"1234","endLine":42,"endColumn":32},{"ruleId":"1231","severity":1,"message":"1232","line":38,"column":30,"nodeType":"1233","messageId":"1234","endLine":38,"endColumn":32},{"ruleId":"1235","severity":1,"message":"1236","line":52,"column":25,"nodeType":"1224","messageId":"1237","endLine":52,"endColumn":33},{"ruleId":"1235","severity":1,"message":"1238","line":53,"column":29,"nodeType":"1224","messageId":"1237","endLine":53,"endColumn":30},{"ruleId":"1239","severity":1,"message":"1243","line":5,"column":46,"nodeType":"1241","messageId":"1244","endLine":5,"endColumn":48},{"ruleId":"1239","severity":1,"message":"1240","line":41,"column":45,"nodeType":"1241","messageId":"1242","endLine":41,"endColumn":47},{"ruleId":"1239","severity":1,"message":"1243","line":48,"column":48,"nodeType":"1241","messageId":"1244","endLine":48,"endColumn":50},{"ruleId":"1231","severity":1,"message":"1245","line":11,"column":35,"nodeType":"1233","messageId":"1234","endLine":11,"endColumn":37},{"ruleId":"1222","severity":1,"message":"1230","line":33,"column":17,"nodeType":"1224","messageId":"1225","endLine":33,"endColumn":25},{"ruleId":"1246","severity":1,"message":"1247","line":123,"column":28,"nodeType":"1248","messageId":"1249","endLine":123,"endColumn":29,"suggestions":"1250"},{"ruleId":"1246","severity":1,"message":"1247","line":123,"column":44,"nodeType":"1248","messageId":"1249","endLine":123,"endColumn":45,"suggestions":"1251"},{"ruleId":"1252","severity":1,"message":"1253","line":315,"column":9,"nodeType":"1254","messageId":"1234","endLine":315,"endColumn":25},{"ruleId":"1222","severity":1,"message":"1255","line":13,"column":8,"nodeType":"1224","messageId":"1225","endLine":13,"endColumn":15},{"ruleId":"1246","severity":1,"message":"1247","line":105,"column":30,"nodeType":"1248","messageId":"1249","endLine":105,"endColumn":31,"suggestions":"1256"},{"ruleId":"1246","severity":1,"message":"1247","line":105,"column":46,"nodeType":"1248","messageId":"1249","endLine":105,"endColumn":47,"suggestions":"1257"},{"ruleId":"1222","severity":1,"message":"1255","line":6,"column":8,"nodeType":"1224","messageId":"1225","endLine":6,"endColumn":15},{"ruleId":"1246","severity":1,"message":"1247","line":96,"column":28,"nodeType":"1248","messageId":"1249","endLine":96,"endColumn":29,"suggestions":"1258"},{"ruleId":"1246","severity":1,"message":"1247","line":96,"column":44,"nodeType":"1248","messageId":"1249","endLine":96,"endColumn":45,"suggestions":"1259"},{"ruleId":"1222","severity":1,"message":"1260","line":9,"column":10,"nodeType":"1224","messageId":"1225","endLine":9,"endColumn":19},{"ruleId":"1222","severity":1,"message":"1261","line":14,"column":8,"nodeType":"1224","messageId":"1225","endLine":14,"endColumn":13},{"ruleId":"1222","severity":1,"message":"1262","line":9,"column":11,"nodeType":"1224","messageId":"1225","endLine":9,"endColumn":32},{"ruleId":"1222","severity":1,"message":"1263","line":119,"column":15,"nodeType":"1224","messageId":"1225","endLine":119,"endColumn":30},{"ruleId":"1264","severity":1,"message":"1265","line":135,"column":29,"nodeType":"1266","endLine":135,"endColumn":161},{"ruleId":"1231","severity":1,"message":"1245","line":141,"column":45,"nodeType":"1233","messageId":"1234","endLine":141,"endColumn":47},{"ruleId":"1231","severity":1,"message":"1245","line":154,"column":45,"nodeType":"1233","messageId":"1234","endLine":154,"endColumn":47},{"ruleId":"1267","severity":1,"message":"1268","line":219,"column":25,"nodeType":"1266","endLine":224,"endColumn":26},{"ruleId":"1267","severity":1,"message":"1269","line":228,"column":25,"nodeType":"1266","endLine":228,"endColumn":136},{"ruleId":"1222","severity":1,"message":"1270","line":2,"column":10,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":18},{"ruleId":"1222","severity":1,"message":"1271","line":4,"column":10,"nodeType":"1224","messageId":"1225","endLine":4,"endColumn":17},{"ruleId":"1231","severity":1,"message":"1245","line":97,"column":53,"nodeType":"1233","messageId":"1234","endLine":97,"endColumn":55},{"ruleId":"1222","severity":1,"message":"1272","line":162,"column":13,"nodeType":"1224","messageId":"1225","endLine":162,"endColumn":17},{"ruleId":"1222","severity":1,"message":"1273","line":2,"column":8,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":12},{"ruleId":"1222","severity":1,"message":"1274","line":3,"column":8,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":13},{"ruleId":"1222","severity":1,"message":"1275","line":4,"column":8,"nodeType":"1224","messageId":"1225","endLine":4,"endColumn":17},{"ruleId":"1222","severity":1,"message":"1276","line":5,"column":8,"nodeType":"1224","messageId":"1225","endLine":5,"endColumn":22},{"ruleId":"1222","severity":1,"message":"1277","line":7,"column":10,"nodeType":"1224","messageId":"1225","endLine":7,"endColumn":22},{"ruleId":"1222","severity":1,"message":"1278","line":14,"column":5,"nodeType":"1224","messageId":"1225","endLine":14,"endColumn":11},{"ruleId":"1222","severity":1,"message":"1279","line":23,"column":5,"nodeType":"1224","messageId":"1225","endLine":23,"endColumn":20},{"ruleId":"1222","severity":1,"message":"1280","line":25,"column":8,"nodeType":"1224","messageId":"1225","endLine":25,"endColumn":23},{"ruleId":"1222","severity":1,"message":"1281","line":45,"column":10,"nodeType":"1224","messageId":"1225","endLine":45,"endColumn":21},{"ruleId":"1222","severity":1,"message":"1282","line":97,"column":5,"nodeType":"1224","messageId":"1225","endLine":97,"endColumn":15},{"ruleId":"1222","severity":1,"message":"1283","line":98,"column":5,"nodeType":"1224","messageId":"1225","endLine":98,"endColumn":18},{"ruleId":"1222","severity":1,"message":"1284","line":100,"column":5,"nodeType":"1224","messageId":"1225","endLine":100,"endColumn":9},{"ruleId":"1222","severity":1,"message":"1285","line":101,"column":5,"nodeType":"1224","messageId":"1225","endLine":101,"endColumn":16},{"ruleId":"1231","severity":1,"message":"1232","line":383,"column":75,"nodeType":"1233","messageId":"1234","endLine":383,"endColumn":77},{"ruleId":"1222","severity":1,"message":"1286","line":4,"column":10,"nodeType":"1224","messageId":"1225","endLine":4,"endColumn":20},{"ruleId":"1222","severity":1,"message":"1287","line":5,"column":10,"nodeType":"1224","messageId":"1225","endLine":5,"endColumn":17},{"ruleId":"1239","severity":1,"message":"1240","line":185,"column":89,"nodeType":"1241","messageId":"1242","endLine":185,"endColumn":91},{"ruleId":"1222","severity":1,"message":"1288","line":2,"column":28,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":35},{"ruleId":"1222","severity":1,"message":"1289","line":3,"column":9,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":12},{"ruleId":"1222","severity":1,"message":"1290","line":3,"column":14,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":25},{"ruleId":"1222","severity":1,"message":"1291","line":3,"column":35,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":45},{"ruleId":"1222","severity":1,"message":"1292","line":5,"column":10,"nodeType":"1224","messageId":"1225","endLine":5,"endColumn":15},{"ruleId":"1222","severity":1,"message":"1293","line":10,"column":5,"nodeType":"1224","messageId":"1225","endLine":10,"endColumn":17},{"ruleId":"1222","severity":1,"message":"1294","line":14,"column":5,"nodeType":"1224","messageId":"1225","endLine":14,"endColumn":12},{"ruleId":"1231","severity":1,"message":"1245","line":119,"column":47,"nodeType":"1233","messageId":"1234","endLine":119,"endColumn":49},{"ruleId":"1231","severity":1,"message":"1245","line":120,"column":59,"nodeType":"1233","messageId":"1234","endLine":120,"endColumn":61},{"ruleId":"1231","severity":1,"message":"1245","line":121,"column":61,"nodeType":"1233","messageId":"1234","endLine":121,"endColumn":63},{"ruleId":"1231","severity":1,"message":"1245","line":146,"column":34,"nodeType":"1233","messageId":"1234","endLine":146,"endColumn":36},{"ruleId":"1231","severity":1,"message":"1245","line":151,"column":32,"nodeType":"1233","messageId":"1234","endLine":151,"endColumn":34},{"ruleId":"1231","severity":1,"message":"1245","line":157,"column":32,"nodeType":"1233","messageId":"1234","endLine":157,"endColumn":34},{"ruleId":"1231","severity":1,"message":"1245","line":157,"column":74,"nodeType":"1233","messageId":"1234","endLine":157,"endColumn":76},{"ruleId":"1231","severity":1,"message":"1245","line":170,"column":33,"nodeType":"1233","messageId":"1234","endLine":170,"endColumn":35},{"ruleId":"1231","severity":1,"message":"1245","line":303,"column":80,"nodeType":"1233","messageId":"1234","endLine":303,"endColumn":82},{"ruleId":"1231","severity":1,"message":"1245","line":340,"column":78,"nodeType":"1233","messageId":"1234","endLine":340,"endColumn":80},{"ruleId":"1222","severity":1,"message":"1288","line":2,"column":28,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":35},{"ruleId":"1222","severity":1,"message":"1289","line":3,"column":9,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":12},{"ruleId":"1222","severity":1,"message":"1290","line":3,"column":14,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":25},{"ruleId":"1222","severity":1,"message":"1291","line":3,"column":35,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":45},{"ruleId":"1222","severity":1,"message":"1292","line":5,"column":10,"nodeType":"1224","messageId":"1225","endLine":5,"endColumn":15},{"ruleId":"1222","severity":1,"message":"1293","line":10,"column":5,"nodeType":"1224","messageId":"1225","endLine":10,"endColumn":17},{"ruleId":"1222","severity":1,"message":"1294","line":14,"column":5,"nodeType":"1224","messageId":"1225","endLine":14,"endColumn":12},{"ruleId":"1231","severity":1,"message":"1245","line":114,"column":40,"nodeType":"1233","messageId":"1234","endLine":114,"endColumn":42},{"ruleId":"1231","severity":1,"message":"1245","line":119,"column":38,"nodeType":"1233","messageId":"1234","endLine":119,"endColumn":40},{"ruleId":"1231","severity":1,"message":"1245","line":125,"column":38,"nodeType":"1233","messageId":"1234","endLine":125,"endColumn":40},{"ruleId":"1231","severity":1,"message":"1245","line":125,"column":86,"nodeType":"1233","messageId":"1234","endLine":125,"endColumn":88},{"ruleId":"1231","severity":1,"message":"1245","line":138,"column":33,"nodeType":"1233","messageId":"1234","endLine":138,"endColumn":35},{"ruleId":"1231","severity":1,"message":"1245","line":266,"column":80,"nodeType":"1233","messageId":"1234","endLine":266,"endColumn":82},{"ruleId":"1231","severity":1,"message":"1245","line":301,"column":78,"nodeType":"1233","messageId":"1234","endLine":301,"endColumn":80},{"ruleId":"1222","severity":1,"message":"1295","line":4,"column":10,"nodeType":"1224","messageId":"1225","endLine":4,"endColumn":14},{"ruleId":"1222","severity":1,"message":"1290","line":4,"column":43,"nodeType":"1224","messageId":"1225","endLine":4,"endColumn":54},{"ruleId":"1222","severity":1,"message":"1296","line":1,"column":17,"nodeType":"1224","messageId":"1225","endLine":1,"endColumn":25},{"ruleId":"1222","severity":1,"message":"1297","line":3,"column":24,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":35},{"ruleId":"1298","severity":1,"message":"1299","line":12,"column":8,"nodeType":"1300","endLine":12,"endColumn":10,"suggestions":"1301"},{"ruleId":"1239","severity":1,"message":"1243","line":25,"column":39,"nodeType":"1241","messageId":"1244","endLine":25,"endColumn":41},{"ruleId":"1239","severity":1,"message":"1243","line":33,"column":39,"nodeType":"1241","messageId":"1244","endLine":33,"endColumn":41},{"ruleId":"1239","severity":1,"message":"1243","line":45,"column":39,"nodeType":"1241","messageId":"1244","endLine":45,"endColumn":41},{"ruleId":"1222","severity":1,"message":"1302","line":76,"column":11,"nodeType":"1224","messageId":"1225","endLine":76,"endColumn":21},{"ruleId":"1239","severity":1,"message":"1243","line":153,"column":37,"nodeType":"1241","messageId":"1244","endLine":153,"endColumn":39},{"ruleId":"1239","severity":1,"message":"1243","line":180,"column":37,"nodeType":"1241","messageId":"1244","endLine":180,"endColumn":39},{"ruleId":"1222","severity":1,"message":"1303","line":19,"column":8,"nodeType":"1224","messageId":"1225","endLine":19,"endColumn":13},{"ruleId":"1222","severity":1,"message":"1304","line":27,"column":11,"nodeType":"1224","messageId":"1225","endLine":27,"endColumn":19},{"ruleId":"1239","severity":1,"message":"1243","line":104,"column":35,"nodeType":"1241","messageId":"1244","endLine":104,"endColumn":37},{"ruleId":"1239","severity":1,"message":"1243","line":31,"column":43,"nodeType":"1241","messageId":"1244","endLine":31,"endColumn":45},{"ruleId":"1239","severity":1,"message":"1243","line":39,"column":43,"nodeType":"1241","messageId":"1244","endLine":39,"endColumn":45},{"ruleId":"1239","severity":1,"message":"1243","line":50,"column":43,"nodeType":"1241","messageId":"1244","endLine":50,"endColumn":45},{"ruleId":"1222","severity":1,"message":"1305","line":7,"column":8,"nodeType":"1224","messageId":"1225","endLine":7,"endColumn":18},{"ruleId":"1231","severity":1,"message":"1245","line":39,"column":74,"nodeType":"1233","messageId":"1234","endLine":39,"endColumn":76},{"ruleId":"1231","severity":1,"message":"1245","line":49,"column":49,"nodeType":"1233","messageId":"1234","endLine":49,"endColumn":51},{"ruleId":"1306","severity":1,"message":"1307","line":180,"column":33,"nodeType":"1308","messageId":"1309","endLine":180,"endColumn":64},{"ruleId":"1298","severity":1,"message":"1299","line":172,"column":8,"nodeType":"1300","endLine":172,"endColumn":10,"suggestions":"1310"},{"ruleId":"1222","severity":1,"message":"1311","line":3,"column":10,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":33},{"ruleId":"1222","severity":1,"message":"1312","line":5,"column":10,"nodeType":"1224","messageId":"1225","endLine":5,"endColumn":20},{"ruleId":"1231","severity":1,"message":"1232","line":13,"column":30,"nodeType":"1233","messageId":"1234","endLine":13,"endColumn":32},{"ruleId":"1231","severity":1,"message":"1232","line":17,"column":29,"nodeType":"1233","messageId":"1234","endLine":17,"endColumn":31},{"ruleId":"1222","severity":1,"message":"1313","line":32,"column":9,"nodeType":"1224","messageId":"1225","endLine":32,"endColumn":15},{"ruleId":"1222","severity":1,"message":"1314","line":40,"column":11,"nodeType":"1224","messageId":"1225","endLine":40,"endColumn":22},{"ruleId":"1222","severity":1,"message":"1315","line":43,"column":12,"nodeType":"1224","messageId":"1225","endLine":43,"endColumn":22},{"ruleId":"1222","severity":1,"message":"1316","line":43,"column":24,"nodeType":"1224","messageId":"1225","endLine":43,"endColumn":37},{"ruleId":"1222","severity":1,"message":"1317","line":49,"column":13,"nodeType":"1224","messageId":"1225","endLine":49,"endColumn":18},{"ruleId":"1231","severity":1,"message":"1245","line":56,"column":33,"nodeType":"1233","messageId":"1234","endLine":56,"endColumn":35},{"ruleId":"1231","severity":1,"message":"1245","line":64,"column":29,"nodeType":"1233","messageId":"1234","endLine":64,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":64,"column":65,"nodeType":"1233","messageId":"1234","endLine":64,"endColumn":67},{"ruleId":"1231","severity":1,"message":"1245","line":64,"column":92,"nodeType":"1233","messageId":"1234","endLine":64,"endColumn":94},{"ruleId":"1231","severity":1,"message":"1245","line":69,"column":40,"nodeType":"1233","messageId":"1234","endLine":69,"endColumn":42},{"ruleId":"1235","severity":1,"message":"1238","line":71,"column":21,"nodeType":"1224","messageId":"1237","endLine":71,"endColumn":22},{"ruleId":"1235","severity":1,"message":"1318","line":73,"column":21,"nodeType":"1224","messageId":"1237","endLine":73,"endColumn":29},{"ruleId":"1235","severity":1,"message":"1319","line":74,"column":21,"nodeType":"1224","messageId":"1237","endLine":74,"endColumn":25},{"ruleId":"1231","severity":1,"message":"1245","line":77,"column":29,"nodeType":"1233","messageId":"1234","endLine":77,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":77,"column":65,"nodeType":"1233","messageId":"1234","endLine":77,"endColumn":67},{"ruleId":"1231","severity":1,"message":"1245","line":77,"column":92,"nodeType":"1233","messageId":"1234","endLine":77,"endColumn":94},{"ruleId":"1231","severity":1,"message":"1245","line":83,"column":40,"nodeType":"1233","messageId":"1234","endLine":83,"endColumn":42},{"ruleId":"1235","severity":1,"message":"1238","line":85,"column":21,"nodeType":"1224","messageId":"1237","endLine":85,"endColumn":22},{"ruleId":"1235","severity":1,"message":"1318","line":87,"column":21,"nodeType":"1224","messageId":"1237","endLine":87,"endColumn":29},{"ruleId":"1235","severity":1,"message":"1319","line":88,"column":21,"nodeType":"1224","messageId":"1237","endLine":88,"endColumn":25},{"ruleId":"1231","severity":1,"message":"1245","line":91,"column":29,"nodeType":"1233","messageId":"1234","endLine":91,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":91,"column":56,"nodeType":"1233","messageId":"1234","endLine":91,"endColumn":58},{"ruleId":"1231","severity":1,"message":"1245","line":96,"column":40,"nodeType":"1233","messageId":"1234","endLine":96,"endColumn":42},{"ruleId":"1235","severity":1,"message":"1238","line":98,"column":21,"nodeType":"1224","messageId":"1237","endLine":98,"endColumn":22},{"ruleId":"1235","severity":1,"message":"1318","line":100,"column":21,"nodeType":"1224","messageId":"1237","endLine":100,"endColumn":29},{"ruleId":"1235","severity":1,"message":"1319","line":101,"column":21,"nodeType":"1224","messageId":"1237","endLine":101,"endColumn":25},{"ruleId":"1231","severity":1,"message":"1245","line":104,"column":29,"nodeType":"1233","messageId":"1234","endLine":104,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":109,"column":40,"nodeType":"1233","messageId":"1234","endLine":109,"endColumn":42},{"ruleId":"1235","severity":1,"message":"1238","line":111,"column":21,"nodeType":"1224","messageId":"1237","endLine":111,"endColumn":22},{"ruleId":"1298","severity":1,"message":"1320","line":117,"column":8,"nodeType":"1300","endLine":117,"endColumn":29,"suggestions":"1321"},{"ruleId":"1235","severity":1,"message":"1322","line":23,"column":21,"nodeType":"1224","messageId":"1237","endLine":23,"endColumn":29},{"ruleId":"1235","severity":1,"message":"1323","line":24,"column":21,"nodeType":"1224","messageId":"1237","endLine":24,"endColumn":28},{"ruleId":"1235","severity":1,"message":"1324","line":34,"column":21,"nodeType":"1224","messageId":"1237","endLine":34,"endColumn":27},{"ruleId":"1235","severity":1,"message":"1325","line":35,"column":21,"nodeType":"1224","messageId":"1237","endLine":35,"endColumn":26},{"ruleId":"1222","severity":1,"message":"1303","line":9,"column":8,"nodeType":"1224","messageId":"1225","endLine":9,"endColumn":13},{"ruleId":"1222","severity":1,"message":"1311","line":3,"column":10,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":33},{"ruleId":"1222","severity":1,"message":"1317","line":17,"column":13,"nodeType":"1224","messageId":"1225","endLine":17,"endColumn":18},{"ruleId":"1231","severity":1,"message":"1245","line":20,"column":33,"nodeType":"1233","messageId":"1234","endLine":20,"endColumn":35},{"ruleId":"1231","severity":1,"message":"1245","line":28,"column":29,"nodeType":"1233","messageId":"1234","endLine":28,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":28,"column":61,"nodeType":"1233","messageId":"1234","endLine":28,"endColumn":63},{"ruleId":"1231","severity":1,"message":"1245","line":28,"column":88,"nodeType":"1233","messageId":"1234","endLine":28,"endColumn":90},{"ruleId":"1239","severity":1,"message":"1243","line":34,"column":35,"nodeType":"1241","messageId":"1244","endLine":34,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":38,"column":29,"nodeType":"1233","messageId":"1234","endLine":38,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":38,"column":61,"nodeType":"1233","messageId":"1234","endLine":38,"endColumn":63},{"ruleId":"1231","severity":1,"message":"1245","line":38,"column":88,"nodeType":"1233","messageId":"1234","endLine":38,"endColumn":90},{"ruleId":"1231","severity":1,"message":"1245","line":51,"column":40,"nodeType":"1233","messageId":"1234","endLine":51,"endColumn":42},{"ruleId":"1235","severity":1,"message":"1326","line":52,"column":17,"nodeType":"1224","messageId":"1237","endLine":52,"endColumn":30},{"ruleId":"1235","severity":1,"message":"1238","line":53,"column":21,"nodeType":"1224","messageId":"1237","endLine":53,"endColumn":22},{"ruleId":"1235","severity":1,"message":"1318","line":55,"column":21,"nodeType":"1224","messageId":"1237","endLine":55,"endColumn":29},{"ruleId":"1235","severity":1,"message":"1319","line":56,"column":21,"nodeType":"1224","messageId":"1237","endLine":56,"endColumn":25},{"ruleId":"1231","severity":1,"message":"1245","line":59,"column":29,"nodeType":"1233","messageId":"1234","endLine":59,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":59,"column":65,"nodeType":"1233","messageId":"1234","endLine":59,"endColumn":67},{"ruleId":"1231","severity":1,"message":"1245","line":59,"column":92,"nodeType":"1233","messageId":"1234","endLine":59,"endColumn":94},{"ruleId":"1235","severity":1,"message":"1327","line":65,"column":17,"nodeType":"1224","messageId":"1237","endLine":65,"endColumn":30},{"ruleId":"1239","severity":1,"message":"1243","line":66,"column":35,"nodeType":"1241","messageId":"1244","endLine":66,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":70,"column":29,"nodeType":"1233","messageId":"1234","endLine":70,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":70,"column":65,"nodeType":"1233","messageId":"1234","endLine":70,"endColumn":67},{"ruleId":"1231","severity":1,"message":"1245","line":70,"column":92,"nodeType":"1233","messageId":"1234","endLine":70,"endColumn":94},{"ruleId":"1231","severity":1,"message":"1245","line":83,"column":40,"nodeType":"1233","messageId":"1234","endLine":83,"endColumn":42},{"ruleId":"1235","severity":1,"message":"1326","line":84,"column":17,"nodeType":"1224","messageId":"1237","endLine":84,"endColumn":30},{"ruleId":"1235","severity":1,"message":"1238","line":85,"column":21,"nodeType":"1224","messageId":"1237","endLine":85,"endColumn":22},{"ruleId":"1235","severity":1,"message":"1318","line":87,"column":21,"nodeType":"1224","messageId":"1237","endLine":87,"endColumn":29},{"ruleId":"1235","severity":1,"message":"1319","line":88,"column":21,"nodeType":"1224","messageId":"1237","endLine":88,"endColumn":25},{"ruleId":"1231","severity":1,"message":"1245","line":91,"column":29,"nodeType":"1233","messageId":"1234","endLine":91,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":91,"column":56,"nodeType":"1233","messageId":"1234","endLine":91,"endColumn":58},{"ruleId":"1235","severity":1,"message":"1327","line":97,"column":17,"nodeType":"1224","messageId":"1237","endLine":97,"endColumn":30},{"ruleId":"1239","severity":1,"message":"1243","line":98,"column":35,"nodeType":"1241","messageId":"1244","endLine":98,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":101,"column":29,"nodeType":"1233","messageId":"1234","endLine":101,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":101,"column":56,"nodeType":"1233","messageId":"1234","endLine":101,"endColumn":58},{"ruleId":"1231","severity":1,"message":"1245","line":113,"column":40,"nodeType":"1233","messageId":"1234","endLine":113,"endColumn":42},{"ruleId":"1235","severity":1,"message":"1326","line":114,"column":17,"nodeType":"1224","messageId":"1237","endLine":114,"endColumn":30},{"ruleId":"1235","severity":1,"message":"1238","line":115,"column":21,"nodeType":"1224","messageId":"1237","endLine":115,"endColumn":22},{"ruleId":"1235","severity":1,"message":"1318","line":117,"column":21,"nodeType":"1224","messageId":"1237","endLine":117,"endColumn":29},{"ruleId":"1235","severity":1,"message":"1319","line":118,"column":21,"nodeType":"1224","messageId":"1237","endLine":118,"endColumn":25},{"ruleId":"1231","severity":1,"message":"1245","line":121,"column":29,"nodeType":"1233","messageId":"1234","endLine":121,"endColumn":31},{"ruleId":"1235","severity":1,"message":"1327","line":127,"column":17,"nodeType":"1224","messageId":"1237","endLine":127,"endColumn":30},{"ruleId":"1239","severity":1,"message":"1243","line":128,"column":35,"nodeType":"1241","messageId":"1244","endLine":128,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":131,"column":29,"nodeType":"1233","messageId":"1234","endLine":131,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":143,"column":40,"nodeType":"1233","messageId":"1234","endLine":143,"endColumn":42},{"ruleId":"1235","severity":1,"message":"1326","line":144,"column":17,"nodeType":"1224","messageId":"1237","endLine":144,"endColumn":30},{"ruleId":"1231","severity":1,"message":"1232","line":145,"column":27,"nodeType":"1233","messageId":"1234","endLine":145,"endColumn":29},{"ruleId":"1231","severity":1,"message":"1232","line":145,"column":61,"nodeType":"1233","messageId":"1234","endLine":145,"endColumn":63},{"ruleId":"1235","severity":1,"message":"1238","line":146,"column":25,"nodeType":"1224","messageId":"1237","endLine":146,"endColumn":26},{"ruleId":"1235","severity":1,"message":"1327","line":152,"column":17,"nodeType":"1224","messageId":"1237","endLine":152,"endColumn":30},{"ruleId":"1239","severity":1,"message":"1243","line":153,"column":35,"nodeType":"1241","messageId":"1244","endLine":153,"endColumn":37},{"ruleId":"1298","severity":1,"message":"1328","line":167,"column":8,"nodeType":"1300","endLine":167,"endColumn":29,"suggestions":"1329"},{"ruleId":"1222","severity":1,"message":"1288","line":2,"column":28,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":35},{"ruleId":"1222","severity":1,"message":"1289","line":3,"column":9,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":12},{"ruleId":"1222","severity":1,"message":"1290","line":3,"column":14,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":25},{"ruleId":"1222","severity":1,"message":"1291","line":3,"column":35,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":45},{"ruleId":"1222","severity":1,"message":"1292","line":5,"column":10,"nodeType":"1224","messageId":"1225","endLine":5,"endColumn":15},{"ruleId":"1222","severity":1,"message":"1293","line":10,"column":5,"nodeType":"1224","messageId":"1225","endLine":10,"endColumn":17},{"ruleId":"1222","severity":1,"message":"1294","line":14,"column":5,"nodeType":"1224","messageId":"1225","endLine":14,"endColumn":12},{"ruleId":"1231","severity":1,"message":"1245","line":164,"column":47,"nodeType":"1233","messageId":"1234","endLine":164,"endColumn":49},{"ruleId":"1231","severity":1,"message":"1245","line":165,"column":59,"nodeType":"1233","messageId":"1234","endLine":165,"endColumn":61},{"ruleId":"1231","severity":1,"message":"1245","line":166,"column":61,"nodeType":"1233","messageId":"1234","endLine":166,"endColumn":63},{"ruleId":"1231","severity":1,"message":"1232","line":181,"column":38,"nodeType":"1233","messageId":"1234","endLine":181,"endColumn":40},{"ruleId":"1231","severity":1,"message":"1245","line":302,"column":80,"nodeType":"1233","messageId":"1234","endLine":302,"endColumn":82},{"ruleId":"1231","severity":1,"message":"1245","line":361,"column":80,"nodeType":"1233","messageId":"1234","endLine":361,"endColumn":82},{"ruleId":"1222","severity":1,"message":"1292","line":4,"column":10,"nodeType":"1224","messageId":"1225","endLine":4,"endColumn":15},{"ruleId":"1222","severity":1,"message":"1303","line":5,"column":8,"nodeType":"1224","messageId":"1225","endLine":5,"endColumn":13},{"ruleId":"1222","severity":1,"message":"1293","line":9,"column":5,"nodeType":"1224","messageId":"1225","endLine":9,"endColumn":17},{"ruleId":"1222","severity":1,"message":"1294","line":13,"column":5,"nodeType":"1224","messageId":"1225","endLine":13,"endColumn":12},{"ruleId":"1222","severity":1,"message":"1330","line":15,"column":5,"nodeType":"1224","messageId":"1225","endLine":15,"endColumn":14},{"ruleId":"1231","severity":1,"message":"1245","line":64,"column":59,"nodeType":"1233","messageId":"1234","endLine":64,"endColumn":61},{"ruleId":"1222","severity":1,"message":"1331","line":6,"column":72,"nodeType":"1224","messageId":"1225","endLine":6,"endColumn":78},{"ruleId":"1222","severity":1,"message":"1332","line":7,"column":10,"nodeType":"1224","messageId":"1225","endLine":7,"endColumn":23},{"ruleId":"1222","severity":1,"message":"1333","line":7,"column":25,"nodeType":"1224","messageId":"1225","endLine":7,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":67,"column":37,"nodeType":"1233","messageId":"1234","endLine":67,"endColumn":39},{"ruleId":"1231","severity":1,"message":"1245","line":80,"column":44,"nodeType":"1233","messageId":"1234","endLine":80,"endColumn":46},{"ruleId":"1222","severity":1,"message":"1334","line":5,"column":10,"nodeType":"1224","messageId":"1225","endLine":5,"endColumn":26},{"ruleId":"1231","severity":1,"message":"1245","line":28,"column":28,"nodeType":"1233","messageId":"1234","endLine":28,"endColumn":30},{"ruleId":"1231","severity":1,"message":"1232","line":29,"column":29,"nodeType":"1233","messageId":"1234","endLine":29,"endColumn":31},{"ruleId":"1222","severity":1,"message":"1288","line":2,"column":28,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":35},{"ruleId":"1222","severity":1,"message":"1289","line":3,"column":9,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":12},{"ruleId":"1222","severity":1,"message":"1290","line":3,"column":14,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":25},{"ruleId":"1222","severity":1,"message":"1291","line":3,"column":35,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":45},{"ruleId":"1222","severity":1,"message":"1292","line":5,"column":10,"nodeType":"1224","messageId":"1225","endLine":5,"endColumn":15},{"ruleId":"1222","severity":1,"message":"1293","line":10,"column":5,"nodeType":"1224","messageId":"1225","endLine":10,"endColumn":17},{"ruleId":"1222","severity":1,"message":"1294","line":14,"column":5,"nodeType":"1224","messageId":"1225","endLine":14,"endColumn":12},{"ruleId":"1231","severity":1,"message":"1245","line":84,"column":40,"nodeType":"1233","messageId":"1234","endLine":84,"endColumn":42},{"ruleId":"1231","severity":1,"message":"1245","line":89,"column":38,"nodeType":"1233","messageId":"1234","endLine":89,"endColumn":40},{"ruleId":"1231","severity":1,"message":"1245","line":95,"column":35,"nodeType":"1233","messageId":"1234","endLine":95,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":95,"column":80,"nodeType":"1233","messageId":"1234","endLine":95,"endColumn":82},{"ruleId":"1231","severity":1,"message":"1245","line":100,"column":30,"nodeType":"1233","messageId":"1234","endLine":100,"endColumn":32},{"ruleId":"1231","severity":1,"message":"1245","line":100,"column":72,"nodeType":"1233","messageId":"1234","endLine":100,"endColumn":74},{"ruleId":"1231","severity":1,"message":"1245","line":132,"column":33,"nodeType":"1233","messageId":"1234","endLine":132,"endColumn":35},{"ruleId":"1231","severity":1,"message":"1245","line":307,"column":80,"nodeType":"1233","messageId":"1234","endLine":307,"endColumn":82},{"ruleId":"1231","severity":1,"message":"1245","line":342,"column":78,"nodeType":"1233","messageId":"1234","endLine":342,"endColumn":80},{"ruleId":"1231","severity":1,"message":"1245","line":376,"column":81,"nodeType":"1233","messageId":"1234","endLine":376,"endColumn":83},{"ruleId":"1222","severity":1,"message":"1331","line":6,"column":72,"nodeType":"1224","messageId":"1225","endLine":6,"endColumn":78},{"ruleId":"1222","severity":1,"message":"1335","line":4,"column":10,"nodeType":"1224","messageId":"1225","endLine":4,"endColumn":14},{"ruleId":"1222","severity":1,"message":"1336","line":5,"column":8,"nodeType":"1224","messageId":"1225","endLine":5,"endColumn":24},{"ruleId":"1222","severity":1,"message":"1337","line":11,"column":3,"nodeType":"1224","messageId":"1225","endLine":11,"endColumn":7},{"ruleId":"1222","severity":1,"message":"1338","line":11,"column":9,"nodeType":"1224","messageId":"1225","endLine":11,"endColumn":17},{"ruleId":"1222","severity":1,"message":"1295","line":11,"column":19,"nodeType":"1224","messageId":"1225","endLine":11,"endColumn":23},{"ruleId":"1231","severity":1,"message":"1245","line":72,"column":38,"nodeType":"1233","messageId":"1234","endLine":72,"endColumn":40},{"ruleId":"1231","severity":1,"message":"1245","line":85,"column":36,"nodeType":"1233","messageId":"1234","endLine":85,"endColumn":38},{"ruleId":"1231","severity":1,"message":"1245","line":98,"column":44,"nodeType":"1233","messageId":"1234","endLine":98,"endColumn":46},{"ruleId":"1231","severity":1,"message":"1245","line":131,"column":44,"nodeType":"1233","messageId":"1234","endLine":131,"endColumn":46},{"ruleId":"1231","severity":1,"message":"1245","line":170,"column":74,"nodeType":"1233","messageId":"1234","endLine":170,"endColumn":76},{"ruleId":"1231","severity":1,"message":"1232","line":180,"column":87,"nodeType":"1233","messageId":"1234","endLine":180,"endColumn":89},{"ruleId":"1239","severity":1,"message":"1243","line":52,"column":35,"nodeType":"1241","messageId":"1244","endLine":52,"endColumn":37},{"ruleId":"1239","severity":1,"message":"1240","line":482,"column":86,"nodeType":"1241","messageId":"1242","endLine":482,"endColumn":88},{"ruleId":"1239","severity":1,"message":"1240","line":505,"column":38,"nodeType":"1241","messageId":"1242","endLine":505,"endColumn":40},{"ruleId":"1231","severity":1,"message":"1245","line":509,"column":36,"nodeType":"1233","messageId":"1234","endLine":509,"endColumn":38},{"ruleId":"1231","severity":1,"message":"1245","line":509,"column":70,"nodeType":"1233","messageId":"1234","endLine":509,"endColumn":72},{"ruleId":"1231","severity":1,"message":"1245","line":509,"column":103,"nodeType":"1233","messageId":"1234","endLine":509,"endColumn":105},{"ruleId":"1239","severity":1,"message":"1240","line":516,"column":38,"nodeType":"1241","messageId":"1242","endLine":516,"endColumn":40},{"ruleId":"1231","severity":1,"message":"1245","line":520,"column":38,"nodeType":"1233","messageId":"1234","endLine":520,"endColumn":40},{"ruleId":"1231","severity":1,"message":"1245","line":520,"column":71,"nodeType":"1233","messageId":"1234","endLine":520,"endColumn":73},{"ruleId":"1239","severity":1,"message":"1240","line":527,"column":38,"nodeType":"1241","messageId":"1242","endLine":527,"endColumn":40},{"ruleId":"1231","severity":1,"message":"1245","line":531,"column":37,"nodeType":"1233","messageId":"1234","endLine":531,"endColumn":39},{"ruleId":"1239","severity":1,"message":"1240","line":538,"column":38,"nodeType":"1241","messageId":"1242","endLine":538,"endColumn":40},{"ruleId":"1239","severity":1,"message":"1243","line":552,"column":24,"nodeType":"1241","messageId":"1244","endLine":552,"endColumn":26},{"ruleId":"1298","severity":1,"message":"1339","line":563,"column":8,"nodeType":"1300","endLine":563,"endColumn":71,"suggestions":"1340"},{"ruleId":"1222","severity":1,"message":"1291","line":3,"column":40,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":50},{"ruleId":"1222","severity":1,"message":"1341","line":6,"column":10,"nodeType":"1224","messageId":"1225","endLine":6,"endColumn":23},{"ruleId":"1222","severity":1,"message":"1342","line":6,"column":25,"nodeType":"1224","messageId":"1225","endLine":6,"endColumn":31},{"ruleId":"1222","severity":1,"message":"1343","line":7,"column":8,"nodeType":"1224","messageId":"1225","endLine":7,"endColumn":13},{"ruleId":"1222","severity":1,"message":"1344","line":8,"column":10,"nodeType":"1224","messageId":"1225","endLine":8,"endColumn":18},{"ruleId":"1222","severity":1,"message":"1345","line":9,"column":8,"nodeType":"1224","messageId":"1225","endLine":9,"endColumn":14},{"ruleId":"1222","severity":1,"message":"1338","line":10,"column":8,"nodeType":"1224","messageId":"1225","endLine":10,"endColumn":16},{"ruleId":"1222","severity":1,"message":"1346","line":11,"column":8,"nodeType":"1224","messageId":"1225","endLine":11,"endColumn":19},{"ruleId":"1222","severity":1,"message":"1292","line":12,"column":10,"nodeType":"1224","messageId":"1225","endLine":12,"endColumn":15},{"ruleId":"1222","severity":1,"message":"1347","line":16,"column":8,"nodeType":"1224","messageId":"1225","endLine":16,"endColumn":28},{"ruleId":"1222","severity":1,"message":"1348","line":17,"column":8,"nodeType":"1224","messageId":"1225","endLine":17,"endColumn":22},{"ruleId":"1222","severity":1,"message":"1349","line":18,"column":8,"nodeType":"1224","messageId":"1225","endLine":18,"endColumn":18},{"ruleId":"1222","severity":1,"message":"1350","line":19,"column":8,"nodeType":"1224","messageId":"1225","endLine":19,"endColumn":22},{"ruleId":"1222","severity":1,"message":"1351","line":20,"column":10,"nodeType":"1224","messageId":"1225","endLine":20,"endColumn":26},{"ruleId":"1222","severity":1,"message":"1352","line":21,"column":8,"nodeType":"1224","messageId":"1225","endLine":21,"endColumn":18},{"ruleId":"1222","severity":1,"message":"1293","line":23,"column":5,"nodeType":"1224","messageId":"1225","endLine":23,"endColumn":17},{"ruleId":"1222","severity":1,"message":"1294","line":27,"column":5,"nodeType":"1224","messageId":"1225","endLine":27,"endColumn":12},{"ruleId":"1222","severity":1,"message":"1353","line":47,"column":7,"nodeType":"1224","messageId":"1225","endLine":47,"endColumn":22},{"ruleId":"1231","severity":1,"message":"1245","line":80,"column":41,"nodeType":"1233","messageId":"1234","endLine":80,"endColumn":43},{"ruleId":"1231","severity":1,"message":"1245","line":93,"column":50,"nodeType":"1233","messageId":"1234","endLine":93,"endColumn":52},{"ruleId":"1231","severity":1,"message":"1232","line":111,"column":73,"nodeType":"1233","messageId":"1234","endLine":111,"endColumn":75},{"ruleId":"1231","severity":1,"message":"1232","line":181,"column":96,"nodeType":"1233","messageId":"1234","endLine":181,"endColumn":98},{"ruleId":"1222","severity":1,"message":"1288","line":2,"column":28,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":35},{"ruleId":"1222","severity":1,"message":"1289","line":2,"column":54,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":57},{"ruleId":"1222","severity":1,"message":"1290","line":2,"column":59,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":70},{"ruleId":"1222","severity":1,"message":"1291","line":2,"column":80,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":90},{"ruleId":"1231","severity":1,"message":"1245","line":67,"column":68,"nodeType":"1233","messageId":"1234","endLine":67,"endColumn":70},{"ruleId":"1231","severity":1,"message":"1245","line":78,"column":28,"nodeType":"1233","messageId":"1234","endLine":78,"endColumn":30},{"ruleId":"1231","severity":1,"message":"1245","line":90,"column":29,"nodeType":"1233","messageId":"1234","endLine":90,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":97,"column":28,"nodeType":"1233","messageId":"1234","endLine":97,"endColumn":30},{"ruleId":"1231","severity":1,"message":"1245","line":104,"column":26,"nodeType":"1233","messageId":"1234","endLine":104,"endColumn":28},{"ruleId":"1231","severity":1,"message":"1245","line":111,"column":31,"nodeType":"1233","messageId":"1234","endLine":111,"endColumn":33},{"ruleId":"1231","severity":1,"message":"1245","line":123,"column":26,"nodeType":"1233","messageId":"1234","endLine":123,"endColumn":28},{"ruleId":"1231","severity":1,"message":"1245","line":130,"column":28,"nodeType":"1233","messageId":"1234","endLine":130,"endColumn":30},{"ruleId":"1231","severity":1,"message":"1245","line":137,"column":25,"nodeType":"1233","messageId":"1234","endLine":137,"endColumn":27},{"ruleId":"1231","severity":1,"message":"1245","line":142,"column":30,"nodeType":"1233","messageId":"1234","endLine":142,"endColumn":32},{"ruleId":"1231","severity":1,"message":"1245","line":142,"column":56,"nodeType":"1233","messageId":"1234","endLine":142,"endColumn":58},{"ruleId":"1231","severity":1,"message":"1245","line":155,"column":31,"nodeType":"1233","messageId":"1234","endLine":155,"endColumn":33},{"ruleId":"1231","severity":1,"message":"1245","line":170,"column":35,"nodeType":"1233","messageId":"1234","endLine":170,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1232","line":233,"column":63,"nodeType":"1233","messageId":"1234","endLine":233,"endColumn":65},{"ruleId":"1231","severity":1,"message":"1232","line":238,"column":61,"nodeType":"1233","messageId":"1234","endLine":238,"endColumn":63},{"ruleId":"1231","severity":1,"message":"1245","line":266,"column":127,"nodeType":"1233","messageId":"1234","endLine":266,"endColumn":129},{"ruleId":"1222","severity":1,"message":"1354","line":3,"column":10,"nodeType":"1224","messageId":"1225","endLine":3,"endColumn":24},{"ruleId":"1222","severity":1,"message":"1289","line":4,"column":10,"nodeType":"1224","messageId":"1225","endLine":4,"endColumn":13},{"ruleId":"1222","severity":1,"message":"1355","line":39,"column":5,"nodeType":"1224","messageId":"1225","endLine":39,"endColumn":10},{"ruleId":"1222","severity":1,"message":"1356","line":40,"column":5,"nodeType":"1224","messageId":"1225","endLine":40,"endColumn":12},{"ruleId":"1222","severity":1,"message":"1357","line":41,"column":5,"nodeType":"1224","messageId":"1225","endLine":41,"endColumn":13},{"ruleId":"1222","severity":1,"message":"1358","line":43,"column":5,"nodeType":"1224","messageId":"1225","endLine":43,"endColumn":16},{"ruleId":"1222","severity":1,"message":"1359","line":44,"column":5,"nodeType":"1224","messageId":"1225","endLine":44,"endColumn":18},{"ruleId":"1222","severity":1,"message":"1360","line":45,"column":5,"nodeType":"1224","messageId":"1225","endLine":45,"endColumn":21},{"ruleId":"1222","severity":1,"message":"1361","line":5,"column":9,"nodeType":"1224","messageId":"1225","endLine":5,"endColumn":19},{"ruleId":"1231","severity":1,"message":"1245","line":36,"column":25,"nodeType":"1233","messageId":"1234","endLine":36,"endColumn":27},{"ruleId":"1231","severity":1,"message":"1245","line":20,"column":33,"nodeType":"1233","messageId":"1234","endLine":20,"endColumn":35},{"ruleId":"1239","severity":1,"message":"1243","line":21,"column":35,"nodeType":"1241","messageId":"1244","endLine":21,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":24,"column":29,"nodeType":"1233","messageId":"1234","endLine":24,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":24,"column":61,"nodeType":"1233","messageId":"1234","endLine":24,"endColumn":63},{"ruleId":"1231","severity":1,"message":"1245","line":24,"column":88,"nodeType":"1233","messageId":"1234","endLine":24,"endColumn":90},{"ruleId":"1231","severity":1,"message":"1245","line":31,"column":40,"nodeType":"1233","messageId":"1234","endLine":31,"endColumn":42},{"ruleId":"1239","severity":1,"message":"1243","line":32,"column":35,"nodeType":"1241","messageId":"1244","endLine":32,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":35,"column":29,"nodeType":"1233","messageId":"1234","endLine":35,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":35,"column":71,"nodeType":"1233","messageId":"1234","endLine":35,"endColumn":73},{"ruleId":"1231","severity":1,"message":"1245","line":35,"column":114,"nodeType":"1233","messageId":"1234","endLine":35,"endColumn":116},{"ruleId":"1231","severity":1,"message":"1245","line":40,"column":40,"nodeType":"1233","messageId":"1234","endLine":40,"endColumn":42},{"ruleId":"1239","severity":1,"message":"1243","line":41,"column":35,"nodeType":"1241","messageId":"1244","endLine":41,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":44,"column":29,"nodeType":"1233","messageId":"1234","endLine":44,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":44,"column":64,"nodeType":"1233","messageId":"1234","endLine":44,"endColumn":66},{"ruleId":"1231","severity":1,"message":"1245","line":49,"column":40,"nodeType":"1233","messageId":"1234","endLine":49,"endColumn":42},{"ruleId":"1239","severity":1,"message":"1243","line":50,"column":35,"nodeType":"1241","messageId":"1244","endLine":50,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":53,"column":29,"nodeType":"1233","messageId":"1234","endLine":53,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":58,"column":40,"nodeType":"1233","messageId":"1234","endLine":58,"endColumn":42},{"ruleId":"1239","severity":1,"message":"1243","line":59,"column":35,"nodeType":"1241","messageId":"1244","endLine":59,"endColumn":37},{"ruleId":"1298","severity":1,"message":"1362","line":66,"column":8,"nodeType":"1300","endLine":66,"endColumn":29,"suggestions":"1363"},{"ruleId":"1222","severity":1,"message":"1288","line":2,"column":28,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":35},{"ruleId":"1222","severity":1,"message":"1289","line":2,"column":54,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":57},{"ruleId":"1222","severity":1,"message":"1290","line":2,"column":59,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":70},{"ruleId":"1222","severity":1,"message":"1291","line":2,"column":80,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":90},{"ruleId":"1222","severity":1,"message":"1293","line":9,"column":5,"nodeType":"1224","messageId":"1225","endLine":9,"endColumn":17},{"ruleId":"1222","severity":1,"message":"1294","line":13,"column":5,"nodeType":"1224","messageId":"1225","endLine":13,"endColumn":12},{"ruleId":"1231","severity":1,"message":"1245","line":126,"column":23,"nodeType":"1233","messageId":"1234","endLine":126,"endColumn":25},{"ruleId":"1231","severity":1,"message":"1245","line":133,"column":68,"nodeType":"1233","messageId":"1234","endLine":133,"endColumn":70},{"ruleId":"1235","severity":1,"message":"1238","line":140,"column":17,"nodeType":"1224","messageId":"1237","endLine":140,"endColumn":18},{"ruleId":"1231","severity":1,"message":"1245","line":142,"column":74,"nodeType":"1233","messageId":"1234","endLine":142,"endColumn":76},{"ruleId":"1231","severity":1,"message":"1245","line":151,"column":28,"nodeType":"1233","messageId":"1234","endLine":151,"endColumn":30},{"ruleId":"1231","severity":1,"message":"1245","line":163,"column":29,"nodeType":"1233","messageId":"1234","endLine":163,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":170,"column":28,"nodeType":"1233","messageId":"1234","endLine":170,"endColumn":30},{"ruleId":"1231","severity":1,"message":"1245","line":177,"column":26,"nodeType":"1233","messageId":"1234","endLine":177,"endColumn":28},{"ruleId":"1231","severity":1,"message":"1245","line":184,"column":31,"nodeType":"1233","messageId":"1234","endLine":184,"endColumn":33},{"ruleId":"1231","severity":1,"message":"1245","line":196,"column":26,"nodeType":"1233","messageId":"1234","endLine":196,"endColumn":28},{"ruleId":"1231","severity":1,"message":"1245","line":203,"column":28,"nodeType":"1233","messageId":"1234","endLine":203,"endColumn":30},{"ruleId":"1231","severity":1,"message":"1245","line":210,"column":25,"nodeType":"1233","messageId":"1234","endLine":210,"endColumn":27},{"ruleId":"1231","severity":1,"message":"1245","line":215,"column":30,"nodeType":"1233","messageId":"1234","endLine":215,"endColumn":32},{"ruleId":"1231","severity":1,"message":"1245","line":215,"column":56,"nodeType":"1233","messageId":"1234","endLine":215,"endColumn":58},{"ruleId":"1231","severity":1,"message":"1245","line":228,"column":31,"nodeType":"1233","messageId":"1234","endLine":228,"endColumn":33},{"ruleId":"1231","severity":1,"message":"1245","line":292,"column":34,"nodeType":"1233","messageId":"1234","endLine":292,"endColumn":36},{"ruleId":"1231","severity":1,"message":"1245","line":317,"column":127,"nodeType":"1233","messageId":"1234","endLine":317,"endColumn":129},{"ruleId":"1239","severity":1,"message":"1243","line":21,"column":36,"nodeType":"1241","messageId":"1244","endLine":21,"endColumn":38},{"ruleId":"1239","severity":1,"message":"1240","line":36,"column":51,"nodeType":"1241","messageId":"1242","endLine":36,"endColumn":53},{"ruleId":"1231","severity":1,"message":"1245","line":40,"column":25,"nodeType":"1233","messageId":"1234","endLine":40,"endColumn":27},{"ruleId":"1231","severity":1,"message":"1245","line":40,"column":43,"nodeType":"1233","messageId":"1234","endLine":40,"endColumn":45},{"ruleId":"1231","severity":1,"message":"1245","line":40,"column":63,"nodeType":"1233","messageId":"1234","endLine":40,"endColumn":65},{"ruleId":"1298","severity":1,"message":"1364","line":45,"column":8,"nodeType":"1300","endLine":45,"endColumn":15,"suggestions":"1365"},{"ruleId":"1222","severity":1,"message":"1366","line":1,"column":17,"nodeType":"1224","messageId":"1225","endLine":1,"endColumn":20},{"ruleId":"1222","severity":1,"message":"1367","line":11,"column":23,"nodeType":"1224","messageId":"1225","endLine":11,"endColumn":34},{"ruleId":"1222","severity":1,"message":"1368","line":17,"column":10,"nodeType":"1224","messageId":"1225","endLine":17,"endColumn":15},{"ruleId":"1239","severity":1,"message":"1243","line":111,"column":23,"nodeType":"1241","messageId":"1244","endLine":111,"endColumn":25},{"ruleId":"1239","severity":1,"message":"1243","line":115,"column":31,"nodeType":"1241","messageId":"1244","endLine":115,"endColumn":33},{"ruleId":"1239","severity":1,"message":"1243","line":121,"column":43,"nodeType":"1241","messageId":"1244","endLine":121,"endColumn":45},{"ruleId":"1239","severity":1,"message":"1240","line":184,"column":37,"nodeType":"1241","messageId":"1242","endLine":184,"endColumn":39},{"ruleId":"1239","severity":1,"message":"1243","line":209,"column":33,"nodeType":"1241","messageId":"1244","endLine":209,"endColumn":35},{"ruleId":"1231","severity":1,"message":"1245","line":212,"column":23,"nodeType":"1233","messageId":"1234","endLine":212,"endColumn":25},{"ruleId":"1231","severity":1,"message":"1245","line":212,"column":56,"nodeType":"1233","messageId":"1234","endLine":212,"endColumn":58},{"ruleId":"1231","severity":1,"message":"1245","line":212,"column":89,"nodeType":"1233","messageId":"1234","endLine":212,"endColumn":91},{"ruleId":"1231","severity":1,"message":"1245","line":212,"column":122,"nodeType":"1233","messageId":"1234","endLine":212,"endColumn":124},{"ruleId":"1231","severity":1,"message":"1245","line":214,"column":27,"nodeType":"1233","messageId":"1234","endLine":214,"endColumn":29},{"ruleId":"1231","severity":1,"message":"1245","line":214,"column":53,"nodeType":"1233","messageId":"1234","endLine":214,"endColumn":55},{"ruleId":"1239","severity":1,"message":"1243","line":216,"column":45,"nodeType":"1241","messageId":"1244","endLine":216,"endColumn":47},{"ruleId":"1369","severity":1,"message":"1370","line":232,"column":27,"nodeType":"1241","messageId":"1371","endLine":243,"endColumn":12},{"ruleId":"1239","severity":1,"message":"1243","line":232,"column":35,"nodeType":"1241","messageId":"1244","endLine":232,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":235,"column":19,"nodeType":"1233","messageId":"1234","endLine":235,"endColumn":21},{"ruleId":"1231","severity":1,"message":"1245","line":235,"column":46,"nodeType":"1233","messageId":"1234","endLine":235,"endColumn":48},{"ruleId":"1231","severity":1,"message":"1245","line":235,"column":72,"nodeType":"1233","messageId":"1234","endLine":235,"endColumn":74},{"ruleId":"1239","severity":1,"message":"1243","line":238,"column":47,"nodeType":"1241","messageId":"1244","endLine":238,"endColumn":49},{"ruleId":"1239","severity":1,"message":"1243","line":260,"column":33,"nodeType":"1241","messageId":"1244","endLine":260,"endColumn":35},{"ruleId":"1231","severity":1,"message":"1245","line":263,"column":23,"nodeType":"1233","messageId":"1234","endLine":263,"endColumn":25},{"ruleId":"1231","severity":1,"message":"1245","line":263,"column":56,"nodeType":"1233","messageId":"1234","endLine":263,"endColumn":58},{"ruleId":"1231","severity":1,"message":"1245","line":263,"column":89,"nodeType":"1233","messageId":"1234","endLine":263,"endColumn":91},{"ruleId":"1231","severity":1,"message":"1245","line":263,"column":122,"nodeType":"1233","messageId":"1234","endLine":263,"endColumn":124},{"ruleId":"1231","severity":1,"message":"1245","line":264,"column":26,"nodeType":"1233","messageId":"1234","endLine":264,"endColumn":28},{"ruleId":"1231","severity":1,"message":"1245","line":264,"column":55,"nodeType":"1233","messageId":"1234","endLine":264,"endColumn":57},{"ruleId":"1239","severity":1,"message":"1243","line":267,"column":47,"nodeType":"1241","messageId":"1244","endLine":267,"endColumn":49},{"ruleId":"1369","severity":1,"message":"1370","line":283,"column":27,"nodeType":"1241","messageId":"1371","endLine":294,"endColumn":12},{"ruleId":"1239","severity":1,"message":"1243","line":283,"column":35,"nodeType":"1241","messageId":"1244","endLine":283,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":286,"column":19,"nodeType":"1233","messageId":"1234","endLine":286,"endColumn":21},{"ruleId":"1231","severity":1,"message":"1245","line":286,"column":49,"nodeType":"1233","messageId":"1234","endLine":286,"endColumn":51},{"ruleId":"1231","severity":1,"message":"1245","line":286,"column":78,"nodeType":"1233","messageId":"1234","endLine":286,"endColumn":80},{"ruleId":"1239","severity":1,"message":"1243","line":289,"column":47,"nodeType":"1241","messageId":"1244","endLine":289,"endColumn":49},{"ruleId":"1239","severity":1,"message":"1243","line":316,"column":31,"nodeType":"1241","messageId":"1244","endLine":316,"endColumn":33},{"ruleId":"1231","severity":1,"message":"1245","line":319,"column":15,"nodeType":"1233","messageId":"1234","endLine":319,"endColumn":17},{"ruleId":"1231","severity":1,"message":"1245","line":319,"column":41,"nodeType":"1233","messageId":"1234","endLine":319,"endColumn":43},{"ruleId":"1239","severity":1,"message":"1243","line":322,"column":43,"nodeType":"1241","messageId":"1244","endLine":322,"endColumn":45},{"ruleId":"1239","severity":1,"message":"1243","line":343,"column":29,"nodeType":"1241","messageId":"1244","endLine":343,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":346,"column":21,"nodeType":"1233","messageId":"1234","endLine":346,"endColumn":23},{"ruleId":"1231","severity":1,"message":"1245","line":351,"column":21,"nodeType":"1233","messageId":"1234","endLine":351,"endColumn":23},{"ruleId":"1231","severity":1,"message":"1245","line":357,"column":21,"nodeType":"1233","messageId":"1234","endLine":357,"endColumn":23},{"ruleId":"1231","severity":1,"message":"1245","line":357,"column":42,"nodeType":"1233","messageId":"1234","endLine":357,"endColumn":44},{"ruleId":"1231","severity":1,"message":"1245","line":359,"column":28,"nodeType":"1233","messageId":"1234","endLine":359,"endColumn":30},{"ruleId":"1231","severity":1,"message":"1245","line":361,"column":31,"nodeType":"1233","messageId":"1234","endLine":361,"endColumn":33},{"ruleId":"1231","severity":1,"message":"1245","line":371,"column":37,"nodeType":"1233","messageId":"1234","endLine":371,"endColumn":39},{"ruleId":"1231","severity":1,"message":"1245","line":371,"column":71,"nodeType":"1233","messageId":"1234","endLine":371,"endColumn":73},{"ruleId":"1239","severity":1,"message":"1243","line":373,"column":29,"nodeType":"1241","messageId":"1244","endLine":373,"endColumn":31},{"ruleId":"1239","severity":1,"message":"1243","line":375,"column":33,"nodeType":"1241","messageId":"1244","endLine":375,"endColumn":35},{"ruleId":"1231","severity":1,"message":"1245","line":379,"column":27,"nodeType":"1233","messageId":"1234","endLine":379,"endColumn":29},{"ruleId":"1231","severity":1,"message":"1245","line":379,"column":54,"nodeType":"1233","messageId":"1234","endLine":379,"endColumn":56},{"ruleId":"1231","severity":1,"message":"1245","line":379,"column":81,"nodeType":"1233","messageId":"1234","endLine":379,"endColumn":83},{"ruleId":"1239","severity":1,"message":"1243","line":386,"column":26,"nodeType":"1241","messageId":"1244","endLine":386,"endColumn":28},{"ruleId":"1239","severity":1,"message":"1243","line":388,"column":33,"nodeType":"1241","messageId":"1244","endLine":388,"endColumn":35},{"ruleId":"1231","severity":1,"message":"1245","line":392,"column":27,"nodeType":"1233","messageId":"1234","endLine":392,"endColumn":29},{"ruleId":"1231","severity":1,"message":"1245","line":392,"column":54,"nodeType":"1233","messageId":"1234","endLine":392,"endColumn":56},{"ruleId":"1231","severity":1,"message":"1245","line":392,"column":81,"nodeType":"1233","messageId":"1234","endLine":392,"endColumn":83},{"ruleId":"1231","severity":1,"message":"1245","line":399,"column":23,"nodeType":"1233","messageId":"1234","endLine":399,"endColumn":25},{"ruleId":"1231","severity":1,"message":"1245","line":399,"column":44,"nodeType":"1233","messageId":"1234","endLine":399,"endColumn":46},{"ruleId":"1231","severity":1,"message":"1245","line":401,"column":30,"nodeType":"1233","messageId":"1234","endLine":401,"endColumn":32},{"ruleId":"1231","severity":1,"message":"1245","line":403,"column":33,"nodeType":"1233","messageId":"1234","endLine":403,"endColumn":35},{"ruleId":"1231","severity":1,"message":"1245","line":414,"column":31,"nodeType":"1233","messageId":"1234","endLine":414,"endColumn":33},{"ruleId":"1231","severity":1,"message":"1245","line":415,"column":37,"nodeType":"1233","messageId":"1234","endLine":415,"endColumn":39},{"ruleId":"1239","severity":1,"message":"1243","line":416,"column":31,"nodeType":"1241","messageId":"1244","endLine":416,"endColumn":33},{"ruleId":"1231","severity":1,"message":"1245","line":419,"column":23,"nodeType":"1233","messageId":"1234","endLine":419,"endColumn":25},{"ruleId":"1231","severity":1,"message":"1245","line":419,"column":43,"nodeType":"1233","messageId":"1234","endLine":419,"endColumn":45},{"ruleId":"1231","severity":1,"message":"1245","line":424,"column":23,"nodeType":"1233","messageId":"1234","endLine":424,"endColumn":25},{"ruleId":"1231","severity":1,"message":"1245","line":424,"column":47,"nodeType":"1233","messageId":"1234","endLine":424,"endColumn":49},{"ruleId":"1231","severity":1,"message":"1245","line":432,"column":23,"nodeType":"1233","messageId":"1234","endLine":432,"endColumn":25},{"ruleId":"1231","severity":1,"message":"1245","line":432,"column":44,"nodeType":"1233","messageId":"1234","endLine":432,"endColumn":46},{"ruleId":"1231","severity":1,"message":"1245","line":434,"column":30,"nodeType":"1233","messageId":"1234","endLine":434,"endColumn":32},{"ruleId":"1231","severity":1,"message":"1245","line":436,"column":33,"nodeType":"1233","messageId":"1234","endLine":436,"endColumn":35},{"ruleId":"1231","severity":1,"message":"1245","line":448,"column":29,"nodeType":"1233","messageId":"1234","endLine":448,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":449,"column":35,"nodeType":"1233","messageId":"1234","endLine":449,"endColumn":37},{"ruleId":"1239","severity":1,"message":"1243","line":450,"column":29,"nodeType":"1241","messageId":"1244","endLine":450,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":453,"column":21,"nodeType":"1233","messageId":"1234","endLine":453,"endColumn":23},{"ruleId":"1231","severity":1,"message":"1245","line":453,"column":41,"nodeType":"1233","messageId":"1234","endLine":453,"endColumn":43},{"ruleId":"1231","severity":1,"message":"1245","line":458,"column":21,"nodeType":"1233","messageId":"1234","endLine":458,"endColumn":23},{"ruleId":"1231","severity":1,"message":"1245","line":458,"column":45,"nodeType":"1233","messageId":"1234","endLine":458,"endColumn":47},{"ruleId":"1231","severity":1,"message":"1245","line":464,"column":21,"nodeType":"1233","messageId":"1234","endLine":464,"endColumn":23},{"ruleId":"1231","severity":1,"message":"1245","line":464,"column":42,"nodeType":"1233","messageId":"1234","endLine":464,"endColumn":44},{"ruleId":"1231","severity":1,"message":"1245","line":466,"column":28,"nodeType":"1233","messageId":"1234","endLine":466,"endColumn":30},{"ruleId":"1231","severity":1,"message":"1245","line":468,"column":31,"nodeType":"1233","messageId":"1234","endLine":468,"endColumn":33},{"ruleId":"1231","severity":1,"message":"1245","line":600,"column":45,"nodeType":"1233","messageId":"1234","endLine":600,"endColumn":47},{"ruleId":"1231","severity":1,"message":"1245","line":600,"column":83,"nodeType":"1233","messageId":"1234","endLine":600,"endColumn":85},{"ruleId":"1298","severity":1,"message":"1372","line":637,"column":6,"nodeType":"1300","endLine":637,"endColumn":54,"suggestions":"1373"},{"ruleId":"1298","severity":1,"message":"1299","line":50,"column":8,"nodeType":"1300","endLine":50,"endColumn":10,"suggestions":"1374"},{"ruleId":"1231","severity":1,"message":"1245","line":22,"column":33,"nodeType":"1233","messageId":"1234","endLine":22,"endColumn":35},{"ruleId":"1239","severity":1,"message":"1243","line":23,"column":35,"nodeType":"1241","messageId":"1244","endLine":23,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":26,"column":29,"nodeType":"1233","messageId":"1234","endLine":26,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":26,"column":61,"nodeType":"1233","messageId":"1234","endLine":26,"endColumn":63},{"ruleId":"1231","severity":1,"message":"1245","line":26,"column":88,"nodeType":"1233","messageId":"1234","endLine":26,"endColumn":90},{"ruleId":"1231","severity":1,"message":"1245","line":33,"column":40,"nodeType":"1233","messageId":"1234","endLine":33,"endColumn":42},{"ruleId":"1239","severity":1,"message":"1243","line":35,"column":35,"nodeType":"1241","messageId":"1244","endLine":35,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":38,"column":29,"nodeType":"1233","messageId":"1234","endLine":38,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":38,"column":67,"nodeType":"1233","messageId":"1234","endLine":38,"endColumn":69},{"ruleId":"1231","severity":1,"message":"1245","line":38,"column":108,"nodeType":"1233","messageId":"1234","endLine":38,"endColumn":110},{"ruleId":"1231","severity":1,"message":"1245","line":45,"column":40,"nodeType":"1233","messageId":"1234","endLine":45,"endColumn":42},{"ruleId":"1239","severity":1,"message":"1243","line":46,"column":35,"nodeType":"1241","messageId":"1244","endLine":46,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":49,"column":29,"nodeType":"1233","messageId":"1234","endLine":49,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":49,"column":68,"nodeType":"1233","messageId":"1234","endLine":49,"endColumn":70},{"ruleId":"1231","severity":1,"message":"1245","line":56,"column":40,"nodeType":"1233","messageId":"1234","endLine":56,"endColumn":42},{"ruleId":"1239","severity":1,"message":"1243","line":57,"column":35,"nodeType":"1241","messageId":"1244","endLine":57,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":60,"column":29,"nodeType":"1233","messageId":"1234","endLine":60,"endColumn":31},{"ruleId":"1231","severity":1,"message":"1245","line":67,"column":40,"nodeType":"1233","messageId":"1234","endLine":67,"endColumn":42},{"ruleId":"1239","severity":1,"message":"1243","line":68,"column":35,"nodeType":"1241","messageId":"1244","endLine":68,"endColumn":37},{"ruleId":"1298","severity":1,"message":"1362","line":75,"column":8,"nodeType":"1300","endLine":75,"endColumn":29,"suggestions":"1375"},{"ruleId":"1231","severity":1,"message":"1245","line":68,"column":70,"nodeType":"1233","messageId":"1234","endLine":68,"endColumn":72},{"ruleId":"1231","severity":1,"message":"1245","line":95,"column":21,"nodeType":"1233","messageId":"1234","endLine":95,"endColumn":23},{"ruleId":"1222","severity":1,"message":"1291","line":6,"column":10,"nodeType":"1224","messageId":"1225","endLine":6,"endColumn":20},{"ruleId":"1222","severity":1,"message":"1376","line":6,"column":30,"nodeType":"1224","messageId":"1225","endLine":6,"endColumn":35},{"ruleId":"1222","severity":1,"message":"1377","line":11,"column":8,"nodeType":"1224","messageId":"1225","endLine":11,"endColumn":17},{"ruleId":"1222","severity":1,"message":"1350","line":15,"column":8,"nodeType":"1224","messageId":"1225","endLine":15,"endColumn":22},{"ruleId":"1222","severity":1,"message":"1348","line":16,"column":8,"nodeType":"1224","messageId":"1225","endLine":16,"endColumn":22},{"ruleId":"1222","severity":1,"message":"1347","line":17,"column":8,"nodeType":"1224","messageId":"1225","endLine":17,"endColumn":28},{"ruleId":"1222","severity":1,"message":"1378","line":20,"column":10,"nodeType":"1224","messageId":"1225","endLine":20,"endColumn":29},{"ruleId":"1222","severity":1,"message":"1379","line":22,"column":5,"nodeType":"1224","messageId":"1225","endLine":22,"endColumn":9},{"ruleId":"1231","severity":1,"message":"1245","line":206,"column":31,"nodeType":"1233","messageId":"1234","endLine":206,"endColumn":33},{"ruleId":"1231","severity":1,"message":"1245","line":213,"column":78,"nodeType":"1233","messageId":"1234","endLine":213,"endColumn":80},{"ruleId":"1231","severity":1,"message":"1245","line":227,"column":70,"nodeType":"1233","messageId":"1234","endLine":227,"endColumn":72},{"ruleId":"1231","severity":1,"message":"1245","line":235,"column":79,"nodeType":"1233","messageId":"1234","endLine":235,"endColumn":81},{"ruleId":"1231","severity":1,"message":"1245","line":248,"column":75,"nodeType":"1233","messageId":"1234","endLine":248,"endColumn":77},{"ruleId":"1231","severity":1,"message":"1245","line":284,"column":31,"nodeType":"1233","messageId":"1234","endLine":284,"endColumn":33},{"ruleId":"1231","severity":1,"message":"1245","line":299,"column":53,"nodeType":"1233","messageId":"1234","endLine":299,"endColumn":55},{"ruleId":"1231","severity":1,"message":"1245","line":311,"column":26,"nodeType":"1233","messageId":"1234","endLine":311,"endColumn":28},{"ruleId":"1231","severity":1,"message":"1245","line":334,"column":144,"nodeType":"1233","messageId":"1234","endLine":334,"endColumn":146},{"ruleId":"1231","severity":1,"message":"1245","line":518,"column":86,"nodeType":"1233","messageId":"1234","endLine":518,"endColumn":88},{"ruleId":"1231","severity":1,"message":"1232","line":548,"column":85,"nodeType":"1233","messageId":"1234","endLine":548,"endColumn":87},{"ruleId":"1222","severity":1,"message":"1261","line":2,"column":80,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":85},{"ruleId":"1222","severity":1,"message":"1342","line":4,"column":25,"nodeType":"1224","messageId":"1225","endLine":4,"endColumn":31},{"ruleId":"1222","severity":1,"message":"1380","line":6,"column":20,"nodeType":"1224","messageId":"1225","endLine":6,"endColumn":33},{"ruleId":"1231","severity":1,"message":"1245","line":52,"column":45,"nodeType":"1233","messageId":"1234","endLine":52,"endColumn":47},{"ruleId":"1231","severity":1,"message":"1245","line":83,"column":37,"nodeType":"1233","messageId":"1234","endLine":83,"endColumn":39},{"ruleId":"1231","severity":1,"message":"1245","line":85,"column":35,"nodeType":"1233","messageId":"1234","endLine":85,"endColumn":37},{"ruleId":"1231","severity":1,"message":"1245","line":96,"column":27,"nodeType":"1233","messageId":"1234","endLine":96,"endColumn":29},{"ruleId":"1231","severity":1,"message":"1245","line":114,"column":45,"nodeType":"1233","messageId":"1234","endLine":114,"endColumn":47},{"ruleId":"1231","severity":1,"message":"1245","line":149,"column":53,"nodeType":"1233","messageId":"1234","endLine":149,"endColumn":55},{"ruleId":"1222","severity":1,"message":"1381","line":2,"column":43,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":52},{"ruleId":"1222","severity":1,"message":"1342","line":4,"column":25,"nodeType":"1224","messageId":"1225","endLine":4,"endColumn":31},{"ruleId":"1222","severity":1,"message":"1303","line":7,"column":8,"nodeType":"1224","messageId":"1225","endLine":7,"endColumn":13},{"ruleId":"1226","severity":1,"message":"1227","line":10,"column":5,"nodeType":"1228","messageId":"1229","endLine":12,"endColumn":6},{"ruleId":"1382","severity":1,"message":"1383","line":26,"column":9,"nodeType":"1384","messageId":"1385","endLine":32,"endColumn":10},{"ruleId":"1386","severity":1,"message":"1387","line":30,"column":13,"nodeType":"1388","messageId":"1389","endLine":31,"endColumn":67},{"ruleId":"1222","severity":1,"message":"1381","line":2,"column":43,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":52},{"ruleId":"1222","severity":1,"message":"1341","line":4,"column":10,"nodeType":"1224","messageId":"1225","endLine":4,"endColumn":23},{"ruleId":"1222","severity":1,"message":"1288","line":2,"column":28,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":35},{"ruleId":"1222","severity":1,"message":"1289","line":2,"column":54,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":57},{"ruleId":"1222","severity":1,"message":"1290","line":2,"column":59,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":70},{"ruleId":"1222","severity":1,"message":"1291","line":2,"column":80,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":90},{"ruleId":"1222","severity":1,"message":"1341","line":4,"column":10,"nodeType":"1224","messageId":"1225","endLine":4,"endColumn":23},{"ruleId":"1222","severity":1,"message":"1342","line":4,"column":25,"nodeType":"1224","messageId":"1225","endLine":4,"endColumn":31},{"ruleId":"1222","severity":1,"message":"1343","line":5,"column":8,"nodeType":"1224","messageId":"1225","endLine":5,"endColumn":13},{"ruleId":"1222","severity":1,"message":"1344","line":6,"column":10,"nodeType":"1224","messageId":"1225","endLine":6,"endColumn":18},{"ruleId":"1222","severity":1,"message":"1377","line":13,"column":8,"nodeType":"1224","messageId":"1225","endLine":13,"endColumn":17},{"ruleId":"1222","severity":1,"message":"1347","line":16,"column":8,"nodeType":"1224","messageId":"1225","endLine":16,"endColumn":28},{"ruleId":"1222","severity":1,"message":"1348","line":17,"column":8,"nodeType":"1224","messageId":"1225","endLine":17,"endColumn":22},{"ruleId":"1222","severity":1,"message":"1349","line":18,"column":8,"nodeType":"1224","messageId":"1225","endLine":18,"endColumn":18},{"ruleId":"1222","severity":1,"message":"1350","line":19,"column":8,"nodeType":"1224","messageId":"1225","endLine":19,"endColumn":22},{"ruleId":"1235","severity":1,"message":"1238","line":98,"column":17,"nodeType":"1224","messageId":"1237","endLine":98,"endColumn":18},{"ruleId":"1231","severity":1,"message":"1245","line":138,"column":44,"nodeType":"1233","messageId":"1234","endLine":138,"endColumn":46},{"ruleId":"1231","severity":1,"message":"1245","line":151,"column":31,"nodeType":"1233","messageId":"1234","endLine":151,"endColumn":33},{"ruleId":"1231","severity":1,"message":"1245","line":157,"column":78,"nodeType":"1233","messageId":"1234","endLine":157,"endColumn":80},{"ruleId":"1231","severity":1,"message":"1245","line":168,"column":70,"nodeType":"1233","messageId":"1234","endLine":168,"endColumn":72},{"ruleId":"1231","severity":1,"message":"1245","line":174,"column":79,"nodeType":"1233","messageId":"1234","endLine":174,"endColumn":81},{"ruleId":"1231","severity":1,"message":"1245","line":185,"column":75,"nodeType":"1233","messageId":"1234","endLine":185,"endColumn":77},{"ruleId":"1231","severity":1,"message":"1245","line":218,"column":31,"nodeType":"1233","messageId":"1234","endLine":218,"endColumn":33},{"ruleId":"1235","severity":1,"message":"1238","line":314,"column":17,"nodeType":"1224","messageId":"1237","endLine":314,"endColumn":18},{"ruleId":"1231","severity":1,"message":"1245","line":417,"column":20,"nodeType":"1233","messageId":"1234","endLine":417,"endColumn":22},{"ruleId":"1231","severity":1,"message":"1245","line":426,"column":26,"nodeType":"1233","messageId":"1234","endLine":426,"endColumn":28},{"ruleId":"1231","severity":1,"message":"1245","line":452,"column":127,"nodeType":"1233","messageId":"1234","endLine":452,"endColumn":129},{"ruleId":"1231","severity":1,"message":"1245","line":656,"column":78,"nodeType":"1233","messageId":"1234","endLine":656,"endColumn":80},{"ruleId":"1231","severity":1,"message":"1232","line":685,"column":81,"nodeType":"1233","messageId":"1234","endLine":685,"endColumn":83},{"ruleId":"1222","severity":1,"message":"1261","line":2,"column":80,"nodeType":"1224","messageId":"1225","endLine":2,"endColumn":85},{"ruleId":"1222","severity":1,"message":"1342","line":4,"column":25,"nodeType":"1224","messageId":"1225","endLine":4,"endColumn":31},{"ruleId":"1222","severity":1,"message":"1380","line":6,"column":20,"nodeType":"1224","messageId":"1225","endLine":6,"endColumn":33},{"ruleId":"1231","severity":1,"message":"1245","line":49,"column":47,"nodeType":"1233","messageId":"1234","endLine":49,"endColumn":49},{"ruleId":"1231","severity":1,"message":"1245","line":82,"column":37,"nodeType":"1233","messageId":"1234","endLine":82,"endColumn":39},{"ruleId":"1231","severity":1,"message":"1245","line":89,"column":27,"nodeType":"1233","messageId":"1234","endLine":89,"endColumn":29},{"ruleId":"1298","severity":1,"message":"1390","line":79,"column":7,"nodeType":"1300","endLine":79,"endColumn":27,"suggestions":"1391"},{"ruleId":"1298","severity":1,"message":"1390","line":89,"column":7,"nodeType":"1300","endLine":89,"endColumn":26,"suggestions":"1392"},{"ruleId":"1298","severity":1,"message":"1390","line":99,"column":7,"nodeType":"1300","endLine":99,"endColumn":28,"suggestions":"1393"},{"ruleId":"1298","severity":1,"message":"1390","line":129,"column":7,"nodeType":"1300","endLine":129,"endColumn":78,"suggestions":"1394"},{"ruleId":"1222","severity":1,"message":"1303","line":11,"column":8,"nodeType":"1224","messageId":"1225","endLine":11,"endColumn":13},{"ruleId":"1222","severity":1,"message":"1395","line":30,"column":5,"nodeType":"1224","messageId":"1225","endLine":30,"endColumn":21},{"ruleId":"1222","severity":1,"message":"1396","line":31,"column":5,"nodeType":"1224","messageId":"1225","endLine":31,"endColumn":18},{"ruleId":"1222","severity":1,"message":"1397","line":32,"column":5,"nodeType":"1224","messageId":"1225","endLine":32,"endColumn":18},{"ruleId":"1231","severity":1,"message":"1245","line":54,"column":53,"nodeType":"1233","messageId":"1234","endLine":54,"endColumn":55},{"ruleId":"1231","severity":1,"message":"1245","line":81,"column":62,"nodeType":"1233","messageId":"1234","endLine":81,"endColumn":64},{"ruleId":"1231","severity":1,"message":"1245","line":83,"column":44,"nodeType":"1233","messageId":"1234","endLine":83,"endColumn":46},{"ruleId":"1231","severity":1,"message":"1245","line":45,"column":44,"nodeType":"1233","messageId":"1234","endLine":45,"endColumn":46},{"ruleId":"1231","severity":1,"message":"1245","line":58,"column":44,"nodeType":"1233","messageId":"1234","endLine":58,"endColumn":46},{"ruleId":"1231","severity":1,"message":"1245","line":177,"column":33,"nodeType":"1233","messageId":"1234","endLine":177,"endColumn":35},{"ruleId":"1231","severity":1,"message":"1245","line":178,"column":33,"nodeType":"1233","messageId":"1234","endLine":178,"endColumn":35},{"ruleId":"1231","severity":1,"message":"1245","line":192,"column":33,"nodeType":"1233","messageId":"1234","endLine":192,"endColumn":35},{"ruleId":"1231","severity":1,"message":"1245","line":193,"column":36,"nodeType":"1233","messageId":"1234","endLine":193,"endColumn":38},{"ruleId":"1231","severity":1,"message":"1245","line":194,"column":63,"nodeType":"1233","messageId":"1234","endLine":194,"endColumn":65},{"ruleId":"1231","severity":1,"message":"1245","line":241,"column":40,"nodeType":"1233","messageId":"1234","endLine":241,"endColumn":42},{"ruleId":"1231","severity":1,"message":"1245","line":242,"column":44,"nodeType":"1233","messageId":"1234","endLine":242,"endColumn":46},{"ruleId":"1222","severity":1,"message":"1398","line":15,"column":8,"nodeType":"1224","messageId":"1225","endLine":15,"endColumn":22},{"ruleId":"1222","severity":1,"message":"1367","line":18,"column":10,"nodeType":"1224","messageId":"1225","endLine":18,"endColumn":21},{"ruleId":"1231","severity":1,"message":"1245","line":132,"column":57,"nodeType":"1233","messageId":"1234","endLine":132,"endColumn":59},{"ruleId":"1231","severity":1,"message":"1245","line":155,"column":86,"nodeType":"1233","messageId":"1234","endLine":155,"endColumn":88},{"ruleId":"1231","severity":1,"message":"1245","line":175,"column":52,"nodeType":"1233","messageId":"1234","endLine":175,"endColumn":54},{"ruleId":"1264","severity":1,"message":"1265","line":176,"column":109,"nodeType":"1266","endLine":176,"endColumn":192},{"ruleId":"1231","severity":1,"message":"1245","line":194,"column":105,"nodeType":"1233","messageId":"1234","endLine":194,"endColumn":107},{"ruleId":"1298","severity":1,"message":"1299","line":105,"column":8,"nodeType":"1300","endLine":105,"endColumn":10,"suggestions":"1399"},{"ruleId":"1298","severity":1,"message":"1299","line":55,"column":6,"nodeType":"1300","endLine":55,"endColumn":8,"suggestions":"1400"},{"ruleId":"1298","severity":1,"message":"1299","line":51,"column":6,"nodeType":"1300","endLine":51,"endColumn":8,"suggestions":"1401"},"no-unused-vars","'FiChevronRight' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'joinType' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-redeclare","'newState' is already defined.","redeclared","'i' is already defined.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","Array.prototype.map() expects a return value from arrow function.","expectedInside","Expected '===' and instead saw '=='.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["1402","1403"],["1404","1405"],"no-dupe-keys","Duplicate key 'updateShiftTypes'.","ObjectExpression","'emailjs' is defined but never used.",["1406","1407"],["1408","1409"],["1410","1411"],["1412","1413"],"'FiXSquare' is defined but never used.","'Alert' is defined but never used.","'statusConfirmPassword' is assigned a value but never used.","'navbarContainer' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'DataGrid' is defined but never used.","'NavLink' is defined but never used.","'name' is assigned a value but never used.","'Page' is defined but never used.","'Label' is defined but never used.","'Scrollbar' is defined but never used.","'SearchNotFound' is defined but never used.","'sentenceCase' is defined but never used.","'Avatar' is defined but never used.","'TablePagination' is defined but never used.","'EmployeeToolbar' is defined but never used.","'EmployeeObj' is defined but never used.","'filterName' is assigned a value but never used.","'filteredUsers' is assigned a value but never used.","'page' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","'Typography' is defined but never used.","'DiApple' is defined but never used.","'Divider' is defined but never used.","'Box' is defined but never used.","'CardContent' is defined but never used.","'InputLabel' is defined but never used.","'Image' is defined but never used.","'productTypes' is assigned a value but never used.","'typeSet' is assigned a value but never used.","'Grid' is defined but never used.","'useState' is defined but never used.","'useSelector' is defined but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["1414"],"'isContinue' is assigned a value but never used.","'axios' is defined but never used.","'infoUser' is assigned a value but never used.","'TimePicker' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps",["1415"],"'RiMoneyDollarCircleFill' is defined but never used.","'BsCashCoin' is defined but never used.","'salary' is assigned a value but never used.","'listReciept' is assigned a value but never used.","'totalMoney' is assigned a value but never used.","'setTotalMoney' is assigned a value but never used.","'money' is assigned a value but never used.","'realDate' is already defined.","'date' is already defined.","React Hook React.useEffect has missing dependencies: 'listTimeKeeping' and 'nowTime'. Either include them or remove the dependency array.",["1416"],"'fromHour' is already defined.","'fromMin' is already defined.","'toHour' is already defined.","'toMin' is already defined.","'importProduct' is already defined.","'exportProduct' is already defined.","React Hook React.useEffect has missing dependencies: 'listProduct', 'listReciept', and 'nowTime'. Either include them or remove the dependency array.",["1417"],"'listUsers' is assigned a value but never used.","'Button' is defined but never used.","'AiOutlineEdit' is defined but never used.","'AiFillDelete' is defined but never used.","'FaCommentsDollar' is defined but never used.","'Icon' is defined but never used.","'moreVerticalFill' is defined but never used.","'Menu' is defined but never used.","'MenuItem' is defined but never used.","React Hook React.useEffect has missing dependencies: 'dispatch' and 'listMAHD'. Either include them or remove the dependency array.",["1418"],"'BiPlusMedical' is defined but never used.","'BiEdit' is defined but never used.","'Stack' is defined but never used.","'GiCancel' is defined but never used.","'Select' is defined but never used.","'FormControl' is defined but never used.","'LocalizationProvider' is defined but never used.","'AdapterDateFns' is defined but never used.","'DatePicker' is defined but never used.","'DateTimePicker' is defined but never used.","'AiFillPlusCircle' is defined but never used.","'CancelIcon' is defined but never used.","'StyledTextField' is assigned a value but never used.","'visuallyHidden' is defined but never used.","'order' is assigned a value but never used.","'orderBy' is assigned a value but never used.","'rowCount' is assigned a value but never used.","'numSelected' is assigned a value but never used.","'onRequestSort' is assigned a value but never used.","'onSelectAllClick' is assigned a value but never used.","'GiPayMoney' is defined but never used.","React Hook React.useEffect has missing dependencies: 'listReciept' and 'nowTime'. Either include them or remove the dependency array.",["1419"],"React Hook React.useEffect has a missing dependency: 'listReciept'. Either include it or remove the dependency array.",["1420"],"'now' is defined but never used.","'useDispatch' is defined but never used.","'title' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'moneyDoanhThu', 'moneyTienGoc'.","unsafeRefs","React Hook React.useEffect has missing dependencies: 'DateInMonth', 'DateInWeek', 'DateInYear', 'GrowthPercent', 'nowTime', 'totalMoneyInMonth', and 'totalMoneyInWeek'. Either include them or remove the dependency array.",["1421"],["1422"],["1423"],"'Modal' is defined but never used.","'GoodImage' is defined but never used.","'GiConsoleController' is defined but never used.","'Link' is defined but never used.","'GiVampireCape' is defined but never used.","'TextField' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-fallthrough","Expected a 'break' statement before 'case'.","SwitchCase","case","React Hook React.useCallback has a missing dependency: 'inputProps'. Either include it or remove the dependency array.",["1424"],["1425"],["1426"],["1427"],"'listProductInfor' is assigned a value but never used.","'joinTypeInfor' is assigned a value but never used.","'listTypeInfor' is assigned a value but never used.","'TableContainer' is defined but never used.",["1428"],["1429"],["1430"],{"messageId":"1431","fix":"1432","desc":"1433"},{"messageId":"1434","fix":"1435","desc":"1436"},{"messageId":"1431","fix":"1437","desc":"1433"},{"messageId":"1434","fix":"1438","desc":"1436"},{"messageId":"1431","fix":"1439","desc":"1433"},{"messageId":"1434","fix":"1440","desc":"1436"},{"messageId":"1431","fix":"1441","desc":"1433"},{"messageId":"1434","fix":"1442","desc":"1436"},{"messageId":"1431","fix":"1443","desc":"1433"},{"messageId":"1434","fix":"1444","desc":"1436"},{"messageId":"1431","fix":"1445","desc":"1433"},{"messageId":"1434","fix":"1446","desc":"1436"},{"desc":"1447","fix":"1448"},{"desc":"1447","fix":"1449"},{"desc":"1450","fix":"1451"},{"desc":"1452","fix":"1453"},{"desc":"1454","fix":"1455"},{"desc":"1456","fix":"1457"},{"desc":"1458","fix":"1459"},{"desc":"1460","fix":"1461"},{"desc":"1447","fix":"1462"},{"desc":"1456","fix":"1463"},{"desc":"1464","fix":"1465"},{"desc":"1464","fix":"1466"},{"desc":"1464","fix":"1467"},{"desc":"1468","fix":"1469"},{"desc":"1447","fix":"1470"},{"desc":"1447","fix":"1471"},{"desc":"1447","fix":"1472"},"removeEscape",{"range":"1473","text":"1474"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"1475","text":"1476"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"1477","text":"1474"},{"range":"1478","text":"1476"},{"range":"1479","text":"1474"},{"range":"1480","text":"1476"},{"range":"1481","text":"1474"},{"range":"1482","text":"1476"},{"range":"1483","text":"1474"},{"range":"1484","text":"1476"},{"range":"1485","text":"1474"},{"range":"1486","text":"1476"},"Update the dependencies array to be: [dispatch]",{"range":"1487","text":"1488"},{"range":"1489","text":"1488"},"Update the dependencies array to be: [listTimeKeeping, nowTime, typeHeaderDashboard]",{"range":"1490","text":"1491"},"Update the dependencies array to be: [listProduct, listReciept, nowTime, typeHeaderDashboard]",{"range":"1492","text":"1493"},"Update the dependencies array to be: [typeReciept, typeByDate, listReciept, statusSelectAll, search, dispatch, listMAHD]",{"range":"1494","text":"1495"},"Update the dependencies array to be: [listReciept, nowTime, typeHeaderDashboard]",{"range":"1496","text":"1497"},"Update the dependencies array to be: [listReciept, value]",{"range":"1498","text":"1499"},"Update the dependencies array to be: [typeTimeDashboard, growth, typeMonth, typeYear, nowTime, DateInYear, GrowthPercent, DateInWeek, totalMoneyInWeek, totalMoneyInMonth, DateInMonth]",{"range":"1500","text":"1501"},{"range":"1502","text":"1488"},{"range":"1503","text":"1497"},"Update the dependencies array to be: [inputProps]",{"range":"1504","text":"1505"},{"range":"1506","text":"1505"},{"range":"1507","text":"1505"},"Update the dependencies array to be: [cancelOnEscape, inputProps, handleRequestSearch, handleCancel]",{"range":"1508","text":"1509"},{"range":"1510","text":"1488"},{"range":"1511","text":"1488"},{"range":"1512","text":"1488"},[5320,5321],"",[5320,5320],"\\",[5336,5337],[5336,5336],[3600,3601],[3600,3600],[3616,3617],[3616,3616],[3138,3139],[3138,3138],[3154,3155],[3154,3154],[311,313],"[dispatch]",[5640,5642],[4875,4896],"[listTimeKeeping, nowTime, typeHeaderDashboard]",[7385,7406],"[listProduct, listReciept, nowTime, typeHeaderDashboard]",[26705,26768],"[typeReciept, typeByDate, listReciept, statusSelectAll, search, dispatch, listMAHD]",[2632,2653],"[listReciept, nowTime, typeHeaderDashboard]",[1461,1468],"[listReciept, value]",[22212,22260],"[typeTimeDashboard, growth, typeMonth, typeYear, nowTime, DateInYear, GrowthPercent, DateInWeek, totalMoneyInWeek, totalMoneyInMonth, DateInMonth]",[1506,1508],[3000,3021],[1989,2009],"[inputProps]",[2200,2219],[2427,2448],[3164,3235],"[cancelOnEscape, inputProps, handleRequestSearch, handleCancel]",[2161,2163],[1481,1483],[1414,1416]]